
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a6ac  0800a6ac  0001a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e8  0800a7e8  00020234  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7e8  0800a7e8  00020234  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7e8  0800a7e8  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800a7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  20000234  0800aa24  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015cc  0800aa24  000215cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df87  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000437b  00000000  00000000  0003e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00042560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00043ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c9ba  00000000  00000000  00044e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019894  00000000  00000000  000617f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097048  00000000  00000000  0007b086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001120ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006104  00000000  00000000  00112124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000234 	.word	0x20000234
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a694 	.word	0x0800a694

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000238 	.word	0x20000238
 8000148:	0800a694 	.word	0x0800a694

0800014c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2102      	movs	r1, #2
 8000154:	4804      	ldr	r0, [pc, #16]	; (8000168 <ToggleLDAC+0x1c>)
 8000156:	f001 ffc6 	bl	80020e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	4802      	ldr	r0, [pc, #8]	; (8000168 <ToggleLDAC+0x1c>)
 8000160:	f001 ffc1 	bl	80020e6 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010800 	.word	0x40010800

0800016c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800016c:	b580      	push	{r7, lr}
 800016e:	b082      	sub	sp, #8
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
 8000174:	460b      	mov	r3, r1
 8000176:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2110      	movs	r1, #16
 800017c:	4808      	ldr	r0, [pc, #32]	; (80001a0 <SendSPI+0x34>)
 800017e:	f001 ffb2 	bl	80020e6 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000182:	1cb9      	adds	r1, r7, #2
 8000184:	2301      	movs	r3, #1
 8000186:	2201      	movs	r2, #1
 8000188:	6878      	ldr	r0, [r7, #4]
 800018a:	f004 f959 	bl	8004440 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	2110      	movs	r1, #16
 8000192:	4803      	ldr	r0, [pc, #12]	; (80001a0 <SendSPI+0x34>)
 8000194:	f001 ffa7 	bl	80020e6 <HAL_GPIO_WritePin>

}
 8000198:	bf00      	nop
 800019a:	3708      	adds	r7, #8
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}
 80001a0:	40010800 	.word	0x40010800

080001a4 <DAC_AD5322_Ch1Ch2>:
  	SendSPI(pSPI,out);
  	SendSPI(pSPI,out);
  	ToggleLDAC();
}
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
 80001b0:	4613      	mov	r3, r2
 80001b2:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001b4:	887b      	ldrh	r3, [r7, #2]
 80001b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001ba:	d302      	bcc.n	80001c2 <DAC_AD5322_Ch1Ch2+0x1e>
 80001bc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001c0:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80001c2:	883b      	ldrh	r3, [r7, #0]
 80001c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001c8:	d302      	bcc.n	80001d0 <DAC_AD5322_Ch1Ch2+0x2c>
 80001ca:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001ce:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001d0:	2300      	movs	r3, #0
 80001d2:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001d4:	2301      	movs	r3, #1
 80001d6:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001d8:	2300      	movs	r3, #0
 80001da:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001dc:	2300      	movs	r3, #0
 80001de:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001e0:	8afb      	ldrh	r3, [r7, #22]
 80001e2:	03db      	lsls	r3, r3, #15
 80001e4:	b21a      	sxth	r2, r3
 80001e6:	8abb      	ldrh	r3, [r7, #20]
 80001e8:	039b      	lsls	r3, r3, #14
 80001ea:	b21b      	sxth	r3, r3
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b21a      	sxth	r2, r3
 80001f0:	8a7b      	ldrh	r3, [r7, #18]
 80001f2:	035b      	lsls	r3, r3, #13
 80001f4:	b21b      	sxth	r3, r3
 80001f6:	4313      	orrs	r3, r2
 80001f8:	b21a      	sxth	r2, r3
 80001fa:	8a3b      	ldrh	r3, [r7, #16]
 80001fc:	031b      	lsls	r3, r3, #12
 80001fe:	b21b      	sxth	r3, r3
 8000200:	4313      	orrs	r3, r2
 8000202:	b21b      	sxth	r3, r3
 8000204:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800020a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800020e:	f023 030f 	bic.w	r3, r3, #15
 8000212:	b21a      	sxth	r2, r3
 8000214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800021c:	b21b      	sxth	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b21b      	sxth	r3, r3
 8000222:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000224:	89bb      	ldrh	r3, [r7, #12]
 8000226:	4619      	mov	r1, r3
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ff9f 	bl	800016c <SendSPI>
  	SendSPI(pSPI,out);
 800022e:	89bb      	ldrh	r3, [r7, #12]
 8000230:	4619      	mov	r1, r3
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f7ff ff9a 	bl	800016c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000238:	2301      	movs	r3, #1
 800023a:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 800023c:	2301      	movs	r3, #1
 800023e:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000240:	2300      	movs	r3, #0
 8000242:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000244:	2300      	movs	r3, #0
 8000246:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000248:	8afb      	ldrh	r3, [r7, #22]
 800024a:	03db      	lsls	r3, r3, #15
 800024c:	b21a      	sxth	r2, r3
 800024e:	8abb      	ldrh	r3, [r7, #20]
 8000250:	039b      	lsls	r3, r3, #14
 8000252:	b21b      	sxth	r3, r3
 8000254:	4313      	orrs	r3, r2
 8000256:	b21a      	sxth	r2, r3
 8000258:	8a7b      	ldrh	r3, [r7, #18]
 800025a:	035b      	lsls	r3, r3, #13
 800025c:	b21b      	sxth	r3, r3
 800025e:	4313      	orrs	r3, r2
 8000260:	b21a      	sxth	r2, r3
 8000262:	8a3b      	ldrh	r3, [r7, #16]
 8000264:	031b      	lsls	r3, r3, #12
 8000266:	b21b      	sxth	r3, r3
 8000268:	4313      	orrs	r3, r2
 800026a:	b21b      	sxth	r3, r3
 800026c:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800026e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000272:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000276:	f023 030f 	bic.w	r3, r3, #15
 800027a:	b21a      	sxth	r2, r3
 800027c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000284:	b21b      	sxth	r3, r3
 8000286:	4313      	orrs	r3, r2
 8000288:	b21b      	sxth	r3, r3
 800028a:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 800028c:	89bb      	ldrh	r3, [r7, #12]
 800028e:	4619      	mov	r1, r3
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ff6b 	bl	800016c <SendSPI>
  	SendSPI(pSPI,out);
 8000296:	89bb      	ldrh	r3, [r7, #12]
 8000298:	4619      	mov	r1, r3
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff66 	bl	800016c <SendSPI>
  	ToggleLDAC();
 80002a0:	f7ff ff54 	bl	800014c <ToggleLDAC>
}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d013      	beq.n	80002ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00b      	beq.n	80002ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002d4:	e000      	b.n	80002d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	b2d2      	uxtb	r2, r2
 80002ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <DWT_Init+0x24>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a06      	ldr	r2, [pc, #24]	; (800031c <DWT_Init+0x24>)
 8000302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000306:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <DWT_Init+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <DWT_Init+0x28>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6013      	str	r3, [r2, #0]
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	e000edf0 	.word	0xe000edf0
 8000320:	e0001000 	.word	0xe0001000

08000324 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	e009      	b.n	800034a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	1c5a      	adds	r2, r3, #1
 800033a:	60ba      	str	r2, [r7, #8]
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ffb4 	bl	80002ac <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	3301      	adds	r3, #1
 8000348:	617b      	str	r3, [r7, #20]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	429a      	cmp	r2, r3
 8000350:	dbf1      	blt.n	8000336 <_write+0x12>
	}
	return len;
 8000352:	687b      	ldr	r3, [r7, #4]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <SetAllDAC>:
{
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
}
void SetAllDAC()
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <SetAllDAC+0x18>)
 8000362:	881b      	ldrh	r3, [r3, #0]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <SetAllDAC+0x1c>)
 8000366:	8812      	ldrh	r2, [r2, #0]
 8000368:	4619      	mov	r1, r3
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <SetAllDAC+0x20>)
 800036c:	f7ff ff1a 	bl	80001a4 <DAC_AD5322_Ch1Ch2>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000290 	.word	0x20000290
 8000378:	20000292 	.word	0x20000292
 800037c:	200009b0 	.word	0x200009b0

08000380 <HAL_TIM_IC_CaptureCallback>:
{
	g_vTIM4_PB6 = 0;
}
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8000388:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	2b00      	cmp	r3, #0
 8000390:	d027      	beq.n	80003e2 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a29      	ldr	r2, [pc, #164]	; (800043c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d149      	bne.n	8000430 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7f1b      	ldrb	r3, [r3, #28]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d145      	bne.n	8000430 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80003a4:	2100      	movs	r1, #0
 80003a6:	4826      	ldr	r0, [pc, #152]	; (8000440 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80003a8:	f004 fd1e 	bl	8004de8 <HAL_TIM_ReadCapturedValue>
 80003ac:	4603      	mov	r3, r0
 80003ae:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 80003b0:	2104      	movs	r1, #4
 80003b2:	4823      	ldr	r0, [pc, #140]	; (8000440 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80003b4:	f004 fd18 	bl	8004de8 <HAL_TIM_ReadCapturedValue>
 80003b8:	4603      	mov	r3, r0
 80003ba:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 80003c2:	8a3a      	ldrh	r2, [r7, #16]
 80003c4:	89fb      	ldrh	r3, [r7, #14]
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 80003cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	bfb8      	it	lt
 80003d4:	425b      	neglt	r3, r3
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80003da:	89ba      	ldrh	r2, [r7, #12]
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80003de:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80003e0:	e026      	b.n	8000430 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a18      	ldr	r2, [pc, #96]	; (8000448 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d121      	bne.n	8000430 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7f1b      	ldrb	r3, [r3, #28]
 80003f0:	2b01      	cmp	r3, #1
 80003f2:	d11d      	bne.n	8000430 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80003f4:	2100      	movs	r1, #0
 80003f6:	4815      	ldr	r0, [pc, #84]	; (800044c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80003f8:	f004 fcf6 	bl	8004de8 <HAL_TIM_ReadCapturedValue>
 80003fc:	4603      	mov	r3, r0
 80003fe:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8000400:	2104      	movs	r1, #4
 8000402:	4812      	ldr	r0, [pc, #72]	; (800044c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000404:	f004 fcf0 	bl	8004de8 <HAL_TIM_ReadCapturedValue>
 8000408:	4603      	mov	r3, r0
 800040a:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 800040c:	4b0e      	ldr	r3, [pc, #56]	; (8000448 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8000412:	8afa      	ldrh	r2, [r7, #22]
 8000414:	8abb      	ldrh	r3, [r7, #20]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	b29b      	uxth	r3, r3
 800041a:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 800041c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000420:	2b00      	cmp	r3, #0
 8000422:	bfb8      	it	lt
 8000424:	425b      	neglt	r3, r3
 8000426:	b29b      	uxth	r3, r3
 8000428:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 800042a:	8a7a      	ldrh	r2, [r7, #18]
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800042e:	801a      	strh	r2, [r3, #0]
}
 8000430:	bf00      	nop
 8000432:	3718      	adds	r7, #24
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	200002ae 	.word	0x200002ae
 800043c:	40000400 	.word	0x40000400
 8000440:	20000938 	.word	0x20000938
 8000444:	200002b0 	.word	0x200002b0
 8000448:	40000800 	.word	0x40000800
 800044c:	200004e8 	.word	0x200004e8
 8000450:	200002b2 	.word	0x200002b2

08000454 <HAL_ADC_ConvCpltCallback>:
{
	return g_VADC;
}
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <HAL_ADC_ConvCpltCallback+0x28>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000468:	f001 f876 	bl	8001558 <HAL_ADC_GetValue>
 800046c:	4603      	mov	r3, r0
 800046e:	b29a      	uxth	r2, r3
 8000470:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_ADC_ConvCpltCallback+0x30>)
 8000472:	801a      	strh	r2, [r3, #0]
	}
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40012400 	.word	0x40012400
 8000480:	20000980 	.word	0x20000980
 8000484:	200002b4 	.word	0x200002b4

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f000 fe73 	bl	8001178 <HAL_Init>

  /* USER CODE BEGIN Init */

/*---------------------------------------------------------------------------*/
#if DWT_INIT
	DWT_Init();
 8000492:	f7ff ff31 	bl	80002f8 <DWT_Init>
#endif /* DWT_INIT */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f96f 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 fb19 	bl	8000ad0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800049e:	f000 fa1b 	bl	80008d8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004a2:	f008 fb01 	bl	8008aa8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004a6:	f000 f9c5 	bl	8000834 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004aa:	f000 fa4d 	bl	8000948 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ae:	f000 faad 	bl	8000a0c <MX_TIM4_Init>
  MX_CRC_Init();
 80004b2:	f000 f9fd 	bl	80008b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

/*---------------------------------------------------------------------------*/
#if TEST_UID
  sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 80004b6:	4b97      	ldr	r3, [pc, #604]	; (8000714 <main+0x28c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	4619      	mov	r1, r3
 80004be:	4b96      	ldr	r3, [pc, #600]	; (8000718 <main+0x290>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	4b95      	ldr	r3, [pc, #596]	; (800071c <main+0x294>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a94      	ldr	r2, [pc, #592]	; (8000720 <main+0x298>)
 80004ce:	6812      	ldr	r2, [r2, #0]
 80004d0:	6812      	ldr	r2, [r2, #0]
 80004d2:	9201      	str	r2, [sp, #4]
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	4992      	ldr	r1, [pc, #584]	; (8000724 <main+0x29c>)
 80004dc:	4892      	ldr	r0, [pc, #584]	; (8000728 <main+0x2a0>)
 80004de:	f008 ffcd 	bl	800947c <siprintf>
  printf(buffer);
 80004e2:	4891      	ldr	r0, [pc, #580]	; (8000728 <main+0x2a0>)
 80004e4:	f008 ffb2 	bl	800944c <iprintf>
#endif /* TEST_UID */

/*---------------------------------------------------------------------------*/
#if TEST_TIM_CAPTURE
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4890      	ldr	r0, [pc, #576]	; (800072c <main+0x2a4>)
 80004ec:	f004 f9da 	bl	80048a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80004f0:	2104      	movs	r1, #4
 80004f2:	488e      	ldr	r0, [pc, #568]	; (800072c <main+0x2a4>)
 80004f4:	f004 f9d6 	bl	80048a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	488d      	ldr	r0, [pc, #564]	; (8000730 <main+0x2a8>)
 80004fc:	f004 f9d2 	bl	80048a4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000500:	2104      	movs	r1, #4
 8000502:	488b      	ldr	r0, [pc, #556]	; (8000730 <main+0x2a8>)
 8000504:	f004 f9ce 	bl	80048a4 <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */

/*---------------------------------------------------------------------------*/
#if TEST_DAC
  SetAllDAC();
 8000508:	f7ff ff28 	bl	800035c <SetAllDAC>
#endif /* TEST_DAC */

/*---------------------------------------------------------------------------*/
#if TEST_ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 800050c:	4889      	ldr	r0, [pc, #548]	; (8000734 <main+0x2ac>)
 800050e:	f001 fa7f 	bl	8001a10 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000512:	4888      	ldr	r0, [pc, #544]	; (8000734 <main+0x2ac>)
 8000514:	f000 ff6a 	bl	80013ec <HAL_ADC_Start_IT>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 800051c:	f000 fe84 	bl	8001228 <HAL_GetTick>
 8000520:	4602      	mov	r2, r0
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	f242 7210 	movw	r2, #10000	; 0x2710
 800052a:	4293      	cmp	r3, r2
 800052c:	d902      	bls.n	8000534 <main+0xac>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 800052e:	f000 fe7b 	bl	8001228 <HAL_GetTick>
 8000532:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 8000534:	f000 fe78 	bl	8001228 <HAL_GetTick>
 8000538:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 800053a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053e:	487e      	ldr	r0, [pc, #504]	; (8000738 <main+0x2b0>)
 8000540:	f001 fdba 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d113      	bne.n	8000576 <main+0xee>
 800054e:	4b7b      	ldr	r3, [pc, #492]	; (800073c <main+0x2b4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d10f      	bne.n	8000576 <main+0xee>
 8000556:	4b7a      	ldr	r3, [pc, #488]	; (8000740 <main+0x2b8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	2b32      	cmp	r3, #50	; 0x32
 8000560:	d909      	bls.n	8000576 <main+0xee>
		{
			short_state1 = 1;
 8000562:	4b76      	ldr	r3, [pc, #472]	; (800073c <main+0x2b4>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8000568:	4b76      	ldr	r3, [pc, #472]	; (8000744 <main+0x2bc>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800056e:	4a74      	ldr	r2, [pc, #464]	; (8000740 <main+0x2b8>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	e02e      	b.n	80005d4 <main+0x14c>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d111      	bne.n	80005a0 <main+0x118>
 800057c:	4b71      	ldr	r3, [pc, #452]	; (8000744 <main+0x2bc>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10d      	bne.n	80005a0 <main+0x118>
 8000584:	4b6e      	ldr	r3, [pc, #440]	; (8000740 <main+0x2b8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000590:	d906      	bls.n	80005a0 <main+0x118>
		{
			long_state1 = 1;
 8000592:	4b6c      	ldr	r3, [pc, #432]	; (8000744 <main+0x2bc>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8000598:	4b6b      	ldr	r3, [pc, #428]	; (8000748 <main+0x2c0>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
 800059e:	e019      	b.n	80005d4 <main+0x14c>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d116      	bne.n	80005d4 <main+0x14c>
 80005a6:	4b65      	ldr	r3, [pc, #404]	; (800073c <main+0x2b4>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d012      	beq.n	80005d4 <main+0x14c>
 80005ae:	4b64      	ldr	r3, [pc, #400]	; (8000740 <main+0x2b8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	2b32      	cmp	r3, #50	; 0x32
 80005b8:	d90c      	bls.n	80005d4 <main+0x14c>
		{
			short_state1 = 0;
 80005ba:	4b60      	ldr	r3, [pc, #384]	; (800073c <main+0x2b4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80005c0:	4a5f      	ldr	r2, [pc, #380]	; (8000740 <main+0x2b8>)
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80005c6:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <main+0x2bc>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d102      	bne.n	80005d4 <main+0x14c>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80005ce:	4b5f      	ldr	r3, [pc, #380]	; (800074c <main+0x2c4>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4857      	ldr	r0, [pc, #348]	; (8000738 <main+0x2b0>)
 80005da:	f001 fd6d 	bl	80020b8 <HAL_GPIO_ReadPin>
 80005de:	4603      	mov	r3, r0
 80005e0:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d113      	bne.n	8000610 <main+0x188>
 80005e8:	4b59      	ldr	r3, [pc, #356]	; (8000750 <main+0x2c8>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10f      	bne.n	8000610 <main+0x188>
 80005f0:	4b58      	ldr	r3, [pc, #352]	; (8000754 <main+0x2cc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	2b32      	cmp	r3, #50	; 0x32
 80005fa:	d909      	bls.n	8000610 <main+0x188>
		{
			short_state2 = 1;
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <main+0x2c8>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8000602:	4b55      	ldr	r3, [pc, #340]	; (8000758 <main+0x2d0>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8000608:	4a52      	ldr	r2, [pc, #328]	; (8000754 <main+0x2cc>)
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e02e      	b.n	800066e <main+0x1e6>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d111      	bne.n	800063a <main+0x1b2>
 8000616:	4b50      	ldr	r3, [pc, #320]	; (8000758 <main+0x2d0>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d10d      	bne.n	800063a <main+0x1b2>
 800061e:	4b4d      	ldr	r3, [pc, #308]	; (8000754 <main+0x2cc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800062a:	d906      	bls.n	800063a <main+0x1b2>
		{
			long_state2 = 1;
 800062c:	4b4a      	ldr	r3, [pc, #296]	; (8000758 <main+0x2d0>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8000632:	4b4a      	ldr	r3, [pc, #296]	; (800075c <main+0x2d4>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	e019      	b.n	800066e <main+0x1e6>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d116      	bne.n	800066e <main+0x1e6>
 8000640:	4b43      	ldr	r3, [pc, #268]	; (8000750 <main+0x2c8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d012      	beq.n	800066e <main+0x1e6>
 8000648:	4b42      	ldr	r3, [pc, #264]	; (8000754 <main+0x2cc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	2b32      	cmp	r3, #50	; 0x32
 8000652:	d90c      	bls.n	800066e <main+0x1e6>
		{
			short_state2 = 0;
 8000654:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <main+0x2c8>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <main+0x2cc>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8000660:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <main+0x2d0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <main+0x1e6>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <main+0x2d8>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	4831      	ldr	r0, [pc, #196]	; (8000738 <main+0x2b0>)
 8000674:	f001 fd20 	bl	80020b8 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d113      	bne.n	80006aa <main+0x222>
 8000682:	4b38      	ldr	r3, [pc, #224]	; (8000764 <main+0x2dc>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d10f      	bne.n	80006aa <main+0x222>
 800068a:	4b37      	ldr	r3, [pc, #220]	; (8000768 <main+0x2e0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	2b32      	cmp	r3, #50	; 0x32
 8000694:	d909      	bls.n	80006aa <main+0x222>
		{
			short_state3 = 1;
 8000696:	4b33      	ldr	r3, [pc, #204]	; (8000764 <main+0x2dc>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <main+0x2e4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80006a2:	4a31      	ldr	r2, [pc, #196]	; (8000768 <main+0x2e0>)
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	e032      	b.n	8000710 <main+0x288>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d111      	bne.n	80006d4 <main+0x24c>
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <main+0x2e4>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10d      	bne.n	80006d4 <main+0x24c>
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <main+0x2e0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	68ba      	ldr	r2, [r7, #8]
 80006be:	1ad3      	subs	r3, r2, r3
 80006c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006c4:	d906      	bls.n	80006d4 <main+0x24c>
		{
			long_state3 = 1;
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <main+0x2e4>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <main+0x2e8>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	e01d      	b.n	8000710 <main+0x288>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80006d4:	797b      	ldrb	r3, [r7, #5]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	f47f af20 	bne.w	800051c <main+0x94>
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <main+0x2dc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f43f af1b 	beq.w	800051c <main+0x94>
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <main+0x2e0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	2b32      	cmp	r3, #50	; 0x32
 80006f0:	f67f af14 	bls.w	800051c <main+0x94>
		{
			short_state3 = 0;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <main+0x2dc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <main+0x2e0>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <main+0x2e4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f47f af09 	bne.w	800051c <main+0x94>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <main+0x2ec>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
	{
 8000710:	e704      	b.n	800051c <main+0x94>
 8000712:	bf00      	nop
 8000714:	20000044 	.word	0x20000044
 8000718:	20000048 	.word	0x20000048
 800071c:	2000004c 	.word	0x2000004c
 8000720:	20000050 	.word	0x20000050
 8000724:	0800a6ac 	.word	0x0800a6ac
 8000728:	20000250 	.word	0x20000250
 800072c:	20000938 	.word	0x20000938
 8000730:	200004e8 	.word	0x200004e8
 8000734:	20000980 	.word	0x20000980
 8000738:	40010c00 	.word	0x40010c00
 800073c:	20000294 	.word	0x20000294
 8000740:	20000298 	.word	0x20000298
 8000744:	20000295 	.word	0x20000295
 8000748:	2000029c 	.word	0x2000029c
 800074c:	2000029d 	.word	0x2000029d
 8000750:	2000029e 	.word	0x2000029e
 8000754:	200002a0 	.word	0x200002a0
 8000758:	2000029f 	.word	0x2000029f
 800075c:	200002a4 	.word	0x200002a4
 8000760:	200002a5 	.word	0x200002a5
 8000764:	200002a6 	.word	0x200002a6
 8000768:	200002a8 	.word	0x200002a8
 800076c:	200002a7 	.word	0x200002a7
 8000770:	200002ac 	.word	0x200002ac
 8000774:	200002ad 	.word	0x200002ad

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f008 fe58 	bl	800943c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f832 	bl	8003838 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007da:	f000 fa2f 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	230f      	movs	r3, #15
 80007e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2102      	movs	r1, #2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fa9c 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000806:	f000 fa19 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800080a:	2312      	movs	r3, #18
 800080c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800080e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000812:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f003 fc12 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000826:	f000 fa09 	bl	8000c3c <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <MX_ADC1_Init+0x78>)
 8000848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_ADC1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000852:	2201      	movs	r2, #1
 8000854:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_ADC1_Init+0x74>)
 800085e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000862:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_ADC1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000872:	f000 fce3 	bl	800123c <HAL_ADC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 f9de 	bl	8000c3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000880:	2303      	movs	r3, #3
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000884:	2301      	movs	r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000888:	2302      	movs	r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_ADC1_Init+0x74>)
 8000892:	f000 ff39 	bl	8001708 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800089c:	f000 f9ce 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000980 	.word	0x20000980
 80008ac:	40012400 	.word	0x40012400

080008b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_CRC_Init+0x20>)
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <MX_CRC_Init+0x24>)
 80008b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_CRC_Init+0x20>)
 80008bc:	f001 fa5b 	bl	8001d76 <HAL_CRC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008c6:	f000 f9b9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000930 	.word	0x20000930
 80008d4:	40023000 	.word	0x40023000

080008d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI1_Init+0x68>)
 80008de:	4a19      	ldr	r2, [pc, #100]	; (8000944 <MX_SPI1_Init+0x6c>)
 80008e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI1_Init+0x68>)
 80008e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_SPI1_Init+0x68>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI1_Init+0x68>)
 80008f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_SPI1_Init+0x68>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x68>)
 8000906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x68>)
 800090e:	2208      	movs	r2, #8
 8000910:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI1_Init+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x68>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI1_Init+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x68>)
 8000926:	220a      	movs	r2, #10
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI1_Init+0x68>)
 800092c:	f003 fd04 	bl	8004338 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000936:	f000 f981 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200009b0 	.word	0x200009b0
 8000944:	40013000 	.word	0x40013000

08000948 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000964:	4b27      	ldr	r3, [pc, #156]	; (8000a04 <MX_TIM3_Init+0xbc>)
 8000966:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <MX_TIM3_Init+0xc0>)
 8000968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_TIM3_Init+0xbc>)
 800096c:	2247      	movs	r2, #71	; 0x47
 800096e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_TIM3_Init+0xbc>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_TIM3_Init+0xbc>)
 8000978:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800097c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_TIM3_Init+0xbc>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM3_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800098a:	481e      	ldr	r0, [pc, #120]	; (8000a04 <MX_TIM3_Init+0xbc>)
 800098c:	f003 ff3a 	bl	8004804 <HAL_TIM_IC_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000996:	f000 f951 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	4816      	ldr	r0, [pc, #88]	; (8000a04 <MX_TIM3_Init+0xbc>)
 80009aa:	f004 fc19 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009b4:	f000 f942 	bl	8000c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_TIM3_Init+0xbc>)
 80009d0:	f004 f976 	bl	8004cc0 <HAL_TIM_IC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80009da:	f000 f92f 	bl	8000c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009de:	2302      	movs	r3, #2
 80009e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009e2:	2302      	movs	r3, #2
 80009e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_TIM3_Init+0xbc>)
 80009ee:	f004 f967 	bl	8004cc0 <HAL_TIM_IC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80009f8:	f000 f920 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000938 	.word	0x20000938
 8000a08:	40000400 	.word	0x40000400

08000a0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a2a:	4a28      	ldr	r2, [pc, #160]	; (8000acc <MX_TIM4_Init+0xc0>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a30:	2247      	movs	r2, #71	; 0x47
 8000a32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a3c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000a40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000a4e:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a50:	f003 fed8 	bl	8004804 <HAL_TIM_IC_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f8ef 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a6e:	f004 fbb7 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000a78:	f000 f8e0 	bl	8000c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000a94:	f004 f914 	bl	8004cc0 <HAL_TIM_IC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000a9e:	f000 f8cd 	bl	8000c3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_TIM4_Init+0xbc>)
 8000ab2:	f004 f905 	bl	8004cc0 <HAL_TIM_IC_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000abc:	f000 f8be 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	200004e8 	.word	0x200004e8
 8000acc:	40000800 	.word	0x40000800

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a50      	ldr	r2, [pc, #320]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b4e      	ldr	r3, [pc, #312]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afc:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a4a      	ldr	r2, [pc, #296]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b32:	f043 0308 	orr.w	r3, r3, #8
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_GPIO_Init+0x15c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4835      	ldr	r0, [pc, #212]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000b5a:	f001 f929 	bl	8001db0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b64:	4832      	ldr	r0, [pc, #200]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000b66:	f001 fabe 	bl	80020e6 <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b6e:	e002      	b.n	8000b76 <MX_GPIO_Init+0xa6>
 8000b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b72:	3301      	adds	r3, #1
 8000b74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b78:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d9f7      	bls.n	8000b70 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4828      	ldr	r0, [pc, #160]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000b90:	f001 f90e 	bl	8001db0 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 8000b94:	2300      	movs	r3, #0
 8000b96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000b98:	e002      	b.n	8000ba0 <MX_GPIO_Init+0xd0>
 8000b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ba2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d9f7      	bls.n	8000b9a <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb0:	4820      	ldr	r0, [pc, #128]	; (8000c34 <MX_GPIO_Init+0x164>)
 8000bb2:	f001 fa98 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f240 4112 	movw	r1, #1042	; 0x412
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000bbe:	f001 fa92 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	481a      	ldr	r0, [pc, #104]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000bc8:	f001 fa8d 	bl	80020e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4619      	mov	r1, r3
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_GPIO_Init+0x164>)
 8000be6:	f001 f8e3 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000bea:	f240 4316 	movw	r3, #1046	; 0x416
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MX_GPIO_Init+0x160>)
 8000c04:	f001 f8d4 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c08:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_GPIO_Init+0x168>)
 8000c1e:	f001 f8c7 	bl	8001db0 <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	; 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010c00 	.word	0x40010c00

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x5c>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_MspInit+0x60>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_MspInit+0x60>)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000

08000cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <HAL_ADC_MspInit+0x7c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d129      	bne.n	8000d20 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_ADC_MspInit+0x84>)
 8000d0c:	f001 f850 	bl	8001db0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2012      	movs	r0, #18
 8000d16:	f000 fff8 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d1a:	2012      	movs	r0, #18
 8000d1c:	f001 f811 	bl	8001d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40012400 	.word	0x40012400
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	40010800 	.word	0x40010800

08000d34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_CRC_MspInit+0x34>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10b      	bne.n	8000d5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_CRC_MspInit+0x38>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_CRC_MspInit+0x38>)
 8000d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d50:	6153      	str	r3, [r2, #20]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_CRC_MspInit+0x38>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40023000 	.word	0x40023000
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <HAL_SPI_MspInit+0x70>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_SPI_MspInit+0x74>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8000dc0:	23a0      	movs	r3, #160	; 0xa0
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_SPI_MspInit+0x78>)
 8000dd4:	f000 ffec 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40013000 	.word	0x40013000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010800 	.word	0x40010800

08000dec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a3b      	ldr	r2, [pc, #236]	; (8000ef4 <HAL_TIM_IC_MspInit+0x108>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d13e      	bne.n	8000e8a <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e0e:	69db      	ldr	r3, [r3, #28]
 8000e10:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	61d3      	str	r3, [r2, #28]
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b31      	ldr	r3, [pc, #196]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482b      	ldr	r0, [pc, #172]	; (8000efc <HAL_TIM_IC_MspInit+0x110>)
 8000e50:	f000 ffae 	bl	8001db0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_TIM_IC_MspInit+0x114>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <HAL_TIM_IC_MspInit+0x114>)
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f000 ff44 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e82:	201d      	movs	r0, #29
 8000e84:	f000 ff5d 	bl	8001d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e88:	e030      	b.n	8000eec <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <HAL_TIM_IC_MspInit+0x118>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d12b      	bne.n	8000eec <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	61d3      	str	r3, [r2, #28]
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_TIM_IC_MspInit+0x10c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ec4:	2340      	movs	r3, #64	; 0x40
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <HAL_TIM_IC_MspInit+0x110>)
 8000ed8:	f000 ff6a 	bl	8001db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201e      	movs	r0, #30
 8000ee2:	f000 ff12 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ee6:	201e      	movs	r0, #30
 8000ee8:	f000 ff2b 	bl	8001d42 <HAL_NVIC_EnableIRQ>
}
 8000eec:	bf00      	nop
 8000eee:	3730      	adds	r7, #48	; 0x30
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	40010000 	.word	0x40010000
 8000f04:	40000800 	.word	0x40000800

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HardFault_Handler+0x20>)
 8000f1a:	f008 fa97 	bl	800944c <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HardFault_Handler+0x20>)
 8000f20:	f008 fa94 	bl	800944c <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <HardFault_Handler+0x24>)
 8000f2c:	f001 f8db 	bl	80020e6 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8000f30:	e7f5      	b.n	8000f1e <HardFault_Handler+0xa>
 8000f32:	bf00      	nop
 8000f34:	0800a6c0 	.word	0x0800a6c0
 8000f38:	40011000 	.word	0x40011000

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f76:	f000 f945 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <ADC1_2_IRQHandler+0x10>)
 8000f86:	f000 faf3 	bl	8001570 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000980 	.word	0x20000980

08000f94 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f9a:	f001 f9ed 	bl	8002378 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200012d0 	.word	0x200012d0

08000fa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <TIM3_IRQHandler+0x10>)
 8000fae:	f003 fd7f 	bl	8004ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000938 	.word	0x20000938

08000fbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM4_IRQHandler+0x10>)
 8000fc2:	f003 fd75 	bl	8004ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200004e8 	.word	0x200004e8

08000fd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00a      	b.n	8000ff8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fe2:	f3af 8000 	nop.w
 8000fe6:	4601      	mov	r1, r0
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	60ba      	str	r2, [r7, #8]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf0      	blt.n	8000fe2 <_read+0x12>
	}

return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:
	}
	return len;
}

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	605a      	str	r2, [r3, #4]
	return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x50>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x16>
		heap_end = &end;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <_sbrk+0x50>)
 800107e:	4a10      	ldr	r2, [pc, #64]	; (80010c0 <_sbrk+0x54>)
 8001080:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <_sbrk+0x50>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <_sbrk+0x50>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	466a      	mov	r2, sp
 8001092:	4293      	cmp	r3, r2
 8001094:	d907      	bls.n	80010a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001096:	f008 f999 	bl	80093cc <__errno>
 800109a:	4603      	mov	r3, r0
 800109c:	220c      	movs	r2, #12
 800109e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	e006      	b.n	80010b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <_sbrk+0x50>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <_sbrk+0x50>)
 80010b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200002b8 	.word	0x200002b8
 80010c0:	200015d0 	.word	0x200015d0

080010c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <SystemInit+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <SystemInit+0x5c>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <SystemInit+0x5c>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4911      	ldr	r1, [pc, #68]	; (8001120 <SystemInit+0x5c>)
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <SystemInit+0x60>)
 80010dc:	4013      	ands	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <SystemInit+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <SystemInit+0x5c>)
 80010e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80010ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <SystemInit+0x5c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SystemInit+0x5c>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SystemInit+0x5c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <SystemInit+0x5c>)
 8001102:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001106:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SystemInit+0x5c>)
 800110a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800110e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SystemInit+0x64>)
 8001112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001116:	609a      	str	r2, [r3, #8]
#endif 
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000
 8001124:	f8ff0000 	.word	0xf8ff0000
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001152:	f7ff ffb7 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001156:	f008 f93f 	bl	80093d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115a:	f7ff f995 	bl	8000488 <main>
  bx lr
 800115e:	4770      	bx	lr
  ldr r3, =_sidata
 8001160:	0800a7f0 	.word	0x0800a7f0
  ldr r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001168:	20000234 	.word	0x20000234
  ldr r2, =_sbss
 800116c:	20000234 	.word	0x20000234
  ldr r3, = _ebss
 8001170:	200015cc 	.word	0x200015cc

08001174 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <CAN1_RX1_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 fdb3 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fd58 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fdcb 	bl	8001d5e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 fd93 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000054 	.word	0x20000054
 80011fc:	2000005c 	.word	0x2000005c
 8001200:	20000058 	.word	0x20000058

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a03      	ldr	r2, [pc, #12]	; (8001224 <HAL_IncTick+0x20>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	2000005c 	.word	0x2000005c
 8001224:	20000a08 	.word	0x20000a08

08001228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	; (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	20000a08 	.word	0x20000a08

0800123c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e0be      	b.n	80013dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fd16 	bl	8000cac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb8b 	bl	800199c <ADC_ConversionStop_Disable>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8099 	bne.w	80013ca <HAL_ADC_Init+0x18e>
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b00      	cmp	r3, #0
 800129c:	f040 8095 	bne.w	80013ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012a8:	f023 0302 	bic.w	r3, r3, #2
 80012ac:	f043 0202 	orr.w	r2, r3, #2
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b1b      	ldrb	r3, [r3, #12]
 80012c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d4:	d003      	beq.n	80012de <HAL_ADC_Init+0xa2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d102      	bne.n	80012e4 <HAL_ADC_Init+0xa8>
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	e000      	b.n	80012e6 <HAL_ADC_Init+0xaa>
 80012e4:	2300      	movs	r3, #0
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7d1b      	ldrb	r3, [r3, #20]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d119      	bne.n	8001328 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	3b01      	subs	r3, #1
 8001302:	035a      	lsls	r2, r3, #13
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	430a      	orrs	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_ADC_Init+0x1a8>)
 8001344:	4013      	ands	r3, r2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	430b      	orrs	r3, r1
 800134e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001358:	d003      	beq.n	8001362 <HAL_ADC_Init+0x126>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d104      	bne.n	800136c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	3b01      	subs	r3, #1
 8001368:	051b      	lsls	r3, r3, #20
 800136a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	430a      	orrs	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_ADC_Init+0x1ac>)
 8001388:	4013      	ands	r3, r2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	429a      	cmp	r2, r3
 800138e:	d10b      	bne.n	80013a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013a6:	e018      	b.n	80013da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	f023 0312 	bic.w	r3, r3, #18
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013c8:	e007      	b.n	80013da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013da:	7dfb      	ldrb	r3, [r7, #23]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	ffe1f7fd 	.word	0xffe1f7fd
 80013e8:	ff1f0efe 	.word	0xff1f0efe

080013ec <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Start_IT+0x1a>
 8001402:	2302      	movs	r3, #2
 8001404:	e0a0      	b.n	8001548 <HAL_ADC_Start_IT+0x15c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fa72 	bl	80018f8 <ADC_Enable>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 808f 	bne.w	800153e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a45      	ldr	r2, [pc, #276]	; (8001550 <HAL_ADC_Start_IT+0x164>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d105      	bne.n	800144a <HAL_ADC_Start_IT+0x5e>
 800143e:	4b45      	ldr	r3, [pc, #276]	; (8001554 <HAL_ADC_Start_IT+0x168>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d026      	beq.n	80014b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800146c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001474:	e01d      	b.n	80014b2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a33      	ldr	r2, [pc, #204]	; (8001554 <HAL_ADC_Start_IT+0x168>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Start_IT+0xaa>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <HAL_ADC_Start_IT+0x164>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10d      	bne.n	80014b2 <HAL_ADC_Start_IT+0xc6>
 8001496:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <HAL_ADC_Start_IT+0x168>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	f023 0206 	bic.w	r2, r3, #6
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80014ca:	e002      	b.n	80014d2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f06f 0202 	mvn.w	r2, #2
 80014e2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0220 	orr.w	r2, r2, #32
 80014f2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001502:	d113      	bne.n	800152c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001508:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_ADC_Start_IT+0x164>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d105      	bne.n	800151a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_ADC_Start_IT+0x168>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	e00c      	b.n	8001546 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e003      	b.n	8001546 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001546:	7bfb      	ldrb	r3, [r7, #15]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40012800 	.word	0x40012800
 8001554:	40012400 	.word	0x40012400

08001558 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	2b20      	cmp	r3, #32
 8001584:	d140      	bne.n	8001608 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d139      	bne.n	8001608 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ba:	d11d      	bne.n	80015f8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d119      	bne.n	80015f8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0220 	bic.w	r2, r2, #32
 80015d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f043 0201 	orr.w	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7fe ff2b 	bl	8000454 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f06f 0212 	mvn.w	r2, #18
 8001606:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	2b80      	cmp	r3, #128	; 0x80
 8001614:	d14f      	bne.n	80016b6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d148      	bne.n	80016b6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001646:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800164a:	d012      	beq.n	8001672 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001656:	2b00      	cmp	r3, #0
 8001658:	d125      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001664:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001668:	d11d      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001680:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	f043 0201 	orr.w	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fa4e 	bl	8001b48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 020c 	mvn.w	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c0:	2b40      	cmp	r3, #64	; 0x40
 80016c2:	d114      	bne.n	80016ee <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10d      	bne.n	80016ee <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f809 	bl	80016f6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0201 	mvn.w	r2, #1
 80016ec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x20>
 8001724:	2302      	movs	r3, #2
 8001726:	e0dc      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x1da>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b06      	cmp	r3, #6
 8001736:	d81c      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b05      	subs	r3, #5
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	e03c      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d81c      	bhi.n	80017b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b23      	subs	r3, #35	; 0x23
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	4019      	ands	r1, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
 80017b2:	e01b      	b.n	80017ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	3b41      	subs	r3, #65	; 0x41
 80017c6:	221f      	movs	r2, #31
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b41      	subs	r3, #65	; 0x41
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b09      	cmp	r3, #9
 80017f2:	d91c      	bls.n	800182e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4613      	mov	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	3b1e      	subs	r3, #30
 8001806:	2207      	movs	r2, #7
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6898      	ldr	r0, [r3, #8]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	3b1e      	subs	r3, #30
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e019      	b.n	8001862 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	2207      	movs	r2, #7
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6898      	ldr	r0, [r3, #8]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	fa00 f203 	lsl.w	r2, r0, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d003      	beq.n	8001872 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186e:	2b11      	cmp	r3, #17
 8001870:	d132      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_ADC_ConfigChannel+0x1e4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d125      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d126      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001898:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b10      	cmp	r3, #16
 80018a0:	d11a      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9a      	lsrs	r2, r3, #18
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	e002      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f9      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x1b2>
 80018c6:	e007      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	f043 0220 	orr.w	r2, r3, #32
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40012400 	.word	0x40012400
 80018f0:	20000054 	.word	0x20000054
 80018f4:	431bde83 	.word	0x431bde83

080018f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d039      	beq.n	800198a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <ADC_Enable+0x9c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <ADC_Enable+0xa0>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	0c9b      	lsrs	r3, r3, #18
 8001932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001934:	e002      	b.n	800193c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	3b01      	subs	r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f9      	bne.n	8001936 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001942:	f7ff fc71 	bl	8001228 <HAL_GetTick>
 8001946:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001948:	e018      	b.n	800197c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800194a:	f7ff fc6d 	bl	8001228 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d911      	bls.n	800197c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f043 0210 	orr.w	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e007      	b.n	800198c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d1df      	bne.n	800194a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000054 	.word	0x20000054
 8001998:	431bde83 	.word	0x431bde83

0800199c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d127      	bne.n	8001a06 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0201 	bic.w	r2, r2, #1
 80019c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019c6:	f7ff fc2f 	bl	8001228 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019cc:	e014      	b.n	80019f8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019ce:	f7ff fc2b 	bl	8001228 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d90d      	bls.n	80019f8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f043 0210 	orr.w	r2, r3, #16
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e007      	b.n	8001a08 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d0e3      	beq.n	80019ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADCEx_Calibration_Start+0x1e>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e086      	b.n	8001b3c <HAL_ADCEx_Calibration_Start+0x12c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffb0 	bl	800199c <ADC_ConversionStop_Disable>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d175      	bne.n	8001b32 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a4e:	f023 0302 	bic.w	r3, r3, #2
 8001a52:	f043 0202 	orr.w	r2, r3, #2
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	; (8001b44 <HAL_ADCEx_Calibration_Start+0x134>)
 8001a5c:	681c      	ldr	r4, [r3, #0]
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f002 fba6 	bl	80041b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a64:	4603      	mov	r3, r0
 8001a66:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a6a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a6c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a6e:	e002      	b.n	8001a76 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff3b 	bl	80018f8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0208 	orr.w	r2, r2, #8
 8001a90:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a92:	f7ff fbc9 	bl	8001228 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a98:	e014      	b.n	8001ac4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a9a:	f7ff fbc5 	bl	8001228 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b0a      	cmp	r3, #10
 8001aa6:	d90d      	bls.n	8001ac4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f023 0312 	bic.w	r3, r3, #18
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e03b      	b.n	8001b3c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e3      	bne.n	8001a9a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0204 	orr.w	r2, r2, #4
 8001ae0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ae2:	f7ff fba1 	bl	8001228 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ae8:	e014      	b.n	8001b14 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001aea:	f7ff fb9d 	bl	8001228 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d90d      	bls.n	8001b14 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	f023 0312 	bic.w	r3, r3, #18
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e013      	b.n	8001b3c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1e3      	bne.n	8001aea <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	f043 0201 	orr.w	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	371c      	adds	r7, #28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	20000054 	.word	0x20000054

08001b48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <__NVIC_SetPriorityGrouping>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <__NVIC_EnableIRQ+0x34>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Config>:
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f7ff ff90 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff2d 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff42 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff90 	bl	8001c4c <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5f 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e00e      	b.n	8001da6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	795b      	ldrb	r3, [r3, #5]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe ffcb 	bl	8000d34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e169      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8158 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a9a      	ldr	r2, [pc, #616]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a90      	ldr	r2, [pc, #576]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_GPIO_Init+0x2b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3d      	ldr	r2, [pc, #244]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	492c      	ldr	r1, [pc, #176]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4928      	ldr	r1, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	491e      	ldr	r1, [pc, #120]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4918      	ldr	r1, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4914      	ldr	r1, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x2e2>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <HAL_GPIO_Init+0x304>)
 800208e:	4013      	ands	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae8e 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020f6:	787b      	ldrb	r3, [r7, #1]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020fc:	887a      	ldrh	r2, [r7, #2]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002102:	e003      	b.n	800210c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	041a      	lsls	r2, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002118:	b08b      	sub	sp, #44	; 0x2c
 800211a:	af06      	add	r7, sp, #24
 800211c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0fd      	b.n	8002324 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d106      	bne.n	8002142 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f006 fe9b 	bl	8008e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2203      	movs	r2, #3
 8002146:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f8dc 	bl	800530c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	687e      	ldr	r6, [r7, #4]
 800215c:	466d      	mov	r5, sp
 800215e:	f106 0410 	add.w	r4, r6, #16
 8002162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	602b      	str	r3, [r5, #0]
 800216a:	1d33      	adds	r3, r6, #4
 800216c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216e:	6838      	ldr	r0, [r7, #0]
 8002170:	f003 f8a6 	bl	80052c0 <USB_CoreInit>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0ce      	b.n	8002324 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f003 f8d7 	bl	8005340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	e04c      	b.n	8002232 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3301      	adds	r3, #1
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	b298      	uxth	r0, r3
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	3336      	adds	r3, #54	; 0x36
 80021d6:	4602      	mov	r2, r0
 80021d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3303      	adds	r3, #3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3338      	adds	r3, #56	; 0x38
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3340      	adds	r3, #64	; 0x40
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	3301      	adds	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3ad      	bcc.n	8002198 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	e044      	b.n	80022cc <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002284:	7bfa      	ldrb	r2, [r7, #15]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800229a:	7bfa      	ldrb	r2, [r7, #15]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3301      	adds	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3b5      	bcc.n	8002242 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	687e      	ldr	r6, [r7, #4]
 80022de:	466d      	mov	r5, sp
 80022e0:	f106 0410 	add.w	r4, r6, #16
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	602b      	str	r3, [r5, #0]
 80022ec:	1d33      	adds	r3, r6, #4
 80022ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	f003 f831 	bl	8005358 <USB_DevInit>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e00d      	b.n	8002324 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 ffcb 	bl	80072b8 <USB_DevDisconnect>

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800232c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_PCD_Start+0x16>
 800233e:	2302      	movs	r3, #2
 8002340:	e016      	b.n	8002370 <HAL_PCD_Start+0x44>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f002 ffc6 	bl	80052e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002354:	2101      	movs	r1, #1
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f007 f801 	bl	800935e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f004 ff9f 	bl	80072a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f004 ffa1 	bl	80072cc <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002394:	d102      	bne.n	800239c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fb61 	bl	8002a5e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 ff93 	bl	80072cc <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b0:	d112      	bne.n	80023d8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c4:	b292      	uxth	r2, r2
 80023c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f006 fdcf 	bl	8008f6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023d0:	2100      	movs	r1, #0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f925 	bl	8002622 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f004 ff75 	bl	80072cc <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ec:	d10b      	bne.n	8002406 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002400:	b292      	uxth	r2, r2
 8002402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 ff5e 	bl	80072cc <USB_ReadInterrupts>
 8002410:	4603      	mov	r3, r0
 8002412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d10b      	bne.n	8002434 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 ff47 	bl	80072cc <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d126      	bne.n	8002498 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	b292      	uxth	r2, r2
 800245e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800246a:	b29a      	uxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	b292      	uxth	r2, r2
 8002476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f006 fdb0 	bl	8008fe0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002488:	b29a      	uxth	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002492:	b292      	uxth	r2, r2
 8002494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f004 ff15 	bl	80072cc <USB_ReadInterrupts>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ac:	f040 8084 	bne.w	80025b8 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	77fb      	strb	r3, [r7, #31]
 80024b4:	e011      	b.n	80024da <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	441a      	add	r2, r3
 80024c2:	7ffb      	ldrb	r3, [r7, #31]
 80024c4:	8812      	ldrh	r2, [r2, #0]
 80024c6:	b292      	uxth	r2, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	f107 0120 	add.w	r1, r7, #32
 80024ce:	440b      	add	r3, r1
 80024d0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80024d4:	7ffb      	ldrb	r3, [r7, #31]
 80024d6:	3301      	adds	r3, #1
 80024d8:	77fb      	strb	r3, [r7, #31]
 80024da:	7ffb      	ldrb	r3, [r7, #31]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d9ea      	bls.n	80024b6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002500:	b29a      	uxth	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	b292      	uxth	r2, r2
 800250c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002510:	bf00      	nop
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800251a:	b29b      	uxth	r3, r3
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f6      	beq.n	8002512 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002536:	b292      	uxth	r2, r2
 8002538:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
 8002540:	e010      	b.n	8002564 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002542:	7ffb      	ldrb	r3, [r7, #31]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4611      	mov	r1, r2
 800254a:	7ffa      	ldrb	r2, [r7, #31]
 800254c:	0092      	lsls	r2, r2, #2
 800254e:	440a      	add	r2, r1
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	f107 0120 	add.w	r1, r7, #32
 8002556:	440b      	add	r3, r1
 8002558:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800255c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800255e:	7ffb      	ldrb	r3, [r7, #31]
 8002560:	3301      	adds	r3, #1
 8002562:	77fb      	strb	r3, [r7, #31]
 8002564:	7ffb      	ldrb	r3, [r7, #31]
 8002566:	2b07      	cmp	r3, #7
 8002568:	d9eb      	bls.n	8002542 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002572:	b29a      	uxth	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0208 	orr.w	r2, r2, #8
 800257c:	b292      	uxth	r2, r2
 800257e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002594:	b292      	uxth	r2, r2
 8002596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0204 	orr.w	r2, r2, #4
 80025ac:	b292      	uxth	r2, r2
 80025ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f006 fcfa 	bl	8008fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 fe85 	bl	80072cc <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025cc:	d10e      	bne.n	80025ec <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e0:	b292      	uxth	r2, r2
 80025e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f006 fcb3 	bl	8008f52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 fe6b 	bl	80072cc <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002600:	d10b      	bne.n	800261a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260a:	b29a      	uxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002614:	b292      	uxth	r2, r2
 8002616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800261a:	bf00      	nop
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_PCD_SetAddress+0x1a>
 8002638:	2302      	movs	r3, #2
 800263a:	e013      	b.n	8002664 <HAL_PCD_SetAddress+0x42>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f004 fe12 	bl	800727e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	460b      	mov	r3, r1
 8002680:	803b      	strh	r3, [r7, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800268a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268e:	2b00      	cmp	r3, #0
 8002690:	da0e      	bge.n	80026b0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	705a      	strb	r2, [r3, #1]
 80026ae:	e00e      	b.n	80026ce <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026da:	883a      	ldrh	r2, [r7, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	78ba      	ldrb	r2, [r7, #2]
 80026e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f8:	78bb      	ldrb	r3, [r7, #2]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_Open+0xa6>
 800270e:	2302      	movs	r3, #2
 8002710:	e00e      	b.n	8002730 <HAL_PCD_EP_Open+0xc4>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f002 fe39 	bl	8005398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800272e:	7afb      	ldrb	r3, [r7, #11]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da0e      	bge.n	800276a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	705a      	strb	r2, [r3, #1]
 8002768:	e00e      	b.n	8002788 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 0207 	and.w	r2, r3, #7
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	b2da      	uxtb	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_EP_Close+0x6a>
 800279e:	2302      	movs	r3, #2
 80027a0:	e00e      	b.n	80027c0 <HAL_PCD_EP_Close+0x88>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68f9      	ldr	r1, [r7, #12]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f003 f95b 	bl	8005a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	460b      	mov	r3, r1
 80027d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027d8:	7afb      	ldrb	r3, [r7, #11]
 80027da:	f003 0207 	and.w	r2, r3, #7
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	b2da      	uxtb	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002814:	7afb      	ldrb	r3, [r7, #11]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	2b00      	cmp	r3, #0
 800281c:	d106      	bne.n	800282c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fb0d 	bl	8005e44 <USB_EPStartXfer>
 800282a:	e005      	b.n	8002838 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6979      	ldr	r1, [r7, #20]
 8002832:	4618      	mov	r0, r3
 8002834:	f003 fb06 	bl	8005e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 0207 	and.w	r2, r3, #7
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002864:	681b      	ldr	r3, [r3, #0]
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	460b      	mov	r3, r1
 800287e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2201      	movs	r2, #1
 80028ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028bc:	7afb      	ldrb	r3, [r7, #11]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6979      	ldr	r1, [r7, #20]
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 fab3 	bl	8005e44 <USB_EPStartXfer>
 80028de:	e005      	b.n	80028ec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 faac 	bl	8005e44 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 0207 	and.w	r2, r3, #7
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	d901      	bls.n	8002914 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04c      	b.n	80029ae <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da0e      	bge.n	800293a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	e00c      	b.n	8002954 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_PCD_EP_SetStall+0x7e>
 8002970:	2302      	movs	r3, #2
 8002972:	e01c      	b.n	80029ae <HAL_PCD_EP_SetStall+0xb8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68f9      	ldr	r1, [r7, #12]
 8002982:	4618      	mov	r0, r3
 8002984:	f004 fb7e 	bl	8007084 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f004 fca3 	bl	80072ea <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d901      	bls.n	80029d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e040      	b.n	8002a56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da0e      	bge.n	80029fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	705a      	strb	r2, [r3, #1]
 80029f8:	e00e      	b.n	8002a18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	f003 0207 	and.w	r2, r3, #7
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_PCD_EP_ClrStall+0x82>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e00e      	b.n	8002a56 <HAL_PCD_EP_ClrStall+0xa0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68f9      	ldr	r1, [r7, #12]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 fb6c 	bl	8007124 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b08e      	sub	sp, #56	; 0x38
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a66:	e2df      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a70:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002a72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002a7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8158 	bne.w	8002d38 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d152      	bne.n	8002b38 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	81fb      	strh	r3, [r7, #14]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3328      	adds	r3, #40	; 0x28
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	695a      	ldr	r2, [r3, #20]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	441a      	add	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002af6:	2100      	movs	r1, #0
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f006 fa10 	bl	8008f1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 828e 	beq.w	8003028 <PCD_EP_ISR_Handler+0x5ca>
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 8289 	bne.w	8003028 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b36:	e277      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d034      	beq.n	8002bbc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3306      	adds	r3, #6
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	f004 fbfa 	bl	800738a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	823b      	strh	r3, [r7, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	8a3a      	ldrh	r2, [r7, #16]
 8002bac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bb0:	b292      	uxth	r2, r2
 8002bb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f006 f985 	bl	8008ec4 <HAL_PCD_SetupStageCallback>
 8002bba:	e235      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f280 8231 	bge.w	8003028 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	83bb      	strh	r3, [r7, #28]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	8bba      	ldrh	r2, [r7, #28]
 8002bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be0:	b292      	uxth	r2, r2
 8002be2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d019      	beq.n	8002c4c <PCD_EP_ISR_Handler+0x1ee>
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	6959      	ldr	r1, [r3, #20]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f004 fbaa 	bl	800738a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	441a      	add	r2, r3
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c44:	2100      	movs	r1, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f006 f94e 	bl	8008ee8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d112      	bne.n	8002c9a <PCD_EP_ISR_Handler+0x23c>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	801a      	strh	r2, [r3, #0]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	801a      	strh	r2, [r3, #0]
 8002c98:	e02f      	b.n	8002cfa <PCD_EP_ISR_Handler+0x29c>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002ca0:	d813      	bhi.n	8002cca <PCD_EP_ISR_Handler+0x26c>
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <PCD_EP_ISR_Handler+0x25e>
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	3301      	adds	r3, #1
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	801a      	strh	r2, [r3, #0]
 8002cc8:	e017      	b.n	8002cfa <PCD_EP_ISR_Handler+0x29c>
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <PCD_EP_ISR_Handler+0x286>
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	029b      	lsls	r3, r3, #10
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	827b      	strh	r3, [r7, #18]
 8002d0c:	8a7b      	ldrh	r3, [r7, #18]
 8002d0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d12:	827b      	strh	r3, [r7, #18]
 8002d14:	8a7b      	ldrh	r3, [r7, #18]
 8002d16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d1a:	827b      	strh	r3, [r7, #18]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	8a7b      	ldrh	r3, [r7, #18]
 8002d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8013      	strh	r3, [r2, #0]
 8002d36:	e177      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	881b      	ldrh	r3, [r3, #0]
 8002d48:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d4a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f280 80ea 	bge.w	8002f28 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	853b      	strh	r3, [r7, #40]	; 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d82:	b292      	uxth	r2, r2
 8002d84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002d86:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	7b1b      	ldrb	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d122      	bne.n	8002dea <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	3306      	adds	r3, #6
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dcc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002dce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8087 	beq.w	8002ee4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	6959      	ldr	r1, [r3, #20]
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	88da      	ldrh	r2, [r3, #6]
 8002de2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002de4:	f004 fad1 	bl	800738a <USB_ReadPMA>
 8002de8:	e07c      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	78db      	ldrb	r3, [r3, #3]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d108      	bne.n	8002e04 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002df2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002df4:	461a      	mov	r2, r3
 8002df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f923 	bl	8003044 <HAL_PCD_EP_DB_Receive>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e02:	e06f      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	441a      	add	r2, r3
 8002e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d021      	beq.n	8002ea2 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	3302      	adds	r3, #2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e86:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d02a      	beq.n	8002ee4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	6959      	ldr	r1, [r3, #20]
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	891a      	ldrh	r2, [r3, #8]
 8002e9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e9c:	f004 fa75 	bl	800738a <USB_ReadPMA>
 8002ea0:	e020      	b.n	8002ee4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3306      	adds	r3, #6
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	6959      	ldr	r1, [r3, #20]
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	895a      	ldrh	r2, [r3, #10]
 8002ede:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ee0:	f004 fa53 	bl	800738a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eea:	441a      	add	r2, r3
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ef6:	441a      	add	r2, r3
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d004      	beq.n	8002f0e <PCD_EP_ISR_Handler+0x4b0>
 8002f04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d206      	bcs.n	8002f1c <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f005 ffe7 	bl	8008ee8 <HAL_PCD_DataOutStageCallback>
 8002f1a:	e005      	b.n	8002f28 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 ff8e 	bl	8005e44 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d07a      	beq.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f60:	843b      	strh	r3, [r7, #32]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	8c3b      	ldrh	r3, [r7, #32]
 8002f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	78db      	ldrb	r3, [r3, #3]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d108      	bne.n	8002f98 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d146      	bne.n	800301c <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002f8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d141      	bne.n	800301c <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4413      	add	r3, r2
 8002fac:	3302      	adds	r3, #2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	8bfb      	ldrh	r3, [r7, #30]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d906      	bls.n	8002fda <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	8bfb      	ldrh	r3, [r7, #30]
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	619a      	str	r2, [r3, #24]
 8002fd8:	e002      	b.n	8002fe0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 ff95 	bl	8008f1e <HAL_PCD_DataInStageCallback>
 8002ff4:	e018      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	8bfb      	ldrh	r3, [r7, #30]
 8002ffc:	441a      	add	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	8bfb      	ldrh	r3, [r7, #30]
 8003008:	441a      	add	r2, r3
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f002 ff15 	bl	8005e44 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800301a:	e005      	b.n	8003028 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800301c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800301e:	461a      	mov	r2, r3
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f91b 	bl	800325e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003030:	b29b      	uxth	r3, r3
 8003032:	b21b      	sxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	f6ff ad17 	blt.w	8002a68 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3738      	adds	r7, #56	; 0x38
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d07e      	beq.n	800315a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	3302      	adds	r3, #2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003084:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	8b7b      	ldrh	r3, [r7, #26]
 800308c:	429a      	cmp	r2, r3
 800308e:	d306      	bcc.n	800309e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	8b7b      	ldrh	r3, [r7, #26]
 8003096:	1ad2      	subs	r2, r2, r3
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	619a      	str	r2, [r3, #24]
 800309c:	e002      	b.n	80030a4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d123      	bne.n	80030f4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	833b      	strh	r3, [r7, #24]
 80030c8:	8b3b      	ldrh	r3, [r7, #24]
 80030ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030ce:	833b      	strh	r3, [r7, #24]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	8b3b      	ldrh	r3, [r7, #24]
 80030e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01f      	beq.n	800313e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003118:	82fb      	strh	r3, [r7, #22]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800313e:	8b7b      	ldrh	r3, [r7, #26]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8087 	beq.w	8003254 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6818      	ldr	r0, [r3, #0]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6959      	ldr	r1, [r3, #20]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	891a      	ldrh	r2, [r3, #8]
 8003152:	8b7b      	ldrh	r3, [r7, #26]
 8003154:	f004 f919 	bl	800738a <USB_ReadPMA>
 8003158:	e07c      	b.n	8003254 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	3306      	adds	r3, #6
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003182:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	8b7b      	ldrh	r3, [r7, #26]
 800318a:	429a      	cmp	r2, r3
 800318c:	d306      	bcc.n	800319c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	8b7b      	ldrh	r3, [r7, #26]
 8003194:	1ad2      	subs	r2, r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	619a      	str	r2, [r3, #24]
 800319a:	e002      	b.n	80031a2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d123      	bne.n	80031f2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	83fb      	strh	r3, [r7, #30]
 80031c6:	8bfb      	ldrh	r3, [r7, #30]
 80031c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031cc:	83fb      	strh	r3, [r7, #30]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	8bfb      	ldrh	r3, [r7, #30]
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11f      	bne.n	800323c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	83bb      	strh	r3, [r7, #28]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	8bbb      	ldrh	r3, [r7, #28]
 8003228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003234:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800323c:	8b7b      	ldrh	r3, [r7, #26]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6959      	ldr	r1, [r3, #20]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	895a      	ldrh	r2, [r3, #10]
 800324e:	8b7b      	ldrh	r3, [r7, #26]
 8003250:	f004 f89b 	bl	800738a <USB_ReadPMA>
    }
  }

  return count;
 8003254:	8b7b      	ldrh	r3, [r7, #26]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b094      	sub	sp, #80	; 0x50
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8138 	beq.w	80034e8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	3302      	adds	r3, #2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d907      	bls.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032b8:	1ad2      	subs	r2, r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	619a      	str	r2, [r3, #24]
 80032be:	e002      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d12c      	bne.n	8003328 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	4619      	mov	r1, r3
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f005 fe22 	bl	8008f1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 823a 	beq.w	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003300:	82fb      	strh	r3, [r7, #22]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	441a      	add	r2, r3
 8003310:	8afb      	ldrh	r3, [r7, #22]
 8003312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800331e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003322:	b29b      	uxth	r3, r3
 8003324:	8013      	strh	r3, [r2, #0]
 8003326:	e218      	b.n	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d01f      	beq.n	8003372 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	441a      	add	r2, r3
 800335c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800335e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336e:	b29b      	uxth	r3, r3
 8003370:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003378:	2b01      	cmp	r3, #1
 800337a:	f040 81ee 	bne.w	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	695a      	ldr	r2, [r3, #20]
 8003382:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003386:	441a      	add	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	69da      	ldr	r2, [r3, #28]
 8003390:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003394:	441a      	add	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d309      	bcc.n	80033ba <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	1ad2      	subs	r2, r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	621a      	str	r2, [r3, #32]
 80033b8:	e015      	b.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d107      	bne.n	80033d2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80033c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80033d0:	e009      	b.n	80033e6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	785b      	ldrb	r3, [r3, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d155      	bne.n	800349a <HAL_PCD_EP_DB_Transmit+0x23c>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	011a      	lsls	r2, r3, #4
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003414:	61bb      	str	r3, [r7, #24]
 8003416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003418:	2b00      	cmp	r3, #0
 800341a:	d112      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x1e4>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003426:	b29a      	uxth	r2, r3
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800343a:	b29a      	uxth	r2, r3
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e047      	b.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x274>
 8003442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003444:	2b3e      	cmp	r3, #62	; 0x3e
 8003446:	d811      	bhi.n	800346c <HAL_PCD_EP_DB_Transmit+0x20e>
 8003448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_PCD_EP_DB_Transmit+0x200>
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	3301      	adds	r3, #1
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	b29b      	uxth	r3, r3
 8003462:	029b      	lsls	r3, r3, #10
 8003464:	b29a      	uxth	r2, r3
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	e032      	b.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x274>
 800346c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2b00      	cmp	r3, #0
 800347a:	d102      	bne.n	8003482 <HAL_PCD_EP_DB_Transmit+0x224>
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	3b01      	subs	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	b29b      	uxth	r3, r3
 8003486:	029b      	lsls	r3, r3, #10
 8003488:	b29b      	uxth	r3, r3
 800348a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800348e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003492:	b29a      	uxth	r2, r3
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	e01b      	b.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x274>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d117      	bne.n	80034d2 <HAL_PCD_EP_DB_Transmit+0x274>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	627b      	str	r3, [r7, #36]	; 0x24
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	4413      	add	r3, r2
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	011a      	lsls	r2, r3, #4
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	4413      	add	r3, r2
 80034c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	6959      	ldr	r1, [r3, #20]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	891a      	ldrh	r2, [r3, #8]
 80034de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f003 ff0d 	bl	8007300 <USB_WritePMA>
 80034e6:	e138      	b.n	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	3306      	adds	r3, #6
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003510:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800351c:	429a      	cmp	r2, r3
 800351e:	d307      	bcc.n	8003530 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	e002      	b.n	8003536 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12e      	bne.n	800359c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	4619      	mov	r1, r3
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f005 fcea 	bl	8008f1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 8102 	bne.w	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800358a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]
 800359a:	e0de      	b.n	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d11f      	bne.n	80035e6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	441a      	add	r2, r3
 80035d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80035d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	f040 80b4 	bne.w	800375a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035fa:	441a      	add	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003608:	441a      	add	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d309      	bcc.n	800362e <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	1ad2      	subs	r2, r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	621a      	str	r2, [r3, #32]
 800362c:	e015      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003636:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003644:	e009      	b.n	800365a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2200      	movs	r2, #0
 8003650:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d155      	bne.n	8003714 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	63bb      	str	r3, [r7, #56]	; 0x38
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003676:	b29b      	uxth	r3, r3
 8003678:	461a      	mov	r2, r3
 800367a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367c:	4413      	add	r3, r2
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	011a      	lsls	r2, r3, #4
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	4413      	add	r3, r2
 800368a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2b00      	cmp	r3, #0
 8003694:	d112      	bne.n	80036bc <HAL_PCD_EP_DB_Transmit+0x45e>
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	e044      	b.n	8003746 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	2b3e      	cmp	r3, #62	; 0x3e
 80036c0:	d811      	bhi.n	80036e6 <HAL_PCD_EP_DB_Transmit+0x488>
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	3301      	adds	r3, #1
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036da:	b29b      	uxth	r3, r3
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	b29a      	uxth	r2, r3
 80036e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	e02f      	b.n	8003746 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80036e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_EP_DB_Transmit+0x49e>
 80036f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f8:	3b01      	subs	r3, #1
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fe:	b29b      	uxth	r3, r3
 8003700:	029b      	lsls	r3, r3, #10
 8003702:	b29b      	uxth	r3, r3
 8003704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800370c:	b29a      	uxth	r2, r3
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e018      	b.n	8003746 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d114      	bne.n	8003746 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372a:	4413      	add	r3, r2
 800372c:	643b      	str	r3, [r7, #64]	; 0x40
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	011a      	lsls	r2, r3, #4
 8003734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003736:	4413      	add	r3, r2
 8003738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003740:	b29a      	uxth	r2, r3
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6959      	ldr	r1, [r3, #20]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	895a      	ldrh	r2, [r3, #10]
 8003752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003754:	b29b      	uxth	r3, r3
 8003756:	f003 fdd3 	bl	8007300 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003774:	82bb      	strh	r3, [r7, #20]
 8003776:	8abb      	ldrh	r3, [r7, #20]
 8003778:	f083 0310 	eor.w	r3, r3, #16
 800377c:	82bb      	strh	r3, [r7, #20]
 800377e:	8abb      	ldrh	r3, [r7, #20]
 8003780:	f083 0320 	eor.w	r3, r3, #32
 8003784:	82bb      	strh	r3, [r7, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	8abb      	ldrh	r3, [r7, #20]
 8003796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3750      	adds	r7, #80	; 0x50
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	4613      	mov	r3, r2
 80037c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80037c6:	897b      	ldrh	r3, [r7, #10]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e009      	b.n	80037fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ea:	897a      	ldrh	r2, [r7, #10]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037fe:	893b      	ldrh	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	b29a      	uxth	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	80da      	strh	r2, [r3, #6]
 8003812:	e00b      	b.n	800382c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2201      	movs	r2, #1
 8003818:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	b29a      	uxth	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b29a      	uxth	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e26c      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8087 	beq.w	8003966 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00c      	beq.n	800387e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003864:	4b8f      	ldr	r3, [pc, #572]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d112      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
 8003870:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b89      	ldr	r3, [pc, #548]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x12c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e246      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x76>
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a7f      	ldr	r2, [pc, #508]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x98>
 80038b6:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b78      	ldr	r3, [pc, #480]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a77      	ldr	r2, [pc, #476]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0xbc>
 80038da:	4b72      	ldr	r3, [pc, #456]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a71      	ldr	r2, [pc, #452]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b6f      	ldr	r3, [pc, #444]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6e      	ldr	r2, [pc, #440]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0xd4>
 80038f4:	4b6b      	ldr	r3, [pc, #428]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b68      	ldr	r3, [pc, #416]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fd fc88 	bl	8001228 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fd fc84 	bl	8001228 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1fa      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0xe4>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fd fc74 	bl	8001228 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fd fc70 	bl	8001228 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e1e6      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x10c>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d063      	beq.n	8003a3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003972:	4b4c      	ldr	r3, [pc, #304]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800397e:	4b49      	ldr	r3, [pc, #292]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11c      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
 800398a:	4b46      	ldr	r3, [pc, #280]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d116      	bne.n	80039c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d001      	beq.n	80039ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e1ba      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b3d      	ldr	r3, [pc, #244]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4939      	ldr	r1, [pc, #228]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	e03a      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039cc:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fd fc29 	bl	8001228 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039da:	f7fd fc25 	bl	8001228 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e19b      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4927      	ldr	r1, [pc, #156]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
 8003a0c:	e015      	b.n	8003a3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_RCC_OscConfig+0x270>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd fc08 	bl	8001228 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a1c:	f7fd fc04 	bl	8001228 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e17a      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d03a      	beq.n	8003abc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d019      	beq.n	8003a82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a4e:	4b17      	ldr	r3, [pc, #92]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fd fbe8 	bl	8001228 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fbe4 	bl	8001228 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e15a      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f000 fac4 	bl	8004008 <RCC_Delay>
 8003a80:	e01c      	b.n	8003abc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_RCC_OscConfig+0x274>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a88:	f7fd fbce 	bl	8001228 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8e:	e00f      	b.n	8003ab0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fd fbca 	bl	8001228 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d908      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e140      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	42420000 	.word	0x42420000
 8003aac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab0:	4b9e      	ldr	r3, [pc, #632]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e9      	bne.n	8003a90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80a6 	beq.w	8003c16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b97      	ldr	r3, [pc, #604]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b94      	ldr	r3, [pc, #592]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a93      	ldr	r2, [pc, #588]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]
 8003ae6:	4b91      	ldr	r3, [pc, #580]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60bb      	str	r3, [r7, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	4b8e      	ldr	r3, [pc, #568]	; (8003d30 <HAL_RCC_OscConfig+0x4f8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b02:	4b8b      	ldr	r3, [pc, #556]	; (8003d30 <HAL_RCC_OscConfig+0x4f8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a8a      	ldr	r2, [pc, #552]	; (8003d30 <HAL_RCC_OscConfig+0x4f8>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7fd fb8b 	bl	8001228 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fd fb87 	bl	8001228 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0fd      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4b81      	ldr	r3, [pc, #516]	; (8003d30 <HAL_RCC_OscConfig+0x4f8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x312>
 8003b3c:	4b7b      	ldr	r3, [pc, #492]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4a7a      	ldr	r2, [pc, #488]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6213      	str	r3, [r2, #32]
 8003b48:	e02d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x334>
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a75      	ldr	r2, [pc, #468]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6213      	str	r3, [r2, #32]
 8003b5e:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a72      	ldr	r2, [pc, #456]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6213      	str	r3, [r2, #32]
 8003b6a:	e01c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x356>
 8003b74:	4b6d      	ldr	r3, [pc, #436]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a6c      	ldr	r2, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6213      	str	r3, [r2, #32]
 8003b80:	4b6a      	ldr	r3, [pc, #424]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6213      	str	r3, [r2, #32]
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x36e>
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a66      	ldr	r2, [pc, #408]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a63      	ldr	r2, [pc, #396]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bae:	f7fd fb3b 	bl	8001228 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fb37 	bl	8001228 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0ab      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x37e>
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fd fb25 	bl	8001228 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd fb21 	bl	8001228 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e095      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4b4c      	ldr	r3, [pc, #304]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b48      	ldr	r3, [pc, #288]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	4a47      	ldr	r2, [pc, #284]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8081 	beq.w	8003d22 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c20:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d061      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d146      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b3f      	ldr	r3, [pc, #252]	; (8003d34 <HAL_RCC_OscConfig+0x4fc>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3a:	f7fd faf5 	bl	8001228 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fd faf1 	bl	8001228 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e067      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c68:	d108      	bne.n	8003c7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c6a:	4b30      	ldr	r3, [pc, #192]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	492d      	ldr	r1, [pc, #180]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b2b      	ldr	r3, [pc, #172]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a19      	ldr	r1, [r3, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	4927      	ldr	r1, [pc, #156]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <HAL_RCC_OscConfig+0x4fc>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fd fac5 	bl	8001228 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fd fac1 	bl	8001228 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e037      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x46a>
 8003cc0:	e02f      	b.n	8003d22 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_RCC_OscConfig+0x4fc>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fd faae 	bl	8001228 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd faaa 	bl	8001228 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e020      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce2:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x498>
 8003cee:	e018      	b.n	8003d22 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e013      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42420060 	.word	0x42420060

08003d38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0d0      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	4965      	ldr	r1, [pc, #404]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b63      	ldr	r3, [pc, #396]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0b8      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d005      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d94:	4b59      	ldr	r3, [pc, #356]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a58      	ldr	r2, [pc, #352]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dac:	4b53      	ldr	r3, [pc, #332]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a52      	ldr	r2, [pc, #328]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003db6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b50      	ldr	r3, [pc, #320]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	494d      	ldr	r1, [pc, #308]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d040      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b47      	ldr	r3, [pc, #284]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e07f      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df6:	4b41      	ldr	r3, [pc, #260]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d109      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e073      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	4b3d      	ldr	r3, [pc, #244]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e06b      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4b39      	ldr	r3, [pc, #228]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f023 0203 	bic.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4936      	ldr	r1, [pc, #216]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e28:	f7fd f9fe 	bl	8001228 <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e30:	f7fd f9fa 	bl	8001228 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e053      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f003 020c 	and.w	r2, r3, #12
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1eb      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d210      	bcs.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 0207 	bic.w	r2, r3, #7
 8003e6e:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e76:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d001      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e032      	b.n	8003eee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4916      	ldr	r1, [pc, #88]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	490e      	ldr	r1, [pc, #56]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ec6:	f000 f821 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	490a      	ldr	r1, [pc, #40]	; (8003f00 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	5ccb      	ldrb	r3, [r1, r3]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <HAL_RCC_ClockConfig+0x1cc>)
 8003ee0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ee2:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_ClockConfig+0x1d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd f95c 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800a738 	.word	0x0800a738
 8003f04:	20000054 	.word	0x20000054
 8003f08:	20000058 	.word	0x20000058

08003f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f0c:	b490      	push	{r4, r7}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f14:	1d3c      	adds	r4, r7, #4
 8003f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f1c:	f240 2301 	movw	r3, #513	; 0x201
 8003f20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61fb      	str	r3, [r7, #28]
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f36:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x40>
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0x46>
 8003f4a:	e02d      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f4e:	623b      	str	r3, [r7, #32]
      break;
 8003f50:	e02d      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	0c9b      	lsrs	r3, r3, #18
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f5e:	4413      	add	r3, r2
 8003f60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c5b      	lsrs	r3, r3, #17
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f7e:	4413      	add	r3, r2
 8003f80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8a:	fb02 f203 	mul.w	r2, r2, r3
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
 8003f96:	e004      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f9c:	fb02 f303 	mul.w	r3, r2, r3
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	623b      	str	r3, [r7, #32]
      break;
 8003fa6:	e002      	b.n	8003fae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003faa:	623b      	str	r3, [r7, #32]
      break;
 8003fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fae:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc90      	pop	{r4, r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	0800a6d0 	.word	0x0800a6d0
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	007a1200 	.word	0x007a1200
 8003fc8:	003d0900 	.word	0x003d0900

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20000054 	.word	0x20000054

08003fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fe4:	f7ff fff2 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	0adb      	lsrs	r3, r3, #11
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff6:	5ccb      	ldrb	r3, [r1, r3]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	0800a748 	.word	0x0800a748

08004008 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <RCC_Delay+0x34>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <RCC_Delay+0x38>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0a5b      	lsrs	r3, r3, #9
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004024:	bf00      	nop
  }
  while (Delay --);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1e5a      	subs	r2, r3, #1
 800402a:	60fa      	str	r2, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f9      	bne.n	8004024 <RCC_Delay+0x1c>
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr
 800403c:	20000054 	.word	0x20000054
 8004040:	10624dd3 	.word	0x10624dd3

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d07d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	4b4c      	ldr	r3, [pc, #304]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407a:	61d3      	str	r3, [r2, #28]
 800407c:	4b49      	ldr	r3, [pc, #292]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d118      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a42      	ldr	r2, [pc, #264]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800409e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a4:	f7fd f8c0 	bl	8001228 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ac:	f7fd f8bc 	bl	8001228 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e06d      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02e      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d027      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040e8:	4b2e      	ldr	r3, [pc, #184]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040f2:	4b2e      	ldr	r3, [pc, #184]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040f8:	4b2c      	ldr	r3, [pc, #176]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d014      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fd f88b 	bl	8001228 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	e00a      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fd f887 	bl	8001228 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e036      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ee      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4917      	ldr	r1, [pc, #92]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	4313      	orrs	r3, r2
 8004148:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d105      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	490b      	ldr	r1, [pc, #44]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4904      	ldr	r1, [pc, #16]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40007000 	.word	0x40007000
 80041ac:	42420440 	.word	0x42420440

080041b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b08d      	sub	sp, #52	; 0x34
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041b8:	4b5a      	ldr	r3, [pc, #360]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80041ba:	f107 040c 	add.w	r4, r7, #12
 80041be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041c4:	f240 2301 	movw	r3, #513	; 0x201
 80041c8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	2300      	movs	r3, #0
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	2300      	movs	r3, #0
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	f200 8091 	bhi.w	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d04c      	beq.n	800428c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d07c      	beq.n	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80041f8:	e089      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80041fa:	4b4b      	ldr	r3, [pc, #300]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8082 	beq.w	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	0c9b      	lsrs	r3, r3, #18
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800421a:	4413      	add	r3, r2
 800421c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004220:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d018      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800422c:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	0c5b      	lsrs	r3, r3, #17
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800423a:	4413      	add	r3, r2
 800423c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800424c:	4a37      	ldr	r2, [pc, #220]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	fbb2 f2f3 	udiv	r2, r2, r3
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425c:	e004      	b.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4a33      	ldr	r2, [pc, #204]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004268:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004274:	d102      	bne.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800427a:	e04a      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4a2c      	ldr	r2, [pc, #176]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800428a:	e042      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429c:	d108      	bne.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80042a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ae:	e01f      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80042c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	e00f      	b.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042da:	d11c      	bne.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d016      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80042e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042ee:	e012      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80042f0:	e011      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042f2:	f7ff fe75 	bl	8003fe0 <HAL_RCC_GetPCLK2Freq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0b9b      	lsrs	r3, r3, #14
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800430c:	e004      	b.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800430e:	bf00      	nop
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004312:	bf00      	nop
 8004314:	e000      	b.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004316:	bf00      	nop
    }
  }
  return (frequency);
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800431a:	4618      	mov	r0, r3
 800431c:	3734      	adds	r7, #52	; 0x34
 800431e:	46bd      	mov	sp, r7
 8004320:	bd90      	pop	{r4, r7, pc}
 8004322:	bf00      	nop
 8004324:	0800a6e0 	.word	0x0800a6e0
 8004328:	40021000 	.word	0x40021000
 800432c:	007a1200 	.word	0x007a1200
 8004330:	003d0900 	.word	0x003d0900
 8004334:	aaaaaaab 	.word	0xaaaaaaab

08004338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e076      	b.n	8004438 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d108      	bne.n	8004364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d009      	beq.n	8004370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	61da      	str	r2, [r3, #28]
 8004362:	e005      	b.n	8004370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fcf0 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	ea42 0103 	orr.w	r1, r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	0c1a      	lsrs	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f002 0204 	and.w	r2, r2, #4
 8004416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Transmit+0x22>
 800445e:	2302      	movs	r3, #2
 8004460:	e126      	b.n	80046b0 <HAL_SPI_Transmit+0x270>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800446a:	f7fc fedd 	bl	8001228 <HAL_GetTick>
 800446e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d002      	beq.n	8004486 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004484:	e10b      	b.n	800469e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SPI_Transmit+0x52>
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004496:	e102      	b.n	800469e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2203      	movs	r2, #3
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044de:	d10f      	bne.n	8004500 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d007      	beq.n	800451e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004526:	d14b      	bne.n	80045c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <HAL_SPI_Transmit+0xf6>
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d13e      	bne.n	80045b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800455a:	e02b      	b.n	80045b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d112      	bne.n	8004590 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	1c9a      	adds	r2, r3, #2
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	86da      	strh	r2, [r3, #54]	; 0x36
 800458e:	e011      	b.n	80045b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004590:	f7fc fe4a 	bl	8001228 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d803      	bhi.n	80045a8 <HAL_SPI_Transmit+0x168>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	d102      	bne.n	80045ae <HAL_SPI_Transmit+0x16e>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045b2:	e074      	b.n	800469e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ce      	bne.n	800455c <HAL_SPI_Transmit+0x11c>
 80045be:	e04c      	b.n	800465a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Transmit+0x18e>
 80045c8:	8afb      	ldrh	r3, [r7, #22]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d140      	bne.n	8004650 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045f4:	e02c      	b.n	8004650 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b02      	cmp	r3, #2
 8004602:	d113      	bne.n	800462c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	86da      	strh	r2, [r3, #54]	; 0x36
 800462a:	e011      	b.n	8004650 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462c:	f7fc fdfc 	bl	8001228 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d803      	bhi.n	8004644 <HAL_SPI_Transmit+0x204>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d102      	bne.n	800464a <HAL_SPI_Transmit+0x20a>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800464e:	e026      	b.n	800469e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1cd      	bne.n	80045f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8b2 	bl	80047c8 <SPI_EndRxTxTransaction>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e000      	b.n	800469e <HAL_SPI_Transmit+0x25e>
  }

error:
 800469c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046c8:	f7fc fdae 	bl	8001228 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046d8:	f7fc fda6 	bl	8001228 <HAL_GetTick>
 80046dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046de:	4b39      	ldr	r3, [pc, #228]	; (80047c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	015b      	lsls	r3, r3, #5
 80046e4:	0d1b      	lsrs	r3, r3, #20
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ee:	e054      	b.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f6:	d050      	beq.n	800479a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046f8:	f7fc fd96 	bl	8001228 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	429a      	cmp	r2, r3
 8004706:	d902      	bls.n	800470e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d13d      	bne.n	800478a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800471c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004726:	d111      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	d004      	beq.n	800473c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473a:	d107      	bne.n	800474c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004754:	d10f      	bne.n	8004776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e017      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3b01      	subs	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4013      	ands	r3, r2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	bf0c      	ite	eq
 80047aa:	2301      	moveq	r3, #1
 80047ac:	2300      	movne	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d19b      	bne.n	80046f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000054 	.word	0x20000054

080047c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2200      	movs	r2, #0
 80047dc:	2180      	movs	r1, #128	; 0x80
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff ff6a 	bl	80046b8 <SPI_WaitFlagStateUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d007      	beq.n	80047fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f043 0220 	orr.w	r2, r3, #32
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e000      	b.n	80047fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e041      	b.n	800489a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fc fade 	bl	8000dec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f000 fb38 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
	...

080048a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Start_IT+0x1a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e013      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x42>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Start_IT+0x2a>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	e00b      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x42>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d104      	bne.n	80048de <HAL_TIM_IC_Start_IT+0x3a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	e003      	b.n	80048e6 <HAL_TIM_IC_Start_IT+0x42>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <HAL_TIM_IC_Start_IT+0x54>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e013      	b.n	8004920 <HAL_TIM_IC_Start_IT+0x7c>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d104      	bne.n	8004908 <HAL_TIM_IC_Start_IT+0x64>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e00b      	b.n	8004920 <HAL_TIM_IC_Start_IT+0x7c>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b08      	cmp	r3, #8
 800490c:	d104      	bne.n	8004918 <HAL_TIM_IC_Start_IT+0x74>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e003      	b.n	8004920 <HAL_TIM_IC_Start_IT+0x7c>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800491e:	b2db      	uxtb	r3, r3
 8004920:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d102      	bne.n	800492e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004928:	7bbb      	ldrb	r3, [r7, #14]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d001      	beq.n	8004932 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0b3      	b.n	8004a9a <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d104      	bne.n	8004942 <HAL_TIM_IC_Start_IT+0x9e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004940:	e013      	b.n	800496a <HAL_TIM_IC_Start_IT+0xc6>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b04      	cmp	r3, #4
 8004946:	d104      	bne.n	8004952 <HAL_TIM_IC_Start_IT+0xae>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	e00b      	b.n	800496a <HAL_TIM_IC_Start_IT+0xc6>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d104      	bne.n	8004962 <HAL_TIM_IC_Start_IT+0xbe>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004960:	e003      	b.n	800496a <HAL_TIM_IC_Start_IT+0xc6>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_TIM_IC_Start_IT+0xd6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	e013      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0xfe>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d104      	bne.n	800498a <HAL_TIM_IC_Start_IT+0xe6>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	e00b      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0xfe>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d104      	bne.n	800499a <HAL_TIM_IC_Start_IT+0xf6>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004998:	e003      	b.n	80049a2 <HAL_TIM_IC_Start_IT+0xfe>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	d841      	bhi.n	8004a2c <HAL_TIM_IC_Start_IT+0x188>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_TIM_IC_Start_IT+0x10c>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049e5 	.word	0x080049e5
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a2d 	.word	0x08004a2d
 80049c0:	080049f7 	.word	0x080049f7
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a1b 	.word	0x08004a1b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0202 	orr.w	r2, r2, #2
 80049f2:	60da      	str	r2, [r3, #12]
      break;
 80049f4:	e01b      	b.n	8004a2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0204 	orr.w	r2, r2, #4
 8004a04:	60da      	str	r2, [r3, #12]
      break;
 8004a06:	e012      	b.n	8004a2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0208 	orr.w	r2, r2, #8
 8004a16:	60da      	str	r2, [r3, #12]
      break;
 8004a18:	e009      	b.n	8004a2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0210 	orr.w	r2, r2, #16
 8004a28:	60da      	str	r2, [r3, #12]
      break;
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004a2c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fbad 	bl	8005196 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <HAL_TIM_IC_Start_IT+0x200>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_TIM_IC_Start_IT+0x1c0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d009      	beq.n	8004a64 <HAL_TIM_IC_Start_IT+0x1c0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <HAL_TIM_IC_Start_IT+0x204>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_IC_Start_IT+0x1c0>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <HAL_TIM_IC_Start_IT+0x208>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d111      	bne.n	8004a88 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d010      	beq.n	8004a98 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	e007      	b.n	8004a98 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800

08004ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d122      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d11b      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0202 	mvn.w	r2, #2
 8004adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fb fc44 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f9c1 	bl	8004e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f9c7 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d122      	bne.n	8004b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d11b      	bne.n	8004b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0204 	mvn.w	r2, #4
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fb fc1a 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f997 	bl	8004e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f99d 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0208 	mvn.w	r2, #8
 8004b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fb fbf0 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f96d 	bl	8004e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f973 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0210 	mvn.w	r2, #16
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2208      	movs	r2, #8
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fb fbc6 	bl	8000380 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f943 	bl	8004e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f949 	bl	8004e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0201 	mvn.w	r2, #1
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f91e 	bl	8004e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d10e      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	2b80      	cmp	r3, #128	; 0x80
 8004c4e:	d107      	bne.n	8004c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fb27 	bl	80052ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	2b40      	cmp	r3, #64	; 0x40
 8004c6c:	d10e      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d107      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f90d 	bl	8004ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0220 	mvn.w	r2, #32
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 faf2 	bl	800529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_TIM_IC_ConfigChannel+0x1a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e082      	b.n	8004de0 <HAL_TIM_IC_ConfigChannel+0x120>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6819      	ldr	r1, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f000 f940 	bl	8004f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 020c 	bic.w	r2, r2, #12
 8004d0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
 8004d1e:	e05a      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d11c      	bne.n	8004d60 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6819      	ldr	r1, [r3, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f000 f97b 	bl	8005030 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6999      	ldr	r1, [r3, #24]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	619a      	str	r2, [r3, #24]
 8004d5e:	e03a      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b08      	cmp	r3, #8
 8004d64:	d11b      	bne.n	8004d9e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f000 f997 	bl	80050a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 020c 	bic.w	r2, r2, #12
 8004d88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69d9      	ldr	r1, [r3, #28]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	61da      	str	r2, [r3, #28]
 8004d9c:	e01b      	b.n	8004dd6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f000 f9b6 	bl	800511e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69d9      	ldr	r1, [r3, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	021a      	lsls	r2, r3, #8
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d831      	bhi.n	8004e60 <HAL_TIM_ReadCapturedValue+0x78>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e61 	.word	0x08004e61
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e61 	.word	0x08004e61
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004e57 	.word	0x08004e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	60fb      	str	r3, [r7, #12]

      break;
 8004e40:	e00f      	b.n	8004e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	60fb      	str	r3, [r7, #12]

      break;
 8004e4a:	e00a      	b.n	8004e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	60fb      	str	r3, [r7, #12]

      break;
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	60fb      	str	r3, [r7, #12]

      break;
 8004e5e:	e000      	b.n	8004e62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e60:	bf00      	nop
  }

  return tmpreg;
 8004e62:	68fb      	ldr	r3, [r7, #12]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop

08004e70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <TIM_Base_SetConfig+0xb8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00b      	beq.n	8004ee8 <TIM_Base_SetConfig+0x30>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d007      	beq.n	8004ee8 <TIM_Base_SetConfig+0x30>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <TIM_Base_SetConfig+0xbc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0x30>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <TIM_Base_SetConfig+0xc0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d108      	bne.n	8004efa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <TIM_Base_SetConfig+0xb8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	; (8004f74 <TIM_Base_SetConfig+0xbc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <TIM_Base_SetConfig+0xc0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a07      	ldr	r2, [pc, #28]	; (8004f70 <TIM_Base_SetConfig+0xb8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d103      	bne.n	8004f60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	615a      	str	r2, [r3, #20]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800

08004f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0201 	bic.w	r2, r3, #1
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <TIM_TI1_SetConfig+0xa8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00b      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x46>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d007      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x46>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	; (8005028 <TIM_TI1_SetConfig+0xac>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d003      	beq.n	8004fc2 <TIM_TI1_SetConfig+0x46>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <TIM_TI1_SetConfig+0xb0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d101      	bne.n	8004fc6 <TIM_TI1_SetConfig+0x4a>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <TIM_TI1_SetConfig+0x4c>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	e003      	b.n	8004fe6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 030a 	bic.w	r3, r3, #10
 8005000:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 030a 	and.w	r3, r3, #10
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800

08005030 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0210 	bic.w	r2, r3, #16
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	021b      	lsls	r3, r3, #8
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800506e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	031b      	lsls	r3, r3, #12
 8005074:	b29b      	uxth	r3, r3
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
 800512a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	b29b      	uxth	r3, r3
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005170:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	031b      	lsls	r3, r3, #12
 8005176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	621a      	str	r2, [r3, #32]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	401a      	ands	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e046      	b.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d009      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10c      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4313      	orrs	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800

0800529c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052c0:	b084      	sub	sp, #16
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	f107 0014 	add.w	r0, r7, #20
 80052ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	b004      	add	sp, #16
 80052de:	4770      	bx	lr

080052e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80052f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005314:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005318:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	b29b      	uxth	r3, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	4013      	ands	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr

08005358 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005358:	b084      	sub	sp, #16
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	f107 0014 	add.w	r0, r7, #20
 8005366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	b004      	add	sp, #16
 8005396:	4770      	bx	lr

08005398 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005398:	b480      	push	{r7}
 800539a:	b09b      	sub	sp, #108	; 0x6c
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	78db      	ldrb	r3, [r3, #3]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d81f      	bhi.n	800540a <USB_ActivateEndpoint+0x72>
 80053ca:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <USB_ActivateEndpoint+0x38>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	080053e1 	.word	0x080053e1
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005413 	.word	0x08005413
 80053dc:	080053ef 	.word	0x080053ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80053e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053ec:	e012      	b.n	8005414 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80053ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80053f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80053f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80053fa:	e00b      	b.n	8005414 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80053fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005404:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005408:	e004      	b.n	8005414 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005410:	e000      	b.n	8005414 <USB_ActivateEndpoint+0x7c>
      break;
 8005412:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005432:	b29b      	uxth	r3, r3
 8005434:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	b29a      	uxth	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	4313      	orrs	r3, r2
 8005456:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	441a      	add	r2, r3
 8005464:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005478:	b29b      	uxth	r3, r3
 800547a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	7b1b      	ldrb	r3, [r3, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 8149 	bne.w	8005718 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 8084 	beq.w	8005598 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549a:	b29b      	uxth	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	011a      	lsls	r2, r3, #4
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	88db      	ldrh	r3, [r3, #6]
 80054b8:	085b      	lsrs	r3, r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	81fb      	strh	r3, [r7, #14]
 80054d2:	89fb      	ldrh	r3, [r7, #14]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <USB_ActivateEndpoint+0x17c>
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	81bb      	strh	r3, [r7, #12]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	441a      	add	r2, r3
 80054fe:	89bb      	ldrh	r3, [r7, #12]
 8005500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005510:	b29b      	uxth	r3, r3
 8005512:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	78db      	ldrb	r3, [r3, #3]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d020      	beq.n	800555e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005532:	813b      	strh	r3, [r7, #8]
 8005534:	893b      	ldrh	r3, [r7, #8]
 8005536:	f083 0320 	eor.w	r3, r3, #32
 800553a:	813b      	strh	r3, [r7, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	893b      	ldrh	r3, [r7, #8]
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]
 800555c:	e27f      	b.n	8005a5e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	897b      	ldrh	r3, [r7, #10]
 8005582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	b29b      	uxth	r3, r3
 8005594:	8013      	strh	r3, [r2, #0]
 8005596:	e262      	b.n	8005a5e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a8:	4413      	add	r3, r2
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	011a      	lsls	r2, r3, #4
 80055b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	88db      	ldrh	r3, [r3, #6]
 80055c0:	085b      	lsrs	r3, r3, #1
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	005b      	lsls	r3, r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	4413      	add	r3, r2
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	011a      	lsls	r2, r3, #4
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	4413      	add	r3, r2
 80055ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d112      	bne.n	800561e <USB_ActivateEndpoint+0x286>
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005602:	b29a      	uxth	r2, r3
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005616:	b29a      	uxth	r2, r3
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e02f      	b.n	800567e <USB_ActivateEndpoint+0x2e6>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b3e      	cmp	r3, #62	; 0x3e
 8005624:	d813      	bhi.n	800564e <USB_ActivateEndpoint+0x2b6>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	663b      	str	r3, [r7, #96]	; 0x60
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <USB_ActivateEndpoint+0x2a8>
 800563a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800563c:	3301      	adds	r3, #1
 800563e:	663b      	str	r3, [r7, #96]	; 0x60
 8005640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29a      	uxth	r2, r3
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e017      	b.n	800567e <USB_ActivateEndpoint+0x2e6>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	663b      	str	r3, [r7, #96]	; 0x60
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2b00      	cmp	r3, #0
 8005660:	d102      	bne.n	8005668 <USB_ActivateEndpoint+0x2d0>
 8005662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005664:	3b01      	subs	r3, #1
 8005666:	663b      	str	r3, [r7, #96]	; 0x60
 8005668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005678:	b29a      	uxth	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	83fb      	strh	r3, [r7, #30]
 800568c:	8bfb      	ldrh	r3, [r7, #30]
 800568e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <USB_ActivateEndpoint+0x336>
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ac:	83bb      	strh	r3, [r7, #28]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	8bbb      	ldrh	r3, [r7, #28]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e4:	837b      	strh	r3, [r7, #26]
 80056e6:	8b7b      	ldrh	r3, [r7, #26]
 80056e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056ec:	837b      	strh	r3, [r7, #26]
 80056ee:	8b7b      	ldrh	r3, [r7, #26]
 80056f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056f4:	837b      	strh	r3, [r7, #26]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	441a      	add	r2, r3
 8005700:	8b7b      	ldrh	r3, [r7, #26]
 8005702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005712:	b29b      	uxth	r3, r3
 8005714:	8013      	strh	r3, [r2, #0]
 8005716:	e1a2      	b.n	8005a5e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	441a      	add	r2, r3
 800573c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800574c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	65bb      	str	r3, [r7, #88]	; 0x58
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005764:	4413      	add	r3, r2
 8005766:	65bb      	str	r3, [r7, #88]	; 0x58
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	011a      	lsls	r2, r3, #4
 800576e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005770:	4413      	add	r3, r2
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	657b      	str	r3, [r7, #84]	; 0x54
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	891b      	ldrh	r3, [r3, #8]
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	b29b      	uxth	r3, r3
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	653b      	str	r3, [r7, #80]	; 0x50
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005798:	4413      	add	r3, r2
 800579a:	653b      	str	r3, [r7, #80]	; 0x50
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	011a      	lsls	r2, r3, #4
 80057a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80057aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	895b      	ldrh	r3, [r3, #10]
 80057b0:	085b      	lsrs	r3, r3, #1
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f040 8091 	bne.w	80058e8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80057d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01b      	beq.n	8005816 <USB_ActivateEndpoint+0x47e>
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800580e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005812:	b29b      	uxth	r3, r3
 8005814:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	873b      	strh	r3, [r7, #56]	; 0x38
 8005824:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01b      	beq.n	8005866 <USB_ActivateEndpoint+0x4ce>
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005844:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	441a      	add	r2, r3
 8005850:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800585a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005862:	b29b      	uxth	r3, r3
 8005864:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800587e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005880:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005884:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005886:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800588c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800589a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	441a      	add	r2, r3
 80058d0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]
 80058e6:	e0ba      	b.n	8005a5e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01d      	beq.n	8005940 <USB_ActivateEndpoint+0x5a8>
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005950:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01d      	beq.n	8005998 <USB_ActivateEndpoint+0x600>
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	441a      	add	r2, r3
 8005980:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005990:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	78db      	ldrb	r3, [r3, #3]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d024      	beq.n	80059ea <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059be:	f083 0320 	eor.w	r3, r3, #32
 80059c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
 80059e8:	e01d      	b.n	8005a26 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005a5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	376c      	adds	r7, #108	; 0x6c
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b08d      	sub	sp, #52	; 0x34
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	7b1b      	ldrb	r3, [r3, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 808e 	bne.w	8005b9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d044      	beq.n	8005b12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	81bb      	strh	r3, [r7, #12]
 8005a96:	89bb      	ldrh	r3, [r7, #12]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01b      	beq.n	8005ad8 <USB_DeactivateEndpoint+0x6c>
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab6:	817b      	strh	r3, [r7, #10]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	897b      	ldrh	r3, [r7, #10]
 8005ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aee:	813b      	strh	r3, [r7, #8]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	893b      	ldrh	r3, [r7, #8]
 8005afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8013      	strh	r3, [r2, #0]
 8005b10:	e192      	b.n	8005e38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	827b      	strh	r3, [r7, #18]
 8005b20:	8a7b      	ldrh	r3, [r7, #18]
 8005b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01b      	beq.n	8005b62 <USB_DeactivateEndpoint+0xf6>
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b40:	823b      	strh	r3, [r7, #16]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	8a3b      	ldrh	r3, [r7, #16]
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b78:	81fb      	strh	r3, [r7, #14]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	89fb      	ldrh	r3, [r7, #14]
 8005b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	8013      	strh	r3, [r2, #0]
 8005b9a:	e14d      	b.n	8005e38 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 80a5 	bne.w	8005cf0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	843b      	strh	r3, [r7, #32]
 8005bb4:	8c3b      	ldrh	r3, [r7, #32]
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01b      	beq.n	8005bf6 <USB_DeactivateEndpoint+0x18a>
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	83fb      	strh	r3, [r7, #30]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	8bfb      	ldrh	r3, [r7, #30]
 8005be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	83bb      	strh	r3, [r7, #28]
 8005c04:	8bbb      	ldrh	r3, [r7, #28]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d01b      	beq.n	8005c46 <USB_DeactivateEndpoint+0x1da>
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	837b      	strh	r3, [r7, #26]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	8b7b      	ldrh	r3, [r7, #26]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5c:	833b      	strh	r3, [r7, #24]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8b3b      	ldrh	r3, [r7, #24]
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c94:	82fb      	strh	r3, [r7, #22]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	441a      	add	r2, r3
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	82bb      	strh	r3, [r7, #20]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	8abb      	ldrh	r3, [r7, #20]
 8005cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8013      	strh	r3, [r2, #0]
 8005cee:	e0a3      	b.n	8005e38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01b      	beq.n	8005d40 <USB_DeactivateEndpoint+0x2d4>
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d01b      	beq.n	8005d90 <USB_DeactivateEndpoint+0x324>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	441a      	add	r2, r3
 8005dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	441a      	add	r2, r3
 8005e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3734      	adds	r7, #52	; 0x34
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b0c4      	sub	sp, #272	; 0x110
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	6018      	str	r0, [r3, #0]
 8005e4e:	463b      	mov	r3, r7
 8005e50:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	f040 8557 	bne.w	800690c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	463b      	mov	r3, r7
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d905      	bls.n	8005e7a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e78:	e004      	b.n	8005e84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	7b1b      	ldrb	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d12c      	bne.n	8005ee8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6959      	ldr	r1, [r3, #20]
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	88da      	ldrh	r2, [r3, #6]
 8005e9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	1d38      	adds	r0, r7, #4
 8005ea2:	6800      	ldr	r0, [r0, #0]
 8005ea4:	f001 fa2c 	bl	8007300 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	1d3b      	adds	r3, r7, #4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	011a      	lsls	r2, r3, #4
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	f000 bcdd 	b.w	80068a2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ee8:	463b      	mov	r3, r7
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	78db      	ldrb	r3, [r3, #3]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f040 8347 	bne.w	8006582 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005ef4:	463b      	mov	r3, r7
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	f240 82eb 	bls.w	80064dc <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005f06:	1d3b      	adds	r3, r7, #4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005f24:	1d3b      	adds	r3, r7, #4
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f54:	1ad2      	subs	r2, r2, r3
 8005f56:	463b      	mov	r3, r7
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	463b      	mov	r3, r7
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8159 	beq.w	800622a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f78:	1d3b      	adds	r3, r7, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7e:	463b      	mov	r3, r7
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d164      	bne.n	8006052 <USB_EPStartXfer+0x20e>
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	4413      	add	r3, r2
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d112      	bne.n	8005fe0 <USB_EPStartXfer+0x19c>
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e054      	b.n	800608a <USB_EPStartXfer+0x246>
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe6:	d817      	bhi.n	8006018 <USB_EPStartXfer+0x1d4>
 8005fe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <USB_EPStartXfer+0x1c4>
 8005ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006002:	3301      	adds	r3, #1
 8006004:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800600c:	b29b      	uxth	r3, r3
 800600e:	029b      	lsls	r3, r3, #10
 8006010:	b29a      	uxth	r2, r3
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	e038      	b.n	800608a <USB_EPStartXfer+0x246>
 8006018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <USB_EPStartXfer+0x1f4>
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006032:	3b01      	subs	r3, #1
 8006034:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800603c:	b29b      	uxth	r3, r3
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800604a:	b29a      	uxth	r2, r3
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	801a      	strh	r2, [r3, #0]
 8006050:	e01b      	b.n	800608a <USB_EPStartXfer+0x246>
 8006052:	463b      	mov	r3, r7
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d116      	bne.n	800608a <USB_EPStartXfer+0x246>
 800605c:	1d3b      	adds	r3, r7, #4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	4413      	add	r3, r2
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
 800606e:	463b      	mov	r3, r7
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	011a      	lsls	r2, r3, #4
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	4413      	add	r3, r2
 800607a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
 8006080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006084:	b29a      	uxth	r2, r3
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	895b      	ldrh	r3, [r3, #10]
 8006090:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6959      	ldr	r1, [r3, #20]
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060a4:	1d38      	adds	r0, r7, #4
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	f001 f92a 	bl	8007300 <USB_WritePMA>
            ep->xfer_buff += len;
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b6:	441a      	add	r2, r3
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060be:	463b      	mov	r3, r7
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a1a      	ldr	r2, [r3, #32]
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d909      	bls.n	80060e2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80060ce:	463b      	mov	r3, r7
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d8:	1ad2      	subs	r2, r2, r3
 80060da:	463b      	mov	r3, r7
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	621a      	str	r2, [r3, #32]
 80060e0:	e008      	b.n	80060f4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80060e2:	463b      	mov	r3, r7
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d164      	bne.n	80061c8 <USB_EPStartXfer+0x384>
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	1d3b      	adds	r3, r7, #4
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610c:	b29b      	uxth	r3, r3
 800610e:	461a      	mov	r2, r3
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	463b      	mov	r3, r7
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	011a      	lsls	r2, r3, #4
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d112      	bne.n	8006156 <USB_EPStartXfer+0x312>
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800613a:	b29a      	uxth	r2, r3
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614e:	b29a      	uxth	r2, r3
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e057      	b.n	8006206 <USB_EPStartXfer+0x3c2>
 8006156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800615a:	2b3e      	cmp	r3, #62	; 0x3e
 800615c:	d817      	bhi.n	800618e <USB_EPStartXfer+0x34a>
 800615e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <USB_EPStartXfer+0x33a>
 8006174:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006178:	3301      	adds	r3, #1
 800617a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800617e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006182:	b29b      	uxth	r3, r3
 8006184:	029b      	lsls	r3, r3, #10
 8006186:	b29a      	uxth	r2, r3
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	801a      	strh	r2, [r3, #0]
 800618c:	e03b      	b.n	8006206 <USB_EPStartXfer+0x3c2>
 800618e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d104      	bne.n	80061ae <USB_EPStartXfer+0x36a>
 80061a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061a8:	3b01      	subs	r3, #1
 80061aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e01e      	b.n	8006206 <USB_EPStartXfer+0x3c2>
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d119      	bne.n	8006206 <USB_EPStartXfer+0x3c2>
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
 80061d8:	1d3b      	adds	r3, r7, #4
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	4413      	add	r3, r2
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	463b      	mov	r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	011a      	lsls	r2, r3, #4
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061fa:	623b      	str	r3, [r7, #32]
 80061fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006200:	b29a      	uxth	r2, r3
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	891b      	ldrh	r3, [r3, #8]
 800620c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006210:	463b      	mov	r3, r7
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6959      	ldr	r1, [r3, #20]
 8006216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621a:	b29b      	uxth	r3, r3
 800621c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006220:	1d38      	adds	r0, r7, #4
 8006222:	6800      	ldr	r0, [r0, #0]
 8006224:	f001 f86c 	bl	8007300 <USB_WritePMA>
 8006228:	e33b      	b.n	80068a2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800622a:	463b      	mov	r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d164      	bne.n	80062fe <USB_EPStartXfer+0x4ba>
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800623a:	1d3b      	adds	r3, r7, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006242:	b29b      	uxth	r3, r3
 8006244:	461a      	mov	r2, r3
 8006246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006248:	4413      	add	r3, r2
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	011a      	lsls	r2, r3, #4
 8006254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006256:	4413      	add	r3, r2
 8006258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800625c:	64bb      	str	r3, [r7, #72]	; 0x48
 800625e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d112      	bne.n	800628c <USB_EPStartXfer+0x448>
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006270:	b29a      	uxth	r2, r3
 8006272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006284:	b29a      	uxth	r2, r3
 8006286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e057      	b.n	800633c <USB_EPStartXfer+0x4f8>
 800628c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006290:	2b3e      	cmp	r3, #62	; 0x3e
 8006292:	d817      	bhi.n	80062c4 <USB_EPStartXfer+0x480>
 8006294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800629e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <USB_EPStartXfer+0x470>
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ae:	3301      	adds	r3, #1
 80062b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	b29a      	uxth	r2, r3
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	e03b      	b.n	800633c <USB_EPStartXfer+0x4f8>
 80062c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <USB_EPStartXfer+0x4a0>
 80062da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062de:	3b01      	subs	r3, #1
 80062e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80062e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	029b      	lsls	r3, r3, #10
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	e01e      	b.n	800633c <USB_EPStartXfer+0x4f8>
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d119      	bne.n	800633c <USB_EPStartXfer+0x4f8>
 8006308:	1d3b      	adds	r3, r7, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	657b      	str	r3, [r7, #84]	; 0x54
 800630e:	1d3b      	adds	r3, r7, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631c:	4413      	add	r3, r2
 800631e:	657b      	str	r3, [r7, #84]	; 0x54
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	011a      	lsls	r2, r3, #4
 8006328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632a:	4413      	add	r3, r2
 800632c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006330:	653b      	str	r3, [r7, #80]	; 0x50
 8006332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006336:	b29a      	uxth	r2, r3
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	891b      	ldrh	r3, [r3, #8]
 8006342:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6959      	ldr	r1, [r3, #20]
 800634c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006350:	b29b      	uxth	r3, r3
 8006352:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006356:	1d38      	adds	r0, r7, #4
 8006358:	6800      	ldr	r0, [r0, #0]
 800635a:	f000 ffd1 	bl	8007300 <USB_WritePMA>
            ep->xfer_buff += len;
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006368:	441a      	add	r2, r3
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	429a      	cmp	r2, r3
 800637e:	d909      	bls.n	8006394 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006380:	463b      	mov	r3, r7
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	463b      	mov	r3, r7
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	621a      	str	r2, [r3, #32]
 8006392:	e008      	b.n	80063a6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006394:	463b      	mov	r3, r7
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2200      	movs	r2, #0
 80063a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80063a6:	1d3b      	adds	r3, r7, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	647b      	str	r3, [r7, #68]	; 0x44
 80063ac:	463b      	mov	r3, r7
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d164      	bne.n	8006480 <USB_EPStartXfer+0x63c>
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ca:	4413      	add	r3, r2
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ce:	463b      	mov	r3, r7
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	011a      	lsls	r2, r3, #4
 80063d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d8:	4413      	add	r3, r2
 80063da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063de:	63bb      	str	r3, [r7, #56]	; 0x38
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d112      	bne.n	800640e <USB_EPStartXfer+0x5ca>
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006406:	b29a      	uxth	r2, r3
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	801a      	strh	r2, [r3, #0]
 800640c:	e054      	b.n	80064b8 <USB_EPStartXfer+0x674>
 800640e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006412:	2b3e      	cmp	r3, #62	; 0x3e
 8006414:	d817      	bhi.n	8006446 <USB_EPStartXfer+0x602>
 8006416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d004      	beq.n	8006436 <USB_EPStartXfer+0x5f2>
 800642c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006430:	3301      	adds	r3, #1
 8006432:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800643a:	b29b      	uxth	r3, r3
 800643c:	029b      	lsls	r3, r3, #10
 800643e:	b29a      	uxth	r2, r3
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e038      	b.n	80064b8 <USB_EPStartXfer+0x674>
 8006446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006454:	f003 031f 	and.w	r3, r3, #31
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <USB_EPStartXfer+0x622>
 800645c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006460:	3b01      	subs	r3, #1
 8006462:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800646a:	b29b      	uxth	r3, r3
 800646c:	029b      	lsls	r3, r3, #10
 800646e:	b29b      	uxth	r3, r3
 8006470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006478:	b29a      	uxth	r2, r3
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	e01b      	b.n	80064b8 <USB_EPStartXfer+0x674>
 8006480:	463b      	mov	r3, r7
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d116      	bne.n	80064b8 <USB_EPStartXfer+0x674>
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006498:	4413      	add	r3, r2
 800649a:	647b      	str	r3, [r7, #68]	; 0x44
 800649c:	463b      	mov	r3, r7
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	011a      	lsls	r2, r3, #4
 80064a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064ac:	643b      	str	r3, [r7, #64]	; 0x40
 80064ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064b8:	463b      	mov	r3, r7
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	895b      	ldrh	r3, [r3, #10]
 80064be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6959      	ldr	r1, [r3, #20]
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80064d2:	1d38      	adds	r0, r7, #4
 80064d4:	6800      	ldr	r0, [r0, #0]
 80064d6:	f000 ff13 	bl	8007300 <USB_WritePMA>
 80064da:	e1e2      	b.n	80068a2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064dc:	463b      	mov	r3, r7
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80064e6:	1d3b      	adds	r3, r7, #4
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	463b      	mov	r3, r7
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80064fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006500:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006504:	1d3b      	adds	r3, r7, #4
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800652a:	1d3b      	adds	r3, r7, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	663b      	str	r3, [r7, #96]	; 0x60
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800653e:	4413      	add	r3, r2
 8006540:	663b      	str	r3, [r7, #96]	; 0x60
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	011a      	lsls	r2, r3, #4
 800654a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800654c:	4413      	add	r3, r2
 800654e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006552:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006558:	b29a      	uxth	r2, r3
 800655a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800655c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800655e:	463b      	mov	r3, r7
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	891b      	ldrh	r3, [r3, #8]
 8006564:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6959      	ldr	r1, [r3, #20]
 800656e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006572:	b29b      	uxth	r3, r3
 8006574:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006578:	1d38      	adds	r0, r7, #4
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	f000 fec0 	bl	8007300 <USB_WritePMA>
 8006580:	e18f      	b.n	80068a2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 808f 	beq.w	80066bc <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d164      	bne.n	8006678 <USB_EPStartXfer+0x834>
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	673b      	str	r3, [r7, #112]	; 0x70
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065c2:	4413      	add	r3, r2
 80065c4:	673b      	str	r3, [r7, #112]	; 0x70
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	011a      	lsls	r2, r3, #4
 80065ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d112      	bne.n	8006606 <USB_EPStartXfer+0x7c2>
 80065e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e054      	b.n	80066b0 <USB_EPStartXfer+0x86c>
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	2b3e      	cmp	r3, #62	; 0x3e
 800660c:	d817      	bhi.n	800663e <USB_EPStartXfer+0x7fa>
 800660e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <USB_EPStartXfer+0x7ea>
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	3301      	adds	r3, #1
 800662a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	b29b      	uxth	r3, r3
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	b29a      	uxth	r2, r3
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	e038      	b.n	80066b0 <USB_EPStartXfer+0x86c>
 800663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <USB_EPStartXfer+0x81a>
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	3b01      	subs	r3, #1
 800665a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006670:	b29a      	uxth	r2, r3
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e01b      	b.n	80066b0 <USB_EPStartXfer+0x86c>
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d116      	bne.n	80066b0 <USB_EPStartXfer+0x86c>
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006690:	4413      	add	r3, r2
 8006692:	67bb      	str	r3, [r7, #120]	; 0x78
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	011a      	lsls	r2, r3, #4
 800669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669e:	4413      	add	r3, r2
 80066a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066a4:	677b      	str	r3, [r7, #116]	; 0x74
 80066a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80066b0:	463b      	mov	r3, r7
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	895b      	ldrh	r3, [r3, #10]
 80066b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80066ba:	e097      	b.n	80067ec <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066bc:	463b      	mov	r3, r7
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	785b      	ldrb	r3, [r3, #1]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d168      	bne.n	8006798 <USB_EPStartXfer+0x954>
 80066c6:	1d3b      	adds	r3, r7, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066de:	4413      	add	r3, r2
 80066e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	011a      	lsls	r2, r3, #4
 80066ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d112      	bne.n	8006726 <USB_EPStartXfer+0x8e2>
 8006700:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670a:	b29a      	uxth	r2, r3
 800670c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	b29b      	uxth	r3, r3
 8006716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800671e:	b29a      	uxth	r2, r3
 8006720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006722:	801a      	strh	r2, [r3, #0]
 8006724:	e05d      	b.n	80067e2 <USB_EPStartXfer+0x99e>
 8006726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800672a:	2b3e      	cmp	r3, #62	; 0x3e
 800672c:	d817      	bhi.n	800675e <USB_EPStartXfer+0x91a>
 800672e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <USB_EPStartXfer+0x90a>
 8006744:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006748:	3301      	adds	r3, #1
 800674a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800674e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006752:	b29b      	uxth	r3, r3
 8006754:	029b      	lsls	r3, r3, #10
 8006756:	b29a      	uxth	r2, r3
 8006758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800675a:	801a      	strh	r2, [r3, #0]
 800675c:	e041      	b.n	80067e2 <USB_EPStartXfer+0x99e>
 800675e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676c:	f003 031f 	and.w	r3, r3, #31
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <USB_EPStartXfer+0x93a>
 8006774:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006778:	3b01      	subs	r3, #1
 800677a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800677e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006782:	b29b      	uxth	r3, r3
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800678c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006790:	b29a      	uxth	r2, r3
 8006792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006794:	801a      	strh	r2, [r3, #0]
 8006796:	e024      	b.n	80067e2 <USB_EPStartXfer+0x99e>
 8006798:	463b      	mov	r3, r7
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d11f      	bne.n	80067e2 <USB_EPStartXfer+0x99e>
 80067a2:	1d3b      	adds	r3, r7, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067ba:	4413      	add	r3, r2
 80067bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067c0:	463b      	mov	r3, r7
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	011a      	lsls	r2, r3, #4
 80067c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067cc:	4413      	add	r3, r2
 80067ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067da:	b29a      	uxth	r2, r3
 80067dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067e2:	463b      	mov	r3, r7
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	891b      	ldrh	r3, [r3, #8]
 80067e8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6959      	ldr	r1, [r3, #20]
 80067f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80067fc:	1d38      	adds	r0, r7, #4
 80067fe:	6800      	ldr	r0, [r0, #0]
 8006800:	f000 fd7e 	bl	8007300 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d122      	bne.n	8006854 <USB_EPStartXfer+0xa10>
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	463b      	mov	r3, r7
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	881b      	ldrh	r3, [r3, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006828:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	441a      	add	r2, r3
 800683a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800683e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800684e:	b29b      	uxth	r3, r3
 8006850:	8013      	strh	r3, [r2, #0]
 8006852:	e026      	b.n	80068a2 <USB_EPStartXfer+0xa5e>
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	785b      	ldrb	r3, [r3, #1]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d121      	bne.n	80068a2 <USB_EPStartXfer+0xa5e>
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	463b      	mov	r3, r7
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800687c:	1d3b      	adds	r3, r7, #4
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f107 020e 	add.w	r2, r7, #14
 80068b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c0:	8013      	strh	r3, [r2, #0]
 80068c2:	f107 030e 	add.w	r3, r7, #14
 80068c6:	f107 020e 	add.w	r2, r7, #14
 80068ca:	8812      	ldrh	r2, [r2, #0]
 80068cc:	f082 0210 	eor.w	r2, r2, #16
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	f107 030e 	add.w	r3, r7, #14
 80068d6:	f107 020e 	add.w	r2, r7, #14
 80068da:	8812      	ldrh	r2, [r2, #0]
 80068dc:	f082 0220 	eor.w	r2, r2, #32
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	463b      	mov	r3, r7
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	f107 030e 	add.w	r3, r7, #14
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
 800690a:	e3b5      	b.n	8007078 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800690c:	463b      	mov	r3, r7
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	7b1b      	ldrb	r3, [r3, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 8090 	bne.w	8006a38 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	429a      	cmp	r2, r3
 8006926:	d90e      	bls.n	8006946 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006928:	463b      	mov	r3, r7
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006932:	463b      	mov	r3, r7
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699a      	ldr	r2, [r3, #24]
 8006938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	619a      	str	r2, [r3, #24]
 8006944:	e008      	b.n	8006958 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006946:	463b      	mov	r3, r7
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006950:	463b      	mov	r3, r7
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006958:	1d3b      	adds	r3, r7, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006968:	b29b      	uxth	r3, r3
 800696a:	461a      	mov	r2, r3
 800696c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006970:	4413      	add	r3, r2
 8006972:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006976:	463b      	mov	r3, r7
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	011a      	lsls	r2, r3, #4
 800697e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006982:	4413      	add	r3, r2
 8006984:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800698c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006990:	2b00      	cmp	r3, #0
 8006992:	d116      	bne.n	80069c2 <USB_EPStartXfer+0xb7e>
 8006994:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069a6:	801a      	strh	r2, [r3, #0]
 80069a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069be:	801a      	strh	r2, [r3, #0]
 80069c0:	e32c      	b.n	800701c <USB_EPStartXfer+0x11d8>
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c6:	2b3e      	cmp	r3, #62	; 0x3e
 80069c8:	d818      	bhi.n	80069fc <USB_EPStartXfer+0xbb8>
 80069ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <USB_EPStartXfer+0xba6>
 80069e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069e4:	3301      	adds	r3, #1
 80069e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80069ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	029b      	lsls	r3, r3, #10
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e30f      	b.n	800701c <USB_EPStartXfer+0x11d8>
 80069fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d104      	bne.n	8006a1c <USB_EPStartXfer+0xbd8>
 8006a12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a16:	3b01      	subs	r3, #1
 8006a18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	e2f1      	b.n	800701c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006a38:	463b      	mov	r3, r7
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	f040 818f 	bne.w	8006d62 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006a44:	463b      	mov	r3, r7
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d175      	bne.n	8006b3a <USB_EPStartXfer+0xcf6>
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	461a      	mov	r2, r3
 8006a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a66:	4413      	add	r3, r2
 8006a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	011a      	lsls	r2, r3, #4
 8006a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a82:	463b      	mov	r3, r7
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d116      	bne.n	8006aba <USB_EPStartXfer+0xc76>
 8006a8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e065      	b.n	8006b86 <USB_EPStartXfer+0xd42>
 8006aba:	463b      	mov	r3, r7
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ac2:	d81a      	bhi.n	8006afa <USB_EPStartXfer+0xcb6>
 8006ac4:	463b      	mov	r3, r7
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <USB_EPStartXfer+0xca4>
 8006ade:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ae8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	029b      	lsls	r3, r3, #10
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e045      	b.n	8006b86 <USB_EPStartXfer+0xd42>
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b06:	463b      	mov	r3, r7
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <USB_EPStartXfer+0xcda>
 8006b14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	029b      	lsls	r3, r3, #10
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	e025      	b.n	8006b86 <USB_EPStartXfer+0xd42>
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	785b      	ldrb	r3, [r3, #1]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d120      	bne.n	8006b86 <USB_EPStartXfer+0xd42>
 8006b44:	1d3b      	adds	r3, r7, #4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	011a      	lsls	r2, r3, #4
 8006b6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b6e:	4413      	add	r3, r2
 8006b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b8e:	463b      	mov	r3, r7
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	785b      	ldrb	r3, [r3, #1]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d175      	bne.n	8006c84 <USB_EPStartXfer+0xe40>
 8006b98:	1d3b      	adds	r3, r7, #4
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	461a      	mov	r2, r3
 8006bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	011a      	lsls	r2, r3, #4
 8006bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bcc:	463b      	mov	r3, r7
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d116      	bne.n	8006c04 <USB_EPStartXfer+0xdc0>
 8006bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006be8:	801a      	strh	r2, [r3, #0]
 8006bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	e061      	b.n	8006cc8 <USB_EPStartXfer+0xe84>
 8006c04:	463b      	mov	r3, r7
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c0c:	d81a      	bhi.n	8006c44 <USB_EPStartXfer+0xe00>
 8006c0e:	463b      	mov	r3, r7
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <USB_EPStartXfer+0xdee>
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e041      	b.n	8006cc8 <USB_EPStartXfer+0xe84>
 8006c44:	463b      	mov	r3, r7
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	095b      	lsrs	r3, r3, #5
 8006c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c50:	463b      	mov	r3, r7
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <USB_EPStartXfer+0xe24>
 8006c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	029b      	lsls	r3, r3, #10
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e021      	b.n	8006cc8 <USB_EPStartXfer+0xe84>
 8006c84:	463b      	mov	r3, r7
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d11c      	bne.n	8006cc8 <USB_EPStartXfer+0xe84>
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	011a      	lsls	r2, r3, #4
 8006cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006cba:	463b      	mov	r3, r7
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006cc6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cc8:	463b      	mov	r3, r7
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 81a4 	beq.w	800701c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cd4:	1d3b      	adds	r3, r7, #4
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ce8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <USB_EPStartXfer+0xebc>
 8006cf4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d00:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f040 8187 	bne.w	800701c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f040 8180 	bne.w	800701c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d1c:	1d3b      	adds	r3, r7, #4
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	463b      	mov	r3, r7
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4413      	add	r3, r2
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006d3a:	1d3b      	adds	r3, r7, #4
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	463b      	mov	r3, r7
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
 8006d60:	e15c      	b.n	800701c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	78db      	ldrb	r3, [r3, #3]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	f040 8155 	bne.w	8007018 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	699a      	ldr	r2, [r3, #24]
 8006d74:	463b      	mov	r3, r7
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d90e      	bls.n	8006d9c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006d7e:	463b      	mov	r3, r7
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006d88:	463b      	mov	r3, r7
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	699a      	ldr	r2, [r3, #24]
 8006d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	463b      	mov	r3, r7
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	619a      	str	r2, [r3, #24]
 8006d9a:	e008      	b.n	8006dae <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006d9c:	463b      	mov	r3, r7
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006da6:	463b      	mov	r3, r7
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d16f      	bne.n	8006e98 <USB_EPStartXfer+0x1054>
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc0:	1d3b      	adds	r3, r7, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006de2:	4413      	add	r3, r2
 8006de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d116      	bne.n	8006e22 <USB_EPStartXfer+0xfde>
 8006df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e18:	b29a      	uxth	r2, r3
 8006e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e05f      	b.n	8006ee2 <USB_EPStartXfer+0x109e>
 8006e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e26:	2b3e      	cmp	r3, #62	; 0x3e
 8006e28:	d818      	bhi.n	8006e5c <USB_EPStartXfer+0x1018>
 8006e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <USB_EPStartXfer+0x1006>
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e44:	3301      	adds	r3, #1
 8006e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e042      	b.n	8006ee2 <USB_EPStartXfer+0x109e>
 8006e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e60:	095b      	lsrs	r3, r3, #5
 8006e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <USB_EPStartXfer+0x1038>
 8006e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e76:	3b01      	subs	r3, #1
 8006e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	029b      	lsls	r3, r3, #10
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	e024      	b.n	8006ee2 <USB_EPStartXfer+0x109e>
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d11f      	bne.n	8006ee2 <USB_EPStartXfer+0x109e>
 8006ea2:	1d3b      	adds	r3, r7, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eba:	4413      	add	r3, r2
 8006ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	011a      	lsls	r2, r3, #4
 8006ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ee0:	801a      	strh	r2, [r3, #0]
 8006ee2:	1d3b      	adds	r3, r7, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eea:	463b      	mov	r3, r7
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	785b      	ldrb	r3, [r3, #1]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d16f      	bne.n	8006fd4 <USB_EPStartXfer+0x1190>
 8006ef4:	1d3b      	adds	r3, r7, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006efc:	1d3b      	adds	r3, r7, #4
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f1e:	4413      	add	r3, r2
 8006f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d116      	bne.n	8006f5e <USB_EPStartXfer+0x111a>
 8006f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f34:	881b      	ldrh	r3, [r3, #0]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e05e      	b.n	800701c <USB_EPStartXfer+0x11d8>
 8006f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f62:	2b3e      	cmp	r3, #62	; 0x3e
 8006f64:	d818      	bhi.n	8006f98 <USB_EPStartXfer+0x1154>
 8006f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <USB_EPStartXfer+0x1142>
 8006f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f80:	3301      	adds	r3, #1
 8006f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	029b      	lsls	r3, r3, #10
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	e041      	b.n	800701c <USB_EPStartXfer+0x11d8>
 8006f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <USB_EPStartXfer+0x1174>
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	029b      	lsls	r3, r3, #10
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	e023      	b.n	800701c <USB_EPStartXfer+0x11d8>
 8006fd4:	463b      	mov	r3, r7
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d11e      	bne.n	800701c <USB_EPStartXfer+0x11d8>
 8006fde:	1d3b      	adds	r3, r7, #4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fee:	4413      	add	r3, r2
 8006ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	011a      	lsls	r2, r3, #4
 8006ffc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007000:	4413      	add	r3, r2
 8007002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800700a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800700e:	b29a      	uxth	r2, r3
 8007010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	e001      	b.n	800701c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e02e      	b.n	800707a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800701c:	1d3b      	adds	r3, r7, #4
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	463b      	mov	r3, r7
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800703a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800703e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007042:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007046:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800704a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800704e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	441a      	add	r2, r3
 8007060:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007074:	b29b      	uxth	r3, r3
 8007076:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d020      	beq.n	80070d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ac:	81bb      	strh	r3, [r7, #12]
 80070ae:	89bb      	ldrh	r3, [r7, #12]
 80070b0:	f083 0310 	eor.w	r3, r3, #16
 80070b4:	81bb      	strh	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	441a      	add	r2, r3
 80070c0:	89bb      	ldrh	r3, [r7, #12]
 80070c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]
 80070d6:	e01f      	b.n	8007118 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ee:	81fb      	strh	r3, [r7, #14]
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070f6:	81fb      	strh	r3, [r7, #14]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	441a      	add	r2, r3
 8007102:	89fb      	ldrh	r3, [r7, #14]
 8007104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800710c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007114:	b29b      	uxth	r3, r3
 8007116:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007124:	b480      	push	{r7}
 8007126:	b087      	sub	sp, #28
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	7b1b      	ldrb	r3, [r3, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 809d 	bne.w	8007272 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d04c      	beq.n	80071da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	823b      	strh	r3, [r7, #16]
 800714e:	8a3b      	ldrh	r3, [r7, #16]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01b      	beq.n	8007190 <USB_EPClearStall+0x6c>
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	b29b      	uxth	r3, r3
 8007166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	81fb      	strh	r3, [r7, #14]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	441a      	add	r2, r3
 800717a:	89fb      	ldrh	r3, [r7, #14]
 800717c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007188:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800718c:	b29b      	uxth	r3, r3
 800718e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	78db      	ldrb	r3, [r3, #3]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d06c      	beq.n	8007272 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071ae:	81bb      	strh	r3, [r7, #12]
 80071b0:	89bb      	ldrh	r3, [r7, #12]
 80071b2:	f083 0320 	eor.w	r3, r3, #32
 80071b6:	81bb      	strh	r3, [r7, #12]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	89bb      	ldrh	r3, [r7, #12]
 80071c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	8013      	strh	r3, [r2, #0]
 80071d8:	e04b      	b.n	8007272 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	82fb      	strh	r3, [r7, #22]
 80071e8:	8afb      	ldrh	r3, [r7, #22]
 80071ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d01b      	beq.n	800722a <USB_EPClearStall+0x106>
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4413      	add	r3, r2
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007208:	82bb      	strh	r3, [r7, #20]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	441a      	add	r2, r3
 8007214:	8abb      	ldrh	r3, [r7, #20]
 8007216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800721a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007226:	b29b      	uxth	r3, r3
 8007228:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800723c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007240:	827b      	strh	r3, [r7, #18]
 8007242:	8a7b      	ldrh	r3, [r7, #18]
 8007244:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007248:	827b      	strh	r3, [r7, #18]
 800724a:	8a7b      	ldrh	r3, [r7, #18]
 800724c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007250:	827b      	strh	r3, [r7, #18]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	441a      	add	r2, r3
 800725c:	8a7b      	ldrh	r3, [r7, #18]
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2280      	movs	r2, #128	; 0x80
 8007294:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr

080072cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072da:	b29b      	uxth	r3, r3
 80072dc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80072de:	68fb      	ldr	r3, [r7, #12]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007300:	b480      	push	{r7}
 8007302:	b08d      	sub	sp, #52	; 0x34
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4611      	mov	r1, r2
 800730c:	461a      	mov	r2, r3
 800730e:	460b      	mov	r3, r1
 8007310:	80fb      	strh	r3, [r7, #6]
 8007312:	4613      	mov	r3, r2
 8007314:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007316:	88bb      	ldrh	r3, [r7, #4]
 8007318:	3301      	adds	r3, #1
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007326:	88fb      	ldrh	r3, [r7, #6]
 8007328:	005a      	lsls	r2, r3, #1
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007338:	e01e      	b.n	8007378 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	3301      	adds	r3, #1
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	b29b      	uxth	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	b29a      	uxth	r2, r3
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	3302      	adds	r3, #2
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	3302      	adds	r3, #2
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	3301      	adds	r3, #1
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	3b01      	subs	r3, #1
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1dd      	bne.n	800733a <USB_WritePMA+0x3a>
  }
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	3734      	adds	r7, #52	; 0x34
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr

0800738a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800738a:	b480      	push	{r7}
 800738c:	b08b      	sub	sp, #44	; 0x2c
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	4611      	mov	r1, r2
 8007396:	461a      	mov	r2, r3
 8007398:	460b      	mov	r3, r1
 800739a:	80fb      	strh	r3, [r7, #6]
 800739c:	4613      	mov	r3, r2
 800739e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80073a0:	88bb      	ldrh	r3, [r7, #4]
 80073a2:	085b      	lsrs	r3, r3, #1
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	005a      	lsls	r2, r3, #1
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073bc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
 80073c2:	e01b      	b.n	80073fc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	3302      	adds	r3, #2
 80073d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3301      	adds	r3, #1
 80073de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	0a1b      	lsrs	r3, r3, #8
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3301      	adds	r3, #1
 80073ee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	3302      	adds	r3, #2
 80073f4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	3b01      	subs	r3, #1
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1e0      	bne.n	80073c4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007402:	88bb      	ldrh	r3, [r7, #4]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d007      	beq.n	800741e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	b2da      	uxtb	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	701a      	strb	r2, [r3, #0]
  }
}
 800741e:	bf00      	nop
 8007420:	372c      	adds	r7, #44	; 0x2c
 8007422:	46bd      	mov	sp, r7
 8007424:	bc80      	pop	{r7}
 8007426:	4770      	bx	lr

08007428 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7c1b      	ldrb	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d115      	bne.n	800746c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007444:	2202      	movs	r2, #2
 8007446:	2181      	movs	r1, #129	; 0x81
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 fe4c 	bl	80090e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007458:	2202      	movs	r2, #2
 800745a:	2101      	movs	r1, #1
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe42 	bl	80090e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800746a:	e012      	b.n	8007492 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	2202      	movs	r2, #2
 8007470:	2181      	movs	r1, #129	; 0x81
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fe37 	bl	80090e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800747e:	2340      	movs	r3, #64	; 0x40
 8007480:	2202      	movs	r2, #2
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 fe2e 	bl	80090e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007492:	2308      	movs	r3, #8
 8007494:	2203      	movs	r2, #3
 8007496:	2182      	movs	r1, #130	; 0x82
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fe24 	bl	80090e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80074a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80074a8:	f001 ff44 	bl	8009334 <USBD_static_malloc>
 80074ac:	4602      	mov	r2, r0
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80074be:	2301      	movs	r3, #1
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	e026      	b.n	8007512 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7c1b      	ldrb	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d109      	bne.n	8007502 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80074f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f8:	2101      	movs	r1, #1
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 fee4 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007500:	e007      	b.n	8007512 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	2101      	movs	r1, #1
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f001 fedb 	bl	80092c8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800752c:	2181      	movs	r1, #129	; 0x81
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 fdff 	bl	8009132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800753a:	2101      	movs	r1, #1
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fdf8 	bl	8009132 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800754a:	2182      	movs	r1, #130	; 0x82
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fdf0 	bl	8009132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00e      	beq.n	8007580 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	4618      	mov	r0, r3
 8007574:	f001 feea 	bl	800934c <USBD_static_free>
    pdev->pClassData = NULL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b086      	sub	sp, #24
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d039      	beq.n	8007628 <USBD_CDC_Setup+0x9e>
 80075b4:	2b20      	cmp	r3, #32
 80075b6:	d17f      	bne.n	80076b8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	88db      	ldrh	r3, [r3, #6]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d029      	beq.n	8007614 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b25b      	sxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da11      	bge.n	80075ee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80075d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	88d2      	ldrh	r2, [r2, #6]
 80075dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80075de:	6939      	ldr	r1, [r7, #16]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	88db      	ldrh	r3, [r3, #6]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f9d9 	bl	800899e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80075ec:	e06b      	b.n	80076c6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785a      	ldrb	r2, [r3, #1]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007604:	6939      	ldr	r1, [r7, #16]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	88db      	ldrh	r3, [r3, #6]
 800760a:	461a      	mov	r2, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f9f4 	bl	80089fa <USBD_CtlPrepareRx>
      break;
 8007612:	e058      	b.n	80076c6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	7850      	ldrb	r0, [r2, #1]
 8007620:	2200      	movs	r2, #0
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	4798      	blx	r3
      break;
 8007626:	e04e      	b.n	80076c6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b0b      	cmp	r3, #11
 800762e:	d02e      	beq.n	800768e <USBD_CDC_Setup+0x104>
 8007630:	2b0b      	cmp	r3, #11
 8007632:	dc38      	bgt.n	80076a6 <USBD_CDC_Setup+0x11c>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <USBD_CDC_Setup+0xb4>
 8007638:	2b0a      	cmp	r3, #10
 800763a:	d014      	beq.n	8007666 <USBD_CDC_Setup+0xdc>
 800763c:	e033      	b.n	80076a6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007644:	2b03      	cmp	r3, #3
 8007646:	d107      	bne.n	8007658 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	2202      	movs	r2, #2
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f9a4 	bl	800899e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007656:	e02e      	b.n	80076b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f001 f935 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 8007660:	2302      	movs	r3, #2
 8007662:	75fb      	strb	r3, [r7, #23]
          break;
 8007664:	e027      	b.n	80076b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800766c:	2b03      	cmp	r3, #3
 800766e:	d107      	bne.n	8007680 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007670:	f107 030f 	add.w	r3, r7, #15
 8007674:	2201      	movs	r2, #1
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f990 	bl	800899e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800767e:	e01a      	b.n	80076b6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 f921 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 8007688:	2302      	movs	r3, #2
 800768a:	75fb      	strb	r3, [r7, #23]
          break;
 800768c:	e013      	b.n	80076b6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	2b03      	cmp	r3, #3
 8007696:	d00d      	beq.n	80076b4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f001 f915 	bl	80088ca <USBD_CtlError>
            ret = USBD_FAIL;
 80076a0:	2302      	movs	r3, #2
 80076a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80076a4:	e006      	b.n	80076b4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 f90e 	bl	80088ca <USBD_CtlError>
          ret = USBD_FAIL;
 80076ae:	2302      	movs	r3, #2
 80076b0:	75fb      	strb	r3, [r7, #23]
          break;
 80076b2:	e000      	b.n	80076b6 <USBD_CDC_Setup+0x12c>
          break;
 80076b4:	bf00      	nop
      }
      break;
 80076b6:	e006      	b.n	80076c6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f001 f905 	bl	80088ca <USBD_CtlError>
      ret = USBD_FAIL;
 80076c0:	2302      	movs	r3, #2
 80076c2:	75fb      	strb	r3, [r7, #23]
      break;
 80076c4:	bf00      	nop
  }

  return ret;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80076ea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d03a      	beq.n	800776c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	331c      	adds	r3, #28
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d029      	beq.n	8007760 <USBD_CDC_DataIn+0x90>
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4613      	mov	r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	440b      	add	r3, r1
 800771a:	331c      	adds	r3, #28
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	78f9      	ldrb	r1, [r7, #3]
 8007720:	68b8      	ldr	r0, [r7, #8]
 8007722:	460b      	mov	r3, r1
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	440b      	add	r3, r1
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4403      	add	r3, r0
 800772c:	3338      	adds	r3, #56	; 0x38
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	fbb2 f1f3 	udiv	r1, r2, r3
 8007734:	fb03 f301 	mul.w	r3, r3, r1
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d110      	bne.n	8007760 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	331c      	adds	r3, #28
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007752:	78f9      	ldrb	r1, [r7, #3]
 8007754:	2300      	movs	r3, #0
 8007756:	2200      	movs	r2, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fd92 	bl	8009282 <USBD_LL_Transmit>
 800775e:	e003      	b.n	8007768 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	e000      	b.n	800776e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800776c:	2302      	movs	r3, #2
  }
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fdbd 	bl	800930e <USBD_LL_GetRxDataSize>
 8007794:	4602      	mov	r2, r0
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077ba:	4611      	mov	r1, r2
 80077bc:	4798      	blx	r3

    return USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e000      	b.n	80077c4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80077c2:	2302      	movs	r3, #2
  }
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077da:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d015      	beq.n	8007812 <USBD_CDC_EP0_RxReady+0x46>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077ec:	2bff      	cmp	r3, #255	; 0xff
 80077ee:	d010      	beq.n	8007812 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80077fe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007806:	b292      	uxth	r2, r2
 8007808:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2243      	movs	r2, #67	; 0x43
 8007828:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	200000e8 	.word	0x200000e8

0800783c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2243      	movs	r2, #67	; 0x43
 8007848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800784a:	4b03      	ldr	r3, [pc, #12]	; (8007858 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800784c:	4618      	mov	r0, r3
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	bc80      	pop	{r7}
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	200000a4 	.word	0x200000a4

0800785c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2243      	movs	r2, #67	; 0x43
 8007868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	2000012c 	.word	0x2000012c

0800787c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220a      	movs	r2, #10
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800788a:	4b03      	ldr	r3, [pc, #12]	; (8007898 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	20000060 	.word	0x20000060

0800789c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80078a6:	2302      	movs	r3, #2
 80078a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bc80      	pop	{r7}
 80078c6:	4770      	bx	lr

080078c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d017      	beq.n	800796a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7c1b      	ldrb	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d109      	bne.n	8007956 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794c:	2101      	movs	r1, #1
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 fcba 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007954:	e007      	b.n	8007966 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800795c:	2340      	movs	r3, #64	; 0x40
 800795e:	2101      	movs	r1, #1
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fcb1 	bl	80092c8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e000      	b.n	800796c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	4613      	mov	r3, r2
 8007980:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d101      	bne.n	800798c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	e01a      	b.n	80079c2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	79fa      	ldrb	r2, [r7, #7]
 80079b8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f001 fb1e 	bl	8008ffc <USBD_LL_Init>

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d006      	beq.n	80079ec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
 80079ea:	e001      	b.n	80079f0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80079ec:	2302      	movs	r3, #2
 80079ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fb53 	bl	80090b0 <USBD_LL_Start>

  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bc80      	pop	{r7}
 8007a26:	4770      	bx	lr

08007a28 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	460b      	mov	r3, r1
 8007a32:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a34:	2302      	movs	r3, #2
 8007a36:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	78fa      	ldrb	r2, [r7, #3]
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	78fa      	ldrb	r2, [r7, #3]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fed7 	bl	8008852 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d016      	beq.n	8007af6 <USBD_LL_SetupStage+0x6a>
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d81c      	bhi.n	8007b06 <USBD_LL_SetupStage+0x7a>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <USBD_LL_SetupStage+0x4a>
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d008      	beq.n	8007ae6 <USBD_LL_SetupStage+0x5a>
 8007ad4:	e017      	b.n	8007b06 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9ca 	bl	8007e78 <USBD_StdDevReq>
      break;
 8007ae4:	e01a      	b.n	8007b1c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa2c 	bl	8007f4c <USBD_StdItfReq>
      break;
 8007af4:	e012      	b.n	8007b1c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fa6c 	bl	8007fdc <USBD_StdEPReq>
      break;
 8007b04:	e00a      	b.n	8007b1c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fb2b 	bl	8009170 <USBD_LL_StallEP>
      break;
 8007b1a:	bf00      	nop
  }

  return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b34:	7afb      	ldrb	r3, [r7, #11]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d14b      	bne.n	8007bd2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b40:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d134      	bne.n	8007bb6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d919      	bls.n	8007b8c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d203      	bcs.n	8007b7a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	e002      	b.n	8007b80 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 ff56 	bl	8008a36 <USBD_CtlContinueRx>
 8007b8a:	e038      	b.n	8007bfe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d105      	bne.n	8007bae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 ff53 	bl	8008a5a <USBD_CtlSendStatus>
 8007bb4:	e023      	b.n	8007bfe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007bbc:	2b05      	cmp	r3, #5
 8007bbe:	d11e      	bne.n	8007bfe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007bc8:	2100      	movs	r1, #0
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f001 fad0 	bl	8009170 <USBD_LL_StallEP>
 8007bd0:	e015      	b.n	8007bfe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d108      	bne.n	8007bfa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	7afa      	ldrb	r2, [r7, #11]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	4798      	blx	r3
 8007bf8:	e001      	b.n	8007bfe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e000      	b.n	8007c00 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	460b      	mov	r3, r1
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c16:	7afb      	ldrb	r3, [r7, #11]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d17f      	bne.n	8007d1c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3314      	adds	r3, #20
 8007c20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d15c      	bne.n	8007ce6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d915      	bls.n	8007c64 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	1ad2      	subs	r2, r2, r3
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fec0 	bl	80089d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c56:	2300      	movs	r3, #0
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f001 fb33 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007c62:	e04e      	b.n	8007d02 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	6912      	ldr	r2, [r2, #16]
 8007c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c70:	fb02 f201 	mul.w	r2, r2, r1
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d11c      	bne.n	8007cb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d316      	bcc.n	8007cb4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d20f      	bcs.n	8007cb4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c94:	2200      	movs	r2, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 fe9c 	bl	80089d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2100      	movs	r1, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f001 fb0b 	bl	80092c8 <USBD_LL_PrepareReceive>
 8007cb2:	e026      	b.n	8007d02 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d105      	bne.n	8007cd6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007cd6:	2180      	movs	r1, #128	; 0x80
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f001 fa49 	bl	8009170 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fece 	bl	8008a80 <USBD_CtlReceiveStatus>
 8007ce4:	e00d      	b.n	8007d02 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d004      	beq.n	8007cfa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d103      	bne.n	8007d02 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007cfa:	2180      	movs	r1, #128	; 0x80
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f001 fa37 	bl	8009170 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d11d      	bne.n	8007d48 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff fe81 	bl	8007a14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d1a:	e015      	b.n	8007d48 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d108      	bne.n	8007d44 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	7afa      	ldrb	r2, [r7, #11]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	4798      	blx	r3
 8007d42:	e001      	b.n	8007d48 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d44:	2302      	movs	r3, #2
 8007d46:	e000      	b.n	8007d4a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d5a:	2340      	movs	r3, #64	; 0x40
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2100      	movs	r1, #0
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f9c0 	bl	80090e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2240      	movs	r2, #64	; 0x40
 8007d72:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2180      	movs	r1, #128	; 0x80
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f9b2 	bl	80090e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2240      	movs	r2, #64	; 0x40
 8007d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6852      	ldr	r2, [r2, #4]
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
  }

  return USBD_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d105      	bne.n	8007e38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bc80      	pop	{r7}
 8007e42:	4770      	bx	lr

08007e44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e52:	2b03      	cmp	r3, #3
 8007e54:	d10b      	bne.n	8007e6e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d005      	beq.n	8007e6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e8e:	2b40      	cmp	r3, #64	; 0x40
 8007e90:	d005      	beq.n	8007e9e <USBD_StdDevReq+0x26>
 8007e92:	2b40      	cmp	r3, #64	; 0x40
 8007e94:	d84f      	bhi.n	8007f36 <USBD_StdDevReq+0xbe>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <USBD_StdDevReq+0x36>
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d14b      	bne.n	8007f36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
      break;
 8007eac:	e048      	b.n	8007f40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	785b      	ldrb	r3, [r3, #1]
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d839      	bhi.n	8007f2a <USBD_StdDevReq+0xb2>
 8007eb6:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_StdDevReq+0x44>)
 8007eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebc:	08007f0d 	.word	0x08007f0d
 8007ec0:	08007f21 	.word	0x08007f21
 8007ec4:	08007f2b 	.word	0x08007f2b
 8007ec8:	08007f17 	.word	0x08007f17
 8007ecc:	08007f2b 	.word	0x08007f2b
 8007ed0:	08007eef 	.word	0x08007eef
 8007ed4:	08007ee5 	.word	0x08007ee5
 8007ed8:	08007f2b 	.word	0x08007f2b
 8007edc:	08007f03 	.word	0x08007f03
 8007ee0:	08007ef9 	.word	0x08007ef9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f9dc 	bl	80082a4 <USBD_GetDescriptor>
          break;
 8007eec:	e022      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007eee:	6839      	ldr	r1, [r7, #0]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 fb3f 	bl	8008574 <USBD_SetAddress>
          break;
 8007ef6:	e01d      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fb7e 	bl	80085fc <USBD_SetConfig>
          break;
 8007f00:	e018      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc07 	bl	8008718 <USBD_GetConfig>
          break;
 8007f0a:	e013      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fc37 	bl	8008782 <USBD_GetStatus>
          break;
 8007f14:	e00e      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 fc65 	bl	80087e8 <USBD_SetFeature>
          break;
 8007f1e:	e009      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fc74 	bl	8008810 <USBD_ClrFeature>
          break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fccc 	bl	80088ca <USBD_CtlError>
          break;
 8007f32:	bf00      	nop
      }
      break;
 8007f34:	e004      	b.n	8007f40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fcc6 	bl	80088ca <USBD_CtlError>
      break;
 8007f3e:	bf00      	nop
  }

  return ret;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop

08007f4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f62:	2b40      	cmp	r3, #64	; 0x40
 8007f64:	d005      	beq.n	8007f72 <USBD_StdItfReq+0x26>
 8007f66:	2b40      	cmp	r3, #64	; 0x40
 8007f68:	d82e      	bhi.n	8007fc8 <USBD_StdItfReq+0x7c>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <USBD_StdItfReq+0x26>
 8007f6e:	2b20      	cmp	r3, #32
 8007f70:	d12a      	bne.n	8007fc8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d81d      	bhi.n	8007fba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	889b      	ldrh	r3, [r3, #4]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d813      	bhi.n	8007fb0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	88db      	ldrh	r3, [r3, #6]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d110      	bne.n	8007fc4 <USBD_StdItfReq+0x78>
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10d      	bne.n	8007fc4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fd56 	bl	8008a5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007fae:	e009      	b.n	8007fc4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fc89 	bl	80088ca <USBD_CtlError>
          break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fc84 	bl	80088ca <USBD_CtlError>
          break;
 8007fc2:	e000      	b.n	8007fc6 <USBD_StdItfReq+0x7a>
          break;
 8007fc4:	bf00      	nop
      }
      break;
 8007fc6:	e004      	b.n	8007fd2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fc7d 	bl	80088ca <USBD_CtlError>
      break;
 8007fd0:	bf00      	nop
  }

  return USBD_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	889b      	ldrh	r3, [r3, #4]
 8007fee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ff8:	2b40      	cmp	r3, #64	; 0x40
 8007ffa:	d007      	beq.n	800800c <USBD_StdEPReq+0x30>
 8007ffc:	2b40      	cmp	r3, #64	; 0x40
 8007ffe:	f200 8146 	bhi.w	800828e <USBD_StdEPReq+0x2b2>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <USBD_StdEPReq+0x40>
 8008006:	2b20      	cmp	r3, #32
 8008008:	f040 8141 	bne.w	800828e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	4798      	blx	r3
      break;
 800801a:	e13d      	b.n	8008298 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008024:	2b20      	cmp	r3, #32
 8008026:	d10a      	bne.n	800803e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]

        return ret;
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	e12d      	b.n	800829a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d007      	beq.n	8008056 <USBD_StdEPReq+0x7a>
 8008046:	2b03      	cmp	r3, #3
 8008048:	f300 811b 	bgt.w	8008282 <USBD_StdEPReq+0x2a6>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d072      	beq.n	8008136 <USBD_StdEPReq+0x15a>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d03a      	beq.n	80080ca <USBD_StdEPReq+0xee>
 8008054:	e115      	b.n	8008282 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800805c:	2b02      	cmp	r3, #2
 800805e:	d002      	beq.n	8008066 <USBD_StdEPReq+0x8a>
 8008060:	2b03      	cmp	r3, #3
 8008062:	d015      	beq.n	8008090 <USBD_StdEPReq+0xb4>
 8008064:	e02b      	b.n	80080be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <USBD_StdEPReq+0xaa>
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b80      	cmp	r3, #128	; 0x80
 8008070:	d009      	beq.n	8008086 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 f87a 	bl	8009170 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800807c:	2180      	movs	r1, #128	; 0x80
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f876 	bl	8009170 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008084:	e020      	b.n	80080c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc1e 	bl	80088ca <USBD_CtlError>
              break;
 800808e:	e01b      	b.n	80080c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10e      	bne.n	80080b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <USBD_StdEPReq+0xda>
 800809e:	7bbb      	ldrb	r3, [r7, #14]
 80080a0:	2b80      	cmp	r3, #128	; 0x80
 80080a2:	d008      	beq.n	80080b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	88db      	ldrh	r3, [r3, #6]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
 80080ae:	4619      	mov	r1, r3
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f85d 	bl	8009170 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fccf 	bl	8008a5a <USBD_CtlSendStatus>

              break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fc02 	bl	80088ca <USBD_CtlError>
              break;
 80080c6:	bf00      	nop
          }
          break;
 80080c8:	e0e0      	b.n	800828c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d002      	beq.n	80080da <USBD_StdEPReq+0xfe>
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d015      	beq.n	8008104 <USBD_StdEPReq+0x128>
 80080d8:	e026      	b.n	8008128 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <USBD_StdEPReq+0x11e>
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d009      	beq.n	80080fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 f840 	bl	8009170 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 f83c 	bl	8009170 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080f8:	e01c      	b.n	8008134 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fbe4 	bl	80088ca <USBD_CtlError>
              break;
 8008102:	e017      	b.n	8008134 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	885b      	ldrh	r3, [r3, #2]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d112      	bne.n	8008132 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f847 	bl	80091ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fc9a 	bl	8008a5a <USBD_CtlSendStatus>
              }
              break;
 8008126:	e004      	b.n	8008132 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fbcd 	bl	80088ca <USBD_CtlError>
              break;
 8008130:	e000      	b.n	8008134 <USBD_StdEPReq+0x158>
              break;
 8008132:	bf00      	nop
          }
          break;
 8008134:	e0aa      	b.n	800828c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813c:	2b02      	cmp	r3, #2
 800813e:	d002      	beq.n	8008146 <USBD_StdEPReq+0x16a>
 8008140:	2b03      	cmp	r3, #3
 8008142:	d032      	beq.n	80081aa <USBD_StdEPReq+0x1ce>
 8008144:	e097      	b.n	8008276 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <USBD_StdEPReq+0x180>
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d004      	beq.n	800815c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fbb8 	bl	80088ca <USBD_CtlError>
                break;
 800815a:	e091      	b.n	8008280 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800815c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008160:	2b00      	cmp	r3, #0
 8008162:	da0b      	bge.n	800817c <USBD_StdEPReq+0x1a0>
 8008164:	7bbb      	ldrb	r3, [r7, #14]
 8008166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	3310      	adds	r3, #16
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	3304      	adds	r3, #4
 800817a:	e00b      	b.n	8008194 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008182:	4613      	mov	r3, r2
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	4413      	add	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	3304      	adds	r3, #4
 8008194:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2202      	movs	r2, #2
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fbfb 	bl	800899e <USBD_CtlSendData>
              break;
 80081a8:	e06a      	b.n	8008280 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80081aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da11      	bge.n	80081d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80081b2:	7bbb      	ldrb	r3, [r7, #14]
 80081b4:	f003 020f 	and.w	r2, r3, #15
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	3318      	adds	r3, #24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d117      	bne.n	80081fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fb7b 	bl	80088ca <USBD_CtlError>
                  break;
 80081d4:	e054      	b.n	8008280 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	f003 020f 	and.w	r2, r3, #15
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d104      	bne.n	80081fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb68 	bl	80088ca <USBD_CtlError>
                  break;
 80081fa:	e041      	b.n	8008280 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	da0b      	bge.n	800821c <USBD_StdEPReq+0x240>
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	3310      	adds	r3, #16
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	3304      	adds	r3, #4
 800821a:	e00b      	b.n	8008234 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008222:	4613      	mov	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	4413      	add	r3, r2
 8008232:	3304      	adds	r3, #4
 8008234:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008236:	7bbb      	ldrb	r3, [r7, #14]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <USBD_StdEPReq+0x266>
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	2b80      	cmp	r3, #128	; 0x80
 8008240:	d103      	bne.n	800824a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	e00e      	b.n	8008268 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 ffcc 	bl	80091ec <USBD_LL_IsStallEP>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e002      	b.n	8008268 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2202      	movs	r2, #2
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fb95 	bl	800899e <USBD_CtlSendData>
              break;
 8008274:	e004      	b.n	8008280 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fb26 	bl	80088ca <USBD_CtlError>
              break;
 800827e:	bf00      	nop
          }
          break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fb20 	bl	80088ca <USBD_CtlError>
          break;
 800828a:	bf00      	nop
      }
      break;
 800828c:	e004      	b.n	8008298 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb1a 	bl	80088ca <USBD_CtlError>
      break;
 8008296:	bf00      	nop
  }

  return ret;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	f200 8128 	bhi.w	800851a <USBD_GetDescriptor+0x276>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_GetDescriptor+0x2c>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	08008305 	.word	0x08008305
 80082d8:	08008345 	.word	0x08008345
 80082dc:	0800851b 	.word	0x0800851b
 80082e0:	0800851b 	.word	0x0800851b
 80082e4:	080084bb 	.word	0x080084bb
 80082e8:	080084e7 	.word	0x080084e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
      break;
 8008302:	e112      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7c1b      	ldrb	r3, [r3, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10d      	bne.n	8008328 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f107 0208 	add.w	r2, r7, #8
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3301      	adds	r3, #1
 8008322:	2202      	movs	r2, #2
 8008324:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008326:	e100      	b.n	800852a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008330:	f107 0208 	add.w	r2, r7, #8
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	2202      	movs	r2, #2
 8008340:	701a      	strb	r2, [r3, #0]
      break;
 8008342:	e0f2      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b05      	cmp	r3, #5
 800834c:	f200 80ac 	bhi.w	80084a8 <USBD_GetDescriptor+0x204>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <USBD_GetDescriptor+0xb4>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008371 	.word	0x08008371
 800835c:	080083a5 	.word	0x080083a5
 8008360:	080083d9 	.word	0x080083d9
 8008364:	0800840d 	.word	0x0800840d
 8008368:	08008441 	.word	0x08008441
 800836c:	08008475 	.word	0x08008475
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00b      	beq.n	8008394 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	7c12      	ldrb	r2, [r2, #16]
 8008388:	f107 0108 	add.w	r1, r7, #8
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008392:	e091      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa97 	bl	80088ca <USBD_CtlError>
            err++;
 800839c:	7afb      	ldrb	r3, [r7, #11]
 800839e:	3301      	adds	r3, #1
 80083a0:	72fb      	strb	r3, [r7, #11]
          break;
 80083a2:	e089      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	7c12      	ldrb	r2, [r2, #16]
 80083bc:	f107 0108 	add.w	r1, r7, #8
 80083c0:	4610      	mov	r0, r2
 80083c2:	4798      	blx	r3
 80083c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c6:	e077      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fa7d 	bl	80088ca <USBD_CtlError>
            err++;
 80083d0:	7afb      	ldrb	r3, [r7, #11]
 80083d2:	3301      	adds	r3, #1
 80083d4:	72fb      	strb	r3, [r7, #11]
          break;
 80083d6:	e06f      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	7c12      	ldrb	r2, [r2, #16]
 80083f0:	f107 0108 	add.w	r1, r7, #8
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
 80083f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083fa:	e05d      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa63 	bl	80088ca <USBD_CtlError>
            err++;
 8008404:	7afb      	ldrb	r3, [r7, #11]
 8008406:	3301      	adds	r3, #1
 8008408:	72fb      	strb	r3, [r7, #11]
          break;
 800840a:	e055      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00b      	beq.n	8008430 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7c12      	ldrb	r2, [r2, #16]
 8008424:	f107 0108 	add.w	r1, r7, #8
 8008428:	4610      	mov	r0, r2
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842e:	e043      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa49 	bl	80088ca <USBD_CtlError>
            err++;
 8008438:	7afb      	ldrb	r3, [r7, #11]
 800843a:	3301      	adds	r3, #1
 800843c:	72fb      	strb	r3, [r7, #11]
          break;
 800843e:	e03b      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	7c12      	ldrb	r2, [r2, #16]
 8008458:	f107 0108 	add.w	r1, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008462:	e029      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa2f 	bl	80088ca <USBD_CtlError>
            err++;
 800846c:	7afb      	ldrb	r3, [r7, #11]
 800846e:	3301      	adds	r3, #1
 8008470:	72fb      	strb	r3, [r7, #11]
          break;
 8008472:	e021      	b.n	80084b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	7c12      	ldrb	r2, [r2, #16]
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
 8008494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008496:	e00f      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa15 	bl	80088ca <USBD_CtlError>
            err++;
 80084a0:	7afb      	ldrb	r3, [r7, #11]
 80084a2:	3301      	adds	r3, #1
 80084a4:	72fb      	strb	r3, [r7, #11]
          break;
 80084a6:	e007      	b.n	80084b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa0d 	bl	80088ca <USBD_CtlError>
          err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084b6:	e038      	b.n	800852a <USBD_GetDescriptor+0x286>
 80084b8:	e037      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7c1b      	ldrb	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d109      	bne.n	80084d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ca:	f107 0208 	add.w	r2, r7, #8
 80084ce:	4610      	mov	r0, r2
 80084d0:	4798      	blx	r3
 80084d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084d4:	e029      	b.n	800852a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f9f6 	bl	80088ca <USBD_CtlError>
        err++;
 80084de:	7afb      	ldrb	r3, [r7, #11]
 80084e0:	3301      	adds	r3, #1
 80084e2:	72fb      	strb	r3, [r7, #11]
      break;
 80084e4:	e021      	b.n	800852a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7c1b      	ldrb	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10d      	bne.n	800850a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f107 0208 	add.w	r2, r7, #8
 80084fa:	4610      	mov	r0, r2
 80084fc:	4798      	blx	r3
 80084fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3301      	adds	r3, #1
 8008504:	2207      	movs	r2, #7
 8008506:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008508:	e00f      	b.n	800852a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f9dc 	bl	80088ca <USBD_CtlError>
        err++;
 8008512:	7afb      	ldrb	r3, [r7, #11]
 8008514:	3301      	adds	r3, #1
 8008516:	72fb      	strb	r3, [r7, #11]
      break;
 8008518:	e007      	b.n	800852a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800851a:	6839      	ldr	r1, [r7, #0]
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f9d4 	bl	80088ca <USBD_CtlError>
      err++;
 8008522:	7afb      	ldrb	r3, [r7, #11]
 8008524:	3301      	adds	r3, #1
 8008526:	72fb      	strb	r3, [r7, #11]
      break;
 8008528:	bf00      	nop
  }

  if (err != 0U)
 800852a:	7afb      	ldrb	r3, [r7, #11]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d11c      	bne.n	800856a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008530:	893b      	ldrh	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d011      	beq.n	800855a <USBD_GetDescriptor+0x2b6>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00d      	beq.n	800855a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	88da      	ldrh	r2, [r3, #6]
 8008542:	893b      	ldrh	r3, [r7, #8]
 8008544:	4293      	cmp	r3, r2
 8008546:	bf28      	it	cs
 8008548:	4613      	movcs	r3, r2
 800854a:	b29b      	uxth	r3, r3
 800854c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800854e:	893b      	ldrh	r3, [r7, #8]
 8008550:	461a      	mov	r2, r3
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa22 	bl	800899e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	88db      	ldrh	r3, [r3, #6]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d104      	bne.n	800856c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa79 	bl	8008a5a <USBD_CtlSendStatus>
 8008568:	e000      	b.n	800856c <USBD_GetDescriptor+0x2c8>
    return;
 800856a:	bf00      	nop
    }
  }
}
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop

08008574 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	889b      	ldrh	r3, [r3, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d130      	bne.n	80085e8 <USBD_SetAddress+0x74>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	88db      	ldrh	r3, [r3, #6]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d12c      	bne.n	80085e8 <USBD_SetAddress+0x74>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	2b7f      	cmp	r3, #127	; 0x7f
 8008594:	d828      	bhi.n	80085e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	885b      	ldrh	r3, [r3, #2]
 800859a:	b2db      	uxtb	r3, r3
 800859c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d104      	bne.n	80085b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f98b 	bl	80088ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b4:	e01d      	b.n	80085f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	7bfa      	ldrb	r2, [r7, #15]
 80085ba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fe3e 	bl	8009244 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa46 	bl	8008a5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085dc:	e009      	b.n	80085f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085e6:	e004      	b.n	80085f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f96d 	bl	80088ca <USBD_CtlError>
  }
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	b2da      	uxtb	r2, r3
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <USBD_SetConfig+0x118>)
 800860e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008610:	4b40      	ldr	r3, [pc, #256]	; (8008714 <USBD_SetConfig+0x118>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d904      	bls.n	8008622 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f955 	bl	80088ca <USBD_CtlError>
 8008620:	e075      	b.n	800870e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	2b02      	cmp	r3, #2
 800862a:	d002      	beq.n	8008632 <USBD_SetConfig+0x36>
 800862c:	2b03      	cmp	r3, #3
 800862e:	d023      	beq.n	8008678 <USBD_SetConfig+0x7c>
 8008630:	e062      	b.n	80086f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008632:	4b38      	ldr	r3, [pc, #224]	; (8008714 <USBD_SetConfig+0x118>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01a      	beq.n	8008670 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800863a:	4b36      	ldr	r3, [pc, #216]	; (8008714 <USBD_SetConfig+0x118>)
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2203      	movs	r2, #3
 8008648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <USBD_SetConfig+0x118>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7ff f9e8 	bl	8007a28 <USBD_SetClassConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	2b02      	cmp	r3, #2
 800865c:	d104      	bne.n	8008668 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f932 	bl	80088ca <USBD_CtlError>
            return;
 8008666:	e052      	b.n	800870e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f9f6 	bl	8008a5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800866e:	e04e      	b.n	800870e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f9f2 	bl	8008a5a <USBD_CtlSendStatus>
        break;
 8008676:	e04a      	b.n	800870e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008678:	4b26      	ldr	r3, [pc, #152]	; (8008714 <USBD_SetConfig+0x118>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d112      	bne.n	80086a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008688:	4b22      	ldr	r3, [pc, #136]	; (8008714 <USBD_SetConfig+0x118>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <USBD_SetConfig+0x118>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff f9e4 	bl	8007a66 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f9db 	bl	8008a5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086a4:	e033      	b.n	800870e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086a6:	4b1b      	ldr	r3, [pc, #108]	; (8008714 <USBD_SetConfig+0x118>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d01d      	beq.n	80086f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff f9d2 	bl	8007a66 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <USBD_SetConfig+0x118>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <USBD_SetConfig+0x118>)
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff f9a8 	bl	8007a28 <USBD_SetClassConfig>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d104      	bne.n	80086e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8f2 	bl	80088ca <USBD_CtlError>
            return;
 80086e6:	e012      	b.n	800870e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f9b6 	bl	8008a5a <USBD_CtlSendStatus>
        break;
 80086ee:	e00e      	b.n	800870e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f9b2 	bl	8008a5a <USBD_CtlSendStatus>
        break;
 80086f6:	e00a      	b.n	800870e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8e5 	bl	80088ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008700:	4b04      	ldr	r3, [pc, #16]	; (8008714 <USBD_SetConfig+0x118>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f7ff f9ad 	bl	8007a66 <USBD_ClrClassConfig>
        break;
 800870c:	bf00      	nop
    }
  }
}
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200002bc 	.word	0x200002bc

08008718 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	88db      	ldrh	r3, [r3, #6]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d004      	beq.n	8008734 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f8cc 	bl	80088ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008732:	e022      	b.n	800877a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873a:	2b02      	cmp	r3, #2
 800873c:	dc02      	bgt.n	8008744 <USBD_GetConfig+0x2c>
 800873e:	2b00      	cmp	r3, #0
 8008740:	dc03      	bgt.n	800874a <USBD_GetConfig+0x32>
 8008742:	e015      	b.n	8008770 <USBD_GetConfig+0x58>
 8008744:	2b03      	cmp	r3, #3
 8008746:	d00b      	beq.n	8008760 <USBD_GetConfig+0x48>
 8008748:	e012      	b.n	8008770 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3308      	adds	r3, #8
 8008754:	2201      	movs	r2, #1
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f920 	bl	800899e <USBD_CtlSendData>
        break;
 800875e:	e00c      	b.n	800877a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	2201      	movs	r2, #1
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f918 	bl	800899e <USBD_CtlSendData>
        break;
 800876e:	e004      	b.n	800877a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f8a9 	bl	80088ca <USBD_CtlError>
        break;
 8008778:	bf00      	nop
}
 800877a:	bf00      	nop
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008792:	3b01      	subs	r3, #1
 8008794:	2b02      	cmp	r3, #2
 8008796:	d81e      	bhi.n	80087d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	88db      	ldrh	r3, [r3, #6]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d004      	beq.n	80087aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f891 	bl	80088ca <USBD_CtlError>
        break;
 80087a8:	e01a      	b.n	80087e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d005      	beq.n	80087c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f043 0202 	orr.w	r2, r3, #2
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	330c      	adds	r3, #12
 80087ca:	2202      	movs	r2, #2
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8e5 	bl	800899e <USBD_CtlSendData>
      break;
 80087d4:	e004      	b.n	80087e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f876 	bl	80088ca <USBD_CtlError>
      break;
 80087de:	bf00      	nop
  }
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	885b      	ldrh	r3, [r3, #2]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d106      	bne.n	8008808 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f929 	bl	8008a5a <USBD_CtlSendStatus>
  }
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008820:	3b01      	subs	r3, #1
 8008822:	2b02      	cmp	r3, #2
 8008824:	d80b      	bhi.n	800883e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	885b      	ldrh	r3, [r3, #2]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d10c      	bne.n	8008848 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f90f 	bl	8008a5a <USBD_CtlSendStatus>
      }
      break;
 800883c:	e004      	b.n	8008848 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f842 	bl	80088ca <USBD_CtlError>
      break;
 8008846:	e000      	b.n	800884a <USBD_ClrFeature+0x3a>
      break;
 8008848:	bf00      	nop
  }
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781a      	ldrb	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785a      	ldrb	r2, [r3, #1]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	3302      	adds	r3, #2
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b29a      	uxth	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	3303      	adds	r3, #3
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b29b      	uxth	r3, r3
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	b29b      	uxth	r3, r3
 8008880:	4413      	add	r3, r2
 8008882:	b29a      	uxth	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	3304      	adds	r3, #4
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	3305      	adds	r3, #5
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	021b      	lsls	r3, r3, #8
 800889a:	b29b      	uxth	r3, r3
 800889c:	4413      	add	r3, r2
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	3306      	adds	r3, #6
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	3307      	adds	r3, #7
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4413      	add	r3, r2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	80da      	strh	r2, [r3, #6]

}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr

080088ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088d4:	2180      	movs	r1, #128	; 0x80
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fc4a 	bl	8009170 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fc46 	bl	8009170 <USBD_LL_StallEP>
}
 80088e4:	bf00      	nop
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088f8:	2300      	movs	r3, #0
 80088fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d032      	beq.n	8008968 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 f834 	bl	8008970 <USBD_GetLen>
 8008908:	4603      	mov	r3, r0
 800890a:	3301      	adds	r3, #1
 800890c:	b29b      	uxth	r3, r3
 800890e:	005b      	lsls	r3, r3, #1
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	75fa      	strb	r2, [r7, #23]
 800891c:	461a      	mov	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	75fa      	strb	r2, [r7, #23]
 800892e:	461a      	mov	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4413      	add	r3, r2
 8008934:	2203      	movs	r2, #3
 8008936:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008938:	e012      	b.n	8008960 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	1c5a      	adds	r2, r3, #1
 800893e:	60fa      	str	r2, [r7, #12]
 8008940:	7dfa      	ldrb	r2, [r7, #23]
 8008942:	1c51      	adds	r1, r2, #1
 8008944:	75f9      	strb	r1, [r7, #23]
 8008946:	4611      	mov	r1, r2
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	440a      	add	r2, r1
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	75fa      	strb	r2, [r7, #23]
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4413      	add	r3, r2
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e8      	bne.n	800893a <USBD_GetString+0x4e>
    }
  }
}
 8008968:	bf00      	nop
 800896a:	3718      	adds	r7, #24
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800897c:	e005      	b.n	800898a <USBD_GetLen+0x1a>
  {
    len++;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	3301      	adds	r3, #1
 8008982:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3301      	adds	r3, #1
 8008988:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f5      	bne.n	800897e <USBD_GetLen+0xe>
  }

  return len;
 8008992:	7bfb      	ldrb	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	bc80      	pop	{r7}
 800899c:	4770      	bx	lr

0800899e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b084      	sub	sp, #16
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	60b9      	str	r1, [r7, #8]
 80089a8:	4613      	mov	r3, r2
 80089aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089b4:	88fa      	ldrh	r2, [r7, #6]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fc5b 	bl	8009282 <USBD_LL_Transmit>

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	2100      	movs	r1, #0
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 fc49 	bl	8009282 <USBD_LL_Transmit>

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	4613      	mov	r3, r2
 8008a06:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2203      	movs	r2, #3
 8008a0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a10:	88fa      	ldrh	r2, [r7, #6]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	2100      	movs	r1, #0
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 fc4e 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	4613      	mov	r3, r2
 8008a42:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fc3c 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fc06 	bl	8009282 <USBD_LL_Transmit>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2205      	movs	r2, #5
 8008a8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a90:	2300      	movs	r3, #0
 8008a92:	2200      	movs	r2, #0
 8008a94:	2100      	movs	r1, #0
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fc16 	bl	80092c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008aac:	2200      	movs	r2, #0
 8008aae:	4912      	ldr	r1, [pc, #72]	; (8008af8 <MX_USB_DEVICE_Init+0x50>)
 8008ab0:	4812      	ldr	r0, [pc, #72]	; (8008afc <MX_USB_DEVICE_Init+0x54>)
 8008ab2:	f7fe ff5f 	bl	8007974 <USBD_Init>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008abc:	f7f8 f8be 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ac0:	490f      	ldr	r1, [pc, #60]	; (8008b00 <MX_USB_DEVICE_Init+0x58>)
 8008ac2:	480e      	ldr	r0, [pc, #56]	; (8008afc <MX_USB_DEVICE_Init+0x54>)
 8008ac4:	f7fe ff81 	bl	80079ca <USBD_RegisterClass>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ace:	f7f8 f8b5 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ad2:	490c      	ldr	r1, [pc, #48]	; (8008b04 <MX_USB_DEVICE_Init+0x5c>)
 8008ad4:	4809      	ldr	r0, [pc, #36]	; (8008afc <MX_USB_DEVICE_Init+0x54>)
 8008ad6:	f7fe fee1 	bl	800789c <USBD_CDC_RegisterInterface>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ae0:	f7f8 f8ac 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ae4:	4805      	ldr	r0, [pc, #20]	; (8008afc <MX_USB_DEVICE_Init+0x54>)
 8008ae6:	f7fe ff89 	bl	80079fc <USBD_Start>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008af0:	f7f8 f8a4 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008af4:	bf00      	nop
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000180 	.word	0x20000180
 8008afc:	20000a0c 	.word	0x20000a0c
 8008b00:	2000006c 	.word	0x2000006c
 8008b04:	20000170 	.word	0x20000170

08008b08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4905      	ldr	r1, [pc, #20]	; (8008b24 <CDC_Init_FS+0x1c>)
 8008b10:	4805      	ldr	r0, [pc, #20]	; (8008b28 <CDC_Init_FS+0x20>)
 8008b12:	f7fe fed9 	bl	80078c8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b16:	4905      	ldr	r1, [pc, #20]	; (8008b2c <CDC_Init_FS+0x24>)
 8008b18:	4803      	ldr	r0, [pc, #12]	; (8008b28 <CDC_Init_FS+0x20>)
 8008b1a:	f7fe feee 	bl	80078fa <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008b1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	20000ed0 	.word	0x20000ed0
 8008b28:	20000a0c 	.word	0x20000a0c
 8008b2c:	20000cd0 	.word	0x20000cd0

08008b30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 8008b34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr
	...

08008b40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	2b23      	cmp	r3, #35	; 0x23
 8008b54:	d84a      	bhi.n	8008bec <CDC_Control_FS+0xac>
 8008b56:	a201      	add	r2, pc, #4	; (adr r2, 8008b5c <CDC_Control_FS+0x1c>)
 8008b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5c:	08008bed 	.word	0x08008bed
 8008b60:	08008bed 	.word	0x08008bed
 8008b64:	08008bed 	.word	0x08008bed
 8008b68:	08008bed 	.word	0x08008bed
 8008b6c:	08008bed 	.word	0x08008bed
 8008b70:	08008bed 	.word	0x08008bed
 8008b74:	08008bed 	.word	0x08008bed
 8008b78:	08008bed 	.word	0x08008bed
 8008b7c:	08008bed 	.word	0x08008bed
 8008b80:	08008bed 	.word	0x08008bed
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	08008bed 	.word	0x08008bed
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008bed 	.word	0x08008bed
 8008b9c:	08008bed 	.word	0x08008bed
 8008ba0:	08008bed 	.word	0x08008bed
 8008ba4:	08008bed 	.word	0x08008bed
 8008ba8:	08008bed 	.word	0x08008bed
 8008bac:	08008bed 	.word	0x08008bed
 8008bb0:	08008bed 	.word	0x08008bed
 8008bb4:	08008bed 	.word	0x08008bed
 8008bb8:	08008bed 	.word	0x08008bed
 8008bbc:	08008bed 	.word	0x08008bed
 8008bc0:	08008bed 	.word	0x08008bed
 8008bc4:	08008bed 	.word	0x08008bed
 8008bc8:	08008bed 	.word	0x08008bed
 8008bcc:	08008bed 	.word	0x08008bed
 8008bd0:	08008bed 	.word	0x08008bed
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bed 	.word	0x08008bed
 8008bdc:	08008bed 	.word	0x08008bed
 8008be0:	08008bed 	.word	0x08008bed
 8008be4:	08008bed 	.word	0x08008bed
 8008be8:	08008bed 	.word	0x08008bed
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008bec:	bf00      	nop
	}

	return (USBD_OK);
 8008bee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bc80      	pop	{r7}
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop

08008bfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	4811      	ldr	r0, [pc, #68]	; (8008c50 <CDC_Receive_FS+0x54>)
 8008c0a:	f7fe fe76 	bl	80078fa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c0e:	4810      	ldr	r0, [pc, #64]	; (8008c50 <CDC_Receive_FS+0x54>)
 8008c10:	f7fe fe86 	bl	8007920 <USBD_CDC_ReceivePacket>

	usb_rx_data.len = 0;
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <CDC_Receive_FS+0x58>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	705a      	strb	r2, [r3, #1]
	/* Запись данных в общую глобальную переменную для
	 * хранения пакета данных - usb_rx_data */
	if ( usb_rx_data.is_read == 0 ) {
 8008c1a:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <CDC_Receive_FS+0x58>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <CDC_Receive_FS+0x2a>
	    return USBD_BUSY;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e00f      	b.n	8008c46 <CDC_Receive_FS+0x4a>
	}
	else {
	    memcpy( usb_rx_data.buff, Buf, *Len );
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	480a      	ldr	r0, [pc, #40]	; (8008c58 <CDC_Receive_FS+0x5c>)
 8008c30:	f000 fbf6 	bl	8009420 <memcpy>
	    usb_rx_data.is_read = 0;
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <CDC_Receive_FS+0x58>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
	    usb_rx_data.len     = *Len;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <CDC_Receive_FS+0x58>)
 8008c42:	705a      	strb	r2, [r3, #1]
	}

	return (USBD_OK);
 8008c44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000a0c 	.word	0x20000a0c
 8008c54:	20000000 	.word	0x20000000
 8008c58:	20000002 	.word	0x20000002

08008c5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	6039      	str	r1, [r7, #0]
 8008c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2212      	movs	r2, #18
 8008c6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c6e:	4b03      	ldr	r3, [pc, #12]	; (8008c7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bc80      	pop	{r7}
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000019c 	.word	0x2000019c

08008c80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	6039      	str	r1, [r7, #0]
 8008c8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bc80      	pop	{r7}
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	200001b0 	.word	0x200001b0

08008ca4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d105      	bne.n	8008cc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	4907      	ldr	r1, [pc, #28]	; (8008cd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cba:	4808      	ldr	r0, [pc, #32]	; (8008cdc <USBD_FS_ProductStrDescriptor+0x38>)
 8008cbc:	f7ff fe16 	bl	80088ec <USBD_GetString>
 8008cc0:	e004      	b.n	8008ccc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4904      	ldr	r1, [pc, #16]	; (8008cd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <USBD_FS_ProductStrDescriptor+0x38>)
 8008cc8:	f7ff fe10 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ccc:	4b02      	ldr	r3, [pc, #8]	; (8008cd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200010d0 	.word	0x200010d0
 8008cdc:	0800a6f0 	.word	0x0800a6f0

08008ce0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	6039      	str	r1, [r7, #0]
 8008cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	4904      	ldr	r1, [pc, #16]	; (8008d00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cf0:	4804      	ldr	r0, [pc, #16]	; (8008d04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cf2:	f7ff fdfb 	bl	80088ec <USBD_GetString>
  return USBD_StrDesc;
 8008cf6:	4b02      	ldr	r3, [pc, #8]	; (8008d00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	200010d0 	.word	0x200010d0
 8008d04:	0800a708 	.word	0x0800a708

08008d08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	6039      	str	r1, [r7, #0]
 8008d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	221a      	movs	r2, #26
 8008d18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d1a:	f000 f843 	bl	8008da4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d1e:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	200001b4 	.word	0x200001b4

08008d2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d105      	bne.n	8008d4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d3e:	683a      	ldr	r2, [r7, #0]
 8008d40:	4907      	ldr	r1, [pc, #28]	; (8008d60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d42:	4808      	ldr	r0, [pc, #32]	; (8008d64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d44:	f7ff fdd2 	bl	80088ec <USBD_GetString>
 8008d48:	e004      	b.n	8008d54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4904      	ldr	r1, [pc, #16]	; (8008d60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d4e:	4805      	ldr	r0, [pc, #20]	; (8008d64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d50:	f7ff fdcc 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d54:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200010d0 	.word	0x200010d0
 8008d64:	0800a71c 	.word	0x0800a71c

08008d68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	6039      	str	r1, [r7, #0]
 8008d72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4907      	ldr	r1, [pc, #28]	; (8008d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d7e:	4808      	ldr	r0, [pc, #32]	; (8008da0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d80:	f7ff fdb4 	bl	80088ec <USBD_GetString>
 8008d84:	e004      	b.n	8008d90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4904      	ldr	r1, [pc, #16]	; (8008d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d8a:	4805      	ldr	r0, [pc, #20]	; (8008da0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d8c:	f7ff fdae 	bl	80088ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200010d0 	.word	0x200010d0
 8008da0:	0800a728 	.word	0x0800a728

08008da4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008daa:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <Get_SerialNum+0x44>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008db0:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <Get_SerialNum+0x48>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008db6:	4b0e      	ldr	r3, [pc, #56]	; (8008df0 <Get_SerialNum+0x4c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d009      	beq.n	8008dde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dca:	2208      	movs	r2, #8
 8008dcc:	4909      	ldr	r1, [pc, #36]	; (8008df4 <Get_SerialNum+0x50>)
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 f814 	bl	8008dfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	4908      	ldr	r1, [pc, #32]	; (8008df8 <Get_SerialNum+0x54>)
 8008dd8:	68b8      	ldr	r0, [r7, #8]
 8008dda:	f000 f80f 	bl	8008dfc <IntToUnicode>
  }
}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	1ffff7e8 	.word	0x1ffff7e8
 8008dec:	1ffff7ec 	.word	0x1ffff7ec
 8008df0:	1ffff7f0 	.word	0x1ffff7f0
 8008df4:	200001b6 	.word	0x200001b6
 8008df8:	200001c6 	.word	0x200001c6

08008dfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e0e:	2300      	movs	r3, #0
 8008e10:	75fb      	strb	r3, [r7, #23]
 8008e12:	e027      	b.n	8008e64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	0f1b      	lsrs	r3, r3, #28
 8008e18:	2b09      	cmp	r3, #9
 8008e1a:	d80b      	bhi.n	8008e34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	0f1b      	lsrs	r3, r3, #28
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	4619      	mov	r1, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3230      	adds	r2, #48	; 0x30
 8008e2e:	b2d2      	uxtb	r2, r2
 8008e30:	701a      	strb	r2, [r3, #0]
 8008e32:	e00a      	b.n	8008e4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	0f1b      	lsrs	r3, r3, #28
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	440b      	add	r3, r1
 8008e44:	3237      	adds	r2, #55	; 0x37
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	3301      	adds	r3, #1
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	4413      	add	r3, r2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	3301      	adds	r3, #1
 8008e62:	75fb      	strb	r3, [r7, #23]
 8008e64:	7dfa      	ldrb	r2, [r7, #23]
 8008e66:	79fb      	ldrb	r3, [r7, #7]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d3d3      	bcc.n	8008e14 <IntToUnicode+0x18>
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0d      	ldr	r2, [pc, #52]	; (8008ebc <HAL_PCD_MspInit+0x44>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d113      	bne.n	8008eb2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008e8a:	4b0d      	ldr	r3, [pc, #52]	; (8008ec0 <HAL_PCD_MspInit+0x48>)
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <HAL_PCD_MspInit+0x48>)
 8008e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e94:	61d3      	str	r3, [r2, #28]
 8008e96:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <HAL_PCD_MspInit+0x48>)
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	2014      	movs	r0, #20
 8008ea8:	f7f8 ff2f 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008eac:	2014      	movs	r0, #20
 8008eae:	f7f8 ff48 	bl	8001d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	40005c00 	.word	0x40005c00
 8008ec0:	40021000 	.word	0x40021000

08008ec4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe fdd6 	bl	8007a8c <USBD_LL_SetupStage>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	6879      	ldr	r1, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	440b      	add	r3, r1
 8008f08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	4619      	mov	r1, r3
 8008f12:	f7fe fe08 	bl	8007b26 <USBD_LL_DataOutStage>
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	440b      	add	r3, r1
 8008f3e:	333c      	adds	r3, #60	; 0x3c
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7fe fe5f 	bl	8007c08 <USBD_LL_DataInStage>
}
 8008f4a:	bf00      	nop
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe ff6f 	bl	8007e44 <USBD_LL_SOF>
}
 8008f66:	bf00      	nop
 8008f68:	3708      	adds	r7, #8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f76:	2301      	movs	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d001      	beq.n	8008f86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008f82:	f7f7 fe5b 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f8c:	7bfa      	ldrb	r2, [r7, #15]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe ff1f 	bl	8007dd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe fed8 	bl	8007d52 <USBD_LL_Reset>
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe ff19 	bl	8007df2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <HAL_PCD_SuspendCallback+0x30>)
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	4a03      	ldr	r2, [pc, #12]	; (8008fdc <HAL_PCD_SuspendCallback+0x30>)
 8008fce:	f043 0306 	orr.w	r3, r3, #6
 8008fd2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	e000ed00 	.word	0xe000ed00

08008fe0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe ff13 	bl	8007e1a <USBD_LL_Resume>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009004:	4a28      	ldr	r2, [pc, #160]	; (80090a8 <USBD_LL_Init+0xac>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a26      	ldr	r2, [pc, #152]	; (80090a8 <USBD_LL_Init+0xac>)
 8009010:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <USBD_LL_Init+0xac>)
 8009016:	4a25      	ldr	r2, [pc, #148]	; (80090ac <USBD_LL_Init+0xb0>)
 8009018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800901a:	4b23      	ldr	r3, [pc, #140]	; (80090a8 <USBD_LL_Init+0xac>)
 800901c:	2208      	movs	r2, #8
 800901e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009020:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <USBD_LL_Init+0xac>)
 8009022:	2202      	movs	r2, #2
 8009024:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009026:	4b20      	ldr	r3, [pc, #128]	; (80090a8 <USBD_LL_Init+0xac>)
 8009028:	2200      	movs	r2, #0
 800902a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800902c:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <USBD_LL_Init+0xac>)
 800902e:	2200      	movs	r2, #0
 8009030:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009032:	4b1d      	ldr	r3, [pc, #116]	; (80090a8 <USBD_LL_Init+0xac>)
 8009034:	2200      	movs	r2, #0
 8009036:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009038:	481b      	ldr	r0, [pc, #108]	; (80090a8 <USBD_LL_Init+0xac>)
 800903a:	f7f9 f86c 	bl	8002116 <HAL_PCD_Init>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009044:	f7f7 fdfa 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800904e:	2318      	movs	r3, #24
 8009050:	2200      	movs	r2, #0
 8009052:	2100      	movs	r1, #0
 8009054:	f7fa fbae 	bl	80037b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800905e:	2358      	movs	r3, #88	; 0x58
 8009060:	2200      	movs	r2, #0
 8009062:	2180      	movs	r1, #128	; 0x80
 8009064:	f7fa fba6 	bl	80037b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800906e:	23c0      	movs	r3, #192	; 0xc0
 8009070:	2200      	movs	r2, #0
 8009072:	2181      	movs	r1, #129	; 0x81
 8009074:	f7fa fb9e 	bl	80037b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800907e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009082:	2200      	movs	r2, #0
 8009084:	2101      	movs	r1, #1
 8009086:	f7fa fb95 	bl	80037b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009094:	2200      	movs	r2, #0
 8009096:	2182      	movs	r1, #130	; 0x82
 8009098:	f7fa fb8c 	bl	80037b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	200012d0 	.word	0x200012d0
 80090ac:	40005c00 	.word	0x40005c00

080090b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f9 f930 	bl	800232c <HAL_PCD_Start>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 f94e 	bl	8009374 <USBD_Get_USB_Status>
 80090d8:	4603      	mov	r3, r0
 80090da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	461a      	mov	r2, r3
 80090f4:	4603      	mov	r3, r0
 80090f6:	70fb      	strb	r3, [r7, #3]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70bb      	strb	r3, [r7, #2]
 80090fc:	4613      	mov	r3, r2
 80090fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800910e:	78bb      	ldrb	r3, [r7, #2]
 8009110:	883a      	ldrh	r2, [r7, #0]
 8009112:	78f9      	ldrb	r1, [r7, #3]
 8009114:	f7f9 faaa 	bl	800266c <HAL_PCD_EP_Open>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	4618      	mov	r0, r3
 8009120:	f000 f928 	bl	8009374 <USBD_Get_USB_Status>
 8009124:	4603      	mov	r3, r0
 8009126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009128:	7bbb      	ldrb	r3, [r7, #14]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	460b      	mov	r3, r1
 800913c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	4611      	mov	r1, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f7f9 faf1 	bl	8002738 <HAL_PCD_EP_Close>
 8009156:	4603      	mov	r3, r0
 8009158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	4618      	mov	r0, r3
 800915e:	f000 f909 	bl	8009374 <USBD_Get_USB_Status>
 8009162:	4603      	mov	r3, r0
 8009164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009166:	7bbb      	ldrb	r3, [r7, #14]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	4611      	mov	r1, r2
 800918e:	4618      	mov	r0, r3
 8009190:	f7f9 fbb1 	bl	80028f6 <HAL_PCD_EP_SetStall>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f8ea 	bl	8009374 <USBD_Get_USB_Status>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7f9 fbf2 	bl	80029b6 <HAL_PCD_EP_ClrStall>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f8cb 	bl	8009374 <USBD_Get_USB_Status>
 80091de:	4603      	mov	r3, r0
 80091e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da0c      	bge.n	8009222 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	440b      	add	r3, r1
 800921c:	3302      	adds	r3, #2
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	e00b      	b.n	800923a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009228:	68f9      	ldr	r1, [r7, #12]
 800922a:	4613      	mov	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	440b      	add	r3, r1
 8009234:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009238:	781b      	ldrb	r3, [r3, #0]
  }
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	bc80      	pop	{r7}
 8009242:	4770      	bx	lr

08009244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7f9 f9dd 	bl	8002622 <HAL_PCD_SetAddress>
 8009268:	4603      	mov	r3, r0
 800926a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f880 	bl	8009374 <USBD_Get_USB_Status>
 8009274:	4603      	mov	r3, r0
 8009276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009278:	7bbb      	ldrb	r3, [r7, #14]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	461a      	mov	r2, r3
 800928e:	460b      	mov	r3, r1
 8009290:	72fb      	strb	r3, [r7, #11]
 8009292:	4613      	mov	r3, r2
 8009294:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a4:	893b      	ldrh	r3, [r7, #8]
 80092a6:	7af9      	ldrb	r1, [r7, #11]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	f7f9 fae1 	bl	8002870 <HAL_PCD_EP_Transmit>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f000 f85d 	bl	8009374 <USBD_Get_USB_Status>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092be:	7dbb      	ldrb	r3, [r7, #22]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	607a      	str	r2, [r7, #4]
 80092d2:	461a      	mov	r2, r3
 80092d4:	460b      	mov	r3, r1
 80092d6:	72fb      	strb	r3, [r7, #11]
 80092d8:	4613      	mov	r3, r2
 80092da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ea:	893b      	ldrh	r3, [r7, #8]
 80092ec:	7af9      	ldrb	r1, [r7, #11]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f7f9 fa6a 	bl	80027c8 <HAL_PCD_EP_Receive>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f83a 	bl	8009374 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009304:	7dbb      	ldrb	r3, [r7, #22]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	4611      	mov	r1, r2
 8009324:	4618      	mov	r0, r3
 8009326:	f7f9 fa8c 	bl	8002842 <HAL_PCD_EP_GetRxCount>
 800932a:	4603      	mov	r3, r0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <USBD_static_malloc+0x14>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	bc80      	pop	{r7}
 8009346:	4770      	bx	lr
 8009348:	200002c0 	.word	0x200002c0

0800934c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]

}
 8009354:	bf00      	nop
 8009356:	370c      	adds	r7, #12
 8009358:	46bd      	mov	sp, r7
 800935a:	bc80      	pop	{r7}
 800935c:	4770      	bx	lr

0800935e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	bc80      	pop	{r7}
 8009372:	4770      	bx	lr

08009374 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	2b03      	cmp	r3, #3
 8009386:	d817      	bhi.n	80093b8 <USBD_Get_USB_Status+0x44>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <USBD_Get_USB_Status+0x1c>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	080093a1 	.word	0x080093a1
 8009394:	080093a7 	.word	0x080093a7
 8009398:	080093ad 	.word	0x080093ad
 800939c:	080093b3 	.word	0x080093b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73fb      	strb	r3, [r7, #15]
    break;
 80093a4:	e00b      	b.n	80093be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093a6:	2302      	movs	r3, #2
 80093a8:	73fb      	strb	r3, [r7, #15]
    break;
 80093aa:	e008      	b.n	80093be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
    break;
 80093b0:	e005      	b.n	80093be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093b2:	2302      	movs	r3, #2
 80093b4:	73fb      	strb	r3, [r7, #15]
    break;
 80093b6:	e002      	b.n	80093be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	73fb      	strb	r3, [r7, #15]
    break;
 80093bc:	bf00      	nop
  }
  return usb_status;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bc80      	pop	{r7}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop

080093cc <__errno>:
 80093cc:	4b01      	ldr	r3, [pc, #4]	; (80093d4 <__errno+0x8>)
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	200001d0 	.word	0x200001d0

080093d8 <__libc_init_array>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	2600      	movs	r6, #0
 80093dc:	4d0c      	ldr	r5, [pc, #48]	; (8009410 <__libc_init_array+0x38>)
 80093de:	4c0d      	ldr	r4, [pc, #52]	; (8009414 <__libc_init_array+0x3c>)
 80093e0:	1b64      	subs	r4, r4, r5
 80093e2:	10a4      	asrs	r4, r4, #2
 80093e4:	42a6      	cmp	r6, r4
 80093e6:	d109      	bne.n	80093fc <__libc_init_array+0x24>
 80093e8:	f001 f954 	bl	800a694 <_init>
 80093ec:	2600      	movs	r6, #0
 80093ee:	4d0a      	ldr	r5, [pc, #40]	; (8009418 <__libc_init_array+0x40>)
 80093f0:	4c0a      	ldr	r4, [pc, #40]	; (800941c <__libc_init_array+0x44>)
 80093f2:	1b64      	subs	r4, r4, r5
 80093f4:	10a4      	asrs	r4, r4, #2
 80093f6:	42a6      	cmp	r6, r4
 80093f8:	d105      	bne.n	8009406 <__libc_init_array+0x2e>
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009400:	4798      	blx	r3
 8009402:	3601      	adds	r6, #1
 8009404:	e7ee      	b.n	80093e4 <__libc_init_array+0xc>
 8009406:	f855 3b04 	ldr.w	r3, [r5], #4
 800940a:	4798      	blx	r3
 800940c:	3601      	adds	r6, #1
 800940e:	e7f2      	b.n	80093f6 <__libc_init_array+0x1e>
 8009410:	0800a7e8 	.word	0x0800a7e8
 8009414:	0800a7e8 	.word	0x0800a7e8
 8009418:	0800a7e8 	.word	0x0800a7e8
 800941c:	0800a7ec 	.word	0x0800a7ec

08009420 <memcpy>:
 8009420:	440a      	add	r2, r1
 8009422:	4291      	cmp	r1, r2
 8009424:	f100 33ff 	add.w	r3, r0, #4294967295
 8009428:	d100      	bne.n	800942c <memcpy+0xc>
 800942a:	4770      	bx	lr
 800942c:	b510      	push	{r4, lr}
 800942e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009432:	4291      	cmp	r1, r2
 8009434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009438:	d1f9      	bne.n	800942e <memcpy+0xe>
 800943a:	bd10      	pop	{r4, pc}

0800943c <memset>:
 800943c:	4603      	mov	r3, r0
 800943e:	4402      	add	r2, r0
 8009440:	4293      	cmp	r3, r2
 8009442:	d100      	bne.n	8009446 <memset+0xa>
 8009444:	4770      	bx	lr
 8009446:	f803 1b01 	strb.w	r1, [r3], #1
 800944a:	e7f9      	b.n	8009440 <memset+0x4>

0800944c <iprintf>:
 800944c:	b40f      	push	{r0, r1, r2, r3}
 800944e:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <iprintf+0x2c>)
 8009450:	b513      	push	{r0, r1, r4, lr}
 8009452:	681c      	ldr	r4, [r3, #0]
 8009454:	b124      	cbz	r4, 8009460 <iprintf+0x14>
 8009456:	69a3      	ldr	r3, [r4, #24]
 8009458:	b913      	cbnz	r3, 8009460 <iprintf+0x14>
 800945a:	4620      	mov	r0, r4
 800945c:	f000 f886 	bl	800956c <__sinit>
 8009460:	ab05      	add	r3, sp, #20
 8009462:	4620      	mov	r0, r4
 8009464:	9a04      	ldr	r2, [sp, #16]
 8009466:	68a1      	ldr	r1, [r4, #8]
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	f000 fafd 	bl	8009a68 <_vfiprintf_r>
 800946e:	b002      	add	sp, #8
 8009470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009474:	b004      	add	sp, #16
 8009476:	4770      	bx	lr
 8009478:	200001d0 	.word	0x200001d0

0800947c <siprintf>:
 800947c:	b40e      	push	{r1, r2, r3}
 800947e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009482:	b500      	push	{lr}
 8009484:	b09c      	sub	sp, #112	; 0x70
 8009486:	ab1d      	add	r3, sp, #116	; 0x74
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	9006      	str	r0, [sp, #24]
 800948c:	9107      	str	r1, [sp, #28]
 800948e:	9104      	str	r1, [sp, #16]
 8009490:	4808      	ldr	r0, [pc, #32]	; (80094b4 <siprintf+0x38>)
 8009492:	4909      	ldr	r1, [pc, #36]	; (80094b8 <siprintf+0x3c>)
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	9105      	str	r1, [sp, #20]
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	a902      	add	r1, sp, #8
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	f000 f9ba 	bl	8009818 <_svfiprintf_r>
 80094a4:	2200      	movs	r2, #0
 80094a6:	9b02      	ldr	r3, [sp, #8]
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	b01c      	add	sp, #112	; 0x70
 80094ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b0:	b003      	add	sp, #12
 80094b2:	4770      	bx	lr
 80094b4:	200001d0 	.word	0x200001d0
 80094b8:	ffff0208 	.word	0xffff0208

080094bc <std>:
 80094bc:	2300      	movs	r3, #0
 80094be:	b510      	push	{r4, lr}
 80094c0:	4604      	mov	r4, r0
 80094c2:	e9c0 3300 	strd	r3, r3, [r0]
 80094c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ca:	6083      	str	r3, [r0, #8]
 80094cc:	8181      	strh	r1, [r0, #12]
 80094ce:	6643      	str	r3, [r0, #100]	; 0x64
 80094d0:	81c2      	strh	r2, [r0, #14]
 80094d2:	6183      	str	r3, [r0, #24]
 80094d4:	4619      	mov	r1, r3
 80094d6:	2208      	movs	r2, #8
 80094d8:	305c      	adds	r0, #92	; 0x5c
 80094da:	f7ff ffaf 	bl	800943c <memset>
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <std+0x38>)
 80094e0:	6224      	str	r4, [r4, #32]
 80094e2:	6263      	str	r3, [r4, #36]	; 0x24
 80094e4:	4b04      	ldr	r3, [pc, #16]	; (80094f8 <std+0x3c>)
 80094e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <std+0x40>)
 80094ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094ec:	4b04      	ldr	r3, [pc, #16]	; (8009500 <std+0x44>)
 80094ee:	6323      	str	r3, [r4, #48]	; 0x30
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	bf00      	nop
 80094f4:	0800a015 	.word	0x0800a015
 80094f8:	0800a037 	.word	0x0800a037
 80094fc:	0800a06f 	.word	0x0800a06f
 8009500:	0800a093 	.word	0x0800a093

08009504 <_cleanup_r>:
 8009504:	4901      	ldr	r1, [pc, #4]	; (800950c <_cleanup_r+0x8>)
 8009506:	f000 b8af 	b.w	8009668 <_fwalk_reent>
 800950a:	bf00      	nop
 800950c:	0800a36d 	.word	0x0800a36d

08009510 <__sfmoreglue>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	2568      	movs	r5, #104	; 0x68
 8009514:	1e4a      	subs	r2, r1, #1
 8009516:	4355      	muls	r5, r2
 8009518:	460e      	mov	r6, r1
 800951a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800951e:	f000 f8c5 	bl	80096ac <_malloc_r>
 8009522:	4604      	mov	r4, r0
 8009524:	b140      	cbz	r0, 8009538 <__sfmoreglue+0x28>
 8009526:	2100      	movs	r1, #0
 8009528:	e9c0 1600 	strd	r1, r6, [r0]
 800952c:	300c      	adds	r0, #12
 800952e:	60a0      	str	r0, [r4, #8]
 8009530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009534:	f7ff ff82 	bl	800943c <memset>
 8009538:	4620      	mov	r0, r4
 800953a:	bd70      	pop	{r4, r5, r6, pc}

0800953c <__sfp_lock_acquire>:
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__sfp_lock_acquire+0x8>)
 800953e:	f000 b8b3 	b.w	80096a8 <__retarget_lock_acquire_recursive>
 8009542:	bf00      	nop
 8009544:	200015c4 	.word	0x200015c4

08009548 <__sfp_lock_release>:
 8009548:	4801      	ldr	r0, [pc, #4]	; (8009550 <__sfp_lock_release+0x8>)
 800954a:	f000 b8ae 	b.w	80096aa <__retarget_lock_release_recursive>
 800954e:	bf00      	nop
 8009550:	200015c4 	.word	0x200015c4

08009554 <__sinit_lock_acquire>:
 8009554:	4801      	ldr	r0, [pc, #4]	; (800955c <__sinit_lock_acquire+0x8>)
 8009556:	f000 b8a7 	b.w	80096a8 <__retarget_lock_acquire_recursive>
 800955a:	bf00      	nop
 800955c:	200015bf 	.word	0x200015bf

08009560 <__sinit_lock_release>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__sinit_lock_release+0x8>)
 8009562:	f000 b8a2 	b.w	80096aa <__retarget_lock_release_recursive>
 8009566:	bf00      	nop
 8009568:	200015bf 	.word	0x200015bf

0800956c <__sinit>:
 800956c:	b510      	push	{r4, lr}
 800956e:	4604      	mov	r4, r0
 8009570:	f7ff fff0 	bl	8009554 <__sinit_lock_acquire>
 8009574:	69a3      	ldr	r3, [r4, #24]
 8009576:	b11b      	cbz	r3, 8009580 <__sinit+0x14>
 8009578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800957c:	f7ff bff0 	b.w	8009560 <__sinit_lock_release>
 8009580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009584:	6523      	str	r3, [r4, #80]	; 0x50
 8009586:	4b13      	ldr	r3, [pc, #76]	; (80095d4 <__sinit+0x68>)
 8009588:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <__sinit+0x6c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	62a2      	str	r2, [r4, #40]	; 0x28
 800958e:	42a3      	cmp	r3, r4
 8009590:	bf08      	it	eq
 8009592:	2301      	moveq	r3, #1
 8009594:	4620      	mov	r0, r4
 8009596:	bf08      	it	eq
 8009598:	61a3      	streq	r3, [r4, #24]
 800959a:	f000 f81f 	bl	80095dc <__sfp>
 800959e:	6060      	str	r0, [r4, #4]
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 f81b 	bl	80095dc <__sfp>
 80095a6:	60a0      	str	r0, [r4, #8]
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 f817 	bl	80095dc <__sfp>
 80095ae:	2200      	movs	r2, #0
 80095b0:	2104      	movs	r1, #4
 80095b2:	60e0      	str	r0, [r4, #12]
 80095b4:	6860      	ldr	r0, [r4, #4]
 80095b6:	f7ff ff81 	bl	80094bc <std>
 80095ba:	2201      	movs	r2, #1
 80095bc:	2109      	movs	r1, #9
 80095be:	68a0      	ldr	r0, [r4, #8]
 80095c0:	f7ff ff7c 	bl	80094bc <std>
 80095c4:	2202      	movs	r2, #2
 80095c6:	2112      	movs	r1, #18
 80095c8:	68e0      	ldr	r0, [r4, #12]
 80095ca:	f7ff ff77 	bl	80094bc <std>
 80095ce:	2301      	movs	r3, #1
 80095d0:	61a3      	str	r3, [r4, #24]
 80095d2:	e7d1      	b.n	8009578 <__sinit+0xc>
 80095d4:	0800a750 	.word	0x0800a750
 80095d8:	08009505 	.word	0x08009505

080095dc <__sfp>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	4607      	mov	r7, r0
 80095e0:	f7ff ffac 	bl	800953c <__sfp_lock_acquire>
 80095e4:	4b1e      	ldr	r3, [pc, #120]	; (8009660 <__sfp+0x84>)
 80095e6:	681e      	ldr	r6, [r3, #0]
 80095e8:	69b3      	ldr	r3, [r6, #24]
 80095ea:	b913      	cbnz	r3, 80095f2 <__sfp+0x16>
 80095ec:	4630      	mov	r0, r6
 80095ee:	f7ff ffbd 	bl	800956c <__sinit>
 80095f2:	3648      	adds	r6, #72	; 0x48
 80095f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	d503      	bpl.n	8009604 <__sfp+0x28>
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	b30b      	cbz	r3, 8009644 <__sfp+0x68>
 8009600:	6836      	ldr	r6, [r6, #0]
 8009602:	e7f7      	b.n	80095f4 <__sfp+0x18>
 8009604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009608:	b9d5      	cbnz	r5, 8009640 <__sfp+0x64>
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <__sfp+0x88>)
 800960c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009610:	60e3      	str	r3, [r4, #12]
 8009612:	6665      	str	r5, [r4, #100]	; 0x64
 8009614:	f000 f847 	bl	80096a6 <__retarget_lock_init_recursive>
 8009618:	f7ff ff96 	bl	8009548 <__sfp_lock_release>
 800961c:	2208      	movs	r2, #8
 800961e:	4629      	mov	r1, r5
 8009620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009628:	6025      	str	r5, [r4, #0]
 800962a:	61a5      	str	r5, [r4, #24]
 800962c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009630:	f7ff ff04 	bl	800943c <memset>
 8009634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800963c:	4620      	mov	r0, r4
 800963e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009640:	3468      	adds	r4, #104	; 0x68
 8009642:	e7d9      	b.n	80095f8 <__sfp+0x1c>
 8009644:	2104      	movs	r1, #4
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff ff62 	bl	8009510 <__sfmoreglue>
 800964c:	4604      	mov	r4, r0
 800964e:	6030      	str	r0, [r6, #0]
 8009650:	2800      	cmp	r0, #0
 8009652:	d1d5      	bne.n	8009600 <__sfp+0x24>
 8009654:	f7ff ff78 	bl	8009548 <__sfp_lock_release>
 8009658:	230c      	movs	r3, #12
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	e7ee      	b.n	800963c <__sfp+0x60>
 800965e:	bf00      	nop
 8009660:	0800a750 	.word	0x0800a750
 8009664:	ffff0001 	.word	0xffff0001

08009668 <_fwalk_reent>:
 8009668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800966c:	4606      	mov	r6, r0
 800966e:	4688      	mov	r8, r1
 8009670:	2700      	movs	r7, #0
 8009672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967a:	f1b9 0901 	subs.w	r9, r9, #1
 800967e:	d505      	bpl.n	800968c <_fwalk_reent+0x24>
 8009680:	6824      	ldr	r4, [r4, #0]
 8009682:	2c00      	cmp	r4, #0
 8009684:	d1f7      	bne.n	8009676 <_fwalk_reent+0xe>
 8009686:	4638      	mov	r0, r7
 8009688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968c:	89ab      	ldrh	r3, [r5, #12]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d907      	bls.n	80096a2 <_fwalk_reent+0x3a>
 8009692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009696:	3301      	adds	r3, #1
 8009698:	d003      	beq.n	80096a2 <_fwalk_reent+0x3a>
 800969a:	4629      	mov	r1, r5
 800969c:	4630      	mov	r0, r6
 800969e:	47c0      	blx	r8
 80096a0:	4307      	orrs	r7, r0
 80096a2:	3568      	adds	r5, #104	; 0x68
 80096a4:	e7e9      	b.n	800967a <_fwalk_reent+0x12>

080096a6 <__retarget_lock_init_recursive>:
 80096a6:	4770      	bx	lr

080096a8 <__retarget_lock_acquire_recursive>:
 80096a8:	4770      	bx	lr

080096aa <__retarget_lock_release_recursive>:
 80096aa:	4770      	bx	lr

080096ac <_malloc_r>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	1ccd      	adds	r5, r1, #3
 80096b0:	f025 0503 	bic.w	r5, r5, #3
 80096b4:	3508      	adds	r5, #8
 80096b6:	2d0c      	cmp	r5, #12
 80096b8:	bf38      	it	cc
 80096ba:	250c      	movcc	r5, #12
 80096bc:	2d00      	cmp	r5, #0
 80096be:	4606      	mov	r6, r0
 80096c0:	db01      	blt.n	80096c6 <_malloc_r+0x1a>
 80096c2:	42a9      	cmp	r1, r5
 80096c4:	d903      	bls.n	80096ce <_malloc_r+0x22>
 80096c6:	230c      	movs	r3, #12
 80096c8:	6033      	str	r3, [r6, #0]
 80096ca:	2000      	movs	r0, #0
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ce:	f000 ff27 	bl	800a520 <__malloc_lock>
 80096d2:	4921      	ldr	r1, [pc, #132]	; (8009758 <_malloc_r+0xac>)
 80096d4:	680a      	ldr	r2, [r1, #0]
 80096d6:	4614      	mov	r4, r2
 80096d8:	b99c      	cbnz	r4, 8009702 <_malloc_r+0x56>
 80096da:	4f20      	ldr	r7, [pc, #128]	; (800975c <_malloc_r+0xb0>)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	b923      	cbnz	r3, 80096ea <_malloc_r+0x3e>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 fc86 	bl	8009ff4 <_sbrk_r>
 80096e8:	6038      	str	r0, [r7, #0]
 80096ea:	4629      	mov	r1, r5
 80096ec:	4630      	mov	r0, r6
 80096ee:	f000 fc81 	bl	8009ff4 <_sbrk_r>
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	d123      	bne.n	800973e <_malloc_r+0x92>
 80096f6:	230c      	movs	r3, #12
 80096f8:	4630      	mov	r0, r6
 80096fa:	6033      	str	r3, [r6, #0]
 80096fc:	f000 ff16 	bl	800a52c <__malloc_unlock>
 8009700:	e7e3      	b.n	80096ca <_malloc_r+0x1e>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	1b5b      	subs	r3, r3, r5
 8009706:	d417      	bmi.n	8009738 <_malloc_r+0x8c>
 8009708:	2b0b      	cmp	r3, #11
 800970a:	d903      	bls.n	8009714 <_malloc_r+0x68>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	441c      	add	r4, r3
 8009710:	6025      	str	r5, [r4, #0]
 8009712:	e004      	b.n	800971e <_malloc_r+0x72>
 8009714:	6863      	ldr	r3, [r4, #4]
 8009716:	42a2      	cmp	r2, r4
 8009718:	bf0c      	ite	eq
 800971a:	600b      	streq	r3, [r1, #0]
 800971c:	6053      	strne	r3, [r2, #4]
 800971e:	4630      	mov	r0, r6
 8009720:	f000 ff04 	bl	800a52c <__malloc_unlock>
 8009724:	f104 000b 	add.w	r0, r4, #11
 8009728:	1d23      	adds	r3, r4, #4
 800972a:	f020 0007 	bic.w	r0, r0, #7
 800972e:	1ac2      	subs	r2, r0, r3
 8009730:	d0cc      	beq.n	80096cc <_malloc_r+0x20>
 8009732:	1a1b      	subs	r3, r3, r0
 8009734:	50a3      	str	r3, [r4, r2]
 8009736:	e7c9      	b.n	80096cc <_malloc_r+0x20>
 8009738:	4622      	mov	r2, r4
 800973a:	6864      	ldr	r4, [r4, #4]
 800973c:	e7cc      	b.n	80096d8 <_malloc_r+0x2c>
 800973e:	1cc4      	adds	r4, r0, #3
 8009740:	f024 0403 	bic.w	r4, r4, #3
 8009744:	42a0      	cmp	r0, r4
 8009746:	d0e3      	beq.n	8009710 <_malloc_r+0x64>
 8009748:	1a21      	subs	r1, r4, r0
 800974a:	4630      	mov	r0, r6
 800974c:	f000 fc52 	bl	8009ff4 <_sbrk_r>
 8009750:	3001      	adds	r0, #1
 8009752:	d1dd      	bne.n	8009710 <_malloc_r+0x64>
 8009754:	e7cf      	b.n	80096f6 <_malloc_r+0x4a>
 8009756:	bf00      	nop
 8009758:	200004e0 	.word	0x200004e0
 800975c:	200004e4 	.word	0x200004e4

08009760 <__ssputs_r>:
 8009760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009764:	688e      	ldr	r6, [r1, #8]
 8009766:	4682      	mov	sl, r0
 8009768:	429e      	cmp	r6, r3
 800976a:	460c      	mov	r4, r1
 800976c:	4690      	mov	r8, r2
 800976e:	461f      	mov	r7, r3
 8009770:	d838      	bhi.n	80097e4 <__ssputs_r+0x84>
 8009772:	898a      	ldrh	r2, [r1, #12]
 8009774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009778:	d032      	beq.n	80097e0 <__ssputs_r+0x80>
 800977a:	6825      	ldr	r5, [r4, #0]
 800977c:	6909      	ldr	r1, [r1, #16]
 800977e:	3301      	adds	r3, #1
 8009780:	eba5 0901 	sub.w	r9, r5, r1
 8009784:	6965      	ldr	r5, [r4, #20]
 8009786:	444b      	add	r3, r9
 8009788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800978c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009790:	106d      	asrs	r5, r5, #1
 8009792:	429d      	cmp	r5, r3
 8009794:	bf38      	it	cc
 8009796:	461d      	movcc	r5, r3
 8009798:	0553      	lsls	r3, r2, #21
 800979a:	d531      	bpl.n	8009800 <__ssputs_r+0xa0>
 800979c:	4629      	mov	r1, r5
 800979e:	f7ff ff85 	bl	80096ac <_malloc_r>
 80097a2:	4606      	mov	r6, r0
 80097a4:	b950      	cbnz	r0, 80097bc <__ssputs_r+0x5c>
 80097a6:	230c      	movs	r3, #12
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ac:	f8ca 3000 	str.w	r3, [sl]
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097bc:	464a      	mov	r2, r9
 80097be:	6921      	ldr	r1, [r4, #16]
 80097c0:	f7ff fe2e 	bl	8009420 <memcpy>
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ce:	81a3      	strh	r3, [r4, #12]
 80097d0:	6126      	str	r6, [r4, #16]
 80097d2:	444e      	add	r6, r9
 80097d4:	6026      	str	r6, [r4, #0]
 80097d6:	463e      	mov	r6, r7
 80097d8:	6165      	str	r5, [r4, #20]
 80097da:	eba5 0509 	sub.w	r5, r5, r9
 80097de:	60a5      	str	r5, [r4, #8]
 80097e0:	42be      	cmp	r6, r7
 80097e2:	d900      	bls.n	80097e6 <__ssputs_r+0x86>
 80097e4:	463e      	mov	r6, r7
 80097e6:	4632      	mov	r2, r6
 80097e8:	4641      	mov	r1, r8
 80097ea:	6820      	ldr	r0, [r4, #0]
 80097ec:	f000 fe7e 	bl	800a4ec <memmove>
 80097f0:	68a3      	ldr	r3, [r4, #8]
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	1b9b      	subs	r3, r3, r6
 80097f6:	4432      	add	r2, r6
 80097f8:	2000      	movs	r0, #0
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	6022      	str	r2, [r4, #0]
 80097fe:	e7db      	b.n	80097b8 <__ssputs_r+0x58>
 8009800:	462a      	mov	r2, r5
 8009802:	f000 fee5 	bl	800a5d0 <_realloc_r>
 8009806:	4606      	mov	r6, r0
 8009808:	2800      	cmp	r0, #0
 800980a:	d1e1      	bne.n	80097d0 <__ssputs_r+0x70>
 800980c:	4650      	mov	r0, sl
 800980e:	6921      	ldr	r1, [r4, #16]
 8009810:	f000 fe92 	bl	800a538 <_free_r>
 8009814:	e7c7      	b.n	80097a6 <__ssputs_r+0x46>
	...

08009818 <_svfiprintf_r>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4698      	mov	r8, r3
 800981e:	898b      	ldrh	r3, [r1, #12]
 8009820:	4607      	mov	r7, r0
 8009822:	061b      	lsls	r3, r3, #24
 8009824:	460d      	mov	r5, r1
 8009826:	4614      	mov	r4, r2
 8009828:	b09d      	sub	sp, #116	; 0x74
 800982a:	d50e      	bpl.n	800984a <_svfiprintf_r+0x32>
 800982c:	690b      	ldr	r3, [r1, #16]
 800982e:	b963      	cbnz	r3, 800984a <_svfiprintf_r+0x32>
 8009830:	2140      	movs	r1, #64	; 0x40
 8009832:	f7ff ff3b 	bl	80096ac <_malloc_r>
 8009836:	6028      	str	r0, [r5, #0]
 8009838:	6128      	str	r0, [r5, #16]
 800983a:	b920      	cbnz	r0, 8009846 <_svfiprintf_r+0x2e>
 800983c:	230c      	movs	r3, #12
 800983e:	603b      	str	r3, [r7, #0]
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	e0d1      	b.n	80099ea <_svfiprintf_r+0x1d2>
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	616b      	str	r3, [r5, #20]
 800984a:	2300      	movs	r3, #0
 800984c:	9309      	str	r3, [sp, #36]	; 0x24
 800984e:	2320      	movs	r3, #32
 8009850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009854:	2330      	movs	r3, #48	; 0x30
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	f8cd 800c 	str.w	r8, [sp, #12]
 800985e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009a04 <_svfiprintf_r+0x1ec>
 8009862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009866:	4623      	mov	r3, r4
 8009868:	469a      	mov	sl, r3
 800986a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800986e:	b10a      	cbz	r2, 8009874 <_svfiprintf_r+0x5c>
 8009870:	2a25      	cmp	r2, #37	; 0x25
 8009872:	d1f9      	bne.n	8009868 <_svfiprintf_r+0x50>
 8009874:	ebba 0b04 	subs.w	fp, sl, r4
 8009878:	d00b      	beq.n	8009892 <_svfiprintf_r+0x7a>
 800987a:	465b      	mov	r3, fp
 800987c:	4622      	mov	r2, r4
 800987e:	4629      	mov	r1, r5
 8009880:	4638      	mov	r0, r7
 8009882:	f7ff ff6d 	bl	8009760 <__ssputs_r>
 8009886:	3001      	adds	r0, #1
 8009888:	f000 80aa 	beq.w	80099e0 <_svfiprintf_r+0x1c8>
 800988c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800988e:	445a      	add	r2, fp
 8009890:	9209      	str	r2, [sp, #36]	; 0x24
 8009892:	f89a 3000 	ldrb.w	r3, [sl]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 80a2 	beq.w	80099e0 <_svfiprintf_r+0x1c8>
 800989c:	2300      	movs	r3, #0
 800989e:	f04f 32ff 	mov.w	r2, #4294967295
 80098a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a6:	f10a 0a01 	add.w	sl, sl, #1
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	9307      	str	r3, [sp, #28]
 80098ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b2:	931a      	str	r3, [sp, #104]	; 0x68
 80098b4:	4654      	mov	r4, sl
 80098b6:	2205      	movs	r2, #5
 80098b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098bc:	4851      	ldr	r0, [pc, #324]	; (8009a04 <_svfiprintf_r+0x1ec>)
 80098be:	f000 fe07 	bl	800a4d0 <memchr>
 80098c2:	9a04      	ldr	r2, [sp, #16]
 80098c4:	b9d8      	cbnz	r0, 80098fe <_svfiprintf_r+0xe6>
 80098c6:	06d0      	lsls	r0, r2, #27
 80098c8:	bf44      	itt	mi
 80098ca:	2320      	movmi	r3, #32
 80098cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d0:	0711      	lsls	r1, r2, #28
 80098d2:	bf44      	itt	mi
 80098d4:	232b      	movmi	r3, #43	; 0x2b
 80098d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098da:	f89a 3000 	ldrb.w	r3, [sl]
 80098de:	2b2a      	cmp	r3, #42	; 0x2a
 80098e0:	d015      	beq.n	800990e <_svfiprintf_r+0xf6>
 80098e2:	4654      	mov	r4, sl
 80098e4:	2000      	movs	r0, #0
 80098e6:	f04f 0c0a 	mov.w	ip, #10
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	4621      	mov	r1, r4
 80098ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f2:	3b30      	subs	r3, #48	; 0x30
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d94e      	bls.n	8009996 <_svfiprintf_r+0x17e>
 80098f8:	b1b0      	cbz	r0, 8009928 <_svfiprintf_r+0x110>
 80098fa:	9207      	str	r2, [sp, #28]
 80098fc:	e014      	b.n	8009928 <_svfiprintf_r+0x110>
 80098fe:	eba0 0308 	sub.w	r3, r0, r8
 8009902:	fa09 f303 	lsl.w	r3, r9, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	46a2      	mov	sl, r4
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	e7d2      	b.n	80098b4 <_svfiprintf_r+0x9c>
 800990e:	9b03      	ldr	r3, [sp, #12]
 8009910:	1d19      	adds	r1, r3, #4
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	9103      	str	r1, [sp, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfbb      	ittet	lt
 800991a:	425b      	neglt	r3, r3
 800991c:	f042 0202 	orrlt.w	r2, r2, #2
 8009920:	9307      	strge	r3, [sp, #28]
 8009922:	9307      	strlt	r3, [sp, #28]
 8009924:	bfb8      	it	lt
 8009926:	9204      	strlt	r2, [sp, #16]
 8009928:	7823      	ldrb	r3, [r4, #0]
 800992a:	2b2e      	cmp	r3, #46	; 0x2e
 800992c:	d10c      	bne.n	8009948 <_svfiprintf_r+0x130>
 800992e:	7863      	ldrb	r3, [r4, #1]
 8009930:	2b2a      	cmp	r3, #42	; 0x2a
 8009932:	d135      	bne.n	80099a0 <_svfiprintf_r+0x188>
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	3402      	adds	r4, #2
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfb8      	it	lt
 8009942:	f04f 33ff 	movlt.w	r3, #4294967295
 8009946:	9305      	str	r3, [sp, #20]
 8009948:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a14 <_svfiprintf_r+0x1fc>
 800994c:	2203      	movs	r2, #3
 800994e:	4650      	mov	r0, sl
 8009950:	7821      	ldrb	r1, [r4, #0]
 8009952:	f000 fdbd 	bl	800a4d0 <memchr>
 8009956:	b140      	cbz	r0, 800996a <_svfiprintf_r+0x152>
 8009958:	2340      	movs	r3, #64	; 0x40
 800995a:	eba0 000a 	sub.w	r0, r0, sl
 800995e:	fa03 f000 	lsl.w	r0, r3, r0
 8009962:	9b04      	ldr	r3, [sp, #16]
 8009964:	3401      	adds	r4, #1
 8009966:	4303      	orrs	r3, r0
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996e:	2206      	movs	r2, #6
 8009970:	4825      	ldr	r0, [pc, #148]	; (8009a08 <_svfiprintf_r+0x1f0>)
 8009972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009976:	f000 fdab 	bl	800a4d0 <memchr>
 800997a:	2800      	cmp	r0, #0
 800997c:	d038      	beq.n	80099f0 <_svfiprintf_r+0x1d8>
 800997e:	4b23      	ldr	r3, [pc, #140]	; (8009a0c <_svfiprintf_r+0x1f4>)
 8009980:	bb1b      	cbnz	r3, 80099ca <_svfiprintf_r+0x1b2>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	3307      	adds	r3, #7
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	3308      	adds	r3, #8
 800998c:	9303      	str	r3, [sp, #12]
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	4433      	add	r3, r6
 8009992:	9309      	str	r3, [sp, #36]	; 0x24
 8009994:	e767      	b.n	8009866 <_svfiprintf_r+0x4e>
 8009996:	460c      	mov	r4, r1
 8009998:	2001      	movs	r0, #1
 800999a:	fb0c 3202 	mla	r2, ip, r2, r3
 800999e:	e7a5      	b.n	80098ec <_svfiprintf_r+0xd4>
 80099a0:	2300      	movs	r3, #0
 80099a2:	f04f 0c0a 	mov.w	ip, #10
 80099a6:	4619      	mov	r1, r3
 80099a8:	3401      	adds	r4, #1
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	4620      	mov	r0, r4
 80099ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b2:	3a30      	subs	r2, #48	; 0x30
 80099b4:	2a09      	cmp	r2, #9
 80099b6:	d903      	bls.n	80099c0 <_svfiprintf_r+0x1a8>
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d0c5      	beq.n	8009948 <_svfiprintf_r+0x130>
 80099bc:	9105      	str	r1, [sp, #20]
 80099be:	e7c3      	b.n	8009948 <_svfiprintf_r+0x130>
 80099c0:	4604      	mov	r4, r0
 80099c2:	2301      	movs	r3, #1
 80099c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c8:	e7f0      	b.n	80099ac <_svfiprintf_r+0x194>
 80099ca:	ab03      	add	r3, sp, #12
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	462a      	mov	r2, r5
 80099d0:	4638      	mov	r0, r7
 80099d2:	4b0f      	ldr	r3, [pc, #60]	; (8009a10 <_svfiprintf_r+0x1f8>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	f3af 8000 	nop.w
 80099da:	1c42      	adds	r2, r0, #1
 80099dc:	4606      	mov	r6, r0
 80099de:	d1d6      	bne.n	800998e <_svfiprintf_r+0x176>
 80099e0:	89ab      	ldrh	r3, [r5, #12]
 80099e2:	065b      	lsls	r3, r3, #25
 80099e4:	f53f af2c 	bmi.w	8009840 <_svfiprintf_r+0x28>
 80099e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099ea:	b01d      	add	sp, #116	; 0x74
 80099ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	462a      	mov	r2, r5
 80099f6:	4638      	mov	r0, r7
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <_svfiprintf_r+0x1f8>)
 80099fa:	a904      	add	r1, sp, #16
 80099fc:	f000 f9d4 	bl	8009da8 <_printf_i>
 8009a00:	e7eb      	b.n	80099da <_svfiprintf_r+0x1c2>
 8009a02:	bf00      	nop
 8009a04:	0800a7b4 	.word	0x0800a7b4
 8009a08:	0800a7be 	.word	0x0800a7be
 8009a0c:	00000000 	.word	0x00000000
 8009a10:	08009761 	.word	0x08009761
 8009a14:	0800a7ba 	.word	0x0800a7ba

08009a18 <__sfputc_r>:
 8009a18:	6893      	ldr	r3, [r2, #8]
 8009a1a:	b410      	push	{r4}
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	6093      	str	r3, [r2, #8]
 8009a22:	da07      	bge.n	8009a34 <__sfputc_r+0x1c>
 8009a24:	6994      	ldr	r4, [r2, #24]
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	db01      	blt.n	8009a2e <__sfputc_r+0x16>
 8009a2a:	290a      	cmp	r1, #10
 8009a2c:	d102      	bne.n	8009a34 <__sfputc_r+0x1c>
 8009a2e:	bc10      	pop	{r4}
 8009a30:	f000 bb34 	b.w	800a09c <__swbuf_r>
 8009a34:	6813      	ldr	r3, [r2, #0]
 8009a36:	1c58      	adds	r0, r3, #1
 8009a38:	6010      	str	r0, [r2, #0]
 8009a3a:	7019      	strb	r1, [r3, #0]
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	bc10      	pop	{r4}
 8009a40:	4770      	bx	lr

08009a42 <__sfputs_r>:
 8009a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	4614      	mov	r4, r2
 8009a4a:	18d5      	adds	r5, r2, r3
 8009a4c:	42ac      	cmp	r4, r5
 8009a4e:	d101      	bne.n	8009a54 <__sfputs_r+0x12>
 8009a50:	2000      	movs	r0, #0
 8009a52:	e007      	b.n	8009a64 <__sfputs_r+0x22>
 8009a54:	463a      	mov	r2, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5c:	f7ff ffdc 	bl	8009a18 <__sfputc_r>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d1f3      	bne.n	8009a4c <__sfputs_r+0xa>
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a68 <_vfiprintf_r>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	460d      	mov	r5, r1
 8009a6e:	4614      	mov	r4, r2
 8009a70:	4698      	mov	r8, r3
 8009a72:	4606      	mov	r6, r0
 8009a74:	b09d      	sub	sp, #116	; 0x74
 8009a76:	b118      	cbz	r0, 8009a80 <_vfiprintf_r+0x18>
 8009a78:	6983      	ldr	r3, [r0, #24]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <_vfiprintf_r+0x18>
 8009a7c:	f7ff fd76 	bl	800956c <__sinit>
 8009a80:	4b89      	ldr	r3, [pc, #548]	; (8009ca8 <_vfiprintf_r+0x240>)
 8009a82:	429d      	cmp	r5, r3
 8009a84:	d11b      	bne.n	8009abe <_vfiprintf_r+0x56>
 8009a86:	6875      	ldr	r5, [r6, #4]
 8009a88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a8a:	07d9      	lsls	r1, r3, #31
 8009a8c:	d405      	bmi.n	8009a9a <_vfiprintf_r+0x32>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	059a      	lsls	r2, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_vfiprintf_r+0x32>
 8009a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a96:	f7ff fe07 	bl	80096a8 <__retarget_lock_acquire_recursive>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	071b      	lsls	r3, r3, #28
 8009a9e:	d501      	bpl.n	8009aa4 <_vfiprintf_r+0x3c>
 8009aa0:	692b      	ldr	r3, [r5, #16]
 8009aa2:	b9eb      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x78>
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 fb5c 	bl	800a164 <__swsetup_r>
 8009aac:	b1c0      	cbz	r0, 8009ae0 <_vfiprintf_r+0x78>
 8009aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ab0:	07dc      	lsls	r4, r3, #31
 8009ab2:	d50e      	bpl.n	8009ad2 <_vfiprintf_r+0x6a>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	b01d      	add	sp, #116	; 0x74
 8009aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009abe:	4b7b      	ldr	r3, [pc, #492]	; (8009cac <_vfiprintf_r+0x244>)
 8009ac0:	429d      	cmp	r5, r3
 8009ac2:	d101      	bne.n	8009ac8 <_vfiprintf_r+0x60>
 8009ac4:	68b5      	ldr	r5, [r6, #8]
 8009ac6:	e7df      	b.n	8009a88 <_vfiprintf_r+0x20>
 8009ac8:	4b79      	ldr	r3, [pc, #484]	; (8009cb0 <_vfiprintf_r+0x248>)
 8009aca:	429d      	cmp	r5, r3
 8009acc:	bf08      	it	eq
 8009ace:	68f5      	ldreq	r5, [r6, #12]
 8009ad0:	e7da      	b.n	8009a88 <_vfiprintf_r+0x20>
 8009ad2:	89ab      	ldrh	r3, [r5, #12]
 8009ad4:	0598      	lsls	r0, r3, #22
 8009ad6:	d4ed      	bmi.n	8009ab4 <_vfiprintf_r+0x4c>
 8009ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ada:	f7ff fde6 	bl	80096aa <__retarget_lock_release_recursive>
 8009ade:	e7e9      	b.n	8009ab4 <_vfiprintf_r+0x4c>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ae4:	2320      	movs	r3, #32
 8009ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aea:	2330      	movs	r3, #48	; 0x30
 8009aec:	f04f 0901 	mov.w	r9, #1
 8009af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009af4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009cb4 <_vfiprintf_r+0x24c>
 8009af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009afc:	4623      	mov	r3, r4
 8009afe:	469a      	mov	sl, r3
 8009b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b04:	b10a      	cbz	r2, 8009b0a <_vfiprintf_r+0xa2>
 8009b06:	2a25      	cmp	r2, #37	; 0x25
 8009b08:	d1f9      	bne.n	8009afe <_vfiprintf_r+0x96>
 8009b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b0e:	d00b      	beq.n	8009b28 <_vfiprintf_r+0xc0>
 8009b10:	465b      	mov	r3, fp
 8009b12:	4622      	mov	r2, r4
 8009b14:	4629      	mov	r1, r5
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7ff ff93 	bl	8009a42 <__sfputs_r>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f000 80aa 	beq.w	8009c76 <_vfiprintf_r+0x20e>
 8009b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b24:	445a      	add	r2, fp
 8009b26:	9209      	str	r2, [sp, #36]	; 0x24
 8009b28:	f89a 3000 	ldrb.w	r3, [sl]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80a2 	beq.w	8009c76 <_vfiprintf_r+0x20e>
 8009b32:	2300      	movs	r3, #0
 8009b34:	f04f 32ff 	mov.w	r2, #4294967295
 8009b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b3c:	f10a 0a01 	add.w	sl, sl, #1
 8009b40:	9304      	str	r3, [sp, #16]
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b48:	931a      	str	r3, [sp, #104]	; 0x68
 8009b4a:	4654      	mov	r4, sl
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b52:	4858      	ldr	r0, [pc, #352]	; (8009cb4 <_vfiprintf_r+0x24c>)
 8009b54:	f000 fcbc 	bl	800a4d0 <memchr>
 8009b58:	9a04      	ldr	r2, [sp, #16]
 8009b5a:	b9d8      	cbnz	r0, 8009b94 <_vfiprintf_r+0x12c>
 8009b5c:	06d1      	lsls	r1, r2, #27
 8009b5e:	bf44      	itt	mi
 8009b60:	2320      	movmi	r3, #32
 8009b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b66:	0713      	lsls	r3, r2, #28
 8009b68:	bf44      	itt	mi
 8009b6a:	232b      	movmi	r3, #43	; 0x2b
 8009b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b2a      	cmp	r3, #42	; 0x2a
 8009b76:	d015      	beq.n	8009ba4 <_vfiprintf_r+0x13c>
 8009b78:	4654      	mov	r4, sl
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	f04f 0c0a 	mov.w	ip, #10
 8009b80:	9a07      	ldr	r2, [sp, #28]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b88:	3b30      	subs	r3, #48	; 0x30
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d94e      	bls.n	8009c2c <_vfiprintf_r+0x1c4>
 8009b8e:	b1b0      	cbz	r0, 8009bbe <_vfiprintf_r+0x156>
 8009b90:	9207      	str	r2, [sp, #28]
 8009b92:	e014      	b.n	8009bbe <_vfiprintf_r+0x156>
 8009b94:	eba0 0308 	sub.w	r3, r0, r8
 8009b98:	fa09 f303 	lsl.w	r3, r9, r3
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	46a2      	mov	sl, r4
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	e7d2      	b.n	8009b4a <_vfiprintf_r+0xe2>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	1d19      	adds	r1, r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	9103      	str	r1, [sp, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bfbb      	ittet	lt
 8009bb0:	425b      	neglt	r3, r3
 8009bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009bb6:	9307      	strge	r3, [sp, #28]
 8009bb8:	9307      	strlt	r3, [sp, #28]
 8009bba:	bfb8      	it	lt
 8009bbc:	9204      	strlt	r2, [sp, #16]
 8009bbe:	7823      	ldrb	r3, [r4, #0]
 8009bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bc2:	d10c      	bne.n	8009bde <_vfiprintf_r+0x176>
 8009bc4:	7863      	ldrb	r3, [r4, #1]
 8009bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bc8:	d135      	bne.n	8009c36 <_vfiprintf_r+0x1ce>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	3402      	adds	r4, #2
 8009bce:	1d1a      	adds	r2, r3, #4
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	9203      	str	r2, [sp, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	bfb8      	it	lt
 8009bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bdc:	9305      	str	r3, [sp, #20]
 8009bde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cc4 <_vfiprintf_r+0x25c>
 8009be2:	2203      	movs	r2, #3
 8009be4:	4650      	mov	r0, sl
 8009be6:	7821      	ldrb	r1, [r4, #0]
 8009be8:	f000 fc72 	bl	800a4d0 <memchr>
 8009bec:	b140      	cbz	r0, 8009c00 <_vfiprintf_r+0x198>
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	eba0 000a 	sub.w	r0, r0, sl
 8009bf4:	fa03 f000 	lsl.w	r0, r3, r0
 8009bf8:	9b04      	ldr	r3, [sp, #16]
 8009bfa:	3401      	adds	r4, #1
 8009bfc:	4303      	orrs	r3, r0
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c04:	2206      	movs	r2, #6
 8009c06:	482c      	ldr	r0, [pc, #176]	; (8009cb8 <_vfiprintf_r+0x250>)
 8009c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c0c:	f000 fc60 	bl	800a4d0 <memchr>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d03f      	beq.n	8009c94 <_vfiprintf_r+0x22c>
 8009c14:	4b29      	ldr	r3, [pc, #164]	; (8009cbc <_vfiprintf_r+0x254>)
 8009c16:	bb1b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x1f8>
 8009c18:	9b03      	ldr	r3, [sp, #12]
 8009c1a:	3307      	adds	r3, #7
 8009c1c:	f023 0307 	bic.w	r3, r3, #7
 8009c20:	3308      	adds	r3, #8
 8009c22:	9303      	str	r3, [sp, #12]
 8009c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c26:	443b      	add	r3, r7
 8009c28:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2a:	e767      	b.n	8009afc <_vfiprintf_r+0x94>
 8009c2c:	460c      	mov	r4, r1
 8009c2e:	2001      	movs	r0, #1
 8009c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c34:	e7a5      	b.n	8009b82 <_vfiprintf_r+0x11a>
 8009c36:	2300      	movs	r3, #0
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4620      	mov	r0, r4
 8009c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c48:	3a30      	subs	r2, #48	; 0x30
 8009c4a:	2a09      	cmp	r2, #9
 8009c4c:	d903      	bls.n	8009c56 <_vfiprintf_r+0x1ee>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0c5      	beq.n	8009bde <_vfiprintf_r+0x176>
 8009c52:	9105      	str	r1, [sp, #20]
 8009c54:	e7c3      	b.n	8009bde <_vfiprintf_r+0x176>
 8009c56:	4604      	mov	r4, r0
 8009c58:	2301      	movs	r3, #1
 8009c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c5e:	e7f0      	b.n	8009c42 <_vfiprintf_r+0x1da>
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4630      	mov	r0, r6
 8009c68:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <_vfiprintf_r+0x258>)
 8009c6a:	a904      	add	r1, sp, #16
 8009c6c:	f3af 8000 	nop.w
 8009c70:	4607      	mov	r7, r0
 8009c72:	1c78      	adds	r0, r7, #1
 8009c74:	d1d6      	bne.n	8009c24 <_vfiprintf_r+0x1bc>
 8009c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c78:	07d9      	lsls	r1, r3, #31
 8009c7a:	d405      	bmi.n	8009c88 <_vfiprintf_r+0x220>
 8009c7c:	89ab      	ldrh	r3, [r5, #12]
 8009c7e:	059a      	lsls	r2, r3, #22
 8009c80:	d402      	bmi.n	8009c88 <_vfiprintf_r+0x220>
 8009c82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c84:	f7ff fd11 	bl	80096aa <__retarget_lock_release_recursive>
 8009c88:	89ab      	ldrh	r3, [r5, #12]
 8009c8a:	065b      	lsls	r3, r3, #25
 8009c8c:	f53f af12 	bmi.w	8009ab4 <_vfiprintf_r+0x4c>
 8009c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c92:	e711      	b.n	8009ab8 <_vfiprintf_r+0x50>
 8009c94:	ab03      	add	r3, sp, #12
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	462a      	mov	r2, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <_vfiprintf_r+0x258>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	f000 f882 	bl	8009da8 <_printf_i>
 8009ca4:	e7e4      	b.n	8009c70 <_vfiprintf_r+0x208>
 8009ca6:	bf00      	nop
 8009ca8:	0800a774 	.word	0x0800a774
 8009cac:	0800a794 	.word	0x0800a794
 8009cb0:	0800a754 	.word	0x0800a754
 8009cb4:	0800a7b4 	.word	0x0800a7b4
 8009cb8:	0800a7be 	.word	0x0800a7be
 8009cbc:	00000000 	.word	0x00000000
 8009cc0:	08009a43 	.word	0x08009a43
 8009cc4:	0800a7ba 	.word	0x0800a7ba

08009cc8 <_printf_common>:
 8009cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	4616      	mov	r6, r2
 8009cce:	4699      	mov	r9, r3
 8009cd0:	688a      	ldr	r2, [r1, #8]
 8009cd2:	690b      	ldr	r3, [r1, #16]
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	bfb8      	it	lt
 8009cda:	4613      	movlt	r3, r2
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ce8:	b10a      	cbz	r2, 8009cee <_printf_common+0x26>
 8009cea:	3301      	adds	r3, #1
 8009cec:	6033      	str	r3, [r6, #0]
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	0699      	lsls	r1, r3, #26
 8009cf2:	bf42      	ittt	mi
 8009cf4:	6833      	ldrmi	r3, [r6, #0]
 8009cf6:	3302      	addmi	r3, #2
 8009cf8:	6033      	strmi	r3, [r6, #0]
 8009cfa:	6825      	ldr	r5, [r4, #0]
 8009cfc:	f015 0506 	ands.w	r5, r5, #6
 8009d00:	d106      	bne.n	8009d10 <_printf_common+0x48>
 8009d02:	f104 0a19 	add.w	sl, r4, #25
 8009d06:	68e3      	ldr	r3, [r4, #12]
 8009d08:	6832      	ldr	r2, [r6, #0]
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	42ab      	cmp	r3, r5
 8009d0e:	dc28      	bgt.n	8009d62 <_printf_common+0x9a>
 8009d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d14:	1e13      	subs	r3, r2, #0
 8009d16:	6822      	ldr	r2, [r4, #0]
 8009d18:	bf18      	it	ne
 8009d1a:	2301      	movne	r3, #1
 8009d1c:	0692      	lsls	r2, r2, #26
 8009d1e:	d42d      	bmi.n	8009d7c <_printf_common+0xb4>
 8009d20:	4649      	mov	r1, r9
 8009d22:	4638      	mov	r0, r7
 8009d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d28:	47c0      	blx	r8
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	d020      	beq.n	8009d70 <_printf_common+0xa8>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	68e5      	ldr	r5, [r4, #12]
 8009d32:	f003 0306 	and.w	r3, r3, #6
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	bf18      	it	ne
 8009d3a:	2500      	movne	r5, #0
 8009d3c:	6832      	ldr	r2, [r6, #0]
 8009d3e:	f04f 0600 	mov.w	r6, #0
 8009d42:	68a3      	ldr	r3, [r4, #8]
 8009d44:	bf08      	it	eq
 8009d46:	1aad      	subeq	r5, r5, r2
 8009d48:	6922      	ldr	r2, [r4, #16]
 8009d4a:	bf08      	it	eq
 8009d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d50:	4293      	cmp	r3, r2
 8009d52:	bfc4      	itt	gt
 8009d54:	1a9b      	subgt	r3, r3, r2
 8009d56:	18ed      	addgt	r5, r5, r3
 8009d58:	341a      	adds	r4, #26
 8009d5a:	42b5      	cmp	r5, r6
 8009d5c:	d11a      	bne.n	8009d94 <_printf_common+0xcc>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e008      	b.n	8009d74 <_printf_common+0xac>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4652      	mov	r2, sl
 8009d66:	4649      	mov	r1, r9
 8009d68:	4638      	mov	r0, r7
 8009d6a:	47c0      	blx	r8
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d103      	bne.n	8009d78 <_printf_common+0xb0>
 8009d70:	f04f 30ff 	mov.w	r0, #4294967295
 8009d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d78:	3501      	adds	r5, #1
 8009d7a:	e7c4      	b.n	8009d06 <_printf_common+0x3e>
 8009d7c:	2030      	movs	r0, #48	; 0x30
 8009d7e:	18e1      	adds	r1, r4, r3
 8009d80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d8a:	4422      	add	r2, r4
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d92:	e7c5      	b.n	8009d20 <_printf_common+0x58>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4622      	mov	r2, r4
 8009d98:	4649      	mov	r1, r9
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	47c0      	blx	r8
 8009d9e:	3001      	adds	r0, #1
 8009da0:	d0e6      	beq.n	8009d70 <_printf_common+0xa8>
 8009da2:	3601      	adds	r6, #1
 8009da4:	e7d9      	b.n	8009d5a <_printf_common+0x92>
	...

08009da8 <_printf_i>:
 8009da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dac:	460c      	mov	r4, r1
 8009dae:	7e27      	ldrb	r7, [r4, #24]
 8009db0:	4691      	mov	r9, r2
 8009db2:	2f78      	cmp	r7, #120	; 0x78
 8009db4:	4680      	mov	r8, r0
 8009db6:	469a      	mov	sl, r3
 8009db8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dbe:	d807      	bhi.n	8009dd0 <_printf_i+0x28>
 8009dc0:	2f62      	cmp	r7, #98	; 0x62
 8009dc2:	d80a      	bhi.n	8009dda <_printf_i+0x32>
 8009dc4:	2f00      	cmp	r7, #0
 8009dc6:	f000 80d9 	beq.w	8009f7c <_printf_i+0x1d4>
 8009dca:	2f58      	cmp	r7, #88	; 0x58
 8009dcc:	f000 80a4 	beq.w	8009f18 <_printf_i+0x170>
 8009dd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dd8:	e03a      	b.n	8009e50 <_printf_i+0xa8>
 8009dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dde:	2b15      	cmp	r3, #21
 8009de0:	d8f6      	bhi.n	8009dd0 <_printf_i+0x28>
 8009de2:	a001      	add	r0, pc, #4	; (adr r0, 8009de8 <_printf_i+0x40>)
 8009de4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009de8:	08009e41 	.word	0x08009e41
 8009dec:	08009e55 	.word	0x08009e55
 8009df0:	08009dd1 	.word	0x08009dd1
 8009df4:	08009dd1 	.word	0x08009dd1
 8009df8:	08009dd1 	.word	0x08009dd1
 8009dfc:	08009dd1 	.word	0x08009dd1
 8009e00:	08009e55 	.word	0x08009e55
 8009e04:	08009dd1 	.word	0x08009dd1
 8009e08:	08009dd1 	.word	0x08009dd1
 8009e0c:	08009dd1 	.word	0x08009dd1
 8009e10:	08009dd1 	.word	0x08009dd1
 8009e14:	08009f63 	.word	0x08009f63
 8009e18:	08009e85 	.word	0x08009e85
 8009e1c:	08009f45 	.word	0x08009f45
 8009e20:	08009dd1 	.word	0x08009dd1
 8009e24:	08009dd1 	.word	0x08009dd1
 8009e28:	08009f85 	.word	0x08009f85
 8009e2c:	08009dd1 	.word	0x08009dd1
 8009e30:	08009e85 	.word	0x08009e85
 8009e34:	08009dd1 	.word	0x08009dd1
 8009e38:	08009dd1 	.word	0x08009dd1
 8009e3c:	08009f4d 	.word	0x08009f4d
 8009e40:	680b      	ldr	r3, [r1, #0]
 8009e42:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	600a      	str	r2, [r1, #0]
 8009e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e50:	2301      	movs	r3, #1
 8009e52:	e0a4      	b.n	8009f9e <_printf_i+0x1f6>
 8009e54:	6825      	ldr	r5, [r4, #0]
 8009e56:	6808      	ldr	r0, [r1, #0]
 8009e58:	062e      	lsls	r6, r5, #24
 8009e5a:	f100 0304 	add.w	r3, r0, #4
 8009e5e:	d50a      	bpl.n	8009e76 <_printf_i+0xce>
 8009e60:	6805      	ldr	r5, [r0, #0]
 8009e62:	600b      	str	r3, [r1, #0]
 8009e64:	2d00      	cmp	r5, #0
 8009e66:	da03      	bge.n	8009e70 <_printf_i+0xc8>
 8009e68:	232d      	movs	r3, #45	; 0x2d
 8009e6a:	426d      	negs	r5, r5
 8009e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e70:	230a      	movs	r3, #10
 8009e72:	485e      	ldr	r0, [pc, #376]	; (8009fec <_printf_i+0x244>)
 8009e74:	e019      	b.n	8009eaa <_printf_i+0x102>
 8009e76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e7a:	6805      	ldr	r5, [r0, #0]
 8009e7c:	600b      	str	r3, [r1, #0]
 8009e7e:	bf18      	it	ne
 8009e80:	b22d      	sxthne	r5, r5
 8009e82:	e7ef      	b.n	8009e64 <_printf_i+0xbc>
 8009e84:	680b      	ldr	r3, [r1, #0]
 8009e86:	6825      	ldr	r5, [r4, #0]
 8009e88:	1d18      	adds	r0, r3, #4
 8009e8a:	6008      	str	r0, [r1, #0]
 8009e8c:	0628      	lsls	r0, r5, #24
 8009e8e:	d501      	bpl.n	8009e94 <_printf_i+0xec>
 8009e90:	681d      	ldr	r5, [r3, #0]
 8009e92:	e002      	b.n	8009e9a <_printf_i+0xf2>
 8009e94:	0669      	lsls	r1, r5, #25
 8009e96:	d5fb      	bpl.n	8009e90 <_printf_i+0xe8>
 8009e98:	881d      	ldrh	r5, [r3, #0]
 8009e9a:	2f6f      	cmp	r7, #111	; 0x6f
 8009e9c:	bf0c      	ite	eq
 8009e9e:	2308      	moveq	r3, #8
 8009ea0:	230a      	movne	r3, #10
 8009ea2:	4852      	ldr	r0, [pc, #328]	; (8009fec <_printf_i+0x244>)
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009eaa:	6866      	ldr	r6, [r4, #4]
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	bfa8      	it	ge
 8009eb0:	6821      	ldrge	r1, [r4, #0]
 8009eb2:	60a6      	str	r6, [r4, #8]
 8009eb4:	bfa4      	itt	ge
 8009eb6:	f021 0104 	bicge.w	r1, r1, #4
 8009eba:	6021      	strge	r1, [r4, #0]
 8009ebc:	b90d      	cbnz	r5, 8009ec2 <_printf_i+0x11a>
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d04d      	beq.n	8009f5e <_printf_i+0x1b6>
 8009ec2:	4616      	mov	r6, r2
 8009ec4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ec8:	fb03 5711 	mls	r7, r3, r1, r5
 8009ecc:	5dc7      	ldrb	r7, [r0, r7]
 8009ece:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ed2:	462f      	mov	r7, r5
 8009ed4:	42bb      	cmp	r3, r7
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	d9f4      	bls.n	8009ec4 <_printf_i+0x11c>
 8009eda:	2b08      	cmp	r3, #8
 8009edc:	d10b      	bne.n	8009ef6 <_printf_i+0x14e>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	07df      	lsls	r7, r3, #31
 8009ee2:	d508      	bpl.n	8009ef6 <_printf_i+0x14e>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	6861      	ldr	r1, [r4, #4]
 8009ee8:	4299      	cmp	r1, r3
 8009eea:	bfde      	ittt	le
 8009eec:	2330      	movle	r3, #48	; 0x30
 8009eee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ef2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ef6:	1b92      	subs	r2, r2, r6
 8009ef8:	6122      	str	r2, [r4, #16]
 8009efa:	464b      	mov	r3, r9
 8009efc:	4621      	mov	r1, r4
 8009efe:	4640      	mov	r0, r8
 8009f00:	f8cd a000 	str.w	sl, [sp]
 8009f04:	aa03      	add	r2, sp, #12
 8009f06:	f7ff fedf 	bl	8009cc8 <_printf_common>
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d14c      	bne.n	8009fa8 <_printf_i+0x200>
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	b004      	add	sp, #16
 8009f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f18:	4834      	ldr	r0, [pc, #208]	; (8009fec <_printf_i+0x244>)
 8009f1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f1e:	680e      	ldr	r6, [r1, #0]
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f26:	061f      	lsls	r7, r3, #24
 8009f28:	600e      	str	r6, [r1, #0]
 8009f2a:	d514      	bpl.n	8009f56 <_printf_i+0x1ae>
 8009f2c:	07d9      	lsls	r1, r3, #31
 8009f2e:	bf44      	itt	mi
 8009f30:	f043 0320 	orrmi.w	r3, r3, #32
 8009f34:	6023      	strmi	r3, [r4, #0]
 8009f36:	b91d      	cbnz	r5, 8009f40 <_printf_i+0x198>
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	f023 0320 	bic.w	r3, r3, #32
 8009f3e:	6023      	str	r3, [r4, #0]
 8009f40:	2310      	movs	r3, #16
 8009f42:	e7af      	b.n	8009ea4 <_printf_i+0xfc>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	f043 0320 	orr.w	r3, r3, #32
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	2378      	movs	r3, #120	; 0x78
 8009f4e:	4828      	ldr	r0, [pc, #160]	; (8009ff0 <_printf_i+0x248>)
 8009f50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f54:	e7e3      	b.n	8009f1e <_printf_i+0x176>
 8009f56:	065e      	lsls	r6, r3, #25
 8009f58:	bf48      	it	mi
 8009f5a:	b2ad      	uxthmi	r5, r5
 8009f5c:	e7e6      	b.n	8009f2c <_printf_i+0x184>
 8009f5e:	4616      	mov	r6, r2
 8009f60:	e7bb      	b.n	8009eda <_printf_i+0x132>
 8009f62:	680b      	ldr	r3, [r1, #0]
 8009f64:	6826      	ldr	r6, [r4, #0]
 8009f66:	1d1d      	adds	r5, r3, #4
 8009f68:	6960      	ldr	r0, [r4, #20]
 8009f6a:	600d      	str	r5, [r1, #0]
 8009f6c:	0635      	lsls	r5, r6, #24
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	d501      	bpl.n	8009f76 <_printf_i+0x1ce>
 8009f72:	6018      	str	r0, [r3, #0]
 8009f74:	e002      	b.n	8009f7c <_printf_i+0x1d4>
 8009f76:	0671      	lsls	r1, r6, #25
 8009f78:	d5fb      	bpl.n	8009f72 <_printf_i+0x1ca>
 8009f7a:	8018      	strh	r0, [r3, #0]
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4616      	mov	r6, r2
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	e7ba      	b.n	8009efa <_printf_i+0x152>
 8009f84:	680b      	ldr	r3, [r1, #0]
 8009f86:	1d1a      	adds	r2, r3, #4
 8009f88:	600a      	str	r2, [r1, #0]
 8009f8a:	681e      	ldr	r6, [r3, #0]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	6862      	ldr	r2, [r4, #4]
 8009f92:	f000 fa9d 	bl	800a4d0 <memchr>
 8009f96:	b108      	cbz	r0, 8009f9c <_printf_i+0x1f4>
 8009f98:	1b80      	subs	r0, r0, r6
 8009f9a:	6060      	str	r0, [r4, #4]
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa6:	e7a8      	b.n	8009efa <_printf_i+0x152>
 8009fa8:	4632      	mov	r2, r6
 8009faa:	4649      	mov	r1, r9
 8009fac:	4640      	mov	r0, r8
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	47d0      	blx	sl
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	d0ab      	beq.n	8009f0e <_printf_i+0x166>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	079b      	lsls	r3, r3, #30
 8009fba:	d413      	bmi.n	8009fe4 <_printf_i+0x23c>
 8009fbc:	68e0      	ldr	r0, [r4, #12]
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	4298      	cmp	r0, r3
 8009fc2:	bfb8      	it	lt
 8009fc4:	4618      	movlt	r0, r3
 8009fc6:	e7a4      	b.n	8009f12 <_printf_i+0x16a>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	4632      	mov	r2, r6
 8009fcc:	4649      	mov	r1, r9
 8009fce:	4640      	mov	r0, r8
 8009fd0:	47d0      	blx	sl
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d09b      	beq.n	8009f0e <_printf_i+0x166>
 8009fd6:	3501      	adds	r5, #1
 8009fd8:	68e3      	ldr	r3, [r4, #12]
 8009fda:	9903      	ldr	r1, [sp, #12]
 8009fdc:	1a5b      	subs	r3, r3, r1
 8009fde:	42ab      	cmp	r3, r5
 8009fe0:	dcf2      	bgt.n	8009fc8 <_printf_i+0x220>
 8009fe2:	e7eb      	b.n	8009fbc <_printf_i+0x214>
 8009fe4:	2500      	movs	r5, #0
 8009fe6:	f104 0619 	add.w	r6, r4, #25
 8009fea:	e7f5      	b.n	8009fd8 <_printf_i+0x230>
 8009fec:	0800a7c5 	.word	0x0800a7c5
 8009ff0:	0800a7d6 	.word	0x0800a7d6

08009ff4 <_sbrk_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4d05      	ldr	r5, [pc, #20]	; (800a010 <_sbrk_r+0x1c>)
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	f7f7 f834 	bl	800106c <_sbrk>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_sbrk_r+0x1a>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_sbrk_r+0x1a>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	200015c8 	.word	0x200015c8

0800a014 <__sread>:
 800a014:	b510      	push	{r4, lr}
 800a016:	460c      	mov	r4, r1
 800a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a01c:	f000 fafe 	bl	800a61c <_read_r>
 800a020:	2800      	cmp	r0, #0
 800a022:	bfab      	itete	ge
 800a024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a026:	89a3      	ldrhlt	r3, [r4, #12]
 800a028:	181b      	addge	r3, r3, r0
 800a02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a02e:	bfac      	ite	ge
 800a030:	6563      	strge	r3, [r4, #84]	; 0x54
 800a032:	81a3      	strhlt	r3, [r4, #12]
 800a034:	bd10      	pop	{r4, pc}

0800a036 <__swrite>:
 800a036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a03a:	461f      	mov	r7, r3
 800a03c:	898b      	ldrh	r3, [r1, #12]
 800a03e:	4605      	mov	r5, r0
 800a040:	05db      	lsls	r3, r3, #23
 800a042:	460c      	mov	r4, r1
 800a044:	4616      	mov	r6, r2
 800a046:	d505      	bpl.n	800a054 <__swrite+0x1e>
 800a048:	2302      	movs	r3, #2
 800a04a:	2200      	movs	r2, #0
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	f000 f9c8 	bl	800a3e4 <_lseek_r>
 800a054:	89a3      	ldrh	r3, [r4, #12]
 800a056:	4632      	mov	r2, r6
 800a058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	4628      	mov	r0, r5
 800a060:	463b      	mov	r3, r7
 800a062:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	f000 b869 	b.w	800a140 <_write_r>

0800a06e <__sseek>:
 800a06e:	b510      	push	{r4, lr}
 800a070:	460c      	mov	r4, r1
 800a072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a076:	f000 f9b5 	bl	800a3e4 <_lseek_r>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	bf15      	itete	ne
 800a080:	6560      	strne	r0, [r4, #84]	; 0x54
 800a082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a08a:	81a3      	strheq	r3, [r4, #12]
 800a08c:	bf18      	it	ne
 800a08e:	81a3      	strhne	r3, [r4, #12]
 800a090:	bd10      	pop	{r4, pc}

0800a092 <__sclose>:
 800a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a096:	f000 b8d3 	b.w	800a240 <_close_r>
	...

0800a09c <__swbuf_r>:
 800a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09e:	460e      	mov	r6, r1
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	b118      	cbz	r0, 800a0ae <__swbuf_r+0x12>
 800a0a6:	6983      	ldr	r3, [r0, #24]
 800a0a8:	b90b      	cbnz	r3, 800a0ae <__swbuf_r+0x12>
 800a0aa:	f7ff fa5f 	bl	800956c <__sinit>
 800a0ae:	4b21      	ldr	r3, [pc, #132]	; (800a134 <__swbuf_r+0x98>)
 800a0b0:	429c      	cmp	r4, r3
 800a0b2:	d12b      	bne.n	800a10c <__swbuf_r+0x70>
 800a0b4:	686c      	ldr	r4, [r5, #4]
 800a0b6:	69a3      	ldr	r3, [r4, #24]
 800a0b8:	60a3      	str	r3, [r4, #8]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	071a      	lsls	r2, r3, #28
 800a0be:	d52f      	bpl.n	800a120 <__swbuf_r+0x84>
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	b36b      	cbz	r3, 800a120 <__swbuf_r+0x84>
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	6820      	ldr	r0, [r4, #0]
 800a0c8:	b2f6      	uxtb	r6, r6
 800a0ca:	1ac0      	subs	r0, r0, r3
 800a0cc:	6963      	ldr	r3, [r4, #20]
 800a0ce:	4637      	mov	r7, r6
 800a0d0:	4283      	cmp	r3, r0
 800a0d2:	dc04      	bgt.n	800a0de <__swbuf_r+0x42>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 f948 	bl	800a36c <_fflush_r>
 800a0dc:	bb30      	cbnz	r0, 800a12c <__swbuf_r+0x90>
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	60a3      	str	r3, [r4, #8]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	6022      	str	r2, [r4, #0]
 800a0ec:	701e      	strb	r6, [r3, #0]
 800a0ee:	6963      	ldr	r3, [r4, #20]
 800a0f0:	4283      	cmp	r3, r0
 800a0f2:	d004      	beq.n	800a0fe <__swbuf_r+0x62>
 800a0f4:	89a3      	ldrh	r3, [r4, #12]
 800a0f6:	07db      	lsls	r3, r3, #31
 800a0f8:	d506      	bpl.n	800a108 <__swbuf_r+0x6c>
 800a0fa:	2e0a      	cmp	r6, #10
 800a0fc:	d104      	bne.n	800a108 <__swbuf_r+0x6c>
 800a0fe:	4621      	mov	r1, r4
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f933 	bl	800a36c <_fflush_r>
 800a106:	b988      	cbnz	r0, 800a12c <__swbuf_r+0x90>
 800a108:	4638      	mov	r0, r7
 800a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10c:	4b0a      	ldr	r3, [pc, #40]	; (800a138 <__swbuf_r+0x9c>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	d101      	bne.n	800a116 <__swbuf_r+0x7a>
 800a112:	68ac      	ldr	r4, [r5, #8]
 800a114:	e7cf      	b.n	800a0b6 <__swbuf_r+0x1a>
 800a116:	4b09      	ldr	r3, [pc, #36]	; (800a13c <__swbuf_r+0xa0>)
 800a118:	429c      	cmp	r4, r3
 800a11a:	bf08      	it	eq
 800a11c:	68ec      	ldreq	r4, [r5, #12]
 800a11e:	e7ca      	b.n	800a0b6 <__swbuf_r+0x1a>
 800a120:	4621      	mov	r1, r4
 800a122:	4628      	mov	r0, r5
 800a124:	f000 f81e 	bl	800a164 <__swsetup_r>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0cb      	beq.n	800a0c4 <__swbuf_r+0x28>
 800a12c:	f04f 37ff 	mov.w	r7, #4294967295
 800a130:	e7ea      	b.n	800a108 <__swbuf_r+0x6c>
 800a132:	bf00      	nop
 800a134:	0800a774 	.word	0x0800a774
 800a138:	0800a794 	.word	0x0800a794
 800a13c:	0800a754 	.word	0x0800a754

0800a140 <_write_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4604      	mov	r4, r0
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	2200      	movs	r2, #0
 800a14a:	4d05      	ldr	r5, [pc, #20]	; (800a160 <_write_r+0x20>)
 800a14c:	602a      	str	r2, [r5, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	f7f6 f8e8 	bl	8000324 <_write>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_write_r+0x1e>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_write_r+0x1e>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	200015c8 	.word	0x200015c8

0800a164 <__swsetup_r>:
 800a164:	4b32      	ldr	r3, [pc, #200]	; (800a230 <__swsetup_r+0xcc>)
 800a166:	b570      	push	{r4, r5, r6, lr}
 800a168:	681d      	ldr	r5, [r3, #0]
 800a16a:	4606      	mov	r6, r0
 800a16c:	460c      	mov	r4, r1
 800a16e:	b125      	cbz	r5, 800a17a <__swsetup_r+0x16>
 800a170:	69ab      	ldr	r3, [r5, #24]
 800a172:	b913      	cbnz	r3, 800a17a <__swsetup_r+0x16>
 800a174:	4628      	mov	r0, r5
 800a176:	f7ff f9f9 	bl	800956c <__sinit>
 800a17a:	4b2e      	ldr	r3, [pc, #184]	; (800a234 <__swsetup_r+0xd0>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	d10f      	bne.n	800a1a0 <__swsetup_r+0x3c>
 800a180:	686c      	ldr	r4, [r5, #4]
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a188:	0719      	lsls	r1, r3, #28
 800a18a:	d42c      	bmi.n	800a1e6 <__swsetup_r+0x82>
 800a18c:	06dd      	lsls	r5, r3, #27
 800a18e:	d411      	bmi.n	800a1b4 <__swsetup_r+0x50>
 800a190:	2309      	movs	r3, #9
 800a192:	6033      	str	r3, [r6, #0]
 800a194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a198:	f04f 30ff 	mov.w	r0, #4294967295
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	e03e      	b.n	800a21e <__swsetup_r+0xba>
 800a1a0:	4b25      	ldr	r3, [pc, #148]	; (800a238 <__swsetup_r+0xd4>)
 800a1a2:	429c      	cmp	r4, r3
 800a1a4:	d101      	bne.n	800a1aa <__swsetup_r+0x46>
 800a1a6:	68ac      	ldr	r4, [r5, #8]
 800a1a8:	e7eb      	b.n	800a182 <__swsetup_r+0x1e>
 800a1aa:	4b24      	ldr	r3, [pc, #144]	; (800a23c <__swsetup_r+0xd8>)
 800a1ac:	429c      	cmp	r4, r3
 800a1ae:	bf08      	it	eq
 800a1b0:	68ec      	ldreq	r4, [r5, #12]
 800a1b2:	e7e6      	b.n	800a182 <__swsetup_r+0x1e>
 800a1b4:	0758      	lsls	r0, r3, #29
 800a1b6:	d512      	bpl.n	800a1de <__swsetup_r+0x7a>
 800a1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ba:	b141      	cbz	r1, 800a1ce <__swsetup_r+0x6a>
 800a1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <__swsetup_r+0x66>
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 f9b7 	bl	800a538 <_free_r>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a1ce:	89a3      	ldrh	r3, [r4, #12]
 800a1d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6063      	str	r3, [r4, #4]
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f043 0308 	orr.w	r3, r3, #8
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	b94b      	cbnz	r3, 800a1fe <__swsetup_r+0x9a>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f4:	d003      	beq.n	800a1fe <__swsetup_r+0x9a>
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f929 	bl	800a450 <__smakebuf_r>
 800a1fe:	89a0      	ldrh	r0, [r4, #12]
 800a200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a204:	f010 0301 	ands.w	r3, r0, #1
 800a208:	d00a      	beq.n	800a220 <__swsetup_r+0xbc>
 800a20a:	2300      	movs	r3, #0
 800a20c:	60a3      	str	r3, [r4, #8]
 800a20e:	6963      	ldr	r3, [r4, #20]
 800a210:	425b      	negs	r3, r3
 800a212:	61a3      	str	r3, [r4, #24]
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	b943      	cbnz	r3, 800a22a <__swsetup_r+0xc6>
 800a218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a21c:	d1ba      	bne.n	800a194 <__swsetup_r+0x30>
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	0781      	lsls	r1, r0, #30
 800a222:	bf58      	it	pl
 800a224:	6963      	ldrpl	r3, [r4, #20]
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	e7f4      	b.n	800a214 <__swsetup_r+0xb0>
 800a22a:	2000      	movs	r0, #0
 800a22c:	e7f7      	b.n	800a21e <__swsetup_r+0xba>
 800a22e:	bf00      	nop
 800a230:	200001d0 	.word	0x200001d0
 800a234:	0800a774 	.word	0x0800a774
 800a238:	0800a794 	.word	0x0800a794
 800a23c:	0800a754 	.word	0x0800a754

0800a240 <_close_r>:
 800a240:	b538      	push	{r3, r4, r5, lr}
 800a242:	2300      	movs	r3, #0
 800a244:	4d05      	ldr	r5, [pc, #20]	; (800a25c <_close_r+0x1c>)
 800a246:	4604      	mov	r4, r0
 800a248:	4608      	mov	r0, r1
 800a24a:	602b      	str	r3, [r5, #0]
 800a24c:	f7f6 fedd 	bl	800100a <_close>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_close_r+0x1a>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_close_r+0x1a>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	200015c8 	.word	0x200015c8

0800a260 <__sflush_r>:
 800a260:	898a      	ldrh	r2, [r1, #12]
 800a262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a266:	4605      	mov	r5, r0
 800a268:	0710      	lsls	r0, r2, #28
 800a26a:	460c      	mov	r4, r1
 800a26c:	d458      	bmi.n	800a320 <__sflush_r+0xc0>
 800a26e:	684b      	ldr	r3, [r1, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	dc05      	bgt.n	800a280 <__sflush_r+0x20>
 800a274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a276:	2b00      	cmp	r3, #0
 800a278:	dc02      	bgt.n	800a280 <__sflush_r+0x20>
 800a27a:	2000      	movs	r0, #0
 800a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a282:	2e00      	cmp	r6, #0
 800a284:	d0f9      	beq.n	800a27a <__sflush_r+0x1a>
 800a286:	2300      	movs	r3, #0
 800a288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a28c:	682f      	ldr	r7, [r5, #0]
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	d032      	beq.n	800a2f8 <__sflush_r+0x98>
 800a292:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	075a      	lsls	r2, r3, #29
 800a298:	d505      	bpl.n	800a2a6 <__sflush_r+0x46>
 800a29a:	6863      	ldr	r3, [r4, #4]
 800a29c:	1ac0      	subs	r0, r0, r3
 800a29e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2a0:	b10b      	cbz	r3, 800a2a6 <__sflush_r+0x46>
 800a2a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2a4:	1ac0      	subs	r0, r0, r3
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	6a21      	ldr	r1, [r4, #32]
 800a2b0:	47b0      	blx	r6
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	d106      	bne.n	800a2c6 <__sflush_r+0x66>
 800a2b8:	6829      	ldr	r1, [r5, #0]
 800a2ba:	291d      	cmp	r1, #29
 800a2bc:	d82c      	bhi.n	800a318 <__sflush_r+0xb8>
 800a2be:	4a2a      	ldr	r2, [pc, #168]	; (800a368 <__sflush_r+0x108>)
 800a2c0:	40ca      	lsrs	r2, r1
 800a2c2:	07d6      	lsls	r6, r2, #31
 800a2c4:	d528      	bpl.n	800a318 <__sflush_r+0xb8>
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	6062      	str	r2, [r4, #4]
 800a2ca:	6922      	ldr	r2, [r4, #16]
 800a2cc:	04d9      	lsls	r1, r3, #19
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	d504      	bpl.n	800a2dc <__sflush_r+0x7c>
 800a2d2:	1c42      	adds	r2, r0, #1
 800a2d4:	d101      	bne.n	800a2da <__sflush_r+0x7a>
 800a2d6:	682b      	ldr	r3, [r5, #0]
 800a2d8:	b903      	cbnz	r3, 800a2dc <__sflush_r+0x7c>
 800a2da:	6560      	str	r0, [r4, #84]	; 0x54
 800a2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2de:	602f      	str	r7, [r5, #0]
 800a2e0:	2900      	cmp	r1, #0
 800a2e2:	d0ca      	beq.n	800a27a <__sflush_r+0x1a>
 800a2e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	d002      	beq.n	800a2f2 <__sflush_r+0x92>
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f000 f923 	bl	800a538 <_free_r>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a2f6:	e7c1      	b.n	800a27c <__sflush_r+0x1c>
 800a2f8:	6a21      	ldr	r1, [r4, #32]
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	47b0      	blx	r6
 800a300:	1c41      	adds	r1, r0, #1
 800a302:	d1c7      	bne.n	800a294 <__sflush_r+0x34>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d0c4      	beq.n	800a294 <__sflush_r+0x34>
 800a30a:	2b1d      	cmp	r3, #29
 800a30c:	d001      	beq.n	800a312 <__sflush_r+0xb2>
 800a30e:	2b16      	cmp	r3, #22
 800a310:	d101      	bne.n	800a316 <__sflush_r+0xb6>
 800a312:	602f      	str	r7, [r5, #0]
 800a314:	e7b1      	b.n	800a27a <__sflush_r+0x1a>
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a31c:	81a3      	strh	r3, [r4, #12]
 800a31e:	e7ad      	b.n	800a27c <__sflush_r+0x1c>
 800a320:	690f      	ldr	r7, [r1, #16]
 800a322:	2f00      	cmp	r7, #0
 800a324:	d0a9      	beq.n	800a27a <__sflush_r+0x1a>
 800a326:	0793      	lsls	r3, r2, #30
 800a328:	bf18      	it	ne
 800a32a:	2300      	movne	r3, #0
 800a32c:	680e      	ldr	r6, [r1, #0]
 800a32e:	bf08      	it	eq
 800a330:	694b      	ldreq	r3, [r1, #20]
 800a332:	eba6 0807 	sub.w	r8, r6, r7
 800a336:	600f      	str	r7, [r1, #0]
 800a338:	608b      	str	r3, [r1, #8]
 800a33a:	f1b8 0f00 	cmp.w	r8, #0
 800a33e:	dd9c      	ble.n	800a27a <__sflush_r+0x1a>
 800a340:	4643      	mov	r3, r8
 800a342:	463a      	mov	r2, r7
 800a344:	4628      	mov	r0, r5
 800a346:	6a21      	ldr	r1, [r4, #32]
 800a348:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a34a:	47b0      	blx	r6
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dc06      	bgt.n	800a35e <__sflush_r+0xfe>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f04f 30ff 	mov.w	r0, #4294967295
 800a356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	e78e      	b.n	800a27c <__sflush_r+0x1c>
 800a35e:	4407      	add	r7, r0
 800a360:	eba8 0800 	sub.w	r8, r8, r0
 800a364:	e7e9      	b.n	800a33a <__sflush_r+0xda>
 800a366:	bf00      	nop
 800a368:	20400001 	.word	0x20400001

0800a36c <_fflush_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	690b      	ldr	r3, [r1, #16]
 800a370:	4605      	mov	r5, r0
 800a372:	460c      	mov	r4, r1
 800a374:	b913      	cbnz	r3, 800a37c <_fflush_r+0x10>
 800a376:	2500      	movs	r5, #0
 800a378:	4628      	mov	r0, r5
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	b118      	cbz	r0, 800a386 <_fflush_r+0x1a>
 800a37e:	6983      	ldr	r3, [r0, #24]
 800a380:	b90b      	cbnz	r3, 800a386 <_fflush_r+0x1a>
 800a382:	f7ff f8f3 	bl	800956c <__sinit>
 800a386:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <_fflush_r+0x6c>)
 800a388:	429c      	cmp	r4, r3
 800a38a:	d11b      	bne.n	800a3c4 <_fflush_r+0x58>
 800a38c:	686c      	ldr	r4, [r5, #4]
 800a38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0ef      	beq.n	800a376 <_fflush_r+0xa>
 800a396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a398:	07d0      	lsls	r0, r2, #31
 800a39a:	d404      	bmi.n	800a3a6 <_fflush_r+0x3a>
 800a39c:	0599      	lsls	r1, r3, #22
 800a39e:	d402      	bmi.n	800a3a6 <_fflush_r+0x3a>
 800a3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a2:	f7ff f981 	bl	80096a8 <__retarget_lock_acquire_recursive>
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	f7ff ff59 	bl	800a260 <__sflush_r>
 800a3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	07da      	lsls	r2, r3, #31
 800a3b4:	d4e0      	bmi.n	800a378 <_fflush_r+0xc>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	059b      	lsls	r3, r3, #22
 800a3ba:	d4dd      	bmi.n	800a378 <_fflush_r+0xc>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3be:	f7ff f974 	bl	80096aa <__retarget_lock_release_recursive>
 800a3c2:	e7d9      	b.n	800a378 <_fflush_r+0xc>
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <_fflush_r+0x70>)
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d101      	bne.n	800a3ce <_fflush_r+0x62>
 800a3ca:	68ac      	ldr	r4, [r5, #8]
 800a3cc:	e7df      	b.n	800a38e <_fflush_r+0x22>
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <_fflush_r+0x74>)
 800a3d0:	429c      	cmp	r4, r3
 800a3d2:	bf08      	it	eq
 800a3d4:	68ec      	ldreq	r4, [r5, #12]
 800a3d6:	e7da      	b.n	800a38e <_fflush_r+0x22>
 800a3d8:	0800a774 	.word	0x0800a774
 800a3dc:	0800a794 	.word	0x0800a794
 800a3e0:	0800a754 	.word	0x0800a754

0800a3e4 <_lseek_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	4d05      	ldr	r5, [pc, #20]	; (800a404 <_lseek_r+0x20>)
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f7f6 fe2d 	bl	8001052 <_lseek>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_lseek_r+0x1e>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_lseek_r+0x1e>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200015c8 	.word	0x200015c8

0800a408 <__swhatbuf_r>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	460e      	mov	r6, r1
 800a40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a410:	4614      	mov	r4, r2
 800a412:	2900      	cmp	r1, #0
 800a414:	461d      	mov	r5, r3
 800a416:	b096      	sub	sp, #88	; 0x58
 800a418:	da07      	bge.n	800a42a <__swhatbuf_r+0x22>
 800a41a:	2300      	movs	r3, #0
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	89b3      	ldrh	r3, [r6, #12]
 800a420:	061a      	lsls	r2, r3, #24
 800a422:	d410      	bmi.n	800a446 <__swhatbuf_r+0x3e>
 800a424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a428:	e00e      	b.n	800a448 <__swhatbuf_r+0x40>
 800a42a:	466a      	mov	r2, sp
 800a42c:	f000 f908 	bl	800a640 <_fstat_r>
 800a430:	2800      	cmp	r0, #0
 800a432:	dbf2      	blt.n	800a41a <__swhatbuf_r+0x12>
 800a434:	9a01      	ldr	r2, [sp, #4]
 800a436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a43a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a43e:	425a      	negs	r2, r3
 800a440:	415a      	adcs	r2, r3
 800a442:	602a      	str	r2, [r5, #0]
 800a444:	e7ee      	b.n	800a424 <__swhatbuf_r+0x1c>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	2000      	movs	r0, #0
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	b016      	add	sp, #88	; 0x58
 800a44e:	bd70      	pop	{r4, r5, r6, pc}

0800a450 <__smakebuf_r>:
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a454:	079d      	lsls	r5, r3, #30
 800a456:	4606      	mov	r6, r0
 800a458:	460c      	mov	r4, r1
 800a45a:	d507      	bpl.n	800a46c <__smakebuf_r+0x1c>
 800a45c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	2301      	movs	r3, #1
 800a466:	6163      	str	r3, [r4, #20]
 800a468:	b002      	add	sp, #8
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	466a      	mov	r2, sp
 800a46e:	ab01      	add	r3, sp, #4
 800a470:	f7ff ffca 	bl	800a408 <__swhatbuf_r>
 800a474:	9900      	ldr	r1, [sp, #0]
 800a476:	4605      	mov	r5, r0
 800a478:	4630      	mov	r0, r6
 800a47a:	f7ff f917 	bl	80096ac <_malloc_r>
 800a47e:	b948      	cbnz	r0, 800a494 <__smakebuf_r+0x44>
 800a480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d4ef      	bmi.n	800a468 <__smakebuf_r+0x18>
 800a488:	f023 0303 	bic.w	r3, r3, #3
 800a48c:	f043 0302 	orr.w	r3, r3, #2
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	e7e3      	b.n	800a45c <__smakebuf_r+0xc>
 800a494:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <__smakebuf_r+0x7c>)
 800a496:	62b3      	str	r3, [r6, #40]	; 0x28
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	6020      	str	r0, [r4, #0]
 800a49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	9b00      	ldr	r3, [sp, #0]
 800a4a4:	6120      	str	r0, [r4, #16]
 800a4a6:	6163      	str	r3, [r4, #20]
 800a4a8:	9b01      	ldr	r3, [sp, #4]
 800a4aa:	b15b      	cbz	r3, 800a4c4 <__smakebuf_r+0x74>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4b2:	f000 f8d7 	bl	800a664 <_isatty_r>
 800a4b6:	b128      	cbz	r0, 800a4c4 <__smakebuf_r+0x74>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f023 0303 	bic.w	r3, r3, #3
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	81a3      	strh	r3, [r4, #12]
 800a4c4:	89a0      	ldrh	r0, [r4, #12]
 800a4c6:	4305      	orrs	r5, r0
 800a4c8:	81a5      	strh	r5, [r4, #12]
 800a4ca:	e7cd      	b.n	800a468 <__smakebuf_r+0x18>
 800a4cc:	08009505 	.word	0x08009505

0800a4d0 <memchr>:
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	b2c9      	uxtb	r1, r1
 800a4d6:	4402      	add	r2, r0
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	d101      	bne.n	800a4e2 <memchr+0x12>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e003      	b.n	800a4ea <memchr+0x1a>
 800a4e2:	7804      	ldrb	r4, [r0, #0]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	428c      	cmp	r4, r1
 800a4e8:	d1f6      	bne.n	800a4d8 <memchr+0x8>
 800a4ea:	bd10      	pop	{r4, pc}

0800a4ec <memmove>:
 800a4ec:	4288      	cmp	r0, r1
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	eb01 0402 	add.w	r4, r1, r2
 800a4f4:	d902      	bls.n	800a4fc <memmove+0x10>
 800a4f6:	4284      	cmp	r4, r0
 800a4f8:	4623      	mov	r3, r4
 800a4fa:	d807      	bhi.n	800a50c <memmove+0x20>
 800a4fc:	1e43      	subs	r3, r0, #1
 800a4fe:	42a1      	cmp	r1, r4
 800a500:	d008      	beq.n	800a514 <memmove+0x28>
 800a502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a50a:	e7f8      	b.n	800a4fe <memmove+0x12>
 800a50c:	4601      	mov	r1, r0
 800a50e:	4402      	add	r2, r0
 800a510:	428a      	cmp	r2, r1
 800a512:	d100      	bne.n	800a516 <memmove+0x2a>
 800a514:	bd10      	pop	{r4, pc}
 800a516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a51e:	e7f7      	b.n	800a510 <memmove+0x24>

0800a520 <__malloc_lock>:
 800a520:	4801      	ldr	r0, [pc, #4]	; (800a528 <__malloc_lock+0x8>)
 800a522:	f7ff b8c1 	b.w	80096a8 <__retarget_lock_acquire_recursive>
 800a526:	bf00      	nop
 800a528:	200015c0 	.word	0x200015c0

0800a52c <__malloc_unlock>:
 800a52c:	4801      	ldr	r0, [pc, #4]	; (800a534 <__malloc_unlock+0x8>)
 800a52e:	f7ff b8bc 	b.w	80096aa <__retarget_lock_release_recursive>
 800a532:	bf00      	nop
 800a534:	200015c0 	.word	0x200015c0

0800a538 <_free_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4605      	mov	r5, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d043      	beq.n	800a5c8 <_free_r+0x90>
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f0c      	subs	r4, r1, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfb8      	it	lt
 800a54a:	18e4      	addlt	r4, r4, r3
 800a54c:	f7ff ffe8 	bl	800a520 <__malloc_lock>
 800a550:	4a1e      	ldr	r2, [pc, #120]	; (800a5cc <_free_r+0x94>)
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	4610      	mov	r0, r2
 800a556:	b933      	cbnz	r3, 800a566 <_free_r+0x2e>
 800a558:	6063      	str	r3, [r4, #4]
 800a55a:	6014      	str	r4, [r2, #0]
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a562:	f7ff bfe3 	b.w	800a52c <__malloc_unlock>
 800a566:	42a3      	cmp	r3, r4
 800a568:	d90a      	bls.n	800a580 <_free_r+0x48>
 800a56a:	6821      	ldr	r1, [r4, #0]
 800a56c:	1862      	adds	r2, r4, r1
 800a56e:	4293      	cmp	r3, r2
 800a570:	bf01      	itttt	eq
 800a572:	681a      	ldreq	r2, [r3, #0]
 800a574:	685b      	ldreq	r3, [r3, #4]
 800a576:	1852      	addeq	r2, r2, r1
 800a578:	6022      	streq	r2, [r4, #0]
 800a57a:	6063      	str	r3, [r4, #4]
 800a57c:	6004      	str	r4, [r0, #0]
 800a57e:	e7ed      	b.n	800a55c <_free_r+0x24>
 800a580:	461a      	mov	r2, r3
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	b10b      	cbz	r3, 800a58a <_free_r+0x52>
 800a586:	42a3      	cmp	r3, r4
 800a588:	d9fa      	bls.n	800a580 <_free_r+0x48>
 800a58a:	6811      	ldr	r1, [r2, #0]
 800a58c:	1850      	adds	r0, r2, r1
 800a58e:	42a0      	cmp	r0, r4
 800a590:	d10b      	bne.n	800a5aa <_free_r+0x72>
 800a592:	6820      	ldr	r0, [r4, #0]
 800a594:	4401      	add	r1, r0
 800a596:	1850      	adds	r0, r2, r1
 800a598:	4283      	cmp	r3, r0
 800a59a:	6011      	str	r1, [r2, #0]
 800a59c:	d1de      	bne.n	800a55c <_free_r+0x24>
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	4401      	add	r1, r0
 800a5a4:	6011      	str	r1, [r2, #0]
 800a5a6:	6053      	str	r3, [r2, #4]
 800a5a8:	e7d8      	b.n	800a55c <_free_r+0x24>
 800a5aa:	d902      	bls.n	800a5b2 <_free_r+0x7a>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	e7d4      	b.n	800a55c <_free_r+0x24>
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	1821      	adds	r1, r4, r0
 800a5b6:	428b      	cmp	r3, r1
 800a5b8:	bf01      	itttt	eq
 800a5ba:	6819      	ldreq	r1, [r3, #0]
 800a5bc:	685b      	ldreq	r3, [r3, #4]
 800a5be:	1809      	addeq	r1, r1, r0
 800a5c0:	6021      	streq	r1, [r4, #0]
 800a5c2:	6063      	str	r3, [r4, #4]
 800a5c4:	6054      	str	r4, [r2, #4]
 800a5c6:	e7c9      	b.n	800a55c <_free_r+0x24>
 800a5c8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ca:	bf00      	nop
 800a5cc:	200004e0 	.word	0x200004e0

0800a5d0 <_realloc_r>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	4614      	mov	r4, r2
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	b921      	cbnz	r1, 800a5e4 <_realloc_r+0x14>
 800a5da:	4611      	mov	r1, r2
 800a5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5e0:	f7ff b864 	b.w	80096ac <_malloc_r>
 800a5e4:	b922      	cbnz	r2, 800a5f0 <_realloc_r+0x20>
 800a5e6:	f7ff ffa7 	bl	800a538 <_free_r>
 800a5ea:	4625      	mov	r5, r4
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f0:	f000 f848 	bl	800a684 <_malloc_usable_size_r>
 800a5f4:	42a0      	cmp	r0, r4
 800a5f6:	d20f      	bcs.n	800a618 <_realloc_r+0x48>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff f856 	bl	80096ac <_malloc_r>
 800a600:	4605      	mov	r5, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d0f2      	beq.n	800a5ec <_realloc_r+0x1c>
 800a606:	4631      	mov	r1, r6
 800a608:	4622      	mov	r2, r4
 800a60a:	f7fe ff09 	bl	8009420 <memcpy>
 800a60e:	4631      	mov	r1, r6
 800a610:	4638      	mov	r0, r7
 800a612:	f7ff ff91 	bl	800a538 <_free_r>
 800a616:	e7e9      	b.n	800a5ec <_realloc_r+0x1c>
 800a618:	4635      	mov	r5, r6
 800a61a:	e7e7      	b.n	800a5ec <_realloc_r+0x1c>

0800a61c <_read_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	2200      	movs	r2, #0
 800a626:	4d05      	ldr	r5, [pc, #20]	; (800a63c <_read_r+0x20>)
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f6 fcd0 	bl	8000fd0 <_read>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_read_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_read_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	200015c8 	.word	0x200015c8

0800a640 <_fstat_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	2300      	movs	r3, #0
 800a644:	4d06      	ldr	r5, [pc, #24]	; (800a660 <_fstat_r+0x20>)
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f7f6 fce7 	bl	8001020 <_fstat>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d102      	bne.n	800a65c <_fstat_r+0x1c>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b103      	cbz	r3, 800a65c <_fstat_r+0x1c>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	200015c8 	.word	0x200015c8

0800a664 <_isatty_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	2300      	movs	r3, #0
 800a668:	4d05      	ldr	r5, [pc, #20]	; (800a680 <_isatty_r+0x1c>)
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	f7f6 fce5 	bl	800103e <_isatty>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_isatty_r+0x1a>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_isatty_r+0x1a>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	200015c8 	.word	0x200015c8

0800a684 <_malloc_usable_size_r>:
 800a684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a688:	1f18      	subs	r0, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbc      	itt	lt
 800a68e:	580b      	ldrlt	r3, [r1, r0]
 800a690:	18c0      	addlt	r0, r0, r3
 800a692:	4770      	bx	lr

0800a694 <_init>:
 800a694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a696:	bf00      	nop
 800a698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a69a:	bc08      	pop	{r3}
 800a69c:	469e      	mov	lr, r3
 800a69e:	4770      	bx	lr

0800a6a0 <_fini>:
 800a6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a2:	bf00      	nop
 800a6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a6:	bc08      	pop	{r3}
 800a6a8:	469e      	mov	lr, r3
 800a6aa:	4770      	bx	lr
