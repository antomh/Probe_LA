
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000c680  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800c790  0800c790  0001c790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c970  0800c970  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c970  0800c970  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c970  0800c970  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f0  0800cb68  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800cb68  000215b8  2**0
=======
  1 .text         0000d9a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcd4  0800dcd4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dcd4  0800dcd4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dcd4  0800dcd4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcd4  0800dcd4  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd8  0800dcd8  0001dcd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800dcdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c8  200001f8  0800ded0  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015c0  0800ded0  000215c0  2**0
>>>>>>> 6147058 (refactor)
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
<<<<<<< HEAD
 12 .debug_info   0001fb8a  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a78  00000000  00000000  0003fda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00044820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00045ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd24  00000000  00000000  000473a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be89  00000000  00000000  000650cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ef6  00000000  00000000  00080f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006938  00000000  00000000  00118ea0  2**2
=======
 12 .debug_info   0001fbc7  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8b  00000000  00000000  0003fde4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  00045f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd2a  00000000  00000000  000473f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be83  00000000  00000000  00065122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f01  00000000  00000000  00080fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006970  00000000  00000000  00118efc  2**2
>>>>>>> 6147058 (refactor)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000130:	0800c778 	.word	0x0800c778
=======
 8000130:	0800daa0 	.word	0x0800daa0
>>>>>>> 6147058 (refactor)

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800c778 	.word	0x0800c778
=======
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800daa0 	.word	0x0800daa0
>>>>>>> 6147058 (refactor)

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
<<<<<<< HEAD
 8000aee:	f003 fa52 	bl	8003f96 <HAL_GPIO_WritePin>
=======
 8000aee:	f004 fb6e 	bl	80051ce <HAL_GPIO_WritePin>
>>>>>>> 6147058 (refactor)
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
<<<<<<< HEAD
 8000af8:	f003 fa4d 	bl	8003f96 <HAL_GPIO_WritePin>
=======
 8000af8:	f004 fb69 	bl	80051ce <HAL_GPIO_WritePin>
>>>>>>> 6147058 (refactor)
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
<<<<<<< HEAD
 8000b16:	f003 fa3e 	bl	8003f96 <HAL_GPIO_WritePin>
=======
 8000b16:	f004 fb5a 	bl	80051ce <HAL_GPIO_WritePin>
>>>>>>> 6147058 (refactor)

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
<<<<<<< HEAD
 8000b22:	f005 fbe5 	bl	80062f0 <HAL_SPI_Transmit>
=======
 8000b22:	f006 fd01 	bl	8007528 <HAL_SPI_Transmit>
>>>>>>> 6147058 (refactor)

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
<<<<<<< HEAD
 8000b2c:	f003 fa33 	bl	8003f96 <HAL_GPIO_WritePin>
=======
 8000b2c:	f004 fb4f 	bl	80051ce <HAL_GPIO_WritePin>
>>>>>>> 6147058 (refactor)

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = (abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/STEP_CALIBRATE;
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <volt2dgt+0x10c>)
 8000d6e:	60fb      	str	r3, [r7, #12]
uint16_t y = (floor((count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12))/abs(MIN_VOLT_MODE_12)*volt+(count*abs(MIN_VOLT_MODE_12))/(abs(MIN_VOLT_MODE_12)+abs(MAX_VOLT_MODE_12)))); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
<<<<<<< HEAD
 8000d70:	493f      	ldr	r1, [pc, #252]	; (8000e70 <volt2dgt+0x110>)
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f7ff fd66 	bl	8000844 <__aeabi_fmul>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	493e      	ldr	r1, [pc, #248]	; (8000e74 <volt2dgt+0x114>)
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe15 	bl	80009ac <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	493a      	ldr	r1, [pc, #232]	; (8000e70 <volt2dgt+0x110>)
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe10 	bl	80009ac <__aeabi_fdiv>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461c      	mov	r4, r3
 8000d90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd01 	bl	800079c <__aeabi_i2f>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff fd50 	bl	8000844 <__aeabi_fmul>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461c      	mov	r4, r3
 8000da8:	4931      	ldr	r1, [pc, #196]	; (8000e70 <volt2dgt+0x110>)
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fd4a 	bl	8000844 <__aeabi_fmul>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <volt2dgt+0x114>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fdf9 	bl	80009ac <__aeabi_fdiv>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f7ff fc38 	bl	8000634 <__addsf3>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb2e 	bl	8000428 <__aeabi_f2d>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f00b fc50 	bl	800c678 <floor>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fc02 	bl	80005e8 <__aeabi_d2uiz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	817b      	strh	r3, [r7, #10]
=======
 80020e4:	493f      	ldr	r1, [pc, #252]	; (80021e4 <volt2dgt+0x110>)
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7fe fbac 	bl	8000844 <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	493e      	ldr	r1, [pc, #248]	; (80021e8 <volt2dgt+0x114>)
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fc5b 	bl	80009ac <__aeabi_fdiv>
 80020f6:	4603      	mov	r3, r0
 80020f8:	493a      	ldr	r1, [pc, #232]	; (80021e4 <volt2dgt+0x110>)
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fc56 	bl	80009ac <__aeabi_fdiv>
 8002100:	4603      	mov	r3, r0
 8002102:	461c      	mov	r4, r3
 8002104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fb47 	bl	800079c <__aeabi_i2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4619      	mov	r1, r3
 8002112:	4620      	mov	r0, r4
 8002114:	f7fe fb96 	bl	8000844 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	461c      	mov	r4, r3
 800211c:	4931      	ldr	r1, [pc, #196]	; (80021e4 <volt2dgt+0x110>)
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe fb90 	bl	8000844 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4930      	ldr	r1, [pc, #192]	; (80021e8 <volt2dgt+0x114>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fc3f 	bl	80009ac <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	4619      	mov	r1, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f7fe fa7e 	bl	8000634 <__addsf3>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f974 	bl	8000428 <__aeabi_f2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f00b fc2a 	bl	800d9a0 <floor>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fa48 	bl	80005e8 <__aeabi_d2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	817b      	strh	r3, [r7, #10]
>>>>>>> 6147058 (refactor)
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000de8:	897b      	ldrh	r3, [r7, #10]
 8000dea:	3302      	adds	r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	889b      	ldrh	r3, [r3, #4]
 8000df6:	4619      	mov	r1, r3
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	889b      	ldrh	r3, [r3, #4]
 8000e04:	1aca      	subs	r2, r1, r3
 8000e06:	897b      	ldrh	r3, [r7, #10]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	21c8      	movs	r1, #200	; 0xc8
 8000e0c:	fb01 f303 	mul.w	r3, r1, r3
 8000e10:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e14:	3b08      	subs	r3, #8
 8000e16:	8979      	ldrh	r1, [r7, #10]
 8000e18:	3101      	adds	r1, #1
 8000e1a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e1e:	fb00 f101 	mul.w	r1, r0, r1
 8000e22:	440b      	add	r3, r1
 8000e24:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e34:	897b      	ldrh	r3, [r7, #10]
 8000e36:	3301      	adds	r3, #1
 8000e38:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000e3c:	fb00 f303 	mul.w	r3, r0, r3
 8000e40:	440b      	add	r3, r1
 8000e42:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000e46:	3b08      	subs	r3, #8
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	fb03 f302 	mul.w	r3, r3, r2
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	897b      	ldrh	r3, [r7, #10]
 8000e52:	3301      	adds	r3, #1
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	3304      	adds	r3, #4
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	440b      	add	r3, r1
 8000e5c:	889b      	ldrh	r3, [r3, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000e62:	893b      	ldrh	r3, [r7, #8]





}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	42aa0000 	.word	0x42aa0000
 8000e70:	459c4000 	.word	0x459c4000
 8000e74:	4684d000 	.word	0x4684d000

08000e78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e80:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00b      	beq.n	8000eb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea0:	e000      	b.n	8000ea4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ea2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ea4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f9      	beq.n	8000ea2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000eae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <DWT_Init+0x24>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <DWT_Init+0x24>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ed2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <DWT_Init+0x28>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <DWT_Init+0x28>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	e000edf0 	.word	0xe000edf0
 8000eec:	e0001000 	.word	0xe0001000

08000ef0 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e009      	b.n	8000f16 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffb4 	bl	8000e78 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3301      	adds	r3, #1
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf1      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f1e:	687b      	ldr	r3, [r7, #4]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

<<<<<<< HEAD
08000f28 <getCRC_table_a_m12>:
//}
//--------------------------------------------------------------------------
union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
uint32_t getCRC_table_a_m12()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	//	uint16_t len_ = sizeof(aqrr)/(sizeof(uint32_t)*2);
	uint32_t crc = HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table.dacValA_m12, sizeof(DevNVRAM.calibration_table.dacValA_m12) / (sizeof(uint32_t) * 2));
 8000f2e:	2216      	movs	r2, #22
 8000f30:	4906      	ldr	r1, [pc, #24]	; (8000f4c <getCRC_table_a_m12+0x24>)
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <getCRC_table_a_m12+0x28>)
 8000f34:	f002 fc61 	bl	80037fa <HAL_CRC_Calculate>
 8000f38:	6078      	str	r0, [r7, #4]
	HAL_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f001 fe80 	bl	8002c40 <HAL_Delay>
	return crc;
 8000f40:	687b      	ldr	r3, [r7, #4]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200004c0 	.word	0x200004c0
 8000f50:	200008fc 	.word	0x200008fc

08000f54 <SetDacA>:
}
//--------------------------------------------------------------------------

//**************************************************************************
=======
0800229c <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
>>>>>>> 6147058 (refactor)
void SetDacA(int16_t da)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8000f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <SetDacA+0x34>)
 8000f66:	f7ff fefb 	bl	8000d60 <volt2dgt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <SetDacA+0x38>)
 8000f70:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <SetDacA+0x38>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <SetDacA+0x3c>)
 8000f7a:	f7ff fddf 	bl	8000b3c <DAC_AD5322_Ch1>
}
<<<<<<< HEAD
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200004b4 	.word	0x200004b4
 8000f8c:	2000024c 	.word	0x2000024c
 8000f90:	2000097c 	.word	0x2000097c

08000f94 <SetDacB>:
void SetDacB(int16_t db)
=======
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200004ac 	.word	0x200004ac
 80022d4:	20000256 	.word	0x20000256
 80022d8:	20000984 	.word	0x20000984

080022dc <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
>>>>>>> 6147058 (refactor)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <SetDacB+0x34>)
 8000fa6:	f7ff fedb 	bl	8000d60 <volt2dgt>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SetDacB+0x38>)
 8000fb0:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SetDacB+0x38>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <SetDacB+0x3c>)
 8000fba:	f7ff fe06 	bl	8000bca <DAC_AD5322_Ch2>
}
<<<<<<< HEAD
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200004b4 	.word	0x200004b4
 8000fcc:	2000024e 	.word	0x2000024e
 8000fd0:	2000097c 	.word	0x2000097c

08000fd4 <SetAllDAC>:
=======
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200004ac 	.word	0x200004ac
 8002314:	20000258 	.word	0x20000258
 8002318:	20000984 	.word	0x20000984

0800231c <SetAllDAC>:
>>>>>>> 6147058 (refactor)
void SetAllDAC()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SetAllDAC+0x18>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <SetAllDAC+0x1c>)
 8000fde:	8812      	ldrh	r2, [r2, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <SetAllDAC+0x20>)
 8000fe4:	f7ff fe38 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
<<<<<<< HEAD
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000024c 	.word	0x2000024c
 8000ff0:	2000024e 	.word	0x2000024e
 8000ff4:	2000097c 	.word	0x2000097c
=======
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000256 	.word	0x20000256
 8002338:	20000258 	.word	0x20000258
 800233c:	20000984 	.word	0x20000984
>>>>>>> 6147058 (refactor)

08000ff8 <GetDacA>:
uint16_t GetDacA()
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <GetDacA+0x10>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
}
<<<<<<< HEAD
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	2000024c 	.word	0x2000024c
=======
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000256 	.word	0x20000256
>>>>>>> 6147058 (refactor)

0800100c <GetDacB>:
uint16_t GetDacB()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001010:	4b02      	ldr	r3, [pc, #8]	; (800101c <GetDacB+0x10>)
 8001012:	881b      	ldrh	r3, [r3, #0]
}
<<<<<<< HEAD
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	2000024e 	.word	0x2000024e
=======
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000258 	.word	0x20000258
>>>>>>> 6147058 (refactor)

08001020 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <GetBtnRunState+0x7c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10b      	bne.n	8001044 <GetBtnRunState+0x24>
 800102c:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GetBtnRunState+0x80>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d107      	bne.n	8001044 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <GetBtnRunState+0x80>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <GetBtnRunState+0x7c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	e026      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <GetBtnRunState+0x7c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <GetBtnRunState+0x44>
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <GetBtnRunState+0x80>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d107      	bne.n	8001064 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <GetBtnRunState+0x80>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <GetBtnRunState+0x7c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001060:	2301      	movs	r3, #1
 8001062:	e016      	b.n	8001092 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <GetBtnRunState+0x7c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d10b      	bne.n	8001084 <GetBtnRunState+0x64>
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <GetBtnRunState+0x80>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <GetBtnRunState+0x80>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <GetBtnRunState+0x7c>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001080:	2302      	movs	r3, #2
 8001082:	e006      	b.n	8001092 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <GetBtnRunState+0x80>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <GetBtnRunState+0x7c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001090:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 8001092:	4618      	mov	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000259 	.word	0x20000259
 80010a0:	20000258 	.word	0x20000258

080010a4 <GetBtnUpState>:
=======
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000261 	.word	0x20000261
 80023e8:	20000260 	.word	0x20000260

080023ec <GetBtnUpState>:
>>>>>>> 6147058 (refactor)
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <GetBtnUpState+0x7c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <GetBtnUpState+0x24>
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <GetBtnUpState+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <GetBtnUpState+0x80>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <GetBtnUpState+0x7c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e026      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <GetBtnUpState+0x7c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <GetBtnUpState+0x44>
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <GetBtnUpState+0x80>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d107      	bne.n	80010e8 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <GetBtnUpState+0x80>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <GetBtnUpState+0x7c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e016      	b.n	8001116 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80010e8:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <GetBtnUpState+0x7c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10b      	bne.n	8001108 <GetBtnUpState+0x64>
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <GetBtnUpState+0x80>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d107      	bne.n	8001108 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <GetBtnUpState+0x80>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <GetBtnUpState+0x7c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001104:	2302      	movs	r3, #2
 8001106:	e006      	b.n	8001116 <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <GetBtnUpState+0x80>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <GetBtnUpState+0x7c>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8001114:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000261 	.word	0x20000261
 8001124:	20000260 	.word	0x20000260

08001128 <GetBtnDownState>:
=======
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000269 	.word	0x20000269
 800246c:	20000268 	.word	0x20000268

08002470 <GetBtnDownState>:
>>>>>>> 6147058 (refactor)
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <GetBtnDownState+0x7c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <GetBtnDownState+0x24>
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <GetBtnDownState+0x80>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d107      	bne.n	800114c <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <GetBtnDownState+0x80>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <GetBtnDownState+0x7c>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001148:	2300      	movs	r3, #0
 800114a:	e026      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <GetBtnDownState+0x7c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <GetBtnDownState+0x44>
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <GetBtnDownState+0x80>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <GetBtnDownState+0x80>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <GetBtnDownState+0x7c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001168:	2301      	movs	r3, #1
 800116a:	e016      	b.n	800119a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <GetBtnDownState+0x7c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <GetBtnDownState+0x64>
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <GetBtnDownState+0x80>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d107      	bne.n	800118c <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <GetBtnDownState+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <GetBtnDownState+0x7c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001188:	2302      	movs	r3, #2
 800118a:	e006      	b.n	800119a <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <GetBtnDownState+0x80>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <GetBtnDownState+0x7c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8001198:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	20000269 	.word	0x20000269
 80011a8:	20000268 	.word	0x20000268

080011ac <EnableTIM3_PB4>:
=======
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000271 	.word	0x20000271
 80024f0:	20000270 	.word	0x20000270

080024f4 <EnableTIM3_PB4>:
>>>>>>> 6147058 (refactor)
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
	timWork = 1;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <EnableTIM3_PB4+0x14>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
}
<<<<<<< HEAD
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	2000026a 	.word	0x2000026a

080011c4 <GetTIM3>:
=======
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000272 	.word	0x20000272

0800250c <GetTIM3>:
>>>>>>> 6147058 (refactor)
uint16_t GetTIM3()
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <GetTIM3+0x14>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
}
<<<<<<< HEAD
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000026c 	.word	0x2000026c

080011dc <resValTIM3_PB4>:
=======
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000274 	.word	0x20000274

08002524 <resValTIM3_PB4>:
>>>>>>> 6147058 (refactor)
void resValTIM3_PB4()
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <resValTIM3_PB4+0x14>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
}
<<<<<<< HEAD
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	2000026c 	.word	0x2000026c

080011f4 <EnableTIM4_PB6>:
=======
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000274 	.word	0x20000274

0800253c <EnableTIM4_PB6>:
>>>>>>> 6147058 (refactor)
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	timWork = 0;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <EnableTIM4_PB6+0x14>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
}
<<<<<<< HEAD
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000026a 	.word	0x2000026a

0800120c <GetTIM4>:
=======
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000272 	.word	0x20000272

08002554 <GetTIM4>:
>>>>>>> 6147058 (refactor)
uint16_t GetTIM4()
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <GetTIM4+0x14>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
}
<<<<<<< HEAD
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	2000026e 	.word	0x2000026e

08001224 <resValTIM4_PB6>:
=======
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000276 	.word	0x20000276

0800256c <resValTIM4_PB6>:
>>>>>>> 6147058 (refactor)
void resValTIM4_PB6()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <resValTIM4_PB6+0x14>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
}
<<<<<<< HEAD
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000026e 	.word	0x2000026e

0800123c <HAL_TIM_IC_CaptureCallback>:
=======
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000276 	.word	0x20000276

08002584 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 6147058 (refactor)
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d027      	beq.n	800129e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d149      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7f1b      	ldrb	r3, [r3, #28]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d145      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
<<<<<<< HEAD
 8001260:	2100      	movs	r1, #0
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001264:	f005 fd18 	bl	8006c98 <HAL_TIM_ReadCapturedValue>
 8001268:	4603      	mov	r3, r0
 800126a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800126c:	2104      	movs	r1, #4
 800126e:	4823      	ldr	r0, [pc, #140]	; (80012fc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001270:	f005 fd12 	bl	8006c98 <HAL_TIM_ReadCapturedValue>
 8001274:	4603      	mov	r3, r0
 8001276:	81fb      	strh	r3, [r7, #14]
=======
 80025a8:	2100      	movs	r1, #0
 80025aa:	4826      	ldr	r0, [pc, #152]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025ac:	f005 fc90 	bl	8007ed0 <HAL_TIM_ReadCapturedValue>
 80025b0:	4603      	mov	r3, r0
 80025b2:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 80025b4:	2104      	movs	r1, #4
 80025b6:	4823      	ldr	r0, [pc, #140]	; (8002644 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80025b8:	f005 fc8a 	bl	8007ed0 <HAL_TIM_ReadCapturedValue>
 80025bc:	4603      	mov	r3, r0
 80025be:	81fb      	strh	r3, [r7, #14]
>>>>>>> 6147058 (refactor)
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800127a:	2200      	movs	r2, #0
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 800127e:	8a3a      	ldrh	r2, [r7, #16]
 8001280:	89fb      	ldrh	r3, [r7, #14]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8001288:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	bfb8      	it	lt
 8001290:	425b      	neglt	r3, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 8001296:	89ba      	ldrh	r2, [r7, #12]
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800129a:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 800129c:	e026      	b.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d121      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d11d      	bne.n	80012ec <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
<<<<<<< HEAD
 80012b0:	2100      	movs	r1, #0
 80012b2:	4815      	ldr	r0, [pc, #84]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012b4:	f005 fcf0 	bl	8006c98 <HAL_TIM_ReadCapturedValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80012bc:	2104      	movs	r1, #4
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80012c0:	f005 fcea 	bl	8006c98 <HAL_TIM_ReadCapturedValue>
 80012c4:	4603      	mov	r3, r0
 80012c6:	82bb      	strh	r3, [r7, #20]
=======
 80025f8:	2100      	movs	r1, #0
 80025fa:	4815      	ldr	r0, [pc, #84]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80025fc:	f005 fc68 	bl	8007ed0 <HAL_TIM_ReadCapturedValue>
 8002600:	4603      	mov	r3, r0
 8002602:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8002604:	2104      	movs	r1, #4
 8002606:	4812      	ldr	r0, [pc, #72]	; (8002650 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002608:	f005 fc62 	bl	8007ed0 <HAL_TIM_ReadCapturedValue>
 800260c:	4603      	mov	r3, r0
 800260e:	82bb      	strh	r3, [r7, #20]
>>>>>>> 6147058 (refactor)
				TIM4->CNT = 0;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80012ce:	8afa      	ldrh	r2, [r7, #22]
 80012d0:	8abb      	ldrh	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80012d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80012e6:	8a7a      	ldrh	r2, [r7, #18]
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80012ea:	801a      	strh	r2, [r3, #0]
}
<<<<<<< HEAD
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000026a 	.word	0x2000026a
 80012f8:	40000400 	.word	0x40000400
 80012fc:	20000904 	.word	0x20000904
 8001300:	2000026c 	.word	0x2000026c
 8001304:	40000800 	.word	0x40000800
 8001308:	200008b4 	.word	0x200008b4
 800130c:	2000026e 	.word	0x2000026e

08001310 <GetADC>:
=======
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000272 	.word	0x20000272
 8002640:	40000400 	.word	0x40000400
 8002644:	200008fc 	.word	0x200008fc
 8002648:	20000274 	.word	0x20000274
 800264c:	40000800 	.word	0x40000800
 8002650:	200008ac 	.word	0x200008ac
 8002654:	20000276 	.word	0x20000276

08002658 <GetADC>:
>>>>>>> 6147058 (refactor)
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return g_VADC;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <GetADC+0x14>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
}
<<<<<<< HEAD
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270

08001328 <HAL_ADC_ConvCpltCallback>:
=======
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000278 	.word	0x20000278

08002670 <HAL_ADC_ConvCpltCallback>:
>>>>>>> 6147058 (refactor)
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_ADC_ConvCpltCallback+0x28>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
<<<<<<< HEAD
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <HAL_ADC_ConvCpltCallback+0x2c>)
 800133c:	f001 fe32 	bl	8002fa4 <HAL_ADC_GetValue>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_ADC_ConvCpltCallback+0x30>)
 8001346:	801a      	strh	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40012400 	.word	0x40012400
 8001354:	2000094c 	.word	0x2000094c
 8001358:	20000270 	.word	0x20000270

0800135c <runCommands>:
//}

uint8_t RelayState = 0x00; //TODO: проверить первое состоянеи первоначальное состояние реле 27V
bool changeTableFlag = false;
void runCommands(uint8_t *Buf, uint32_t *Len)
=======
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002684:	f001 fddc 	bl	8004240 <HAL_ADC_GetValue>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800268e:	801a      	strh	r2, [r3, #0]
	}
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	20000954 	.word	0x20000954
 80026a0:	20000278 	.word	0x20000278

080026a4 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
>>>>>>> 6147058 (refactor)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 8001362:	af00      	add	r7, sp, #0
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	6018      	str	r0, [r3, #0]
 8001368:	463b      	mov	r3, r7
 800136a:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
<<<<<<< HEAD
 800136c:	463b      	mov	r3, r7
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 83f8 	beq.w	8001b68 <runCommands+0x80c>
=======
 80026b4:	463b      	mov	r3, r7
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8400 	beq.w	8002ec0 <runCommands+0x81c>
>>>>>>> 6147058 (refactor)

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
<<<<<<< HEAD
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	 */

	//--------------------------------------------------------------------------

	
	if (cmd == 0x01)		// Relay:1 - 12V	[0x01 - 0x01]
 8001382:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001386:	2b01      	cmp	r3, #1
 8001388:	d16c      	bne.n	8001464 <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 800138a:	463b      	mov	r3, r7
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d957      	bls.n	8001444 <runCommands+0xe8>
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d005      	beq.n	80013ac <runCommands+0x50>
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d14b      	bne.n	8001444 <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11f      	bne.n	80013f8 <runCommands+0x9c>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2104      	movs	r1, #4
 80013bc:	48db      	ldr	r0, [pc, #876]	; (800172c <runCommands+0x3d0>)
 80013be:	f002 fdea 	bl	8003f96 <HAL_GPIO_WritePin>
				RelayState = 0x01;
 80013c2:	4bdb      	ldr	r3, [pc, #876]	; (8001730 <runCommands+0x3d4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 80013c8:	4bd9      	ldr	r3, [pc, #868]	; (8001730 <runCommands+0x3d4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	48d9      	ldr	r0, [pc, #868]	; (8001734 <runCommands+0x3d8>)
 80013d0:	f009 ffec 	bl	800b3ac <iprintf>
				SetAllDAC();
 80013d4:	f7ff fdfe 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80013e0:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	2200      	movs	r2, #0
 80013e8:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	2102      	movs	r1, #2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f009 fba3 	bl	800ab3c <CDC_Transmit_FS>
				return;
 80013f6:	e3bc      	b.n	8001b72 <runCommands+0x816>
			}
			else if (Buf[1] == 0x00)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d11f      	bne.n	8001444 <runCommands+0xe8>
			{
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2104      	movs	r1, #4
 8001408:	48c8      	ldr	r0, [pc, #800]	; (800172c <runCommands+0x3d0>)
 800140a:	f002 fdc4 	bl	8003f96 <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800140e:	4bc8      	ldr	r3, [pc, #800]	; (8001730 <runCommands+0x3d4>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 8001414:	4bc6      	ldr	r3, [pc, #792]	; (8001730 <runCommands+0x3d4>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	48c7      	ldr	r0, [pc, #796]	; (8001738 <runCommands+0x3dc>)
 800141c:	f009 ffc6 	bl	800b3ac <iprintf>
				SetAllDAC();
 8001420:	f7ff fdd8 	bl	8000fd4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800142c:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	2200      	movs	r2, #0
 8001434:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	2102      	movs	r1, #2
 800143c:	4618      	mov	r0, r3
 800143e:	f009 fb7d 	bl	800ab3c <CDC_Transmit_FS>
				return;
 8001442:	e396      	b.n	8001b72 <runCommands+0x816>
=======
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 80026ca:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d16c      	bne.n	80027ac <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 80026d2:	463b      	mov	r3, r7
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d957      	bls.n	800278c <runCommands+0xe8>
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <runCommands+0x50>
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d14b      	bne.n	800278c <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d11f      	bne.n	8002740 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	48cb      	ldr	r0, [pc, #812]	; (8002a34 <runCommands+0x390>)
 8002706:	f002 fd62 	bl	80051ce <HAL_GPIO_WritePin>
				RelayState = m12;
 800270a:	4bcb      	ldr	r3, [pc, #812]	; (8002a38 <runCommands+0x394>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8002710:	4bc9      	ldr	r3, [pc, #804]	; (8002a38 <runCommands+0x394>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	48c9      	ldr	r0, [pc, #804]	; (8002a3c <runCommands+0x398>)
 8002718:	f009 ff64 	bl	800c5e4 <iprintf>
				SetAllDAC();
 800271c:	f7ff fdfe 	bl	800231c <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002728:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800272a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2102      	movs	r1, #2
 8002738:	4618      	mov	r0, r3
 800273a:	f009 fb1b 	bl	800bd74 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800273e:	e3c4      	b.n	8002eca <runCommands+0x826>
			}
			else if (Buf[1] == 0x00)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11f      	bne.n	800278c <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	2104      	movs	r1, #4
 8002750:	48b8      	ldr	r0, [pc, #736]	; (8002a34 <runCommands+0x390>)
 8002752:	f002 fd3c 	bl	80051ce <HAL_GPIO_WritePin>
				RelayState = m27;
 8002756:	4bb8      	ldr	r3, [pc, #736]	; (8002a38 <runCommands+0x394>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800275c:	4bb6      	ldr	r3, [pc, #728]	; (8002a38 <runCommands+0x394>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	48b7      	ldr	r0, [pc, #732]	; (8002a40 <runCommands+0x39c>)
 8002764:	f009 ff3e 	bl	800c5e4 <iprintf>
				SetAllDAC();
 8002768:	f7ff fdd8 	bl	800231c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800276c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002770:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002774:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8002776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800277a:	2200      	movs	r2, #0
 800277c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800277e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f009 faf5 	bl	800bd74 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800278a:	e39e      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
			}
		}

		UserTxBufferFS[0] = cmd;
<<<<<<< HEAD
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800144c:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2201      	movs	r2, #1
 8001454:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	2102      	movs	r1, #2
 800145c:	4618      	mov	r0, r3
 800145e:	f009 fb6d 	bl	800ab3c <CDC_Transmit_FS>
		return;
 8001462:	e386      	b.n	8001b72 <runCommands+0x816>
=======
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002794:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279a:	2201      	movs	r2, #1
 800279c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	2102      	movs	r1, #2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f009 fae5 	bl	800bd74 <CDC_Transmit_FS>
		return;
 80027aa:	e38e      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
<<<<<<< HEAD
 8001464:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001468:	2b02      	cmp	r3, #2
 800146a:	d13e      	bne.n	80014ea <runCommands+0x18e>
	{
		if (*Len >= 3)
 800146c:	463b      	mov	r3, r7
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d929      	bls.n	80014ca <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001476:	f7ff feb1 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800147a:	f7ff fed3 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29a      	uxth	r2, r3
 8001488:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800148c:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 800148e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fd5c 	bl	8000f54 <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 800149c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	48a5      	ldr	r0, [pc, #660]	; (800173c <runCommands+0x3e0>)
 80014a6:	f009 ff81 	bl	800b3ac <iprintf>
			UserTxBufferFS[0] = cmd;
 80014aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ae:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014b2:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	2200      	movs	r2, #0
 80014ba:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 80014bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f009 fb3a 	bl	800ab3c <CDC_Transmit_FS>
			return;
 80014c8:	e353      	b.n	8001b72 <runCommands+0x816>
		}

		UserTxBufferFS[0] = cmd;
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80014d2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	2201      	movs	r2, #1
 80014da:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	2102      	movs	r1, #2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 fb2a 	bl	800ab3c <CDC_Transmit_FS>
		return;
 80014e8:	e343      	b.n	8001b72 <runCommands+0x816>
=======
 80027ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d13e      	bne.n	8002832 <runCommands+0x18e>
	{
		if (*Len >= 3)
 80027b4:	463b      	mov	r3, r7
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d929      	bls.n	8002812 <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80027be:	f7ff feb1 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80027c2:	f7ff fed3 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027d4:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 80027d6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd5c 	bl	800229c <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 80027e4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4895      	ldr	r0, [pc, #596]	; (8002a44 <runCommands+0x3a0>)
 80027ee:	f009 fef9 	bl	800c5e4 <iprintf>
			UserTxBufferFS[0] = cmd;
 80027f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80027fa:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80027fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002800:	2200      	movs	r2, #0
 8002802:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002808:	2102      	movs	r1, #2
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fab2 	bl	800bd74 <CDC_Transmit_FS>
			return;
 8002810:	e35b      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800281a:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	2201      	movs	r2, #1
 8002822:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002828:	2102      	movs	r1, #2
 800282a:	4618      	mov	r0, r3
 800282c:	f009 faa2 	bl	800bd74 <CDC_Transmit_FS>
		return;
 8002830:	e34b      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
<<<<<<< HEAD
 80014ea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d13e      	bne.n	8001570 <runCommands+0x214>
	{
		if (*Len >= 3)
 80014f2:	463b      	mov	r3, r7
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d929      	bls.n	8001550 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80014fc:	f7ff fe6e 	bl	80011dc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001500:	f7ff fe90 	bl	8001224 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	b29a      	uxth	r2, r3
 800150e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001512:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 8001514:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd39 	bl	8000f94 <SetDacB>

			UserTxBufferFS[0] = cmd;
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800152a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2200      	movs	r2, #0
 8001532:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 8001534:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	4880      	ldr	r0, [pc, #512]	; (8001740 <runCommands+0x3e4>)
 800153e:	f009 ff35 	bl	800b3ac <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	2102      	movs	r1, #2
 8001548:	4618      	mov	r0, r3
 800154a:	f009 faf7 	bl	800ab3c <CDC_Transmit_FS>
			return;
 800154e:	e310      	b.n	8001b72 <runCommands+0x816>
		}

		UserTxBufferFS[0] = cmd;
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001558:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	2201      	movs	r2, #1
 8001560:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	2102      	movs	r1, #2
 8001568:	4618      	mov	r0, r3
 800156a:	f009 fae7 	bl	800ab3c <CDC_Transmit_FS>
		return;
 800156e:	e300      	b.n	8001b72 <runCommands+0x816>
=======
 8002832:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002836:	2b03      	cmp	r3, #3
 8002838:	d13e      	bne.n	80028b8 <runCommands+0x214>
	{
		if (*Len >= 3)
 800283a:	463b      	mov	r3, r7
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d929      	bls.n	8002898 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8002844:	f7ff fe6e 	bl	8002524 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8002848:	f7ff fe90 	bl	800256c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
 8002856:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800285a:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 800285c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b21b      	sxth	r3, r3
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fd39 	bl	80022dc <SetDacB>

			UserTxBufferFS[0] = cmd;
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002872:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 800287c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4870      	ldr	r0, [pc, #448]	; (8002a48 <runCommands+0x3a4>)
 8002886:	f009 fead 	bl	800c5e4 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	2102      	movs	r1, #2
 8002890:	4618      	mov	r0, r3
 8002892:	f009 fa6f 	bl	800bd74 <CDC_Transmit_FS>
			return;
 8002896:	e318      	b.n	8002eca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8002898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028a0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80028aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ae:	2102      	movs	r1, #2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f009 fa5f 	bl	800bd74 <CDC_Transmit_FS>
		return;
 80028b6:	e308      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
<<<<<<< HEAD
 8001570:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001574:	2b04      	cmp	r3, #4
 8001576:	d119      	bne.n	80015ac <runCommands+0x250>
	{
		tVal16 = GetADC();
 8001578:	f7ff feca 	bl	8001310 <GetADC>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001584:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800158e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	3301      	adds	r3, #1
 8001596:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800159a:	8812      	ldrh	r2, [r2, #0]
 800159c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	2103      	movs	r1, #3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 fac9 	bl	800ab3c <CDC_Transmit_FS>
		return;
 80015aa:	e2e2      	b.n	8001b72 <runCommands+0x816>
=======
 80028b8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d119      	bne.n	80028f4 <runCommands+0x250>
	{
		tVal16 = GetADC();
 80028c0:	f7ff feca 	bl	8002658 <GetADC>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80028cc:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80028d6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80028e2:	8812      	ldrh	r2, [r2, #0]
 80028e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 80028e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ea:	2103      	movs	r1, #3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 fa41 	bl	800bd74 <CDC_Transmit_FS>
		return;
 80028f2:	e2ea      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
<<<<<<< HEAD
 80015ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d12c      	bne.n	800160e <runCommands+0x2b2>
	{
		UserTxBufferFS[0] = cmd;
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80015bc:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = RelayState;
 80015be:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <runCommands+0x3d4>)
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 80015c8:	f7ff fd16 	bl	8000ff8 <GetDacA>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015d4:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	3302      	adds	r3, #2
 80015dc:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80015e0:	8812      	ldrh	r2, [r2, #0]
 80015e2:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 80015e4:	f7ff fd12 	bl	800100c <GetDacB>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015f0:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	3304      	adds	r3, #4
 80015f8:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	2106      	movs	r1, #6
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fa98 	bl	800ab3c <CDC_Transmit_FS>
		return;
 800160c:	e2b1      	b.n	8001b72 <runCommands+0x816>
=======
 80028f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d12d      	bne.n	8002958 <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 80028fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002900:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002904:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <runCommands+0x394>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8002912:	f7ff fd15 	bl	8002340 <GetDacA>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800291e:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8002920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002924:	3302      	adds	r3, #2
 8002926:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800292a:	8812      	ldrh	r2, [r2, #0]
 800292c:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 800292e:	f7ff fd11 	bl	8002354 <GetDacB>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800293a:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800293c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002940:	3304      	adds	r3, #4
 8002942:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	2106      	movs	r1, #6
 8002950:	4618      	mov	r0, r3
 8002952:	f009 fa0f 	bl	800bd74 <CDC_Transmit_FS>
		return;
 8002956:	e2b8      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
<<<<<<< HEAD
 800160e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001612:	2b06      	cmp	r3, #6
 8001614:	d120      	bne.n	8001658 <runCommands+0x2fc>
	{
		UserTxBufferFS[0] = cmd;
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800161e:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 8001620:	f7ff fcfe 	bl	8001020 <GetBtnRunState>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800162e:	f7ff fd39 	bl	80010a4 <GetBtnUpState>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800163c:	f7ff fd74 	bl	8001128 <GetBtnDownState>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 800164a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164e:	2104      	movs	r1, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f009 fa73 	bl	800ab3c <CDC_Transmit_FS>
		return;
 8001656:	e28c      	b.n	8001b72 <runCommands+0x816>
=======
 8002958:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800295c:	2b06      	cmp	r3, #6
 800295e:	d120      	bne.n	80029a2 <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002968:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800296a:	f7ff fcfd 	bl	8002368 <GetBtnRunState>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002976:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8002978:	f7ff fd38 	bl	80023ec <GetBtnUpState>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8002986:	f7ff fd73 	bl	8002470 <GetBtnDownState>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	2104      	movs	r1, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f009 f9ea 	bl	800bd74 <CDC_Transmit_FS>
		return;
 80029a0:	e293      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
<<<<<<< HEAD
 8001658:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800165c:	2b07      	cmp	r3, #7
 800165e:	d144      	bne.n	80016ea <runCommands+0x38e>
	{
		char str[9] = {
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	3304      	adds	r3, #4
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	2202      	movs	r2, #2
 8001676:	4933      	ldr	r1, [pc, #204]	; (8001744 <runCommands+0x3e8>)
 8001678:	4618      	mov	r0, r3
 800167a:	f009 fe81 	bl	800b380 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	3302      	adds	r3, #2
 8001684:	2210      	movs	r2, #16
 8001686:	4619      	mov	r1, r3
 8001688:	482f      	ldr	r0, [pc, #188]	; (8001748 <runCommands+0x3ec>)
 800168a:	f009 fe77 	bl	800b37c <itoa>

		UserTxBufferFS[0] = cmd;
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001696:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fd57 	bl	8000150 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80016ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80016b0:	3402      	adds	r4, #2
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd4a 	bl	8000150 <strlen>
 80016bc:	4602      	mov	r2, r0
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4620      	mov	r0, r4
 80016c6:	f009 fe5b 	bl	800b380 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fd3e 	bl	8000150 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3302      	adds	r3, #2
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 fa2a 	bl	800ab3c <CDC_Transmit_FS>
 80016e8:	e243      	b.n	8001b72 <runCommands+0x816>
	 */

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 80016ea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d12c      	bne.n	800174c <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 80016f2:	f7ff fd5b 	bl	80011ac <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 80016f6:	f7ff fd65 	bl	80011c4 <GetTIM3>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461a      	mov	r2, r3
 80016fe:	f107 0316 	add.w	r3, r7, #22
 8001702:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001708:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800170c:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	f107 0216 	add.w	r2, r7, #22
 8001718:	8812      	ldrh	r2, [r2, #0]
 800171a:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	2103      	movs	r1, #3
 8001722:	4618      	mov	r0, r3
 8001724:	f009 fa0a 	bl	800ab3c <CDC_Transmit_FS>
 8001728:	e223      	b.n	8001b72 <runCommands+0x816>
 800172a:	bf00      	nop
 800172c:	40010800 	.word	0x40010800
 8001730:	20000272 	.word	0x20000272
 8001734:	0800c790 	.word	0x0800c790
 8001738:	0800c7a8 	.word	0x0800c7a8
 800173c:	0800c7c0 	.word	0x0800c7c0
 8001740:	0800c7cc 	.word	0x0800c7cc
 8001744:	0800c7d8 	.word	0x0800c7d8
 8001748:	01121001 	.word	0x01121001
=======
 80029a2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80029a6:	2b07      	cmp	r3, #7
 80029a8:	d154      	bne.n	8002a54 <runCommands+0x3b0>
	{
		char str[9] = {
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	3304      	adds	r3, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	2202      	movs	r2, #2
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <runCommands+0x3a8>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f009 fdf8 	bl	800c5b8 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	3302      	adds	r3, #2
 80029ce:	2210      	movs	r2, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	481f      	ldr	r0, [pc, #124]	; (8002a50 <runCommands+0x3ac>)
 80029d4:	f009 fdee 	bl	800c5b4 <itoa>

		UserTxBufferFS[0] = cmd;
 80029d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80029e0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fbb2 	bl	8000150 <strlen>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80029f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029fa:	3402      	adds	r4, #2
 80029fc:	f107 0318 	add.w	r3, r7, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fba5 	bl	8000150 <strlen>
 8002a06:	4602      	mov	r2, r0
 8002a08:	f107 0318 	add.w	r3, r7, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f009 fdd2 	bl	800c5b8 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd fb99 	bl	8000150 <strlen>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3302      	adds	r3, #2
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f009 f9a1 	bl	800bd74 <CDC_Transmit_FS>
 8002a32:	e24a      	b.n	8002eca <runCommands+0x826>
 8002a34:	40010800 	.word	0x40010800
 8002a38:	20000010 	.word	0x20000010
 8002a3c:	0800dae8 	.word	0x0800dae8
 8002a40:	0800db00 	.word	0x0800db00
 8002a44:	0800db18 	.word	0x0800db18
 8002a48:	0800db24 	.word	0x0800db24
 8002a4c:	0800db30 	.word	0x0800db30
 8002a50:	01121001 	.word	0x01121001
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8002a54:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d11b      	bne.n	8002a94 <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 8002a5c:	f7ff fd4a 	bl	80024f4 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8002a60:	f7ff fd54 	bl	800250c <GetTIM3>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	f107 0316 	add.w	r3, r7, #22
 8002a6c:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a72:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002a76:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	f107 0216 	add.w	r2, r7, #22
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f009 f971 	bl	800bd74 <CDC_Transmit_FS>
 8002a92:	e21a      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
<<<<<<< HEAD
 800174c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001750:	2b09      	cmp	r3, #9
 8001752:	d11b      	bne.n	800178c <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8001754:	f7ff fd4e 	bl	80011f4 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8001758:	f7ff fd58 	bl	800120c <GetTIM4>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8001766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800176e:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	3301      	adds	r3, #1
 8001776:	f107 0214 	add.w	r2, r7, #20
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2103      	movs	r1, #3
 8001784:	4618      	mov	r0, r3
 8001786:	f009 f9d9 	bl	800ab3c <CDC_Transmit_FS>
 800178a:	e1f2      	b.n	8001b72 <runCommands+0x816>
=======
 8002a94:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d11b      	bne.n	8002ad4 <runCommands+0x430>
	{
		EnableTIM4_PB6();
 8002a9c:	f7ff fd4e 	bl	800253c <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 8002aa0:	f7ff fd58 	bl	8002554 <GetTIM4>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ab6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	f107 0214 	add.w	r2, r7, #20
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8002ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aca:	2103      	movs	r1, #3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f009 f951 	bl	800bd74 <CDC_Transmit_FS>
 8002ad2:	e1fa      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
		return;
	//--------------------------------------------------------------------------
	}
<<<<<<< HEAD
	else if (cmd == 0x0A)	// Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 800178c:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001790:	2b0a      	cmp	r3, #10
 8001792:	f040 81aa 	bne.w	8001aea <runCommands+0x78e>
=======
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 8002ad4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	f040 81ad 	bne.w	8002e38 <runCommands+0x794>
>>>>>>> 6147058 (refactor)
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
<<<<<<< HEAD
 8001796:	463b      	mov	r3, r7
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	f240 8194 	bls.w	8001aca <runCommands+0x76e>
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	f200 818d 	bhi.w	8001aca <runCommands+0x76e>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d15c      	bne.n	8001876 <runCommands+0x51a>
=======
 8002ade:	463b      	mov	r3, r7
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f240 8197 	bls.w	8002e18 <runCommands+0x774>
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	f200 8190 	bhi.w	8002e18 <runCommands+0x774>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d15f      	bne.n	8002bc4 <runCommands+0x520>
>>>>>>> 6147058 (refactor)
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
<<<<<<< HEAD
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3302      	adds	r3, #2
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	f107 0312 	add.w	r3, r7, #18
 80017ca:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80017dc:	2300      	movs	r3, #0
 80017de:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 80017e2:	e01f      	b.n	8001824 <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80017e4:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3306      	adds	r3, #6
 80017ec:	1d3a      	adds	r2, r7, #4
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	f107 030e 	add.w	r3, r7, #14
 80017fa:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 80017fc:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001800:	f107 0212 	add.w	r2, r7, #18
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	f107 020e 	add.w	r2, r7, #14
 800180c:	8811      	ldrh	r1, [r2, #0]
 800180e:	4acc      	ldr	r2, [pc, #816]	; (8001b40 <runCommands+0x7e4>)
 8001810:	3304      	adds	r3, #4
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	460a      	mov	r2, r1
 8001818:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 800181a:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 800181e:	3301      	adds	r3, #1
 8001820:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 800182e:	429a      	cmp	r2, r3
 8001830:	d3d8      	bcc.n	80017e4 <runCommands+0x488>
=======
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3302      	adds	r3, #2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	f107 0312 	add.w	r3, r7, #18
 8002b12:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b2a:	e01f      	b.n	8002b6c <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002b2c:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	3306      	adds	r3, #6
 8002b34:	1d3a      	adds	r2, r7, #4
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	f107 030e 	add.w	r3, r7, #14
 8002b42:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8002b44:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b48:	f107 0212 	add.w	r2, r7, #18
 8002b4c:	8812      	ldrh	r2, [r2, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f107 020e 	add.w	r2, r7, #14
 8002b54:	8811      	ldrh	r1, [r2, #0]
 8002b56:	4acf      	ldr	r2, [pc, #828]	; (8002e94 <runCommands+0x7f0>)
 8002b58:	3304      	adds	r3, #4
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	460a      	mov	r2, r1
 8002b60:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002b62:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8002b66:	3301      	adds	r3, #1
 8002b68:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d3d8      	bcc.n	8002b2c <runCommands+0x488>
				}

				changeTableFlag = true;
 8002b7a:	4bc7      	ldr	r3, [pc, #796]	; (8002e98 <runCommands+0x7f4>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
<<<<<<< HEAD
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800183a:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	2201      	movs	r2, #1
 8001842:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	3302      	adds	r3, #2
 800184a:	f107 0212 	add.w	r2, r7, #18
 800184e:	8812      	ldrh	r2, [r2, #0]
 8001850:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	3304      	adds	r3, #4
 8001858:	f107 0210 	add.w	r2, r7, #16
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8001860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001864:	2200      	movs	r2, #0
 8001866:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f009 f964 	bl	800ab3c <CDC_Transmit_FS>
				return;
 8001874:	e17d      	b.n	8001b72 <runCommands+0x816>
=======
 8002b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b84:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002b88:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8e:	2201      	movs	r2, #1
 8002b90:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	3302      	adds	r3, #2
 8002b98:	f107 0212 	add.w	r2, r7, #18
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	f107 0210 	add.w	r2, r7, #16
 8002baa:	8812      	ldrh	r2, [r2, #0]
 8002bac:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bba:	2101      	movs	r1, #1
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 f8d9 	bl	800bd74 <CDC_Transmit_FS>
				return;
 8002bc2:	e182      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
<<<<<<< HEAD
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d15c      	bne.n	800193c <runCommands+0x5e0>
=======
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d15c      	bne.n	8002c8a <runCommands+0x5e6>
>>>>>>> 6147058 (refactor)
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
<<<<<<< HEAD
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3302      	adds	r3, #2
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f107 0312 	add.w	r3, r7, #18
 8001890:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3304      	adds	r3, #4
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80018a8:	e01f      	b.n	80018ea <runCommands+0x58e>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80018aa:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	3306      	adds	r3, #6
 80018b2:	1d3a      	adds	r2, r7, #4
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f107 030e 	add.w	r3, r7, #14
 80018c0:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 80018c2:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018c6:	f107 0212 	add.w	r2, r7, #18
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	f107 020e 	add.w	r2, r7, #14
 80018d2:	8811      	ldrh	r1, [r2, #0]
 80018d4:	4a9a      	ldr	r2, [pc, #616]	; (8001b40 <runCommands+0x7e4>)
 80018d6:	335c      	adds	r3, #92	; 0x5c
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	460a      	mov	r2, r1
 80018de:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80018e0:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3d8      	bcc.n	80018aa <runCommands+0x54e>
=======
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	f107 0312 	add.w	r3, r7, #18
 8002bde:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3304      	adds	r3, #4
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	f107 0310 	add.w	r3, r7, #16
 8002bee:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002bf6:	e01f      	b.n	8002c38 <runCommands+0x594>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002bf8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	3306      	adds	r3, #6
 8002c00:	1d3a      	adds	r2, r7, #4
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	f107 030e 	add.w	r3, r7, #14
 8002c0e:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8002c10:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c14:	f107 0212 	add.w	r2, r7, #18
 8002c18:	8812      	ldrh	r2, [r2, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f107 020e 	add.w	r2, r7, #14
 8002c20:	8811      	ldrh	r1, [r2, #0]
 8002c22:	4a9c      	ldr	r2, [pc, #624]	; (8002e94 <runCommands+0x7f0>)
 8002c24:	335c      	adds	r3, #92	; 0x5c
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002c2e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8002c32:	3301      	adds	r3, #1
 8002c34:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3d8      	bcc.n	8002bf8 <runCommands+0x554>
>>>>>>> 6147058 (refactor)
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
<<<<<<< HEAD
 80018f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001900:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001906:	2201      	movs	r2, #1
 8001908:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	3302      	adds	r3, #2
 8001910:	f107 0212 	add.w	r2, r7, #18
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191c:	3304      	adds	r3, #4
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	2200      	movs	r2, #0
 800192c:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 800192e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f009 f901 	bl	800ab3c <CDC_Transmit_FS>
				return;
 800193a:	e11a      	b.n	8001b72 <runCommands+0x816>
=======
 8002c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002c4e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	2201      	movs	r2, #1
 8002c56:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	f107 0212 	add.w	r2, r7, #18
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	f107 0210 	add.w	r2, r7, #16
 8002c70:	8812      	ldrh	r2, [r2, #0]
 8002c72:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f009 f876 	bl	800bd74 <CDC_Transmit_FS>
				return;
 8002c88:	e11f      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
<<<<<<< HEAD
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d15c      	bne.n	8001a02 <runCommands+0x6a6>
=======
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d15c      	bne.n	8002d50 <runCommands+0x6ac>
>>>>>>> 6147058 (refactor)
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
<<<<<<< HEAD
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3302      	adds	r3, #2
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f107 0312 	add.w	r3, r7, #18
 8001956:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	3304      	adds	r3, #4
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001968:	2300      	movs	r3, #0
 800196a:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 800196e:	e01f      	b.n	80019b0 <runCommands+0x654>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001970:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3306      	adds	r3, #6
 8001978:	1d3a      	adds	r2, r7, #4
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f107 030e 	add.w	r3, r7, #14
 8001986:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001988:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 800198c:	f107 0212 	add.w	r2, r7, #18
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	4413      	add	r3, r2
 8001994:	f107 020e 	add.w	r2, r7, #14
 8001998:	8811      	ldrh	r1, [r2, #0]
 800199a:	4a69      	ldr	r2, [pc, #420]	; (8001b40 <runCommands+0x7e4>)
 800199c:	33b4      	adds	r3, #180	; 0xb4
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	460a      	mov	r2, r1
 80019a4:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 80019a6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 80019aa:	3301      	adds	r3, #1
 80019ac:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3d8      	bcc.n	8001970 <runCommands+0x614>
=======
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	f107 0312 	add.w	r3, r7, #18
 8002ca4:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3304      	adds	r3, #4
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cbc:	e01f      	b.n	8002cfe <runCommands+0x65a>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002cbe:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	3306      	adds	r3, #6
 8002cc6:	1d3a      	adds	r2, r7, #4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 030e 	add.w	r3, r7, #14
 8002cd4:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8002cd6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cda:	f107 0212 	add.w	r2, r7, #18
 8002cde:	8812      	ldrh	r2, [r2, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f107 020e 	add.w	r2, r7, #14
 8002ce6:	8811      	ldrh	r1, [r2, #0]
 8002ce8:	4a6a      	ldr	r2, [pc, #424]	; (8002e94 <runCommands+0x7f0>)
 8002cea:	33b4      	adds	r3, #180	; 0xb4
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8002cf4:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8002cfe:	f107 0310 	add.w	r3, r7, #16
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3d8      	bcc.n	8002cbe <runCommands+0x61a>
>>>>>>> 6147058 (refactor)
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
<<<<<<< HEAD
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80019c6:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	2201      	movs	r2, #1
 80019ce:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 80019d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d4:	3302      	adds	r3, #2
 80019d6:	f107 0212 	add.w	r2, r7, #18
 80019da:	8812      	ldrh	r2, [r2, #0]
 80019dc:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	3304      	adds	r3, #4
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	8812      	ldrh	r2, [r2, #0]
 80019ea:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80019f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f009 f89e 	bl	800ab3c <CDC_Transmit_FS>
				return;
 8001a00:	e0b7      	b.n	8001b72 <runCommands+0x816>
=======
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002d14:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d22:	3302      	adds	r3, #2
 8002d24:	f107 0212 	add.w	r2, r7, #18
 8002d28:	8812      	ldrh	r2, [r2, #0]
 8002d2a:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	3304      	adds	r3, #4
 8002d32:	f107 0210 	add.w	r2, r7, #16
 8002d36:	8812      	ldrh	r2, [r2, #0]
 8002d38:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3e:	2200      	movs	r2, #0
 8002d40:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f009 f813 	bl	800bd74 <CDC_Transmit_FS>
				return;
 8002d4e:	e0bc      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
<<<<<<< HEAD
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d15d      	bne.n	8001aca <runCommands+0x76e>
=======
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d15d      	bne.n	8002e18 <runCommands+0x774>
>>>>>>> 6147058 (refactor)
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
<<<<<<< HEAD
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3302      	adds	r3, #2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0312 	add.w	r3, r7, #18
 8001a1c:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3304      	adds	r3, #4
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001a34:	e020      	b.n	8001a78 <runCommands+0x71c>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001a36:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	3306      	adds	r3, #6
 8001a3e:	1d3a      	adds	r2, r7, #4
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f107 030e 	add.w	r3, r7, #14
 8001a4c:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001a4e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a52:	f107 0212 	add.w	r2, r7, #18
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f107 020e 	add.w	r2, r7, #14
 8001a5e:	8811      	ldrh	r1, [r2, #0]
 8001a60:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <runCommands+0x7e4>)
 8001a62:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001a6e:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001a72:	3301      	adds	r3, #1
 8001a74:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d3d7      	bcc.n	8001a36 <runCommands+0x6da>
=======
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3302      	adds	r3, #2
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	f107 0312 	add.w	r3, r7, #18
 8002d6a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8002d6c:	1d3b      	adds	r3, r7, #4
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3304      	adds	r3, #4
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002d82:	e020      	b.n	8002dc6 <runCommands+0x722>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8002d84:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	3306      	adds	r3, #6
 8002d8c:	1d3a      	adds	r2, r7, #4
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	f107 030e 	add.w	r3, r7, #14
 8002d9a:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8002d9c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002da0:	f107 0212 	add.w	r2, r7, #18
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	f107 020e 	add.w	r2, r7, #14
 8002dac:	8811      	ldrh	r1, [r2, #0]
 8002dae:	4a39      	ldr	r2, [pc, #228]	; (8002e94 <runCommands+0x7f0>)
 8002db0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	460a      	mov	r2, r1
 8002dba:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8002dbc:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3d7      	bcc.n	8002d84 <runCommands+0x6e0>
>>>>>>> 6147058 (refactor)
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
<<<<<<< HEAD
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a8e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a94:	2201      	movs	r2, #1
 8001a96:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f107 0212 	add.w	r2, r7, #18
 8001aa2:	8812      	ldrh	r2, [r2, #0]
 8001aa4:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aaa:	3304      	adds	r3, #4
 8001aac:	f107 0210 	add.w	r2, r7, #16
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	2200      	movs	r2, #0
 8001aba:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f009 f83a 	bl	800ab3c <CDC_Transmit_FS>
				return;
 8001ac8:	e053      	b.n	8001b72 <runCommands+0x816>
=======
 8002dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ddc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8002dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002de2:	2201      	movs	r2, #1
 8002de4:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8002de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dea:	3302      	adds	r3, #2
 8002dec:	f107 0212 	add.w	r2, r7, #18
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8002df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df8:	3304      	adds	r3, #4
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	8812      	ldrh	r2, [r2, #0]
 8002e00:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	2200      	movs	r2, #0
 8002e08:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8002e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f008 ffaf 	bl	800bd74 <CDC_Transmit_FS>
				return;
 8002e16:	e058      	b.n	8002eca <runCommands+0x826>
>>>>>>> 6147058 (refactor)
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
<<<<<<< HEAD
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001ad2:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	2201      	movs	r2, #1
 8001ada:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f009 f82a 	bl	800ab3c <CDC_Transmit_FS>
		return;
 8001ae8:	e043      	b.n	8001b72 <runCommands+0x816>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8001aea:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001aee:	2b0b      	cmp	r3, #11
 8001af0:	d03c      	beq.n	8001b6c <runCommands+0x810>
=======
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e26:	2201      	movs	r2, #1
 8002e28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	2102      	movs	r1, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 ff9f 	bl	800bd74 <CDC_Transmit_FS>
		return;
 8002e36:	e048      	b.n	8002eca <runCommands+0x826>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8002e38:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d041      	beq.n	8002ec4 <runCommands+0x820>
>>>>>>> 6147058 (refactor)
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
<<<<<<< HEAD
 8001af2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d03a      	beq.n	8001b70 <runCommands+0x814>
=======
 8002e40:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d03f      	beq.n	8002ec8 <runCommands+0x824>
>>>>>>> 6147058 (refactor)
	{
		return;
	//--------------------------------------------------------------------------
	}
<<<<<<< HEAD
	else if (cmd == 0x0D)	// TODO Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001afa:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001afe:	2b0d      	cmp	r3, #13
 8001b00:	d137      	bne.n	8001b72 <runCommands+0x816>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8001b02:	463b      	mov	r3, r7
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d91d      	bls.n	8001b48 <runCommands+0x7ec>
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d117      	bne.n	8001b48 <runCommands+0x7ec>
		{
			//TODO: Функция записи фо флеш.
			changeTableFlag = true;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <runCommands+0x7e8>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]

				UserTxBufferFS[0] = cmd;
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b26:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	2102      	movs	r1, #2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f009 f800 	bl	800ab3c <CDC_Transmit_FS>
				return;
 8001b3c:	e019      	b.n	8001b72 <runCommands+0x816>
 8001b3e:	bf00      	nop
 8001b40:	200004b4 	.word	0x200004b4
 8001b44:	20000273 	.word	0x20000273
=======
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8002e48:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8002e4c:	2b0d      	cmp	r3, #13
 8002e4e:	d13c      	bne.n	8002eca <runCommands+0x826>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8002e50:	463b      	mov	r3, r7
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d922      	bls.n	8002ea0 <runCommands+0x7fc>
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d11c      	bne.n	8002ea0 <runCommands+0x7fc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <runCommands+0x7f4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8002e6c:	480b      	ldr	r0, [pc, #44]	; (8002e9c <runCommands+0x7f8>)
 8002e6e:	f009 fbb9 	bl	800c5e4 <iprintf>
			UserTxBufferFS[0] = cmd;
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002e7a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8002e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e80:	2200      	movs	r2, #0
 8002e82:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	2102      	movs	r1, #2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f008 ff72 	bl	800bd74 <CDC_Transmit_FS>
			return;
 8002e90:	e01b      	b.n	8002eca <runCommands+0x826>
 8002e92:	bf00      	nop
 8002e94:	200004ac 	.word	0x200004ac
 8002e98:	20000254 	.word	0x20000254
 8002e9c:	0800db34 	.word	0x0800db34
>>>>>>> 6147058 (refactor)
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
<<<<<<< HEAD
 8001b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b50:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	2201      	movs	r2, #1
 8001b58:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f008 ffeb 	bl	800ab3c <CDC_Transmit_FS>
		return;
 8001b66:	e004      	b.n	8001b72 <runCommands+0x816>
		return;
 8001b68:	bf00      	nop
 8001b6a:	e002      	b.n	8001b72 <runCommands+0x816>
		return;
 8001b6c:	bf00      	nop
 8001b6e:	e000      	b.n	8001b72 <runCommands+0x816>
		return;
 8001b70:	bf00      	nop
=======
 8002ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8002ea8:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8002eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f008 ff5b 	bl	800bd74 <CDC_Transmit_FS>
		return;
 8002ebe:	e004      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec0:	bf00      	nop
 8002ec2:	e002      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec4:	bf00      	nop
 8002ec6:	e000      	b.n	8002eca <runCommands+0x826>
		return;
 8002ec8:	bf00      	nop
>>>>>>> 6147058 (refactor)
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
<<<<<<< HEAD
 8001b72:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
 8001b7a:	bf00      	nop

08001b7c <main>:
=======
 8002eca:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <main>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	; 0x28
 8001b80:	af02      	add	r7, sp, #8
=======
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08a      	sub	sp, #40	; 0x28
 8002ed8:	af02      	add	r7, sp, #8
>>>>>>> 6147058 (refactor)
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
<<<<<<< HEAD
 8001b82:	f000 fffb 	bl	8002b7c <HAL_Init>
=======
 8002eda:	f000 ff9d 	bl	8003e18 <HAL_Init>
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
<<<<<<< HEAD
 8001b86:	f7ff f99d 	bl	8000ec4 <DWT_Init>
=======
 8002ede:	f7ff f9ab 	bl	8002238 <DWT_Init>
>>>>>>> 6147058 (refactor)
	//--------------------------------------------------------------------------

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
<<<<<<< HEAD
 8001b8a:	f000 fb1d 	bl	80021c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
=======
 8002ee2:	f000 fabd 	bl	8003460 <SystemClock_Config>
//-------------------------------------------------------------------------
>>>>>>> 6147058 (refactor)

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
<<<<<<< HEAD
 8001b8e:	f000 fcc7 	bl	8002520 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001b92:	f000 fbc9 	bl	8002328 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8001b96:	f008 ff0f 	bl	800a9b8 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8001b9a:	f000 fb73 	bl	8002284 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001b9e:	f000 fbfb 	bl	8002398 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001ba2:	f000 fc5b 	bl	800245c <MX_TIM4_Init>
	MX_CRC_Init();
 8001ba6:	f000 fbab 	bl	8002300 <MX_CRC_Init>
=======
 8002ee6:	f000 fc67 	bl	80037b8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8002eea:	f000 fb69 	bl	80035c0 <MX_SPI1_Init>
	MX_USB_DEVICE_Init();
 8002eee:	f008 fe7f 	bl	800bbf0 <MX_USB_DEVICE_Init>
	MX_ADC1_Init();
 8002ef2:	f000 fb13 	bl	800351c <MX_ADC1_Init>
	MX_TIM3_Init();
 8002ef6:	f000 fb9b 	bl	8003630 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002efa:	f000 fbfb 	bl	80036f4 <MX_TIM4_Init>
	MX_CRC_Init();
 8002efe:	f000 fb4b 	bl	8003598 <MX_CRC_Init>
>>>>>>> 6147058 (refactor)
	/* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
<<<<<<< HEAD
 8001baa:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <main+0x2ac>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4b9e      	ldr	r3, [pc, #632]	; (8001e2c <main+0x2b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4b9d      	ldr	r3, [pc, #628]	; (8001e30 <main+0x2b4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a9c      	ldr	r2, [pc, #624]	; (8001e34 <main+0x2b8>)
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460a      	mov	r2, r1
 8001bce:	499a      	ldr	r1, [pc, #616]	; (8001e38 <main+0x2bc>)
 8001bd0:	489a      	ldr	r0, [pc, #616]	; (8001e3c <main+0x2c0>)
 8001bd2:	f009 fc03 	bl	800b3dc <siprintf>
	printf((uint8_t *)buffer);
 8001bd6:	4899      	ldr	r0, [pc, #612]	; (8001e3c <main+0x2c0>)
 8001bd8:	f009 fbe8 	bl	800b3ac <iprintf>
=======
 8002f02:	4ba7      	ldr	r3, [pc, #668]	; (80031a0 <main+0x2cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <main+0x2d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	4ba5      	ldr	r3, [pc, #660]	; (80031a8 <main+0x2d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4aa4      	ldr	r2, [pc, #656]	; (80031ac <main+0x2d8>)
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	9201      	str	r2, [sp, #4]
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	4603      	mov	r3, r0
 8002f24:	460a      	mov	r2, r1
 8002f26:	49a2      	ldr	r1, [pc, #648]	; (80031b0 <main+0x2dc>)
 8002f28:	48a2      	ldr	r0, [pc, #648]	; (80031b4 <main+0x2e0>)
 8002f2a:	f009 fbe9 	bl	800c700 <siprintf>
	printf((uint8_t *)buffer);
 8002f2e:	48a1      	ldr	r0, [pc, #644]	; (80031b4 <main+0x2e0>)
 8002f30:	f009 fb58 	bl	800c5e4 <iprintf>
>>>>>>> 6147058 (refactor)
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
<<<<<<< HEAD
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4898      	ldr	r0, [pc, #608]	; (8001e40 <main+0x2c4>)
 8001be0:	f004 fdb8 	bl	8006754 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001be4:	2104      	movs	r1, #4
 8001be6:	4896      	ldr	r0, [pc, #600]	; (8001e40 <main+0x2c4>)
 8001be8:	f004 fdb4 	bl	8006754 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001bec:	2100      	movs	r1, #0
 8001bee:	4895      	ldr	r0, [pc, #596]	; (8001e44 <main+0x2c8>)
 8001bf0:	f004 fdb0 	bl	8006754 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4893      	ldr	r0, [pc, #588]	; (8001e44 <main+0x2c8>)
 8001bf8:	f004 fdac 	bl	8006754 <HAL_TIM_IC_Start_IT>
=======
 8002f34:	2100      	movs	r1, #0
 8002f36:	48a0      	ldr	r0, [pc, #640]	; (80031b8 <main+0x2e4>)
 8002f38:	f004 fd28 	bl	800798c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	489e      	ldr	r0, [pc, #632]	; (80031b8 <main+0x2e4>)
 8002f40:	f004 fd24 	bl	800798c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002f44:	2100      	movs	r1, #0
 8002f46:	489d      	ldr	r0, [pc, #628]	; (80031bc <main+0x2e8>)
 8002f48:	f004 fd20 	bl	800798c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002f4c:	2104      	movs	r1, #4
 8002f4e:	489b      	ldr	r0, [pc, #620]	; (80031bc <main+0x2e8>)
 8002f50:	f004 fd1c 	bl	800798c <HAL_TIM_IC_Start_IT>
>>>>>>> 6147058 (refactor)
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
<<<<<<< HEAD
 8001bfc:	f7ff f9ea 	bl	8000fd4 <SetAllDAC>
=======
 8002f54:	f7ff f9e2 	bl	800231c <SetAllDAC>
>>>>>>> 6147058 (refactor)
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
<<<<<<< HEAD
 8001c00:	4891      	ldr	r0, [pc, #580]	; (8001e48 <main+0x2cc>)
 8001c02:	f001 fc2b 	bl	800345c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001c06:	4890      	ldr	r0, [pc, #576]	; (8001e48 <main+0x2cc>)
 8001c08:	f001 f916 	bl	8002e38 <HAL_ADC_Start_IT>
//**************************************************************************


	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;	  // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <main+0x2d0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <main+0x2d0>)
 8001c14:	4a8e      	ldr	r2, [pc, #568]	; (8001e50 <main+0x2d4>)
 8001c16:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;						  // кол-во страниц для стирания
 8001c18:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <main+0x2d0>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	60da      	str	r2, [r3, #12]
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------

	// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 8001c1e:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <main+0x2d4>)
 8001c20:	61fb      	str	r3, [r7, #28]
	l_Error = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
	l_Index = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001c2a:	e00b      	b.n	8001c44 <main+0xc8>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4988      	ldr	r1, [pc, #544]	; (8001e54 <main+0x2d8>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4a84      	ldr	r2, [pc, #528]	; (8001e58 <main+0x2dc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d9ef      	bls.n	8001c2c <main+0xb0>
=======
 8002f58:	4899      	ldr	r0, [pc, #612]	; (80031c0 <main+0x2ec>)
 8002f5a:	f001 fbcd 	bl	80046f8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8002f5e:	4898      	ldr	r0, [pc, #608]	; (80031c0 <main+0x2ec>)
 8002f60:	f001 f8b8 	bl	80040d4 <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE
	// Чтение DevNVRAM
	uint32_t l_Address = FLASH_TABLE_START_ADDR;
 8002f64:	4b97      	ldr	r3, [pc, #604]	; (80031c4 <main+0x2f0>)
 8002f66:	61fb      	str	r3, [r7, #28]
	uint32_t l_Error = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
	uint32_t l_Index = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61bb      	str	r3, [r7, #24]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f70:	e00b      	b.n	8002f8a <main+0xb6>
	{
		DevNVRAM.data32[l_Index] = *(__IO uint32_t *)l_Address;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4994      	ldr	r1, [pc, #592]	; (80031c8 <main+0x2f4>)
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		l_Index = l_Index + 1;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	3304      	adds	r3, #4
 8002f88:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	4a8f      	ldr	r2, [pc, #572]	; (80031cc <main+0x2f8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d9ef      	bls.n	8002f72 <main+0x9e>
>>>>>>> 6147058 (refactor)
	}

//--------------------------------------------------------------------------
	// если после чтения майджик кей не найден, то это первый запуск

<<<<<<< HEAD
	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE)
 8001c4c:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <main+0x2d8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a82      	ldr	r2, [pc, #520]	; (8001e5c <main+0x2e0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	f000 80af 	beq.w	8001db6 <main+0x23a>
=======
	if (DevNVRAM.calibration_table.MagicNum != 0)
 8002f92:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <main+0x2f4>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80b2 	beq.w	8003100 <main+0x22c>
>>>>>>> 6147058 (refactor)
	{
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
<<<<<<< HEAD
 8001c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	487d      	ldr	r0, [pc, #500]	; (8001e54 <main+0x2d8>)
 8001c60:	f009 fb9c 	bl	800b39c <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!
=======
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4889      	ldr	r0, [pc, #548]	; (80031c8 <main+0x2f4>)
 8002fa4:	f009 fb16 	bl	800c5d4 <memset>
>>>>>>> 6147058 (refactor)

		// ЗАГЛУШКА
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
<<<<<<< HEAD
 8001c64:	2300      	movs	r3, #0
 8001c66:	75fb      	strb	r3, [r7, #23]
 8001c68:	e00b      	b.n	8001c82 <main+0x106>
		{
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	7dfa      	ldrb	r2, [r7, #23]
 8001c6e:	b291      	uxth	r1, r2
 8001c70:	4a78      	ldr	r2, [pc, #480]	; (8001e54 <main+0x2d8>)
 8001c72:	3304      	adds	r3, #4
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	460a      	mov	r2, r1
 8001c7a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b57      	cmp	r3, #87	; 0x57
 8001c86:	d9f0      	bls.n	8001c6a <main+0xee>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75bb      	strb	r3, [r7, #22]
 8001c8c:	e00b      	b.n	8001ca6 <main+0x12a>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001c8e:	7dbb      	ldrb	r3, [r7, #22]
 8001c90:	7dba      	ldrb	r2, [r7, #22]
 8001c92:	b291      	uxth	r1, r2
 8001c94:	4a6f      	ldr	r2, [pc, #444]	; (8001e54 <main+0x2d8>)
 8001c96:	335c      	adds	r3, #92	; 0x5c
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	460a      	mov	r2, r1
 8001c9e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8001ca0:	7dbb      	ldrb	r3, [r7, #22]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	75bb      	strb	r3, [r7, #22]
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	2b57      	cmp	r3, #87	; 0x57
 8001caa:	d9f0      	bls.n	8001c8e <main+0x112>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	757b      	strb	r3, [r7, #21]
 8001cb0:	e00b      	b.n	8001cca <main+0x14e>
		{
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8001cb2:	7d7b      	ldrb	r3, [r7, #21]
 8001cb4:	7d7a      	ldrb	r2, [r7, #21]
 8001cb6:	b291      	uxth	r1, r2
 8001cb8:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <main+0x2d8>)
 8001cba:	33b4      	adds	r3, #180	; 0xb4
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001cc4:	7d7b      	ldrb	r3, [r7, #21]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	757b      	strb	r3, [r7, #21]
 8001cca:	7d7b      	ldrb	r3, [r7, #21]
 8001ccc:	2ba2      	cmp	r3, #162	; 0xa2
 8001cce:	d9f0      	bls.n	8001cb2 <main+0x136>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	753b      	strb	r3, [r7, #20]
 8001cd4:	e00b      	b.n	8001cee <main+0x172>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001cd6:	7d3b      	ldrb	r3, [r7, #20]
 8001cd8:	7d3a      	ldrb	r2, [r7, #20]
 8001cda:	b291      	uxth	r1, r2
 8001cdc:	4a5d      	ldr	r2, [pc, #372]	; (8001e54 <main+0x2d8>)
 8001cde:	335c      	adds	r3, #92	; 0x5c
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	460a      	mov	r2, r1
 8001ce6:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	753b      	strb	r3, [r7, #20]
 8001cee:	7d3b      	ldrb	r3, [r7, #20]
 8001cf0:	2ba2      	cmp	r3, #162	; 0xa2
 8001cf2:	d9f0      	bls.n	8001cd6 <main+0x15a>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <main+0x2d8>)
 8001cf6:	2206      	movs	r2, #6
 8001cf8:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <main+0x2d8>)
 8001cfc:	2205      	movs	r2, #5
 8001cfe:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 недел	я + год + порядковый номер изготовления
 8001d00:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <main+0x2d8>)
 8001d02:	4a57      	ldr	r2, [pc, #348]	; (8001e60 <main+0x2e4>)
 8001d04:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <main+0x2d8>)
 8001d08:	4a54      	ldr	r2, [pc, #336]	; (8001e5c <main+0x2e0>)
 8001d0a:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8001d0c:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <main+0x2d8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <main+0x2d8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
=======
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
 8002fac:	e00b      	b.n	8002fc6 <main+0xf2>
		{
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	7dfa      	ldrb	r2, [r7, #23]
 8002fb2:	b291      	uxth	r1, r2
 8002fb4:	4a84      	ldr	r2, [pc, #528]	; (80031c8 <main+0x2f4>)
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fc0:	7dfb      	ldrb	r3, [r7, #23]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
 8002fc8:	2b57      	cmp	r3, #87	; 0x57
 8002fca:	d9f0      	bls.n	8002fae <main+0xda>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75bb      	strb	r3, [r7, #22]
 8002fd0:	e00b      	b.n	8002fea <main+0x116>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8002fd2:	7dbb      	ldrb	r3, [r7, #22]
 8002fd4:	7dba      	ldrb	r2, [r7, #22]
 8002fd6:	b291      	uxth	r1, r2
 8002fd8:	4a7b      	ldr	r2, [pc, #492]	; (80031c8 <main+0x2f4>)
 8002fda:	335c      	adds	r3, #92	; 0x5c
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++)
 8002fe4:	7dbb      	ldrb	r3, [r7, #22]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	75bb      	strb	r3, [r7, #22]
 8002fea:	7dbb      	ldrb	r3, [r7, #22]
 8002fec:	2b57      	cmp	r3, #87	; 0x57
 8002fee:	d9f0      	bls.n	8002fd2 <main+0xfe>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	757b      	strb	r3, [r7, #21]
 8002ff4:	e00b      	b.n	800300e <main+0x13a>
		{
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8002ff6:	7d7b      	ldrb	r3, [r7, #21]
 8002ff8:	7d7a      	ldrb	r2, [r7, #21]
 8002ffa:	b291      	uxth	r1, r2
 8002ffc:	4a72      	ldr	r2, [pc, #456]	; (80031c8 <main+0x2f4>)
 8002ffe:	33b4      	adds	r3, #180	; 0xb4
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	460a      	mov	r2, r1
 8003006:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8003008:	7d7b      	ldrb	r3, [r7, #21]
 800300a:	3301      	adds	r3, #1
 800300c:	757b      	strb	r3, [r7, #21]
 800300e:	7d7b      	ldrb	r3, [r7, #21]
 8003010:	2ba2      	cmp	r3, #162	; 0xa2
 8003012:	d9f0      	bls.n	8002ff6 <main+0x122>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	753b      	strb	r3, [r7, #20]
 8003018:	e00b      	b.n	8003032 <main+0x15e>
		{
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 800301a:	7d3b      	ldrb	r3, [r7, #20]
 800301c:	7d3a      	ldrb	r2, [r7, #20]
 800301e:	b291      	uxth	r1, r2
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <main+0x2f4>)
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	460a      	mov	r2, r1
 800302a:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++)
 800302c:	7d3b      	ldrb	r3, [r7, #20]
 800302e:	3301      	adds	r3, #1
 8003030:	753b      	strb	r3, [r7, #20]
 8003032:	7d3b      	ldrb	r3, [r7, #20]
 8003034:	2ba2      	cmp	r3, #162	; 0xa2
 8003036:	d9f0      	bls.n	800301a <main+0x146>
		}

		crete_calibration_table(&DevNVRAM);
 8003038:	4863      	ldr	r0, [pc, #396]	; (80031c8 <main+0x2f4>)
 800303a:	f7fd fe91 	bl	8000d60 <crete_calibration_table>

		DevNVRAM.calibration_table.Hardwire = 0x06;
 800303e:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <main+0x2f4>)
 8003040:	2206      	movs	r2, #6
 8003042:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <main+0x2f4>)
 8003046:	2205      	movs	r2, #5
 8003048:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN = 0x1121001; //11 недел	я + год + порядковый номер изготовления
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <main+0x2f4>)
 800304c:	4a60      	ldr	r2, [pc, #384]	; (80031d0 <main+0x2fc>)
 800304e:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8003050:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <main+0x2f4>)
 8003052:	4a60      	ldr	r2, [pc, #384]	; (80031d4 <main+0x300>)
 8003054:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8003056:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <main+0x2f4>)
 8003058:	2200      	movs	r2, #0
 800305a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));//DONE: нужно отправлять длину кратную 32b! -  по какой то причине в этом проекте не работает CRC!!!
 800305e:	4b5a      	ldr	r3, [pc, #360]	; (80031c8 <main+0x2f4>)
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
>>>>>>> 6147058 (refactor)

		//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
<<<<<<< HEAD
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <main+0x2d4>)
 8001d1e:	61fb      	str	r3, [r7, #28]
		l_Error = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d28:	e010      	b.n	8001d4c <main+0x1d0>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	; (8001e54 <main+0x2d8>)
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d002      	beq.n	8001d40 <main+0x1c4>
			{
				l_Error++;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
			l_Address = l_Address + 4;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	61fb      	str	r3, [r7, #28]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	4a42      	ldr	r2, [pc, #264]	; (8001e58 <main+0x2dc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d9ea      	bls.n	8001d2a <main+0x1ae>
		}

		if (l_Error > 0)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d02d      	beq.n	8001db6 <main+0x23a>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8001d5a:	f001 fdf1 	bl	8003940 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	4619      	mov	r1, r3
 8001d62:	483a      	ldr	r0, [pc, #232]	; (8001e4c <main+0x2d0>)
 8001d64:	f001 fed4 	bl	8003b10 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <main+0x2d4>)
 8001d6a:	61fb      	str	r3, [r7, #28]
			l_Error = 0x00;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
			l_Index = 0x00;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001d74:	e019      	b.n	8001daa <main+0x22e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001d76:	4a37      	ldr	r2, [pc, #220]	; (8001e54 <main+0x2d8>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	69f9      	ldr	r1, [r7, #28]
 8001d86:	2002      	movs	r0, #2
 8001d88:	f001 fd6a 	bl	8003860 <HAL_FLASH_Program>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <main+0x21c>
				{
					l_Error++;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3301      	adds	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
				}

				l_Address = l_Address + 4;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	61fb      	str	r3, [r7, #28]
				l_Index = l_Index + 1;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
				HAL_Delay(10);
 8001da4:	200a      	movs	r0, #10
 8001da6:	f000 ff4b 	bl	8002c40 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <main+0x2dc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d9e1      	bls.n	8001d76 <main+0x1fa>
			}
			HAL_FLASH_Lock();
 8001db2:	f001 fdeb 	bl	800398c <HAL_FLASH_Lock>

	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

	// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <main+0x2d4>)
 8001db8:	61fb      	str	r3, [r7, #28]
	l_Error = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
	l_Index = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001dc2:	e010      	b.n	8001de6 <main+0x26a>
	{
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001dc4:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <main+0x2d8>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d002      	beq.n	8001dda <main+0x25e>
		{
			l_Error++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
		}
		l_Index = l_Index + 1;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
		l_Address = l_Address + 4;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3304      	adds	r3, #4
 8001de4:	61fb      	str	r3, [r7, #28]
	while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <main+0x2dc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d9ea      	bls.n	8001dc4 <main+0x248>
	}

	if (l_Error > 0)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d057      	beq.n	8001ea4 <main+0x328>
	{ // конфигурация изменилась сохраняем
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8001df4:	f001 fda4 	bl	8003940 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4813      	ldr	r0, [pc, #76]	; (8001e4c <main+0x2d0>)
 8001dfe:	f001 fe87 	bl	8003b10 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <main+0x2d4>)
 8001e04:	61fb      	str	r3, [r7, #28]
		l_Error = 0x00;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
		l_Index = 0x00;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <main+0x2d8>)
 8001e10:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <main+0x2d8>)
 8001e18:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <main+0x2d8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e24:	e038      	b.n	8001e98 <main+0x31c>
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	20000004 	.word	0x20000004
 8001e30:	20000008 	.word	0x20000008
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	0800c7dc 	.word	0x0800c7dc
 8001e3c:	2000020c 	.word	0x2000020c
 8001e40:	20000904 	.word	0x20000904
 8001e44:	200008b4 	.word	0x200008b4
 8001e48:	2000094c 	.word	0x2000094c
 8001e4c:	20000274 	.word	0x20000274
 8001e50:	0801fc00 	.word	0x0801fc00
 8001e54:	200004b4 	.word	0x200004b4
 8001e58:	0801ffff 	.word	0x0801ffff
 8001e5c:	48151623 	.word	0x48151623
 8001e60:	01121001 	.word	0x01121001
		{
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								  DevNVRAM.data32[l_Index]) != HAL_OK)
 8001e64:	4aa5      	ldr	r2, [pc, #660]	; (80020fc <main+0x580>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	69f9      	ldr	r1, [r7, #28]
 8001e74:	2002      	movs	r0, #2
 8001e76:	f001 fcf3 	bl	8003860 <HAL_FLASH_Program>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <main+0x30a>
			{
				l_Error++;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3301      	adds	r3, #1
 8001e84:	607b      	str	r3, [r7, #4]
			}

			l_Address = l_Address + 4;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	61fb      	str	r3, [r7, #28]
			l_Index = l_Index + 1;
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	61bb      	str	r3, [r7, #24]
			HAL_Delay(10);
 8001e92:	200a      	movs	r0, #10
 8001e94:	f000 fed4 	bl	8002c40 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	4a99      	ldr	r2, [pc, #612]	; (8002100 <main+0x584>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d9e1      	bls.n	8001e64 <main+0x2e8>
		}
		HAL_FLASH_Lock();
 8001ea0:	f001 fd74 	bl	800398c <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	f000 fecb 	bl	8002c40 <HAL_Delay>
=======
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <main+0x2f0>)
 8003068:	61fb      	str	r3, [r7, #28]
		l_Error = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]

		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003072:	e010      	b.n	8003096 <main+0x1c2>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <main+0x2f4>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d002      	beq.n	800308a <main+0x1b6>
			{
				l_Error++;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	3301      	adds	r3, #1
 800308e:	61bb      	str	r3, [r7, #24]
			l_Address = l_Address + 4;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3304      	adds	r3, #4
 8003094:	61fb      	str	r3, [r7, #28]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <main+0x2f8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d9ea      	bls.n	8003074 <main+0x1a0>
		}

		if (l_Error > 0)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02d      	beq.n	8003100 <main+0x22c>
		{ // конфигурация изменилась сохраняем
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 80030a4:	f001 fd68 	bl	8004b78 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 80030a8:	1d3b      	adds	r3, r7, #4
 80030aa:	4619      	mov	r1, r3
 80030ac:	484a      	ldr	r0, [pc, #296]	; (80031d8 <main+0x304>)
 80030ae:	f001 fe4b 	bl	8004d48 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <main+0x2f0>)
 80030b4:	61fb      	str	r3, [r7, #28]
			l_Error = 0x00;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
			l_Index = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]

			while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030be:	e019      	b.n	80030f4 <main+0x220>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
									  DevNVRAM.data32[l_Index]) != HAL_OK)
 80030c0:	4a41      	ldr	r2, [pc, #260]	; (80031c8 <main+0x2f4>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	69f9      	ldr	r1, [r7, #28]
 80030d0:	2002      	movs	r0, #2
 80030d2:	f001 fce1 	bl	8004a98 <HAL_FLASH_Program>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <main+0x20e>
				{
					l_Error++;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3301      	adds	r3, #1
 80030e0:	607b      	str	r3, [r7, #4]
				}

				l_Address = l_Address + 4;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3304      	adds	r3, #4
 80030e6:	61fb      	str	r3, [r7, #28]
				l_Index = l_Index + 1;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
				HAL_Delay(10);
 80030ee:	200a      	movs	r0, #10
 80030f0:	f000 fef4 	bl	8003edc <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4a35      	ldr	r2, [pc, #212]	; (80031cc <main+0x2f8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d9e1      	bls.n	80030c0 <main+0x1ec>
			}
			HAL_FLASH_Lock();
 80030fc:	f001 fd62 	bl	8004bc4 <HAL_FLASH_Lock>
	} //если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
	// TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
	//--------------------------------------------------------------------------
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
>>>>>>> 6147058 (refactor)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
<<<<<<< HEAD
		//		if()
	if(changeTableFlag){
 8001eaa:	4b96      	ldr	r3, [pc, #600]	; (8002104 <main+0x588>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d065      	beq.n	8001f7e <main+0x402>
		changeTableFlag = false;
 8001eb2:	4b94      	ldr	r3, [pc, #592]	; (8002104 <main+0x588>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

		l_Address = FLASH_TABLE_START_ADDR;
 8001eb8:	4b93      	ldr	r3, [pc, #588]	; (8002108 <main+0x58c>)
 8001eba:	61fb      	str	r3, [r7, #28]
		l_Error = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
		l_Index = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
		//Читаем и сравниваем
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001ec4:	e010      	b.n	8001ee8 <main+0x36c>
		{
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 8001ec6:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <main+0x580>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d002      	beq.n	8001edc <main+0x360>
			{
				l_Error++;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
			}
			l_Index = l_Index + 1;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
			l_Address = l_Address + 4;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	61fb      	str	r3, [r7, #28]
		while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	4a85      	ldr	r2, [pc, #532]	; (8002100 <main+0x584>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d9ea      	bls.n	8001ec6 <main+0x34a>
		}
=======
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8003104:	f000 fee0 	bl	8003ec8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003112:	4293      	cmp	r3, r2
 8003114:	f240 808f 	bls.w	8003236 <main+0x362>
		{
#if TEST_FLASH_TABLE

			if (changeTableFlag)
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <main+0x308>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 8087 	beq.w	8003230 <main+0x35c>
			{
				changeTableFlag = false;
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <main+0x308>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
				printf("write");
 8003128:	482d      	ldr	r0, [pc, #180]	; (80031e0 <main+0x30c>)
 800312a:	f009 fa5b 	bl	800c5e4 <iprintf>
				// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
>>>>>>> 6147058 (refactor)

		if (l_Error > 0)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d043      	beq.n	8001f7e <main+0x402>
		{ // конфигурация изменилась сохраняем
			printf("Ошибка чтения таблицы :%i", l_Error);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4884      	ldr	r0, [pc, #528]	; (800210c <main+0x590>)
 8001efc:	f009 fa56 	bl	800b3ac <iprintf>
			if (l_Error > 0)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d038      	beq.n	8001f78 <main+0x3fc>
			{ // конфигурация изменилась сохраняем
				// Готовим к записи в память
				HAL_FLASH_Unlock();
 8001f06:	f001 fd1b 	bl	8003940 <HAL_FLASH_Unlock>
				// Очищаем страницу памяти
				HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4880      	ldr	r0, [pc, #512]	; (8002110 <main+0x594>)
 8001f10:	f001 fdfe 	bl	8003b10 <HAL_FLASHEx_Erase>
				//Пишем данные в память
				l_Address = FLASH_TABLE_START_ADDR;
<<<<<<< HEAD
 8001f14:	4b7c      	ldr	r3, [pc, #496]	; (8002108 <main+0x58c>)
 8001f16:	61fb      	str	r3, [r7, #28]
				l_Error = 0x00;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
				l_Index = 0x00;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61bb      	str	r3, [r7, #24]

				DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001f20:	4b76      	ldr	r3, [pc, #472]	; (80020fc <main+0x580>)
 8001f22:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a74      	ldr	r2, [pc, #464]	; (80020fc <main+0x580>)
 8001f2a:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
				DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <main+0x580>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

				while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001f36:	e019      	b.n	8001f6c <main+0x3f0>
				{
					if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,DevNVRAM.data32[l_Index]) != HAL_OK)
 8001f38:	4a70      	ldr	r2, [pc, #448]	; (80020fc <main+0x580>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	461a      	mov	r2, r3
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	69f9      	ldr	r1, [r7, #28]
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f001 fc89 	bl	8003860 <HAL_FLASH_Program>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <main+0x3de>
					{
						l_Error++;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
					}

					l_Address = l_Address + 4;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	61fb      	str	r3, [r7, #28]
					l_Index = l_Index + 1;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61bb      	str	r3, [r7, #24]
					HAL_Delay(10);
 8001f66:	200a      	movs	r0, #10
 8001f68:	f000 fe6a 	bl	8002c40 <HAL_Delay>
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4a64      	ldr	r2, [pc, #400]	; (8002100 <main+0x584>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d9e1      	bls.n	8001f38 <main+0x3bc>
				}
				HAL_FLASH_Lock();
 8001f74:	f001 fd0a 	bl	800398c <HAL_FLASH_Lock>
			}
			HAL_Delay(100);
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	f000 fe61 	bl	8002c40 <HAL_Delay>
		}
	}
//**************************************************************************

		uint32_t Crc_cal_a_m12 = getCRC_table_a_m12();
 8001f7e:	f7fe ffd3 	bl	8000f28 <getCRC_table_a_m12>
 8001f82:	6138      	str	r0, [r7, #16]
//		uint32_t Crc_cal_b_m27 = getCRC_table_b_m27();
=======
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <main+0x2f0>)
 8003130:	61fb      	str	r3, [r7, #28]
				l_Error = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	607b      	str	r3, [r7, #4]
				l_Index = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
				//Читаем и сравниваем
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 800313a:	e010      	b.n	800315e <main+0x28a>
				{
					if (DevNVRAM.data32[l_Index] != *(__IO uint32_t *)l_Address)
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <main+0x2f4>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d002      	beq.n	8003152 <main+0x27e>
					{
						l_Error++;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	607b      	str	r3, [r7, #4]
					}
					l_Index = l_Index + 1;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3301      	adds	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
					l_Address = l_Address + 4;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	3304      	adds	r3, #4
 800315c:	61fb      	str	r3, [r7, #28]
				while (l_Address < FLASH_TABLE_STOP_ADDR)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <main+0x2f8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d9ea      	bls.n	800313c <main+0x268>
				}

				if (l_Error > 0)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <main+0x350>
				{ // конфигурация изменилась сохраняем
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 800316c:	f001 fd04 	bl	8004b78 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4818      	ldr	r0, [pc, #96]	; (80031d8 <main+0x304>)
 8003176:	f001 fde7 	bl	8004d48 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <main+0x2f0>)
 800317c:	61fb      	str	r3, [r7, #28]
					l_Error = 0x00;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
					l_Index = 0x00;
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <main+0x2f4>)
 8003188:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800318c:	3301      	adds	r3, #1
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <main+0x2f4>)
 8003190:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0; //HAL_CRC_Calculate(&hcrc, &DevNVRAM.calibration_table, (sizeof(DevNVRAM.calibration_table)/4));
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <main+0x2f4>)
 8003196:	2200      	movs	r2, #0
 8003198:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR)
 800319c:	e03c      	b.n	8003218 <main+0x344>
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000004 	.word	0x20000004
 80031a8:	20000008 	.word	0x20000008
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	0800db4c 	.word	0x0800db4c
 80031b4:	20000214 	.word	0x20000214
 80031b8:	200008fc 	.word	0x200008fc
 80031bc:	200008ac 	.word	0x200008ac
 80031c0:	20000954 	.word	0x20000954
 80031c4:	0801fc00 	.word	0x0801fc00
 80031c8:	200004ac 	.word	0x200004ac
 80031cc:	0801ffff 	.word	0x0801ffff
 80031d0:	01121001 	.word	0x01121001
 80031d4:	48151623 	.word	0x48151623
 80031d8:	20000944 	.word	0x20000944
 80031dc:	20000254 	.word	0x20000254
 80031e0:	0800db60 	.word	0x0800db60
					{
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
											  DevNVRAM.data32[l_Index]) != HAL_OK)
 80031e4:	4a8b      	ldr	r2, [pc, #556]	; (8003414 <main+0x540>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80031ec:	461a      	mov	r2, r3
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	2002      	movs	r0, #2
 80031f6:	f001 fc4f 	bl	8004a98 <HAL_FLASH_Program>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <main+0x332>
						{
							l_Error++;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3301      	adds	r3, #1
 8003204:	607b      	str	r3, [r7, #4]
						}

						l_Address = l_Address + 4;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	61fb      	str	r3, [r7, #28]
						l_Index = l_Index + 1;
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	3301      	adds	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
						HAL_Delay(10);
 8003212:	200a      	movs	r0, #10
 8003214:	f000 fe62 	bl	8003edc <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	4a7f      	ldr	r2, [pc, #508]	; (8003418 <main+0x544>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d9e1      	bls.n	80031e4 <main+0x310>
					}
					HAL_FLASH_Lock();
 8003220:	f001 fcd0 	bl	8004bc4 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	f000 fe59 	bl	8003edc <HAL_Delay>
				//--------------------------------------------------------------------------
				printf("flash done");
 800322a:	487c      	ldr	r0, [pc, #496]	; (800341c <main+0x548>)
 800322c:	f009 f9da 	bl	800c5e4 <iprintf>
			}
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 8003230:	f000 fe4a 	bl	8003ec8 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]
		}
>>>>>>> 6147058 (refactor)

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
<<<<<<< HEAD
 8001f84:	f000 fe52 	bl	8002c2c <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f8e:	4861      	ldr	r0, [pc, #388]	; (8002114 <main+0x598>)
 8001f90:	f001 ffea 	bl	8003f68 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	72fb      	strb	r3, [r7, #11]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <main+0x44a>
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <main+0x59c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10f      	bne.n	8001fc6 <main+0x44a>
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <main+0x5a0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b32      	cmp	r3, #50	; 0x32
 8001fb0:	d909      	bls.n	8001fc6 <main+0x44a>
		{
			short_state1 = 1;
 8001fb2:	4b59      	ldr	r3, [pc, #356]	; (8002118 <main+0x59c>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001fb8:	4b59      	ldr	r3, [pc, #356]	; (8002120 <main+0x5a4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001fbe:	4a57      	ldr	r2, [pc, #348]	; (800211c <main+0x5a0>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <main+0x4a8>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001fc6:	7afb      	ldrb	r3, [r7, #11]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <main+0x474>
 8001fcc:	4b54      	ldr	r3, [pc, #336]	; (8002120 <main+0x5a4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <main+0x474>
 8001fd4:	4b51      	ldr	r3, [pc, #324]	; (800211c <main+0x5a0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe0:	d906      	bls.n	8001ff0 <main+0x474>
		{
			long_state1 = 1;
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <main+0x5a4>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <main+0x5a8>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	e019      	b.n	8002024 <main+0x4a8>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d116      	bne.n	8002024 <main+0x4a8>
 8001ff6:	4b48      	ldr	r3, [pc, #288]	; (8002118 <main+0x59c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d012      	beq.n	8002024 <main+0x4a8>
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <main+0x5a0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b32      	cmp	r3, #50	; 0x32
 8002008:	d90c      	bls.n	8002024 <main+0x4a8>
		{
			short_state1 = 0;
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <main+0x59c>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002010:	4a42      	ldr	r2, [pc, #264]	; (800211c <main+0x5a0>)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <main+0x5a4>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <main+0x4a8>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 800201e:	4b42      	ldr	r3, [pc, #264]	; (8002128 <main+0x5ac>)
 8002020:	2201      	movs	r2, #1
 8002022:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8002024:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002028:	483a      	ldr	r0, [pc, #232]	; (8002114 <main+0x598>)
 800202a:	f001 ff9d 	bl	8003f68 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	72bb      	strb	r3, [r7, #10]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8002032:	7abb      	ldrb	r3, [r7, #10]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d113      	bne.n	8002060 <main+0x4e4>
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <main+0x5b0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10f      	bne.n	8002060 <main+0x4e4>
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <main+0x5b4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b32      	cmp	r3, #50	; 0x32
 800204a:	d909      	bls.n	8002060 <main+0x4e4>
		{
			short_state2 = 1;
 800204c:	4b37      	ldr	r3, [pc, #220]	; (800212c <main+0x5b0>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <main+0x5b8>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002058:	4a35      	ldr	r2, [pc, #212]	; (8002130 <main+0x5b4>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e02e      	b.n	80020be <main+0x542>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8002060:	7abb      	ldrb	r3, [r7, #10]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d111      	bne.n	800208a <main+0x50e>
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <main+0x5b8>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <main+0x50e>
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <main+0x5b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800207a:	d906      	bls.n	800208a <main+0x50e>
		{
			long_state2 = 1;
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <main+0x5b8>)
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8002082:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <main+0x5bc>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e019      	b.n	80020be <main+0x542>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 800208a:	7abb      	ldrb	r3, [r7, #10]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d116      	bne.n	80020be <main+0x542>
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <main+0x5b0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <main+0x542>
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <main+0x5b4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b32      	cmp	r3, #50	; 0x32
 80020a2:	d90c      	bls.n	80020be <main+0x542>
		{
			short_state2 = 0;
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <main+0x5b0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80020aa:	4a21      	ldr	r2, [pc, #132]	; (8002130 <main+0x5b4>)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <main+0x5b8>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <main+0x542>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <main+0x5c0>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
=======
 8003236:	f000 fe47 	bl	8003ec8 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 800323c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003240:	4877      	ldr	r0, [pc, #476]	; (8003420 <main+0x54c>)
 8003242:	f001 ffad 	bl	80051a0 <HAL_GPIO_ReadPin>
 8003246:	4603      	mov	r3, r0
 8003248:	72fb      	strb	r3, [r7, #11]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d113      	bne.n	8003278 <main+0x3a4>
 8003250:	4b74      	ldr	r3, [pc, #464]	; (8003424 <main+0x550>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <main+0x3a4>
 8003258:	4b73      	ldr	r3, [pc, #460]	; (8003428 <main+0x554>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b32      	cmp	r3, #50	; 0x32
 8003262:	d909      	bls.n	8003278 <main+0x3a4>
		{
			short_state1 = 1;
 8003264:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <main+0x550>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 800326a:	4b70      	ldr	r3, [pc, #448]	; (800342c <main+0x558>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8003270:	4a6d      	ldr	r2, [pc, #436]	; (8003428 <main+0x554>)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e02e      	b.n	80032d6 <main+0x402>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d111      	bne.n	80032a2 <main+0x3ce>
 800327e:	4b6b      	ldr	r3, [pc, #428]	; (800342c <main+0x558>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <main+0x3ce>
 8003286:	4b68      	ldr	r3, [pc, #416]	; (8003428 <main+0x554>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003292:	d906      	bls.n	80032a2 <main+0x3ce>
		{
			long_state1 = 1;
 8003294:	4b65      	ldr	r3, [pc, #404]	; (800342c <main+0x558>)
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 800329a:	4b65      	ldr	r3, [pc, #404]	; (8003430 <main+0x55c>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e019      	b.n	80032d6 <main+0x402>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 80032a2:	7afb      	ldrb	r3, [r7, #11]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d116      	bne.n	80032d6 <main+0x402>
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <main+0x550>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <main+0x402>
 80032b0:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <main+0x554>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b32      	cmp	r3, #50	; 0x32
 80032ba:	d90c      	bls.n	80032d6 <main+0x402>
		{
			short_state1 = 0;
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <main+0x550>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 80032c2:	4a59      	ldr	r2, [pc, #356]	; (8003428 <main+0x554>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <main+0x558>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <main+0x402>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <main+0x560>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80032d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032da:	4851      	ldr	r0, [pc, #324]	; (8003420 <main+0x54c>)
 80032dc:	f001 ff60 	bl	80051a0 <HAL_GPIO_ReadPin>
 80032e0:	4603      	mov	r3, r0
 80032e2:	72bb      	strb	r3, [r7, #10]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 80032e4:	7abb      	ldrb	r3, [r7, #10]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <main+0x43e>
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <main+0x564>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <main+0x43e>
 80032f2:	4b52      	ldr	r3, [pc, #328]	; (800343c <main+0x568>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b32      	cmp	r3, #50	; 0x32
 80032fc:	d909      	bls.n	8003312 <main+0x43e>
		{
			short_state2 = 1;
 80032fe:	4b4e      	ldr	r3, [pc, #312]	; (8003438 <main+0x564>)
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8003304:	4b4e      	ldr	r3, [pc, #312]	; (8003440 <main+0x56c>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800330a:	4a4c      	ldr	r2, [pc, #304]	; (800343c <main+0x568>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e02e      	b.n	8003370 <main+0x49c>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8003312:	7abb      	ldrb	r3, [r7, #10]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d111      	bne.n	800333c <main+0x468>
 8003318:	4b49      	ldr	r3, [pc, #292]	; (8003440 <main+0x56c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <main+0x468>
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <main+0x568>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800332c:	d906      	bls.n	800333c <main+0x468>
		{
			long_state2 = 1;
 800332e:	4b44      	ldr	r3, [pc, #272]	; (8003440 <main+0x56c>)
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8003334:	4b43      	ldr	r3, [pc, #268]	; (8003444 <main+0x570>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e019      	b.n	8003370 <main+0x49c>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 800333c:	7abb      	ldrb	r3, [r7, #10]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d116      	bne.n	8003370 <main+0x49c>
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <main+0x564>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d012      	beq.n	8003370 <main+0x49c>
 800334a:	4b3c      	ldr	r3, [pc, #240]	; (800343c <main+0x568>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b32      	cmp	r3, #50	; 0x32
 8003354:	d90c      	bls.n	8003370 <main+0x49c>
		{
			short_state2 = 0;
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <main+0x564>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <main+0x568>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <main+0x56c>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <main+0x49c>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 800336a:	4b37      	ldr	r3, [pc, #220]	; (8003448 <main+0x574>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
<<<<<<< HEAD
 80020be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c2:	4814      	ldr	r0, [pc, #80]	; (8002114 <main+0x598>)
 80020c4:	f001 ff50 	bl	8003f68 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	727b      	strb	r3, [r7, #9]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 80020cc:	7a7b      	ldrb	r3, [r7, #9]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d13c      	bne.n	800214c <main+0x5d0>
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <main+0x5c4>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d138      	bne.n	800214c <main+0x5d0>
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <main+0x5c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b32      	cmp	r3, #50	; 0x32
 80020e4:	d932      	bls.n	800214c <main+0x5d0>
		{
			short_state3 = 1;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <main+0x5c4>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <main+0x5cc>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <main+0x5c8>)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	e05b      	b.n	80021b2 <main+0x636>
 80020fa:	bf00      	nop
 80020fc:	200004b4 	.word	0x200004b4
 8002100:	0801ffff 	.word	0x0801ffff
 8002104:	20000273 	.word	0x20000273
 8002108:	0801fc00 	.word	0x0801fc00
 800210c:	0800c7f0 	.word	0x0800c7f0
 8002110:	20000274 	.word	0x20000274
 8002114:	40010c00 	.word	0x40010c00
 8002118:	20000250 	.word	0x20000250
 800211c:	20000254 	.word	0x20000254
 8002120:	20000251 	.word	0x20000251
 8002124:	20000258 	.word	0x20000258
 8002128:	20000259 	.word	0x20000259
 800212c:	2000025a 	.word	0x2000025a
 8002130:	2000025c 	.word	0x2000025c
 8002134:	2000025b 	.word	0x2000025b
 8002138:	20000260 	.word	0x20000260
 800213c:	20000261 	.word	0x20000261
 8002140:	20000262 	.word	0x20000262
 8002144:	20000264 	.word	0x20000264
 8002148:	20000263 	.word	0x20000263
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 800214c:	7a7b      	ldrb	r3, [r7, #9]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d111      	bne.n	8002176 <main+0x5fa>
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <main+0x638>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <main+0x5fa>
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <main+0x63c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d906      	bls.n	8002176 <main+0x5fa>
		{
			long_state3 = 1;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <main+0x638>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <main+0x640>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e01d      	b.n	80021b2 <main+0x636>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8002176:	7a7b      	ldrb	r3, [r7, #9]
 8002178:	2b01      	cmp	r3, #1
 800217a:	f47f ae96 	bne.w	8001eaa <main+0x32e>
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <main+0x644>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f43f ae91 	beq.w	8001eaa <main+0x32e>
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <main+0x63c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b32      	cmp	r3, #50	; 0x32
 8002192:	f67f ae8a 	bls.w	8001eaa <main+0x32e>
		{
			short_state3 = 0;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <main+0x644>)
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 800219c:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <main+0x63c>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <main+0x638>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae7f 	bne.w	8001eaa <main+0x32e>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <main+0x648>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
	{
 80021b2:	e67a      	b.n	8001eaa <main+0x32e>
 80021b4:	20000263 	.word	0x20000263
 80021b8:	20000264 	.word	0x20000264
 80021bc:	20000268 	.word	0x20000268
 80021c0:	20000262 	.word	0x20000262
 80021c4:	20000269 	.word	0x20000269

080021c8 <SystemClock_Config>:
=======
 8003370:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003374:	482a      	ldr	r0, [pc, #168]	; (8003420 <main+0x54c>)
 8003376:	f001 ff13 	bl	80051a0 <HAL_GPIO_ReadPin>
 800337a:	4603      	mov	r3, r0
 800337c:	727b      	strb	r3, [r7, #9]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 800337e:	7a7b      	ldrb	r3, [r7, #9]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d113      	bne.n	80033ac <main+0x4d8>
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <main+0x578>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10f      	bne.n	80033ac <main+0x4d8>
 800338c:	4b30      	ldr	r3, [pc, #192]	; (8003450 <main+0x57c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b32      	cmp	r3, #50	; 0x32
 8003396:	d909      	bls.n	80033ac <main+0x4d8>
		{
			short_state3 = 1;
 8003398:	4b2c      	ldr	r3, [pc, #176]	; (800344c <main+0x578>)
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <main+0x580>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <main+0x57c>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e032      	b.n	8003412 <main+0x53e>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d111      	bne.n	80033d6 <main+0x502>
 80033b2:	4b28      	ldr	r3, [pc, #160]	; (8003454 <main+0x580>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <main+0x502>
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <main+0x57c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c6:	d906      	bls.n	80033d6 <main+0x502>
		{
			long_state3 = 1;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <main+0x580>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <main+0x584>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e01d      	b.n	8003412 <main+0x53e>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 80033d6:	7a7b      	ldrb	r3, [r7, #9]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f47f ae93 	bne.w	8003104 <main+0x230>
 80033de:	4b1b      	ldr	r3, [pc, #108]	; (800344c <main+0x578>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f43f ae8e 	beq.w	8003104 <main+0x230>
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <main+0x57c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b32      	cmp	r3, #50	; 0x32
 80033f2:	f67f ae87 	bls.w	8003104 <main+0x230>
		{
			short_state3 = 0;
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <main+0x578>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <main+0x57c>)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <main+0x580>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f47f ae7c 	bne.w	8003104 <main+0x230>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <main+0x588>)
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
	{
 8003412:	e677      	b.n	8003104 <main+0x230>
 8003414:	200004ac 	.word	0x200004ac
 8003418:	0801ffff 	.word	0x0801ffff
 800341c:	0800db68 	.word	0x0800db68
 8003420:	40010c00 	.word	0x40010c00
 8003424:	2000025a 	.word	0x2000025a
 8003428:	2000025c 	.word	0x2000025c
 800342c:	2000025b 	.word	0x2000025b
 8003430:	20000260 	.word	0x20000260
 8003434:	20000261 	.word	0x20000261
 8003438:	20000262 	.word	0x20000262
 800343c:	20000264 	.word	0x20000264
 8003440:	20000263 	.word	0x20000263
 8003444:	20000268 	.word	0x20000268
 8003448:	20000269 	.word	0x20000269
 800344c:	2000026a 	.word	0x2000026a
 8003450:	2000026c 	.word	0x2000026c
 8003454:	2000026b 	.word	0x2000026b
 8003458:	20000270 	.word	0x20000270
 800345c:	20000271 	.word	0x20000271

08003460 <SystemClock_Config>:
>>>>>>> 6147058 (refactor)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b094      	sub	sp, #80	; 0x50
 80021cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d2:	2228      	movs	r2, #40	; 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f009 f8e0 	bl	800b39c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
=======
 8003460:	b580      	push	{r7, lr}
 8003462:	b094      	sub	sp, #80	; 0x50
 8003464:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346a:	2228      	movs	r2, #40	; 0x28
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f009 f8b0 	bl	800c5d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
>>>>>>> 6147058 (refactor)

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002202:	2300      	movs	r3, #0
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002206:	2301      	movs	r3, #1
 8002208:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220a:	2302      	movs	r3, #2
 800220c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800220e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002218:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fa62 	bl	80056e8 <HAL_RCC_OscConfig>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800222a:	f000 fa09 	bl	8002640 <Error_Handler>
=======
 8003490:	2301      	movs	r3, #1
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800349a:	2300      	movs	r3, #0
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800349e:	2301      	movs	r3, #1
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034a2:	2302      	movs	r3, #2
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80034ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80034b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fa32 	bl	8006920 <HAL_RCC_OscConfig>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <SystemClock_Config+0x66>
	{
		Error_Handler();
 80034c2:	f000 fa09 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 800222e:	230f      	movs	r3, #15
 8002230:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800223a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2102      	movs	r1, #2
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fccc 	bl	8005be8 <HAL_RCC_ClockConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002256:	f000 f9f3 	bl	8002640 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 800225a:	2312      	movs	r3, #18
 800225c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fe42 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <SystemClock_Config+0xb2>
	{
		Error_Handler();
 8002276:	f000 f9e3 	bl	8002640 <Error_Handler>
	}
}
 800227a:	bf00      	nop
 800227c:	3750      	adds	r7, #80	; 0x50
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <MX_ADC1_Init>:
=======
 80034c6:	230f      	movs	r3, #15
 80034c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ca:	2302      	movs	r3, #2
 80034cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fc9c 	bl	8006e20 <HAL_RCC_ClockConfig>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <SystemClock_Config+0x92>
	{
		Error_Handler();
 80034ee:	f000 f9f3 	bl	80038d8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC | RCC_PERIPHCLK_USB;
 80034f2:	2312      	movs	r3, #18
 80034f4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fe12 	bl	800712c <HAL_RCCEx_PeriphCLKConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800350e:	f000 f9e3 	bl	80038d8 <Error_Handler>
	}
}
 8003512:	bf00      	nop
 8003514:	3750      	adds	r7, #80	; 0x50
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <MX_ADC1_Init>:
>>>>>>> 6147058 (refactor)
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
=======
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
=======
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
>>>>>>> 6147058 (refactor)
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
  */
	hadc1.Instance = ADC1;
<<<<<<< HEAD
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_ADC1_Init+0x74>)
 8002296:	4a19      	ldr	r2, [pc, #100]	; (80022fc <MX_ADC1_Init+0x78>)
 8002298:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <MX_ADC1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80022a0:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022a6:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022b2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022bc:	2201      	movs	r2, #1
 80022be:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022c0:	480d      	ldr	r0, [pc, #52]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022c2:	f000 fce1 	bl	8002c88 <HAL_ADC_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80022cc:	f000 f9b8 	bl	8002640 <Error_Handler>
=======
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <MX_ADC1_Init+0x74>)
 800352e:	4a19      	ldr	r2, [pc, #100]	; (8003594 <MX_ADC1_Init+0x78>)
 8003530:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <MX_ADC1_Init+0x74>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <MX_ADC1_Init+0x74>)
 800353a:	2201      	movs	r2, #1
 800353c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <MX_ADC1_Init+0x74>)
 8003540:	2200      	movs	r2, #0
 8003542:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <MX_ADC1_Init+0x74>)
 8003546:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800354a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <MX_ADC1_Init+0x74>)
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <MX_ADC1_Init+0x74>)
 8003554:	2201      	movs	r2, #1
 8003556:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <MX_ADC1_Init+0x74>)
 800355a:	f000 fce3 	bl	8003f24 <HAL_ADC_Init>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8003564:	f000 f9b8 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/** Configure Regular Channel
  */
	sConfig.Channel = ADC_CHANNEL_3;
<<<<<<< HEAD
 80022d0:	2303      	movs	r3, #3
 80022d2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80022d8:	2302      	movs	r3, #2
 80022da:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_ADC1_Init+0x74>)
 80022e2:	f000 ff37 	bl	8003154 <HAL_ADC_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 80022ec:	f000 f9a8 	bl	8002640 <Error_Handler>
=======
 8003568:	2303      	movs	r3, #3
 800356a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800356c:	2301      	movs	r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003570:	2302      	movs	r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	4619      	mov	r1, r3
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <MX_ADC1_Init+0x74>)
 800357a:	f000 ff39 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8003584:	f000 f9a8 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
<<<<<<< HEAD
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000094c 	.word	0x2000094c
 80022fc:	40012400 	.word	0x40012400

08002300 <MX_CRC_Init>:
=======
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000954 	.word	0x20000954
 8003594:	40012400 	.word	0x40012400

08003598 <MX_CRC_Init>:
>>>>>>> 6147058 (refactor)
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
<<<<<<< HEAD
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
=======
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
<<<<<<< HEAD
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <MX_CRC_Init+0x20>)
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <MX_CRC_Init+0x24>)
 8002308:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <MX_CRC_Init+0x20>)
 800230c:	f001 fa59 	bl	80037c2 <HAL_CRC_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8002316:	f000 f993 	bl	8002640 <Error_Handler>
=======
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <MX_CRC_Init+0x20>)
 800359e:	4a07      	ldr	r2, [pc, #28]	; (80035bc <MX_CRC_Init+0x24>)
 80035a0:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_CRC_Init+0x20>)
 80035a4:	f001 fa5b 	bl	8004a5e <HAL_CRC_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 80035ae:	f000 f993 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
<<<<<<< HEAD
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200008fc 	.word	0x200008fc
 8002324:	40023000 	.word	0x40023000

08002328 <MX_SPI1_Init>:
=======
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200008f4 	.word	0x200008f4
 80035bc:	40023000 	.word	0x40023000

080035c0 <MX_SPI1_Init>:
>>>>>>> 6147058 (refactor)
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
=======
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
<<<<<<< HEAD
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_SPI1_Init+0x68>)
 800232e:	4a19      	ldr	r2, [pc, #100]	; (8002394 <MX_SPI1_Init+0x6c>)
 8002330:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_SPI1_Init+0x68>)
 8002334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002338:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_SPI1_Init+0x68>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_SPI1_Init+0x68>)
 8002342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002346:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_SPI1_Init+0x68>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <MX_SPI1_Init+0x68>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_SPI1_Init+0x68>)
 8002356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_SPI1_Init+0x68>)
 800235e:	2208      	movs	r2, #8
 8002360:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_SPI1_Init+0x68>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_SPI1_Init+0x68>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_SPI1_Init+0x68>)
 8002370:	2200      	movs	r2, #0
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_SPI1_Init+0x68>)
 8002376:	220a      	movs	r2, #10
 8002378:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_SPI1_Init+0x68>)
 800237c:	f003 ff34 	bl	80061e8 <HAL_SPI_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 8002386:	f000 f95b 	bl	8002640 <Error_Handler>
=======
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <MX_SPI1_Init+0x68>)
 80035c6:	4a19      	ldr	r2, [pc, #100]	; (800362c <MX_SPI1_Init+0x6c>)
 80035c8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <MX_SPI1_Init+0x68>)
 80035cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035d2:	4b15      	ldr	r3, [pc, #84]	; (8003628 <MX_SPI1_Init+0x68>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <MX_SPI1_Init+0x68>)
 80035da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035de:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <MX_SPI1_Init+0x68>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <MX_SPI1_Init+0x68>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <MX_SPI1_Init+0x68>)
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <MX_SPI1_Init+0x68>)
 80035f6:	2208      	movs	r2, #8
 80035f8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <MX_SPI1_Init+0x68>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <MX_SPI1_Init+0x68>)
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_SPI1_Init+0x68>)
 8003608:	2200      	movs	r2, #0
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <MX_SPI1_Init+0x68>)
 800360e:	220a      	movs	r2, #10
 8003610:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_SPI1_Init+0x68>)
 8003614:	f003 ff04 	bl	8007420 <HAL_SPI_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_SPI1_Init+0x62>
	{
		Error_Handler();
 800361e:	f000 f95b 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
<<<<<<< HEAD
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000097c 	.word	0x2000097c
 8002394:	40013000 	.word	0x40013000

08002398 <MX_TIM3_Init>:
=======
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000984 	.word	0x20000984
 800362c:	40013000 	.word	0x40013000

08003630 <MX_TIM3_Init>:
>>>>>>> 6147058 (refactor)
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
=======
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80023a8:	463b      	mov	r3, r7
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
=======
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003640:	463b      	mov	r3, r7
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
<<<<<<< HEAD
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023b6:	4a28      	ldr	r2, [pc, #160]	; (8002458 <MX_TIM3_Init+0xc0>)
 80023b8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023bc:	2247      	movs	r2, #71	; 0x47
 80023be:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023c8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80023cc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80023da:	481e      	ldr	r0, [pc, #120]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023dc:	f004 f96a 	bl	80066b4 <HAL_TIM_IC_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 80023e6:	f000 f92b 	bl	8002640 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	4619      	mov	r1, r3
 80023f8:	4816      	ldr	r0, [pc, #88]	; (8002454 <MX_TIM3_Init+0xbc>)
 80023fa:	f004 fe49 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8002404:	f000 f91c 	bl	8002640 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002408:	2300      	movs	r3, #0
 800240a:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800240c:	2301      	movs	r3, #1
 800240e:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002418:	463b      	mov	r3, r7
 800241a:	2200      	movs	r2, #0
 800241c:	4619      	mov	r1, r3
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_TIM3_Init+0xbc>)
 8002420:	f004 fba6 	bl	8006b70 <HAL_TIM_IC_ConfigChannel>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800242a:	f000 f909 	bl	8002640 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800242e:	2302      	movs	r3, #2
 8002430:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002432:	2302      	movs	r3, #2
 8002434:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002436:	463b      	mov	r3, r7
 8002438:	2204      	movs	r2, #4
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_TIM3_Init+0xbc>)
 800243e:	f004 fb97 	bl	8006b70 <HAL_TIM_IC_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8002448:	f000 f8fa 	bl	8002640 <Error_Handler>
=======
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <MX_TIM3_Init+0xbc>)
 800364e:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <MX_TIM3_Init+0xc0>)
 8003650:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 72 - 1;
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003654:	2247      	movs	r2, #71	; 0x47
 8003656:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003658:	4b24      	ldr	r3, [pc, #144]	; (80036ec <MX_TIM3_Init+0xbc>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65000 - 1;
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003660:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003664:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <MX_TIM3_Init+0xbc>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8003672:	481e      	ldr	r0, [pc, #120]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003674:	f004 f93a 	bl	80078ec <HAL_TIM_IC_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800367e:	f000 f92b 	bl	80038d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	4816      	ldr	r0, [pc, #88]	; (80036ec <MX_TIM3_Init+0xbc>)
 8003692:	f004 fe19 	bl	80082c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 800369c:	f000 f91c 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036a4:	2301      	movs	r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	480d      	ldr	r0, [pc, #52]	; (80036ec <MX_TIM3_Init+0xbc>)
 80036b8:	f004 fb76 	bl	8007da8 <HAL_TIM_IC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 80036c2:	f000 f909 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80036c6:	2302      	movs	r3, #2
 80036c8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80036ca:	2302      	movs	r3, #2
 80036cc:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036ce:	463b      	mov	r3, r7
 80036d0:	2204      	movs	r2, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4805      	ldr	r0, [pc, #20]	; (80036ec <MX_TIM3_Init+0xbc>)
 80036d6:	f004 fb67 	bl	8007da8 <HAL_TIM_IC_ConfigChannel>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 80036e0:	f000 f8fa 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
}
<<<<<<< HEAD
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000904 	.word	0x20000904
 8002458:	40000400 	.word	0x40000400

0800245c <MX_TIM4_Init>:
=======
 80036e4:	bf00      	nop
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200008fc 	.word	0x200008fc
 80036f0:	40000400 	.word	0x40000400

080036f4 <MX_TIM4_Init>:
>>>>>>> 6147058 (refactor)
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
=======
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8002462:	f107 0310 	add.w	r3, r7, #16
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 800246c:	463b      	mov	r3, r7
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]
=======
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003704:	463b      	mov	r3, r7
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
>>>>>>> 6147058 (refactor)

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
<<<<<<< HEAD
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_TIM4_Init+0xbc>)
 800247a:	4a28      	ldr	r2, [pc, #160]	; (800251c <MX_TIM4_Init+0xc0>)
 800247c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <MX_TIM4_Init+0xbc>)
 8002480:	2247      	movs	r2, #71	; 0x47
 8002482:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <MX_TIM4_Init+0xbc>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 800248a:	4b23      	ldr	r3, [pc, #140]	; (8002518 <MX_TIM4_Init+0xbc>)
 800248c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002490:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <MX_TIM4_Init+0xbc>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MX_TIM4_Init+0xbc>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <MX_TIM4_Init+0xbc>)
 80024a0:	f004 f908 	bl	80066b4 <HAL_TIM_IC_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 80024aa:	f000 f8c9 	bl	8002640 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b6:	f107 0310 	add.w	r3, r7, #16
 80024ba:	4619      	mov	r1, r3
 80024bc:	4816      	ldr	r0, [pc, #88]	; (8002518 <MX_TIM4_Init+0xbc>)
 80024be:	f004 fde7 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 80024c8:	f000 f8ba 	bl	8002640 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024cc:	2300      	movs	r3, #0
 80024ce:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024d0:	2301      	movs	r3, #1
 80024d2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <MX_TIM4_Init+0xbc>)
 80024e4:	f004 fb44 	bl	8006b70 <HAL_TIM_IC_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 80024ee:	f000 f8a7 	bl	8002640 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024f2:	2302      	movs	r3, #2
 80024f4:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024f6:	2302      	movs	r3, #2
 80024f8:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	2204      	movs	r2, #4
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_TIM4_Init+0xbc>)
 8002502:	f004 fb35 	bl	8006b70 <HAL_TIM_IC_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 800250c:	f000 f898 	bl	8002640 <Error_Handler>
=======
 8003710:	4b27      	ldr	r3, [pc, #156]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <MX_TIM4_Init+0xc0>)
 8003714:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8003716:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003718:	2247      	movs	r2, #71	; 0x47
 800371a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65000 - 1;
 8003722:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003724:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8003728:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372a:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003730:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003732:	2200      	movs	r2, #0
 8003734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003736:	481e      	ldr	r0, [pc, #120]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003738:	f004 f8d8 	bl	80078ec <HAL_TIM_IC_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 8003742:	f000 f8c9 	bl	80038d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800374e:	f107 0310 	add.w	r3, r7, #16
 8003752:	4619      	mov	r1, r3
 8003754:	4816      	ldr	r0, [pc, #88]	; (80037b0 <MX_TIM4_Init+0xbc>)
 8003756:	f004 fdb7 	bl	80082c8 <HAL_TIMEx_MasterConfigSynchronization>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8003760:	f000 f8ba 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003764:	2300      	movs	r3, #0
 8003766:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003768:	2301      	movs	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003774:	463b      	mov	r3, r7
 8003776:	2200      	movs	r2, #0
 8003778:	4619      	mov	r1, r3
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800377c:	f004 fb14 	bl	8007da8 <HAL_TIM_IC_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 8003786:	f000 f8a7 	bl	80038d8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800378a:	2302      	movs	r3, #2
 800378c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800378e:	2302      	movs	r3, #2
 8003790:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003792:	463b      	mov	r3, r7
 8003794:	2204      	movs	r2, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <MX_TIM4_Init+0xbc>)
 800379a:	f004 fb05 	bl	8007da8 <HAL_TIM_IC_ConfigChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 80037a4:	f000 f898 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
}
<<<<<<< HEAD
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200008b4 	.word	0x200008b4
 800251c:	40000800 	.word	0x40000800

08002520 <MX_GPIO_Init>:
=======
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200008ac 	.word	0x200008ac
 80037b4:	40000800 	.word	0x40000800

080037b8 <MX_GPIO_Init>:
>>>>>>> 6147058 (refactor)
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002534:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <MX_GPIO_Init+0x110>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <MX_GPIO_Init+0x110>)
 800253a:	f043 0310 	orr.w	r3, r3, #16
 800253e:	6193      	str	r3, [r2, #24]
 8002540:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <MX_GPIO_Init+0x110>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f003 0310 	and.w	r3, r3, #16
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800254c:	4b38      	ldr	r3, [pc, #224]	; (8002630 <MX_GPIO_Init+0x110>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	4a37      	ldr	r2, [pc, #220]	; (8002630 <MX_GPIO_Init+0x110>)
 8002552:	f043 0320 	orr.w	r3, r3, #32
 8002556:	6193      	str	r3, [r2, #24]
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <MX_GPIO_Init+0x110>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b32      	ldr	r3, [pc, #200]	; (8002630 <MX_GPIO_Init+0x110>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a31      	ldr	r2, [pc, #196]	; (8002630 <MX_GPIO_Init+0x110>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <MX_GPIO_Init+0x110>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <MX_GPIO_Init+0x110>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	4a2b      	ldr	r2, [pc, #172]	; (8002630 <MX_GPIO_Init+0x110>)
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	6193      	str	r3, [r2, #24]
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <MX_GPIO_Init+0x110>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259a:	4826      	ldr	r0, [pc, #152]	; (8002634 <MX_GPIO_Init+0x114>)
 800259c:	f001 fcfb 	bl	8003f96 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f240 4112 	movw	r1, #1042	; 0x412
 80025a6:	4824      	ldr	r0, [pc, #144]	; (8002638 <MX_GPIO_Init+0x118>)
 80025a8:	f001 fcf5 	bl	8003f96 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2104      	movs	r1, #4
 80025b0:	4821      	ldr	r0, [pc, #132]	; (8002638 <MX_GPIO_Init+0x118>)
 80025b2:	f001 fcf0 	bl	8003f96 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	4619      	mov	r1, r3
 80025ce:	4819      	ldr	r0, [pc, #100]	; (8002634 <MX_GPIO_Init+0x114>)
 80025d0:	f001 fb46 	bl	8003c60 <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 80025d4:	f240 4316 	movw	r3, #1046	; 0x416
 80025d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025da:	2301      	movs	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e6:	f107 0310 	add.w	r3, r7, #16
 80025ea:	4619      	mov	r1, r3
 80025ec:	4812      	ldr	r0, [pc, #72]	; (8002638 <MX_GPIO_Init+0x118>)
 80025ee:	f001 fb37 	bl	8003c60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_GPIO_Init+0x11c>)
 8002608:	f001 fb2a 	bl	8003c60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800260c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002610:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4619      	mov	r1, r3
 8002620:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_GPIO_Init+0x11c>)
 8002622:	f001 fb1d 	bl	8003c60 <HAL_GPIO_Init>
}
 8002626:	bf00      	nop
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40011000 	.word	0x40011000
 8002638:	40010800 	.word	0x40010800
 800263c:	40010c00 	.word	0x40010c00

08002640 <Error_Handler>:
=======
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037be:	f107 0310 	add.w	r3, r7, #16
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	609a      	str	r2, [r3, #8]
 80037ca:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037d2:	f043 0310 	orr.w	r3, r3, #16
 80037d6:	6193      	str	r3, [r2, #24]
 80037d8:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037e4:	4b38      	ldr	r3, [pc, #224]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a37      	ldr	r2, [pc, #220]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037ea:	f043 0320 	orr.w	r3, r3, #32
 80037ee:	6193      	str	r3, [r2, #24]
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <MX_GPIO_Init+0x110>)
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	4a31      	ldr	r2, [pc, #196]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6193      	str	r3, [r2, #24]
 8003808:	4b2f      	ldr	r3, [pc, #188]	; (80038c8 <MX_GPIO_Init+0x110>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003814:	4b2c      	ldr	r3, [pc, #176]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a2b      	ldr	r2, [pc, #172]	; (80038c8 <MX_GPIO_Init+0x110>)
 800381a:	f043 0308 	orr.w	r3, r3, #8
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <MX_GPIO_Init+0x110>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800382c:	2200      	movs	r2, #0
 800382e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003832:	4826      	ldr	r0, [pc, #152]	; (80038cc <MX_GPIO_Init+0x114>)
 8003834:	f001 fccb 	bl	80051ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin | AD5312_SYNC_Pin | GPIO_PIN_10, GPIO_PIN_RESET);
 8003838:	2200      	movs	r2, #0
 800383a:	f240 4112 	movw	r1, #1042	; 0x412
 800383e:	4824      	ldr	r0, [pc, #144]	; (80038d0 <MX_GPIO_Init+0x118>)
 8003840:	f001 fcc5 	bl	80051ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8003844:	2201      	movs	r2, #1
 8003846:	2104      	movs	r1, #4
 8003848:	4821      	ldr	r0, [pc, #132]	; (80038d0 <MX_GPIO_Init+0x118>)
 800384a:	f001 fcc0 	bl	80051ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800384e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003852:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003854:	2301      	movs	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2302      	movs	r3, #2
 800385e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003860:	f107 0310 	add.w	r3, r7, #16
 8003864:	4619      	mov	r1, r3
 8003866:	4819      	ldr	r0, [pc, #100]	; (80038cc <MX_GPIO_Init+0x114>)
 8003868:	f001 fb16 	bl	8004e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
	GPIO_InitStruct.Pin = AD5312_LDAC_Pin | Relay_Pin | AD5312_SYNC_Pin | GPIO_PIN_10;
 800386c:	f240 4316 	movw	r3, #1046	; 0x416
 8003870:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003872:	2301      	movs	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2302      	movs	r3, #2
 800387c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800387e:	f107 0310 	add.w	r3, r7, #16
 8003882:	4619      	mov	r1, r3
 8003884:	4812      	ldr	r0, [pc, #72]	; (80038d0 <MX_GPIO_Init+0x118>)
 8003886:	f001 fb07 	bl	8004e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003894:	2301      	movs	r3, #1
 8003896:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	4619      	mov	r1, r3
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <MX_GPIO_Init+0x11c>)
 80038a0:	f001 fafa 	bl	8004e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 80038a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80038a8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b2:	f107 0310 	add.w	r3, r7, #16
 80038b6:	4619      	mov	r1, r3
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <MX_GPIO_Init+0x11c>)
 80038ba:	f001 faed 	bl	8004e98 <HAL_GPIO_Init>
}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40011000 	.word	0x40011000
 80038d0:	40010800 	.word	0x40010800
 80038d4:	40010c00 	.word	0x40010c00

080038d8 <Error_Handler>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
=======
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_MspInit>:
=======
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <HAL_MspInit>:
>>>>>>> 6147058 (refactor)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
=======
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_MspInit+0x5c>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_MspInit+0x5c>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6193      	str	r3, [r2, #24]
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_MspInit+0x5c>)
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_MspInit+0x5c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <HAL_MspInit+0x5c>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_MspInit+0x5c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
=======
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_MspInit+0x5c>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_MspInit+0x5c>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6193      	str	r3, [r2, #24]
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_MspInit+0x5c>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <HAL_MspInit+0x5c>)
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_MspInit+0x5c>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	61d3      	str	r3, [r2, #28]
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_MspInit+0x5c>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
>>>>>>> 6147058 (refactor)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_MspInit+0x60>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_MspInit+0x60>)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6053      	str	r3, [r2, #4]
=======
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_MspInit+0x60>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_MspInit+0x60>)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6053      	str	r3, [r2, #4]
>>>>>>> 6147058 (refactor)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000

080026b0 <HAL_ADC_MspInit>:
=======
 8003936:	bf00      	nop
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr
 8003940:	40021000 	.word	0x40021000
 8003944:	40010000 	.word	0x40010000

08003948 <HAL_ADC_MspInit>:
>>>>>>> 6147058 (refactor)
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_ADC_MspInit+0x7c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d129      	bne.n	8002724 <HAL_ADC_MspInit+0x74>
=======
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a18      	ldr	r2, [pc, #96]	; (80039c4 <HAL_ADC_MspInit+0x7c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d129      	bne.n	80039bc <HAL_ADC_MspInit+0x74>
>>>>>>> 6147058 (refactor)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a16      	ldr	r2, [pc, #88]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_ADC_MspInit+0x80>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
=======
 8003968:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6193      	str	r3, [r2, #24]
 800398c:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <HAL_ADC_MspInit+0x80>)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6147058 (refactor)
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
<<<<<<< HEAD
 8002700:	2308      	movs	r3, #8
 8002702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002704:	2303      	movs	r3, #3
 8002706:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4619      	mov	r1, r3
 800270e:	4809      	ldr	r0, [pc, #36]	; (8002734 <HAL_ADC_MspInit+0x84>)
 8002710:	f001 faa6 	bl	8003c60 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002714:	2200      	movs	r2, #0
 8002716:	2100      	movs	r1, #0
 8002718:	2012      	movs	r0, #18
 800271a:	f001 f81c 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800271e:	2012      	movs	r0, #18
 8002720:	f001 f835 	bl	800378e <HAL_NVIC_EnableIRQ>
=======
 8003998:	2308      	movs	r3, #8
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800399c:	2303      	movs	r3, #3
 800399e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	4809      	ldr	r0, [pc, #36]	; (80039cc <HAL_ADC_MspInit+0x84>)
 80039a8:	f001 fa76 	bl	8004e98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	2012      	movs	r0, #18
 80039b2:	f001 f81e 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80039b6:	2012      	movs	r0, #18
 80039b8:	f001 f837 	bl	8004a2a <HAL_NVIC_EnableIRQ>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002724:	bf00      	nop
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40012400 	.word	0x40012400
 8002730:	40021000 	.word	0x40021000
 8002734:	40010800 	.word	0x40010800

08002738 <HAL_CRC_MspInit>:
=======
 80039bc:	bf00      	nop
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40012400 	.word	0x40012400
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010800 	.word	0x40010800

080039d0 <HAL_CRC_MspInit>:
>>>>>>> 6147058 (refactor)
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
<<<<<<< HEAD
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_CRC_MspInit+0x34>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10b      	bne.n	8002762 <HAL_CRC_MspInit+0x2a>
=======
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <HAL_CRC_MspInit+0x34>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10b      	bne.n	80039fa <HAL_CRC_MspInit+0x2a>
>>>>>>> 6147058 (refactor)
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
<<<<<<< HEAD
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_CRC_MspInit+0x38>)
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_CRC_MspInit+0x38>)
 8002750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002754:	6153      	str	r3, [r2, #20]
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_CRC_MspInit+0x38>)
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
=======
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ec:	6153      	str	r3, [r2, #20]
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <HAL_CRC_MspInit+0x38>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40023000 	.word	0x40023000
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_SPI_MspInit>:
=======
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	40023000 	.word	0x40023000
 8003a08:	40021000 	.word	0x40021000

08003a0c <HAL_SPI_MspInit>:
>>>>>>> 6147058 (refactor)
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <HAL_SPI_MspInit+0x70>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d123      	bne.n	80027dc <HAL_SPI_MspInit+0x68>
=======
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
 8003a20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <HAL_SPI_MspInit+0x70>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d123      	bne.n	8003a74 <HAL_SPI_MspInit+0x68>
>>>>>>> 6147058 (refactor)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 800279a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6193      	str	r3, [r2, #24]
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_SPI_MspInit+0x74>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68bb      	ldr	r3, [r7, #8]
=======
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a36:	6193      	str	r3, [r2, #24]
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6193      	str	r3, [r2, #24]
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_SPI_MspInit+0x74>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 6147058 (refactor)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
<<<<<<< HEAD
 80027c4:	23a0      	movs	r3, #160	; 0xa0
 80027c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	f107 0310 	add.w	r3, r7, #16
 80027d4:	4619      	mov	r1, r3
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_SPI_MspInit+0x78>)
 80027d8:	f001 fa42 	bl	8003c60 <HAL_GPIO_Init>
=======
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a64:	2303      	movs	r3, #3
 8003a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4805      	ldr	r0, [pc, #20]	; (8003a84 <HAL_SPI_MspInit+0x78>)
 8003a70:	f001 fa12 	bl	8004e98 <HAL_GPIO_Init>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40013000 	.word	0x40013000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010800 	.word	0x40010800

080027f0 <HAL_TIM_IC_MspInit>:
=======
 8003a74:	bf00      	nop
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40013000 	.word	0x40013000
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40010800 	.word	0x40010800

08003a88 <HAL_TIM_IC_MspInit>:
>>>>>>> 6147058 (refactor)
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
<<<<<<< HEAD
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <HAL_TIM_IC_MspInit+0x108>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d13e      	bne.n	800288e <HAL_TIM_IC_MspInit+0x9e>
=======
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3b      	ldr	r2, [pc, #236]	; (8003b90 <HAL_TIM_IC_MspInit+0x108>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d13e      	bne.n	8003b26 <HAL_TIM_IC_MspInit+0x9e>
>>>>>>> 6147058 (refactor)
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	4a39      	ldr	r2, [pc, #228]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	61d3      	str	r3, [r2, #28]
 800281c:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a33      	ldr	r2, [pc, #204]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 800282e:	f043 0308 	orr.w	r3, r3, #8
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697b      	ldr	r3, [r7, #20]
=======
 8003aa8:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4a39      	ldr	r2, [pc, #228]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	61d3      	str	r3, [r2, #28]
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	6193      	str	r3, [r2, #24]
 8003acc:	4b31      	ldr	r3, [pc, #196]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	617b      	str	r3, [r7, #20]
 8003ad6:	697b      	ldr	r3, [r7, #20]
>>>>>>> 6147058 (refactor)
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
<<<<<<< HEAD
 8002840:	2310      	movs	r3, #16
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	482b      	ldr	r0, [pc, #172]	; (8002900 <HAL_TIM_IC_MspInit+0x110>)
 8002854:	f001 fa04 	bl	8003c60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_TIM_IC_MspInit+0x114>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <HAL_TIM_IC_MspInit+0x114>)
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	201d      	movs	r0, #29
 8002882:	f000 ff68 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002886:	201d      	movs	r0, #29
 8002888:	f000 ff81 	bl	800378e <HAL_NVIC_EnableIRQ>
=======
 8003ad8:	2310      	movs	r3, #16
 8003ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003adc:	2300      	movs	r3, #0
 8003ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae4:	f107 031c 	add.w	r3, r7, #28
 8003ae8:	4619      	mov	r1, r3
 8003aea:	482b      	ldr	r0, [pc, #172]	; (8003b98 <HAL_TIM_IC_MspInit+0x110>)
 8003aec:	f001 f9d4 	bl	8004e98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003af0:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_TIM_IC_MspInit+0x114>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_TIM_IC_MspInit+0x114>)
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	201d      	movs	r0, #29
 8003b1a:	f000 ff6a 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1e:	201d      	movs	r0, #29
 8003b20:	f000 ff83 	bl	8004a2a <HAL_NVIC_EnableIRQ>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
<<<<<<< HEAD
 800288c:	e030      	b.n	80028f0 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_TIM_IC_MspInit+0x118>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d12b      	bne.n	80028f0 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 800289e:	f043 0304 	orr.w	r3, r3, #4
 80028a2:	61d3      	str	r3, [r2, #28]
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 80028b6:	f043 0308 	orr.w	r3, r3, #8
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_TIM_IC_MspInit+0x10c>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028c8:	2340      	movs	r3, #64	; 0x40
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_TIM_IC_MspInit+0x110>)
 80028dc:	f001 f9c0 	bl	8003c60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	201e      	movs	r0, #30
 80028e6:	f000 ff36 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028ea:	201e      	movs	r0, #30
 80028ec:	f000 ff4f 	bl	800378e <HAL_NVIC_EnableIRQ>
}
 80028f0:	bf00      	nop
 80028f2:	3730      	adds	r7, #48	; 0x30
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010c00 	.word	0x40010c00
 8002904:	40010000 	.word	0x40010000
 8002908:	40000800 	.word	0x40000800

0800290c <NMI_Handler>:
=======
 8003b24:	e030      	b.n	8003b88 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <HAL_TIM_IC_MspInit+0x118>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b30:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	61d3      	str	r3, [r2, #28]
 8003b3c:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b4e:	f043 0308 	orr.w	r3, r3, #8
 8003b52:	6193      	str	r3, [r2, #24]
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_TIM_IC_MspInit+0x10c>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6c:	f107 031c 	add.w	r3, r7, #28
 8003b70:	4619      	mov	r1, r3
 8003b72:	4809      	ldr	r0, [pc, #36]	; (8003b98 <HAL_TIM_IC_MspInit+0x110>)
 8003b74:	f001 f990 	bl	8004e98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	201e      	movs	r0, #30
 8003b7e:	f000 ff38 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b82:	201e      	movs	r0, #30
 8003b84:	f000 ff51 	bl	8004a2a <HAL_NVIC_EnableIRQ>
}
 8003b88:	bf00      	nop
 8003b8a:	3730      	adds	r7, #48	; 0x30
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40010c00 	.word	0x40010c00
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <NMI_Handler>:
>>>>>>> 6147058 (refactor)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
=======
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HardFault_Handler>:
=======
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <HardFault_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 800291c:	4806      	ldr	r0, [pc, #24]	; (8002938 <HardFault_Handler+0x20>)
 800291e:	f008 fd45 	bl	800b3ac <iprintf>
=======
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn \n");
 8003bb4:	4806      	ldr	r0, [pc, #24]	; (8003bd0 <HardFault_Handler+0x20>)
 8003bb6:	f008 fd9b 	bl	800c6f0 <puts>
>>>>>>> 6147058 (refactor)
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
<<<<<<< HEAD
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <HardFault_Handler+0x20>)
 8002924:	f008 fd42 	bl	800b3ac <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292e:	4803      	ldr	r0, [pc, #12]	; (800293c <HardFault_Handler+0x24>)
 8002930:	f001 fb31 	bl	8003f96 <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002934:	e7f5      	b.n	8002922 <HardFault_Handler+0xa>
 8002936:	bf00      	nop
 8002938:	0800c820 	.word	0x0800c820
 800293c:	40011000 	.word	0x40011000

08002940 <MemManage_Handler>:
=======
 8003bba:	4806      	ldr	r0, [pc, #24]	; (8003bd4 <HardFault_Handler+0x24>)
 8003bbc:	f008 fd12 	bl	800c5e4 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc6:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <HardFault_Handler+0x28>)
 8003bc8:	f001 fb01 	bl	80051ce <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8003bcc:	e7f5      	b.n	8003bba <HardFault_Handler+0xa>
 8003bce:	bf00      	nop
 8003bd0:	0800db74 	.word	0x0800db74
 8003bd4:	0800db84 	.word	0x0800db84
 8003bd8:	40011000 	.word	0x40011000

08003bdc <MemManage_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
=======
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002944:	e7fe      	b.n	8002944 <MemManage_Handler+0x4>

08002946 <BusFault_Handler>:
=======
 8003be0:	e7fe      	b.n	8003be0 <MemManage_Handler+0x4>

08003be2 <BusFault_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
=======
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800294a:	e7fe      	b.n	800294a <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:
=======
 8003be6:	e7fe      	b.n	8003be6 <BusFault_Handler+0x4>

08003be8 <UsageFault_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
=======
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002950:	e7fe      	b.n	8002950 <UsageFault_Handler+0x4>

08002952 <SVC_Handler>:
=======
 8003bec:	e7fe      	b.n	8003bec <UsageFault_Handler+0x4>

08003bee <SVC_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
=======
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <DebugMon_Handler>:
=======
 8003bf2:	bf00      	nop
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <DebugMon_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
=======
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:
=======
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <PendSV_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
=======
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <SysTick_Handler>:
=======
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <SysTick_Handler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
=======
 8003c12:	b580      	push	{r7, lr}
 8003c14:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 800297a:	f000 f945 	bl	8002c08 <HAL_IncTick>
=======
 8003c16:	f000 f945 	bl	8003ea4 <HAL_IncTick>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <ADC1_2_IRQHandler>:
=======
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <ADC1_2_IRQHandler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
<<<<<<< HEAD
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
=======
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <ADC1_2_IRQHandler+0x10>)
 800298a:	f000 fb17 	bl	8002fbc <HAL_ADC_IRQHandler>
=======
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <ADC1_2_IRQHandler+0x10>)
 8003c26:	f000 fb17 	bl	8004258 <HAL_ADC_IRQHandler>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
<<<<<<< HEAD
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000094c 	.word	0x2000094c

08002998 <USB_LP_CAN1_RX0_IRQHandler>:
=======
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000954 	.word	0x20000954

08003c34 <USB_LP_CAN1_RX0_IRQHandler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
=======
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
<<<<<<< HEAD
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800299e:	f001 fc43 	bl	8004228 <HAL_PCD_IRQHandler>
=======
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003c3a:	f001 fc11 	bl	8005460 <HAL_PCD_IRQHandler>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200012bc 	.word	0x200012bc

080029ac <TIM3_IRQHandler>:
=======
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200012c4 	.word	0x200012c4

08003c48 <TIM3_IRQHandler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
=======
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <TIM3_IRQHandler+0x10>)
 80029b2:	f003 ffd5 	bl	8006960 <HAL_TIM_IRQHandler>
=======
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM3_IRQHandler+0x10>)
 8003c4e:	f003 ffa3 	bl	8007b98 <HAL_TIM_IRQHandler>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000904 	.word	0x20000904

080029c0 <TIM4_IRQHandler>:
=======
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200008fc 	.word	0x200008fc

08003c5c <TIM4_IRQHandler>:
>>>>>>> 6147058 (refactor)

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
=======
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <TIM4_IRQHandler+0x10>)
 80029c6:	f003 ffcb 	bl	8006960 <HAL_TIM_IRQHandler>
=======
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM4_IRQHandler+0x10>)
 8003c62:	f003 ff99 	bl	8007b98 <HAL_TIM_IRQHandler>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200008b4 	.word	0x200008b4

080029d4 <_read>:
=======
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	200008ac 	.word	0x200008ac

08003c70 <_read>:
>>>>>>> 6147058 (refactor)
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029e6:	f3af 8000 	nop.w
 80029ea:	4601      	mov	r1, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf0      	blt.n	80029e6 <_read+0x12>
	}

return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_close>:
=======
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	e00a      	b.n	8003c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c82:	f3af 8000 	nop.w
 8003c86:	4601      	mov	r1, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	60ba      	str	r2, [r7, #8]
 8003c8e:	b2ca      	uxtb	r2, r1
 8003c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	dbf0      	blt.n	8003c82 <_read+0x12>
	}

return len;
 8003ca0:	687b      	ldr	r3, [r7, #4]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_close>:
>>>>>>> 6147058 (refactor)
	}
	return len;
}

int _close(int file)
{
<<<<<<< HEAD
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
	return -1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <_fstat>:
=======
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <_fstat>:
>>>>>>> 6147058 (refactor)


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a34:	605a      	str	r2, [r3, #4]
	return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <_isatty>:

int _isatty(int file)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	return 1;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b085      	sub	sp, #20
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
	return 0;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
	...

08002a70 <_sbrk>:
=======
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd0:	605a      	str	r2, [r3, #4]
	return 0;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <_isatty>:

int _isatty(int file)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
	return 1;
 8003ce6:	2301      	movs	r3, #1
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
	return 0;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
	...

08003d0c <_sbrk>:
>>>>>>> 6147058 (refactor)
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
<<<<<<< HEAD
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
=======
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
<<<<<<< HEAD
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <_sbrk+0x50>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <_sbrk+0x16>
		heap_end = &end;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <_sbrk+0x50>)
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <_sbrk+0x54>)
 8002a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <_sbrk+0x50>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <_sbrk+0x50>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	466a      	mov	r2, sp
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d907      	bls.n	8002aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a9a:	f008 fc2d 	bl	800b2f8 <__errno>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa8:	e006      	b.n	8002ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <_sbrk+0x50>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a03      	ldr	r2, [pc, #12]	; (8002ac0 <_sbrk+0x50>)
 8002ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000284 	.word	0x20000284
 8002ac4:	200015b8 	.word	0x200015b8

08002ac8 <SystemInit>:
=======
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <_sbrk+0x50>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <_sbrk+0x16>
		heap_end = &end;
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <_sbrk+0x50>)
 8003d1e:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <_sbrk+0x54>)
 8003d20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <_sbrk+0x50>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <_sbrk+0x50>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4413      	add	r3, r2
 8003d30:	466a      	mov	r2, sp
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d907      	bls.n	8003d46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d36:	f008 fbfb 	bl	800c530 <__errno>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	e006      	b.n	8003d54 <_sbrk+0x48>
	}

	heap_end += incr;
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <_sbrk+0x50>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <_sbrk+0x50>)
 8003d50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	2000027c 	.word	0x2000027c
 8003d60:	200015c0 	.word	0x200015c0

08003d64 <SystemInit>:
>>>>>>> 6147058 (refactor)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <SystemInit+0x5c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <SystemInit+0x5c>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]
=======
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <SystemInit+0x5c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <SystemInit+0x5c>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6013      	str	r3, [r2, #0]
>>>>>>> 6147058 (refactor)

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
<<<<<<< HEAD
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <SystemInit+0x5c>)
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	4911      	ldr	r1, [pc, #68]	; (8002b24 <SystemInit+0x5c>)
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <SystemInit+0x60>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
=======
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <SystemInit+0x5c>)
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4911      	ldr	r1, [pc, #68]	; (8003dc0 <SystemInit+0x5c>)
 8003d7a:	4b12      	ldr	r3, [pc, #72]	; (8003dc4 <SystemInit+0x60>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
<<<<<<< HEAD
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <SystemInit+0x5c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <SystemInit+0x5c>)
 8002aea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <SystemInit+0x5c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SystemInit+0x5c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <SystemInit+0x5c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <SystemInit+0x5c>)
 8002b06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002b0a:	6053      	str	r3, [r2, #4]
=======
 8003d80:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <SystemInit+0x5c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a0e      	ldr	r2, [pc, #56]	; (8003dc0 <SystemInit+0x5c>)
 8003d86:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <SystemInit+0x5c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <SystemInit+0x5c>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <SystemInit+0x5c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a07      	ldr	r2, [pc, #28]	; (8003dc0 <SystemInit+0x5c>)
 8003da2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003da6:	6053      	str	r3, [r2, #4]
>>>>>>> 6147058 (refactor)

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
<<<<<<< HEAD
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SystemInit+0x5c>)
 8002b0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b12:	609a      	str	r2, [r3, #8]
=======
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <SystemInit+0x5c>)
 8003daa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003dae:	609a      	str	r2, [r3, #8]
>>>>>>> 6147058 (refactor)
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
<<<<<<< HEAD
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <SystemInit+0x64>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b1a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	f8ff0000 	.word	0xf8ff0000
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <Reset_Handler>:
=======
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <SystemInit+0x64>)
 8003db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db6:	609a      	str	r2, [r3, #8]
#endif 
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	f8ff0000 	.word	0xf8ff0000
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <Reset_Handler>:
>>>>>>> 6147058 (refactor)
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
<<<<<<< HEAD
 8002b30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b32:	e003      	b.n	8002b3c <LoopCopyDataInit>

08002b34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b3a:	3104      	adds	r1, #4

08002b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b3c:	480a      	ldr	r0, [pc, #40]	; (8002b68 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002b44:	d3f6      	bcc.n	8002b34 <CopyDataInit>
  ldr r2, =_sbss
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002b48:	e002      	b.n	8002b50 <LoopFillZerobss>

08002b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002b4c:	f842 3b04 	str.w	r3, [r2], #4

08002b50 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002b54:	d3f9      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b56:	f7ff ffb7 	bl	8002ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f008 fbd3 	bl	800b304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b5e:	f7ff f80d 	bl	8001b7c <main>
  bx lr
 8002b62:	4770      	bx	lr
  ldr r3, =_sidata
 8002b64:	0800c978 	.word	0x0800c978
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002b6c:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8002b70:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8002b74:	200015b8 	.word	0x200015b8

08002b78 <CAN1_RX1_IRQHandler>:
=======
 8003dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003dce:	e003      	b.n	8003dd8 <LoopCopyDataInit>

08003dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003dd6:	3104      	adds	r1, #4

08003dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003dd8:	480a      	ldr	r0, [pc, #40]	; (8003e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003de0:	d3f6      	bcc.n	8003dd0 <CopyDataInit>
  ldr r2, =_sbss
 8003de2:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003de4:	e002      	b.n	8003dec <LoopFillZerobss>

08003de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003de8:	f842 3b04 	str.w	r3, [r2], #4

08003dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003df0:	d3f9      	bcc.n	8003de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003df2:	f7ff ffb7 	bl	8003d64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003df6:	f008 fba1 	bl	800c53c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dfa:	f7ff f86b 	bl	8002ed4 <main>
  bx lr
 8003dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8003e00:	0800dcdc 	.word	0x0800dcdc
  ldr r0, =_sdata
 8003e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e08:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8003e0c:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003e10:	200015c0 	.word	0x200015c0

08003e14 <CAN1_RX1_IRQHandler>:
>>>>>>> 6147058 (refactor)
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8002b78:	e7fe      	b.n	8002b78 <CAN1_RX1_IRQHandler>
	...

08002b7c <HAL_Init>:
=======
 8003e14:	e7fe      	b.n	8003e14 <CAN1_RX1_IRQHandler>
	...

08003e18 <HAL_Init>:
>>>>>>> 6147058 (refactor)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
=======
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <HAL_Init+0x28>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <HAL_Init+0x28>)
 8002b86:	f043 0310 	orr.w	r3, r3, #16
 8002b8a:	6013      	str	r3, [r2, #0]
=======
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_Init+0x28>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <HAL_Init+0x28>)
 8003e22:	f043 0310 	orr.w	r3, r3, #16
 8003e26:	6013      	str	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8002b8c:	2003      	movs	r0, #3
 8002b8e:	f000 fdd7 	bl	8003740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f808 	bl	8002ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b98:	f7ff fd58 	bl	800264c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000

08002ba8 <HAL_InitTick>:
=======
 8003e28:	2003      	movs	r0, #3
 8003e2a:	f000 fdd7 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f000 f808 	bl	8003e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e34:	f7ff fd56 	bl	80038e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40022000 	.word	0x40022000

08003e44 <HAL_InitTick>:
>>>>>>> 6147058 (refactor)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fdef 	bl	80037aa <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
=======
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_InitTick+0x54>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_InitTick+0x58>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4619      	mov	r1, r3
 8003e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fdef 	bl	8004a46 <HAL_SYSTICK_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e00e      	b.n	8003e90 <HAL_InitTick+0x4c>
>>>>>>> 6147058 (refactor)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f000 fdb7 	bl	8003756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
=======
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b0f      	cmp	r3, #15
 8003e76:	d80a      	bhi.n	8003e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	f000 fdb7 	bl	80049f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e84:	4a06      	ldr	r2, [pc, #24]	; (8003ea0 <HAL_InitTick+0x5c>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6013      	str	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000010 	.word	0x20000010
 8002c00:	20000018 	.word	0x20000018
 8002c04:	20000014 	.word	0x20000014

08002c08 <HAL_IncTick>:
=======
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000014 	.word	0x20000014
 8003e9c:	2000001c 	.word	0x2000001c
 8003ea0:	20000018 	.word	0x20000018

08003ea4 <HAL_IncTick>:
>>>>>>> 6147058 (refactor)
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <HAL_IncTick+0x1c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_IncTick+0x20>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a03      	ldr	r2, [pc, #12]	; (8002c28 <HAL_IncTick+0x20>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000018 	.word	0x20000018
 8002c28:	200009d4 	.word	0x200009d4

08002c2c <HAL_GetTick>:
=======
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_IncTick+0x1c>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_IncTick+0x20>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_IncTick+0x20>)
 8003eb6:	6013      	str	r3, [r2, #0]
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	2000001c 	.word	0x2000001c
 8003ec4:	200009dc 	.word	0x200009dc

08003ec8 <HAL_GetTick>:
>>>>>>> 6147058 (refactor)
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b02      	ldr	r3, [pc, #8]	; (8002c3c <HAL_GetTick+0x10>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	200009d4 	.word	0x200009d4

08002c40 <HAL_Delay>:
=======
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <HAL_GetTick+0x10>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	200009dc 	.word	0x200009dc

08003edc <HAL_Delay>:
>>>>>>> 6147058 (refactor)
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fff0 	bl	8002c2c <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d005      	beq.n	8002c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_Delay+0x44>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c66:	bf00      	nop
 8002c68:	f7ff ffe0 	bl	8002c2c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8f7      	bhi.n	8002c68 <HAL_Delay+0x28>
  {
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000018 	.word	0x20000018

08002c88 <HAL_ADC_Init>:
=======
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7ff fff0 	bl	8003ec8 <HAL_GetTick>
 8003ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef4:	d005      	beq.n	8003f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <HAL_Delay+0x44>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f02:	bf00      	nop
 8003f04:	f7ff ffe0 	bl	8003ec8 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8f7      	bhi.n	8003f04 <HAL_Delay+0x28>
  {
  }
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000001c 	.word	0x2000001c

08003f24 <HAL_ADC_Init>:
>>>>>>> 6147058 (refactor)
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0be      	b.n	8002e28 <HAL_ADC_Init+0x1a0>
=======
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0be      	b.n	80040c4 <HAL_ADC_Init+0x1a0>
>>>>>>> 6147058 (refactor)
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
=======
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
>>>>>>> 6147058 (refactor)
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fcf2 	bl	80026b0 <HAL_ADC_MspInit>
=======
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fcf0 	bl	8003948 <HAL_ADC_MspInit>
>>>>>>> 6147058 (refactor)
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fb8b 	bl	80033e8 <ADC_ConversionStop_Disable>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	75fb      	strb	r3, [r7, #23]
=======
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb8b 	bl	8004684 <ADC_ConversionStop_Disable>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6147058 (refactor)
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8099 	bne.w	8002e16 <HAL_ADC_Init+0x18e>
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8095 	bne.w	8002e16 <HAL_ADC_Init+0x18e>
=======
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8099 	bne.w	80040b2 <HAL_ADC_Init+0x18e>
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 8095 	bne.w	80040b2 <HAL_ADC_Init+0x18e>
>>>>>>> 6147058 (refactor)
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cf4:	f023 0302 	bic.w	r3, r3, #2
 8002cf8:	f043 0202 	orr.w	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f90:	f023 0302 	bic.w	r3, r3, #2
 8003f94:	f043 0202 	orr.w	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
<<<<<<< HEAD
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7b1b      	ldrb	r3, [r3, #12]
 8002d0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
=======
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
 8003faa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003fac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
>>>>>>> 6147058 (refactor)

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
<<<<<<< HEAD
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d003      	beq.n	8002d2a <HAL_ADC_Init+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_ADC_Init+0xa8>
 8002d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d2e:	e000      	b.n	8002d32 <HAL_ADC_Init+0xaa>
 8002d30:	2300      	movs	r3, #0
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
=======
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fbc:	d003      	beq.n	8003fc6 <HAL_ADC_Init+0xa2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_ADC_Init+0xa8>
 8003fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fca:	e000      	b.n	8003fce <HAL_ADC_Init+0xaa>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
>>>>>>> 6147058 (refactor)
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
<<<<<<< HEAD
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7d1b      	ldrb	r3, [r3, #20]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d119      	bne.n	8002d74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7b1b      	ldrb	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_ADC_Init+0xd4>
=======
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7d1b      	ldrb	r3, [r3, #20]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d119      	bne.n	8004010 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	7b1b      	ldrb	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_Init+0xd4>
>>>>>>> 6147058 (refactor)
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
<<<<<<< HEAD
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	035a      	lsls	r2, r3, #13
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e00b      	b.n	8002d74 <HAL_ADC_Init+0xec>
=======
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	035a      	lsls	r2, r3, #13
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e00b      	b.n	8004010 <HAL_ADC_Init+0xec>
>>>>>>> 6147058 (refactor)
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6147058 (refactor)
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
<<<<<<< HEAD
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
=======
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	430a      	orrs	r2, r1
 8004022:	605a      	str	r2, [r3, #4]
>>>>>>> 6147058 (refactor)
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
<<<<<<< HEAD
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b28      	ldr	r3, [pc, #160]	; (8002e30 <HAL_ADC_Init+0x1a8>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]
=======
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_ADC_Init+0x1a8>)
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	430b      	orrs	r3, r1
 8004036:	6093      	str	r3, [r2, #8]
>>>>>>> 6147058 (refactor)
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d003      	beq.n	8002dae <HAL_ADC_Init+0x126>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d104      	bne.n	8002db8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	051b      	lsls	r3, r3, #20
 8002db6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004040:	d003      	beq.n	800404a <HAL_ADC_Init+0x126>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d104      	bne.n	8004054 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	3b01      	subs	r3, #1
 8004050:	051b      	lsls	r3, r3, #20
 8004052:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	430a      	orrs	r2, r1
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6147058 (refactor)
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
<<<<<<< HEAD
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_ADC_Init+0x1ac>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d10b      	bne.n	8002df4 <HAL_ADC_Init+0x16c>
=======
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_ADC_Init+0x1ac>)
 8004070:	4013      	ands	r3, r2
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	429a      	cmp	r2, r3
 8004076:	d10b      	bne.n	8004090 <HAL_ADC_Init+0x16c>
>>>>>>> 6147058 (refactor)
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df2:	e018      	b.n	8002e26 <HAL_ADC_Init+0x19e>
=======
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800408e:	e018      	b.n	80040c2 <HAL_ADC_Init+0x19e>
>>>>>>> 6147058 (refactor)
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f023 0312 	bic.w	r3, r3, #18
 8002dfc:	f043 0210 	orr.w	r2, r3, #16
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	f023 0312 	bic.w	r3, r3, #18
 8004098:	f043 0210 	orr.w	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e14:	e007      	b.n	8002e26 <HAL_ADC_Init+0x19e>
=======
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80040b0:	e007      	b.n	80040c2 <HAL_ADC_Init+0x19e>
>>>>>>> 6147058 (refactor)
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
=======
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	f043 0210 	orr.w	r2, r3, #16
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6147058 (refactor)
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8002e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	ffe1f7fd 	.word	0xffe1f7fd
 8002e34:	ff1f0efe 	.word	0xff1f0efe

08002e38 <HAL_ADC_Start_IT>:
=======
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	ffe1f7fd 	.word	0xffe1f7fd
 80040d0:	ff1f0efe 	.word	0xff1f0efe

080040d4 <HAL_ADC_Start_IT>:
>>>>>>> 6147058 (refactor)
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
=======
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6147058 (refactor)
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Start_IT+0x1a>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0a0      	b.n	8002f94 <HAL_ADC_Start_IT+0x15c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa72 	bl	8003344 <ADC_Enable>
 8002e60:	4603      	mov	r3, r0
 8002e62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 808f 	bne.w	8002f8a <HAL_ADC_Start_IT+0x152>
=======
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_Start_IT+0x1a>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e0a0      	b.n	8004230 <HAL_ADC_Start_IT+0x15c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa72 	bl	80045e0 <ADC_Enable>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 808f 	bne.w	8004226 <HAL_ADC_Start_IT+0x152>
>>>>>>> 6147058 (refactor)
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
<<<<<<< HEAD
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <HAL_ADC_Start_IT+0x164>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d105      	bne.n	8002e96 <HAL_ADC_Start_IT+0x5e>
 8002e8a:	4b45      	ldr	r3, [pc, #276]	; (8002fa0 <HAL_ADC_Start_IT+0x168>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d115      	bne.n	8002ec2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a45      	ldr	r2, [pc, #276]	; (8004238 <HAL_ADC_Start_IT+0x164>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d105      	bne.n	8004132 <HAL_ADC_Start_IT+0x5e>
 8004126:	4b45      	ldr	r3, [pc, #276]	; (800423c <HAL_ADC_Start_IT+0x168>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d115      	bne.n	800415e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d026      	beq.n	8002efe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ec0:	e01d      	b.n	8002efe <HAL_ADC_Start_IT+0xc6>
=======
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d026      	beq.n	800419a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004154:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800415c:	e01d      	b.n	800419a <HAL_ADC_Start_IT+0xc6>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
<<<<<<< HEAD
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
<<<<<<< HEAD
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a33      	ldr	r2, [pc, #204]	; (8002fa0 <HAL_ADC_Start_IT+0x168>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Start_IT+0xaa>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2f      	ldr	r2, [pc, #188]	; (8002f9c <HAL_ADC_Start_IT+0x164>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10d      	bne.n	8002efe <HAL_ADC_Start_IT+0xc6>
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <HAL_ADC_Start_IT+0x168>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a33      	ldr	r2, [pc, #204]	; (800423c <HAL_ADC_Start_IT+0x168>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_ADC_Start_IT+0xaa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <HAL_ADC_Start_IT+0x164>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <HAL_ADC_Start_IT+0xc6>
 800417e:	4b2f      	ldr	r3, [pc, #188]	; (800423c <HAL_ADC_Start_IT+0x168>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004192:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d006      	beq.n	8002f18 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f023 0206 	bic.w	r2, r3, #6
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_Start_IT+0xe6>
=======
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f023 0206 	bic.w	r2, r3, #6
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80041b2:	e002      	b.n	80041ba <HAL_ADC_Start_IT+0xe6>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6147058 (refactor)
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
<<<<<<< HEAD
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0202 	mvn.w	r2, #2
 8002f2e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0220 	orr.w	r2, r2, #32
 8002f3e:	605a      	str	r2, [r3, #4]
=======
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0202 	mvn.w	r2, #2
 80041ca:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	605a      	str	r2, [r3, #4]
>>>>>>> 6147058 (refactor)
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
<<<<<<< HEAD
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f4e:	d113      	bne.n	8002f78 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <HAL_ADC_Start_IT+0x164>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d105      	bne.n	8002f66 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_ADC_Start_IT+0x168>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	e00c      	b.n	8002f92 <HAL_ADC_Start_IT+0x15a>
=======
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80041e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041ea:	d113      	bne.n	8004214 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80041f0:	4a11      	ldr	r2, [pc, #68]	; (8004238 <HAL_ADC_Start_IT+0x164>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d105      	bne.n	8004202 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80041f6:	4b11      	ldr	r3, [pc, #68]	; (800423c <HAL_ADC_Start_IT+0x168>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	e00c      	b.n	800422e <HAL_ADC_Start_IT+0x15a>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
<<<<<<< HEAD
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	e003      	b.n	8002f92 <HAL_ADC_Start_IT+0x15a>
=======
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	e003      	b.n	800422e <HAL_ADC_Start_IT+0x15a>
>>>>>>> 6147058 (refactor)
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40012800 	.word	0x40012800
 8002fa0:	40012400 	.word	0x40012400

08002fa4 <HAL_ADC_GetValue>:
=======
 800422e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40012800 	.word	0x40012800
 800423c:	40012400 	.word	0x40012400

08004240 <HAL_ADC_GetValue>:
>>>>>>> 6147058 (refactor)
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
=======
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
<<<<<<< HEAD
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_IRQHandler>:
=======
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <HAL_ADC_IRQHandler>:
>>>>>>> 6147058 (refactor)
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
=======
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
<<<<<<< HEAD
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d140      	bne.n	8003054 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d139      	bne.n	8003054 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	d140      	bne.n	80042f0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d139      	bne.n	80042f0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d105      	bne.n	8004294 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
<<<<<<< HEAD
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003002:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003006:	d11d      	bne.n	8003044 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800300c:	2b00      	cmp	r3, #0
 800300e:	d119      	bne.n	8003044 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0220 	bic.w	r2, r2, #32
 800301e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800429e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80042a2:	d11d      	bne.n	80042e0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d119      	bne.n	80042e0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0220 	bic.w	r2, r2, #32
 80042ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fe f96f 	bl	8001328 <HAL_ADC_ConvCpltCallback>
=======
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fe f9c5 	bl	8002670 <HAL_ADC_ConvCpltCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f06f 0212 	mvn.w	r2, #18
 8003052:	601a      	str	r2, [r3, #0]
=======
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0212 	mvn.w	r2, #18
 80042ee:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
<<<<<<< HEAD
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d14f      	bne.n	8003102 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d148      	bne.n	8003102 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d14f      	bne.n	800439e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d148      	bne.n	800439e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
<<<<<<< HEAD
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003092:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003096:	d012      	beq.n	80030be <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d125      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80030b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030b4:	d11d      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d119      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030cc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800432e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004332:	d012      	beq.n	800435a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800433e:	2b00      	cmp	r3, #0
 8004340:	d125      	bne.n	800438e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800434c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004350:	d11d      	bne.n	800438e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d105      	bne.n	800438e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	f043 0201 	orr.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa4e 	bl	8003594 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa4e 	bl	8004830 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
<<<<<<< HEAD
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 020c 	mvn.w	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
=======
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 020c 	mvn.w	r2, #12
 800439c:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
<<<<<<< HEAD
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d114      	bne.n	800313a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10d      	bne.n	800313a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d114      	bne.n	80043d6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f809 	bl	8003142 <HAL_ADC_LevelOutOfWindowCallback>
=======
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f809 	bl	80043de <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
<<<<<<< HEAD
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0201 	mvn.w	r2, #1
 8003138:	601a      	str	r2, [r3, #0]
=======
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0201 	mvn.w	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
    }
  }
  
}
<<<<<<< HEAD
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_ADC_LevelOutOfWindowCallback>:
=======
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
=======
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
<<<<<<< HEAD
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_ADC_ConfigChannel>:
=======
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <HAL_ADC_ConfigChannel>:
>>>>>>> 6147058 (refactor)
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
<<<<<<< HEAD
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
=======
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60bb      	str	r3, [r7, #8]
>>>>>>> 6147058 (refactor)
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x20>
 8003170:	2302      	movs	r3, #2
 8003172:	e0dc      	b.n	800332e <HAL_ADC_ConfigChannel+0x1da>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x20>
 800440c:	2302      	movs	r3, #2
 800440e:	e0dc      	b.n	80045ca <HAL_ADC_ConfigChannel+0x1da>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b06      	cmp	r3, #6
 8003182:	d81c      	bhi.n	80031be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b05      	subs	r3, #5
 8003196:	221f      	movs	r2, #31
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	4019      	ands	r1, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b05      	subs	r3, #5
 80031b0:	fa00 f203 	lsl.w	r2, r0, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34
 80031bc:	e03c      	b.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
=======
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b06      	cmp	r3, #6
 800441e:	d81c      	bhi.n	800445a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	3b05      	subs	r3, #5
 8004432:	221f      	movs	r2, #31
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	4019      	ands	r1, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	3b05      	subs	r3, #5
 800444c:	fa00 f203 	lsl.w	r2, r0, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	635a      	str	r2, [r3, #52]	; 0x34
 8004458:	e03c      	b.n	80044d4 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 6147058 (refactor)
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d81c      	bhi.n	8003200 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	3b23      	subs	r3, #35	; 0x23
 80031d8:	221f      	movs	r2, #31
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	4019      	ands	r1, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	3b23      	subs	r3, #35	; 0x23
 80031f2:	fa00 f203 	lsl.w	r2, r0, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
 80031fe:	e01b      	b.n	8003238 <HAL_ADC_ConfigChannel+0xe4>
=======
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d81c      	bhi.n	800449c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	3b23      	subs	r3, #35	; 0x23
 8004474:	221f      	movs	r2, #31
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	4019      	ands	r1, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	3b23      	subs	r3, #35	; 0x23
 800448e:	fa00 f203 	lsl.w	r2, r0, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
 800449a:	e01b      	b.n	80044d4 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 6147058 (refactor)
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
<<<<<<< HEAD
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3b41      	subs	r3, #65	; 0x41
 8003212:	221f      	movs	r2, #31
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	4019      	ands	r1, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b41      	subs	r3, #65	; 0x41
 800322c:	fa00 f203 	lsl.w	r2, r0, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	3b41      	subs	r3, #65	; 0x41
 80044ae:	221f      	movs	r2, #31
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	4019      	ands	r1, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	3b41      	subs	r3, #65	; 0x41
 80044c8:	fa00 f203 	lsl.w	r2, r0, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 6147058 (refactor)
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
<<<<<<< HEAD
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d91c      	bls.n	800327a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68d9      	ldr	r1, [r3, #12]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	3b1e      	subs	r3, #30
 8003252:	2207      	movs	r2, #7
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	4019      	ands	r1, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6898      	ldr	r0, [r3, #8]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4413      	add	r3, r2
 800326a:	3b1e      	subs	r3, #30
 800326c:	fa00 f203 	lsl.w	r2, r0, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e019      	b.n	80032ae <HAL_ADC_ConfigChannel+0x15a>
=======
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b09      	cmp	r3, #9
 80044da:	d91c      	bls.n	8004516 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	3b1e      	subs	r3, #30
 80044ee:	2207      	movs	r2, #7
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	4019      	ands	r1, r3
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	6898      	ldr	r0, [r3, #8]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	3b1e      	subs	r3, #30
 8004508:	fa00 f203 	lsl.w	r2, r0, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]
 8004514:	e019      	b.n	800454a <HAL_ADC_ConfigChannel+0x15a>
>>>>>>> 6147058 (refactor)
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
<<<<<<< HEAD
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6919      	ldr	r1, [r3, #16]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	2207      	movs	r2, #7
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	4019      	ands	r1, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6898      	ldr	r0, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	fa00 f203 	lsl.w	r2, r0, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	611a      	str	r2, [r3, #16]
=======
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6919      	ldr	r1, [r3, #16]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	2207      	movs	r2, #7
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	4019      	ands	r1, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6898      	ldr	r0, [r3, #8]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	fa00 f203 	lsl.w	r2, r0, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
<<<<<<< HEAD
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d003      	beq.n	80032be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ba:	2b11      	cmp	r3, #17
 80032bc:	d132      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b10      	cmp	r3, #16
 8004550:	d003      	beq.n	800455a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004556:	2b11      	cmp	r3, #17
 8004558:	d132      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 6147058 (refactor)
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
<<<<<<< HEAD
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_ADC_ConfigChannel+0x1e4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d125      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d126      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032e4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d11a      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d125      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d126      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004580:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b10      	cmp	r3, #16
 8004588:	d11a      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 6147058 (refactor)
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_ADC_ConfigChannel+0x1e8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a13      	ldr	r2, [pc, #76]	; (8003340 <HAL_ADC_ConfigChannel+0x1ec>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9a      	lsrs	r2, r3, #18
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003304:	e002      	b.n	800330c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x1b2>
 8003312:	e007      	b.n	8003324 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800458a:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <HAL_ADC_ConfigChannel+0x1e8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <HAL_ADC_ConfigChannel+0x1ec>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	0c9a      	lsrs	r2, r3, #18
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045a0:	e002      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f9      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x1b2>
 80045ae:	e007      	b.n	80045c0 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
=======
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6147058 (refactor)
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40012400 	.word	0x40012400
 800333c:	20000010 	.word	0x20000010
 8003340:	431bde83 	.word	0x431bde83

08003344 <ADC_Enable>:
=======
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	40012400 	.word	0x40012400
 80045d8:	20000014 	.word	0x20000014
 80045dc:	431bde83 	.word	0x431bde83

080045e0 <ADC_Enable>:
>>>>>>> 6147058 (refactor)
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
=======
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
>>>>>>> 6147058 (refactor)
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
<<<<<<< HEAD
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d039      	beq.n	80033d6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	609a      	str	r2, [r3, #8]
=======
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d039      	beq.n	8004672 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f042 0201 	orr.w	r2, r2, #1
 800460c:	609a      	str	r2, [r3, #8]
>>>>>>> 6147058 (refactor)
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <ADC_Enable+0x9c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <ADC_Enable+0xa0>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	0c9b      	lsrs	r3, r3, #18
 800337e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003380:	e002      	b.n	8003388 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3b01      	subs	r3, #1
 8003386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f9      	bne.n	8003382 <ADC_Enable+0x3e>
=======
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <ADC_Enable+0x9c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <ADC_Enable+0xa0>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	0c9b      	lsrs	r3, r3, #18
 800461a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800461c:	e002      	b.n	8004624 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3b01      	subs	r3, #1
 8004622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f9      	bne.n	800461e <ADC_Enable+0x3e>
>>>>>>> 6147058 (refactor)
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800338e:	f7ff fc4d 	bl	8002c2c <HAL_GetTick>
 8003392:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003394:	e018      	b.n	80033c8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003396:	f7ff fc49 	bl	8002c2c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d911      	bls.n	80033c8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e007      	b.n	80033d8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d1df      	bne.n	8003396 <ADC_Enable+0x52>
=======
 800462a:	f7ff fc4d 	bl	8003ec8 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004630:	e018      	b.n	8004664 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004632:	f7ff fc49 	bl	8003ec8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d911      	bls.n	8004664 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e007      	b.n	8004674 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b01      	cmp	r3, #1
 8004670:	d1df      	bne.n	8004632 <ADC_Enable+0x52>
>>>>>>> 6147058 (refactor)
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000010 	.word	0x20000010
 80033e4:	431bde83 	.word	0x431bde83

080033e8 <ADC_ConversionStop_Disable>:
=======
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000014 	.word	0x20000014
 8004680:	431bde83 	.word	0x431bde83

08004684 <ADC_ConversionStop_Disable>:
>>>>>>> 6147058 (refactor)
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d127      	bne.n	8003452 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0201 	bic.w	r2, r2, #1
 8003410:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003412:	f7ff fc0b 	bl	8002c2c <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003418:	e014      	b.n	8003444 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800341a:	f7ff fc07 	bl	8002c2c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d90d      	bls.n	8003444 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f043 0210 	orr.w	r2, r3, #16
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	f043 0201 	orr.w	r2, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d0e3      	beq.n	800341a <ADC_ConversionStop_Disable+0x32>
=======
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d127      	bne.n	80046ee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ae:	f7ff fc0b 	bl	8003ec8 <HAL_GetTick>
 80046b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046b4:	e014      	b.n	80046e0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046b6:	f7ff fc07 	bl	8003ec8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d90d      	bls.n	80046e0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f043 0210 	orr.w	r2, r3, #16
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e007      	b.n	80046f0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d0e3      	beq.n	80046b6 <ADC_ConversionStop_Disable+0x32>
>>>>>>> 6147058 (refactor)
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_ADCEx_Calibration_Start>:
=======
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_ADCEx_Calibration_Start>:
>>>>>>> 6147058 (refactor)
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
=======
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
>>>>>>> 6147058 (refactor)
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_ADCEx_Calibration_Start+0x1e>
 8003476:	2302      	movs	r3, #2
 8003478:	e086      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0x12c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_ADCEx_Calibration_Start+0x1e>
 8004712:	2302      	movs	r3, #2
 8004714:	e086      	b.n	8004824 <HAL_ADCEx_Calibration_Start+0x12c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff ffb0 	bl	80033e8 <ADC_ConversionStop_Disable>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d175      	bne.n	800357e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800349a:	f023 0302 	bic.w	r3, r3, #2
 800349e:	f043 0202 	orr.w	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ffb0 	bl	8004684 <ADC_ConversionStop_Disable>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d175      	bne.n	800481a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004736:	f023 0302 	bic.w	r3, r3, #2
 800473a:	f043 0202 	orr.w	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
<<<<<<< HEAD
 80034a6:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_ADCEx_Calibration_Start+0x134>)
 80034a8:	681c      	ldr	r4, [r3, #0]
 80034aa:	2002      	movs	r0, #2
 80034ac:	f002 fdd8 	bl	8006060 <HAL_RCCEx_GetPeriphCLKFreq>
 80034b0:	4603      	mov	r3, r0
 80034b2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80034b6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80034b8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80034ba:	e002      	b.n	80034c2 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <HAL_ADCEx_Calibration_Start+0x60>
=======
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <HAL_ADCEx_Calibration_Start+0x134>)
 8004744:	681c      	ldr	r4, [r3, #0]
 8004746:	2002      	movs	r0, #2
 8004748:	f002 fda6 	bl	8007298 <HAL_RCCEx_GetPeriphCLKFreq>
 800474c:	4603      	mov	r3, r0
 800474e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004752:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004754:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004756:	e002      	b.n	800475e <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3b01      	subs	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f9      	bne.n	8004758 <HAL_ADCEx_Calibration_Start+0x60>
>>>>>>> 6147058 (refactor)
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
<<<<<<< HEAD
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff3b 	bl	8003344 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 0208 	orr.w	r2, r2, #8
 80034dc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034de:	f7ff fba5 	bl	8002c2c <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034e4:	e014      	b.n	8003510 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034e6:	f7ff fba1 	bl	8002c2c <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b0a      	cmp	r3, #10
 80034f2:	d90d      	bls.n	8003510 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f023 0312 	bic.w	r3, r3, #18
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f7ff ff3b 	bl	80045e0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800477a:	f7ff fba5 	bl	8003ec8 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004780:	e014      	b.n	80047ac <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004782:	f7ff fba1 	bl	8003ec8 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b0a      	cmp	r3, #10
 800478e:	d90d      	bls.n	80047ac <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f023 0312 	bic.w	r3, r3, #18
 8004798:	f043 0210 	orr.w	r2, r3, #16
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e03b      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e3      	bne.n	80034e6 <HAL_ADCEx_Calibration_Start+0x8a>
=======
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e03b      	b.n	8004824 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e3      	bne.n	8004782 <HAL_ADCEx_Calibration_Start+0x8a>
>>>>>>> 6147058 (refactor)
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
<<<<<<< HEAD
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0204 	orr.w	r2, r2, #4
 800352c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800352e:	f7ff fb7d 	bl	8002c2c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003534:	e014      	b.n	8003560 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003536:	f7ff fb79 	bl	8002c2c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b0a      	cmp	r3, #10
 8003542:	d90d      	bls.n	8003560 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f023 0312 	bic.w	r3, r3, #18
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0204 	orr.w	r2, r2, #4
 80047c8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80047ca:	f7ff fb7d 	bl	8003ec8 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80047d0:	e014      	b.n	80047fc <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80047d2:	f7ff fb79 	bl	8003ec8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b0a      	cmp	r3, #10
 80047de:	d90d      	bls.n	80047fc <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	f023 0312 	bic.w	r3, r3, #18
 80047e8:	f043 0210 	orr.w	r2, r3, #16
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e013      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_ADCEx_Calibration_Start+0xda>
=======
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e013      	b.n	8004824 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <HAL_ADCEx_Calibration_Start+0xda>
>>>>>>> 6147058 (refactor)
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
=======
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f023 0303 	bic.w	r3, r3, #3
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 6147058 (refactor)
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003586:	7dfb      	ldrb	r3, [r7, #23]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	20000010 	.word	0x20000010

08003594 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd90      	pop	{r4, r7, pc}
 800482c:	20000014 	.word	0x20000014

08004830 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
=======
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
<<<<<<< HEAD
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <__NVIC_SetPriorityGrouping>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_GetPriorityGrouping>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <__NVIC_GetPriorityGrouping+0x18>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0307 	and.w	r3, r3, #7
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_EnableIRQ>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db0b      	blt.n	8003636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4906      	ldr	r1, [pc, #24]	; (8003640 <__NVIC_EnableIRQ+0x34>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	e000e100 	.word	0xe000e100

08003644 <__NVIC_SetPriority>:
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0a      	blt.n	800366e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	490c      	ldr	r1, [pc, #48]	; (8003690 <__NVIC_SetPriority+0x4c>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	440b      	add	r3, r1
 8003668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800366c:	e00a      	b.n	8003684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4908      	ldr	r1, [pc, #32]	; (8003694 <__NVIC_SetPriority+0x50>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3b04      	subs	r3, #4
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	440b      	add	r3, r1
 8003682:	761a      	strb	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <NVIC_EncodePriority>:
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	; 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f1c3 0307 	rsb	r3, r3, #7
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	bf28      	it	cs
 80036b6:	2304      	movcs	r3, #4
 80036b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3304      	adds	r3, #4
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d902      	bls.n	80036c8 <NVIC_EncodePriority+0x30>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3b03      	subs	r3, #3
 80036c6:	e000      	b.n	80036ca <NVIC_EncodePriority+0x32>
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	401a      	ands	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e0:	f04f 31ff 	mov.w	r1, #4294967295
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43d9      	mvns	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	4313      	orrs	r3, r2
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <SysTick_Config>:
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3b01      	subs	r3, #1
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d301      	bcc.n	8003712 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800370e:	2301      	movs	r3, #1
 8003710:	e00f      	b.n	8003732 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003712:	4a0a      	ldr	r2, [pc, #40]	; (800373c <SysTick_Config+0x40>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800371a:	210f      	movs	r1, #15
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	f7ff ff90 	bl	8003644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <SysTick_Config+0x40>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <SysTick_Config+0x40>)
 800372c:	2207      	movs	r2, #7
 800372e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	e000e010 	.word	0xe000e010

08003740 <HAL_NVIC_SetPriorityGrouping>:
=======
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
	...

08004844 <__NVIC_SetPriorityGrouping>:
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_EnableIRQ>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db0b      	blt.n	80048d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	4906      	ldr	r1, [pc, #24]	; (80048dc <__NVIC_EnableIRQ+0x34>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	; (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	bc80      	pop	{r7}
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <SysTick_Config>:
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a8:	d301      	bcc.n	80049ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00f      	b.n	80049ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <SysTick_Config+0x40>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b6:	210f      	movs	r1, #15
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f7ff ff90 	bl	80048e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SysTick_Config+0x40>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <SysTick_Config+0x40>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000e010 	.word	0xe000e010

080049dc <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 6147058 (refactor)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
=======
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff2d 	bl	80035a8 <__NVIC_SetPriorityGrouping>
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_NVIC_SetPriority>:
=======
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff2d 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
>>>>>>> 6147058 (refactor)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
=======
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
>>>>>>> 6147058 (refactor)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003768:	f7ff ff42 	bl	80035f0 <__NVIC_GetPriorityGrouping>
 800376c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff90 	bl	8003698 <NVIC_EncodePriority>
 8003778:	4602      	mov	r2, r0
 800377a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff5f 	bl	8003644 <__NVIC_SetPriority>
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_EnableIRQ>:
=======
 8004a04:	f7ff ff42 	bl	800488c <__NVIC_GetPriorityGrouping>
 8004a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6978      	ldr	r0, [r7, #20]
 8004a10:	f7ff ff90 	bl	8004934 <NVIC_EncodePriority>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff5f 	bl	80048e0 <__NVIC_SetPriority>
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_NVIC_EnableIRQ>:
>>>>>>> 6147058 (refactor)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	71fb      	strb	r3, [r7, #7]
=======
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b082      	sub	sp, #8
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	4603      	mov	r3, r0
 8004a32:	71fb      	strb	r3, [r7, #7]
>>>>>>> 6147058 (refactor)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff35 	bl	800360c <__NVIC_EnableIRQ>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SYSTICK_Config>:
=======
 8004a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff35 	bl	80048a8 <__NVIC_EnableIRQ>
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_SYSTICK_Config>:
>>>>>>> 6147058 (refactor)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffa2 	bl	80036fc <SysTick_Config>
 80037b8:	4603      	mov	r3, r0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_CRC_Init>:
=======
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ffa2 	bl	8004998 <SysTick_Config>
 8004a54:	4603      	mov	r3, r0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_CRC_Init>:
>>>>>>> 6147058 (refactor)
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
<<<<<<< HEAD
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e00e      	b.n	80037f2 <HAL_CRC_Init+0x30>
=======
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e00e      	b.n	8004a8e <HAL_CRC_Init+0x30>
>>>>>>> 6147058 (refactor)
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
<<<<<<< HEAD
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	795b      	ldrb	r3, [r3, #5]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fe ffa7 	bl	8002738 <HAL_CRC_MspInit>
=======
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	795b      	ldrb	r3, [r3, #5]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d105      	bne.n	8004a86 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fe ffa5 	bl	80039d0 <HAL_CRC_MspInit>
>>>>>>> 6147058 (refactor)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
<<<<<<< HEAD
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b087      	sub	sp, #28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2202      	movs	r2, #2
 800380e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	441a      	add	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3301      	adds	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	429a      	cmp	r2, r3
 8003842:	d3f0      	bcc.n	8003826 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003852:	693b      	ldr	r3, [r7, #16]
}
 8003854:	4618      	mov	r0, r3
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr
	...

08003860 <HAL_FLASH_Program>:
=======
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_FLASH_Program>:
>>>>>>> 6147058 (refactor)
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
<<<<<<< HEAD
 8003860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800387a:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <HAL_FLASH_Program+0xd8>)
 800387c:	7e1b      	ldrb	r3, [r3, #24]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_FLASH_Program+0x26>
 8003882:	2302      	movs	r3, #2
 8003884:	e054      	b.n	8003930 <HAL_FLASH_Program+0xd0>
 8003886:	4b2c      	ldr	r3, [pc, #176]	; (8003938 <HAL_FLASH_Program+0xd8>)
 8003888:	2201      	movs	r2, #1
 800388a:	761a      	strb	r2, [r3, #24]
=======
 8004a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <HAL_FLASH_Program+0xd8>)
 8004ab4:	7e1b      	ldrb	r3, [r3, #24]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_FLASH_Program+0x26>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e054      	b.n	8004b68 <HAL_FLASH_Program+0xd0>
 8004abe:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HAL_FLASH_Program+0xd8>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	761a      	strb	r2, [r3, #24]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
<<<<<<< HEAD
 800388c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003890:	f000 f8a8 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]
=======
 8004ac4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ac8:	f000 f8a8 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6147058 (refactor)
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
<<<<<<< HEAD
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d144      	bne.n	8003928 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d102      	bne.n	80038aa <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038a4:	2301      	movs	r3, #1
 80038a6:	757b      	strb	r3, [r7, #21]
 80038a8:	e007      	b.n	80038ba <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d102      	bne.n	80038b6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038b0:	2302      	movs	r3, #2
 80038b2:	757b      	strb	r3, [r7, #21]
 80038b4:	e001      	b.n	80038ba <HAL_FLASH_Program+0x5a>
=======
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d144      	bne.n	8004b60 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d102      	bne.n	8004ae2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004adc:	2301      	movs	r3, #1
 8004ade:	757b      	strb	r3, [r7, #21]
 8004ae0:	e007      	b.n	8004af2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d102      	bne.n	8004aee <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	757b      	strb	r3, [r7, #21]
 8004aec:	e001      	b.n	8004af2 <HAL_FLASH_Program+0x5a>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
<<<<<<< HEAD
 80038b6:	2304      	movs	r3, #4
 80038b8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	75bb      	strb	r3, [r7, #22]
 80038be:	e02d      	b.n	800391c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038c0:	7dbb      	ldrb	r3, [r7, #22]
 80038c2:	005a      	lsls	r2, r3, #1
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	eb02 0c03 	add.w	ip, r2, r3
 80038ca:	7dbb      	ldrb	r3, [r7, #22]
 80038cc:	0119      	lsls	r1, r3, #4
 80038ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038d2:	f1c1 0620 	rsb	r6, r1, #32
 80038d6:	f1a1 0020 	sub.w	r0, r1, #32
 80038da:	fa22 f401 	lsr.w	r4, r2, r1
 80038de:	fa03 f606 	lsl.w	r6, r3, r6
 80038e2:	4334      	orrs	r4, r6
 80038e4:	fa23 f000 	lsr.w	r0, r3, r0
 80038e8:	4304      	orrs	r4, r0
 80038ea:	fa23 f501 	lsr.w	r5, r3, r1
 80038ee:	b2a3      	uxth	r3, r4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4660      	mov	r0, ip
 80038f4:	f000 f85a 	bl	80039ac <FLASH_Program_HalfWord>
=======
 8004aee:	2304      	movs	r3, #4
 8004af0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004af2:	2300      	movs	r3, #0
 8004af4:	75bb      	strb	r3, [r7, #22]
 8004af6:	e02d      	b.n	8004b54 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004af8:	7dbb      	ldrb	r3, [r7, #22]
 8004afa:	005a      	lsls	r2, r3, #1
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	eb02 0c03 	add.w	ip, r2, r3
 8004b02:	7dbb      	ldrb	r3, [r7, #22]
 8004b04:	0119      	lsls	r1, r3, #4
 8004b06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0a:	f1c1 0620 	rsb	r6, r1, #32
 8004b0e:	f1a1 0020 	sub.w	r0, r1, #32
 8004b12:	fa22 f401 	lsr.w	r4, r2, r1
 8004b16:	fa03 f606 	lsl.w	r6, r3, r6
 8004b1a:	4334      	orrs	r4, r6
 8004b1c:	fa23 f000 	lsr.w	r0, r3, r0
 8004b20:	4304      	orrs	r4, r0
 8004b22:	fa23 f501 	lsr.w	r5, r3, r1
 8004b26:	b2a3      	uxth	r3, r4
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4660      	mov	r0, ip
 8004b2c:	f000 f85a 	bl	8004be4 <FLASH_Program_HalfWord>
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
<<<<<<< HEAD
 80038f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038fc:	f000 f872 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003904:	4b0d      	ldr	r3, [pc, #52]	; (800393c <HAL_FLASH_Program+0xdc>)
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	4a0c      	ldr	r2, [pc, #48]	; (800393c <HAL_FLASH_Program+0xdc>)
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	6113      	str	r3, [r2, #16]
=======
 8004b30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004b34:	f000 f872 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_FLASH_Program+0xdc>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	4a0c      	ldr	r2, [pc, #48]	; (8004b74 <HAL_FLASH_Program+0xdc>)
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	6113      	str	r3, [r2, #16]
>>>>>>> 6147058 (refactor)
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
<<<<<<< HEAD
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003916:	7dbb      	ldrb	r3, [r7, #22]
 8003918:	3301      	adds	r3, #1
 800391a:	75bb      	strb	r3, [r7, #22]
 800391c:	7dba      	ldrb	r2, [r7, #22]
 800391e:	7d7b      	ldrb	r3, [r7, #21]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3cd      	bcc.n	80038c0 <HAL_FLASH_Program+0x60>
 8003924:	e000      	b.n	8003928 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003926:	bf00      	nop
=======
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004b4e:	7dbb      	ldrb	r3, [r7, #22]
 8004b50:	3301      	adds	r3, #1
 8004b52:	75bb      	strb	r3, [r7, #22]
 8004b54:	7dba      	ldrb	r2, [r7, #22]
 8004b56:	7d7b      	ldrb	r3, [r7, #21]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d3cd      	bcc.n	8004af8 <HAL_FLASH_Program+0x60>
 8004b5c:	e000      	b.n	8004b60 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004b5e:	bf00      	nop
>>>>>>> 6147058 (refactor)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< HEAD
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_FLASH_Program+0xd8>)
 800392a:	2200      	movs	r2, #0
 800392c:	761a      	strb	r2, [r3, #24]

  return status;
 800392e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003930:	4618      	mov	r0, r3
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003938:	200009d8 	.word	0x200009d8
 800393c:	40022000 	.word	0x40022000

08003940 <HAL_FLASH_Unlock>:
=======
 8004b60:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <HAL_FLASH_Program+0xd8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	761a      	strb	r2, [r3, #24]

  return status;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b70:	200009e0 	.word	0x200009e0
 8004b74:	40022000 	.word	0x40022000

08004b78 <HAL_FLASH_Unlock>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
<<<<<<< HEAD
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_FLASH_Unlock+0x40>)
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00d      	beq.n	8003972 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_FLASH_Unlock+0x40>)
 8003958:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <HAL_FLASH_Unlock+0x44>)
 800395a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_FLASH_Unlock+0x40>)
 800395e:	4a0a      	ldr	r2, [pc, #40]	; (8003988 <HAL_FLASH_Unlock+0x48>)
 8003960:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_FLASH_Unlock+0x40>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	71fb      	strb	r3, [r7, #7]
=======
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_FLASH_Unlock+0x40>)
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_FLASH_Unlock+0x40>)
 8004b90:	4a0a      	ldr	r2, [pc, #40]	; (8004bbc <HAL_FLASH_Unlock+0x44>)
 8004b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_FLASH_Unlock+0x40>)
 8004b96:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <HAL_FLASH_Unlock+0x48>)
 8004b98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_FLASH_Unlock+0x40>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	71fb      	strb	r3, [r7, #7]
>>>>>>> 6147058 (refactor)
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
<<<<<<< HEAD
 8003972:	79fb      	ldrb	r3, [r7, #7]
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40022000 	.word	0x40022000
 8003984:	45670123 	.word	0x45670123
 8003988:	cdef89ab 	.word	0xcdef89ab

0800398c <HAL_FLASH_Lock>:
=======
 8004baa:	79fb      	ldrb	r3, [r7, #7]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	45670123 	.word	0x45670123
 8004bc0:	cdef89ab 	.word	0xcdef89ab

08004bc4 <HAL_FLASH_Lock>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
<<<<<<< HEAD
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_FLASH_Lock+0x1c>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_FLASH_Lock+0x1c>)
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	6113      	str	r3, [r2, #16]
=======
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_FLASH_Lock+0x1c>)
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_FLASH_Lock+0x1c>)
 8004bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd2:	6113      	str	r3, [r2, #16]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
<<<<<<< HEAD
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40022000 	.word	0x40022000

080039ac <FLASH_Program_HalfWord>:
=======
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40022000 	.word	0x40022000

08004be4 <FLASH_Program_HalfWord>:
>>>>>>> 6147058 (refactor)
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
<<<<<<< HEAD
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <FLASH_Program_HalfWord+0x30>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
=======
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004bf0:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <FLASH_Program_HalfWord+0x30>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
<<<<<<< HEAD
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <FLASH_Program_HalfWord+0x34>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <FLASH_Program_HalfWord+0x34>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6113      	str	r3, [r2, #16]
=======
 8004bf6:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <FLASH_Program_HalfWord+0x34>)
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <FLASH_Program_HalfWord+0x34>)
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6113      	str	r3, [r2, #16]
>>>>>>> 6147058 (refactor)
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
<<<<<<< HEAD
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	887a      	ldrh	r2, [r7, #2]
 80039ce:	801a      	strh	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200009d8 	.word	0x200009d8
 80039e0:	40022000 	.word	0x40022000

080039e4 <FLASH_WaitForLastOperation>:
=======
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	887a      	ldrh	r2, [r7, #2]
 8004c06:	801a      	strh	r2, [r3, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	200009e0 	.word	0x200009e0
 8004c18:	40022000 	.word	0x40022000

08004c1c <FLASH_WaitForLastOperation>:
>>>>>>> 6147058 (refactor)
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
<<<<<<< HEAD
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
=======
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
<<<<<<< HEAD
 80039ec:	f7ff f91e 	bl	8002c2c <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039f2:	e010      	b.n	8003a16 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d00c      	beq.n	8003a16 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d007      	beq.n	8003a12 <FLASH_WaitForLastOperation+0x2e>
 8003a02:	f7ff f913 	bl	8002c2c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d201      	bcs.n	8003a16 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e025      	b.n	8003a62 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e8      	bne.n	80039f4 <FLASH_WaitForLastOperation+0x10>
=======
 8004c24:	f7ff f950 	bl	8003ec8 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c2a:	e010      	b.n	8004c4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d00c      	beq.n	8004c4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <FLASH_WaitForLastOperation+0x2e>
 8004c3a:	f7ff f945 	bl	8003ec8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d201      	bcs.n	8004c4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e025      	b.n	8004c9a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004c4e:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e8      	bne.n	8004c2c <FLASH_WaitForLastOperation+0x10>
>>>>>>> 6147058 (refactor)
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
<<<<<<< HEAD
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a30:	2220      	movs	r2, #32
 8003a32:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a40:	4b0a      	ldr	r3, [pc, #40]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <FLASH_WaitForLastOperation+0x88>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a58:	f000 f80a 	bl	8003a70 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <FLASH_WaitForLastOperation+0x7e>
=======
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c68:	2220      	movs	r2, #32
 8004c6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c78:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <FLASH_WaitForLastOperation+0x88>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004c90:	f000 f80a 	bl	8004ca8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <FLASH_WaitForLastOperation+0x7e>
>>>>>>> 6147058 (refactor)
  }

  /* There is no error flag set */
  return HAL_OK;
<<<<<<< HEAD
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40022000 	.word	0x40022000

08003a70 <FLASH_SetErrorCode>:
=======
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40022000 	.word	0x40022000

08004ca8 <FLASH_SetErrorCode>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
<<<<<<< HEAD
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]
=======
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
>>>>>>> 6147058 (refactor)
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
<<<<<<< HEAD
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f043 0302 	orr.w	r3, r3, #2
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003a90:	61d3      	str	r3, [r2, #28]
=======
 8004cb2:	4b23      	ldr	r3, [pc, #140]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004cbe:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f043 0302 	orr.w	r3, r3, #2
 8004cc6:	4a1f      	ldr	r2, [pc, #124]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004cc8:	61d3      	str	r3, [r2, #28]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
<<<<<<< HEAD
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	607b      	str	r3, [r7, #4]
=======
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f043 0310 	orr.w	r3, r3, #16
 8004cd0:	607b      	str	r3, [r7, #4]
>>>>>>> 6147058 (refactor)
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
<<<<<<< HEAD
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003aa6:	4b19      	ldr	r3, [pc, #100]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003ab0:	61d3      	str	r3, [r2, #28]
=======
 8004cd2:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0304 	and.w	r3, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004ce8:	61d3      	str	r3, [r2, #28]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
<<<<<<< HEAD
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	4a0f      	ldr	r2, [pc, #60]	; (8003b0c <FLASH_SetErrorCode+0x9c>)
 8003ad0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	61d3      	str	r3, [r2, #28]
=======
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f043 0304 	orr.w	r3, r3, #4
 8004cf0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	4a0f      	ldr	r2, [pc, #60]	; (8004d44 <FLASH_SetErrorCode+0x9c>)
 8004d08:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	61d3      	str	r3, [r2, #28]
>>>>>>> 6147058 (refactor)
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
<<<<<<< HEAD
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f240 1201 	movw	r2, #257	; 0x101
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d106      	bne.n	8003af6 <FLASH_SetErrorCode+0x86>
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	61d3      	str	r3, [r2, #28]
}  
 8003af4:	e002      	b.n	8003afc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003af6:	4a04      	ldr	r2, [pc, #16]	; (8003b08 <FLASH_SetErrorCode+0x98>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60d3      	str	r3, [r2, #12]
}  
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	200009d8 	.word	0x200009d8

08003b10 <HAL_FLASHEx_Erase>:
=======
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f240 1201 	movw	r2, #257	; 0x101
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d106      	bne.n	8004d2e <FLASH_SetErrorCode+0x86>
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	61d3      	str	r3, [r2, #28]
}  
 8004d2c:	e002      	b.n	8004d34 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004d2e:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <FLASH_SetErrorCode+0x98>)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	60d3      	str	r3, [r2, #12]
}  
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40022000 	.word	0x40022000
 8004d44:	200009e0 	.word	0x200009e0

08004d48 <HAL_FLASHEx_Erase>:
>>>>>>> 6147058 (refactor)
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
<<<<<<< HEAD
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_FLASHEx_Erase+0xd0>)
 8003b24:	7e1b      	ldrb	r3, [r3, #24]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_FLASHEx_Erase+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e053      	b.n	8003bd6 <HAL_FLASHEx_Erase+0xc6>
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_FLASHEx_Erase+0xd0>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	761a      	strb	r2, [r3, #24]
=======
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <HAL_FLASHEx_Erase+0xd0>)
 8004d5c:	7e1b      	ldrb	r3, [r3, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_FLASHEx_Erase+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e053      	b.n	8004e0e <HAL_FLASHEx_Erase+0xc6>
 8004d66:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_FLASHEx_Erase+0xd0>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	761a      	strb	r2, [r3, #24]
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
<<<<<<< HEAD
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d116      	bne.n	8003b6a <HAL_FLASHEx_Erase+0x5a>
=======
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d116      	bne.n	8004da2 <HAL_FLASHEx_Erase+0x5a>
>>>>>>> 6147058 (refactor)
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
<<<<<<< HEAD
 8003b3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b40:	f7ff ff50 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d141      	bne.n	8003bce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 f84c 	bl	8003be8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b54:	f7ff ff46 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b5c:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <HAL_FLASHEx_Erase+0xd4>)
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <HAL_FLASHEx_Erase+0xd4>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6113      	str	r3, [r2, #16]
 8003b68:	e031      	b.n	8003bce <HAL_FLASHEx_Erase+0xbe>
=======
 8004d74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d78:	f7ff ff50 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d141      	bne.n	8004e06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004d82:	2001      	movs	r0, #1
 8004d84:	f000 f84c 	bl	8004e20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004d8c:	f7ff ff46 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <HAL_FLASHEx_Erase+0xd4>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <HAL_FLASHEx_Erase+0xd4>)
 8004d9a:	f023 0304 	bic.w	r3, r3, #4
 8004d9e:	6113      	str	r3, [r2, #16]
 8004da0:	e031      	b.n	8004e06 <HAL_FLASHEx_Erase+0xbe>
>>>>>>> 6147058 (refactor)
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
<<<<<<< HEAD
 8003b6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6e:	f7ff ff39 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d12a      	bne.n	8003bce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	e019      	b.n	8003bbc <HAL_FLASHEx_Erase+0xac>
=======
 8004da2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004da6:	f7ff ff39 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d12a      	bne.n	8004e06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295
 8004db6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	e019      	b.n	8004df4 <HAL_FLASHEx_Erase+0xac>
>>>>>>> 6147058 (refactor)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
<<<<<<< HEAD
 8003b88:	68b8      	ldr	r0, [r7, #8]
 8003b8a:	f000 f849 	bl	8003c20 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b92:	f7ff ff27 	bl	80039e4 <FLASH_WaitForLastOperation>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_FLASHEx_Erase+0xd4>)
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <HAL_FLASHEx_Erase+0xd4>)
 8003ba0:	f023 0302 	bic.w	r3, r3, #2
 8003ba4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	601a      	str	r2, [r3, #0]
            break;
 8003bb2:	e00c      	b.n	8003bce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	029a      	lsls	r2, r3, #10
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3dc      	bcc.n	8003b88 <HAL_FLASHEx_Erase+0x78>
=======
 8004dc0:	68b8      	ldr	r0, [r7, #8]
 8004dc2:	f000 f849 	bl	8004e58 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004dc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dca:	f7ff ff27 	bl	8004c1c <FLASH_WaitForLastOperation>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <HAL_FLASHEx_Erase+0xd4>)
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	4a11      	ldr	r2, [pc, #68]	; (8004e1c <HAL_FLASHEx_Erase+0xd4>)
 8004dd8:	f023 0302 	bic.w	r3, r3, #2
 8004ddc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	601a      	str	r2, [r3, #0]
            break;
 8004dea:	e00c      	b.n	8004e06 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	029a      	lsls	r2, r3, #10
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d3dc      	bcc.n	8004dc0 <HAL_FLASHEx_Erase+0x78>
>>>>>>> 6147058 (refactor)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
<<<<<<< HEAD
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_FLASHEx_Erase+0xd0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	761a      	strb	r2, [r3, #24]

  return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	200009d8 	.word	0x200009d8
 8003be4:	40022000 	.word	0x40022000

08003be8 <FLASH_MassErase>:
=======
 8004e06:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <HAL_FLASHEx_Erase+0xd0>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	761a      	strb	r2, [r3, #24]

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	200009e0 	.word	0x200009e0
 8004e1c:	40022000 	.word	0x40022000

08004e20 <FLASH_MassErase>:
>>>>>>> 6147058 (refactor)
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
<<<<<<< HEAD
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
=======
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
<<<<<<< HEAD
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <FLASH_MassErase+0x30>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
=======
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <FLASH_MassErase+0x30>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
<<<<<<< HEAD
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <FLASH_MassErase+0x34>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <FLASH_MassErase+0x34>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <FLASH_MassErase+0x34>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <FLASH_MassErase+0x34>)
 8003c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0c:	6113      	str	r3, [r2, #16]
=======
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <FLASH_MassErase+0x34>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <FLASH_MassErase+0x34>)
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <FLASH_MassErase+0x34>)
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <FLASH_MassErase+0x34>)
 8004e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e44:	6113      	str	r3, [r2, #16]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
<<<<<<< HEAD
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	200009d8 	.word	0x200009d8
 8003c1c:	40022000 	.word	0x40022000

08003c20 <FLASH_PageErase>:
=======
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	200009e0 	.word	0x200009e0
 8004e54:	40022000 	.word	0x40022000

08004e58 <FLASH_PageErase>:
>>>>>>> 6147058 (refactor)
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
<<<<<<< HEAD
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <FLASH_PageErase+0x38>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
=======
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <FLASH_PageErase+0x38>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	61da      	str	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
<<<<<<< HEAD
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <FLASH_PageErase+0x3c>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <FLASH_PageErase+0x3c>)
 8003c34:	f043 0302 	orr.w	r3, r3, #2
 8003c38:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <FLASH_PageErase+0x3c>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <FLASH_PageErase+0x3c>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <FLASH_PageErase+0x3c>)
 8003c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4a:	6113      	str	r3, [r2, #16]
=======
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <FLASH_PageErase+0x3c>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <FLASH_PageErase+0x3c>)
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004e72:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <FLASH_PageErase+0x3c>)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <FLASH_PageErase+0x3c>)
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	4a05      	ldr	r2, [pc, #20]	; (8004e94 <FLASH_PageErase+0x3c>)
 8004e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e82:	6113      	str	r3, [r2, #16]
>>>>>>> 6147058 (refactor)
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
<<<<<<< HEAD
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200009d8 	.word	0x200009d8
 8003c5c:	40022000 	.word	0x40022000

08003c60 <HAL_GPIO_Init>:
=======
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	200009e0 	.word	0x200009e0
 8004e94:	40022000 	.word	0x40022000

08004e98 <HAL_GPIO_Init>:
>>>>>>> 6147058 (refactor)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003c60:	b480      	push	{r7}
 8003c62:	b08b      	sub	sp, #44	; 0x2c
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8004e98:	b480      	push	{r7}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 6147058 (refactor)
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
=======
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	623b      	str	r3, [r7, #32]
>>>>>>> 6147058 (refactor)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8003c72:	e169      	b.n	8003f48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c74:	2201      	movs	r2, #1
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 8158 	bne.w	8003f42 <HAL_GPIO_Init+0x2e2>
=======
 8004eaa:	e169      	b.n	8005180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004eac:	2201      	movs	r2, #1
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69fa      	ldr	r2, [r7, #28]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f040 8158 	bne.w	800517a <HAL_GPIO_Init+0x2e2>
>>>>>>> 6147058 (refactor)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a9a      	ldr	r2, [pc, #616]	; (8003f00 <HAL_GPIO_Init+0x2a0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d05e      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
 8003c9c:	4a98      	ldr	r2, [pc, #608]	; (8003f00 <HAL_GPIO_Init+0x2a0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d875      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003ca2:	4a98      	ldr	r2, [pc, #608]	; (8003f04 <HAL_GPIO_Init+0x2a4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d058      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
 8003ca8:	4a96      	ldr	r2, [pc, #600]	; (8003f04 <HAL_GPIO_Init+0x2a4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d86f      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003cae:	4a96      	ldr	r2, [pc, #600]	; (8003f08 <HAL_GPIO_Init+0x2a8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d052      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
 8003cb4:	4a94      	ldr	r2, [pc, #592]	; (8003f08 <HAL_GPIO_Init+0x2a8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d869      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003cba:	4a94      	ldr	r2, [pc, #592]	; (8003f0c <HAL_GPIO_Init+0x2ac>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d04c      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
 8003cc0:	4a92      	ldr	r2, [pc, #584]	; (8003f0c <HAL_GPIO_Init+0x2ac>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d863      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003cc6:	4a92      	ldr	r2, [pc, #584]	; (8003f10 <HAL_GPIO_Init+0x2b0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d046      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
 8003ccc:	4a90      	ldr	r2, [pc, #576]	; (8003f10 <HAL_GPIO_Init+0x2b0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d85d      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003cd2:	2b12      	cmp	r3, #18
 8003cd4:	d82a      	bhi.n	8003d2c <HAL_GPIO_Init+0xcc>
 8003cd6:	2b12      	cmp	r3, #18
 8003cd8:	d859      	bhi.n	8003d8e <HAL_GPIO_Init+0x12e>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HAL_GPIO_Init+0x80>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d5b 	.word	0x08003d5b
 8003ce4:	08003d35 	.word	0x08003d35
 8003ce8:	08003d47 	.word	0x08003d47
 8003cec:	08003d89 	.word	0x08003d89
 8003cf0:	08003d8f 	.word	0x08003d8f
 8003cf4:	08003d8f 	.word	0x08003d8f
 8003cf8:	08003d8f 	.word	0x08003d8f
 8003cfc:	08003d8f 	.word	0x08003d8f
 8003d00:	08003d8f 	.word	0x08003d8f
 8003d04:	08003d8f 	.word	0x08003d8f
 8003d08:	08003d8f 	.word	0x08003d8f
 8003d0c:	08003d8f 	.word	0x08003d8f
 8003d10:	08003d8f 	.word	0x08003d8f
 8003d14:	08003d8f 	.word	0x08003d8f
 8003d18:	08003d8f 	.word	0x08003d8f
 8003d1c:	08003d8f 	.word	0x08003d8f
 8003d20:	08003d8f 	.word	0x08003d8f
 8003d24:	08003d3d 	.word	0x08003d3d
 8003d28:	08003d51 	.word	0x08003d51
 8003d2c:	4a79      	ldr	r2, [pc, #484]	; (8003f14 <HAL_GPIO_Init+0x2b4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0xfa>
=======
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4a9a      	ldr	r2, [pc, #616]	; (8005138 <HAL_GPIO_Init+0x2a0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d05e      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ed4:	4a98      	ldr	r2, [pc, #608]	; (8005138 <HAL_GPIO_Init+0x2a0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d875      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004eda:	4a98      	ldr	r2, [pc, #608]	; (800513c <HAL_GPIO_Init+0x2a4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d058      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ee0:	4a96      	ldr	r2, [pc, #600]	; (800513c <HAL_GPIO_Init+0x2a4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d86f      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004ee6:	4a96      	ldr	r2, [pc, #600]	; (8005140 <HAL_GPIO_Init+0x2a8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d052      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004eec:	4a94      	ldr	r2, [pc, #592]	; (8005140 <HAL_GPIO_Init+0x2a8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d869      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004ef2:	4a94      	ldr	r2, [pc, #592]	; (8005144 <HAL_GPIO_Init+0x2ac>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d04c      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004ef8:	4a92      	ldr	r2, [pc, #584]	; (8005144 <HAL_GPIO_Init+0x2ac>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d863      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004efe:	4a92      	ldr	r2, [pc, #584]	; (8005148 <HAL_GPIO_Init+0x2b0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d046      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
 8004f04:	4a90      	ldr	r2, [pc, #576]	; (8005148 <HAL_GPIO_Init+0x2b0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d85d      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004f0a:	2b12      	cmp	r3, #18
 8004f0c:	d82a      	bhi.n	8004f64 <HAL_GPIO_Init+0xcc>
 8004f0e:	2b12      	cmp	r3, #18
 8004f10:	d859      	bhi.n	8004fc6 <HAL_GPIO_Init+0x12e>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <HAL_GPIO_Init+0x80>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004f93 	.word	0x08004f93
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	08004f7f 	.word	0x08004f7f
 8004f24:	08004fc1 	.word	0x08004fc1
 8004f28:	08004fc7 	.word	0x08004fc7
 8004f2c:	08004fc7 	.word	0x08004fc7
 8004f30:	08004fc7 	.word	0x08004fc7
 8004f34:	08004fc7 	.word	0x08004fc7
 8004f38:	08004fc7 	.word	0x08004fc7
 8004f3c:	08004fc7 	.word	0x08004fc7
 8004f40:	08004fc7 	.word	0x08004fc7
 8004f44:	08004fc7 	.word	0x08004fc7
 8004f48:	08004fc7 	.word	0x08004fc7
 8004f4c:	08004fc7 	.word	0x08004fc7
 8004f50:	08004fc7 	.word	0x08004fc7
 8004f54:	08004fc7 	.word	0x08004fc7
 8004f58:	08004fc7 	.word	0x08004fc7
 8004f5c:	08004f75 	.word	0x08004f75
 8004f60:	08004f89 	.word	0x08004f89
 8004f64:	4a79      	ldr	r2, [pc, #484]	; (800514c <HAL_GPIO_Init+0x2b4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_GPIO_Init+0xfa>
>>>>>>> 6147058 (refactor)
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8003d32:	e02c      	b.n	8003d8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	623b      	str	r3, [r7, #32]
          break;
 8003d3a:	e029      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	3304      	adds	r3, #4
 8003d42:	623b      	str	r3, [r7, #32]
          break;
 8003d44:	e024      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	623b      	str	r3, [r7, #32]
          break;
 8003d4e:	e01f      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	330c      	adds	r3, #12
 8003d56:	623b      	str	r3, [r7, #32]
          break;
 8003d58:	e01a      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d62:	2304      	movs	r3, #4
 8003d64:	623b      	str	r3, [r7, #32]
          break;
 8003d66:	e013      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d105      	bne.n	8003d7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d70:	2308      	movs	r3, #8
 8003d72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	611a      	str	r2, [r3, #16]
          break;
 8003d7a:	e009      	b.n	8003d90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	615a      	str	r2, [r3, #20]
          break;
 8003d86:	e003      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
          break;
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x130>
          break;
 8003d8e:	bf00      	nop
=======
 8004f6a:	e02c      	b.n	8004fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	623b      	str	r3, [r7, #32]
          break;
 8004f72:	e029      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	623b      	str	r3, [r7, #32]
          break;
 8004f7c:	e024      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	3308      	adds	r3, #8
 8004f84:	623b      	str	r3, [r7, #32]
          break;
 8004f86:	e01f      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	623b      	str	r3, [r7, #32]
          break;
 8004f90:	e01a      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004f9a:	2304      	movs	r3, #4
 8004f9c:	623b      	str	r3, [r7, #32]
          break;
 8004f9e:	e013      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d105      	bne.n	8004fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fa8:	2308      	movs	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	611a      	str	r2, [r3, #16]
          break;
 8004fb2:	e009      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004fb4:	2308      	movs	r3, #8
 8004fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	615a      	str	r2, [r3, #20]
          break;
 8004fbe:	e003      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	623b      	str	r3, [r7, #32]
          break;
 8004fc4:	e000      	b.n	8004fc8 <HAL_GPIO_Init+0x130>
          break;
 8004fc6:	bf00      	nop
>>>>>>> 6147058 (refactor)
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2bff      	cmp	r3, #255	; 0xff
 8003d94:	d801      	bhi.n	8003d9a <HAL_GPIO_Init+0x13a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_Init+0x13e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2bff      	cmp	r3, #255	; 0xff
 8003da4:	d802      	bhi.n	8003dac <HAL_GPIO_Init+0x14c>
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	e002      	b.n	8003db2 <HAL_GPIO_Init+0x152>
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	3b08      	subs	r3, #8
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	210f      	movs	r1, #15
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	601a      	str	r2, [r3, #0]
=======
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2bff      	cmp	r3, #255	; 0xff
 8004fcc:	d801      	bhi.n	8004fd2 <HAL_GPIO_Init+0x13a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	e001      	b.n	8004fd6 <HAL_GPIO_Init+0x13e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2bff      	cmp	r3, #255	; 0xff
 8004fdc:	d802      	bhi.n	8004fe4 <HAL_GPIO_Init+0x14c>
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	e002      	b.n	8004fea <HAL_GPIO_Init+0x152>
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	3b08      	subs	r3, #8
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	210f      	movs	r1, #15
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	6a39      	ldr	r1, [r7, #32]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80b1 	beq.w	8003f42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003de0:	4b4d      	ldr	r3, [pc, #308]	; (8003f18 <HAL_GPIO_Init+0x2b8>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	4a4c      	ldr	r2, [pc, #304]	; (8003f18 <HAL_GPIO_Init+0x2b8>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6193      	str	r3, [r2, #24]
 8003dec:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_GPIO_Init+0x2b8>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003df8:	4a48      	ldr	r2, [pc, #288]	; (8003f1c <HAL_GPIO_Init+0x2bc>)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	3302      	adds	r3, #2
 8003e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	220f      	movs	r2, #15
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <HAL_GPIO_Init+0x2c0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <HAL_GPIO_Init+0x1ec>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3f      	ldr	r2, [pc, #252]	; (8003f24 <HAL_GPIO_Init+0x2c4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00d      	beq.n	8003e48 <HAL_GPIO_Init+0x1e8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3e      	ldr	r2, [pc, #248]	; (8003f28 <HAL_GPIO_Init+0x2c8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d007      	beq.n	8003e44 <HAL_GPIO_Init+0x1e4>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3d      	ldr	r2, [pc, #244]	; (8003f2c <HAL_GPIO_Init+0x2cc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_GPIO_Init+0x1e0>
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e006      	b.n	8003e4e <HAL_GPIO_Init+0x1ee>
 8003e40:	2304      	movs	r3, #4
 8003e42:	e004      	b.n	8003e4e <HAL_GPIO_Init+0x1ee>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e002      	b.n	8003e4e <HAL_GPIO_Init+0x1ee>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_GPIO_Init+0x1ee>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	f002 0203 	and.w	r2, r2, #3
 8003e54:	0092      	lsls	r2, r2, #2
 8003e56:	4093      	lsls	r3, r2
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e5e:	492f      	ldr	r1, [pc, #188]	; (8003f1c <HAL_GPIO_Init+0x2bc>)
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 80b1 	beq.w	800517a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005018:	4b4d      	ldr	r3, [pc, #308]	; (8005150 <HAL_GPIO_Init+0x2b8>)
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	4a4c      	ldr	r2, [pc, #304]	; (8005150 <HAL_GPIO_Init+0x2b8>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6193      	str	r3, [r2, #24]
 8005024:	4b4a      	ldr	r3, [pc, #296]	; (8005150 <HAL_GPIO_Init+0x2b8>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005030:	4a48      	ldr	r2, [pc, #288]	; (8005154 <HAL_GPIO_Init+0x2bc>)
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	089b      	lsrs	r3, r3, #2
 8005036:	3302      	adds	r3, #2
 8005038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a40      	ldr	r2, [pc, #256]	; (8005158 <HAL_GPIO_Init+0x2c0>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_GPIO_Init+0x1ec>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a3f      	ldr	r2, [pc, #252]	; (800515c <HAL_GPIO_Init+0x2c4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00d      	beq.n	8005080 <HAL_GPIO_Init+0x1e8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a3e      	ldr	r2, [pc, #248]	; (8005160 <HAL_GPIO_Init+0x2c8>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d007      	beq.n	800507c <HAL_GPIO_Init+0x1e4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a3d      	ldr	r2, [pc, #244]	; (8005164 <HAL_GPIO_Init+0x2cc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d101      	bne.n	8005078 <HAL_GPIO_Init+0x1e0>
 8005074:	2303      	movs	r3, #3
 8005076:	e006      	b.n	8005086 <HAL_GPIO_Init+0x1ee>
 8005078:	2304      	movs	r3, #4
 800507a:	e004      	b.n	8005086 <HAL_GPIO_Init+0x1ee>
 800507c:	2302      	movs	r3, #2
 800507e:	e002      	b.n	8005086 <HAL_GPIO_Init+0x1ee>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_GPIO_Init+0x1ee>
 8005084:	2300      	movs	r3, #0
 8005086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005088:	f002 0203 	and.w	r2, r2, #3
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	4093      	lsls	r3, r2
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005096:	492f      	ldr	r1, [pc, #188]	; (8005154 <HAL_GPIO_Init+0x2bc>)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	089b      	lsrs	r3, r3, #2
 800509c:	3302      	adds	r3, #2
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 6147058 (refactor)


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d006      	beq.n	8003e86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e78:	4b2d      	ldr	r3, [pc, #180]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	492c      	ldr	r1, [pc, #176]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x234>
=======
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	492c      	ldr	r1, [pc, #176]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	600b      	str	r3, [r1, #0]
 80050bc:	e006      	b.n	80050cc <HAL_GPIO_Init+0x234>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8003e86:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	4928      	ldr	r1, [pc, #160]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
=======
 80050be:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	4928      	ldr	r1, [pc, #160]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	600b      	str	r3, [r1, #0]
>>>>>>> 6147058 (refactor)
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4922      	ldr	r1, [pc, #136]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	e006      	b.n	8003ebc <HAL_GPIO_Init+0x25c>
=======
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d006      	beq.n	80050e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80050d8:	4b23      	ldr	r3, [pc, #140]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	4922      	ldr	r1, [pc, #136]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	604b      	str	r3, [r1, #4]
 80050e4:	e006      	b.n	80050f4 <HAL_GPIO_Init+0x25c>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	491e      	ldr	r1, [pc, #120]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
=======
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	491e      	ldr	r1, [pc, #120]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d006      	beq.n	8003ed6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	4918      	ldr	r1, [pc, #96]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x284>
=======
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	4918      	ldr	r1, [pc, #96]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	4313      	orrs	r3, r2
 800510a:	608b      	str	r3, [r1, #8]
 800510c:	e006      	b.n	800511c <HAL_GPIO_Init+0x284>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	4914      	ldr	r1, [pc, #80]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]
=======
 800510e:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	43db      	mvns	r3, r3
 8005116:	4914      	ldr	r1, [pc, #80]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 8005118:	4013      	ands	r3, r2
 800511a:	608b      	str	r3, [r1, #8]
>>>>>>> 6147058 (refactor)
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d021      	beq.n	8003f34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	490e      	ldr	r1, [pc, #56]	; (8003f30 <HAL_GPIO_Init+0x2d0>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
 8003efc:	e021      	b.n	8003f42 <HAL_GPIO_Init+0x2e2>
 8003efe:	bf00      	nop
 8003f00:	10320000 	.word	0x10320000
 8003f04:	10310000 	.word	0x10310000
 8003f08:	10220000 	.word	0x10220000
 8003f0c:	10210000 	.word	0x10210000
 8003f10:	10120000 	.word	0x10120000
 8003f14:	10110000 	.word	0x10110000
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40010800 	.word	0x40010800
 8003f24:	40010c00 	.word	0x40010c00
 8003f28:	40011000 	.word	0x40011000
 8003f2c:	40011400 	.word	0x40011400
 8003f30:	40010400 	.word	0x40010400
=======
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d021      	beq.n	800516c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	490e      	ldr	r1, [pc, #56]	; (8005168 <HAL_GPIO_Init+0x2d0>)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
 8005134:	e021      	b.n	800517a <HAL_GPIO_Init+0x2e2>
 8005136:	bf00      	nop
 8005138:	10320000 	.word	0x10320000
 800513c:	10310000 	.word	0x10310000
 8005140:	10220000 	.word	0x10220000
 8005144:	10210000 	.word	0x10210000
 8005148:	10120000 	.word	0x10120000
 800514c:	10110000 	.word	0x10110000
 8005150:	40021000 	.word	0x40021000
 8005154:	40010000 	.word	0x40010000
 8005158:	40010800 	.word	0x40010800
 800515c:	40010c00 	.word	0x40010c00
 8005160:	40011000 	.word	0x40011000
 8005164:	40011400 	.word	0x40011400
 8005168:	40010400 	.word	0x40010400
>>>>>>> 6147058 (refactor)
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8003f34:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <HAL_GPIO_Init+0x304>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4909      	ldr	r1, [pc, #36]	; (8003f64 <HAL_GPIO_Init+0x304>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
=======
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_GPIO_Init+0x304>)
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	43db      	mvns	r3, r3
 8005174:	4909      	ldr	r1, [pc, #36]	; (800519c <HAL_GPIO_Init+0x304>)
 8005176:	4013      	ands	r3, r2
 8005178:	60cb      	str	r3, [r1, #12]
>>>>>>> 6147058 (refactor)
        }
      }
    }

	position++;
<<<<<<< HEAD
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	3301      	adds	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f47f ae8e 	bne.w	8003c74 <HAL_GPIO_Init+0x14>
  }
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	372c      	adds	r7, #44	; 0x2c
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	40010400 	.word	0x40010400

08003f68 <HAL_GPIO_ReadPin>:
=======
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	f47f ae8e 	bne.w	8004eac <HAL_GPIO_Init+0x14>
  }
}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	372c      	adds	r7, #44	; 0x2c
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	40010400 	.word	0x40010400

080051a0 <HAL_GPIO_ReadPin>:
>>>>>>> 6147058 (refactor)
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
=======
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	807b      	strh	r3, [r7, #2]
>>>>>>> 6147058 (refactor)
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_ReadPin+0x22>
=======
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	887b      	ldrh	r3, [r7, #2]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	e001      	b.n	80051c2 <HAL_GPIO_ReadPin+0x22>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_GPIO_WritePin>:
=======
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr

080051ce <HAL_GPIO_WritePin>:
>>>>>>> 6147058 (refactor)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	807b      	strh	r3, [r7, #2]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	707b      	strb	r3, [r7, #1]
=======
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	460b      	mov	r3, r1
 80051d8:	807b      	strh	r3, [r7, #2]
 80051da:	4613      	mov	r3, r2
 80051dc:	707b      	strb	r3, [r7, #1]
>>>>>>> 6147058 (refactor)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8003fa6:	787b      	ldrb	r3, [r7, #1]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fac:	887a      	ldrh	r2, [r7, #2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]
=======
 80051de:	787b      	ldrb	r3, [r7, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e4:	887a      	ldrh	r2, [r7, #2]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8003fb2:	e003      	b.n	8003fbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	041a      	lsls	r2, r3, #16
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	611a      	str	r2, [r3, #16]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_PCD_Init>:
=======
 80051ea:	e003      	b.n	80051f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051ec:	887b      	ldrh	r3, [r7, #2]
 80051ee:	041a      	lsls	r2, r3, #16
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	611a      	str	r2, [r3, #16]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <HAL_PCD_Init>:
>>>>>>> 6147058 (refactor)
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8003fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc8:	b08b      	sub	sp, #44	; 0x2c
 8003fca:	af06      	add	r7, sp, #24
 8003fcc:	6078      	str	r0, [r7, #4]
=======
 80051fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005200:	b08b      	sub	sp, #44	; 0x2c
 8005202:	af06      	add	r7, sp, #24
 8005204:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0fd      	b.n	80041d4 <HAL_PCD_Init+0x20e>
=======
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0fd      	b.n	800540c <HAL_PCD_Init+0x20e>
>>>>>>> 6147058 (refactor)

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
=======
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
>>>>>>> 6147058 (refactor)

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f006 fed9 	bl	800ada4 <HAL_PCD_MspInit>
=======
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f006 fed9 	bl	800bfdc <HAL_PCD_MspInit>
>>>>>>> 6147058 (refactor)
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
=======
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
>>>>>>> 6147058 (refactor)
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
<<<<<<< HEAD
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 f8dc 	bl	80071bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	687e      	ldr	r6, [r7, #4]
 800400c:	466d      	mov	r5, sp
 800400e:	f106 0410 	add.w	r4, r6, #16
 8004012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004014:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	602b      	str	r3, [r5, #0]
 800401a:	1d33      	adds	r3, r6, #4
 800401c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800401e:	6838      	ldr	r0, [r7, #0]
 8004020:	f003 f8a6 	bl	8007170 <USB_CoreInit>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0ce      	b.n	80041d4 <HAL_PCD_Init+0x20e>
=======
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f003 f8dc 	bl	80083f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	603b      	str	r3, [r7, #0]
 8005242:	687e      	ldr	r6, [r7, #4]
 8005244:	466d      	mov	r5, sp
 8005246:	f106 0410 	add.w	r4, r6, #16
 800524a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800524c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	1d33      	adds	r3, r6, #4
 8005254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005256:	6838      	ldr	r0, [r7, #0]
 8005258:	f003 f8a6 	bl	80083a8 <USB_CoreInit>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e0ce      	b.n	800540c <HAL_PCD_Init+0x20e>
>>>>>>> 6147058 (refactor)
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
<<<<<<< HEAD
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2100      	movs	r1, #0
 800403c:	4618      	mov	r0, r3
 800403e:	f003 f8d7 	bl	80071f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
 8004046:	e04c      	b.n	80040e2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	3301      	adds	r3, #1
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	b298      	uxth	r0, r3
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	440b      	add	r3, r1
 8004084:	3336      	adds	r3, #54	; 0x36
 8004086:	4602      	mov	r2, r0
 8004088:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	440b      	add	r3, r1
 800409a:	3303      	adds	r3, #3
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	3338      	adds	r3, #56	; 0x38
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	440b      	add	r3, r1
 80040c2:	333c      	adds	r3, #60	; 0x3c
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	440b      	add	r3, r1
 80040d6:	3340      	adds	r3, #64	; 0x40
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	3301      	adds	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d3ad      	bcc.n	8004048 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e044      	b.n	800417c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040f2:	7bfa      	ldrb	r2, [r7, #15]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004108:	7bfa      	ldrb	r2, [r7, #15]
 800410a:	6879      	ldr	r1, [r7, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	440b      	add	r3, r1
 8004116:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800411a:	7bfa      	ldrb	r2, [r7, #15]
 800411c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	440b      	add	r3, r1
 800412c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004134:	7bfa      	ldrb	r2, [r7, #15]
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	440b      	add	r3, r1
 8004142:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4413      	add	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	440b      	add	r3, r1
 8004158:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004160:	7bfa      	ldrb	r2, [r7, #15]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	3301      	adds	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3b5      	bcc.n	80040f2 <HAL_PCD_Init+0x12c>
=======
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f003 f8d7 	bl	8008428 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e04c      	b.n	800531a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3301      	adds	r3, #1
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	440b      	add	r3, r1
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052aa:	7bfa      	ldrb	r2, [r7, #15]
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	b298      	uxth	r0, r3
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	440b      	add	r3, r1
 80052bc:	3336      	adds	r3, #54	; 0x36
 80052be:	4602      	mov	r2, r0
 80052c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	440b      	add	r3, r1
 80052d2:	3303      	adds	r3, #3
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	440b      	add	r3, r1
 80052e6:	3338      	adds	r3, #56	; 0x38
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	440b      	add	r3, r1
 80052fa:	333c      	adds	r3, #60	; 0x3c
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	440b      	add	r3, r1
 800530e:	3340      	adds	r3, #64	; 0x40
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	3301      	adds	r3, #1
 8005318:	73fb      	strb	r3, [r7, #15]
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d3ad      	bcc.n	8005280 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
 8005328:	e044      	b.n	80053b4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800532a:	7bfa      	ldrb	r2, [r7, #15]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	440b      	add	r3, r1
 8005338:	f203 1369 	addw	r3, r3, #361	; 0x169
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005340:	7bfa      	ldrb	r2, [r7, #15]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005356:	7bfa      	ldrb	r2, [r7, #15]
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	440b      	add	r3, r1
 8005364:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800536c:	7bfa      	ldrb	r2, [r7, #15]
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	440b      	add	r3, r1
 800537a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005382:	7bfa      	ldrb	r2, [r7, #15]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	3301      	adds	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3b5      	bcc.n	800532a <HAL_PCD_Init+0x12c>
>>>>>>> 6147058 (refactor)
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	687e      	ldr	r6, [r7, #4]
 800418e:	466d      	mov	r5, sp
 8004190:	f106 0410 	add.w	r4, r6, #16
 8004194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004196:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	1d33      	adds	r3, r6, #4
 800419e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a0:	6838      	ldr	r0, [r7, #0]
 80041a2:	f003 f831 	bl	8007208 <USB_DevInit>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e00d      	b.n	80041d4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f004 ffcb 	bl	8009168 <USB_DevDisconnect>

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041dc <HAL_PCD_Start>:
=======
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	687e      	ldr	r6, [r7, #4]
 80053c6:	466d      	mov	r5, sp
 80053c8:	f106 0410 	add.w	r4, r6, #16
 80053cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	1d33      	adds	r3, r6, #4
 80053d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053d8:	6838      	ldr	r0, [r7, #0]
 80053da:	f003 f831 	bl	8008440 <USB_DevInit>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e00d      	b.n	800540c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f004 ffcb 	bl	800a3a0 <USB_DevDisconnect>

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005414 <HAL_PCD_Start>:
>>>>>>> 6147058 (refactor)
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_PCD_Start+0x16>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e016      	b.n	8004220 <HAL_PCD_Start+0x44>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 ffc6 	bl	8007190 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f007 f83f 	bl	800b28a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f004 ff9f 	bl	8009154 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_PCD_IRQHandler>:
=======
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_PCD_Start+0x16>
 8005426:	2302      	movs	r3, #2
 8005428:	e016      	b.n	8005458 <HAL_PCD_Start+0x44>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f002 ffc6 	bl	80083c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800543c:	2101      	movs	r1, #1
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f007 f83f 	bl	800c4c2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4618      	mov	r0, r3
 800544a:	f004 ff9f 	bl	800a38c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_PCD_IRQHandler>:
>>>>>>> 6147058 (refactor)
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
=======
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
<<<<<<< HEAD
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f004 ffa1 	bl	800917c <USB_ReadInterrupts>
 800423a:	4603      	mov	r3, r0
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004244:	d102      	bne.n	800424c <HAL_PCD_IRQHandler+0x24>
=======
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f004 ffa1 	bl	800a3b4 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800547c:	d102      	bne.n	8005484 <HAL_PCD_IRQHandler+0x24>
>>>>>>> 6147058 (refactor)
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
<<<<<<< HEAD
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fb61 	bl	800490e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f004 ff93 	bl	800917c <USB_ReadInterrupts>
 8004256:	4603      	mov	r3, r0
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800425c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004260:	d112      	bne.n	8004288 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	b292      	uxth	r2, r2
 8004276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fb61 	bl	8005b46 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f004 ff93 	bl	800a3b4 <USB_ReadInterrupts>
 800548e:	4603      	mov	r3, r0
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005498:	d112      	bne.n	80054c0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	b292      	uxth	r2, r2
 80054ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> 6147058 (refactor)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
<<<<<<< HEAD
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f006 fe0d 	bl	800ae9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004280:	2100      	movs	r1, #0
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f925 	bl	80044d2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f004 ff75 	bl	800917c <USB_ReadInterrupts>
 8004292:	4603      	mov	r3, r0
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d10b      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042b0:	b292      	uxth	r2, r2
 80042b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f004 ff5e 	bl	800917c <USB_ReadInterrupts>
 80042c0:	4603      	mov	r3, r0
 80042c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ca:	d10b      	bne.n	80042e4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042de:	b292      	uxth	r2, r2
 80042e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f004 ff47 	bl	800917c <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d126      	bne.n	8004348 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0204 	bic.w	r2, r2, #4
 800430c:	b292      	uxth	r2, r2
 800430e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0208 	bic.w	r2, r2, #8
 8004324:	b292      	uxth	r2, r2
 8004326:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f006 fe0d 	bl	800c0d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80054b8:	2100      	movs	r1, #0
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f925 	bl	800570a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f004 ff75 	bl	800a3b4 <USB_ReadInterrupts>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d4:	d10b      	bne.n	80054ee <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054e8:	b292      	uxth	r2, r2
 80054ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f004 ff5e 	bl	800a3b4 <USB_ReadInterrupts>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	d10b      	bne.n	800551c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800550c:	b29a      	uxth	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005516:	b292      	uxth	r2, r2
 8005518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f004 ff47 	bl	800a3b4 <USB_ReadInterrupts>
 8005526:	4603      	mov	r3, r0
 8005528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d126      	bne.n	8005580 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	b292      	uxth	r2, r2
 8005546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0208 	bic.w	r2, r2, #8
 800555c:	b292      	uxth	r2, r2
 800555e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> 6147058 (refactor)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
<<<<<<< HEAD
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f006 fdee 	bl	800af0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004342:	b292      	uxth	r2, r2
 8004344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f004 ff15 	bl	800917c <USB_ReadInterrupts>
 8004352:	4603      	mov	r3, r0
 8004354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435c:	f040 8084 	bne.w	8004468 <HAL_PCD_IRQHandler+0x240>
=======
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f006 fdee 	bl	800c144 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005570:	b29a      	uxth	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800557a:	b292      	uxth	r2, r2
 800557c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f004 ff15 	bl	800a3b4 <USB_ReadInterrupts>
 800558a:	4603      	mov	r3, r0
 800558c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005594:	f040 8084 	bne.w	80056a0 <HAL_PCD_IRQHandler+0x240>
>>>>>>> 6147058 (refactor)
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
<<<<<<< HEAD
 8004360:	2300      	movs	r3, #0
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e011      	b.n	800438a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	7ffb      	ldrb	r3, [r7, #31]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	7ffb      	ldrb	r3, [r7, #31]
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	b292      	uxth	r2, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	f107 0120 	add.w	r1, r7, #32
 800437e:	440b      	add	r3, r1
 8004380:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004384:	7ffb      	ldrb	r3, [r7, #31]
 8004386:	3301      	adds	r3, #1
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	7ffb      	ldrb	r3, [r7, #31]
 800438c:	2b07      	cmp	r3, #7
 800438e:	d9ea      	bls.n	8004366 <HAL_PCD_IRQHandler+0x13e>
=======
 8005598:	2300      	movs	r3, #0
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e011      	b.n	80055c2 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	8812      	ldrh	r2, [r2, #0]
 80055ae:	b292      	uxth	r2, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	f107 0120 	add.w	r1, r7, #32
 80055b6:	440b      	add	r3, r1
 80055b8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	3301      	adds	r3, #1
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	7ffb      	ldrb	r3, [r7, #31]
 80055c4:	2b07      	cmp	r3, #7
 80055c6:	d9ea      	bls.n	800559e <HAL_PCD_IRQHandler+0x13e>
>>>>>>> 6147058 (refactor)
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
<<<<<<< HEAD
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	b292      	uxth	r2, r2
 80043a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	b292      	uxth	r2, r2
 80043bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80043c0:	bf00      	nop
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f6      	beq.n	80043c2 <HAL_PCD_IRQHandler+0x19a>
=======
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	b292      	uxth	r2, r2
 80055dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0201 	bic.w	r2, r2, #1
 80055f2:	b292      	uxth	r2, r2
 80055f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80055f8:	bf00      	nop
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005602:	b29b      	uxth	r3, r3
 8005604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f6      	beq.n	80055fa <HAL_PCD_IRQHandler+0x19a>
>>>>>>> 6147058 (refactor)
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
<<<<<<< HEAD
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	b292      	uxth	r2, r2
 80043e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	77fb      	strb	r3, [r7, #31]
 80043f0:	e010      	b.n	8004414 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	4611      	mov	r1, r2
 80043fa:	7ffa      	ldrb	r2, [r7, #31]
 80043fc:	0092      	lsls	r2, r2, #2
 80043fe:	440a      	add	r2, r1
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	f107 0120 	add.w	r1, r7, #32
 8004406:	440b      	add	r3, r1
 8004408:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800440c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	3301      	adds	r3, #1
 8004412:	77fb      	strb	r3, [r7, #31]
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	2b07      	cmp	r3, #7
 8004418:	d9eb      	bls.n	80043f2 <HAL_PCD_IRQHandler+0x1ca>
=======
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561e:	b292      	uxth	r2, r2
 8005620:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005624:	2300      	movs	r3, #0
 8005626:	77fb      	strb	r3, [r7, #31]
 8005628:	e010      	b.n	800564c <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	4611      	mov	r1, r2
 8005632:	7ffa      	ldrb	r2, [r7, #31]
 8005634:	0092      	lsls	r2, r2, #2
 8005636:	440a      	add	r2, r1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	f107 0120 	add.w	r1, r7, #32
 800563e:	440b      	add	r3, r1
 8005640:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005644:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005646:	7ffb      	ldrb	r3, [r7, #31]
 8005648:	3301      	adds	r3, #1
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	7ffb      	ldrb	r3, [r7, #31]
 800564e:	2b07      	cmp	r3, #7
 8005650:	d9eb      	bls.n	800562a <HAL_PCD_IRQHandler+0x1ca>
>>>>>>> 6147058 (refactor)
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
<<<<<<< HEAD
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0208 	orr.w	r2, r2, #8
 800442c:	b292      	uxth	r2, r2
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800443a:	b29a      	uxth	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	b292      	uxth	r2, r2
 8004446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0204 	orr.w	r2, r2, #4
 800445c:	b292      	uxth	r2, r2
 800445e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
=======
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800565a:	b29a      	uxth	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0208 	orr.w	r2, r2, #8
 8005664:	b292      	uxth	r2, r2
 8005666:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800567c:	b292      	uxth	r2, r2
 800567e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800568a:	b29a      	uxth	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0204 	orr.w	r2, r2, #4
 8005694:	b292      	uxth	r2, r2
 8005696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
>>>>>>> 6147058 (refactor)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
<<<<<<< HEAD
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f006 fd38 	bl	800aed8 <HAL_PCD_SuspendCallback>
=======
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f006 fd38 	bl	800c110 <HAL_PCD_SuspendCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
<<<<<<< HEAD
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f004 fe85 	bl	800917c <USB_ReadInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d10e      	bne.n	800449c <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004490:	b292      	uxth	r2, r2
 8004492:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
=======
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f004 fe85 	bl	800a3b4 <USB_ReadInterrupts>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b4:	d10e      	bne.n	80056d4 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056c8:	b292      	uxth	r2, r2
 80056ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
>>>>>>> 6147058 (refactor)

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
<<<<<<< HEAD
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f006 fcf1 	bl	800ae7e <HAL_PCD_SOFCallback>
=======
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f006 fcf1 	bl	800c0b6 <HAL_PCD_SOFCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
<<<<<<< HEAD
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 fe6b 	bl	800917c <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b0:	d10b      	bne.n	80044ca <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c4:	b292      	uxth	r2, r2
 80044c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80044ca:	bf00      	nop
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_PCD_SetAddress>:
=======
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4618      	mov	r0, r3
 80056da:	f004 fe6b 	bl	800a3b4 <USB_ReadInterrupts>
 80056de:	4603      	mov	r3, r0
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e8:	d10b      	bne.n	8005702 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056fc:	b292      	uxth	r2, r2
 80056fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005702:	bf00      	nop
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_PCD_SetAddress>:
>>>>>>> 6147058 (refactor)
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
<<<<<<< HEAD
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_SetAddress+0x1a>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e013      	b.n	8004514 <HAL_PCD_SetAddress+0x42>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f004 fe12 	bl	800912e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_PCD_EP_Open>:
=======
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_PCD_SetAddress+0x1a>
 8005720:	2302      	movs	r3, #2
 8005722:	e013      	b.n	800574c <HAL_PCD_SetAddress+0x42>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fe12 	bl	800a366 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_PCD_EP_Open>:
>>>>>>> 6147058 (refactor)
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
<<<<<<< HEAD
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	70fb      	strb	r3, [r7, #3]
 800452e:	460b      	mov	r3, r1
 8004530:	803b      	strh	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800453a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800453e:	2b00      	cmp	r3, #0
 8004540:	da0e      	bge.n	8004560 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	705a      	strb	r2, [r3, #1]
 800455e:	e00e      	b.n	800457e <HAL_PCD_EP_Open+0x62>
=======
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	70fb      	strb	r3, [r7, #3]
 8005766:	460b      	mov	r3, r1
 8005768:	803b      	strh	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005776:	2b00      	cmp	r3, #0
 8005778:	da0e      	bge.n	8005798 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	705a      	strb	r2, [r3, #1]
 8005796:	e00e      	b.n	80057b6 <HAL_PCD_EP_Open+0x62>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	f003 0207 	and.w	r2, r3, #7
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800458a:	883a      	ldrh	r2, [r7, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	78ba      	ldrb	r2, [r7, #2]
 8004594:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045a8:	78bb      	ldrb	r3, [r7, #2]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d102      	bne.n	80045b4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_PCD_EP_Open+0xa6>
 80045be:	2302      	movs	r3, #2
 80045c0:	e00e      	b.n	80045e0 <HAL_PCD_EP_Open+0xc4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 fe39 	bl	8007248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80045de:	7afb      	ldrb	r3, [r7, #11]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_PCD_EP_Close>:
=======
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 0207 	and.w	r2, r3, #7
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4413      	add	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80057c2:	883a      	ldrh	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	78ba      	ldrb	r2, [r7, #2]
 80057cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d004      	beq.n	80057e0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80057e0:	78bb      	ldrb	r3, [r7, #2]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d102      	bne.n	80057ec <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_PCD_EP_Open+0xa6>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e00e      	b.n	8005818 <HAL_PCD_EP_Open+0xc4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68f9      	ldr	r1, [r7, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	f002 fe39 	bl	8008480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005816:	7afb      	ldrb	r3, [r7, #11]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_PCD_EP_Close>:
>>>>>>> 6147058 (refactor)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da0e      	bge.n	800461a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	705a      	strb	r2, [r3, #1]
 8004618:	e00e      	b.n	8004638 <HAL_PCD_EP_Close+0x50>
=======
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800582c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	da0e      	bge.n	8005852 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	4613      	mov	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	705a      	strb	r2, [r3, #1]
 8005850:	e00e      	b.n	8005870 <HAL_PCD_EP_Close+0x50>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 0207 	and.w	r2, r3, #7
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_PCD_EP_Close+0x6a>
 800464e:	2302      	movs	r3, #2
 8004650:	e00e      	b.n	8004670 <HAL_PCD_EP_Close+0x88>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	4618      	mov	r0, r3
 8004662:	f003 f95b 	bl	800791c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_PCD_EP_Receive>:
=======
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	f003 0207 	and.w	r2, r3, #7
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005882:	2b01      	cmp	r3, #1
 8005884:	d101      	bne.n	800588a <HAL_PCD_EP_Close+0x6a>
 8005886:	2302      	movs	r3, #2
 8005888:	e00e      	b.n	80058a8 <HAL_PCD_EP_Close+0x88>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	f003 f95b 	bl	8008b54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_PCD_EP_Receive>:
>>>>>>> 6147058 (refactor)
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	460b      	mov	r3, r1
 8004686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004688:	7afb      	ldrb	r3, [r7, #11]
 800468a:	f003 0207 	and.w	r2, r3, #7
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046b8:	7afb      	ldrb	r3, [r7, #11]
 80046ba:	f003 0307 	and.w	r3, r3, #7
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046c4:	7afb      	ldrb	r3, [r7, #11]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6979      	ldr	r1, [r7, #20]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f003 fb0d 	bl	8007cf4 <USB_EPStartXfer>
 80046da:	e005      	b.n	80046e8 <HAL_PCD_EP_Receive+0x70>
=======
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	460b      	mov	r3, r1
 80058be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058fc:	7afb      	ldrb	r3, [r7, #11]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6979      	ldr	r1, [r7, #20]
 800590c:	4618      	mov	r0, r3
 800590e:	f003 fb0d 	bl	8008f2c <USB_EPStartXfer>
 8005912:	e005      	b.n	8005920 <HAL_PCD_EP_Receive+0x70>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6979      	ldr	r1, [r7, #20]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fb06 	bl	8007cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_EP_GetRxCount>:
=======
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6979      	ldr	r1, [r7, #20]
 800591a:	4618      	mov	r0, r3
 800591c:	f003 fb06 	bl	8008f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_PCD_EP_GetRxCount>:
>>>>>>> 6147058 (refactor)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 0207 	and.w	r2, r3, #7
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	440b      	add	r3, r1
 8004710:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004714:	681b      	ldr	r3, [r3, #0]
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <HAL_PCD_EP_Transmit>:
=======
 800592a:	b480      	push	{r7}
 800592c:	b083      	sub	sp, #12
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 0207 	and.w	r2, r3, #7
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	440b      	add	r3, r1
 8005948:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800594c:	681b      	ldr	r3, [r3, #0]
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <HAL_PCD_EP_Transmit>:
>>>>>>> 6147058 (refactor)
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
<<<<<<< HEAD
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	460b      	mov	r3, r1
 800472e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004730:	7afb      	ldrb	r3, [r7, #11]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2200      	movs	r2, #0
 8004764:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2201      	movs	r2, #1
 800476a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476c:	7afb      	ldrb	r3, [r7, #11]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b2da      	uxtb	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	4618      	mov	r0, r3
 800478a:	f003 fab3 	bl	8007cf4 <USB_EPStartXfer>
 800478e:	e005      	b.n	800479c <HAL_PCD_EP_Transmit+0x7c>
=======
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	460b      	mov	r3, r1
 8005966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005968:	7afb      	ldrb	r3, [r7, #11]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2201      	movs	r2, #1
 80059a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059a4:	7afb      	ldrb	r3, [r7, #11]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059b0:	7afb      	ldrb	r3, [r7, #11]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6979      	ldr	r1, [r7, #20]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f003 fab3 	bl	8008f2c <USB_EPStartXfer>
 80059c6:	e005      	b.n	80059d4 <HAL_PCD_EP_Transmit+0x7c>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6979      	ldr	r1, [r7, #20]
 8004796:	4618      	mov	r0, r3
 8004798:	f003 faac 	bl	8007cf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <HAL_PCD_EP_SetStall>:
=======
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 faac 	bl	8008f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_EP_SetStall>:
>>>>>>> 6147058 (refactor)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	460b      	mov	r3, r1
 80047b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 0207 	and.w	r2, r3, #7
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d901      	bls.n	80047c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04c      	b.n	800485e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80047c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	da0e      	bge.n	80047ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	705a      	strb	r2, [r3, #1]
 80047e8:	e00c      	b.n	8004804 <HAL_PCD_EP_SetStall+0x5e>
=======
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 0207 	and.w	r2, r3, #7
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d901      	bls.n	80059fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e04c      	b.n	8005a96 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	da0e      	bge.n	8005a22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	705a      	strb	r2, [r3, #1]
 8005a20:	e00c      	b.n	8005a3c <HAL_PCD_EP_SetStall+0x5e>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	4413      	add	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_PCD_EP_SetStall+0x7e>
 8004820:	2302      	movs	r3, #2
 8004822:	e01c      	b.n	800485e <HAL_PCD_EP_SetStall+0xb8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	4618      	mov	r0, r3
 8004834:	f004 fb7e 	bl	8008f34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b00      	cmp	r3, #0
 8004840:	d108      	bne.n	8004854 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f004 fca3 	bl	800919a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_PCD_EP_ClrStall>:
=======
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	4413      	add	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d101      	bne.n	8005a5c <HAL_PCD_EP_SetStall+0x7e>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e01c      	b.n	8005a96 <HAL_PCD_EP_SetStall+0xb8>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f004 fb7e 	bl	800a16c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f004 fca3 	bl	800a3d2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_PCD_EP_ClrStall>:
>>>>>>> 6147058 (refactor)
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
<<<<<<< HEAD
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d901      	bls.n	8004884 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e040      	b.n	8004906 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da0e      	bge.n	80048aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	705a      	strb	r2, [r3, #1]
 80048a8:	e00e      	b.n	80048c8 <HAL_PCD_EP_ClrStall+0x62>
=======
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d901      	bls.n	8005abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e040      	b.n	8005b3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da0e      	bge.n	8005ae2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	705a      	strb	r2, [r3, #1]
 8005ae0:	e00e      	b.n	8005b00 <HAL_PCD_EP_ClrStall+0x62>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
<<<<<<< HEAD
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	f003 0207 	and.w	r2, r3, #7
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	4413      	add	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_PCD_EP_ClrStall+0x82>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e00e      	b.n	8004906 <HAL_PCD_EP_ClrStall+0xa0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f004 fb6c 	bl	8008fd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <PCD_EP_ISR_Handler>:
=======
 8005ae2:	78fb      	ldrb	r3, [r7, #3]
 8005ae4:	f003 0207 	and.w	r2, r3, #7
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_PCD_EP_ClrStall+0x82>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e00e      	b.n	8005b3e <HAL_PCD_EP_ClrStall+0xa0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68f9      	ldr	r1, [r7, #12]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f004 fb6c 	bl	800a20c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <PCD_EP_ISR_Handler>:
>>>>>>> 6147058 (refactor)
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 800490e:	b580      	push	{r7, lr}
 8004910:	b08e      	sub	sp, #56	; 0x38
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
=======
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b08e      	sub	sp, #56	; 0x38
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
<<<<<<< HEAD
 8004916:	e2df      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004920:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800492e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 8158 	bne.w	8004be8 <PCD_EP_ISR_Handler+0x2da>
=======
 8005b4e:	e2df      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b58:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005b66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f040 8158 	bne.w	8005e20 <PCD_EP_ISR_Handler+0x2da>
>>>>>>> 6147058 (refactor)
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
<<<<<<< HEAD
 8004938:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	2b00      	cmp	r3, #0
 8004940:	d152      	bne.n	80049e8 <PCD_EP_ISR_Handler+0xda>
=======
 8005b70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d152      	bne.n	8005c20 <PCD_EP_ISR_Handler+0xda>
>>>>>>> 6147058 (refactor)
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
<<<<<<< HEAD
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	81fb      	strh	r3, [r7, #14]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3328      	adds	r3, #40	; 0x28
 800496a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	3302      	adds	r3, #2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	441a      	add	r2, r3
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	615a      	str	r2, [r3, #20]
=======
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8a:	81fb      	strh	r3, [r7, #14]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3328      	adds	r3, #40	; 0x28
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3302      	adds	r3, #2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	441a      	add	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	615a      	str	r2, [r3, #20]
>>>>>>> 6147058 (refactor)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
<<<<<<< HEAD
 80049a6:	2100      	movs	r1, #0
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f006 fa4e 	bl	800ae4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 828e 	beq.w	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 8289 	bne.w	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b292      	uxth	r2, r2
 80049da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049e6:	e277      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
=======
 8005bde:	2100      	movs	r1, #0
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f006 fa4e 	bl	800c082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 828e 	beq.w	8006110 <PCD_EP_ISR_Handler+0x5ca>
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f040 8289 	bne.w	8006110 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b292      	uxth	r2, r2
 8005c12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c1e:	e277      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
>>>>>>> 6147058 (refactor)
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
<<<<<<< HEAD
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80049f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d034      	beq.n	8004a6c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4413      	add	r3, r2
 8004a16:	3306      	adds	r3, #6
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f004 fbfa 	bl	800923a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a52:	4013      	ands	r3, r2
 8004a54:	823b      	strh	r3, [r7, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	8a3a      	ldrh	r2, [r7, #16]
 8004a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a60:	b292      	uxth	r2, r2
 8004a62:	801a      	strh	r2, [r3, #0]
=======
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005c30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d034      	beq.n	8005ca4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3306      	adds	r3, #6
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f004 fbfa 	bl	800a472 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	823b      	strh	r3, [r7, #16]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	8a3a      	ldrh	r2, [r7, #16]
 8005c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c98:	b292      	uxth	r2, r2
 8005c9a:	801a      	strh	r2, [r3, #0]
>>>>>>> 6147058 (refactor)

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
<<<<<<< HEAD
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f006 f9c3 	bl	800adf0 <HAL_PCD_SetupStageCallback>
 8004a6a:	e235      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f280 8231 	bge.w	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a82:	4013      	ands	r3, r2
 8004a84:	83bb      	strh	r3, [r7, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	8bba      	ldrh	r2, [r7, #28]
 8004a8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a90:	b292      	uxth	r2, r2
 8004a92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3306      	adds	r3, #6
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <PCD_EP_ISR_Handler+0x1ee>
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d015      	beq.n	8004afc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	6959      	ldr	r1, [r3, #20]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	f004 fbaa 	bl	800923a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	441a      	add	r2, r3
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	615a      	str	r2, [r3, #20]
=======
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f006 f9c3 	bl	800c028 <HAL_PCD_SetupStageCallback>
 8005ca2:	e235      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ca4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f280 8231 	bge.w	8006110 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cba:	4013      	ands	r3, r2
 8005cbc:	83bb      	strh	r3, [r7, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	8bba      	ldrh	r2, [r7, #28]
 8005cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	3306      	adds	r3, #6
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d019      	beq.n	8005d34 <PCD_EP_ISR_Handler+0x1ee>
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d015      	beq.n	8005d34 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	6959      	ldr	r1, [r3, #20]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f004 fbaa 	bl	800a472 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	695a      	ldr	r2, [r3, #20]
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	441a      	add	r2, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	615a      	str	r2, [r3, #20]
>>>>>>> 6147058 (refactor)

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
<<<<<<< HEAD
 8004af4:	2100      	movs	r1, #0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f006 f98c 	bl	800ae14 <HAL_PCD_DataOutStageCallback>
=======
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f006 f98c 	bl	800c04c <HAL_PCD_DataOutStageCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
<<<<<<< HEAD
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	4413      	add	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d112      	bne.n	8004b4a <PCD_EP_ISR_Handler+0x23c>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e02f      	b.n	8004baa <PCD_EP_ISR_Handler+0x29c>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b50:	d813      	bhi.n	8004b7a <PCD_EP_ISR_Handler+0x26c>
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	085b      	lsrs	r3, r3, #1
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <PCD_EP_ISR_Handler+0x25e>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	3301      	adds	r3, #1
 8004b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	e017      	b.n	8004baa <PCD_EP_ISR_Handler+0x29c>
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	633b      	str	r3, [r7, #48]	; 0x30
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <PCD_EP_ISR_Handler+0x286>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	3b01      	subs	r3, #1
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	827b      	strh	r3, [r7, #18]
 8004bbc:	8a7b      	ldrh	r3, [r7, #18]
 8004bbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bc2:	827b      	strh	r3, [r7, #18]
 8004bc4:	8a7b      	ldrh	r3, [r7, #18]
 8004bc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bca:	827b      	strh	r3, [r7, #18]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	8a7b      	ldrh	r3, [r7, #18]
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
 8004be6:	e177      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
=======
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	4413      	add	r3, r2
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d112      	bne.n	8005d82 <PCD_EP_ISR_Handler+0x23c>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e02f      	b.n	8005de2 <PCD_EP_ISR_Handler+0x29c>
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b3e      	cmp	r3, #62	; 0x3e
 8005d88:	d813      	bhi.n	8005db2 <PCD_EP_ISR_Handler+0x26c>
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	633b      	str	r3, [r7, #48]	; 0x30
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <PCD_EP_ISR_Handler+0x25e>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	3301      	adds	r3, #1
 8005da2:	633b      	str	r3, [r7, #48]	; 0x30
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	029b      	lsls	r3, r3, #10
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e017      	b.n	8005de2 <PCD_EP_ISR_Handler+0x29c>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <PCD_EP_ISR_Handler+0x286>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	633b      	str	r3, [r7, #48]	; 0x30
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	827b      	strh	r3, [r7, #18]
 8005df4:	8a7b      	ldrh	r3, [r7, #18]
 8005df6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dfa:	827b      	strh	r3, [r7, #18]
 8005dfc:	8a7b      	ldrh	r3, [r7, #18]
 8005dfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e02:	827b      	strh	r3, [r7, #18]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	8a7b      	ldrh	r3, [r7, #18]
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
 8005e1e:	e177      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
<<<<<<< HEAD
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bfa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f280 80ea 	bge.w	8004dd8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	853b      	strh	r3, [r7, #40]	; 0x28
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c32:	b292      	uxth	r2, r2
 8004c34:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004c36:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	7b1b      	ldrb	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d122      	bne.n	8004c9a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	3306      	adds	r3, #6
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c76:	881b      	ldrh	r3, [r3, #0]
 8004c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004c7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8087 	beq.w	8004d94 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	6959      	ldr	r1, [r3, #20]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	88da      	ldrh	r2, [r3, #6]
 8004c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c94:	f004 fad1 	bl	800923a <USB_ReadPMA>
 8004c98:	e07c      	b.n	8004d94 <PCD_EP_ISR_Handler+0x486>
=======
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005e32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f280 80ea 	bge.w	8006010 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e52:	4013      	ands	r3, r2
 8005e54:	853b      	strh	r3, [r7, #40]	; 0x28
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e6a:	b292      	uxth	r2, r2
 8005e6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005e6e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4413      	add	r3, r2
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	7b1b      	ldrb	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d122      	bne.n	8005ed2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3306      	adds	r3, #6
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005eb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8087 	beq.w	8005fcc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	6959      	ldr	r1, [r3, #20]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	88da      	ldrh	r2, [r3, #6]
 8005eca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ecc:	f004 fad1 	bl	800a472 <USB_ReadPMA>
 8005ed0:	e07c      	b.n	8005fcc <PCD_EP_ISR_Handler+0x486>
>>>>>>> 6147058 (refactor)
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	78db      	ldrb	r3, [r3, #3]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d108      	bne.n	8004cb4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ca2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f923 	bl	8004ef4 <HAL_PCD_EP_DB_Receive>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004cb2:	e06f      	b.n	8004d94 <PCD_EP_ISR_Handler+0x486>
=======
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	78db      	ldrb	r3, [r3, #3]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d108      	bne.n	8005eec <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005edc:	461a      	mov	r2, r3
 8005ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f923 	bl	800612c <HAL_PCD_EP_DB_Receive>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005eea:	e06f      	b.n	8005fcc <PCD_EP_ISR_Handler+0x486>
>>>>>>> 6147058 (refactor)
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
<<<<<<< HEAD
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	847b      	strh	r3, [r7, #34]	; 0x22
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d021      	beq.n	8004d52 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	3302      	adds	r3, #2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d36:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02a      	beq.n	8004d94 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	6959      	ldr	r1, [r3, #20]
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	891a      	ldrh	r2, [r3, #8]
 8004d4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d4c:	f004 fa75 	bl	800923a <USB_ReadPMA>
 8004d50:	e020      	b.n	8004d94 <PCD_EP_ISR_Handler+0x486>
=======
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d021      	beq.n	8005f8a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4413      	add	r3, r2
 8005f5a:	3302      	adds	r3, #2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005f70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d02a      	beq.n	8005fcc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	6959      	ldr	r1, [r3, #20]
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	891a      	ldrh	r2, [r3, #8]
 8005f82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f84:	f004 fa75 	bl	800a472 <USB_ReadPMA>
 8005f88:	e020      	b.n	8005fcc <PCD_EP_ISR_Handler+0x486>
>>>>>>> 6147058 (refactor)
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	3306      	adds	r3, #6
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004d7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	6959      	ldr	r1, [r3, #20]
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	895a      	ldrh	r2, [r3, #10]
 8004d8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d90:	f004 fa53 	bl	800923a <USB_ReadPMA>
=======
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3306      	adds	r3, #6
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005fb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	6959      	ldr	r1, [r3, #20]
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	895a      	ldrh	r2, [r3, #10]
 8005fc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fc8:	f004 fa53 	bl	800a472 <USB_ReadPMA>
>>>>>>> 6147058 (refactor)
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
<<<<<<< HEAD
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d9a:	441a      	add	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	695a      	ldr	r2, [r3, #20]
 8004da4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da6:	441a      	add	r2, r3
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <PCD_EP_ISR_Handler+0x4b0>
 8004db4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d206      	bcs.n	8004dcc <PCD_EP_ISR_Handler+0x4be>
=======
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fd2:	441a      	add	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fde:	441a      	add	r2, r3
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <PCD_EP_ISR_Handler+0x4b0>
 8005fec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d206      	bcs.n	8006004 <PCD_EP_ISR_Handler+0x4be>
>>>>>>> 6147058 (refactor)
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f006 f825 	bl	800ae14 <HAL_PCD_DataOutStageCallback>
 8004dca:	e005      	b.n	8004dd8 <PCD_EP_ISR_Handler+0x4ca>
=======
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f006 f825 	bl	800c04c <HAL_PCD_DataOutStageCallback>
 8006002:	e005      	b.n	8006010 <PCD_EP_ISR_Handler+0x4ca>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
<<<<<<< HEAD
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f002 ff8e 	bl	8007cf4 <USB_EPStartXfer>
=======
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f002 ff8e 	bl	8008f2c <USB_EPStartXfer>
>>>>>>> 6147058 (refactor)
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
<<<<<<< HEAD
 8004dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d07a      	beq.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004de2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	843b      	strh	r3, [r7, #32]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	441a      	add	r2, r3
 8004e20:	8c3b      	ldrh	r3, [r7, #32]
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	78db      	ldrb	r3, [r3, #3]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d108      	bne.n	8004e48 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d146      	bne.n	8004ecc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004e3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d141      	bne.n	8004ecc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e70:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d906      	bls.n	8004e8a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	699a      	ldr	r2, [r3, #24]
 8004e80:	8bfb      	ldrh	r3, [r7, #30]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	619a      	str	r2, [r3, #24]
 8004e88:	e002      	b.n	8004e90 <PCD_EP_ISR_Handler+0x582>
=======
 8006010:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006016:	2b00      	cmp	r3, #0
 8006018:	d07a      	beq.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800601a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	4613      	mov	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006048:	843b      	strh	r3, [r7, #32]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8c3b      	ldrh	r3, [r7, #32]
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d108      	bne.n	8006080 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006072:	2b02      	cmp	r3, #2
 8006074:	d146      	bne.n	8006104 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006076:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d141      	bne.n	8006104 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	4413      	add	r3, r2
 8006094:	3302      	adds	r3, #2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060a8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	8bfb      	ldrh	r3, [r7, #30]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d906      	bls.n	80060c2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	8bfb      	ldrh	r3, [r7, #30]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	619a      	str	r2, [r3, #24]
 80060c0:	e002      	b.n	80060c8 <PCD_EP_ISR_Handler+0x582>
>>>>>>> 6147058 (refactor)
          }
          else
          {
            ep->xfer_len = 0U;
<<<<<<< HEAD
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	619a      	str	r2, [r3, #24]
=======
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	2200      	movs	r2, #0
 80060c6:	619a      	str	r2, [r3, #24]
>>>>>>> 6147058 (refactor)
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
<<<<<<< HEAD
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <PCD_EP_ISR_Handler+0x598>
=======
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <PCD_EP_ISR_Handler+0x598>
>>>>>>> 6147058 (refactor)
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f005 ffd3 	bl	800ae4a <HAL_PCD_DataInStageCallback>
 8004ea4:	e018      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
=======
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f005 ffd3 	bl	800c082 <HAL_PCD_DataInStageCallback>
 80060dc:	e018      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
<<<<<<< HEAD
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	441a      	add	r2, r3
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	8bfb      	ldrh	r3, [r7, #30]
 8004eb8:	441a      	add	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 ff15 	bl	8007cf4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004eca:	e005      	b.n	8004ed8 <PCD_EP_ISR_Handler+0x5ca>
=======
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	695a      	ldr	r2, [r3, #20]
 80060e2:	8bfb      	ldrh	r3, [r7, #30]
 80060e4:	441a      	add	r2, r3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	8bfb      	ldrh	r3, [r7, #30]
 80060f0:	441a      	add	r2, r3
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 ff15 	bl	8008f2c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006102:	e005      	b.n	8006110 <PCD_EP_ISR_Handler+0x5ca>
>>>>>>> 6147058 (refactor)
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
<<<<<<< HEAD
 8004ecc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f91b 	bl	800510e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b21b      	sxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f6ff ad17 	blt.w	8004918 <PCD_EP_ISR_Handler+0xa>
=======
 8006104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006106:	461a      	mov	r2, r3
 8006108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f91b 	bl	8006346 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006118:	b29b      	uxth	r3, r3
 800611a:	b21b      	sxth	r3, r3
 800611c:	2b00      	cmp	r3, #0
 800611e:	f6ff ad17 	blt.w	8005b50 <PCD_EP_ISR_Handler+0xa>
>>>>>>> 6147058 (refactor)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3738      	adds	r7, #56	; 0x38
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCD_EP_DB_Receive>:
=======
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3738      	adds	r7, #56	; 0x38
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_PCD_EP_DB_Receive>:
>>>>>>> 6147058 (refactor)
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	80fb      	strh	r3, [r7, #6]
=======
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
>>>>>>> 6147058 (refactor)
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d07e      	beq.n	800500a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	4413      	add	r3, r2
 8004f20:	3302      	adds	r3, #2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	8b7b      	ldrh	r3, [r7, #26]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d306      	bcc.n	8004f4e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	699a      	ldr	r2, [r3, #24]
 8004f44:	8b7b      	ldrh	r3, [r7, #26]
 8004f46:	1ad2      	subs	r2, r2, r3
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	619a      	str	r2, [r3, #24]
 8004f4c:	e002      	b.n	8004f54 <HAL_PCD_EP_DB_Receive+0x60>
=======
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d07e      	beq.n	8006242 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	3302      	adds	r3, #2
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800616c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	8b7b      	ldrh	r3, [r7, #26]
 8006174:	429a      	cmp	r2, r3
 8006176:	d306      	bcc.n	8006186 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	699a      	ldr	r2, [r3, #24]
 800617c:	8b7b      	ldrh	r3, [r7, #26]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	619a      	str	r2, [r3, #24]
 8006184:	e002      	b.n	800618c <HAL_PCD_EP_DB_Receive+0x60>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d123      	bne.n	8004fa4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	833b      	strh	r3, [r7, #24]
 8004f78:	8b3b      	ldrh	r3, [r7, #24]
 8004f7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f7e:	833b      	strh	r3, [r7, #24]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	8b3b      	ldrh	r3, [r7, #24]
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
=======
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d123      	bne.n	80061dc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	833b      	strh	r3, [r7, #24]
 80061b0:	8b3b      	ldrh	r3, [r7, #24]
 80061b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061b6:	833b      	strh	r3, [r7, #24]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	8b3b      	ldrh	r3, [r7, #24]
 80061c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d8:	b29b      	uxth	r3, r3
 80061da:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01f      	beq.n	8004fee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	82fb      	strh	r3, [r7, #22]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	441a      	add	r2, r3
 8004fd8:	8afb      	ldrh	r3, [r7, #22]
 8004fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004fee:	8b7b      	ldrh	r3, [r7, #26]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8087 	beq.w	8005104 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	891a      	ldrh	r2, [r3, #8]
 8005002:	8b7b      	ldrh	r3, [r7, #26]
 8005004:	f004 f919 	bl	800923a <USB_ReadPMA>
 8005008:	e07c      	b.n	8005104 <HAL_PCD_EP_DB_Receive+0x210>
=======
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01f      	beq.n	8006226 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006200:	82fb      	strh	r3, [r7, #22]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	8afb      	ldrh	r3, [r7, #22]
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006226:	8b7b      	ldrh	r3, [r7, #26]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 8087 	beq.w	800633c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6959      	ldr	r1, [r3, #20]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	891a      	ldrh	r2, [r3, #8]
 800623a:	8b7b      	ldrh	r3, [r7, #26]
 800623c:	f004 f919 	bl	800a472 <USB_ReadPMA>
 8006240:	e07c      	b.n	800633c <HAL_PCD_EP_DB_Receive+0x210>
>>>>>>> 6147058 (refactor)
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	3306      	adds	r3, #6
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005032:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	8b7b      	ldrh	r3, [r7, #26]
 800503a:	429a      	cmp	r2, r3
 800503c:	d306      	bcc.n	800504c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	699a      	ldr	r2, [r3, #24]
 8005042:	8b7b      	ldrh	r3, [r7, #26]
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	619a      	str	r2, [r3, #24]
 800504a:	e002      	b.n	8005052 <HAL_PCD_EP_DB_Receive+0x15e>
=======
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4413      	add	r3, r2
 8006256:	3306      	adds	r3, #6
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800626a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	8b7b      	ldrh	r3, [r7, #26]
 8006272:	429a      	cmp	r2, r3
 8006274:	d306      	bcc.n	8006284 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	8b7b      	ldrh	r3, [r7, #26]
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	619a      	str	r2, [r3, #24]
 8006282:	e002      	b.n	800628a <HAL_PCD_EP_DB_Receive+0x15e>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d123      	bne.n	80050a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	b29b      	uxth	r3, r3
 800506c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005074:	83fb      	strh	r3, [r7, #30]
 8005076:	8bfb      	ldrh	r3, [r7, #30]
 8005078:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800507c:	83fb      	strh	r3, [r7, #30]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8bfb      	ldrh	r3, [r7, #30]
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]
=======
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d123      	bne.n	80062da <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	83fb      	strh	r3, [r7, #30]
 80062ae:	8bfb      	ldrh	r3, [r7, #30]
 80062b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062b4:	83fb      	strh	r3, [r7, #30]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	441a      	add	r2, r3
 80062c4:	8bfb      	ldrh	r3, [r7, #30]
 80062c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
<<<<<<< HEAD
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11f      	bne.n	80050ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	83bb      	strh	r3, [r7, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	8bbb      	ldrh	r3, [r7, #28]
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050ec:	8b7b      	ldrh	r3, [r7, #26]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6959      	ldr	r1, [r3, #20]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	895a      	ldrh	r2, [r3, #10]
 80050fe:	8b7b      	ldrh	r3, [r7, #26]
 8005100:	f004 f89b 	bl	800923a <USB_ReadPMA>
=======
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11f      	bne.n	8006324 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	83bb      	strh	r3, [r7, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	8bbb      	ldrh	r3, [r7, #28]
 8006310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006320:	b29b      	uxth	r3, r3
 8006322:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006324:	8b7b      	ldrh	r3, [r7, #26]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6959      	ldr	r1, [r3, #20]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	895a      	ldrh	r2, [r3, #10]
 8006336:	8b7b      	ldrh	r3, [r7, #26]
 8006338:	f004 f89b 	bl	800a472 <USB_ReadPMA>
>>>>>>> 6147058 (refactor)
    }
  }

  return count;
<<<<<<< HEAD
 8005104:	8b7b      	ldrh	r3, [r7, #26]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_PCD_EP_DB_Transmit>:
=======
 800633c:	8b7b      	ldrh	r3, [r7, #26]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_PCD_EP_DB_Transmit>:
>>>>>>> 6147058 (refactor)
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
<<<<<<< HEAD
 800510e:	b580      	push	{r7, lr}
 8005110:	b094      	sub	sp, #80	; 0x50
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	4613      	mov	r3, r2
 800511a:	80fb      	strh	r3, [r7, #6]
=======
 8006346:	b580      	push	{r7, lr}
 8006348:	b094      	sub	sp, #80	; 0x50
 800634a:	af00      	add	r7, sp, #0
 800634c:	60f8      	str	r0, [r7, #12]
 800634e:	60b9      	str	r1, [r7, #8]
 8006350:	4613      	mov	r3, r2
 8006352:	80fb      	strh	r3, [r7, #6]
>>>>>>> 6147058 (refactor)
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8138 	beq.w	8005398 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	4413      	add	r3, r2
 800513c:	3302      	adds	r3, #2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005150:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800515c:	429a      	cmp	r2, r3
 800515e:	d907      	bls.n	8005170 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	619a      	str	r2, [r3, #24]
 800516e:	e002      	b.n	8005176 <HAL_PCD_EP_DB_Transmit+0x68>
=======
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8138 	beq.w	80065d0 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006368:	b29b      	uxth	r3, r3
 800636a:	461a      	mov	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	3302      	adds	r3, #2
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006388:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	699a      	ldr	r2, [r3, #24]
 8006390:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006394:	429a      	cmp	r2, r3
 8006396:	d907      	bls.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	619a      	str	r2, [r3, #24]
 80063a6:	e002      	b.n	80063ae <HAL_PCD_EP_DB_Transmit+0x68>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2200      	movs	r2, #0
 8005174:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d12c      	bne.n	80051d8 <HAL_PCD_EP_DB_Transmit+0xca>
=======
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d12c      	bne.n	8006410 <HAL_PCD_EP_DB_Transmit+0xca>
>>>>>>> 6147058 (refactor)
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f005 fe60 	bl	800ae4a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 823a 	beq.w	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b0:	82fb      	strh	r3, [r7, #22]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8afb      	ldrh	r3, [r7, #22]
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
 80051d6:	e218      	b.n	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
=======
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	4619      	mov	r1, r3
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f005 fe60 	bl	800c082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 823a 	beq.w	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e8:	82fb      	strh	r3, [r7, #22]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8afb      	ldrh	r3, [r7, #22]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
 800640e:	e218      	b.n	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
>>>>>>> 6147058 (refactor)
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
<<<<<<< HEAD
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01f      	beq.n	8005222 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800520e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800521a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]
=======
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01f      	beq.n	800645a <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	441a      	add	r2, r3
 8006444:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006456:	b29b      	uxth	r3, r3
 8006458:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005228:	2b01      	cmp	r3, #1
 800522a:	f040 81ee 	bne.w	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005236:	441a      	add	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005244:	441a      	add	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	6a1a      	ldr	r2, [r3, #32]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	429a      	cmp	r2, r3
 8005254:	d309      	bcc.n	800526a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	621a      	str	r2, [r3, #32]
 8005268:	e015      	b.n	8005296 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d107      	bne.n	8005282 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005272:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005276:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005280:	e009      	b.n	8005296 <HAL_PCD_EP_DB_Transmit+0x188>
=======
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 81ee 	bne.w	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800646e:	441a      	add	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800647c:	441a      	add	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	d309      	bcc.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800649a:	1ad2      	subs	r2, r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	621a      	str	r2, [r3, #32]
 80064a0:	e015      	b.n	80064ce <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d107      	bne.n	80064ba <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80064aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064ae:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064b8:	e009      	b.n	80064ce <HAL_PCD_EP_DB_Transmit+0x188>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          ep->xfer_fill_db = 0U;
<<<<<<< HEAD
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	621a      	str	r2, [r3, #32]
=======
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	621a      	str	r2, [r3, #32]
>>>>>>> 6147058 (refactor)
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	785b      	ldrb	r3, [r3, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d155      	bne.n	800534a <HAL_PCD_EP_DB_Transmit+0x23c>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	4413      	add	r3, r2
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d112      	bne.n	80052f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e047      	b.n	8005382 <HAL_PCD_EP_DB_Transmit+0x274>
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	2b3e      	cmp	r3, #62	; 0x3e
 80052f6:	d811      	bhi.n	800531c <HAL_PCD_EP_DB_Transmit+0x20e>
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_PCD_EP_DB_Transmit+0x200>
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	3301      	adds	r3, #1
 800530c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	b29b      	uxth	r3, r3
 8005312:	029b      	lsls	r3, r3, #10
 8005314:	b29a      	uxth	r2, r3
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e032      	b.n	8005382 <HAL_PCD_EP_DB_Transmit+0x274>
 800531c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <HAL_PCD_EP_DB_Transmit+0x224>
 800532c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532e:	3b01      	subs	r3, #1
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	b29b      	uxth	r3, r3
 8005336:	029b      	lsls	r3, r3, #10
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e01b      	b.n	8005382 <HAL_PCD_EP_DB_Transmit+0x274>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d117      	bne.n	8005382 <HAL_PCD_EP_DB_Transmit+0x274>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005360:	b29b      	uxth	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	4413      	add	r3, r2
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	4413      	add	r3, r2
 8005374:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537c:	b29a      	uxth	r2, r3
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6959      	ldr	r1, [r3, #20]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	891a      	ldrh	r2, [r3, #8]
 800538e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005390:	b29b      	uxth	r3, r3
 8005392:	f003 ff0d 	bl	80091b0 <USB_WritePMA>
 8005396:	e138      	b.n	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
=======
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d155      	bne.n	8006582 <HAL_PCD_EP_DB_Transmit+0x23c>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	461a      	mov	r2, r3
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	61fb      	str	r3, [r7, #28]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	011a      	lsls	r2, r3, #4
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006500:	2b00      	cmp	r3, #0
 8006502:	d112      	bne.n	800652a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800650e:	b29a      	uxth	r2, r3
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	801a      	strh	r2, [r3, #0]
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e047      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x274>
 800652a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800652c:	2b3e      	cmp	r3, #62	; 0x3e
 800652e:	d811      	bhi.n	8006554 <HAL_PCD_EP_DB_Transmit+0x20e>
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	085b      	lsrs	r3, r3, #1
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_PCD_EP_DB_Transmit+0x200>
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	3301      	adds	r3, #1
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	b29b      	uxth	r3, r3
 800654a:	029b      	lsls	r3, r3, #10
 800654c:	b29a      	uxth	r2, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e032      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x274>
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_PCD_EP_DB_Transmit+0x224>
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	3b01      	subs	r3, #1
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29b      	uxth	r3, r3
 8006572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800657a:	b29a      	uxth	r2, r3
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e01b      	b.n	80065ba <HAL_PCD_EP_DB_Transmit+0x274>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d117      	bne.n	80065ba <HAL_PCD_EP_DB_Transmit+0x274>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006598:	b29b      	uxth	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	4413      	add	r3, r2
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	011a      	lsls	r2, r3, #4
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	4413      	add	r3, r2
 80065ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065b0:	623b      	str	r3, [r7, #32]
 80065b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6818      	ldr	r0, [r3, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	6959      	ldr	r1, [r3, #20]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	891a      	ldrh	r2, [r3, #8]
 80065c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f003 ff0d 	bl	800a3e8 <USB_WritePMA>
 80065ce:	e138      	b.n	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
>>>>>>> 6147058 (refactor)
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
<<<<<<< HEAD
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	3306      	adds	r3, #6
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	699a      	ldr	r2, [r3, #24]
 80053c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d307      	bcc.n	80053e0 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053d8:	1ad2      	subs	r2, r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	619a      	str	r2, [r3, #24]
 80053de:	e002      	b.n	80053e6 <HAL_PCD_EP_DB_Transmit+0x2d8>
=======
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d8:	b29b      	uxth	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	3306      	adds	r3, #6
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006604:	429a      	cmp	r2, r3
 8006606:	d307      	bcc.n	8006618 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	619a      	str	r2, [r3, #24]
 8006616:	e002      	b.n	800661e <HAL_PCD_EP_DB_Transmit+0x2d8>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      ep->xfer_len = 0U;
<<<<<<< HEAD
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	619a      	str	r2, [r3, #24]
=======
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2200      	movs	r2, #0
 800661c:	619a      	str	r2, [r3, #24]
>>>>>>> 6147058 (refactor)
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
<<<<<<< HEAD
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d12e      	bne.n	800544c <HAL_PCD_EP_DB_Transmit+0x33e>
=======
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d12e      	bne.n	8006684 <HAL_PCD_EP_DB_Transmit+0x33e>
>>>>>>> 6147058 (refactor)
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
<<<<<<< HEAD
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f005 fd28 	bl	800ae4a <HAL_PCD_DataInStageCallback>
=======
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f005 fd28 	bl	800c082 <HAL_PCD_DataInStageCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005400:	2b00      	cmp	r3, #0
 8005402:	f040 8102 	bne.w	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800543e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]
 800544a:	e0de      	b.n	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
=======
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006638:	2b00      	cmp	r3, #0
 800663a:	f040 8102 	bne.w	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006658:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	441a      	add	r2, r3
 800666a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800666e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800667a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667e:	b29b      	uxth	r3, r3
 8006680:	8013      	strh	r3, [r2, #0]
 8006682:	e0de      	b.n	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
>>>>>>> 6147058 (refactor)
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
<<<<<<< HEAD
 800544c:	88fb      	ldrh	r3, [r7, #6]
 800544e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11f      	bne.n	8005496 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005470:	867b      	strh	r3, [r7, #50]	; 0x32
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800548e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]
=======
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d11f      	bne.n	80066ce <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80066ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
<<<<<<< HEAD
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 80b4 	bne.w	800560a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054aa:	441a      	add	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054b8:	441a      	add	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d309      	bcc.n	80054de <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	1ad2      	subs	r2, r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	621a      	str	r2, [r3, #32]
 80054dc:	e015      	b.n	800550a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 80054e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054ea:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054f4:	e009      	b.n	800550a <HAL_PCD_EP_DB_Transmit+0x3fc>
=======
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	f040 80b4 	bne.w	8006842 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066e2:	441a      	add	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80066f0:	441a      	add	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6a1a      	ldr	r2, [r3, #32]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d309      	bcc.n	8006716 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	6a1a      	ldr	r2, [r3, #32]
 800670c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	621a      	str	r2, [r3, #32]
 8006714:	e015      	b.n	8006742 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800671e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006722:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800672c:	e009      	b.n	8006742 <HAL_PCD_EP_DB_Transmit+0x3fc>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2200      	movs	r2, #0
 8005500:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 6147058 (refactor)
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	643b      	str	r3, [r7, #64]	; 0x40
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d155      	bne.n	80055c4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	63bb      	str	r3, [r7, #56]	; 0x38
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	4413      	add	r3, r2
 800552e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	011a      	lsls	r2, r3, #4
 8005536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005538:	4413      	add	r3, r2
 800553a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
 8005540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005542:	2b00      	cmp	r3, #0
 8005544:	d112      	bne.n	800556c <HAL_PCD_EP_DB_Transmit+0x45e>
 8005546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005550:	b29a      	uxth	r2, r3
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005564:	b29a      	uxth	r2, r3
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	e044      	b.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800556c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556e:	2b3e      	cmp	r3, #62	; 0x3e
 8005570:	d811      	bhi.n	8005596 <HAL_PCD_EP_DB_Transmit+0x488>
 8005572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005584:	3301      	adds	r3, #1
 8005586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	b29b      	uxth	r3, r3
 800558c:	029b      	lsls	r3, r3, #10
 800558e:	b29a      	uxth	r2, r3
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e02f      	b.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d102      	bne.n	80055ac <HAL_PCD_EP_DB_Transmit+0x49e>
 80055a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a8:	3b01      	subs	r3, #1
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e018      	b.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	785b      	ldrb	r3, [r3, #1]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d114      	bne.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	4413      	add	r3, r2
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	011a      	lsls	r2, r3, #4
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6959      	ldr	r1, [r3, #20]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	895a      	ldrh	r2, [r3, #10]
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	b29b      	uxth	r3, r3
 8005606:	f003 fdd3 	bl	80091b0 <USB_WritePMA>
=======
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	643b      	str	r3, [r7, #64]	; 0x40
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d155      	bne.n	80067fc <HAL_PCD_EP_DB_Transmit+0x4b6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	4413      	add	r3, r2
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	011a      	lsls	r2, r3, #4
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	4413      	add	r3, r2
 8006772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800677a:	2b00      	cmp	r3, #0
 800677c:	d112      	bne.n	80067a4 <HAL_PCD_EP_DB_Transmit+0x45e>
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006788:	b29a      	uxth	r2, r3
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679c:	b29a      	uxth	r2, r3
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e044      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a6:	2b3e      	cmp	r3, #62	; 0x3e
 80067a8:	d811      	bhi.n	80067ce <HAL_PCD_EP_DB_Transmit+0x488>
 80067aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x47a>
 80067ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067bc:	3301      	adds	r3, #1
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	e02f      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <HAL_PCD_EP_DB_Transmit+0x49e>
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	3b01      	subs	r3, #1
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	029b      	lsls	r3, r3, #10
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e018      	b.n	800682e <HAL_PCD_EP_DB_Transmit+0x4e8>
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	785b      	ldrb	r3, [r3, #1]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d114      	bne.n	800682e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680c:	b29b      	uxth	r3, r3
 800680e:	461a      	mov	r2, r3
 8006810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006812:	4413      	add	r3, r2
 8006814:	643b      	str	r3, [r7, #64]	; 0x40
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	011a      	lsls	r2, r3, #4
 800681c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681e:	4413      	add	r3, r2
 8006820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006828:	b29a      	uxth	r2, r3
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	6959      	ldr	r1, [r3, #20]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	895a      	ldrh	r2, [r3, #10]
 800683a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683c:	b29b      	uxth	r3, r3
 800683e:	f003 fdd3 	bl	800a3e8 <USB_WritePMA>
>>>>>>> 6147058 (refactor)
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005624:	82bb      	strh	r3, [r7, #20]
 8005626:	8abb      	ldrh	r3, [r7, #20]
 8005628:	f083 0310 	eor.w	r3, r3, #16
 800562c:	82bb      	strh	r3, [r7, #20]
 800562e:	8abb      	ldrh	r3, [r7, #20]
 8005630:	f083 0320 	eor.w	r3, r3, #32
 8005634:	82bb      	strh	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	441a      	add	r2, r3
 8005644:	8abb      	ldrh	r3, [r7, #20]
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3750      	adds	r7, #80	; 0x50
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCDEx_PMAConfig>:
=======
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	b29b      	uxth	r3, r3
 8006854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800685c:	82bb      	strh	r3, [r7, #20]
 800685e:	8abb      	ldrh	r3, [r7, #20]
 8006860:	f083 0310 	eor.w	r3, r3, #16
 8006864:	82bb      	strh	r3, [r7, #20]
 8006866:	8abb      	ldrh	r3, [r7, #20]
 8006868:	f083 0320 	eor.w	r3, r3, #32
 800686c:	82bb      	strh	r3, [r7, #20]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	8abb      	ldrh	r3, [r7, #20]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3750      	adds	r7, #80	; 0x50
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_PCDEx_PMAConfig>:
>>>>>>> 6147058 (refactor)
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
<<<<<<< HEAD
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	817b      	strh	r3, [r7, #10]
 8005672:	4613      	mov	r3, r2
 8005674:	813b      	strh	r3, [r7, #8]
=======
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	607b      	str	r3, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	817b      	strh	r3, [r7, #10]
 80068aa:	4613      	mov	r3, r2
 80068ac:	813b      	strh	r3, [r7, #8]
>>>>>>> 6147058 (refactor)
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
<<<<<<< HEAD
 8005676:	897b      	ldrh	r3, [r7, #10]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4413      	add	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e009      	b.n	80056ae <HAL_PCDEx_PMAConfig+0x4a>
=======
 80068ae:	897b      	ldrh	r3, [r7, #10]
 80068b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ba:	897b      	ldrh	r3, [r7, #10]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e009      	b.n	80068e6 <HAL_PCDEx_PMAConfig+0x4a>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
<<<<<<< HEAD
 800569a:	897a      	ldrh	r2, [r7, #10]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
=======
 80068d2:	897a      	ldrh	r2, [r7, #10]
 80068d4:	4613      	mov	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
>>>>>>> 6147058 (refactor)
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
<<<<<<< HEAD
 80056ae:	893b      	ldrh	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d107      	bne.n	80056c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	80da      	strh	r2, [r3, #6]
 80056c2:	e00b      	b.n	80056dc <HAL_PCDEx_PMAConfig+0x78>
=======
 80068e6:	893b      	ldrh	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d107      	bne.n	80068fc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	80da      	strh	r2, [r3, #6]
 80068fa:	e00b      	b.n	8006914 <HAL_PCDEx_PMAConfig+0x78>
>>>>>>> 6147058 (refactor)
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
<<<<<<< HEAD
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2201      	movs	r2, #1
 80056c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_RCC_OscConfig>:
=======
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2201      	movs	r2, #1
 8006900:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	b29a      	uxth	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	0c1b      	lsrs	r3, r3, #16
 800690e:	b29a      	uxth	r2, r3
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <HAL_RCC_OscConfig>:
>>>>>>> 6147058 (refactor)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
=======
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e26c      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
=======
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e26c      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8087 	beq.w	8005816 <HAL_RCC_OscConfig+0x12e>
=======
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8087 	beq.w	8006a4e <HAL_RCC_OscConfig+0x12e>
>>>>>>> 6147058 (refactor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8005708:	4b92      	ldr	r3, [pc, #584]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 030c 	and.w	r3, r3, #12
 8005710:	2b04      	cmp	r3, #4
 8005712:	d00c      	beq.n	800572e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005714:	4b8f      	ldr	r3, [pc, #572]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 030c 	and.w	r3, r3, #12
 800571c:	2b08      	cmp	r3, #8
 800571e:	d112      	bne.n	8005746 <HAL_RCC_OscConfig+0x5e>
 8005720:	4b8c      	ldr	r3, [pc, #560]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d10b      	bne.n	8005746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800572e:	4b89      	ldr	r3, [pc, #548]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d06c      	beq.n	8005814 <HAL_RCC_OscConfig+0x12c>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d168      	bne.n	8005814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e246      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
=======
 8006940:	4b92      	ldr	r3, [pc, #584]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b04      	cmp	r3, #4
 800694a:	d00c      	beq.n	8006966 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800694c:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b08      	cmp	r3, #8
 8006956:	d112      	bne.n	800697e <HAL_RCC_OscConfig+0x5e>
 8006958:	4b8c      	ldr	r3, [pc, #560]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006964:	d10b      	bne.n	800697e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006966:	4b89      	ldr	r3, [pc, #548]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d06c      	beq.n	8006a4c <HAL_RCC_OscConfig+0x12c>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d168      	bne.n	8006a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e246      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574e:	d106      	bne.n	800575e <HAL_RCC_OscConfig+0x76>
 8005750:	4b80      	ldr	r3, [pc, #512]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a7f      	ldr	r2, [pc, #508]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	e02e      	b.n	80057bc <HAL_RCC_OscConfig+0xd4>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10c      	bne.n	8005780 <HAL_RCC_OscConfig+0x98>
 8005766:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a7a      	ldr	r2, [pc, #488]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800576c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	4b78      	ldr	r3, [pc, #480]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a77      	ldr	r2, [pc, #476]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01d      	b.n	80057bc <HAL_RCC_OscConfig+0xd4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0xbc>
 800578a:	4b72      	ldr	r3, [pc, #456]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a71      	ldr	r2, [pc, #452]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6e      	ldr	r2, [pc, #440]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00b      	b.n	80057bc <HAL_RCC_OscConfig+0xd4>
 80057a4:	4b6b      	ldr	r3, [pc, #428]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a6a      	ldr	r2, [pc, #424]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b68      	ldr	r3, [pc, #416]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a67      	ldr	r2, [pc, #412]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ba:	6013      	str	r3, [r2, #0]
=======
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006986:	d106      	bne.n	8006996 <HAL_RCC_OscConfig+0x76>
 8006988:	4b80      	ldr	r3, [pc, #512]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a7f      	ldr	r2, [pc, #508]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 800698e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006992:	6013      	str	r3, [r2, #0]
 8006994:	e02e      	b.n	80069f4 <HAL_RCC_OscConfig+0xd4>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10c      	bne.n	80069b8 <HAL_RCC_OscConfig+0x98>
 800699e:	4b7b      	ldr	r3, [pc, #492]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a7a      	ldr	r2, [pc, #488]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069a8:	6013      	str	r3, [r2, #0]
 80069aa:	4b78      	ldr	r3, [pc, #480]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a77      	ldr	r2, [pc, #476]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069b4:	6013      	str	r3, [r2, #0]
 80069b6:	e01d      	b.n	80069f4 <HAL_RCC_OscConfig+0xd4>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069c0:	d10c      	bne.n	80069dc <HAL_RCC_OscConfig+0xbc>
 80069c2:	4b72      	ldr	r3, [pc, #456]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a71      	ldr	r2, [pc, #452]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069cc:	6013      	str	r3, [r2, #0]
 80069ce:	4b6f      	ldr	r3, [pc, #444]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a6e      	ldr	r2, [pc, #440]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e00b      	b.n	80069f4 <HAL_RCC_OscConfig+0xd4>
 80069dc:	4b6b      	ldr	r3, [pc, #428]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a6a      	ldr	r2, [pc, #424]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	4b68      	ldr	r3, [pc, #416]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a67      	ldr	r2, [pc, #412]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 80069ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f2:	6013      	str	r3, [r2, #0]
>>>>>>> 6147058 (refactor)


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fd fa32 	bl	8002c2c <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fd fa2e 	bl	8002c2c <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1fa      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xe4>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x12e>
=======
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d013      	beq.n	8006a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fc:	f7fd fa64 	bl	8003ec8 <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a04:	f7fd fa60 	bl	8003ec8 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b64      	cmp	r3, #100	; 0x64
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e1fa      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a16:	4b5d      	ldr	r3, [pc, #372]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d0f0      	beq.n	8006a04 <HAL_RCC_OscConfig+0xe4>
 8006a22:	e014      	b.n	8006a4e <HAL_RCC_OscConfig+0x12e>
>>>>>>> 6147058 (refactor)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 80057ec:	f7fd fa1e 	bl	8002c2c <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fd fa1a 	bl	8002c2c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	; 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1e6      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	4b53      	ldr	r3, [pc, #332]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0x10c>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
=======
 8006a24:	f7fd fa50 	bl	8003ec8 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a2c:	f7fd fa4c 	bl	8003ec8 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b64      	cmp	r3, #100	; 0x64
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e1e6      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a3e:	4b53      	ldr	r3, [pc, #332]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x10c>
 8006a4a:	e000      	b.n	8006a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a4c:	bf00      	nop
>>>>>>> 6147058 (refactor)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_OscConfig+0x202>
=======
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d063      	beq.n	8006b22 <HAL_RCC_OscConfig+0x202>
>>>>>>> 6147058 (refactor)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8005822:	4b4c      	ldr	r3, [pc, #304]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800582e:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11c      	bne.n	8005874 <HAL_RCC_OscConfig+0x18c>
 800583a:	4b46      	ldr	r3, [pc, #280]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005846:	4b43      	ldr	r3, [pc, #268]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_RCC_OscConfig+0x176>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e1ba      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
=======
 8006a5a:	4b4c      	ldr	r3, [pc, #304]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a66:	4b49      	ldr	r3, [pc, #292]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d11c      	bne.n	8006aac <HAL_RCC_OscConfig+0x18c>
 8006a72:	4b46      	ldr	r3, [pc, #280]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d116      	bne.n	8006aac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a7e:	4b43      	ldr	r3, [pc, #268]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_RCC_OscConfig+0x176>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d001      	beq.n	8006a96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e1ba      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 6147058 (refactor)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800585e:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4939      	ldr	r1, [pc, #228]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	e03a      	b.n	80058ea <HAL_RCC_OscConfig+0x202>
=======
 8006a96:	4b3d      	ldr	r3, [pc, #244]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4939      	ldr	r1, [pc, #228]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aaa:	e03a      	b.n	8006b22 <HAL_RCC_OscConfig+0x202>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800587c:	4b36      	ldr	r3, [pc, #216]	; (8005958 <HAL_RCC_OscConfig+0x270>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005882:	f7fd f9d3 	bl	8002c2c <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588a:	f7fd f9cf 	bl	8002c2c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e19b      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589c:	4b2d      	ldr	r3, [pc, #180]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x1a2>
=======
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d020      	beq.n	8006af6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <HAL_RCC_OscConfig+0x270>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aba:	f7fd fa05 	bl	8003ec8 <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ac2:	f7fd fa01 	bl	8003ec8 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e19b      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ad4:	4b2d      	ldr	r3, [pc, #180]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 6147058 (refactor)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80058a8:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4927      	ldr	r1, [pc, #156]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x202>
=======
 8006ae0:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	00db      	lsls	r3, r3, #3
 8006aee:	4927      	ldr	r1, [pc, #156]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	600b      	str	r3, [r1, #0]
 8006af4:	e015      	b.n	8006b22 <HAL_RCC_OscConfig+0x202>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_RCC_OscConfig+0x270>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c4:	f7fd f9b2 	bl	8002c2c <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fd f9ae 	bl	8002c2c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e17a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x1e4>
=======
 8006af6:	4b26      	ldr	r3, [pc, #152]	; (8006b90 <HAL_RCC_OscConfig+0x270>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afc:	f7fd f9e4 	bl	8003ec8 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b04:	f7fd f9e0 	bl	8003ec8 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e17a      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 6147058 (refactor)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03a      	beq.n	800596c <HAL_RCC_OscConfig+0x284>
=======
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d03a      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x284>
>>>>>>> 6147058 (refactor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d019      	beq.n	8005932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fe:	4b17      	ldr	r3, [pc, #92]	; (800595c <HAL_RCC_OscConfig+0x274>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005904:	f7fd f992 	bl	8002c2c <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800590c:	f7fd f98e 	bl	8002c2c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e15a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591e:	4b0d      	ldr	r3, [pc, #52]	; (8005954 <HAL_RCC_OscConfig+0x26c>)
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0x224>
=======
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d019      	beq.n	8006b6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b36:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <HAL_RCC_OscConfig+0x274>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b3c:	f7fd f9c4 	bl	8003ec8 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b44:	f7fd f9c0 	bl	8003ec8 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e15a      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <HAL_RCC_OscConfig+0x26c>)
 8006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x224>
>>>>>>> 6147058 (refactor)
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 800592a:	2001      	movs	r0, #1
 800592c:	f000 fac4 	bl	8005eb8 <RCC_Delay>
 8005930:	e01c      	b.n	800596c <HAL_RCC_OscConfig+0x284>
=======
 8006b62:	2001      	movs	r0, #1
 8006b64:	f000 fac4 	bl	80070f0 <RCC_Delay>
 8006b68:	e01c      	b.n	8006ba4 <HAL_RCC_OscConfig+0x284>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8005932:	4b0a      	ldr	r3, [pc, #40]	; (800595c <HAL_RCC_OscConfig+0x274>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005938:	f7fd f978 	bl	8002c2c <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593e:	e00f      	b.n	8005960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7fd f974 	bl	8002c2c <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d908      	bls.n	8005960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e140      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
 8005952:	bf00      	nop
 8005954:	40021000 	.word	0x40021000
 8005958:	42420000 	.word	0x42420000
 800595c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005960:	4b9e      	ldr	r3, [pc, #632]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e9      	bne.n	8005940 <HAL_RCC_OscConfig+0x258>
=======
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <HAL_RCC_OscConfig+0x274>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b70:	f7fd f9aa 	bl	8003ec8 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b76:	e00f      	b.n	8006b98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b78:	f7fd f9a6 	bl	8003ec8 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d908      	bls.n	8006b98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e140      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
 8006b8a:	bf00      	nop
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	42420000 	.word	0x42420000
 8006b94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b98:	4b9e      	ldr	r3, [pc, #632]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e9      	bne.n	8006b78 <HAL_RCC_OscConfig+0x258>
>>>>>>> 6147058 (refactor)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80a6 	beq.w	8005ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]
=======
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80a6 	beq.w	8006cfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6147058 (refactor)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800597e:	4b97      	ldr	r3, [pc, #604]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598a:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	4a93      	ldr	r2, [pc, #588]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	61d3      	str	r3, [r2, #28]
 8005996:	4b91      	ldr	r3, [pc, #580]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a6:	4b8e      	ldr	r3, [pc, #568]	; (8005be0 <HAL_RCC_OscConfig+0x4f8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d118      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b2:	4b8b      	ldr	r3, [pc, #556]	; (8005be0 <HAL_RCC_OscConfig+0x4f8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a8a      	ldr	r2, [pc, #552]	; (8005be0 <HAL_RCC_OscConfig+0x4f8>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fd f935 	bl	8002c2c <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fd f931 	bl	8002c2c <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b64      	cmp	r3, #100	; 0x64
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0fd      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	4b81      	ldr	r3, [pc, #516]	; (8005be0 <HAL_RCC_OscConfig+0x4f8>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x2de>
=======
 8006bb6:	4b97      	ldr	r3, [pc, #604]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10d      	bne.n	8006bde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	4b94      	ldr	r3, [pc, #592]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	4a93      	ldr	r2, [pc, #588]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	61d3      	str	r3, [r2, #28]
 8006bce:	4b91      	ldr	r3, [pc, #580]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd6:	60bb      	str	r3, [r7, #8]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bde:	4b8e      	ldr	r3, [pc, #568]	; (8006e18 <HAL_RCC_OscConfig+0x4f8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d118      	bne.n	8006c1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bea:	4b8b      	ldr	r3, [pc, #556]	; (8006e18 <HAL_RCC_OscConfig+0x4f8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a8a      	ldr	r2, [pc, #552]	; (8006e18 <HAL_RCC_OscConfig+0x4f8>)
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bf6:	f7fd f967 	bl	8003ec8 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bfe:	f7fd f963 	bl	8003ec8 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b64      	cmp	r3, #100	; 0x64
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0fd      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c10:	4b81      	ldr	r3, [pc, #516]	; (8006e18 <HAL_RCC_OscConfig+0x4f8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x2de>
>>>>>>> 6147058 (refactor)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <HAL_RCC_OscConfig+0x312>
 80059ec:	4b7b      	ldr	r3, [pc, #492]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4a7a      	ldr	r2, [pc, #488]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6213      	str	r3, [r2, #32]
 80059f8:	e02d      	b.n	8005a56 <HAL_RCC_OscConfig+0x36e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x334>
 8005a02:	4b76      	ldr	r3, [pc, #472]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	4a75      	ldr	r2, [pc, #468]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	6213      	str	r3, [r2, #32]
 8005a0e:	4b73      	ldr	r3, [pc, #460]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	4a72      	ldr	r2, [pc, #456]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a14:	f023 0304 	bic.w	r3, r3, #4
 8005a18:	6213      	str	r3, [r2, #32]
 8005a1a:	e01c      	b.n	8005a56 <HAL_RCC_OscConfig+0x36e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b05      	cmp	r3, #5
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCC_OscConfig+0x356>
 8005a24:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4a6c      	ldr	r2, [pc, #432]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6213      	str	r3, [r2, #32]
 8005a30:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	4a69      	ldr	r2, [pc, #420]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6213      	str	r3, [r2, #32]
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCC_OscConfig+0x36e>
 8005a3e:	4b67      	ldr	r3, [pc, #412]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a66      	ldr	r2, [pc, #408]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	4b64      	ldr	r3, [pc, #400]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	4a63      	ldr	r2, [pc, #396]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d015      	beq.n	8005a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5e:	f7fd f8e5 	bl	8002c2c <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a66:	f7fd f8e1 	bl	8002c2c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e0ab      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7c:	4b57      	ldr	r3, [pc, #348]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0ee      	beq.n	8005a66 <HAL_RCC_OscConfig+0x37e>
 8005a88:	e014      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3cc>
=======
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d106      	bne.n	8006c32 <HAL_RCC_OscConfig+0x312>
 8006c24:	4b7b      	ldr	r3, [pc, #492]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	4a7a      	ldr	r2, [pc, #488]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c2a:	f043 0301 	orr.w	r3, r3, #1
 8006c2e:	6213      	str	r3, [r2, #32]
 8006c30:	e02d      	b.n	8006c8e <HAL_RCC_OscConfig+0x36e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0x334>
 8006c3a:	4b76      	ldr	r3, [pc, #472]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	4a75      	ldr	r2, [pc, #468]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c40:	f023 0301 	bic.w	r3, r3, #1
 8006c44:	6213      	str	r3, [r2, #32]
 8006c46:	4b73      	ldr	r3, [pc, #460]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	4a72      	ldr	r2, [pc, #456]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c4c:	f023 0304 	bic.w	r3, r3, #4
 8006c50:	6213      	str	r3, [r2, #32]
 8006c52:	e01c      	b.n	8006c8e <HAL_RCC_OscConfig+0x36e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	d10c      	bne.n	8006c76 <HAL_RCC_OscConfig+0x356>
 8006c5c:	4b6d      	ldr	r3, [pc, #436]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	4a6c      	ldr	r2, [pc, #432]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c62:	f043 0304 	orr.w	r3, r3, #4
 8006c66:	6213      	str	r3, [r2, #32]
 8006c68:	4b6a      	ldr	r3, [pc, #424]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	4a69      	ldr	r2, [pc, #420]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	6213      	str	r3, [r2, #32]
 8006c74:	e00b      	b.n	8006c8e <HAL_RCC_OscConfig+0x36e>
 8006c76:	4b67      	ldr	r3, [pc, #412]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	4a66      	ldr	r2, [pc, #408]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	6213      	str	r3, [r2, #32]
 8006c82:	4b64      	ldr	r3, [pc, #400]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	4a63      	ldr	r2, [pc, #396]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006c88:	f023 0304 	bic.w	r3, r3, #4
 8006c8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d015      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c96:	f7fd f917 	bl	8003ec8 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fd f913 	bl	8003ec8 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e0ab      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb4:	4b57      	ldr	r3, [pc, #348]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ee      	beq.n	8006c9e <HAL_RCC_OscConfig+0x37e>
 8006cc0:	e014      	b.n	8006cec <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005a8a:	f7fd f8cf 	bl	8002c2c <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a92:	f7fd f8cb 	bl	8002c2c <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e095      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa8:	4b4c      	ldr	r3, [pc, #304]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1ee      	bne.n	8005a92 <HAL_RCC_OscConfig+0x3aa>
=======
 8006cc2:	f7fd f901 	bl	8003ec8 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cc8:	e00a      	b.n	8006ce0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cca:	f7fd f8fd 	bl	8003ec8 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d901      	bls.n	8006ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e095      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce0:	4b4c      	ldr	r3, [pc, #304]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1ee      	bne.n	8006cca <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 6147058 (refactor)
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aba:	4b48      	ldr	r3, [pc, #288]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	4a47      	ldr	r2, [pc, #284]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac4:	61d3      	str	r3, [r2, #28]
=======
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d105      	bne.n	8006cfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cf2:	4b48      	ldr	r3, [pc, #288]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	4a47      	ldr	r2, [pc, #284]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	61d3      	str	r3, [r2, #28]
>>>>>>> 6147058 (refactor)

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8081 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ad0:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d061      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d146      	bne.n	8005b72 <HAL_RCC_OscConfig+0x48a>
=======
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8081 	beq.w	8006e0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d08:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f003 030c 	and.w	r3, r3, #12
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d061      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d146      	bne.n	8006daa <HAL_RCC_OscConfig+0x48a>
>>>>>>> 6147058 (refactor)
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005ae4:	4b3f      	ldr	r3, [pc, #252]	; (8005be4 <HAL_RCC_OscConfig+0x4fc>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aea:	f7fd f89f 	bl	8002c2c <HAL_GetTick>
 8005aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af0:	e008      	b.n	8005b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af2:	f7fd f89b 	bl	8002c2c <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e067      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b04:	4b35      	ldr	r3, [pc, #212]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f0      	bne.n	8005af2 <HAL_RCC_OscConfig+0x40a>
=======
 8006d1c:	4b3f      	ldr	r3, [pc, #252]	; (8006e1c <HAL_RCC_OscConfig+0x4fc>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d22:	f7fd f8d1 	bl	8003ec8 <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d2a:	f7fd f8cd 	bl	8003ec8 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e067      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d3c:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f0      	bne.n	8006d2a <HAL_RCC_OscConfig+0x40a>
>>>>>>> 6147058 (refactor)
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b18:	d108      	bne.n	8005b2c <HAL_RCC_OscConfig+0x444>
=======
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d108      	bne.n	8006d64 <HAL_RCC_OscConfig+0x444>
>>>>>>> 6147058 (refactor)
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8005b1a:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	492d      	ldr	r1, [pc, #180]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	604b      	str	r3, [r1, #4]
=======
 8006d52:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	492d      	ldr	r1, [pc, #180]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a19      	ldr	r1, [r3, #32]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	4927      	ldr	r1, [pc, #156]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b44:	4b27      	ldr	r3, [pc, #156]	; (8005be4 <HAL_RCC_OscConfig+0x4fc>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4a:	f7fd f86f 	bl	8002c2c <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b52:	f7fd f86b 	bl	8002c2c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e037      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b64:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0f0      	beq.n	8005b52 <HAL_RCC_OscConfig+0x46a>
 8005b70:	e02f      	b.n	8005bd2 <HAL_RCC_OscConfig+0x4ea>
=======
 8006d64:	4b2b      	ldr	r3, [pc, #172]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a19      	ldr	r1, [r3, #32]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d74:	430b      	orrs	r3, r1
 8006d76:	4927      	ldr	r1, [pc, #156]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d7c:	4b27      	ldr	r3, [pc, #156]	; (8006e1c <HAL_RCC_OscConfig+0x4fc>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d82:	f7fd f8a1 	bl	8003ec8 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d8a:	f7fd f89d 	bl	8003ec8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e037      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006d9c:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x46a>
 8006da8:	e02f      	b.n	8006e0a <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 6147058 (refactor)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005b72:	4b1c      	ldr	r3, [pc, #112]	; (8005be4 <HAL_RCC_OscConfig+0x4fc>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b78:	f7fd f858 	bl	8002c2c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fd f854 	bl	8002c2c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e020      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x498>
 8005b9e:	e018      	b.n	8005bd2 <HAL_RCC_OscConfig+0x4ea>
=======
 8006daa:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <HAL_RCC_OscConfig+0x4fc>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fd f88a 	bl	8003ec8 <HAL_GetTick>
 8006db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006db6:	e008      	b.n	8006dca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db8:	f7fd f886 	bl	8003ec8 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e020      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dca:	4b12      	ldr	r3, [pc, #72]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <HAL_RCC_OscConfig+0x498>
 8006dd6:	e018      	b.n	8006e0a <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e013      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
=======
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e013      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_OscConfig+0x4f4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d106      	bne.n	8005bce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d001      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCC_OscConfig+0x4ec>
=======
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <HAL_RCC_OscConfig+0x4f4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d001      	beq.n	8006e0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 6147058 (refactor)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40007000 	.word	0x40007000
 8005be4:	42420060 	.word	0x42420060

08005be8 <HAL_RCC_ClockConfig>:
=======
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40021000 	.word	0x40021000
 8006e18:	40007000 	.word	0x40007000
 8006e1c:	42420060 	.word	0x42420060

08006e20 <HAL_RCC_ClockConfig>:
>>>>>>> 6147058 (refactor)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
=======
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
>>>>>>> 6147058 (refactor)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d0      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
=======
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0d0      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 6147058 (refactor)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005bfc:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d910      	bls.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	4b67      	ldr	r3, [pc, #412]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	4965      	ldr	r1, [pc, #404]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
=======
 8006e34:	4b6a      	ldr	r3, [pc, #424]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d910      	bls.n	8006e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e42:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f023 0207 	bic.w	r2, r3, #7
 8006e4a:	4965      	ldr	r1, [pc, #404]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]
>>>>>>> 6147058 (refactor)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005c1a:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d001      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b8      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
=======
 8006e52:	4b63      	ldr	r3, [pc, #396]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0b8      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 6147058 (refactor)
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d020      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x92>
=======
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d020      	beq.n	8006eb2 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 6147058 (refactor)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c44:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a58      	ldr	r2, [pc, #352]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c5c:	4b53      	ldr	r3, [pc, #332]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a52      	ldr	r2, [pc, #328]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c66:	6053      	str	r3, [r2, #4]
=======
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e7c:	4b59      	ldr	r3, [pc, #356]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4a58      	ldr	r2, [pc, #352]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006e86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e94:	4b53      	ldr	r3, [pc, #332]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a52      	ldr	r2, [pc, #328]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006e9e:	6053      	str	r3, [r2, #4]
>>>>>>> 6147058 (refactor)
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8005c68:	4b50      	ldr	r3, [pc, #320]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	494d      	ldr	r1, [pc, #308]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	604b      	str	r3, [r1, #4]
=======
 8006ea0:	4b50      	ldr	r3, [pc, #320]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	494d      	ldr	r1, [pc, #308]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d040      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x120>
=======
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d040      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 6147058 (refactor)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d107      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b47      	ldr	r3, [pc, #284]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d115      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07f      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
=======
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d107      	bne.n	8006ed6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec6:	4b47      	ldr	r3, [pc, #284]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d115      	bne.n	8006efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e07f      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 6147058 (refactor)
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d107      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca6:	4b41      	ldr	r3, [pc, #260]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e073      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
=======
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d107      	bne.n	8006eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ede:	4b41      	ldr	r3, [pc, #260]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d109      	bne.n	8006efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e073      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 6147058 (refactor)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005cb6:	4b3d      	ldr	r3, [pc, #244]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e06b      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc6:	4b39      	ldr	r3, [pc, #228]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f023 0203 	bic.w	r2, r3, #3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4936      	ldr	r1, [pc, #216]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cd8:	f7fc ffa8 	bl	8002c2c <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce0:	f7fc ffa4 	bl	8002c2c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e053      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf6:	4b2d      	ldr	r3, [pc, #180]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f003 020c 	and.w	r2, r3, #12
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d1eb      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0xf8>
=======
 8006eee:	4b3d      	ldr	r3, [pc, #244]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e06b      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006efe:	4b39      	ldr	r3, [pc, #228]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f023 0203 	bic.w	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4936      	ldr	r1, [pc, #216]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f10:	f7fc ffda 	bl	8003ec8 <HAL_GetTick>
 8006f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f16:	e00a      	b.n	8006f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f18:	f7fc ffd6 	bl	8003ec8 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e053      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f2e:	4b2d      	ldr	r3, [pc, #180]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f003 020c 	and.w	r2, r3, #12
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d1eb      	bne.n	8006f18 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 6147058 (refactor)
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005d08:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d210      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 0207 	bic.w	r2, r3, #7
 8005d1e:	4922      	ldr	r1, [pc, #136]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]
=======
 8006f40:	4b27      	ldr	r3, [pc, #156]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d210      	bcs.n	8006f70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4e:	4b24      	ldr	r3, [pc, #144]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 0207 	bic.w	r2, r3, #7
 8006f56:	4922      	ldr	r1, [pc, #136]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]
>>>>>>> 6147058 (refactor)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <HAL_RCC_ClockConfig+0x1c0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_ClockConfig+0x1b6>
=======
 8006f5e:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e032      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 6147058 (refactor)
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4916      	ldr	r1, [pc, #88]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
=======
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f7c:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4916      	ldr	r1, [pc, #88]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	490e      	ldr	r1, [pc, #56]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	604b      	str	r3, [r1, #4]
=======
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d009      	beq.n	8006fae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f9a:	4b12      	ldr	r3, [pc, #72]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	490e      	ldr	r1, [pc, #56]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8005d76:	f000 f821 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	091b      	lsrs	r3, r3, #4
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	490a      	ldr	r1, [pc, #40]	; (8005db0 <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	5ccb      	ldrb	r3, [r1, r3]
 8005d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <HAL_RCC_ClockConfig+0x1cc>)
 8005d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_ClockConfig+0x1d0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fc ff06 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40022000 	.word	0x40022000
 8005dac:	40021000 	.word	0x40021000
 8005db0:	0800c898 	.word	0x0800c898
 8005db4:	20000010 	.word	0x20000010
 8005db8:	20000014 	.word	0x20000014

08005dbc <HAL_RCC_GetSysClockFreq>:
=======
 8006fae:	f000 f821 	bl	8006ff4 <HAL_RCC_GetSysClockFreq>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	091b      	lsrs	r3, r3, #4
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	490a      	ldr	r1, [pc, #40]	; (8006fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc0:	5ccb      	ldrb	r3, [r1, r3]
 8006fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <HAL_RCC_ClockConfig+0x1cc>)
 8006fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006fca:	4b09      	ldr	r3, [pc, #36]	; (8006ff0 <HAL_RCC_ClockConfig+0x1d0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fc ff38 	bl	8003e44 <HAL_InitTick>

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40022000 	.word	0x40022000
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	0800dbfc 	.word	0x0800dbfc
 8006fec:	20000014 	.word	0x20000014
 8006ff0:	20000018 	.word	0x20000018

08006ff4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 6147058 (refactor)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005dbc:	b490      	push	{r4, r7}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
=======
 8006ff4:	b490      	push	{r4, r7}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005dc4:	1d3c      	adds	r4, r7, #4
 8005dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8006ffa:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ffc:	1d3c      	adds	r4, r7, #4
 8006ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 6147058 (refactor)
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8005dcc:	f240 2301 	movw	r3, #513	; 0x201
 8005dd0:	803b      	strh	r3, [r7, #0]
=======
 8007004:	f240 2301 	movw	r3, #513	; 0x201
 8007008:	803b      	strh	r3, [r7, #0]
>>>>>>> 6147058 (refactor)
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	623b      	str	r3, [r7, #32]
=======
 800700a:	2300      	movs	r3, #0
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	2300      	movs	r3, #0
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	623b      	str	r3, [r7, #32]
>>>>>>> 6147058 (refactor)
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8005de6:	4b22      	ldr	r3, [pc, #136]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x40>
 8005df6:	2b08      	cmp	r3, #8
 8005df8:	d003      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x46>
 8005dfa:	e02d      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 800701e:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	f003 030c 	and.w	r3, r3, #12
 800702a:	2b04      	cmp	r3, #4
 800702c:	d002      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0x40>
 800702e:	2b08      	cmp	r3, #8
 8007030:	d003      	beq.n	800703a <HAL_RCC_GetSysClockFreq+0x46>
 8007032:	e02d      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> 6147058 (refactor)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dfe:	623b      	str	r3, [r7, #32]
      break;
 8005e00:	e02d      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8007034:	4b1d      	ldr	r3, [pc, #116]	; (80070ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007036:	623b      	str	r3, [r7, #32]
      break;
 8007038:	e02d      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 6147058 (refactor)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	0c9b      	lsrs	r3, r3, #18
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e0e:	4413      	add	r3, r2
 8005e10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	0c9b      	lsrs	r3, r3, #18
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007046:	4413      	add	r3, r2
 8007048:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800704c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d013      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> 6147058 (refactor)
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	0c5b      	lsrs	r3, r3, #17
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e2e:	4413      	add	r3, r2
 8005e30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005e34:	61bb      	str	r3, [r7, #24]
=======
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	0c5b      	lsrs	r3, r3, #17
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007066:	4413      	add	r3, r2
 8007068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800706c:	61bb      	str	r3, [r7, #24]
>>>>>>> 6147058 (refactor)
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	4a0e      	ldr	r2, [pc, #56]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3a:	fb02 f203 	mul.w	r2, r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e004      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0x96>
=======
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007072:	fb02 f203 	mul.w	r2, r2, r3
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
 800707e:	e004      	b.n	800708a <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> 6147058 (refactor)
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	4a0b      	ldr	r2, [pc, #44]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	623b      	str	r3, [r7, #32]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	4a0b      	ldr	r2, [pc, #44]	; (80070b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007084:	fb02 f303 	mul.w	r3, r2, r3
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	623b      	str	r3, [r7, #32]
      break;
 800708e:	e002      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 6147058 (refactor)
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e5a:	623b      	str	r3, [r7, #32]
      break;
 8005e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc90      	pop	{r4, r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	0800c830 	.word	0x0800c830
 8005e70:	40021000 	.word	0x40021000
 8005e74:	007a1200 	.word	0x007a1200
 8005e78:	003d0900 	.word	0x003d0900

08005e7c <HAL_RCC_GetHCLKFreq>:
=======
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007092:	623b      	str	r3, [r7, #32]
      break;
 8007094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007096:	6a3b      	ldr	r3, [r7, #32]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3728      	adds	r7, #40	; 0x28
 800709c:	46bd      	mov	sp, r7
 800709e:	bc90      	pop	{r4, r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	0800db94 	.word	0x0800db94
 80070a8:	40021000 	.word	0x40021000
 80070ac:	007a1200 	.word	0x007a1200
 80070b0:	003d0900 	.word	0x003d0900

080070b4 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 6147058 (refactor)
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b02      	ldr	r3, [pc, #8]	; (8005e8c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr
 8005e8c:	20000010 	.word	0x20000010

08005e90 <HAL_RCC_GetPCLK2Freq>:
=======
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b8:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80070ba:	681b      	ldr	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	20000014 	.word	0x20000014

080070c8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 6147058 (refactor)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e94:	f7ff fff2 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	0adb      	lsrs	r3, r3, #11
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	4903      	ldr	r1, [pc, #12]	; (8005eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	0800c8a8 	.word	0x0800c8a8

08005eb8 <RCC_Delay>:
=======
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070cc:	f7ff fff2 	bl	80070b4 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	0adb      	lsrs	r3, r3, #11
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40021000 	.word	0x40021000
 80070ec:	0800dc0c 	.word	0x0800dc0c

080070f0 <RCC_Delay>:
>>>>>>> 6147058 (refactor)
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <RCC_Delay+0x34>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <RCC_Delay+0x38>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0a5b      	lsrs	r3, r3, #9
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ed4:	bf00      	nop
  }
  while (Delay --);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1e5a      	subs	r2, r3, #1
 8005eda:	60fa      	str	r2, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f9      	bne.n	8005ed4 <RCC_Delay+0x1c>
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bc80      	pop	{r7}
 8005eea:	4770      	bx	lr
 8005eec:	20000010 	.word	0x20000010
 8005ef0:	10624dd3 	.word	0x10624dd3

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
=======
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <RCC_Delay+0x34>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <RCC_Delay+0x38>)
 80070fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007102:	0a5b      	lsrs	r3, r3, #9
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800710c:	bf00      	nop
  }
  while (Delay --);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1e5a      	subs	r2, r3, #1
 8007112:	60fa      	str	r2, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f9      	bne.n	800710c <RCC_Delay+0x1c>
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	20000014 	.word	0x20000014
 8007128:	10624dd3 	.word	0x10624dd3

0800712c <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 6147058 (refactor)
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
=======
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d07d      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d07d      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> 6147058 (refactor)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 8005f10:	2300      	movs	r3, #0
 8005f12:	75fb      	strb	r3, [r7, #23]
=======
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]
>>>>>>> 6147058 (refactor)

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8005f14:	4b4f      	ldr	r3, [pc, #316]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4b4c      	ldr	r3, [pc, #304]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4a4b      	ldr	r2, [pc, #300]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	61d3      	str	r3, [r2, #28]
 8005f2c:	4b49      	ldr	r3, [pc, #292]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3c:	4b46      	ldr	r3, [pc, #280]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d118      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f48:	4b43      	ldr	r3, [pc, #268]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a42      	ldr	r2, [pc, #264]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f54:	f7fc fe6a 	bl	8002c2c <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5c:	f7fc fe66 	bl	8002c2c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e06d      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6e:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 800714c:	4b4f      	ldr	r3, [pc, #316]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10d      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007158:	4b4c      	ldr	r3, [pc, #304]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	4a4b      	ldr	r2, [pc, #300]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800715e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007162:	61d3      	str	r3, [r2, #28]
 8007164:	4b49      	ldr	r3, [pc, #292]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007174:	4b46      	ldr	r3, [pc, #280]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d118      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007180:	4b43      	ldr	r3, [pc, #268]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a42      	ldr	r2, [pc, #264]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800718c:	f7fc fe9c 	bl	8003ec8 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007192:	e008      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007194:	f7fc fe98 	bl	8003ec8 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	; 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e06d      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a6:	4b3a      	ldr	r3, [pc, #232]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> 6147058 (refactor)
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 8005f7a:	4b36      	ldr	r3, [pc, #216]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d02e      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d027      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f98:	4b2e      	ldr	r3, [pc, #184]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fa2:	4b2e      	ldr	r3, [pc, #184]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fa8:	4b2c      	ldr	r3, [pc, #176]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fae:	4a29      	ldr	r2, [pc, #164]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d014      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbe:	f7fc fe35 	bl	8002c2c <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc6:	f7fc fe31 	bl	8002c2c <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e036      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ee      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02e      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d027      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071d0:	4b2e      	ldr	r3, [pc, #184]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071da:	4b2e      	ldr	r3, [pc, #184]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071e0:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80071e6:	4a29      	ldr	r2, [pc, #164]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d014      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f6:	f7fc fe67 	bl	8003ec8 <HAL_GetTick>
 80071fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071fc:	e00a      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071fe:	f7fc fe63 	bl	8003ec8 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	f241 3288 	movw	r2, #5000	; 0x1388
 800720c:	4293      	cmp	r3, r2
 800720e:	d901      	bls.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e036      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007214:	4b1d      	ldr	r3, [pc, #116]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0ee      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> 6147058 (refactor)
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	4917      	ldr	r1, [pc, #92]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006000:	4b14      	ldr	r3, [pc, #80]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	4a13      	ldr	r2, [pc, #76]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	61d3      	str	r3, [r2, #28]
=======
 8007220:	4b1a      	ldr	r3, [pc, #104]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	4917      	ldr	r1, [pc, #92]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722e:	4313      	orrs	r3, r2
 8007230:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d105      	bne.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007238:	4b14      	ldr	r3, [pc, #80]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	4a13      	ldr	r2, [pc, #76]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007242:	61d3      	str	r3, [r2, #28]
>>>>>>> 6147058 (refactor)
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d008      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 6147058 (refactor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8006018:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	490b      	ldr	r1, [pc, #44]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
=======
 8007250:	4b0e      	ldr	r3, [pc, #56]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	490b      	ldr	r1, [pc, #44]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x154>
=======
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x154>
>>>>>>> 6147058 (refactor)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 8006036:	4b07      	ldr	r3, [pc, #28]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	4904      	ldr	r1, [pc, #16]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]
=======
 800726e:	4b07      	ldr	r3, [pc, #28]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	4904      	ldr	r1, [pc, #16]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800727c:	4313      	orrs	r3, r2
 800727e:	604b      	str	r3, [r1, #4]
>>>>>>> 6147058 (refactor)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000
 8006058:	40007000 	.word	0x40007000
 800605c:	42420440 	.word	0x42420440

08006060 <HAL_RCCEx_GetPeriphCLKFreq>:
=======
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3718      	adds	r7, #24
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
 8007290:	40007000 	.word	0x40007000
 8007294:	42420440 	.word	0x42420440

08007298 <HAL_RCCEx_GetPeriphCLKFreq>:
>>>>>>> 6147058 (refactor)
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
<<<<<<< HEAD
 8006060:	b590      	push	{r4, r7, lr}
 8006062:	b08d      	sub	sp, #52	; 0x34
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
=======
 8007298:	b590      	push	{r4, r7, lr}
 800729a:	b08d      	sub	sp, #52	; 0x34
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8006068:	4b5a      	ldr	r3, [pc, #360]	; (80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800606a:	f107 040c 	add.w	r4, r7, #12
 800606e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006074:	f240 2301 	movw	r3, #513	; 0x201
 8006078:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	2300      	movs	r3, #0
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006082:	2300      	movs	r3, #0
 8006084:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80072a0:	4b5a      	ldr	r3, [pc, #360]	; (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80072a2:	f107 040c 	add.w	r4, r7, #12
 80072a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80072ac:	f240 2301 	movw	r3, #513	; 0x201
 80072b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	627b      	str	r3, [r7, #36]	; 0x24
 80072b6:	2300      	movs	r3, #0
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	2300      	movs	r3, #0
 80072bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	2300      	movs	r3, #0
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
<<<<<<< HEAD
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b10      	cmp	r3, #16
 8006092:	d00a      	beq.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b10      	cmp	r3, #16
 8006098:	f200 8091 	bhi.w	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d04c      	beq.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d07c      	beq.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
=======
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d00a      	beq.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b10      	cmp	r3, #16
 80072d0:	f200 8091 	bhi.w	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d04c      	beq.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d07c      	beq.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
>>>>>>> 6147058 (refactor)
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
<<<<<<< HEAD
 80060a8:	e089      	b.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80060aa:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80060b0:	4b49      	ldr	r3, [pc, #292]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8082 	beq.w	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	0c9b      	lsrs	r3, r3, #18
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060ca:	4413      	add	r3, r2
 80060cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80060d0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d018      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80060dc:	4b3e      	ldr	r3, [pc, #248]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	0c5b      	lsrs	r3, r3, #17
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80060ea:	4413      	add	r3, r2
 80060ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00d      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80060fc:	4a37      	ldr	r2, [pc, #220]	; (80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	fbb2 f2f3 	udiv	r2, r2, r3
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800610c:	e004      	b.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	4a33      	ldr	r2, [pc, #204]	; (80061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006118:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006124:	d102      	bne.n	800612c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800612a:	e04a      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	4a2c      	ldr	r2, [pc, #176]	; (80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800613a:	e042      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800613c:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614c:	d108      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
 800615e:	e01f      	b.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d109      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800616c:	4b1a      	ldr	r3, [pc, #104]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006178:	f649 4340 	movw	r3, #40000	; 0x9c40
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
 800617e:	e00f      	b.n	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618a:	d11c      	bne.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d016      	beq.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006198:	f24f 4324 	movw	r3, #62500	; 0xf424
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800619e:	e012      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80061a0:	e011      	b.n	80061c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80061a2:	f7ff fe75 	bl	8005e90 <HAL_RCC_GetPCLK2Freq>
 80061a6:	4602      	mov	r2, r0
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	0b9b      	lsrs	r3, r3, #14
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	3301      	adds	r3, #1
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80061c6:	bf00      	nop
    }
  }
  return (frequency);
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3734      	adds	r7, #52	; 0x34
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd90      	pop	{r4, r7, pc}
 80061d2:	bf00      	nop
 80061d4:	0800c840 	.word	0x0800c840
 80061d8:	40021000 	.word	0x40021000
 80061dc:	007a1200 	.word	0x007a1200
 80061e0:	003d0900 	.word	0x003d0900
 80061e4:	aaaaaaab 	.word	0xaaaaaaab

080061e8 <HAL_SPI_Init>:
=======
 80072e0:	e089      	b.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80072e2:	4b4b      	ldr	r3, [pc, #300]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80072e8:	4b49      	ldr	r3, [pc, #292]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8082 	beq.w	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	0c9b      	lsrs	r3, r3, #18
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007302:	4413      	add	r3, r2
 8007304:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007308:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d018      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007314:	4b3e      	ldr	r3, [pc, #248]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	0c5b      	lsrs	r3, r3, #17
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007322:	4413      	add	r3, r2
 8007324:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007334:	4a37      	ldr	r2, [pc, #220]	; (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	fbb2 f2f3 	udiv	r2, r2, r3
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007344:	e004      	b.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	4a33      	ldr	r2, [pc, #204]	; (8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007350:	4b2f      	ldr	r3, [pc, #188]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800735c:	d102      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007362:	e04a      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4a2c      	ldr	r2, [pc, #176]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800736a:	fba2 2303 	umull	r2, r3, r2, r3
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007372:	e042      	b.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8007374:	4b26      	ldr	r3, [pc, #152]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007384:	d108      	bne.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8007390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
 8007396:	e01f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a2:	d109      	bne.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80073b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b6:	e00f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073c2:	d11c      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80073c4:	4b12      	ldr	r3, [pc, #72]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d016      	beq.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80073d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80073d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073d6:	e012      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80073d8:	e011      	b.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80073da:	f7ff fe75 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 80073de:	4602      	mov	r2, r0
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	0b9b      	lsrs	r3, r3, #14
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	3301      	adds	r3, #1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073f4:	e004      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073f6:	bf00      	nop
 80073f8:	e002      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073fa:	bf00      	nop
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80073fe:	bf00      	nop
    }
  }
  return (frequency);
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007402:	4618      	mov	r0, r3
 8007404:	3734      	adds	r7, #52	; 0x34
 8007406:	46bd      	mov	sp, r7
 8007408:	bd90      	pop	{r4, r7, pc}
 800740a:	bf00      	nop
 800740c:	0800dba4 	.word	0x0800dba4
 8007410:	40021000 	.word	0x40021000
 8007414:	007a1200 	.word	0x007a1200
 8007418:	003d0900 	.word	0x003d0900
 800741c:	aaaaaaab 	.word	0xaaaaaaab

08007420 <HAL_SPI_Init>:
>>>>>>> 6147058 (refactor)
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e076      	b.n	80062e8 <HAL_SPI_Init+0x100>
=======
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e076      	b.n	8007520 <HAL_SPI_Init+0x100>
>>>>>>> 6147058 (refactor)
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
<<<<<<< HEAD
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <HAL_SPI_Init+0x2c>
=======
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d108      	bne.n	800744c <HAL_SPI_Init+0x2c>
>>>>>>> 6147058 (refactor)
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620a:	d009      	beq.n	8006220 <HAL_SPI_Init+0x38>
=======
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007442:	d009      	beq.n	8007458 <HAL_SPI_Init+0x38>
>>>>>>> 6147058 (refactor)
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]
 8006212:	e005      	b.n	8006220 <HAL_SPI_Init+0x38>
=======
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	61da      	str	r2, [r3, #28]
 800744a:	e005      	b.n	8007458 <HAL_SPI_Init+0x38>
>>>>>>> 6147058 (refactor)
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
<<<<<<< HEAD
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	615a      	str	r2, [r3, #20]
=======
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	615a      	str	r2, [r3, #20]
>>>>>>> 6147058 (refactor)
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d106      	bne.n	8007478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> 6147058 (refactor)

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fc fa9a 	bl	8002774 <HAL_SPI_MspInit>
=======
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fc faca 	bl	8003a0c <HAL_SPI_MspInit>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006256:	601a      	str	r2, [r3, #0]
=======
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748e:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a4:	ea42 0103 	orr.w	r1, r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
=======
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074dc:	ea42 0103 	orr.w	r1, r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
<<<<<<< HEAD
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	0c1a      	lsrs	r2, r3, #16
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f002 0204 	and.w	r2, r2, #4
 80062c6:	605a      	str	r2, [r3, #4]
=======
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	0c1a      	lsrs	r2, r3, #16
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f002 0204 	and.w	r2, r2, #4
 80074fe:	605a      	str	r2, [r3, #4]
>>>>>>> 6147058 (refactor)
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_SPI_Transmit>:
=======
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800750e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_SPI_Transmit>:
>>>>>>> 6147058 (refactor)
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	77fb      	strb	r3, [r7, #31]
=======
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	77fb      	strb	r3, [r7, #31]
>>>>>>> 6147058 (refactor)

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_SPI_Transmit+0x22>
 800630e:	2302      	movs	r3, #2
 8006310:	e126      	b.n	8006560 <HAL_SPI_Transmit+0x270>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800631a:	f7fc fc87 	bl	8002c2c <HAL_GetTick>
 800631e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d002      	beq.n	8006336 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006330:	2302      	movs	r3, #2
 8006332:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006334:	e10b      	b.n	800654e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_Transmit+0x52>
 800633c:	88fb      	ldrh	r3, [r7, #6]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006346:	e102      	b.n	800654e <HAL_SPI_Transmit+0x25e>
=======
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_SPI_Transmit+0x22>
 8007546:	2302      	movs	r3, #2
 8007548:	e126      	b.n	8007798 <HAL_SPI_Transmit+0x270>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007552:	f7fc fcb9 	bl	8003ec8 <HAL_GetTick>
 8007556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d002      	beq.n	800756e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007568:	2302      	movs	r3, #2
 800756a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800756c:	e10b      	b.n	8007786 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_SPI_Transmit+0x52>
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800757e:	e102      	b.n	8007786 <HAL_SPI_Transmit+0x25e>
>>>>>>> 6147058 (refactor)
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2203      	movs	r2, #3
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	88fa      	ldrh	r2, [r7, #6]
 8006360:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800638e:	d10f      	bne.n	80063b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800639e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ae:	601a      	str	r2, [r3, #0]
=======
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2203      	movs	r2, #3
 8007584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	88fa      	ldrh	r2, [r7, #6]
 800759e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	d10f      	bne.n	80075e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075e6:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ba:	2b40      	cmp	r3, #64	; 0x40
 80063bc:	d007      	beq.n	80063ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063cc:	601a      	str	r2, [r3, #0]
=======
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d007      	beq.n	8007606 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007604:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d14b      	bne.n	8006470 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_Transmit+0xf6>
 80063e0:	8afb      	ldrh	r3, [r7, #22]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d13e      	bne.n	8006464 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	881a      	ldrh	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	1c9a      	adds	r2, r3, #2
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006400:	b29b      	uxth	r3, r3
 8006402:	3b01      	subs	r3, #1
 8006404:	b29a      	uxth	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800640a:	e02b      	b.n	8006464 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b02      	cmp	r3, #2
 8006418:	d112      	bne.n	8006440 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	881a      	ldrh	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	1c9a      	adds	r2, r3, #2
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	86da      	strh	r2, [r3, #54]	; 0x36
 800643e:	e011      	b.n	8006464 <HAL_SPI_Transmit+0x174>
=======
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800760e:	d14b      	bne.n	80076a8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_SPI_Transmit+0xf6>
 8007618:	8afb      	ldrh	r3, [r7, #22]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d13e      	bne.n	800769c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	881a      	ldrh	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	1c9a      	adds	r2, r3, #2
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007642:	e02b      	b.n	800769c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b02      	cmp	r3, #2
 8007650:	d112      	bne.n	8007678 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	881a      	ldrh	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	1c9a      	adds	r2, r3, #2
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	86da      	strh	r2, [r3, #54]	; 0x36
 8007676:	e011      	b.n	800769c <HAL_SPI_Transmit+0x174>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8006440:	f7fc fbf4 	bl	8002c2c <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d803      	bhi.n	8006458 <HAL_SPI_Transmit+0x168>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006456:	d102      	bne.n	800645e <HAL_SPI_Transmit+0x16e>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006462:	e074      	b.n	800654e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1ce      	bne.n	800640c <HAL_SPI_Transmit+0x11c>
 800646e:	e04c      	b.n	800650a <HAL_SPI_Transmit+0x21a>
=======
 8007678:	f7fc fc26 	bl	8003ec8 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d803      	bhi.n	8007690 <HAL_SPI_Transmit+0x168>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d102      	bne.n	8007696 <HAL_SPI_Transmit+0x16e>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	77fb      	strb	r3, [r7, #31]
          goto error;
 800769a:	e074      	b.n	8007786 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1ce      	bne.n	8007644 <HAL_SPI_Transmit+0x11c>
 80076a6:	e04c      	b.n	8007742 <HAL_SPI_Transmit+0x21a>
>>>>>>> 6147058 (refactor)
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_Transmit+0x18e>
 8006478:	8afb      	ldrh	r3, [r7, #22]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d140      	bne.n	8006500 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80064a4:	e02c      	b.n	8006500 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d113      	bne.n	80064dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	7812      	ldrb	r2, [r2, #0]
 80064c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80064da:	e011      	b.n	8006500 <HAL_SPI_Transmit+0x210>
=======
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_SPI_Transmit+0x18e>
 80076b0:	8afb      	ldrh	r3, [r7, #22]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d140      	bne.n	8007738 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	330c      	adds	r3, #12
 80076c0:	7812      	ldrb	r2, [r2, #0]
 80076c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076dc:	e02c      	b.n	8007738 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d113      	bne.n	8007714 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	86da      	strh	r2, [r3, #54]	; 0x36
 8007712:	e011      	b.n	8007738 <HAL_SPI_Transmit+0x210>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80064dc:	f7fc fba6 	bl	8002c2c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d803      	bhi.n	80064f4 <HAL_SPI_Transmit+0x204>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d102      	bne.n	80064fa <HAL_SPI_Transmit+0x20a>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d102      	bne.n	8006500 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064fe:	e026      	b.n	800654e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1cd      	bne.n	80064a6 <HAL_SPI_Transmit+0x1b6>
=======
 8007714:	f7fc fbd8 	bl	8003ec8 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d803      	bhi.n	800772c <HAL_SPI_Transmit+0x204>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d102      	bne.n	8007732 <HAL_SPI_Transmit+0x20a>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007736:	e026      	b.n	8007786 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1cd      	bne.n	80076de <HAL_SPI_Transmit+0x1b6>
>>>>>>> 6147058 (refactor)
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f8b2 	bl	8006678 <SPI_EndRxTxTransaction>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2220      	movs	r2, #32
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8b2 	bl	80078b0 <SPI_EndRxTxTransaction>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> 6147058 (refactor)
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e000      	b.n	800654e <HAL_SPI_Transmit+0x25e>
  }

error:
 800654c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800655e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3720      	adds	r7, #32
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <SPI_WaitFlagStateUntilTimeout>:
=======
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e000      	b.n	8007786 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007784:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007796:	7ffb      	ldrb	r3, [r7, #31]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> 6147058 (refactor)
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	603b      	str	r3, [r7, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	71fb      	strb	r3, [r7, #7]
=======
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
>>>>>>> 6147058 (refactor)
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8006578:	f7fc fb58 	bl	8002c2c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	4413      	add	r3, r2
 8006586:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006588:	f7fc fb50 	bl	8002c2c <HAL_GetTick>
 800658c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800658e:	4b39      	ldr	r3, [pc, #228]	; (8006674 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	015b      	lsls	r3, r3, #5
 8006594:	0d1b      	lsrs	r3, r3, #20
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	fb02 f303 	mul.w	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800659e:	e054      	b.n	800664a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d050      	beq.n	800664a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065a8:	f7fc fb40 	bl	8002c2c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d902      	bls.n	80065be <SPI_WaitFlagStateUntilTimeout+0x56>
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d13d      	bne.n	800663a <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 80077b0:	f7fc fb8a 	bl	8003ec8 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	1a9b      	subs	r3, r3, r2
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	4413      	add	r3, r2
 80077be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077c0:	f7fc fb82 	bl	8003ec8 <HAL_GetTick>
 80077c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077c6:	4b39      	ldr	r3, [pc, #228]	; (80078ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	015b      	lsls	r3, r3, #5
 80077cc:	0d1b      	lsrs	r3, r3, #20
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077d6:	e054      	b.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d050      	beq.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077e0:	f7fc fb72 	bl	8003ec8 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d902      	bls.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d13d      	bne.n	8007872 <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> 6147058 (refactor)
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d6:	d111      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e0:	d004      	beq.n	80065ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ea:	d107      	bne.n	80065fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fa:	601a      	str	r2, [r3, #0]
=======
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007804:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800780e:	d111      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007818:	d004      	beq.n	8007824 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d107      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007832:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006604:	d10f      	bne.n	8006626 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006624:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e017      	b.n	800666a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3b01      	subs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	429a      	cmp	r2, r3
 8006658:	bf0c      	ite	eq
 800665a:	2301      	moveq	r3, #1
 800665c:	2300      	movne	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	429a      	cmp	r2, r3
 8006666:	d19b      	bne.n	80065a0 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783c:	d10f      	bne.n	800785e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800785c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e017      	b.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	3b01      	subs	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4013      	ands	r3, r2
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	bf0c      	ite	eq
 8007892:	2301      	moveq	r3, #1
 8007894:	2300      	movne	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	429a      	cmp	r2, r3
 800789e:	d19b      	bne.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> 6147058 (refactor)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000010 	.word	0x20000010

08006678 <SPI_EndRxTxTransaction>:
=======
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	20000014 	.word	0x20000014

080078b0 <SPI_EndRxTxTransaction>:
>>>>>>> 6147058 (refactor)
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2200      	movs	r2, #0
 800668c:	2180      	movs	r1, #128	; 0x80
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff ff6a 	bl	8006568 <SPI_WaitFlagStateUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e000      	b.n	80066ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_IC_Init>:
=======
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	2180      	movs	r1, #128	; 0x80
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff ff6a 	bl	80077a0 <SPI_WaitFlagStateUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d007      	beq.n	80078e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d6:	f043 0220 	orr.w	r2, r3, #32
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e000      	b.n	80078e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_IC_Init>:
>>>>>>> 6147058 (refactor)
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e041      	b.n	800674a <HAL_TIM_IC_Init+0x96>
=======
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e041      	b.n	8007982 <HAL_TIM_IC_Init+0x96>
>>>>>>> 6147058 (refactor)
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 6147058 (refactor)
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< HEAD
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fc f888 	bl	80027f0 <HAL_TIM_IC_MspInit>
=======
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fc f8b8 	bl	8003a88 <HAL_TIM_IC_MspInit>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f000 fb38 	bl	8006d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <HAL_TIM_IC_Start_IT>:
=======
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f000 fb38 	bl	8007fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_TIM_IC_Start_IT>:
>>>>>>> 6147058 (refactor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_TIM_IC_Start_IT+0x1a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676a:	b2db      	uxtb	r3, r3
 800676c:	e013      	b.n	8006796 <HAL_TIM_IC_Start_IT+0x42>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d104      	bne.n	800677e <HAL_TIM_IC_Start_IT+0x2a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800677a:	b2db      	uxtb	r3, r3
 800677c:	e00b      	b.n	8006796 <HAL_TIM_IC_Start_IT+0x42>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b08      	cmp	r3, #8
 8006782:	d104      	bne.n	800678e <HAL_TIM_IC_Start_IT+0x3a>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e003      	b.n	8006796 <HAL_TIM_IC_Start_IT+0x42>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006794:	b2db      	uxtb	r3, r3
 8006796:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_TIM_IC_Start_IT+0x54>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	e013      	b.n	80067d0 <HAL_TIM_IC_Start_IT+0x7c>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d104      	bne.n	80067b8 <HAL_TIM_IC_Start_IT+0x64>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e00b      	b.n	80067d0 <HAL_TIM_IC_Start_IT+0x7c>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d104      	bne.n	80067c8 <HAL_TIM_IC_Start_IT+0x74>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	e003      	b.n	80067d0 <HAL_TIM_IC_Start_IT+0x7c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	73bb      	strb	r3, [r7, #14]
=======
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_IC_Start_IT+0x1a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	e013      	b.n	80079ce <HAL_TIM_IC_Start_IT+0x42>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0x2a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e00b      	b.n	80079ce <HAL_TIM_IC_Start_IT+0x42>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d104      	bne.n	80079c6 <HAL_TIM_IC_Start_IT+0x3a>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	e003      	b.n	80079ce <HAL_TIM_IC_Start_IT+0x42>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d104      	bne.n	80079e0 <HAL_TIM_IC_Start_IT+0x54>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	e013      	b.n	8007a08 <HAL_TIM_IC_Start_IT+0x7c>
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d104      	bne.n	80079f0 <HAL_TIM_IC_Start_IT+0x64>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	e00b      	b.n	8007a08 <HAL_TIM_IC_Start_IT+0x7c>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d104      	bne.n	8007a00 <HAL_TIM_IC_Start_IT+0x74>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	e003      	b.n	8007a08 <HAL_TIM_IC_Start_IT+0x7c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	73bb      	strb	r3, [r7, #14]
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d102      	bne.n	80067de <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e0b3      	b.n	800694a <HAL_TIM_IC_Start_IT+0x1f6>
=======
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d102      	bne.n	8007a16 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a10:	7bbb      	ldrb	r3, [r7, #14]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d001      	beq.n	8007a1a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0b3      	b.n	8007b82 <HAL_TIM_IC_Start_IT+0x1f6>
>>>>>>> 6147058 (refactor)
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_IC_Start_IT+0x9e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067f0:	e013      	b.n	800681a <HAL_TIM_IC_Start_IT+0xc6>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_IC_Start_IT+0xae>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006800:	e00b      	b.n	800681a <HAL_TIM_IC_Start_IT+0xc6>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d104      	bne.n	8006812 <HAL_TIM_IC_Start_IT+0xbe>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006810:	e003      	b.n	800681a <HAL_TIM_IC_Start_IT+0xc6>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2202      	movs	r2, #2
 8006816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_TIM_IC_Start_IT+0xd6>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2202      	movs	r2, #2
 8006824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006828:	e013      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xfe>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b04      	cmp	r3, #4
 800682e:	d104      	bne.n	800683a <HAL_TIM_IC_Start_IT+0xe6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006838:	e00b      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xfe>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d104      	bne.n	800684a <HAL_TIM_IC_Start_IT+0xf6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006848:	e003      	b.n	8006852 <HAL_TIM_IC_Start_IT+0xfe>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2202      	movs	r2, #2
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	d841      	bhi.n	80068dc <HAL_TIM_IC_Start_IT+0x188>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <HAL_TIM_IC_Start_IT+0x10c>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006895 	.word	0x08006895
 8006864:	080068dd 	.word	0x080068dd
 8006868:	080068dd 	.word	0x080068dd
 800686c:	080068dd 	.word	0x080068dd
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068dd 	.word	0x080068dd
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080068dd 	.word	0x080068dd
 8006880:	080068b9 	.word	0x080068b9
 8006884:	080068dd 	.word	0x080068dd
 8006888:	080068dd 	.word	0x080068dd
 800688c:	080068dd 	.word	0x080068dd
 8006890:	080068cb 	.word	0x080068cb
=======
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIM_IC_Start_IT+0x9e>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a28:	e013      	b.n	8007a52 <HAL_TIM_IC_Start_IT+0xc6>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d104      	bne.n	8007a3a <HAL_TIM_IC_Start_IT+0xae>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a38:	e00b      	b.n	8007a52 <HAL_TIM_IC_Start_IT+0xc6>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d104      	bne.n	8007a4a <HAL_TIM_IC_Start_IT+0xbe>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a48:	e003      	b.n	8007a52 <HAL_TIM_IC_Start_IT+0xc6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_IC_Start_IT+0xd6>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a60:	e013      	b.n	8007a8a <HAL_TIM_IC_Start_IT+0xfe>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_IC_Start_IT+0xe6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a70:	e00b      	b.n	8007a8a <HAL_TIM_IC_Start_IT+0xfe>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_IC_Start_IT+0xf6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a80:	e003      	b.n	8007a8a <HAL_TIM_IC_Start_IT+0xfe>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d841      	bhi.n	8007b14 <HAL_TIM_IC_Start_IT+0x188>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <HAL_TIM_IC_Start_IT+0x10c>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007acd 	.word	0x08007acd
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b15 	.word	0x08007b15
 8007aa8:	08007adf 	.word	0x08007adf
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007b15 	.word	0x08007b15
 8007ab4:	08007b15 	.word	0x08007b15
 8007ab8:	08007af1 	.word	0x08007af1
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007b03 	.word	0x08007b03
>>>>>>> 6147058 (refactor)
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
<<<<<<< HEAD
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0202 	orr.w	r2, r2, #2
 80068a2:	60da      	str	r2, [r3, #12]
      break;
 80068a4:	e01b      	b.n	80068de <HAL_TIM_IC_Start_IT+0x18a>
=======
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0202 	orr.w	r2, r2, #2
 8007ada:	60da      	str	r2, [r3, #12]
      break;
 8007adc:	e01b      	b.n	8007b16 <HAL_TIM_IC_Start_IT+0x18a>
>>>>>>> 6147058 (refactor)
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
<<<<<<< HEAD
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0204 	orr.w	r2, r2, #4
 80068b4:	60da      	str	r2, [r3, #12]
      break;
 80068b6:	e012      	b.n	80068de <HAL_TIM_IC_Start_IT+0x18a>
=======
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0204 	orr.w	r2, r2, #4
 8007aec:	60da      	str	r2, [r3, #12]
      break;
 8007aee:	e012      	b.n	8007b16 <HAL_TIM_IC_Start_IT+0x18a>
>>>>>>> 6147058 (refactor)
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
<<<<<<< HEAD
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0208 	orr.w	r2, r2, #8
 80068c6:	60da      	str	r2, [r3, #12]
      break;
 80068c8:	e009      	b.n	80068de <HAL_TIM_IC_Start_IT+0x18a>
=======
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	60da      	str	r2, [r3, #12]
      break;
 8007b00:	e009      	b.n	8007b16 <HAL_TIM_IC_Start_IT+0x18a>
>>>>>>> 6147058 (refactor)
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
<<<<<<< HEAD
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0210 	orr.w	r2, r2, #16
 80068d8:	60da      	str	r2, [r3, #12]
      break;
 80068da:	e000      	b.n	80068de <HAL_TIM_IC_Start_IT+0x18a>
=======
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0210 	orr.w	r2, r2, #16
 8007b10:	60da      	str	r2, [r3, #12]
      break;
 8007b12:	e000      	b.n	8007b16 <HAL_TIM_IC_Start_IT+0x18a>
>>>>>>> 6147058 (refactor)
    }

    default:
      break;
<<<<<<< HEAD
 80068dc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fbad 	bl	8007046 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_TIM_IC_Start_IT+0x200>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00e      	beq.n	8006914 <HAL_TIM_IC_Start_IT+0x1c0>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fe:	d009      	beq.n	8006914 <HAL_TIM_IC_Start_IT+0x1c0>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a14      	ldr	r2, [pc, #80]	; (8006958 <HAL_TIM_IC_Start_IT+0x204>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <HAL_TIM_IC_Start_IT+0x1c0>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <HAL_TIM_IC_Start_IT+0x208>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d111      	bne.n	8006938 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b06      	cmp	r3, #6
 8006924:	d010      	beq.n	8006948 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f042 0201 	orr.w	r2, r2, #1
 8006934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006936:	e007      	b.n	8006948 <HAL_TIM_IC_Start_IT+0x1f4>
=======
 8007b14:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fbad 	bl	800827e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <HAL_TIM_IC_Start_IT+0x200>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00e      	beq.n	8007b4c <HAL_TIM_IC_Start_IT+0x1c0>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b36:	d009      	beq.n	8007b4c <HAL_TIM_IC_Start_IT+0x1c0>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <HAL_TIM_IC_Start_IT+0x204>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIM_IC_Start_IT+0x1c0>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <HAL_TIM_IC_Start_IT+0x208>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d111      	bne.n	8007b70 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d010      	beq.n	8007b80 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	e007      	b.n	8007b80 <HAL_TIM_IC_Start_IT+0x1f4>
>>>>>>> 6147058 (refactor)
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0201 	orr.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]
=======
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	40012c00 	.word	0x40012c00
 8006958:	40000400 	.word	0x40000400
 800695c:	40000800 	.word	0x40000800

08006960 <HAL_TIM_IRQHandler>:
=======
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40000400 	.word	0x40000400
 8007b94:	40000800 	.word	0x40000800

08007b98 <HAL_TIM_IRQHandler>:
>>>>>>> 6147058 (refactor)
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b02      	cmp	r3, #2
 8006974:	d122      	bne.n	80069bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b02      	cmp	r3, #2
 8006982:	d11b      	bne.n	80069bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0202 	mvn.w	r2, #2
 800698c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x4a>
=======
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d122      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d11b      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0202 	mvn.w	r2, #2
 8007bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 6147058 (refactor)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fa fc4a 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0x56>
=======
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fa fcd2 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0x56>
>>>>>>> 6147058 (refactor)
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9c1 	bl	8006d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9c7 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
=======
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9c1 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f9c7 	bl	8007f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f003 0304 	and.w	r3, r3, #4
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d122      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d11b      	bne.n	8006a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f06f 0204 	mvn.w	r2, #4
 80069e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_TIM_IRQHandler+0x9e>
=======
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d122      	bne.n	8007c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d11b      	bne.n	8007c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0204 	mvn.w	r2, #4
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa fc20 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 80069fc:	e005      	b.n	8006a0a <HAL_TIM_IRQHandler+0xaa>
=======
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fa fca8 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007c34:	e005      	b.n	8007c42 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f997 	bl	8006d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f99d 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	771a      	strb	r2, [r3, #28]
=======
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f997 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f99d 	bl	8007f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0208 	mvn.w	r2, #8
 8006a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0xf2>
=======
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d122      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d11b      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0208 	mvn.w	r2, #8
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa fbf6 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0xfe>
=======
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fa fc7e 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f96d 	bl	8006d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f973 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
=======
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f96d 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f973 	bl	8007f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0310 	and.w	r3, r3, #16
 8006a7c:	2b10      	cmp	r3, #16
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0210 	mvn.w	r2, #16
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x146>
=======
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d122      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d11b      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0210 	mvn.w	r2, #16
 8007cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0x146>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa fbcc 	bl	800123c <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0x152>
=======
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fa fc54 	bl	8002584 <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0x152>
>>>>>>> 6147058 (refactor)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f943 	bl	8006d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f949 	bl	8006d44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
=======
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f943 	bl	8007f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f949 	bl	8007f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
>>>>>>> 6147058 (refactor)
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d10e      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0201 	mvn.w	r2, #1
 8006adc:	611a      	str	r2, [r3, #16]
=======
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d10e      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d107      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0201 	mvn.w	r2, #1
 8007d14:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f91e 	bl	8006d20 <HAL_TIM_PeriodElapsedCallback>
=======
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f91e 	bl	8007f58 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b80      	cmp	r3, #128	; 0x80
 8006af0:	d10e      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b08:	611a      	str	r2, [r3, #16]
=======
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d10e      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b80      	cmp	r3, #128	; 0x80
 8007d36:	d107      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d40:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fb27 	bl	800715e <HAL_TIMEx_BreakCallback>
=======
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb27 	bl	8008396 <HAL_TIMEx_BreakCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d10e      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b28:	2b40      	cmp	r3, #64	; 0x40
 8006b2a:	d107      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b34:	611a      	str	r2, [r3, #16]
=======
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d10e      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d107      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d6c:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f90d 	bl	8006d56 <HAL_TIM_TriggerCallback>
=======
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f90d 	bl	8007f8e <HAL_TIM_TriggerCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d10e      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d107      	bne.n	8006b68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0220 	mvn.w	r2, #32
 8006b60:	611a      	str	r2, [r3, #16]
=======
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d10e      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d107      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0220 	mvn.w	r2, #32
 8007d98:	611a      	str	r2, [r3, #16]
>>>>>>> 6147058 (refactor)
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 faf2 	bl	800714c <HAL_TIMEx_CommutCallback>
=======
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 faf2 	bl	8008384 <HAL_TIMEx_CommutCallback>
>>>>>>> 6147058 (refactor)
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8006b68:	bf00      	nop
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_IC_ConfigChannel>:
=======
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_TIM_IC_ConfigChannel>:
>>>>>>> 6147058 (refactor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
=======
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
>>>>>>> 6147058 (refactor)
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e082      	b.n	8006c90 <HAL_TIM_IC_ConfigChannel+0x120>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11b      	bne.n	8006bd0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6818      	ldr	r0, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6819      	ldr	r1, [r3, #0]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f000 f940 	bl	8006e2c <TIM_TI1_SetConfig>
=======
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e082      	b.n	8007ec8 <HAL_TIM_IC_ConfigChannel+0x120>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d11b      	bne.n	8007e08 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6819      	ldr	r1, [r3, #0]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f000 f940 	bl	8008064 <TIM_TI1_SetConfig>
>>>>>>> 6147058 (refactor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
<<<<<<< HEAD
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 020c 	bic.w	r2, r2, #12
 8006bba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6999      	ldr	r1, [r3, #24]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	619a      	str	r2, [r3, #24]
 8006bce:	e05a      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d11c      	bne.n	8006c10 <HAL_TIM_IC_ConfigChannel+0xa0>
=======
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 020c 	bic.w	r2, r2, #12
 8007df2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6999      	ldr	r1, [r3, #24]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	619a      	str	r2, [r3, #24]
 8007e06:	e05a      	b.n	8007ebe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d11c      	bne.n	8007e48 <HAL_TIM_IC_ConfigChannel+0xa0>
>>>>>>> 6147058 (refactor)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6819      	ldr	r1, [r3, #0]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f000 f97b 	bl	8006ee0 <TIM_TI2_SetConfig>
=======
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6819      	ldr	r1, [r3, #0]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f000 f97b 	bl	8008118 <TIM_TI2_SetConfig>
>>>>>>> 6147058 (refactor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
<<<<<<< HEAD
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	699a      	ldr	r2, [r3, #24]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bf8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6999      	ldr	r1, [r3, #24]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	021a      	lsls	r2, r3, #8
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	619a      	str	r2, [r3, #24]
 8006c0e:	e03a      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d11b      	bne.n	8006c4e <HAL_TIM_IC_ConfigChannel+0xde>
=======
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699a      	ldr	r2, [r3, #24]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6999      	ldr	r1, [r3, #24]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	021a      	lsls	r2, r3, #8
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	619a      	str	r2, [r3, #24]
 8007e46:	e03a      	b.n	8007ebe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d11b      	bne.n	8007e86 <HAL_TIM_IC_ConfigChannel+0xde>
>>>>>>> 6147058 (refactor)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6819      	ldr	r1, [r3, #0]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f000 f997 	bl	8006f58 <TIM_TI3_SetConfig>
=======
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f000 f997 	bl	8008190 <TIM_TI3_SetConfig>
>>>>>>> 6147058 (refactor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
<<<<<<< HEAD
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 020c 	bic.w	r2, r2, #12
 8006c38:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69d9      	ldr	r1, [r3, #28]
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	61da      	str	r2, [r3, #28]
 8006c4c:	e01b      	b.n	8006c86 <HAL_TIM_IC_ConfigChannel+0x116>
=======
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	69da      	ldr	r2, [r3, #28]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 020c 	bic.w	r2, r2, #12
 8007e70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69d9      	ldr	r1, [r3, #28]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	61da      	str	r2, [r3, #28]
 8007e84:	e01b      	b.n	8007ebe <HAL_TIM_IC_ConfigChannel+0x116>
>>>>>>> 6147058 (refactor)
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< HEAD
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6819      	ldr	r1, [r3, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f000 f9b6 	bl	8006fce <TIM_TI4_SetConfig>
=======
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6819      	ldr	r1, [r3, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f000 f9b6 	bl	8008206 <TIM_TI4_SetConfig>
>>>>>>> 6147058 (refactor)
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
<<<<<<< HEAD
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c70:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_ReadCapturedValue>:
=======
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69da      	ldr	r2, [r3, #28]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ea8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69d9      	ldr	r1, [r3, #28]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	021a      	lsls	r2, r3, #8
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <HAL_TIM_ReadCapturedValue>:
>>>>>>> 6147058 (refactor)
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b0c      	cmp	r3, #12
 8006caa:	d831      	bhi.n	8006d10 <HAL_TIM_ReadCapturedValue+0x78>
 8006cac:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d11 	.word	0x08006d11
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d11 	.word	0x08006d11
 8006ce4:	08006d07 	.word	0x08006d07
=======
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b0c      	cmp	r3, #12
 8007ee2:	d831      	bhi.n	8007f48 <HAL_TIM_ReadCapturedValue+0x78>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f21 	.word	0x08007f21
 8007ef0:	08007f49 	.word	0x08007f49
 8007ef4:	08007f49 	.word	0x08007f49
 8007ef8:	08007f49 	.word	0x08007f49
 8007efc:	08007f2b 	.word	0x08007f2b
 8007f00:	08007f49 	.word	0x08007f49
 8007f04:	08007f49 	.word	0x08007f49
 8007f08:	08007f49 	.word	0x08007f49
 8007f0c:	08007f35 	.word	0x08007f35
 8007f10:	08007f49 	.word	0x08007f49
 8007f14:	08007f49 	.word	0x08007f49
 8007f18:	08007f49 	.word	0x08007f49
 8007f1c:	08007f3f 	.word	0x08007f3f
>>>>>>> 6147058 (refactor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
<<<<<<< HEAD
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cee:	60fb      	str	r3, [r7, #12]

      break;
 8006cf0:	e00f      	b.n	8006d12 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	60fb      	str	r3, [r7, #12]

      break;
 8007f28:	e00f      	b.n	8007f4a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 6147058 (refactor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
<<<<<<< HEAD
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	60fb      	str	r3, [r7, #12]

      break;
 8006cfa:	e00a      	b.n	8006d12 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	60fb      	str	r3, [r7, #12]

      break;
 8007f32:	e00a      	b.n	8007f4a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 6147058 (refactor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
<<<<<<< HEAD
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d02:	60fb      	str	r3, [r7, #12]

      break;
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	60fb      	str	r3, [r7, #12]

      break;
 8007f3c:	e005      	b.n	8007f4a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 6147058 (refactor)
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
<<<<<<< HEAD
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	60fb      	str	r3, [r7, #12]

      break;
 8006d0e:	e000      	b.n	8006d12 <HAL_TIM_ReadCapturedValue+0x7a>
=======
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	60fb      	str	r3, [r7, #12]

      break;
 8007f46:	e000      	b.n	8007f4a <HAL_TIM_ReadCapturedValue+0x7a>
>>>>>>> 6147058 (refactor)
    }

    default:
      break;
<<<<<<< HEAD
 8006d10:	bf00      	nop
  }

  return tmpreg;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <HAL_TIM_PeriodElapsedCallback>:
=======
 8007f48:	bf00      	nop
  }

  return tmpreg;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop

08007f58 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
=======
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr

08006d32 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
=======
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bc80      	pop	{r7}
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
=======
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_TriggerCallback>:
=======
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr

08007f8e <HAL_TIM_TriggerCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
=======
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <TIM_Base_SetConfig>:
=======
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_Base_SetConfig>:
>>>>>>> 6147058 (refactor)
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <TIM_Base_SetConfig+0xb8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_Base_SetConfig+0x30>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d86:	d007      	beq.n	8006d98 <TIM_Base_SetConfig+0x30>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <TIM_Base_SetConfig+0xbc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_Base_SetConfig+0x30>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a25      	ldr	r2, [pc, #148]	; (8006e28 <TIM_Base_SetConfig+0xc0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d108      	bne.n	8006daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a1c      	ldr	r2, [pc, #112]	; (8006e20 <TIM_Base_SetConfig+0xb8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00b      	beq.n	8006dca <TIM_Base_SetConfig+0x62>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db8:	d007      	beq.n	8006dca <TIM_Base_SetConfig+0x62>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a19      	ldr	r2, [pc, #100]	; (8006e24 <TIM_Base_SetConfig+0xbc>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d003      	beq.n	8006dca <TIM_Base_SetConfig+0x62>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <TIM_Base_SetConfig+0xc0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d108      	bne.n	8006ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
=======
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a29      	ldr	r2, [pc, #164]	; (8008058 <TIM_Base_SetConfig+0xb8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d00b      	beq.n	8007fd0 <TIM_Base_SetConfig+0x30>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbe:	d007      	beq.n	8007fd0 <TIM_Base_SetConfig+0x30>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a26      	ldr	r2, [pc, #152]	; (800805c <TIM_Base_SetConfig+0xbc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_Base_SetConfig+0x30>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a25      	ldr	r2, [pc, #148]	; (8008060 <TIM_Base_SetConfig+0xc0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d108      	bne.n	8007fe2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a1c      	ldr	r2, [pc, #112]	; (8008058 <TIM_Base_SetConfig+0xb8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00b      	beq.n	8008002 <TIM_Base_SetConfig+0x62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff0:	d007      	beq.n	8008002 <TIM_Base_SetConfig+0x62>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a19      	ldr	r2, [pc, #100]	; (800805c <TIM_Base_SetConfig+0xbc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_Base_SetConfig+0x62>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a18      	ldr	r2, [pc, #96]	; (8008060 <TIM_Base_SetConfig+0xc0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d108      	bne.n	8008014 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
>>>>>>> 6147058 (refactor)
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <TIM_Base_SetConfig+0xb8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d103      	bne.n	8006e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	691a      	ldr	r2, [r3, #16]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a07      	ldr	r2, [pc, #28]	; (8008058 <TIM_Base_SetConfig+0xb8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d103      	bne.n	8008048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	691a      	ldr	r2, [r3, #16]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 6147058 (refactor)
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	615a      	str	r2, [r3, #20]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800

08006e2c <TIM_TI1_SetConfig>:
=======
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	615a      	str	r2, [r3, #20]
}
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800

08008064 <TIM_TI1_SetConfig>:
>>>>>>> 6147058 (refactor)
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
=======
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
>>>>>>> 6147058 (refactor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	f023 0201 	bic.w	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <TIM_TI1_SetConfig+0xa8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_TI1_SetConfig+0x46>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e60:	d007      	beq.n	8006e72 <TIM_TI1_SetConfig+0x46>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <TIM_TI1_SetConfig+0xac>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_TI1_SetConfig+0x46>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <TIM_TI1_SetConfig+0xb0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d101      	bne.n	8006e76 <TIM_TI1_SetConfig+0x4a>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <TIM_TI1_SetConfig+0x4c>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 0303 	bic.w	r3, r3, #3
 8006e82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e003      	b.n	8006e96 <TIM_TI1_SetConfig+0x6a>
=======
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0201 	bic.w	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	4a1f      	ldr	r2, [pc, #124]	; (800810c <TIM_TI1_SetConfig+0xa8>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00b      	beq.n	80080aa <TIM_TI1_SetConfig+0x46>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008098:	d007      	beq.n	80080aa <TIM_TI1_SetConfig+0x46>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <TIM_TI1_SetConfig+0xac>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d003      	beq.n	80080aa <TIM_TI1_SetConfig+0x46>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <TIM_TI1_SetConfig+0xb0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d101      	bne.n	80080ae <TIM_TI1_SetConfig+0x4a>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e000      	b.n	80080b0 <TIM_TI1_SetConfig+0x4c>
 80080ae:	2300      	movs	r3, #0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0303 	bic.w	r3, r3, #3
 80080ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e003      	b.n	80080ce <TIM_TI1_SetConfig+0x6a>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
=======
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f043 0301 	orr.w	r3, r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
>>>>>>> 6147058 (refactor)
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f023 030a 	bic.w	r3, r3, #10
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f003 030a 	and.w	r3, r3, #10
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800

08006ee0 <TIM_TI2_SetConfig>:
=======
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	4313      	orrs	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f023 030a 	bic.w	r3, r3, #10
 80080e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f003 030a 	and.w	r3, r3, #10
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	bc80      	pop	{r7}
 800810a:	4770      	bx	lr
 800810c:	40012c00 	.word	0x40012c00
 8008110:	40000400 	.word	0x40000400
 8008114:	40000800 	.word	0x40000800

08008118 <TIM_TI2_SetConfig>:
>>>>>>> 6147058 (refactor)
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
=======
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
>>>>>>> 6147058 (refactor)
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	031b      	lsls	r3, r3, #12
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr

08006f58 <TIM_TI3_SetConfig>:
=======
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f023 0210 	bic.w	r2, r3, #16
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	021b      	lsls	r3, r3, #8
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008156:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	031b      	lsls	r3, r3, #12
 800815c:	b29b      	uxth	r3, r3
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800816a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <TIM_TI3_SetConfig>:
>>>>>>> 6147058 (refactor)
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006f58:	b480      	push	{r7}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
=======
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
>>>>>>> 6147058 (refactor)
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	621a      	str	r2, [r3, #32]
}
 8006fc4:	bf00      	nop
 8006fc6:	371c      	adds	r7, #28
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr

08006fce <TIM_TI4_SetConfig>:
=======
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f023 0303 	bic.w	r3, r3, #3
 80081bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	621a      	str	r2, [r3, #32]
}
 80081fc:	bf00      	nop
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr

08008206 <TIM_TI4_SetConfig>:
>>>>>>> 6147058 (refactor)
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006fce:	b480      	push	{r7}
 8006fd0:	b087      	sub	sp, #28
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	60f8      	str	r0, [r7, #12]
 8006fd6:	60b9      	str	r1, [r7, #8]
 8006fd8:	607a      	str	r2, [r7, #4]
 8006fda:	603b      	str	r3, [r7, #0]
=======
 8008206:	b480      	push	{r7}
 8008208:	b087      	sub	sp, #28
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	603b      	str	r3, [r7, #0]
>>>>>>> 6147058 (refactor)
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	021b      	lsls	r3, r3, #8
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800700c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	b29b      	uxth	r3, r3
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	031b      	lsls	r3, r3, #12
 8007026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	621a      	str	r2, [r3, #32]
}
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr

08007046 <TIM_CCxChannelCmd>:
=======
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008232:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008244:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	031b      	lsls	r3, r3, #12
 800824a:	b29b      	uxth	r3, r3
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008258:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	031b      	lsls	r3, r3, #12
 800825e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	621a      	str	r2, [r3, #32]
}
 8008274:	bf00      	nop
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr

0800827e <TIM_CCxChannelCmd>:
>>>>>>> 6147058 (refactor)
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8007046:	b480      	push	{r7}
 8007048:	b087      	sub	sp, #28
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
=======
 800827e:	b480      	push	{r7}
 8008280:	b087      	sub	sp, #28
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	607a      	str	r2, [r7, #4]
>>>>>>> 6147058 (refactor)

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2201      	movs	r2, #1
 800705a:	fa02 f303 	lsl.w	r3, r2, r3
 800705e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1a      	ldr	r2, [r3, #32]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	43db      	mvns	r3, r3
 8007068:	401a      	ands	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	431a      	orrs	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	621a      	str	r2, [r3, #32]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	4770      	bx	lr
	...

08007090 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f003 031f 	and.w	r3, r3, #31
 8008290:	2201      	movs	r2, #1
 8008292:	fa02 f303 	lsl.w	r3, r2, r3
 8008296:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1a      	ldr	r2, [r3, #32]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	43db      	mvns	r3, r3
 80082a0:	401a      	ands	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1a      	ldr	r2, [r3, #32]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	fa01 f303 	lsl.w	r3, r1, r3
 80082b6:	431a      	orrs	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	621a      	str	r2, [r3, #32]
}
 80082bc:	bf00      	nop
 80082be:	371c      	adds	r7, #28
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bc80      	pop	{r7}
 80082c4:	4770      	bx	lr
	...

080082c8 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 6147058 (refactor)
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
=======
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
>>>>>>> 6147058 (refactor)
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e046      	b.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a16      	ldr	r2, [pc, #88]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d009      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a12      	ldr	r2, [pc, #72]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a10      	ldr	r2, [pc, #64]	; (8007148 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10c      	bne.n	8007124 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4313      	orrs	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
=======
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082dc:	2302      	movs	r3, #2
 80082de:	e046      	b.n	800836e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a16      	ldr	r2, [pc, #88]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d00e      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800832c:	d009      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a12      	ldr	r2, [pc, #72]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a10      	ldr	r2, [pc, #64]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d10c      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4313      	orrs	r3, r2
 8008352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]
>>>>>>> 6147058 (refactor)
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800

0800714c <HAL_TIMEx_CommutCallback>:
=======
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	bc80      	pop	{r7}
 8008376:	4770      	bx	lr
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800

08008384 <HAL_TIMEx_CommutCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
=======
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr

0800715e <HAL_TIMEx_BreakCallback>:
=======
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	bc80      	pop	{r7}
 8008394:	4770      	bx	lr

08008396 <HAL_TIMEx_BreakCallback>:
>>>>>>> 6147058 (refactor)
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
=======
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr

08007170 <USB_CoreInit>:
=======
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bc80      	pop	{r7}
 80083a6:	4770      	bx	lr

080083a8 <USB_CoreInit>:
>>>>>>> 6147058 (refactor)
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8007170:	b084      	sub	sp, #16
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	f107 0014 	add.w	r0, r7, #20
 800717e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 80083a8:	b084      	sub	sp, #16
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	f107 0014 	add.w	r0, r7, #20
 80083b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 6147058 (refactor)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	b004      	add	sp, #16
 800718e:	4770      	bx	lr

08007190 <USB_EnableGlobalInt>:
=======
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	b004      	add	sp, #16
 80083c6:	4770      	bx	lr

080083c8 <USB_EnableGlobalInt>:
>>>>>>> 6147058 (refactor)
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
=======
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
<<<<<<< HEAD
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80071a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80071a4:	60fb      	str	r3, [r7, #12]
=======
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80083dc:	60fb      	str	r3, [r7, #12]
>>>>>>> 6147058 (refactor)
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
<<<<<<< HEAD
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USB_DisableGlobalInt>:
=======
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <USB_DisableGlobalInt>:
>>>>>>> 6147058 (refactor)
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
=======
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
<<<<<<< HEAD
 80071c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80071c8:	60fb      	str	r3, [r7, #12]
=======
 80083fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008400:	60fb      	str	r3, [r7, #12]
>>>>>>> 6147058 (refactor)
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
<<<<<<< HEAD
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	b29b      	uxth	r3, r3
 80071da:	4013      	ands	r3, r2
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <USB_SetCurrentMode>:
=======
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	b29b      	uxth	r3, r3
 800840e:	43db      	mvns	r3, r3
 8008410:	b29b      	uxth	r3, r3
 8008412:	4013      	ands	r3, r2
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	bc80      	pop	{r7}
 8008426:	4770      	bx	lr

08008428 <USB_SetCurrentMode>:
>>>>>>> 6147058 (refactor)
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
<<<<<<< HEAD
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
=======
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
>>>>>>> 6147058 (refactor)

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <USB_DevInit>:
=======
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr

08008440 <USB_DevInit>:
>>>>>>> 6147058 (refactor)
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
<<<<<<< HEAD
 8007208:	b084      	sub	sp, #16
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	f107 0014 	add.w	r0, r7, #20
 8007216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
=======
 8008440:	b084      	sub	sp, #16
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	f107 0014 	add.w	r0, r7, #20
 800844e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
>>>>>>> 6147058 (refactor)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
<<<<<<< HEAD
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	b004      	add	sp, #16
 8007246:	4770      	bx	lr

08007248 <USB_ActivateEndpoint>:
=======
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	b004      	add	sp, #16
 800847e:	4770      	bx	lr

08008480 <USB_ActivateEndpoint>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007248:	b480      	push	{r7}
 800724a:	b09b      	sub	sp, #108	; 0x6c
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	b29b      	uxth	r3, r3
 8007266:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	78db      	ldrb	r3, [r3, #3]
 8007276:	2b03      	cmp	r3, #3
 8007278:	d81f      	bhi.n	80072ba <USB_ActivateEndpoint+0x72>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <USB_ActivateEndpoint+0x38>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	08007291 	.word	0x08007291
 8007284:	080072ad 	.word	0x080072ad
 8007288:	080072c3 	.word	0x080072c3
 800728c:	0800729f 	.word	0x0800729f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007290:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007298:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800729c:	e012      	b.n	80072c4 <USB_ActivateEndpoint+0x7c>
=======
 8008480:	b480      	push	{r7}
 8008482:	b09b      	sub	sp, #108	; 0x6c
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b29b      	uxth	r3, r3
 800849e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80084a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	78db      	ldrb	r3, [r3, #3]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d81f      	bhi.n	80084f2 <USB_ActivateEndpoint+0x72>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USB_ActivateEndpoint+0x38>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084c9 	.word	0x080084c9
 80084bc:	080084e5 	.word	0x080084e5
 80084c0:	080084fb 	.word	0x080084fb
 80084c4:	080084d7 	.word	0x080084d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80084c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084d4:	e012      	b.n	80084fc <USB_ActivateEndpoint+0x7c>
>>>>>>> 6147058 (refactor)
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
<<<<<<< HEAD
 800729e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80072a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072aa:	e00b      	b.n	80072c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80072ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80072b8:	e004      	b.n	80072c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80072c0:	e000      	b.n	80072c4 <USB_ActivateEndpoint+0x7c>
      break;
 80072c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	441a      	add	r2, r3
 80072ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80072d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	b29b      	uxth	r3, r3
 800732a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	7b1b      	ldrb	r3, [r3, #12]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 8149 	bne.w	80075c8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 8084 	beq.w	8007448 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734a:	b29b      	uxth	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	88db      	ldrh	r3, [r3, #6]
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	881b      	ldrh	r3, [r3, #0]
 8007380:	81fb      	strh	r3, [r7, #14]
 8007382:	89fb      	ldrh	r3, [r7, #14]
 8007384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01b      	beq.n	80073c4 <USB_ActivateEndpoint+0x17c>
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	81bb      	strh	r3, [r7, #12]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	441a      	add	r2, r3
 80073ae:	89bb      	ldrh	r3, [r7, #12]
 80073b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	78db      	ldrb	r3, [r3, #3]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d020      	beq.n	800740e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e2:	813b      	strh	r3, [r7, #8]
 80073e4:	893b      	ldrh	r3, [r7, #8]
 80073e6:	f083 0320 	eor.w	r3, r3, #32
 80073ea:	813b      	strh	r3, [r7, #8]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	441a      	add	r2, r3
 80073f6:	893b      	ldrh	r3, [r7, #8]
 80073f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007408:	b29b      	uxth	r3, r3
 800740a:	8013      	strh	r3, [r2, #0]
 800740c:	e27f      	b.n	800790e <USB_ActivateEndpoint+0x6c6>
=======
 80084d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80084de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084e2:	e00b      	b.n	80084fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80084e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80084e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084ec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80084f0:	e004      	b.n	80084fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80084f8:	e000      	b.n	80084fc <USB_ActivateEndpoint+0x7c>
      break;
 80084fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800850a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800850e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851a:	b29b      	uxth	r3, r3
 800851c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008534:	b29a      	uxth	r2, r3
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	b29b      	uxth	r3, r3
 800853c:	4313      	orrs	r3, r2
 800853e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	441a      	add	r2, r3
 800854c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	7b1b      	ldrb	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8149 	bne.w	8008800 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8084 	beq.w	8008680 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	617b      	str	r3, [r7, #20]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	011a      	lsls	r2, r3, #4
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800859a:	613b      	str	r3, [r7, #16]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	88db      	ldrh	r3, [r3, #6]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	81fb      	strh	r3, [r7, #14]
 80085ba:	89fb      	ldrh	r3, [r7, #14]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01b      	beq.n	80085fc <USB_ActivateEndpoint+0x17c>
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085da:	81bb      	strh	r3, [r7, #12]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	89bb      	ldrh	r3, [r7, #12]
 80085e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	78db      	ldrb	r3, [r3, #3]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d020      	beq.n	8008646 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800861a:	813b      	strh	r3, [r7, #8]
 800861c:	893b      	ldrh	r3, [r7, #8]
 800861e:	f083 0320 	eor.w	r3, r3, #32
 8008622:	813b      	strh	r3, [r7, #8]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	441a      	add	r2, r3
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]
 8008644:	e27f      	b.n	8008b46 <USB_ActivateEndpoint+0x6c6>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007424:	817b      	strh	r3, [r7, #10]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	441a      	add	r2, r3
 8007430:	897b      	ldrh	r3, [r7, #10]
 8007432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800743e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007442:	b29b      	uxth	r3, r3
 8007444:	8013      	strh	r3, [r2, #0]
 8007446:	e262      	b.n	800790e <USB_ActivateEndpoint+0x6c6>
=======
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865c:	817b      	strh	r3, [r7, #10]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	897b      	ldrh	r3, [r7, #10]
 800866a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867a:	b29b      	uxth	r3, r3
 800867c:	8013      	strh	r3, [r2, #0]
 800867e:	e262      	b.n	8008b46 <USB_ActivateEndpoint+0x6c6>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
<<<<<<< HEAD
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	4413      	add	r3, r2
 800745a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	011a      	lsls	r2, r3, #4
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	4413      	add	r3, r2
 8007466:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	88db      	ldrh	r3, [r3, #6]
 8007470:	085b      	lsrs	r3, r3, #1
 8007472:	b29b      	uxth	r3, r3
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007486:	b29b      	uxth	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	4413      	add	r3, r2
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	011a      	lsls	r2, r3, #4
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	4413      	add	r3, r2
 800749a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d112      	bne.n	80074ce <USB_ActivateEndpoint+0x286>
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	801a      	strh	r2, [r3, #0]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e02f      	b.n	800752e <USB_ActivateEndpoint+0x2e6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b3e      	cmp	r3, #62	; 0x3e
 80074d4:	d813      	bhi.n	80074fe <USB_ActivateEndpoint+0x2b6>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	663b      	str	r3, [r7, #96]	; 0x60
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d002      	beq.n	80074f0 <USB_ActivateEndpoint+0x2a8>
 80074ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074ec:	3301      	adds	r3, #1
 80074ee:	663b      	str	r3, [r7, #96]	; 0x60
 80074f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	029b      	lsls	r3, r3, #10
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	801a      	strh	r2, [r3, #0]
 80074fc:	e017      	b.n	800752e <USB_ActivateEndpoint+0x2e6>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	663b      	str	r3, [r7, #96]	; 0x60
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <USB_ActivateEndpoint+0x2d0>
 8007512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007514:	3b01      	subs	r3, #1
 8007516:	663b      	str	r3, [r7, #96]	; 0x60
 8007518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800751a:	b29b      	uxth	r3, r3
 800751c:	029b      	lsls	r3, r3, #10
 800751e:	b29b      	uxth	r3, r3
 8007520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007528:	b29a      	uxth	r2, r3
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	83fb      	strh	r3, [r7, #30]
 800753c:	8bfb      	ldrh	r3, [r7, #30]
 800753e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d01b      	beq.n	800757e <USB_ActivateEndpoint+0x336>
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800755c:	83bb      	strh	r3, [r7, #28]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	441a      	add	r2, r3
 8007568:	8bbb      	ldrh	r3, [r7, #28]
 800756a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800757a:	b29b      	uxth	r3, r3
 800757c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007594:	837b      	strh	r3, [r7, #26]
 8007596:	8b7b      	ldrh	r3, [r7, #26]
 8007598:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800759c:	837b      	strh	r3, [r7, #26]
 800759e:	8b7b      	ldrh	r3, [r7, #26]
 80075a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80075a4:	837b      	strh	r3, [r7, #26]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	441a      	add	r2, r3
 80075b0:	8b7b      	ldrh	r3, [r7, #26]
 80075b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8013      	strh	r3, [r2, #0]
 80075c6:	e1a2      	b.n	800790e <USB_ActivateEndpoint+0x6c6>
=======
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800868a:	b29b      	uxth	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	4413      	add	r3, r2
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	011a      	lsls	r2, r3, #4
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	4413      	add	r3, r2
 800869e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	88db      	ldrh	r3, [r3, #6]
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	005b      	lsls	r3, r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	4413      	add	r3, r2
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	011a      	lsls	r2, r3, #4
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086d6:	623b      	str	r3, [r7, #32]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d112      	bne.n	8008706 <USB_ActivateEndpoint+0x286>
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	801a      	strh	r2, [r3, #0]
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086fe:	b29a      	uxth	r2, r3
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	801a      	strh	r2, [r3, #0]
 8008704:	e02f      	b.n	8008766 <USB_ActivateEndpoint+0x2e6>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b3e      	cmp	r3, #62	; 0x3e
 800870c:	d813      	bhi.n	8008736 <USB_ActivateEndpoint+0x2b6>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	663b      	str	r3, [r7, #96]	; 0x60
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <USB_ActivateEndpoint+0x2a8>
 8008722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008724:	3301      	adds	r3, #1
 8008726:	663b      	str	r3, [r7, #96]	; 0x60
 8008728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800872a:	b29b      	uxth	r3, r3
 800872c:	029b      	lsls	r3, r3, #10
 800872e:	b29a      	uxth	r2, r3
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	e017      	b.n	8008766 <USB_ActivateEndpoint+0x2e6>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	663b      	str	r3, [r7, #96]	; 0x60
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 031f 	and.w	r3, r3, #31
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <USB_ActivateEndpoint+0x2d0>
 800874a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800874c:	3b01      	subs	r3, #1
 800874e:	663b      	str	r3, [r7, #96]	; 0x60
 8008750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008752:	b29b      	uxth	r3, r3
 8008754:	029b      	lsls	r3, r3, #10
 8008756:	b29b      	uxth	r3, r3
 8008758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800875c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008760:	b29a      	uxth	r2, r3
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	83fb      	strh	r3, [r7, #30]
 8008774:	8bfb      	ldrh	r3, [r7, #30]
 8008776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01b      	beq.n	80087b6 <USB_ActivateEndpoint+0x336>
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008794:	83bb      	strh	r3, [r7, #28]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	441a      	add	r2, r3
 80087a0:	8bbb      	ldrh	r3, [r7, #28]
 80087a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087cc:	837b      	strh	r3, [r7, #26]
 80087ce:	8b7b      	ldrh	r3, [r7, #26]
 80087d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087d4:	837b      	strh	r3, [r7, #26]
 80087d6:	8b7b      	ldrh	r3, [r7, #26]
 80087d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087dc:	837b      	strh	r3, [r7, #26]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	441a      	add	r2, r3
 80087e8:	8b7b      	ldrh	r3, [r7, #26]
 80087ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]
 80087fe:	e1a2      	b.n	8008b46 <USB_ActivateEndpoint+0x6c6>
>>>>>>> 6147058 (refactor)
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
<<<<<<< HEAD
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	441a      	add	r2, r3
 80075ec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80075f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80075fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007600:	b29b      	uxth	r3, r3
 8007602:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	65bb      	str	r3, [r7, #88]	; 0x58
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007614:	4413      	add	r3, r2
 8007616:	65bb      	str	r3, [r7, #88]	; 0x58
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007620:	4413      	add	r3, r2
 8007622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007626:	657b      	str	r3, [r7, #84]	; 0x54
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	891b      	ldrh	r3, [r3, #8]
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	b29b      	uxth	r3, r3
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	653b      	str	r3, [r7, #80]	; 0x50
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007642:	b29b      	uxth	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007648:	4413      	add	r3, r2
 800764a:	653b      	str	r3, [r7, #80]	; 0x50
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	011a      	lsls	r2, r3, #4
 8007652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007654:	4413      	add	r3, r2
 8007656:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800765a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	895b      	ldrh	r3, [r3, #10]
 8007660:	085b      	lsrs	r3, r3, #1
 8007662:	b29b      	uxth	r3, r3
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800766a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 8091 	bne.w	8007798 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d01b      	beq.n	80076c6 <USB_ActivateEndpoint+0x47e>
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	441a      	add	r2, r3
 80076b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80076b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	873b      	strh	r3, [r7, #56]	; 0x38
 80076d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01b      	beq.n	8007716 <USB_ActivateEndpoint+0x4ce>
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	441a      	add	r2, r3
 8007700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800770a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007712:	b29b      	uxth	r3, r3
 8007714:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	b29b      	uxth	r3, r3
 8007724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800772e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007730:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007734:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007736:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007738:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800773c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800774a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800774e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775a:	b29b      	uxth	r3, r3
 800775c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007774:	867b      	strh	r3, [r7, #50]	; 0x32
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	441a      	add	r2, r3
 8007780:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800778e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007792:	b29b      	uxth	r3, r3
 8007794:	8013      	strh	r3, [r2, #0]
 8007796:	e0ba      	b.n	800790e <USB_ActivateEndpoint+0x6c6>
=======
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008816:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	441a      	add	r2, r3
 8008824:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008830:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008838:	b29b      	uxth	r3, r3
 800883a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008846:	b29b      	uxth	r3, r3
 8008848:	461a      	mov	r2, r3
 800884a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800884c:	4413      	add	r3, r2
 800884e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	011a      	lsls	r2, r3, #4
 8008856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008858:	4413      	add	r3, r2
 800885a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800885e:	657b      	str	r3, [r7, #84]	; 0x54
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	891b      	ldrh	r3, [r3, #8]
 8008864:	085b      	lsrs	r3, r3, #1
 8008866:	b29b      	uxth	r3, r3
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	653b      	str	r3, [r7, #80]	; 0x50
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800887a:	b29b      	uxth	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008880:	4413      	add	r3, r2
 8008882:	653b      	str	r3, [r7, #80]	; 0x50
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	011a      	lsls	r2, r3, #4
 800888a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800888c:	4413      	add	r3, r2
 800888e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	895b      	ldrh	r3, [r3, #10]
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	b29b      	uxth	r3, r3
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	b29a      	uxth	r2, r3
 80088a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	785b      	ldrb	r3, [r3, #1]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f040 8091 	bne.w	80089d0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	881b      	ldrh	r3, [r3, #0]
 80088ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80088bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80088be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01b      	beq.n	80088fe <USB_ActivateEndpoint+0x47e>
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088dc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	441a      	add	r2, r3
 80088e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	873b      	strh	r3, [r7, #56]	; 0x38
 800890c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800890e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01b      	beq.n	800894e <USB_ActivateEndpoint+0x4ce>
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	b29b      	uxth	r3, r3
 8008924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	441a      	add	r2, r3
 8008938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800893a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800893e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008946:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800894a:	b29b      	uxth	r3, r3
 800894c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	4413      	add	r3, r2
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008964:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008966:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008968:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800896c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800896e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008970:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008974:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	441a      	add	r2, r3
 8008980:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800898a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008992:	b29b      	uxth	r3, r3
 8008994:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ac:	867b      	strh	r3, [r7, #50]	; 0x32
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]
 80089ce:	e0ba      	b.n	8008b46 <USB_ActivateEndpoint+0x6c6>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80077a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01d      	beq.n	80077f0 <USB_ActivateEndpoint+0x5a8>
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	881b      	ldrh	r3, [r3, #0]
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007800:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01d      	beq.n	8007848 <USB_ActivateEndpoint+0x600>
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007822:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	441a      	add	r2, r3
 8007830:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800783c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007844:	b29b      	uxth	r3, r3
 8007846:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	78db      	ldrb	r3, [r3, #3]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d024      	beq.n	800789a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007866:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800786a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800786e:	f083 0320 	eor.w	r3, r3, #32
 8007872:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	441a      	add	r2, r3
 8007880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007894:	b29b      	uxth	r3, r3
 8007896:	8013      	strh	r3, [r2, #0]
 8007898:	e01d      	b.n	80078d6 <USB_ActivateEndpoint+0x68e>
=======
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80089e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80089e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01d      	beq.n	8008a28 <USB_ActivateEndpoint+0x5a8>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	441a      	add	r2, r3
 8008a10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008a38:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01d      	beq.n	8008a80 <USB_ActivateEndpoint+0x600>
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	441a      	add	r2, r3
 8008a68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	78db      	ldrb	r3, [r3, #3]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d024      	beq.n	8008ad2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008aa2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008aa6:	f083 0320 	eor.w	r3, r3, #32
 8008aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008abc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	8013      	strh	r3, [r2, #0]
 8008ad0:	e01d      	b.n	8008b0e <USB_ActivateEndpoint+0x68e>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
<<<<<<< HEAD
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	881b      	ldrh	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	441a      	add	r2, r3
 80078f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80078fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]
=======
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	881b      	ldrh	r3, [r3, #0]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	441a      	add	r2, r3
 8008af6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b24:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	441a      	add	r2, r3
 8008b30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
    }
  }

  return ret;
<<<<<<< HEAD
 800790e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007912:	4618      	mov	r0, r3
 8007914:	376c      	adds	r7, #108	; 0x6c
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr

0800791c <USB_DeactivateEndpoint>:
=======
 8008b46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	376c      	adds	r7, #108	; 0x6c
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <USB_DeactivateEndpoint>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 800791c:	b480      	push	{r7}
 800791e:	b08d      	sub	sp, #52	; 0x34
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	7b1b      	ldrb	r3, [r3, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f040 808e 	bne.w	8007a4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	785b      	ldrb	r3, [r3, #1]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d044      	beq.n	80079c2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	81bb      	strh	r3, [r7, #12]
 8007946:	89bb      	ldrh	r3, [r7, #12]
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <USB_DeactivateEndpoint+0x6c>
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	817b      	strh	r3, [r7, #10]
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	441a      	add	r2, r3
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007980:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007984:	b29b      	uxth	r3, r3
 8007986:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799e:	813b      	strh	r3, [r7, #8]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	893b      	ldrh	r3, [r7, #8]
 80079ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079bc:	b29b      	uxth	r3, r3
 80079be:	8013      	strh	r3, [r2, #0]
 80079c0:	e192      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
=======
 8008b54:	b480      	push	{r7}
 8008b56:	b08d      	sub	sp, #52	; 0x34
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	7b1b      	ldrb	r3, [r3, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 808e 	bne.w	8008c84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d044      	beq.n	8008bfa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	81bb      	strh	r3, [r7, #12]
 8008b7e:	89bb      	ldrh	r3, [r7, #12]
 8008b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01b      	beq.n	8008bc0 <USB_DeactivateEndpoint+0x6c>
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	817b      	strh	r3, [r7, #10]
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	897b      	ldrh	r3, [r7, #10]
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd6:	813b      	strh	r3, [r7, #8]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	893b      	ldrh	r3, [r7, #8]
 8008be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8013      	strh	r3, [r2, #0]
 8008bf8:	e192      	b.n	8008f20 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	827b      	strh	r3, [r7, #18]
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01b      	beq.n	8007a12 <USB_DeactivateEndpoint+0xf6>
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f0:	823b      	strh	r3, [r7, #16]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	441a      	add	r2, r3
 80079fc:	8a3b      	ldrh	r3, [r7, #16]
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a28:	81fb      	strh	r3, [r7, #14]
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	89fb      	ldrh	r3, [r7, #14]
 8007a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]
 8007a4a:	e14d      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
=======
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	827b      	strh	r3, [r7, #18]
 8008c08:	8a7b      	ldrh	r3, [r7, #18]
 8008c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01b      	beq.n	8008c4a <USB_DeactivateEndpoint+0xf6>
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c28:	823b      	strh	r3, [r7, #16]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	441a      	add	r2, r3
 8008c34:	8a3b      	ldrh	r3, [r7, #16]
 8008c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c60:	81fb      	strh	r3, [r7, #14]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]
 8008c82:	e14d      	b.n	8008f20 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 6147058 (refactor)
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
<<<<<<< HEAD
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	f040 80a5 	bne.w	8007ba0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	843b      	strh	r3, [r7, #32]
 8007a64:	8c3b      	ldrh	r3, [r7, #32]
 8007a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d01b      	beq.n	8007aa6 <USB_DeactivateEndpoint+0x18a>
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	83fb      	strh	r3, [r7, #30]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	441a      	add	r2, r3
 8007a90:	8bfb      	ldrh	r3, [r7, #30]
 8007a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	83bb      	strh	r3, [r7, #28]
 8007ab4:	8bbb      	ldrh	r3, [r7, #28]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d01b      	beq.n	8007af6 <USB_DeactivateEndpoint+0x1da>
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad4:	837b      	strh	r3, [r7, #26]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	441a      	add	r2, r3
 8007ae0:	8b7b      	ldrh	r3, [r7, #26]
 8007ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0c:	833b      	strh	r3, [r7, #24]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	441a      	add	r2, r3
 8007b18:	8b3b      	ldrh	r3, [r7, #24]
 8007b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b44:	82fb      	strh	r3, [r7, #22]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	8afb      	ldrh	r3, [r7, #22]
 8007b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	4413      	add	r3, r2
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7c:	82bb      	strh	r3, [r7, #20]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	8abb      	ldrh	r3, [r7, #20]
 8007b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	8013      	strh	r3, [r2, #0]
 8007b9e:	e0a3      	b.n	8007ce8 <USB_DeactivateEndpoint+0x3cc>
=======
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	785b      	ldrb	r3, [r3, #1]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f040 80a5 	bne.w	8008dd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	843b      	strh	r3, [r7, #32]
 8008c9c:	8c3b      	ldrh	r3, [r7, #32]
 8008c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01b      	beq.n	8008cde <USB_DeactivateEndpoint+0x18a>
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbc:	83fb      	strh	r3, [r7, #30]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	8bfb      	ldrh	r3, [r7, #30]
 8008cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	881b      	ldrh	r3, [r3, #0]
 8008cea:	83bb      	strh	r3, [r7, #28]
 8008cec:	8bbb      	ldrh	r3, [r7, #28]
 8008cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01b      	beq.n	8008d2e <USB_DeactivateEndpoint+0x1da>
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0c:	837b      	strh	r3, [r7, #26]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	441a      	add	r2, r3
 8008d18:	8b7b      	ldrh	r3, [r7, #26]
 8008d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d44:	833b      	strh	r3, [r7, #24]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8b3b      	ldrh	r3, [r7, #24]
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7c:	82fb      	strh	r3, [r7, #22]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	441a      	add	r2, r3
 8008d88:	8afb      	ldrh	r3, [r7, #22]
 8008d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db4:	82bb      	strh	r3, [r7, #20]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	441a      	add	r2, r3
 8008dc0:	8abb      	ldrh	r3, [r7, #20]
 8008dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]
 8008dd6:	e0a3      	b.n	8008f20 <USB_DeactivateEndpoint+0x3cc>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007bae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01b      	beq.n	8007bf0 <USB_DeactivateEndpoint+0x2d4>
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	441a      	add	r2, r3
 8007bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007bfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01b      	beq.n	8007c40 <USB_DeactivateEndpoint+0x324>
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	441a      	add	r2, r3
 8007c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	441a      	add	r2, r3
 8007cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	8013      	strh	r3, [r2, #0]
=======
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	4413      	add	r3, r2
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01b      	beq.n	8008e28 <USB_DeactivateEndpoint+0x2d4>
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4413      	add	r3, r2
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	441a      	add	r2, r3
 8008e12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008e36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01b      	beq.n	8008e78 <USB_DeactivateEndpoint+0x324>
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e56:	853b      	strh	r3, [r7, #40]	; 0x28
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	441a      	add	r2, r3
 8008ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efe:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	441a      	add	r2, r3
 8008f0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3734      	adds	r7, #52	; 0x34
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <USB_EPStartXfer>:
=======
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3734      	adds	r7, #52	; 0x34
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr

08008f2c <USB_EPStartXfer>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b0c4      	sub	sp, #272	; 0x110
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	6018      	str	r0, [r3, #0]
 8007cfe:	463b      	mov	r3, r7
 8007d00:	6019      	str	r1, [r3, #0]
=======
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0c4      	sub	sp, #272	; 0x110
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	1d3b      	adds	r3, r7, #4
 8008f34:	6018      	str	r0, [r3, #0]
 8008f36:	463b      	mov	r3, r7
 8008f38:	6019      	str	r1, [r3, #0]
>>>>>>> 6147058 (refactor)
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
<<<<<<< HEAD
 8007d02:	463b      	mov	r3, r7
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	f040 8557 	bne.w	80087bc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007d0e:	463b      	mov	r3, r7
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	463b      	mov	r3, r7
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d905      	bls.n	8007d2a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007d1e:	463b      	mov	r3, r7
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d28:	e004      	b.n	8007d34 <USB_EPStartXfer+0x40>
=======
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	785b      	ldrb	r3, [r3, #1]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	f040 8557 	bne.w	80099f4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008f46:	463b      	mov	r3, r7
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	463b      	mov	r3, r7
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d905      	bls.n	8008f62 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008f56:	463b      	mov	r3, r7
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008f60:	e004      	b.n	8008f6c <USB_EPStartXfer+0x40>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      len = ep->xfer_len;
<<<<<<< HEAD
 8007d2a:	463b      	mov	r3, r7
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
=======
 8008f62:	463b      	mov	r3, r7
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	699b      	ldr	r3, [r3, #24]
 8008f68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
>>>>>>> 6147058 (refactor)
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 8007d34:	463b      	mov	r3, r7
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	7b1b      	ldrb	r3, [r3, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d12c      	bne.n	8007d98 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6959      	ldr	r1, [r3, #20]
 8007d44:	463b      	mov	r3, r7
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	88da      	ldrh	r2, [r3, #6]
 8007d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	1d38      	adds	r0, r7, #4
 8007d52:	6800      	ldr	r0, [r0, #0]
 8007d54:	f001 fa2c 	bl	80091b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	1d3b      	adds	r3, r7, #4
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
 8007d70:	463b      	mov	r3, r7
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	011a      	lsls	r2, r3, #4
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d80:	f107 0310 	add.w	r3, r7, #16
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	801a      	strh	r2, [r3, #0]
 8007d94:	f000 bcdd 	b.w	8008752 <USB_EPStartXfer+0xa5e>
=======
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	7b1b      	ldrb	r3, [r3, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d12c      	bne.n	8008fd0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008f76:	463b      	mov	r3, r7
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	6959      	ldr	r1, [r3, #20]
 8008f7c:	463b      	mov	r3, r7
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	88da      	ldrh	r2, [r3, #6]
 8008f82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	1d38      	adds	r0, r7, #4
 8008f8a:	6800      	ldr	r0, [r0, #0]
 8008f8c:	f001 fa2c 	bl	800a3e8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f90:	1d3b      	adds	r3, r7, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	617b      	str	r3, [r7, #20]
 8008fa8:	463b      	mov	r3, r7
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	011a      	lsls	r2, r3, #4
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008fb8:	f107 0310 	add.w	r3, r7, #16
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	f107 0310 	add.w	r3, r7, #16
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	801a      	strh	r2, [r3, #0]
 8008fcc:	f000 bcdd 	b.w	800998a <USB_EPStartXfer+0xa5e>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 8007d98:	463b      	mov	r3, r7
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	78db      	ldrb	r3, [r3, #3]
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	f040 8347 	bne.w	8008432 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	463b      	mov	r3, r7
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	f240 82eb 	bls.w	800838c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	463b      	mov	r3, r7
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	463b      	mov	r3, r7
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e04:	1ad2      	subs	r2, r2, r3
 8007e06:	463b      	mov	r3, r7
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e0c:	1d3b      	adds	r3, r7, #4
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	463b      	mov	r3, r7
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8159 	beq.w	80080da <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e28:	1d3b      	adds	r3, r7, #4
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2e:	463b      	mov	r3, r7
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d164      	bne.n	8007f02 <USB_EPStartXfer+0x20e>
 8007e38:	1d3b      	adds	r3, r7, #4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	4413      	add	r3, r2
 8007e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e50:	463b      	mov	r3, r7
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	011a      	lsls	r2, r3, #4
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d112      	bne.n	8007e90 <USB_EPStartXfer+0x19c>
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e78:	801a      	strh	r2, [r3, #0]
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	801a      	strh	r2, [r3, #0]
 8007e8e:	e054      	b.n	8007f3a <USB_EPStartXfer+0x246>
 8007e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e94:	2b3e      	cmp	r3, #62	; 0x3e
 8007e96:	d817      	bhi.n	8007ec8 <USB_EPStartXfer+0x1d4>
 8007e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e9c:	085b      	lsrs	r3, r3, #1
 8007e9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <USB_EPStartXfer+0x1c4>
 8007eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	029b      	lsls	r3, r3, #10
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	801a      	strh	r2, [r3, #0]
 8007ec6:	e038      	b.n	8007f3a <USB_EPStartXfer+0x246>
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <USB_EPStartXfer+0x1f4>
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	029b      	lsls	r3, r3, #10
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	801a      	strh	r2, [r3, #0]
 8007f00:	e01b      	b.n	8007f3a <USB_EPStartXfer+0x246>
 8007f02:	463b      	mov	r3, r7
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d116      	bne.n	8007f3a <USB_EPStartXfer+0x246>
 8007f0c:	1d3b      	adds	r3, r7, #4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	461a      	mov	r2, r3
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	4413      	add	r3, r2
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1e:	463b      	mov	r3, r7
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	011a      	lsls	r2, r3, #4
 8007f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f28:	4413      	add	r3, r2
 8007f2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	895b      	ldrh	r3, [r3, #10]
 8007f40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6959      	ldr	r1, [r3, #20]
 8007f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f54:	1d38      	adds	r0, r7, #4
 8007f56:	6800      	ldr	r0, [r0, #0]
 8007f58:	f001 f92a 	bl	80091b0 <USB_WritePMA>
            ep->xfer_buff += len;
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	695a      	ldr	r2, [r3, #20]
 8007f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f66:	441a      	add	r2, r3
 8007f68:	463b      	mov	r3, r7
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007f6e:	463b      	mov	r3, r7
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6a1a      	ldr	r2, [r3, #32]
 8007f74:	463b      	mov	r3, r7
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d909      	bls.n	8007f92 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007f7e:	463b      	mov	r3, r7
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6a1a      	ldr	r2, [r3, #32]
 8007f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f88:	1ad2      	subs	r2, r2, r3
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	621a      	str	r2, [r3, #32]
 8007f90:	e008      	b.n	8007fa4 <USB_EPStartXfer+0x2b0>
=======
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	78db      	ldrb	r3, [r3, #3]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	f040 8347 	bne.w	800966a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008fdc:	463b      	mov	r3, r7
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a1a      	ldr	r2, [r3, #32]
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	f240 82eb 	bls.w	80095c4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008fee:	1d3b      	adds	r3, r7, #4
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	463b      	mov	r3, r7
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800900c:	1d3b      	adds	r3, r7, #4
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	463b      	mov	r3, r7
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	441a      	add	r2, r3
 800901a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800901e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009026:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800902a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902e:	b29b      	uxth	r3, r3
 8009030:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009032:	463b      	mov	r3, r7
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800903c:	1ad2      	subs	r2, r2, r3
 800903e:	463b      	mov	r3, r7
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009044:	1d3b      	adds	r3, r7, #4
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	463b      	mov	r3, r7
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8159 	beq.w	8009312 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009060:	1d3b      	adds	r3, r7, #4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
 8009066:	463b      	mov	r3, r7
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d164      	bne.n	800913a <USB_EPStartXfer+0x20e>
 8009070:	1d3b      	adds	r3, r7, #4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009076:	1d3b      	adds	r3, r7, #4
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800907e:	b29b      	uxth	r3, r3
 8009080:	461a      	mov	r2, r3
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	4413      	add	r3, r2
 8009086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009088:	463b      	mov	r3, r7
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	011a      	lsls	r2, r3, #4
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	4413      	add	r3, r2
 8009094:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009098:	62bb      	str	r3, [r7, #40]	; 0x28
 800909a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d112      	bne.n	80090c8 <USB_EPStartXfer+0x19c>
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	e054      	b.n	8009172 <USB_EPStartXfer+0x246>
 80090c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090cc:	2b3e      	cmp	r3, #62	; 0x3e
 80090ce:	d817      	bhi.n	8009100 <USB_EPStartXfer+0x1d4>
 80090d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <USB_EPStartXfer+0x1c4>
 80090e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	029b      	lsls	r3, r3, #10
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fc:	801a      	strh	r2, [r3, #0]
 80090fe:	e038      	b.n	8009172 <USB_EPStartXfer+0x246>
 8009100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800910a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <USB_EPStartXfer+0x1f4>
 8009116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800911a:	3b01      	subs	r3, #1
 800911c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009124:	b29b      	uxth	r3, r3
 8009126:	029b      	lsls	r3, r3, #10
 8009128:	b29b      	uxth	r3, r3
 800912a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009132:	b29a      	uxth	r2, r3
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	e01b      	b.n	8009172 <USB_EPStartXfer+0x246>
 800913a:	463b      	mov	r3, r7
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d116      	bne.n	8009172 <USB_EPStartXfer+0x246>
 8009144:	1d3b      	adds	r3, r7, #4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800914c:	b29b      	uxth	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	4413      	add	r3, r2
 8009154:	637b      	str	r3, [r7, #52]	; 0x34
 8009156:	463b      	mov	r3, r7
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	011a      	lsls	r2, r3, #4
 800915e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009160:	4413      	add	r3, r2
 8009162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009166:	633b      	str	r3, [r7, #48]	; 0x30
 8009168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800916c:	b29a      	uxth	r2, r3
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009172:	463b      	mov	r3, r7
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	895b      	ldrh	r3, [r3, #10]
 8009178:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800917c:	463b      	mov	r3, r7
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6959      	ldr	r1, [r3, #20]
 8009182:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009186:	b29b      	uxth	r3, r3
 8009188:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800918c:	1d38      	adds	r0, r7, #4
 800918e:	6800      	ldr	r0, [r0, #0]
 8009190:	f001 f92a 	bl	800a3e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009194:	463b      	mov	r3, r7
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695a      	ldr	r2, [r3, #20]
 800919a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800919e:	441a      	add	r2, r3
 80091a0:	463b      	mov	r3, r7
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091a6:	463b      	mov	r3, r7
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a1a      	ldr	r2, [r3, #32]
 80091ac:	463b      	mov	r3, r7
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d909      	bls.n	80091ca <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80091b6:	463b      	mov	r3, r7
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091c0:	1ad2      	subs	r2, r2, r3
 80091c2:	463b      	mov	r3, r7
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	621a      	str	r2, [r3, #32]
 80091c8:	e008      	b.n	80091dc <USB_EPStartXfer+0x2b0>
>>>>>>> 6147058 (refactor)
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 8007f92:	463b      	mov	r3, r7
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007f9c:	463b      	mov	r3, r7
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	621a      	str	r2, [r3, #32]
=======
 80091ca:	463b      	mov	r3, r7
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80091d4:	463b      	mov	r3, r7
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	621a      	str	r2, [r3, #32]
>>>>>>> 6147058 (refactor)
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	785b      	ldrb	r3, [r3, #1]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d164      	bne.n	8008078 <USB_EPStartXfer+0x384>
 8007fae:	1d3b      	adds	r3, r7, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	1d3b      	adds	r3, r7, #4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	011a      	lsls	r2, r3, #4
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fd6:	61bb      	str	r3, [r7, #24]
 8007fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d112      	bne.n	8008006 <USB_EPStartXfer+0x312>
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	881b      	ldrh	r3, [r3, #0]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	801a      	strh	r2, [r3, #0]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	801a      	strh	r2, [r3, #0]
 8008004:	e057      	b.n	80080b6 <USB_EPStartXfer+0x3c2>
 8008006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800a:	2b3e      	cmp	r3, #62	; 0x3e
 800800c:	d817      	bhi.n	800803e <USB_EPStartXfer+0x34a>
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008012:	085b      	lsrs	r3, r3, #1
 8008014:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <USB_EPStartXfer+0x33a>
 8008024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008028:	3301      	adds	r3, #1
 800802a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800802e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008032:	b29b      	uxth	r3, r3
 8008034:	029b      	lsls	r3, r3, #10
 8008036:	b29a      	uxth	r2, r3
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	e03b      	b.n	80080b6 <USB_EPStartXfer+0x3c2>
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	2b00      	cmp	r3, #0
 8008052:	d104      	bne.n	800805e <USB_EPStartXfer+0x36a>
 8008054:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008058:	3b01      	subs	r3, #1
 800805a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800805e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008062:	b29b      	uxth	r3, r3
 8008064:	029b      	lsls	r3, r3, #10
 8008066:	b29b      	uxth	r3, r3
 8008068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008070:	b29a      	uxth	r2, r3
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	e01e      	b.n	80080b6 <USB_EPStartXfer+0x3c2>
 8008078:	463b      	mov	r3, r7
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d119      	bne.n	80080b6 <USB_EPStartXfer+0x3c2>
 8008082:	1d3b      	adds	r3, r7, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
 8008088:	1d3b      	adds	r3, r7, #4
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008090:	b29b      	uxth	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	4413      	add	r3, r2
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
 800809a:	463b      	mov	r3, r7
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	011a      	lsls	r2, r3, #4
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080aa:	623b      	str	r3, [r7, #32]
 80080ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	891b      	ldrh	r3, [r3, #8]
 80080bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c0:	463b      	mov	r3, r7
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6959      	ldr	r1, [r3, #20]
 80080c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80080d0:	1d38      	adds	r0, r7, #4
 80080d2:	6800      	ldr	r0, [r0, #0]
 80080d4:	f001 f86c 	bl	80091b0 <USB_WritePMA>
 80080d8:	e33b      	b.n	8008752 <USB_EPStartXfer+0xa5e>
=======
 80091dc:	463b      	mov	r3, r7
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	785b      	ldrb	r3, [r3, #1]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d164      	bne.n	80092b0 <USB_EPStartXfer+0x384>
 80091e6:	1d3b      	adds	r3, r7, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	1d3b      	adds	r3, r7, #4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	4413      	add	r3, r2
 80091fc:	61fb      	str	r3, [r7, #28]
 80091fe:	463b      	mov	r3, r7
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	011a      	lsls	r2, r3, #4
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4413      	add	r3, r2
 800920a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800920e:	61bb      	str	r3, [r7, #24]
 8009210:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009214:	2b00      	cmp	r3, #0
 8009216:	d112      	bne.n	800923e <USB_EPStartXfer+0x312>
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009222:	b29a      	uxth	r2, r3
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009236:	b29a      	uxth	r2, r3
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	801a      	strh	r2, [r3, #0]
 800923c:	e057      	b.n	80092ee <USB_EPStartXfer+0x3c2>
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009242:	2b3e      	cmp	r3, #62	; 0x3e
 8009244:	d817      	bhi.n	8009276 <USB_EPStartXfer+0x34a>
 8009246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800924a:	085b      	lsrs	r3, r3, #1
 800924c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <USB_EPStartXfer+0x33a>
 800925c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009260:	3301      	adds	r3, #1
 8009262:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800926a:	b29b      	uxth	r3, r3
 800926c:	029b      	lsls	r3, r3, #10
 800926e:	b29a      	uxth	r2, r3
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	e03b      	b.n	80092ee <USB_EPStartXfer+0x3c2>
 8009276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800927a:	095b      	lsrs	r3, r3, #5
 800927c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009284:	f003 031f 	and.w	r3, r3, #31
 8009288:	2b00      	cmp	r3, #0
 800928a:	d104      	bne.n	8009296 <USB_EPStartXfer+0x36a>
 800928c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009290:	3b01      	subs	r3, #1
 8009292:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009296:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800929a:	b29b      	uxth	r3, r3
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	801a      	strh	r2, [r3, #0]
 80092ae:	e01e      	b.n	80092ee <USB_EPStartXfer+0x3c2>
 80092b0:	463b      	mov	r3, r7
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	785b      	ldrb	r3, [r3, #1]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d119      	bne.n	80092ee <USB_EPStartXfer+0x3c2>
 80092ba:	1d3b      	adds	r3, r7, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	627b      	str	r3, [r7, #36]	; 0x24
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	461a      	mov	r2, r3
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	4413      	add	r3, r2
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
 80092d2:	463b      	mov	r3, r7
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	011a      	lsls	r2, r3, #4
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	4413      	add	r3, r2
 80092de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092e2:	623b      	str	r3, [r7, #32]
 80092e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092ee:	463b      	mov	r3, r7
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	891b      	ldrh	r3, [r3, #8]
 80092f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092f8:	463b      	mov	r3, r7
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6959      	ldr	r1, [r3, #20]
 80092fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009302:	b29b      	uxth	r3, r3
 8009304:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009308:	1d38      	adds	r0, r7, #4
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	f001 f86c 	bl	800a3e8 <USB_WritePMA>
 8009310:	e33b      	b.n	800998a <USB_EPStartXfer+0xa5e>
>>>>>>> 6147058 (refactor)
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 80080da:	463b      	mov	r3, r7
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d164      	bne.n	80081ae <USB_EPStartXfer+0x4ba>
 80080e4:	1d3b      	adds	r3, r7, #4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080ea:	1d3b      	adds	r3, r7, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f8:	4413      	add	r3, r2
 80080fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080fc:	463b      	mov	r3, r7
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	011a      	lsls	r2, r3, #4
 8008104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008106:	4413      	add	r3, r2
 8008108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800810c:	64bb      	str	r3, [r7, #72]	; 0x48
 800810e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008112:	2b00      	cmp	r3, #0
 8008114:	d112      	bne.n	800813c <USB_EPStartXfer+0x448>
 8008116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008120:	b29a      	uxth	r2, r3
 8008122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008134:	b29a      	uxth	r2, r3
 8008136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	e057      	b.n	80081ec <USB_EPStartXfer+0x4f8>
 800813c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008140:	2b3e      	cmp	r3, #62	; 0x3e
 8008142:	d817      	bhi.n	8008174 <USB_EPStartXfer+0x480>
 8008144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008148:	085b      	lsrs	r3, r3, #1
 800814a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800814e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d004      	beq.n	8008164 <USB_EPStartXfer+0x470>
 800815a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800815e:	3301      	adds	r3, #1
 8008160:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008168:	b29b      	uxth	r3, r3
 800816a:	029b      	lsls	r3, r3, #10
 800816c:	b29a      	uxth	r2, r3
 800816e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008170:	801a      	strh	r2, [r3, #0]
 8008172:	e03b      	b.n	80081ec <USB_EPStartXfer+0x4f8>
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <USB_EPStartXfer+0x4a0>
 800818a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800818e:	3b01      	subs	r3, #1
 8008190:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008198:	b29b      	uxth	r3, r3
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081aa:	801a      	strh	r2, [r3, #0]
 80081ac:	e01e      	b.n	80081ec <USB_EPStartXfer+0x4f8>
 80081ae:	463b      	mov	r3, r7
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d119      	bne.n	80081ec <USB_EPStartXfer+0x4f8>
 80081b8:	1d3b      	adds	r3, r7, #4
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	657b      	str	r3, [r7, #84]	; 0x54
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081cc:	4413      	add	r3, r2
 80081ce:	657b      	str	r3, [r7, #84]	; 0x54
 80081d0:	463b      	mov	r3, r7
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	011a      	lsls	r2, r3, #4
 80081d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081da:	4413      	add	r3, r2
 80081dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081e0:	653b      	str	r3, [r7, #80]	; 0x50
 80081e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081ec:	463b      	mov	r3, r7
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	891b      	ldrh	r3, [r3, #8]
 80081f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f6:	463b      	mov	r3, r7
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008200:	b29b      	uxth	r3, r3
 8008202:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008206:	1d38      	adds	r0, r7, #4
 8008208:	6800      	ldr	r0, [r0, #0]
 800820a:	f000 ffd1 	bl	80091b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695a      	ldr	r2, [r3, #20]
 8008214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008218:	441a      	add	r2, r3
 800821a:	463b      	mov	r3, r7
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008220:	463b      	mov	r3, r7
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6a1a      	ldr	r2, [r3, #32]
 8008226:	463b      	mov	r3, r7
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	429a      	cmp	r2, r3
 800822e:	d909      	bls.n	8008244 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008230:	463b      	mov	r3, r7
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a1a      	ldr	r2, [r3, #32]
 8008236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	463b      	mov	r3, r7
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	621a      	str	r2, [r3, #32]
 8008242:	e008      	b.n	8008256 <USB_EPStartXfer+0x562>
=======
 8009312:	463b      	mov	r3, r7
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	785b      	ldrb	r3, [r3, #1]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d164      	bne.n	80093e6 <USB_EPStartXfer+0x4ba>
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800932a:	b29b      	uxth	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009330:	4413      	add	r3, r2
 8009332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009334:	463b      	mov	r3, r7
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	011a      	lsls	r2, r3, #4
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	4413      	add	r3, r2
 8009340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009344:	64bb      	str	r3, [r7, #72]	; 0x48
 8009346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d112      	bne.n	8009374 <USB_EPStartXfer+0x448>
 800934e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009350:	881b      	ldrh	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009358:	b29a      	uxth	r2, r3
 800935a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936c:	b29a      	uxth	r2, r3
 800936e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009370:	801a      	strh	r2, [r3, #0]
 8009372:	e057      	b.n	8009424 <USB_EPStartXfer+0x4f8>
 8009374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009378:	2b3e      	cmp	r3, #62	; 0x3e
 800937a:	d817      	bhi.n	80093ac <USB_EPStartXfer+0x480>
 800937c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009380:	085b      	lsrs	r3, r3, #1
 8009382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800938a:	f003 0301 	and.w	r3, r3, #1
 800938e:	2b00      	cmp	r3, #0
 8009390:	d004      	beq.n	800939c <USB_EPStartXfer+0x470>
 8009392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009396:	3301      	adds	r3, #1
 8009398:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800939c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	029b      	lsls	r3, r3, #10
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	e03b      	b.n	8009424 <USB_EPStartXfer+0x4f8>
 80093ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d104      	bne.n	80093cc <USB_EPStartXfer+0x4a0>
 80093c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093c6:	3b01      	subs	r3, #1
 80093c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80093cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	029b      	lsls	r3, r3, #10
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093de:	b29a      	uxth	r2, r3
 80093e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	e01e      	b.n	8009424 <USB_EPStartXfer+0x4f8>
 80093e6:	463b      	mov	r3, r7
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	785b      	ldrb	r3, [r3, #1]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d119      	bne.n	8009424 <USB_EPStartXfer+0x4f8>
 80093f0:	1d3b      	adds	r3, r7, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	657b      	str	r3, [r7, #84]	; 0x54
 80093f6:	1d3b      	adds	r3, r7, #4
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093fe:	b29b      	uxth	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009404:	4413      	add	r3, r2
 8009406:	657b      	str	r3, [r7, #84]	; 0x54
 8009408:	463b      	mov	r3, r7
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	011a      	lsls	r2, r3, #4
 8009410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009412:	4413      	add	r3, r2
 8009414:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009418:	653b      	str	r3, [r7, #80]	; 0x50
 800941a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800941e:	b29a      	uxth	r2, r3
 8009420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009422:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009424:	463b      	mov	r3, r7
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	891b      	ldrh	r3, [r3, #8]
 800942a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6959      	ldr	r1, [r3, #20]
 8009434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009438:	b29b      	uxth	r3, r3
 800943a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800943e:	1d38      	adds	r0, r7, #4
 8009440:	6800      	ldr	r0, [r0, #0]
 8009442:	f000 ffd1 	bl	800a3e8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009446:	463b      	mov	r3, r7
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	695a      	ldr	r2, [r3, #20]
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009450:	441a      	add	r2, r3
 8009452:	463b      	mov	r3, r7
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009458:	463b      	mov	r3, r7
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	463b      	mov	r3, r7
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	429a      	cmp	r2, r3
 8009466:	d909      	bls.n	800947c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8009468:	463b      	mov	r3, r7
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009472:	1ad2      	subs	r2, r2, r3
 8009474:	463b      	mov	r3, r7
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	621a      	str	r2, [r3, #32]
 800947a:	e008      	b.n	800948e <USB_EPStartXfer+0x562>
>>>>>>> 6147058 (refactor)
            }
            else
            {
              len = ep->xfer_len_db;
<<<<<<< HEAD
 8008244:	463b      	mov	r3, r7
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800824e:	463b      	mov	r3, r7
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	621a      	str	r2, [r3, #32]
=======
 800947c:	463b      	mov	r3, r7
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2200      	movs	r2, #0
 800948c:	621a      	str	r2, [r3, #32]
>>>>>>> 6147058 (refactor)
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 8008256:	1d3b      	adds	r3, r7, #4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	647b      	str	r3, [r7, #68]	; 0x44
 800825c:	463b      	mov	r3, r7
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d164      	bne.n	8008330 <USB_EPStartXfer+0x63c>
 8008266:	1d3b      	adds	r3, r7, #4
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008274:	b29b      	uxth	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800827a:	4413      	add	r3, r2
 800827c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	011a      	lsls	r2, r3, #4
 8008286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008288:	4413      	add	r3, r2
 800828a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800828e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d112      	bne.n	80082be <USB_EPStartXfer+0x5ca>
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	801a      	strh	r2, [r3, #0]
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	e054      	b.n	8008368 <USB_EPStartXfer+0x674>
 80082be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082c2:	2b3e      	cmp	r3, #62	; 0x3e
 80082c4:	d817      	bhi.n	80082f6 <USB_EPStartXfer+0x602>
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d004      	beq.n	80082e6 <USB_EPStartXfer+0x5f2>
 80082dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082e0:	3301      	adds	r3, #1
 80082e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e038      	b.n	8008368 <USB_EPStartXfer+0x674>
 80082f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <USB_EPStartXfer+0x622>
 800830c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008310:	3b01      	subs	r3, #1
 8008312:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800831a:	b29b      	uxth	r3, r3
 800831c:	029b      	lsls	r3, r3, #10
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008328:	b29a      	uxth	r2, r3
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e01b      	b.n	8008368 <USB_EPStartXfer+0x674>
 8008330:	463b      	mov	r3, r7
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	785b      	ldrb	r3, [r3, #1]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d116      	bne.n	8008368 <USB_EPStartXfer+0x674>
 800833a:	1d3b      	adds	r3, r7, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008348:	4413      	add	r3, r2
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	463b      	mov	r3, r7
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	011a      	lsls	r2, r3, #4
 8008354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008356:	4413      	add	r3, r2
 8008358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800835c:	643b      	str	r3, [r7, #64]	; 0x40
 800835e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008362:	b29a      	uxth	r2, r3
 8008364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008366:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008368:	463b      	mov	r3, r7
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	895b      	ldrh	r3, [r3, #10]
 800836e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008372:	463b      	mov	r3, r7
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6959      	ldr	r1, [r3, #20]
 8008378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800837c:	b29b      	uxth	r3, r3
 800837e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008382:	1d38      	adds	r0, r7, #4
 8008384:	6800      	ldr	r0, [r0, #0]
 8008386:	f000 ff13 	bl	80091b0 <USB_WritePMA>
 800838a:	e1e2      	b.n	8008752 <USB_EPStartXfer+0xa5e>
=======
 800948e:	1d3b      	adds	r3, r7, #4
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	647b      	str	r3, [r7, #68]	; 0x44
 8009494:	463b      	mov	r3, r7
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d164      	bne.n	8009568 <USB_EPStartXfer+0x63c>
 800949e:	1d3b      	adds	r3, r7, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a4:	1d3b      	adds	r3, r7, #4
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	461a      	mov	r2, r3
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	4413      	add	r3, r2
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b6:	463b      	mov	r3, r7
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	011a      	lsls	r2, r3, #4
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	4413      	add	r3, r2
 80094c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d112      	bne.n	80094f6 <USB_EPStartXfer+0x5ca>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094da:	b29a      	uxth	r2, r3
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	801a      	strh	r2, [r3, #0]
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	801a      	strh	r2, [r3, #0]
 80094f4:	e054      	b.n	80095a0 <USB_EPStartXfer+0x674>
 80094f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094fa:	2b3e      	cmp	r3, #62	; 0x3e
 80094fc:	d817      	bhi.n	800952e <USB_EPStartXfer+0x602>
 80094fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <USB_EPStartXfer+0x5f2>
 8009514:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009518:	3301      	adds	r3, #1
 800951a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800951e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009522:	b29b      	uxth	r3, r3
 8009524:	029b      	lsls	r3, r3, #10
 8009526:	b29a      	uxth	r2, r3
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	e038      	b.n	80095a0 <USB_EPStartXfer+0x674>
 800952e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009532:	095b      	lsrs	r3, r3, #5
 8009534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800953c:	f003 031f 	and.w	r3, r3, #31
 8009540:	2b00      	cmp	r3, #0
 8009542:	d104      	bne.n	800954e <USB_EPStartXfer+0x622>
 8009544:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009548:	3b01      	subs	r3, #1
 800954a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800954e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009552:	b29b      	uxth	r3, r3
 8009554:	029b      	lsls	r3, r3, #10
 8009556:	b29b      	uxth	r3, r3
 8009558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009560:	b29a      	uxth	r2, r3
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	e01b      	b.n	80095a0 <USB_EPStartXfer+0x674>
 8009568:	463b      	mov	r3, r7
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d116      	bne.n	80095a0 <USB_EPStartXfer+0x674>
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957a:	b29b      	uxth	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009580:	4413      	add	r3, r2
 8009582:	647b      	str	r3, [r7, #68]	; 0x44
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	011a      	lsls	r2, r3, #4
 800958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958e:	4413      	add	r3, r2
 8009590:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009594:	643b      	str	r3, [r7, #64]	; 0x40
 8009596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800959a:	b29a      	uxth	r2, r3
 800959c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800959e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80095a0:	463b      	mov	r3, r7
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	895b      	ldrh	r3, [r3, #10]
 80095a6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095aa:	463b      	mov	r3, r7
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6959      	ldr	r1, [r3, #20]
 80095b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80095ba:	1d38      	adds	r0, r7, #4
 80095bc:	6800      	ldr	r0, [r0, #0]
 80095be:	f000 ff13 	bl	800a3e8 <USB_WritePMA>
 80095c2:	e1e2      	b.n	800998a <USB_EPStartXfer+0xa5e>
>>>>>>> 6147058 (refactor)
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
<<<<<<< HEAD
 800838c:	463b      	mov	r3, r7
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008396:	1d3b      	adds	r3, r7, #4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	463b      	mov	r3, r7
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	881b      	ldrh	r3, [r3, #0]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80083ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80083b4:	1d3b      	adds	r3, r7, #4
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	463b      	mov	r3, r7
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80083c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	663b      	str	r3, [r7, #96]	; 0x60
 80083e0:	1d3b      	adds	r3, r7, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ee:	4413      	add	r3, r2
 80083f0:	663b      	str	r3, [r7, #96]	; 0x60
 80083f2:	463b      	mov	r3, r7
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	011a      	lsls	r2, r3, #4
 80083fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008408:	b29a      	uxth	r2, r3
 800840a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800840c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800840e:	463b      	mov	r3, r7
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008418:	463b      	mov	r3, r7
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6959      	ldr	r1, [r3, #20]
 800841e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008422:	b29b      	uxth	r3, r3
 8008424:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008428:	1d38      	adds	r0, r7, #4
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	f000 fec0 	bl	80091b0 <USB_WritePMA>
 8008430:	e18f      	b.n	8008752 <USB_EPStartXfer+0xa5e>
=======
 80095c4:	463b      	mov	r3, r7
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80095ce:	1d3b      	adds	r3, r7, #4
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	463b      	mov	r3, r7
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80095e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	463b      	mov	r3, r7
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	441a      	add	r2, r3
 80095fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80095fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800960a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960e:	b29b      	uxth	r3, r3
 8009610:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009612:	1d3b      	adds	r3, r7, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	663b      	str	r3, [r7, #96]	; 0x60
 8009618:	1d3b      	adds	r3, r7, #4
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009620:	b29b      	uxth	r3, r3
 8009622:	461a      	mov	r2, r3
 8009624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009626:	4413      	add	r3, r2
 8009628:	663b      	str	r3, [r7, #96]	; 0x60
 800962a:	463b      	mov	r3, r7
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	011a      	lsls	r2, r3, #4
 8009632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009634:	4413      	add	r3, r2
 8009636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800963a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800963c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009640:	b29a      	uxth	r2, r3
 8009642:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009644:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009646:	463b      	mov	r3, r7
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	891b      	ldrh	r3, [r3, #8]
 800964c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009650:	463b      	mov	r3, r7
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	6959      	ldr	r1, [r3, #20]
 8009656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800965a:	b29b      	uxth	r3, r3
 800965c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009660:	1d38      	adds	r0, r7, #4
 8009662:	6800      	ldr	r0, [r0, #0]
 8009664:	f000 fec0 	bl	800a3e8 <USB_WritePMA>
 8009668:	e18f      	b.n	800998a <USB_EPStartXfer+0xa5e>
>>>>>>> 6147058 (refactor)

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
<<<<<<< HEAD
 8008432:	1d3b      	adds	r3, r7, #4
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	463b      	mov	r3, r7
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	b29b      	uxth	r3, r3
 8008444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 808f 	beq.w	800856c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	67bb      	str	r3, [r7, #120]	; 0x78
 8008454:	463b      	mov	r3, r7
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d164      	bne.n	8008528 <USB_EPStartXfer+0x834>
 800845e:	1d3b      	adds	r3, r7, #4
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	673b      	str	r3, [r7, #112]	; 0x70
 8008464:	1d3b      	adds	r3, r7, #4
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846c:	b29b      	uxth	r3, r3
 800846e:	461a      	mov	r2, r3
 8008470:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008472:	4413      	add	r3, r2
 8008474:	673b      	str	r3, [r7, #112]	; 0x70
 8008476:	463b      	mov	r3, r7
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	011a      	lsls	r2, r3, #4
 800847e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008480:	4413      	add	r3, r2
 8008482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008488:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d112      	bne.n	80084b6 <USB_EPStartXfer+0x7c2>
 8008490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800849a:	b29a      	uxth	r2, r3
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	801a      	strh	r2, [r3, #0]
 80084a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b2:	801a      	strh	r2, [r3, #0]
 80084b4:	e054      	b.n	8008560 <USB_EPStartXfer+0x86c>
 80084b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ba:	2b3e      	cmp	r3, #62	; 0x3e
 80084bc:	d817      	bhi.n	80084ee <USB_EPStartXfer+0x7fa>
 80084be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <USB_EPStartXfer+0x7ea>
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	3301      	adds	r3, #1
 80084da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	029b      	lsls	r3, r3, #10
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e038      	b.n	8008560 <USB_EPStartXfer+0x86c>
 80084ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <USB_EPStartXfer+0x81a>
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008508:	3b01      	subs	r3, #1
 800850a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800850e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008512:	b29b      	uxth	r3, r3
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008520:	b29a      	uxth	r2, r3
 8008522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008524:	801a      	strh	r2, [r3, #0]
 8008526:	e01b      	b.n	8008560 <USB_EPStartXfer+0x86c>
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d116      	bne.n	8008560 <USB_EPStartXfer+0x86c>
 8008532:	1d3b      	adds	r3, r7, #4
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008540:	4413      	add	r3, r2
 8008542:	67bb      	str	r3, [r7, #120]	; 0x78
 8008544:	463b      	mov	r3, r7
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	011a      	lsls	r2, r3, #4
 800854c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800854e:	4413      	add	r3, r2
 8008550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008554:	677b      	str	r3, [r7, #116]	; 0x74
 8008556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800855a:	b29a      	uxth	r2, r3
 800855c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800855e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008560:	463b      	mov	r3, r7
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	895b      	ldrh	r3, [r3, #10]
 8008566:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800856a:	e097      	b.n	800869c <USB_EPStartXfer+0x9a8>
=======
 800966a:	1d3b      	adds	r3, r7, #4
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	463b      	mov	r3, r7
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29b      	uxth	r3, r3
 800967c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 808f 	beq.w	80097a4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009686:	1d3b      	adds	r3, r7, #4
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	67bb      	str	r3, [r7, #120]	; 0x78
 800968c:	463b      	mov	r3, r7
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	785b      	ldrb	r3, [r3, #1]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d164      	bne.n	8009760 <USB_EPStartXfer+0x834>
 8009696:	1d3b      	adds	r3, r7, #4
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	673b      	str	r3, [r7, #112]	; 0x70
 800969c:	1d3b      	adds	r3, r7, #4
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096aa:	4413      	add	r3, r2
 80096ac:	673b      	str	r3, [r7, #112]	; 0x70
 80096ae:	463b      	mov	r3, r7
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	011a      	lsls	r2, r3, #4
 80096b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096b8:	4413      	add	r3, r2
 80096ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d112      	bne.n	80096ee <USB_EPStartXfer+0x7c2>
 80096c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d6:	801a      	strh	r2, [r3, #0]
 80096d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ea:	801a      	strh	r2, [r3, #0]
 80096ec:	e054      	b.n	8009798 <USB_EPStartXfer+0x86c>
 80096ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096f2:	2b3e      	cmp	r3, #62	; 0x3e
 80096f4:	d817      	bhi.n	8009726 <USB_EPStartXfer+0x7fa>
 80096f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <USB_EPStartXfer+0x7ea>
 800970c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009710:	3301      	adds	r3, #1
 8009712:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971a:	b29b      	uxth	r3, r3
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	b29a      	uxth	r2, r3
 8009720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	e038      	b.n	8009798 <USB_EPStartXfer+0x86c>
 8009726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800972a:	095b      	lsrs	r3, r3, #5
 800972c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	2b00      	cmp	r3, #0
 800973a:	d104      	bne.n	8009746 <USB_EPStartXfer+0x81a>
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009740:	3b01      	subs	r3, #1
 8009742:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974a:	b29b      	uxth	r3, r3
 800974c:	029b      	lsls	r3, r3, #10
 800974e:	b29b      	uxth	r3, r3
 8009750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009758:	b29a      	uxth	r2, r3
 800975a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	e01b      	b.n	8009798 <USB_EPStartXfer+0x86c>
 8009760:	463b      	mov	r3, r7
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d116      	bne.n	8009798 <USB_EPStartXfer+0x86c>
 800976a:	1d3b      	adds	r3, r7, #4
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009772:	b29b      	uxth	r3, r3
 8009774:	461a      	mov	r2, r3
 8009776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009778:	4413      	add	r3, r2
 800977a:	67bb      	str	r3, [r7, #120]	; 0x78
 800977c:	463b      	mov	r3, r7
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	011a      	lsls	r2, r3, #4
 8009784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009786:	4413      	add	r3, r2
 8009788:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800978c:	677b      	str	r3, [r7, #116]	; 0x74
 800978e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009792:	b29a      	uxth	r2, r3
 8009794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009796:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009798:	463b      	mov	r3, r7
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	895b      	ldrh	r3, [r3, #10]
 800979e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80097a2:	e097      	b.n	80098d4 <USB_EPStartXfer+0x9a8>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
<<<<<<< HEAD
 800856c:	463b      	mov	r3, r7
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d168      	bne.n	8008648 <USB_EPStartXfer+0x954>
 8008576:	1d3b      	adds	r3, r7, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800857e:	1d3b      	adds	r3, r7, #4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008586:	b29b      	uxth	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800858e:	4413      	add	r3, r2
 8008590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008594:	463b      	mov	r3, r7
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	011a      	lsls	r2, r3, #4
 800859c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085a0:	4413      	add	r3, r2
 80085a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80085a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80085a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d112      	bne.n	80085d6 <USB_EPStartXfer+0x8e2>
 80085b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e05d      	b.n	8008692 <USB_EPStartXfer+0x99e>
 80085d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085da:	2b3e      	cmp	r3, #62	; 0x3e
 80085dc:	d817      	bhi.n	800860e <USB_EPStartXfer+0x91a>
 80085de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e2:	085b      	lsrs	r3, r3, #1
 80085e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <USB_EPStartXfer+0x90a>
 80085f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80085f8:	3301      	adds	r3, #1
 80085fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80085fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008602:	b29b      	uxth	r3, r3
 8008604:	029b      	lsls	r3, r3, #10
 8008606:	b29a      	uxth	r2, r3
 8008608:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	e041      	b.n	8008692 <USB_EPStartXfer+0x99e>
 800860e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008612:	095b      	lsrs	r3, r3, #5
 8008614:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800861c:	f003 031f 	and.w	r3, r3, #31
 8008620:	2b00      	cmp	r3, #0
 8008622:	d104      	bne.n	800862e <USB_EPStartXfer+0x93a>
 8008624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008628:	3b01      	subs	r3, #1
 800862a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800862e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008632:	b29b      	uxth	r3, r3
 8008634:	029b      	lsls	r3, r3, #10
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008640:	b29a      	uxth	r2, r3
 8008642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008644:	801a      	strh	r2, [r3, #0]
 8008646:	e024      	b.n	8008692 <USB_EPStartXfer+0x99e>
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d11f      	bne.n	8008692 <USB_EPStartXfer+0x99e>
 8008652:	1d3b      	adds	r3, r7, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008662:	b29b      	uxth	r3, r3
 8008664:	461a      	mov	r2, r3
 8008666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800866a:	4413      	add	r3, r2
 800866c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008670:	463b      	mov	r3, r7
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	011a      	lsls	r2, r3, #4
 8008678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800867c:	4413      	add	r3, r2
 800867e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800868a:	b29a      	uxth	r2, r3
 800868c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008692:	463b      	mov	r3, r7
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	891b      	ldrh	r3, [r3, #8]
 8008698:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800869c:	463b      	mov	r3, r7
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6959      	ldr	r1, [r3, #20]
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80086ac:	1d38      	adds	r0, r7, #4
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	f000 fd7e 	bl	80091b0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80086b4:	463b      	mov	r3, r7
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d122      	bne.n	8008704 <USB_EPStartXfer+0xa10>
 80086be:	1d3b      	adds	r3, r7, #4
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	463b      	mov	r3, r7
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80086dc:	1d3b      	adds	r3, r7, #4
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	463b      	mov	r3, r7
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	441a      	add	r2, r3
 80086ea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
 8008702:	e026      	b.n	8008752 <USB_EPStartXfer+0xa5e>
 8008704:	463b      	mov	r3, r7
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	785b      	ldrb	r3, [r3, #1]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d121      	bne.n	8008752 <USB_EPStartXfer+0xa5e>
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	463b      	mov	r3, r7
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008728:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800872c:	1d3b      	adds	r3, r7, #4
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	463b      	mov	r3, r7
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800873e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800874a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874e:	b29b      	uxth	r3, r3
 8008750:	8013      	strh	r3, [r2, #0]
=======
 80097a4:	463b      	mov	r3, r7
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d168      	bne.n	8009880 <USB_EPStartXfer+0x954>
 80097ae:	1d3b      	adds	r3, r7, #4
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097b6:	1d3b      	adds	r3, r7, #4
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097be:	b29b      	uxth	r3, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097c6:	4413      	add	r3, r2
 80097c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097cc:	463b      	mov	r3, r7
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	011a      	lsls	r2, r3, #4
 80097d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097d8:	4413      	add	r3, r2
 80097da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d112      	bne.n	800980e <USB_EPStartXfer+0x8e2>
 80097e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097f6:	801a      	strh	r2, [r3, #0]
 80097f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009806:	b29a      	uxth	r2, r3
 8009808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	e05d      	b.n	80098ca <USB_EPStartXfer+0x99e>
 800980e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009812:	2b3e      	cmp	r3, #62	; 0x3e
 8009814:	d817      	bhi.n	8009846 <USB_EPStartXfer+0x91a>
 8009816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800981a:	085b      	lsrs	r3, r3, #1
 800981c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d004      	beq.n	8009836 <USB_EPStartXfer+0x90a>
 800982c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009830:	3301      	adds	r3, #1
 8009832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800983a:	b29b      	uxth	r3, r3
 800983c:	029b      	lsls	r3, r3, #10
 800983e:	b29a      	uxth	r2, r3
 8009840:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e041      	b.n	80098ca <USB_EPStartXfer+0x99e>
 8009846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800984a:	095b      	lsrs	r3, r3, #5
 800984c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009854:	f003 031f 	and.w	r3, r3, #31
 8009858:	2b00      	cmp	r3, #0
 800985a:	d104      	bne.n	8009866 <USB_EPStartXfer+0x93a>
 800985c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009860:	3b01      	subs	r3, #1
 8009862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800986a:	b29b      	uxth	r3, r3
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	b29b      	uxth	r3, r3
 8009870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009878:	b29a      	uxth	r2, r3
 800987a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800987c:	801a      	strh	r2, [r3, #0]
 800987e:	e024      	b.n	80098ca <USB_EPStartXfer+0x99e>
 8009880:	463b      	mov	r3, r7
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d11f      	bne.n	80098ca <USB_EPStartXfer+0x99e>
 800988a:	1d3b      	adds	r3, r7, #4
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009892:	1d3b      	adds	r3, r7, #4
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800989a:	b29b      	uxth	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098a2:	4413      	add	r3, r2
 80098a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098a8:	463b      	mov	r3, r7
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	011a      	lsls	r2, r3, #4
 80098b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098b4:	4413      	add	r3, r2
 80098b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80098c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098ca:	463b      	mov	r3, r7
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	891b      	ldrh	r3, [r3, #8]
 80098d0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098d4:	463b      	mov	r3, r7
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6959      	ldr	r1, [r3, #20]
 80098da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098de:	b29b      	uxth	r3, r3
 80098e0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80098e4:	1d38      	adds	r0, r7, #4
 80098e6:	6800      	ldr	r0, [r0, #0]
 80098e8:	f000 fd7e 	bl	800a3e8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80098ec:	463b      	mov	r3, r7
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	785b      	ldrb	r3, [r3, #1]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d122      	bne.n	800993c <USB_EPStartXfer+0xa10>
 80098f6:	1d3b      	adds	r3, r7, #4
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	463b      	mov	r3, r7
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	b29b      	uxth	r3, r3
 8009908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800990c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009910:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009914:	1d3b      	adds	r3, r7, #4
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	463b      	mov	r3, r7
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	441a      	add	r2, r3
 8009922:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800992a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800992e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009932:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009936:	b29b      	uxth	r3, r3
 8009938:	8013      	strh	r3, [r2, #0]
 800993a:	e026      	b.n	800998a <USB_EPStartXfer+0xa5e>
 800993c:	463b      	mov	r3, r7
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d121      	bne.n	800998a <USB_EPStartXfer+0xa5e>
 8009946:	1d3b      	adds	r3, r7, #4
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	463b      	mov	r3, r7
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800995c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009960:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009964:	1d3b      	adds	r3, r7, #4
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	463b      	mov	r3, r7
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	441a      	add	r2, r3
 8009972:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009986:	b29b      	uxth	r3, r3
 8009988:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
<<<<<<< HEAD
 8008752:	1d3b      	adds	r3, r7, #4
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	463b      	mov	r3, r7
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f107 020e 	add.w	r2, r7, #14
 8008768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	8013      	strh	r3, [r2, #0]
 8008772:	f107 030e 	add.w	r3, r7, #14
 8008776:	f107 020e 	add.w	r2, r7, #14
 800877a:	8812      	ldrh	r2, [r2, #0]
 800877c:	f082 0210 	eor.w	r2, r2, #16
 8008780:	801a      	strh	r2, [r3, #0]
 8008782:	f107 030e 	add.w	r3, r7, #14
 8008786:	f107 020e 	add.w	r2, r7, #14
 800878a:	8812      	ldrh	r2, [r2, #0]
 800878c:	f082 0220 	eor.w	r2, r2, #32
 8008790:	801a      	strh	r2, [r3, #0]
 8008792:	1d3b      	adds	r3, r7, #4
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	463b      	mov	r3, r7
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	441a      	add	r2, r3
 80087a0:	f107 030e 	add.w	r3, r7, #14
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	8013      	strh	r3, [r2, #0]
 80087ba:	e3b5      	b.n	8008f28 <USB_EPStartXfer+0x1234>
=======
 800998a:	1d3b      	adds	r3, r7, #4
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	463b      	mov	r3, r7
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	f107 020e 	add.w	r2, r7, #14
 80099a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a8:	8013      	strh	r3, [r2, #0]
 80099aa:	f107 030e 	add.w	r3, r7, #14
 80099ae:	f107 020e 	add.w	r2, r7, #14
 80099b2:	8812      	ldrh	r2, [r2, #0]
 80099b4:	f082 0210 	eor.w	r2, r2, #16
 80099b8:	801a      	strh	r2, [r3, #0]
 80099ba:	f107 030e 	add.w	r3, r7, #14
 80099be:	f107 020e 	add.w	r2, r7, #14
 80099c2:	8812      	ldrh	r2, [r2, #0]
 80099c4:	f082 0220 	eor.w	r2, r2, #32
 80099c8:	801a      	strh	r2, [r3, #0]
 80099ca:	1d3b      	adds	r3, r7, #4
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	463b      	mov	r3, r7
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	441a      	add	r2, r3
 80099d8:	f107 030e 	add.w	r3, r7, #14
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]
 80099f2:	e3b5      	b.n	800a160 <USB_EPStartXfer+0x1234>
>>>>>>> 6147058 (refactor)
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
<<<<<<< HEAD
 80087bc:	463b      	mov	r3, r7
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	7b1b      	ldrb	r3, [r3, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f040 8090 	bne.w	80088e8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80087c8:	463b      	mov	r3, r7
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d90e      	bls.n	80087f6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80087d8:	463b      	mov	r3, r7
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80087e2:	463b      	mov	r3, r7
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	699a      	ldr	r2, [r3, #24]
 80087e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087ec:	1ad2      	subs	r2, r2, r3
 80087ee:	463b      	mov	r3, r7
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	619a      	str	r2, [r3, #24]
 80087f4:	e008      	b.n	8008808 <USB_EPStartXfer+0xb14>
=======
 80099f4:	463b      	mov	r3, r7
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	7b1b      	ldrb	r3, [r3, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f040 8090 	bne.w	8009b20 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009a00:	463b      	mov	r3, r7
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699a      	ldr	r2, [r3, #24]
 8009a06:	463b      	mov	r3, r7
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d90e      	bls.n	8009a2e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009a10:	463b      	mov	r3, r7
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699a      	ldr	r2, [r3, #24]
 8009a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a24:	1ad2      	subs	r2, r2, r3
 8009a26:	463b      	mov	r3, r7
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	619a      	str	r2, [r3, #24]
 8009a2c:	e008      	b.n	8009a40 <USB_EPStartXfer+0xb14>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        len = ep->xfer_len;
<<<<<<< HEAD
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008800:	463b      	mov	r3, r7
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2200      	movs	r2, #0
 8008806:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008808:	1d3b      	adds	r3, r7, #4
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008810:	1d3b      	adds	r3, r7, #4
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008818:	b29b      	uxth	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008820:	4413      	add	r3, r2
 8008822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008826:	463b      	mov	r3, r7
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	011a      	lsls	r2, r3, #4
 800882e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008832:	4413      	add	r3, r2
 8008834:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008838:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800883c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d116      	bne.n	8008872 <USB_EPStartXfer+0xb7e>
 8008844:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e32c      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
 8008872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008876:	2b3e      	cmp	r3, #62	; 0x3e
 8008878:	d818      	bhi.n	80088ac <USB_EPStartXfer+0xbb8>
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <USB_EPStartXfer+0xba6>
 8008890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008894:	3301      	adds	r3, #1
 8008896:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800889a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800889e:	b29b      	uxth	r3, r3
 80088a0:	029b      	lsls	r3, r3, #10
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	e30f      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
 80088ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <USB_EPStartXfer+0xbd8>
 80088c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e2f1      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
=======
 8009a2e:	463b      	mov	r3, r7
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8009a38:	463b      	mov	r3, r7
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009a40:	1d3b      	adds	r3, r7, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a48:	1d3b      	adds	r3, r7, #4
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a58:	4413      	add	r3, r2
 8009a5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a5e:	463b      	mov	r3, r7
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	011a      	lsls	r2, r3, #4
 8009a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d116      	bne.n	8009aaa <USB_EPStartXfer+0xb7e>
 8009a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a8e:	801a      	strh	r2, [r3, #0]
 8009a90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aa6:	801a      	strh	r2, [r3, #0]
 8009aa8:	e32c      	b.n	800a104 <USB_EPStartXfer+0x11d8>
 8009aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aae:	2b3e      	cmp	r3, #62	; 0x3e
 8009ab0:	d818      	bhi.n	8009ae4 <USB_EPStartXfer+0xbb8>
 8009ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <USB_EPStartXfer+0xba6>
 8009ac8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009acc:	3301      	adds	r3, #1
 8009ace:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ad2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	029b      	lsls	r3, r3, #10
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	e30f      	b.n	800a104 <USB_EPStartXfer+0x11d8>
 8009ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae8:	095b      	lsrs	r3, r3, #5
 8009aea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009af2:	f003 031f 	and.w	r3, r3, #31
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d104      	bne.n	8009b04 <USB_EPStartXfer+0xbd8>
 8009afa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009afe:	3b01      	subs	r3, #1
 8009b00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	029b      	lsls	r3, r3, #10
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e2f1      	b.n	800a104 <USB_EPStartXfer+0x11d8>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
<<<<<<< HEAD
 80088e8:	463b      	mov	r3, r7
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	78db      	ldrb	r3, [r3, #3]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	f040 818f 	bne.w	8008c12 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80088f4:	463b      	mov	r3, r7
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d175      	bne.n	80089ea <USB_EPStartXfer+0xcf6>
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890e:	b29b      	uxth	r3, r3
 8008910:	461a      	mov	r2, r3
 8008912:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008916:	4413      	add	r3, r2
 8008918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800891c:	463b      	mov	r3, r7
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	011a      	lsls	r2, r3, #4
 8008924:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008928:	4413      	add	r3, r2
 800892a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800892e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008932:	463b      	mov	r3, r7
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d116      	bne.n	800896a <USB_EPStartXfer+0xc76>
 800893c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008940:	881b      	ldrh	r3, [r3, #0]
 8008942:	b29b      	uxth	r3, r3
 8008944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008948:	b29a      	uxth	r2, r3
 800894a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800894e:	801a      	strh	r2, [r3, #0]
 8008950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008960:	b29a      	uxth	r2, r3
 8008962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008966:	801a      	strh	r2, [r3, #0]
 8008968:	e065      	b.n	8008a36 <USB_EPStartXfer+0xd42>
 800896a:	463b      	mov	r3, r7
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b3e      	cmp	r3, #62	; 0x3e
 8008972:	d81a      	bhi.n	80089aa <USB_EPStartXfer+0xcb6>
 8008974:	463b      	mov	r3, r7
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008980:	463b      	mov	r3, r7
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d004      	beq.n	8008998 <USB_EPStartXfer+0xca4>
 800898e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008992:	3301      	adds	r3, #1
 8008994:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008998:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800899c:	b29b      	uxth	r3, r3
 800899e:	029b      	lsls	r3, r3, #10
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e045      	b.n	8008a36 <USB_EPStartXfer+0xd42>
 80089aa:	463b      	mov	r3, r7
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	095b      	lsrs	r3, r3, #5
 80089b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089b6:	463b      	mov	r3, r7
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <USB_EPStartXfer+0xcda>
 80089c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80089ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	e025      	b.n	8008a36 <USB_EPStartXfer+0xd42>
 80089ea:	463b      	mov	r3, r7
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d120      	bne.n	8008a36 <USB_EPStartXfer+0xd42>
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	461a      	mov	r2, r3
 8008a08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a12:	463b      	mov	r3, r7
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	011a      	lsls	r2, r3, #4
 8008a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a1e:	4413      	add	r3, r2
 8008a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	1d3b      	adds	r3, r7, #4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a3e:	463b      	mov	r3, r7
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	785b      	ldrb	r3, [r3, #1]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d175      	bne.n	8008b34 <USB_EPStartXfer+0xe40>
 8008a48:	1d3b      	adds	r3, r7, #4
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a50:	1d3b      	adds	r3, r7, #4
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a60:	4413      	add	r3, r2
 8008a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	011a      	lsls	r2, r3, #4
 8008a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a72:	4413      	add	r3, r2
 8008a74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d116      	bne.n	8008ab4 <USB_EPStartXfer+0xdc0>
 8008a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a98:	801a      	strh	r2, [r3, #0]
 8008a9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a9e:	881b      	ldrh	r3, [r3, #0]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	e061      	b.n	8008b78 <USB_EPStartXfer+0xe84>
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b3e      	cmp	r3, #62	; 0x3e
 8008abc:	d81a      	bhi.n	8008af4 <USB_EPStartXfer+0xe00>
 8008abe:	463b      	mov	r3, r7
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	085b      	lsrs	r3, r3, #1
 8008ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008aca:	463b      	mov	r3, r7
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <USB_EPStartXfer+0xdee>
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008adc:	3301      	adds	r3, #1
 8008ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	029b      	lsls	r3, r3, #10
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e041      	b.n	8008b78 <USB_EPStartXfer+0xe84>
 8008af4:	463b      	mov	r3, r7
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b00:	463b      	mov	r3, r7
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <USB_EPStartXfer+0xe24>
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b12:	3b01      	subs	r3, #1
 8008b14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	029b      	lsls	r3, r3, #10
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b30:	801a      	strh	r2, [r3, #0]
 8008b32:	e021      	b.n	8008b78 <USB_EPStartXfer+0xe84>
 8008b34:	463b      	mov	r3, r7
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d11c      	bne.n	8008b78 <USB_EPStartXfer+0xe84>
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b4e:	4413      	add	r3, r2
 8008b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b54:	463b      	mov	r3, r7
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	011a      	lsls	r2, r3, #4
 8008b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b60:	4413      	add	r3, r2
 8008b62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b76:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008b78:	463b      	mov	r3, r7
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 81a4 	beq.w	8008ecc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	463b      	mov	r3, r7
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008b98:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <USB_EPStartXfer+0xebc>
 8008ba4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10d      	bne.n	8008bcc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bb0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 8187 	bne.w	8008ecc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008bbe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f040 8180 	bne.w	8008ecc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008bcc:	1d3b      	adds	r3, r7, #4
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	463b      	mov	r3, r7
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	463b      	mov	r3, r7
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	441a      	add	r2, r3
 8008bf8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	8013      	strh	r3, [r2, #0]
 8008c10:	e15c      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
=======
 8009b20:	463b      	mov	r3, r7
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	78db      	ldrb	r3, [r3, #3]
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	f040 818f 	bne.w	8009e4a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d175      	bne.n	8009c22 <USB_EPStartXfer+0xcf6>
 8009b36:	1d3b      	adds	r3, r7, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b3e:	1d3b      	adds	r3, r7, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b4e:	4413      	add	r3, r2
 8009b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b54:	463b      	mov	r3, r7
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	011a      	lsls	r2, r3, #4
 8009b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009b60:	4413      	add	r3, r2
 8009b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b6a:	463b      	mov	r3, r7
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d116      	bne.n	8009ba2 <USB_EPStartXfer+0xc76>
 8009b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	e065      	b.n	8009c6e <USB_EPStartXfer+0xd42>
 8009ba2:	463b      	mov	r3, r7
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8009baa:	d81a      	bhi.n	8009be2 <USB_EPStartXfer+0xcb6>
 8009bac:	463b      	mov	r3, r7
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	085b      	lsrs	r3, r3, #1
 8009bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bb8:	463b      	mov	r3, r7
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <USB_EPStartXfer+0xca4>
 8009bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bca:	3301      	adds	r3, #1
 8009bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	029b      	lsls	r3, r3, #10
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009bde:	801a      	strh	r2, [r3, #0]
 8009be0:	e045      	b.n	8009c6e <USB_EPStartXfer+0xd42>
 8009be2:	463b      	mov	r3, r7
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bee:	463b      	mov	r3, r7
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f003 031f 	and.w	r3, r3, #31
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d104      	bne.n	8009c06 <USB_EPStartXfer+0xcda>
 8009bfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c00:	3b01      	subs	r3, #1
 8009c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	029b      	lsls	r3, r3, #10
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e025      	b.n	8009c6e <USB_EPStartXfer+0xd42>
 8009c22:	463b      	mov	r3, r7
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d120      	bne.n	8009c6e <USB_EPStartXfer+0xd42>
 8009c2c:	1d3b      	adds	r3, r7, #4
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c34:	1d3b      	adds	r3, r7, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c44:	4413      	add	r3, r2
 8009c46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	011a      	lsls	r2, r3, #4
 8009c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c56:	4413      	add	r3, r2
 8009c58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c60:	463b      	mov	r3, r7
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	1d3b      	adds	r3, r7, #4
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c76:	463b      	mov	r3, r7
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d175      	bne.n	8009d6c <USB_EPStartXfer+0xe40>
 8009c80:	1d3b      	adds	r3, r7, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c88:	1d3b      	adds	r3, r7, #4
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c98:	4413      	add	r3, r2
 8009c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c9e:	463b      	mov	r3, r7
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	011a      	lsls	r2, r3, #4
 8009ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009caa:	4413      	add	r3, r2
 8009cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cb4:	463b      	mov	r3, r7
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d116      	bne.n	8009cec <USB_EPStartXfer+0xdc0>
 8009cbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd0:	801a      	strh	r2, [r3, #0]
 8009cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	e061      	b.n	8009db0 <USB_EPStartXfer+0xe84>
 8009cec:	463b      	mov	r3, r7
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf4:	d81a      	bhi.n	8009d2c <USB_EPStartXfer+0xe00>
 8009cf6:	463b      	mov	r3, r7
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d02:	463b      	mov	r3, r7
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <USB_EPStartXfer+0xdee>
 8009d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d14:	3301      	adds	r3, #1
 8009d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	029b      	lsls	r3, r3, #10
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d28:	801a      	strh	r2, [r3, #0]
 8009d2a:	e041      	b.n	8009db0 <USB_EPStartXfer+0xe84>
 8009d2c:	463b      	mov	r3, r7
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	095b      	lsrs	r3, r3, #5
 8009d34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d38:	463b      	mov	r3, r7
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	f003 031f 	and.w	r3, r3, #31
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <USB_EPStartXfer+0xe24>
 8009d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	029b      	lsls	r3, r3, #10
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d68:	801a      	strh	r2, [r3, #0]
 8009d6a:	e021      	b.n	8009db0 <USB_EPStartXfer+0xe84>
 8009d6c:	463b      	mov	r3, r7
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d11c      	bne.n	8009db0 <USB_EPStartXfer+0xe84>
 8009d76:	1d3b      	adds	r3, r7, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	461a      	mov	r2, r3
 8009d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d86:	4413      	add	r3, r2
 8009d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d8c:	463b      	mov	r3, r7
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	011a      	lsls	r2, r3, #4
 8009d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d98:	4413      	add	r3, r2
 8009d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009da2:	463b      	mov	r3, r7
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dae:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009db0:	463b      	mov	r3, r7
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 81a4 	beq.w	800a104 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009dbc:	1d3b      	adds	r3, r7, #4
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009dd0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d005      	beq.n	8009de8 <USB_EPStartXfer+0xebc>
 8009ddc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10d      	bne.n	8009e04 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009de8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f040 8187 	bne.w	800a104 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009df6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f040 8180 	bne.w	800a104 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009e04:	1d3b      	adds	r3, r7, #4
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	463b      	mov	r3, r7
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	4413      	add	r3, r2
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009e22:	1d3b      	adds	r3, r7, #4
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	463b      	mov	r3, r7
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	441a      	add	r2, r3
 8009e30:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	8013      	strh	r3, [r2, #0]
 8009e48:	e15c      	b.n	800a104 <USB_EPStartXfer+0x11d8>
>>>>>>> 6147058 (refactor)
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
<<<<<<< HEAD
 8008c12:	463b      	mov	r3, r7
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	78db      	ldrb	r3, [r3, #3]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	f040 8155 	bne.w	8008ec8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008c1e:	463b      	mov	r3, r7
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	463b      	mov	r3, r7
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d90e      	bls.n	8008c4c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008c2e:	463b      	mov	r3, r7
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008c38:	463b      	mov	r3, r7
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c42:	1ad2      	subs	r2, r2, r3
 8008c44:	463b      	mov	r3, r7
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	619a      	str	r2, [r3, #24]
 8008c4a:	e008      	b.n	8008c5e <USB_EPStartXfer+0xf6a>
=======
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	78db      	ldrb	r3, [r3, #3]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	f040 8155 	bne.w	800a100 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e56:	463b      	mov	r3, r7
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	699a      	ldr	r2, [r3, #24]
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d90e      	bls.n	8009e84 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8009e66:	463b      	mov	r3, r7
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8009e70:	463b      	mov	r3, r7
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009e7a:	1ad2      	subs	r2, r2, r3
 8009e7c:	463b      	mov	r3, r7
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	619a      	str	r2, [r3, #24]
 8009e82:	e008      	b.n	8009e96 <USB_EPStartXfer+0xf6a>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          len = ep->xfer_len;
<<<<<<< HEAD
 8008c4c:	463b      	mov	r3, r7
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008c56:	463b      	mov	r3, r7
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008c5e:	463b      	mov	r3, r7
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	785b      	ldrb	r3, [r3, #1]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d16f      	bne.n	8008d48 <USB_EPStartXfer+0x1054>
 8008c68:	1d3b      	adds	r3, r7, #4
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c70:	1d3b      	adds	r3, r7, #4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c80:	4413      	add	r3, r2
 8008c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c86:	463b      	mov	r3, r7
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	011a      	lsls	r2, r3, #4
 8008c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008c92:	4413      	add	r3, r2
 8008c94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d116      	bne.n	8008cd2 <USB_EPStartXfer+0xfde>
 8008ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cb6:	801a      	strh	r2, [r3, #0]
 8008cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008cce:	801a      	strh	r2, [r3, #0]
 8008cd0:	e05f      	b.n	8008d92 <USB_EPStartXfer+0x109e>
 8008cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8008cd8:	d818      	bhi.n	8008d0c <USB_EPStartXfer+0x1018>
 8008cda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <USB_EPStartXfer+0x1006>
 8008cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	029b      	lsls	r3, r3, #10
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	e042      	b.n	8008d92 <USB_EPStartXfer+0x109e>
 8008d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d10:	095b      	lsrs	r3, r3, #5
 8008d12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d104      	bne.n	8008d2c <USB_EPStartXfer+0x1038>
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d26:	3b01      	subs	r3, #1
 8008d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	029b      	lsls	r3, r3, #10
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008d44:	801a      	strh	r2, [r3, #0]
 8008d46:	e024      	b.n	8008d92 <USB_EPStartXfer+0x109e>
 8008d48:	463b      	mov	r3, r7
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d11f      	bne.n	8008d92 <USB_EPStartXfer+0x109e>
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d5a:	1d3b      	adds	r3, r7, #4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d70:	463b      	mov	r3, r7
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	011a      	lsls	r2, r3, #4
 8008d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d90:	801a      	strh	r2, [r3, #0]
 8008d92:	1d3b      	adds	r3, r7, #4
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d9a:	463b      	mov	r3, r7
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	785b      	ldrb	r3, [r3, #1]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d16f      	bne.n	8008e84 <USB_EPStartXfer+0x1190>
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dac:	1d3b      	adds	r3, r7, #4
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	011a      	lsls	r2, r3, #4
 8008dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008dce:	4413      	add	r3, r2
 8008dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d116      	bne.n	8008e0e <USB_EPStartXfer+0x111a>
 8008de0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e0a:	801a      	strh	r2, [r3, #0]
 8008e0c:	e05e      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e12:	2b3e      	cmp	r3, #62	; 0x3e
 8008e14:	d818      	bhi.n	8008e48 <USB_EPStartXfer+0x1154>
 8008e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USB_EPStartXfer+0x1142>
 8008e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	029b      	lsls	r3, r3, #10
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e041      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
 8008e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d104      	bne.n	8008e68 <USB_EPStartXfer+0x1174>
 8008e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e62:	3b01      	subs	r3, #1
 8008e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	029b      	lsls	r3, r3, #10
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008e80:	801a      	strh	r2, [r3, #0]
 8008e82:	e023      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
 8008e84:	463b      	mov	r3, r7
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d11e      	bne.n	8008ecc <USB_EPStartXfer+0x11d8>
 8008e8e:	1d3b      	adds	r3, r7, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	011a      	lsls	r2, r3, #4
 8008eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	e001      	b.n	8008ecc <USB_EPStartXfer+0x11d8>
=======
 8009e84:	463b      	mov	r3, r7
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8009e8e:	463b      	mov	r3, r7
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2200      	movs	r2, #0
 8009e94:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e96:	463b      	mov	r3, r7
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d16f      	bne.n	8009f80 <USB_EPStartXfer+0x1054>
 8009ea0:	1d3b      	adds	r3, r7, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ea8:	1d3b      	adds	r3, r7, #4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009eb8:	4413      	add	r3, r2
 8009eba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ebe:	463b      	mov	r3, r7
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	011a      	lsls	r2, r3, #4
 8009ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009eca:	4413      	add	r3, r2
 8009ecc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d116      	bne.n	8009f0a <USB_EPStartXfer+0xfde>
 8009edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eee:	801a      	strh	r2, [r3, #0]
 8009ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	e05f      	b.n	8009fca <USB_EPStartXfer+0x109e>
 8009f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8009f10:	d818      	bhi.n	8009f44 <USB_EPStartXfer+0x1018>
 8009f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f16:	085b      	lsrs	r3, r3, #1
 8009f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <USB_EPStartXfer+0x1006>
 8009f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	029b      	lsls	r3, r3, #10
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f40:	801a      	strh	r2, [r3, #0]
 8009f42:	e042      	b.n	8009fca <USB_EPStartXfer+0x109e>
 8009f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f52:	f003 031f 	and.w	r3, r3, #31
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d104      	bne.n	8009f64 <USB_EPStartXfer+0x1038>
 8009f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	029b      	lsls	r3, r3, #10
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f7c:	801a      	strh	r2, [r3, #0]
 8009f7e:	e024      	b.n	8009fca <USB_EPStartXfer+0x109e>
 8009f80:	463b      	mov	r3, r7
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d11f      	bne.n	8009fca <USB_EPStartXfer+0x109e>
 8009f8a:	1d3b      	adds	r3, r7, #4
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f92:	1d3b      	adds	r3, r7, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009fa8:	463b      	mov	r3, r7
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	011a      	lsls	r2, r3, #4
 8009fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	1d3b      	adds	r3, r7, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fd2:	463b      	mov	r3, r7
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d16f      	bne.n	800a0bc <USB_EPStartXfer+0x1190>
 8009fdc:	1d3b      	adds	r3, r7, #4
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fe4:	1d3b      	adds	r3, r7, #4
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ffa:	463b      	mov	r3, r7
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	011a      	lsls	r2, r3, #4
 800a002:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a006:	4413      	add	r3, r2
 800a008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a00c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d116      	bne.n	800a046 <USB_EPStartXfer+0x111a>
 800a018:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a024:	b29a      	uxth	r2, r3
 800a026:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a02a:	801a      	strh	r2, [r3, #0]
 800a02c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a042:	801a      	strh	r2, [r3, #0]
 800a044:	e05e      	b.n	800a104 <USB_EPStartXfer+0x11d8>
 800a046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a04a:	2b3e      	cmp	r3, #62	; 0x3e
 800a04c:	d818      	bhi.n	800a080 <USB_EPStartXfer+0x1154>
 800a04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <USB_EPStartXfer+0x1142>
 800a064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a068:	3301      	adds	r3, #1
 800a06a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a06e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a072:	b29b      	uxth	r3, r3
 800a074:	029b      	lsls	r3, r3, #10
 800a076:	b29a      	uxth	r2, r3
 800a078:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a07c:	801a      	strh	r2, [r3, #0]
 800a07e:	e041      	b.n	800a104 <USB_EPStartXfer+0x11d8>
 800a080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a08a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a08e:	f003 031f 	and.w	r3, r3, #31
 800a092:	2b00      	cmp	r3, #0
 800a094:	d104      	bne.n	800a0a0 <USB_EPStartXfer+0x1174>
 800a096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a09a:	3b01      	subs	r3, #1
 800a09c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a0a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	029b      	lsls	r3, r3, #10
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0b8:	801a      	strh	r2, [r3, #0]
 800a0ba:	e023      	b.n	800a104 <USB_EPStartXfer+0x11d8>
 800a0bc:	463b      	mov	r3, r7
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d11e      	bne.n	800a104 <USB_EPStartXfer+0x11d8>
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a0dc:	463b      	mov	r3, r7
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	011a      	lsls	r2, r3, #4
 800a0e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a0fc:	801a      	strh	r2, [r3, #0]
 800a0fe:	e001      	b.n	800a104 <USB_EPStartXfer+0x11d8>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        return HAL_ERROR;
<<<<<<< HEAD
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e02e      	b.n	8008f2a <USB_EPStartXfer+0x1236>
=======
 800a100:	2301      	movs	r3, #1
 800a102:	e02e      	b.n	800a162 <USB_EPStartXfer+0x1236>
>>>>>>> 6147058 (refactor)
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
<<<<<<< HEAD
 8008ecc:	1d3b      	adds	r3, r7, #4
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	463b      	mov	r3, r7
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008eea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008eee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ef2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008ef6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008efa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008efe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008f02:	1d3b      	adds	r3, r7, #4
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	463b      	mov	r3, r7
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USB_EPSetStall>:
=======
 800a104:	1d3b      	adds	r3, r7, #4
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	463b      	mov	r3, r7
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a122:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a126:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a12a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a12e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a132:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a136:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a13a:	1d3b      	adds	r3, r7, #4
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	463b      	mov	r3, r7
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	441a      	add	r2, r3
 800a148:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a14c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USB_EPSetStall>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d020      	beq.n	8008f88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5c:	81bb      	strh	r3, [r7, #12]
 8008f5e:	89bb      	ldrh	r3, [r7, #12]
 8008f60:	f083 0310 	eor.w	r3, r3, #16
 8008f64:	81bb      	strh	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	89bb      	ldrh	r3, [r7, #12]
 8008f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	8013      	strh	r3, [r2, #0]
 8008f86:	e01f      	b.n	8008fc8 <USB_EPSetStall+0x94>
=======
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	785b      	ldrb	r3, [r3, #1]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d020      	beq.n	800a1c0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	881b      	ldrh	r3, [r3, #0]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a194:	81bb      	strh	r3, [r7, #12]
 800a196:	89bb      	ldrh	r3, [r7, #12]
 800a198:	f083 0310 	eor.w	r3, r3, #16
 800a19c:	81bb      	strh	r3, [r7, #12]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	441a      	add	r2, r3
 800a1a8:	89bb      	ldrh	r3, [r7, #12]
 800a1aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	8013      	strh	r3, [r2, #0]
 800a1be:	e01f      	b.n	800a200 <USB_EPSetStall+0x94>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
<<<<<<< HEAD
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	81fb      	strh	r3, [r7, #14]
 8008fa0:	89fb      	ldrh	r3, [r7, #14]
 8008fa2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008fa6:	81fb      	strh	r3, [r7, #14]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	441a      	add	r2, r3
 8008fb2:	89fb      	ldrh	r3, [r7, #14]
 8008fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc80      	pop	{r7}
 8008fd2:	4770      	bx	lr

08008fd4 <USB_EPClearStall>:
=======
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d6:	81fb      	strh	r3, [r7, #14]
 800a1d8:	89fb      	ldrh	r3, [r7, #14]
 800a1da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a1de:	81fb      	strh	r3, [r7, #14]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	441a      	add	r2, r3
 800a1ea:	89fb      	ldrh	r3, [r7, #14]
 800a1ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	bc80      	pop	{r7}
 800a20a:	4770      	bx	lr

0800a20c <USB_EPClearStall>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
<<<<<<< HEAD
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	7b1b      	ldrb	r3, [r3, #12]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f040 809d 	bne.w	8009122 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d04c      	beq.n	800908a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	823b      	strh	r3, [r7, #16]
 8008ffe:	8a3b      	ldrh	r3, [r7, #16]
 8009000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009004:	2b00      	cmp	r3, #0
 8009006:	d01b      	beq.n	8009040 <USB_EPClearStall+0x6c>
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901e:	81fb      	strh	r3, [r7, #14]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	441a      	add	r2, r3
 800902a:	89fb      	ldrh	r3, [r7, #14]
 800902c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800903c:	b29b      	uxth	r3, r3
 800903e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	78db      	ldrb	r3, [r3, #3]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d06c      	beq.n	8009122 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905e:	81bb      	strh	r3, [r7, #12]
 8009060:	89bb      	ldrh	r3, [r7, #12]
 8009062:	f083 0320 	eor.w	r3, r3, #32
 8009066:	81bb      	strh	r3, [r7, #12]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	441a      	add	r2, r3
 8009072:	89bb      	ldrh	r3, [r7, #12]
 8009074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800907c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009084:	b29b      	uxth	r3, r3
 8009086:	8013      	strh	r3, [r2, #0]
 8009088:	e04b      	b.n	8009122 <USB_EPClearStall+0x14e>
=======
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	7b1b      	ldrb	r3, [r3, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f040 809d 	bne.w	800a35a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	785b      	ldrb	r3, [r3, #1]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d04c      	beq.n	800a2c2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	823b      	strh	r3, [r7, #16]
 800a236:	8a3b      	ldrh	r3, [r7, #16]
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01b      	beq.n	800a278 <USB_EPClearStall+0x6c>
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4413      	add	r3, r2
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a256:	81fb      	strh	r3, [r7, #14]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	441a      	add	r2, r3
 800a262:	89fb      	ldrh	r3, [r7, #14]
 800a264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a26c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a274:	b29b      	uxth	r3, r3
 800a276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	78db      	ldrb	r3, [r3, #3]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d06c      	beq.n	800a35a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a296:	81bb      	strh	r3, [r7, #12]
 800a298:	89bb      	ldrh	r3, [r7, #12]
 800a29a:	f083 0320 	eor.w	r3, r3, #32
 800a29e:	81bb      	strh	r3, [r7, #12]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	441a      	add	r2, r3
 800a2aa:	89bb      	ldrh	r3, [r7, #12]
 800a2ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	8013      	strh	r3, [r2, #0]
 800a2c0:	e04b      	b.n	800a35a <USB_EPClearStall+0x14e>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
<<<<<<< HEAD
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	82fb      	strh	r3, [r7, #22]
 8009098:	8afb      	ldrh	r3, [r7, #22]
 800909a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01b      	beq.n	80090da <USB_EPClearStall+0x106>
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	82bb      	strh	r3, [r7, #20]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	441a      	add	r2, r3
 80090c4:	8abb      	ldrh	r3, [r7, #20]
 80090c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f0:	827b      	strh	r3, [r7, #18]
 80090f2:	8a7b      	ldrh	r3, [r7, #18]
 80090f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090f8:	827b      	strh	r3, [r7, #18]
 80090fa:	8a7b      	ldrh	r3, [r7, #18]
 80090fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009100:	827b      	strh	r3, [r7, #18]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	8a7b      	ldrh	r3, [r7, #18]
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800911a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
=======
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	82fb      	strh	r3, [r7, #22]
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01b      	beq.n	800a312 <USB_EPClearStall+0x106>
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2f0:	82bb      	strh	r3, [r7, #20]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	441a      	add	r2, r3
 800a2fc:	8abb      	ldrh	r3, [r7, #20]
 800a2fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a30a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a30e:	b29b      	uxth	r3, r3
 800a310:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	4413      	add	r3, r2
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a328:	827b      	strh	r3, [r7, #18]
 800a32a:	8a7b      	ldrh	r3, [r7, #18]
 800a32c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a330:	827b      	strh	r3, [r7, #18]
 800a332:	8a7b      	ldrh	r3, [r7, #18]
 800a334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a338:	827b      	strh	r3, [r7, #18]
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	441a      	add	r2, r3
 800a344:	8a7b      	ldrh	r3, [r7, #18]
 800a346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a34a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a356:	b29b      	uxth	r3, r3
 800a358:	8013      	strh	r3, [r2, #0]
>>>>>>> 6147058 (refactor)
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr

0800912e <USB_SetDevAddress>:
=======
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr

0800a366 <USB_SetDevAddress>:
>>>>>>> 6147058 (refactor)
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
<<<<<<< HEAD
 800912e:	b480      	push	{r7}
 8009130:	b083      	sub	sp, #12
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr

08009154 <USB_DevConnect>:
=======
 800a366:	b480      	push	{r7}
 800a368:	b083      	sub	sp, #12
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	460b      	mov	r3, r1
 800a370:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a372:	78fb      	ldrb	r3, [r7, #3]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2280      	movs	r2, #128	; 0x80
 800a37c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	bc80      	pop	{r7}
 800a38a:	4770      	bx	lr

0800a38c <USB_DevConnect>:
>>>>>>> 6147058 (refactor)
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
=======
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <USB_DevDisconnect>:
=======
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	370c      	adds	r7, #12
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr

0800a3a0 <USB_DevDisconnect>:
>>>>>>> 6147058 (refactor)
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
=======
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
<<<<<<< HEAD
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr

0800917c <USB_ReadInterrupts>:
=======
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr

0800a3b4 <USB_ReadInterrupts>:
>>>>>>> 6147058 (refactor)
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
<<<<<<< HEAD
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800918a:	b29b      	uxth	r3, r3
 800918c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800918e:	68fb      	ldr	r3, [r7, #12]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr

0800919a <USB_EP0_OutStart>:
=======
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr

0800a3d2 <USB_EP0_OutStart>:
>>>>>>> 6147058 (refactor)
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
<<<<<<< HEAD
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
=======
 800a3d2:	b480      	push	{r7}
 800a3d4:	b083      	sub	sp, #12
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
>>>>>>> 6147058 (refactor)
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
<<<<<<< HEAD
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <USB_WritePMA>:
=======
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bc80      	pop	{r7}
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_WritePMA>:
>>>>>>> 6147058 (refactor)
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 80091b0:	b480      	push	{r7}
 80091b2:	b08d      	sub	sp, #52	; 0x34
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	4611      	mov	r1, r2
 80091bc:	461a      	mov	r2, r3
 80091be:	460b      	mov	r3, r1
 80091c0:	80fb      	strh	r3, [r7, #6]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80091c6:	88bb      	ldrh	r3, [r7, #4]
 80091c8:	3301      	adds	r3, #1
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80091d6:	88fb      	ldrh	r3, [r7, #6]
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091e8:	e01e      	b.n	8009228 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	3301      	adds	r3, #1
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	b29b      	uxth	r3, r3
 8009200:	461a      	mov	r2, r3
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	4313      	orrs	r3, r2
 8009206:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	b29a      	uxth	r2, r3
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	3302      	adds	r3, #2
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	3302      	adds	r3, #2
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	3301      	adds	r3, #1
 8009220:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	3b01      	subs	r3, #1
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1dd      	bne.n	80091ea <USB_WritePMA+0x3a>
  }
}
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	3734      	adds	r7, #52	; 0x34
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr

0800923a <USB_ReadPMA>:
=======
 800a3e8:	b480      	push	{r7}
 800a3ea:	b08d      	sub	sp, #52	; 0x34
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	80fb      	strh	r3, [r7, #6]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a3fe:	88bb      	ldrh	r3, [r7, #4]
 800a400:	3301      	adds	r3, #1
 800a402:	085b      	lsrs	r3, r3, #1
 800a404:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	005a      	lsls	r2, r3, #1
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a420:	e01e      	b.n	800a460 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	3301      	adds	r3, #1
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b29b      	uxth	r3, r3
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	b29b      	uxth	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	b29a      	uxth	r2, r3
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44a:	3302      	adds	r3, #2
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	3302      	adds	r3, #2
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	3301      	adds	r3, #1
 800a458:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45c:	3b01      	subs	r3, #1
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1dd      	bne.n	800a422 <USB_WritePMA+0x3a>
  }
}
 800a466:	bf00      	nop
 800a468:	bf00      	nop
 800a46a:	3734      	adds	r7, #52	; 0x34
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr

0800a472 <USB_ReadPMA>:
>>>>>>> 6147058 (refactor)
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
<<<<<<< HEAD
 800923a:	b480      	push	{r7}
 800923c:	b08b      	sub	sp, #44	; 0x2c
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	4611      	mov	r1, r2
 8009246:	461a      	mov	r2, r3
 8009248:	460b      	mov	r3, r1
 800924a:	80fb      	strh	r3, [r7, #6]
 800924c:	4613      	mov	r3, r2
 800924e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009250:	88bb      	ldrh	r3, [r7, #4]
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	005a      	lsls	r2, r3, #1
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800926c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
 8009272:	e01b      	b.n	80092ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	3302      	adds	r3, #2
 8009280:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	3301      	adds	r3, #1
 800928e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	b2da      	uxtb	r2, r3
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	3301      	adds	r3, #1
 800929e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80092a0:	6a3b      	ldr	r3, [r7, #32]
 80092a2:	3302      	adds	r3, #2
 80092a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	3b01      	subs	r3, #1
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e0      	bne.n	8009274 <USB_ReadPMA+0x3a>
=======
 800a472:	b480      	push	{r7}
 800a474:	b08b      	sub	sp, #44	; 0x2c
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	4611      	mov	r1, r2
 800a47e:	461a      	mov	r2, r3
 800a480:	460b      	mov	r3, r1
 800a482:	80fb      	strh	r3, [r7, #6]
 800a484:	4613      	mov	r3, r2
 800a486:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a488:	88bb      	ldrh	r3, [r7, #4]
 800a48a:	085b      	lsrs	r3, r3, #1
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a498:	88fb      	ldrh	r3, [r7, #6]
 800a49a:	005a      	lsls	r2, r3, #1
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4a4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a4aa:	e01b      	b.n	800a4e4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	3302      	adds	r3, #2
 800a4b8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	3302      	adds	r3, #2
 800a4dc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e0      	bne.n	800a4ac <USB_ReadPMA+0x3a>
>>>>>>> 6147058 (refactor)
#endif
  }

  if ((wNBytes % 2U) != 0U)
<<<<<<< HEAD
 80092b2:	88bb      	ldrh	r3, [r7, #4]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d007      	beq.n	80092ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	701a      	strb	r2, [r3, #0]
  }
}
 80092ce:	bf00      	nop
 80092d0:	372c      	adds	r7, #44	; 0x2c
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr

080092d8 <USBD_CDC_Init>:
=======
 800a4ea:	88bb      	ldrh	r3, [r7, #4]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	701a      	strb	r2, [r3, #0]
  }
}
 800a506:	bf00      	nop
 800a508:	372c      	adds	r7, #44	; 0x2c
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bc80      	pop	{r7}
 800a50e:	4770      	bx	lr

0800a510 <USBD_CDC_Init>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	7c1b      	ldrb	r3, [r3, #16]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d115      	bne.n	800931c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80092f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f4:	2202      	movs	r2, #2
 80092f6:	2181      	movs	r1, #129	; 0x81
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fe8a 	bl	800b012 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2201      	movs	r2, #1
 8009302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009308:	2202      	movs	r2, #2
 800930a:	2101      	movs	r1, #1
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f001 fe80 	bl	800b012 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800931a:	e012      	b.n	8009342 <USBD_CDC_Init+0x6a>
=======
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a51c:	2300      	movs	r3, #0
 800a51e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	7c1b      	ldrb	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d115      	bne.n	800a554 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52c:	2202      	movs	r2, #2
 800a52e:	2181      	movs	r1, #129	; 0x81
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fe8a 	bl	800c24a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a53c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a540:	2202      	movs	r2, #2
 800a542:	2101      	movs	r1, #1
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 fe80 	bl	800c24a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a552:	e012      	b.n	800a57a <USBD_CDC_Init+0x6a>
>>>>>>> 6147058 (refactor)

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
<<<<<<< HEAD
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	2202      	movs	r2, #2
 8009320:	2181      	movs	r1, #129	; 0x81
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f001 fe75 	bl	800b012 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800932e:	2340      	movs	r3, #64	; 0x40
 8009330:	2202      	movs	r2, #2
 8009332:	2101      	movs	r1, #1
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f001 fe6c 	bl	800b012 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009342:	2308      	movs	r3, #8
 8009344:	2203      	movs	r2, #3
 8009346:	2182      	movs	r1, #130	; 0x82
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 fe62 	bl	800b012 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009354:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009358:	f001 ff82 	bl	800b260 <USBD_static_malloc>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800936e:	2301      	movs	r3, #1
 8009370:	73fb      	strb	r3, [r7, #15]
 8009372:	e026      	b.n	80093c2 <USBD_CDC_Init+0xea>
=======
 800a554:	2340      	movs	r3, #64	; 0x40
 800a556:	2202      	movs	r2, #2
 800a558:	2181      	movs	r1, #129	; 0x81
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f001 fe75 	bl	800c24a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a566:	2340      	movs	r3, #64	; 0x40
 800a568:	2202      	movs	r2, #2
 800a56a:	2101      	movs	r1, #1
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 fe6c 	bl	800c24a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a57a:	2308      	movs	r3, #8
 800a57c:	2203      	movs	r2, #3
 800a57e:	2182      	movs	r1, #130	; 0x82
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 fe62 	bl	800c24a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2201      	movs	r2, #1
 800a58a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a58c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a590:	f001 ff82 	bl	800c498 <USBD_static_malloc>
 800a594:	4602      	mov	r2, r0
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d102      	bne.n	800a5ac <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	73fb      	strb	r3, [r7, #15]
 800a5aa:	e026      	b.n	800a5fa <USBD_CDC_Init+0xea>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
<<<<<<< HEAD
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	7c1b      	ldrb	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d109      	bne.n	80093b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a8:	2101      	movs	r1, #1
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 ff22 	bl	800b1f4 <USBD_LL_PrepareReceive>
 80093b0:	e007      	b.n	80093c2 <USBD_CDC_Init+0xea>
=======
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7c1b      	ldrb	r3, [r3, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f001 ff22 	bl	800c42c <USBD_LL_PrepareReceive>
 800a5e8:	e007      	b.n	800a5fa <USBD_CDC_Init+0xea>
>>>>>>> 6147058 (refactor)
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
<<<<<<< HEAD
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b8:	2340      	movs	r3, #64	; 0x40
 80093ba:	2101      	movs	r1, #1
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 ff19 	bl	800b1f4 <USBD_LL_PrepareReceive>
=======
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a5f0:	2340      	movs	r3, #64	; 0x40
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 ff19 	bl	800c42c <USBD_LL_PrepareReceive>
>>>>>>> 6147058 (refactor)
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
<<<<<<< HEAD
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_CDC_DeInit>:
=======
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3710      	adds	r7, #16
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_CDC_DeInit>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80093dc:	2181      	movs	r1, #129	; 0x81
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 fe3d 	bl	800b05e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80093ea:	2101      	movs	r1, #1
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fe36 	bl	800b05e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80093fa:	2182      	movs	r1, #130	; 0x82
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fe2e 	bl	800b05e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00e      	beq.n	8009430 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	4618      	mov	r0, r3
 8009424:	f001 ff28 	bl	800b278 <USBD_static_free>
    pdev->pClassData = NULL;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_CDC_Setup>:
=======
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a614:	2181      	movs	r1, #129	; 0x81
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fe3d 	bl	800c296 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a622:	2101      	movs	r1, #1
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f001 fe36 	bl	800c296 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a632:	2182      	movs	r1, #130	; 0x82
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 fe2e 	bl	800c296 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00e      	beq.n	800a668 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f001 ff28 	bl	800c4b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBD_CDC_Setup>:
>>>>>>> 6147058 (refactor)
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009460:	2b00      	cmp	r3, #0
 8009462:	d039      	beq.n	80094d8 <USBD_CDC_Setup+0x9e>
 8009464:	2b20      	cmp	r3, #32
 8009466:	d17f      	bne.n	8009568 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	88db      	ldrh	r3, [r3, #6]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d029      	beq.n	80094c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	b25b      	sxtb	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	da11      	bge.n	800949e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009486:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	88d2      	ldrh	r2, [r2, #6]
 800948c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800948e:	6939      	ldr	r1, [r7, #16]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	461a      	mov	r2, r3
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f001 fa09 	bl	800a8ae <USBD_CtlSendData>
=======
 800a672:	b580      	push	{r7, lr}
 800a674:	b086      	sub	sp, #24
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a682:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d039      	beq.n	800a710 <USBD_CDC_Setup+0x9e>
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d17f      	bne.n	800a7a0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	88db      	ldrh	r3, [r3, #6]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d029      	beq.n	800a6fc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b25b      	sxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	da11      	bge.n	800a6d6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a6be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	88d2      	ldrh	r2, [r2, #6]
 800a6c4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6c6:	6939      	ldr	r1, [r7, #16]
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 fa09 	bl	800bae6 <USBD_CtlSendData>
>>>>>>> 6147058 (refactor)
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
<<<<<<< HEAD
 800949c:	e06b      	b.n	8009576 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	785a      	ldrb	r2, [r3, #1]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80094b4:	6939      	ldr	r1, [r7, #16]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	88db      	ldrh	r3, [r3, #6]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fa24 	bl	800a90a <USBD_CtlPrepareRx>
      break;
 80094c2:	e058      	b.n	8009576 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	7850      	ldrb	r0, [r2, #1]
 80094d0:	2200      	movs	r2, #0
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	4798      	blx	r3
      break;
 80094d6:	e04e      	b.n	8009576 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b0b      	cmp	r3, #11
 80094de:	d02e      	beq.n	800953e <USBD_CDC_Setup+0x104>
 80094e0:	2b0b      	cmp	r3, #11
 80094e2:	dc38      	bgt.n	8009556 <USBD_CDC_Setup+0x11c>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <USBD_CDC_Setup+0xb4>
 80094e8:	2b0a      	cmp	r3, #10
 80094ea:	d014      	beq.n	8009516 <USBD_CDC_Setup+0xdc>
 80094ec:	e033      	b.n	8009556 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d107      	bne.n	8009508 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80094f8:	f107 030c 	add.w	r3, r7, #12
 80094fc:	2202      	movs	r2, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f9d4 	bl	800a8ae <USBD_CtlSendData>
=======
 800a6d4:	e06b      	b.n	800a7ae <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	785a      	ldrb	r2, [r3, #1]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	88db      	ldrh	r3, [r3, #6]
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a6ec:	6939      	ldr	r1, [r7, #16]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	88db      	ldrh	r3, [r3, #6]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 fa24 	bl	800bb42 <USBD_CtlPrepareRx>
      break;
 800a6fa:	e058      	b.n	800a7ae <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	7850      	ldrb	r0, [r2, #1]
 800a708:	2200      	movs	r2, #0
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	4798      	blx	r3
      break;
 800a70e:	e04e      	b.n	800a7ae <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2b0b      	cmp	r3, #11
 800a716:	d02e      	beq.n	800a776 <USBD_CDC_Setup+0x104>
 800a718:	2b0b      	cmp	r3, #11
 800a71a:	dc38      	bgt.n	800a78e <USBD_CDC_Setup+0x11c>
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <USBD_CDC_Setup+0xb4>
 800a720:	2b0a      	cmp	r3, #10
 800a722:	d014      	beq.n	800a74e <USBD_CDC_Setup+0xdc>
 800a724:	e033      	b.n	800a78e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d107      	bne.n	800a740 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	2202      	movs	r2, #2
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f9d4 	bl	800bae6 <USBD_CtlSendData>
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 8009506:	e02e      	b.n	8009566 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 f965 	bl	800a7da <USBD_CtlError>
            ret = USBD_FAIL;
 8009510:	2302      	movs	r3, #2
 8009512:	75fb      	strb	r3, [r7, #23]
          break;
 8009514:	e027      	b.n	8009566 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	2b03      	cmp	r3, #3
 800951e:	d107      	bne.n	8009530 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009520:	f107 030f 	add.w	r3, r7, #15
 8009524:	2201      	movs	r2, #1
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f9c0 	bl	800a8ae <USBD_CtlSendData>
=======
 800a73e:	e02e      	b.n	800a79e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 f965 	bl	800ba12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a748:	2302      	movs	r3, #2
 800a74a:	75fb      	strb	r3, [r7, #23]
          break;
 800a74c:	e027      	b.n	800a79e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	2b03      	cmp	r3, #3
 800a756:	d107      	bne.n	800a768 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a758:	f107 030f 	add.w	r3, r7, #15
 800a75c:	2201      	movs	r2, #1
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f9c0 	bl	800bae6 <USBD_CtlSendData>
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
<<<<<<< HEAD
 800952e:	e01a      	b.n	8009566 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f001 f951 	bl	800a7da <USBD_CtlError>
            ret = USBD_FAIL;
 8009538:	2302      	movs	r3, #2
 800953a:	75fb      	strb	r3, [r7, #23]
          break;
 800953c:	e013      	b.n	8009566 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009544:	2b03      	cmp	r3, #3
 8009546:	d00d      	beq.n	8009564 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f001 f945 	bl	800a7da <USBD_CtlError>
            ret = USBD_FAIL;
 8009550:	2302      	movs	r3, #2
 8009552:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009554:	e006      	b.n	8009564 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009556:	6839      	ldr	r1, [r7, #0]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 f93e 	bl	800a7da <USBD_CtlError>
          ret = USBD_FAIL;
 800955e:	2302      	movs	r3, #2
 8009560:	75fb      	strb	r3, [r7, #23]
          break;
 8009562:	e000      	b.n	8009566 <USBD_CDC_Setup+0x12c>
          break;
 8009564:	bf00      	nop
      }
      break;
 8009566:	e006      	b.n	8009576 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 f935 	bl	800a7da <USBD_CtlError>
      ret = USBD_FAIL;
 8009570:	2302      	movs	r3, #2
 8009572:	75fb      	strb	r3, [r7, #23]
      break;
 8009574:	bf00      	nop
  }

  return ret;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_CDC_DataIn>:
=======
 800a766:	e01a      	b.n	800a79e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f001 f951 	bl	800ba12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a770:	2302      	movs	r3, #2
 800a772:	75fb      	strb	r3, [r7, #23]
          break;
 800a774:	e013      	b.n	800a79e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a77c:	2b03      	cmp	r3, #3
 800a77e:	d00d      	beq.n	800a79c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f945 	bl	800ba12 <USBD_CtlError>
            ret = USBD_FAIL;
 800a788:	2302      	movs	r3, #2
 800a78a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a78c:	e006      	b.n	800a79c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a78e:	6839      	ldr	r1, [r7, #0]
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f001 f93e 	bl	800ba12 <USBD_CtlError>
          ret = USBD_FAIL;
 800a796:	2302      	movs	r3, #2
 800a798:	75fb      	strb	r3, [r7, #23]
          break;
 800a79a:	e000      	b.n	800a79e <USBD_CDC_Setup+0x12c>
          break;
 800a79c:	bf00      	nop
      }
      break;
 800a79e:	e006      	b.n	800a7ae <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f935 	bl	800ba12 <USBD_CtlError>
      ret = USBD_FAIL;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ac:	bf00      	nop
  }

  return ret;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_CDC_DataIn>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009592:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800959a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d03a      	beq.n	800961c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	440b      	add	r3, r1
 80095b4:	331c      	adds	r3, #28
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d029      	beq.n	8009610 <USBD_CDC_DataIn+0x90>
 80095bc:	78fa      	ldrb	r2, [r7, #3]
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	4613      	mov	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	440b      	add	r3, r1
 80095ca:	331c      	adds	r3, #28
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	78f9      	ldrb	r1, [r7, #3]
 80095d0:	68b8      	ldr	r0, [r7, #8]
 80095d2:	460b      	mov	r3, r1
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	440b      	add	r3, r1
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4403      	add	r3, r0
 80095dc:	3338      	adds	r3, #56	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80095e4:	fb03 f301 	mul.w	r3, r3, r1
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d110      	bne.n	8009610 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	331c      	adds	r3, #28
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009602:	78f9      	ldrb	r1, [r7, #3]
 8009604:	2300      	movs	r3, #0
 8009606:	2200      	movs	r2, #0
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fdd0 	bl	800b1ae <USBD_LL_Transmit>
 800960e:	e003      	b.n	8009618 <USBD_CDC_DataIn+0x98>
=======
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ca:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7d2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d03a      	beq.n	800a854 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	331c      	adds	r3, #28
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d029      	beq.n	800a848 <USBD_CDC_DataIn+0x90>
 800a7f4:	78fa      	ldrb	r2, [r7, #3]
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	331c      	adds	r3, #28
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	78f9      	ldrb	r1, [r7, #3]
 800a808:	68b8      	ldr	r0, [r7, #8]
 800a80a:	460b      	mov	r3, r1
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	440b      	add	r3, r1
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	4403      	add	r3, r0
 800a814:	3338      	adds	r3, #56	; 0x38
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	fbb2 f1f3 	udiv	r1, r2, r3
 800a81c:	fb03 f301 	mul.w	r3, r3, r1
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d110      	bne.n	800a848 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	4613      	mov	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	440b      	add	r3, r1
 800a834:	331c      	adds	r3, #28
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a83a:	78f9      	ldrb	r1, [r7, #3]
 800a83c:	2300      	movs	r3, #0
 800a83e:	2200      	movs	r2, #0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f001 fdd0 	bl	800c3e6 <USBD_LL_Transmit>
 800a846:	e003      	b.n	800a850 <USBD_CDC_DataIn+0x98>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      hcdc->TxState = 0U;
<<<<<<< HEAD
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	e000      	b.n	800961e <USBD_CDC_DataIn+0x9e>
=======
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <USBD_CDC_DataIn+0x9e>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 800961c:	2302      	movs	r3, #2
  }
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_CDC_DataOut>:
=======
 800a854:	2302      	movs	r3, #2
  }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_CDC_DataOut>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
<<<<<<< HEAD
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	460b      	mov	r3, r1
 8009630:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009638:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 fdfb 	bl	800b23a <USBD_LL_GetRxDataSize>
 8009644:	4602      	mov	r2, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a870:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	4619      	mov	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fdfb 	bl	800c472 <USBD_LL_GetRxDataSize>
 800a87c:	4602      	mov	r2, r0
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> 6147058 (refactor)

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
<<<<<<< HEAD
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00d      	beq.n	8009672 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800966a:	4611      	mov	r1, r2
 800966c:	4798      	blx	r3

    return USBD_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <USBD_CDC_DataOut+0x4e>
=======
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	68fa      	ldr	r2, [r7, #12]
 800a898:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	4798      	blx	r3

    return USBD_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e000      	b.n	800a8ac <USBD_CDC_DataOut+0x4e>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 8009672:	2302      	movs	r3, #2
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_CDC_EP0_RxReady>:
=======
 800a8aa:	2302      	movs	r3, #2
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <USBD_CDC_EP0_RxReady>:
>>>>>>> 6147058 (refactor)
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009692:	2b00      	cmp	r3, #0
 8009694:	d015      	beq.n	80096c2 <USBD_CDC_EP0_RxReady+0x46>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800969c:	2bff      	cmp	r3, #255	; 0xff
 800969e:	d010      	beq.n	80096c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80096ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80096b6:	b292      	uxth	r2, r2
 80096b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_CDC_GetFSCfgDesc>:
=======
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d015      	beq.n	800a8fa <USBD_CDC_EP0_RxReady+0x46>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8d4:	2bff      	cmp	r3, #255	; 0xff
 800a8d6:	d010      	beq.n	800a8fa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a8e6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a8ee:	b292      	uxth	r2, r2
 800a8f0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	22ff      	movs	r2, #255	; 0xff
 800a8f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_CDC_GetFSCfgDesc>:
>>>>>>> 6147058 (refactor)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2243      	movs	r2, #67	; 0x43
 80096d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80096da:	4b03      	ldr	r3, [pc, #12]	; (80096e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80096dc:	4618      	mov	r0, r3
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	200000a4 	.word	0x200000a4

080096ec <USBD_CDC_GetHSCfgDesc>:
=======
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2243      	movs	r2, #67	; 0x43
 800a910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a912:	4b03      	ldr	r3, [pc, #12]	; (800a920 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	bc80      	pop	{r7}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	200000a8 	.word	0x200000a8

0800a924 <USBD_CDC_GetHSCfgDesc>:
>>>>>>> 6147058 (refactor)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2243      	movs	r2, #67	; 0x43
 80096f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80096fa:	4b03      	ldr	r3, [pc, #12]	; (8009708 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	20000060 	.word	0x20000060

0800970c <USBD_CDC_GetOtherSpeedCfgDesc>:
=======
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2243      	movs	r2, #67	; 0x43
 800a930:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a932:	4b03      	ldr	r3, [pc, #12]	; (800a940 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	bc80      	pop	{r7}
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	20000064 	.word	0x20000064

0800a944 <USBD_CDC_GetOtherSpeedCfgDesc>:
>>>>>>> 6147058 (refactor)
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
<<<<<<< HEAD
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2243      	movs	r2, #67	; 0x43
 8009718:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	200000e8 	.word	0x200000e8

0800972c <USBD_CDC_GetDeviceQualifierDescriptor>:
=======
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2243      	movs	r2, #67	; 0x43
 800a950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc80      	pop	{r7}
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	200000ec 	.word	0x200000ec

0800a964 <USBD_CDC_GetDeviceQualifierDescriptor>:
>>>>>>> 6147058 (refactor)
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
<<<<<<< HEAD
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	220a      	movs	r2, #10
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	; (8009748 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	2000001c 	.word	0x2000001c

0800974c <USBD_CDC_RegisterInterface>:
=======
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	220a      	movs	r2, #10
 800a970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a972:	4b03      	ldr	r3, [pc, #12]	; (800a980 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	bc80      	pop	{r7}
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	20000020 	.word	0x20000020

0800a984 <USBD_CDC_RegisterInterface>:
>>>>>>> 6147058 (refactor)
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
<<<<<<< HEAD
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009756:	2302      	movs	r3, #2
 8009758:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	683a      	ldr	r2, [r7, #0]
 8009764:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	bc80      	pop	{r7}
 8009776:	4770      	bx	lr

08009778 <USBD_CDC_SetTxBuffer>:
=======
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a98e:	2302      	movs	r3, #2
 800a990:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr

0800a9b0 <USBD_CDC_SetTxBuffer>:
>>>>>>> 6147058 (refactor)
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
<<<<<<< HEAD
 8009778:	b480      	push	{r7}
 800977a:	b087      	sub	sp, #28
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009796:	88fa      	ldrh	r2, [r7, #6]
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr

080097aa <USBD_CDC_SetRxBuffer>:
=======
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a9ce:	88fa      	ldrh	r2, [r7, #6]
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <USBD_CDC_SetRxBuffer>:
>>>>>>> 6147058 (refactor)
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
<<<<<<< HEAD
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bc80      	pop	{r7}
 80097ce:	4770      	bx	lr

080097d0 <USBD_CDC_TransmitPacket>:
=======
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bc80      	pop	{r7}
 800aa06:	4770      	bx	lr

0800aa08 <USBD_CDC_TransmitPacket>:
>>>>>>> 6147058 (refactor)
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d01c      	beq.n	8009824 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d115      	bne.n	8009820 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009812:	b29b      	uxth	r3, r3
 8009814:	2181      	movs	r1, #129	; 0x81
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 fcc9 	bl	800b1ae <USBD_LL_Transmit>

      return USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	e002      	b.n	8009826 <USBD_CDC_TransmitPacket+0x56>
=======
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01c      	beq.n	800aa5c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d115      	bne.n	800aa58 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	2181      	movs	r1, #129	; 0x81
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f001 fcc9 	bl	800c3e6 <USBD_LL_Transmit>

      return USBD_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e002      	b.n	800aa5e <USBD_CDC_TransmitPacket+0x56>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      return USBD_BUSY;
<<<<<<< HEAD
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <USBD_CDC_TransmitPacket+0x56>
=======
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e000      	b.n	800aa5e <USBD_CDC_TransmitPacket+0x56>
>>>>>>> 6147058 (refactor)
    }
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 8009824:	2302      	movs	r3, #2
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_CDC_ReceivePacket>:
=======
 800aa5c:	2302      	movs	r3, #2
  }
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <USBD_CDC_ReceivePacket>:
>>>>>>> 6147058 (refactor)
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d017      	beq.n	8009878 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c1b      	ldrb	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800985a:	2101      	movs	r1, #1
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 fcc9 	bl	800b1f4 <USBD_LL_PrepareReceive>
 8009862:	e007      	b.n	8009874 <USBD_CDC_ReceivePacket+0x46>
=======
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa74:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d017      	beq.n	800aab0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7c1b      	ldrb	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d109      	bne.n	800aa9c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa92:	2101      	movs	r1, #1
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fcc9 	bl	800c42c <USBD_LL_PrepareReceive>
 800aa9a:	e007      	b.n	800aaac <USBD_CDC_ReceivePacket+0x46>
>>>>>>> 6147058 (refactor)
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
<<<<<<< HEAD
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800986a:	2340      	movs	r3, #64	; 0x40
 800986c:	2101      	movs	r1, #1
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 fcc0 	bl	800b1f4 <USBD_LL_PrepareReceive>
=======
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aaa2:	2340      	movs	r3, #64	; 0x40
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fcc0 	bl	800c42c <USBD_LL_PrepareReceive>
>>>>>>> 6147058 (refactor)
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
<<<<<<< HEAD
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <USBD_CDC_ReceivePacket+0x4c>
=======
 800aaac:	2300      	movs	r3, #0
 800aaae:	e000      	b.n	800aab2 <USBD_CDC_ReceivePacket+0x4c>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    return USBD_FAIL;
<<<<<<< HEAD
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_Init>:
=======
 800aab0:	2302      	movs	r3, #2
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_Init>:
>>>>>>> 6147058 (refactor)
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
<<<<<<< HEAD
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <USBD_Init+0x18>
=======
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	4613      	mov	r3, r2
 800aac6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <USBD_Init+0x18>
>>>>>>> 6147058 (refactor)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
<<<<<<< HEAD
 8009896:	2302      	movs	r3, #2
 8009898:	e01a      	b.n	80098d0 <USBD_Init+0x4e>
=======
 800aace:	2302      	movs	r3, #2
 800aad0:	e01a      	b.n	800ab08 <USBD_Init+0x4e>
>>>>>>> 6147058 (refactor)
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
<<<<<<< HEAD
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
=======
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
>>>>>>> 6147058 (refactor)
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
<<<<<<< HEAD
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
=======
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
>>>>>>> 6147058 (refactor)
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	79fa      	ldrb	r2, [r7, #7]
 80098c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f001 fb2d 	bl	800af28 <USBD_LL_Init>

  return USBD_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_RegisterClass>:
=======
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	79fa      	ldrb	r2, [r7, #7]
 800aafe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ab00:	68f8      	ldr	r0, [r7, #12]
 800ab02:	f001 fb2d 	bl	800c160 <USBD_LL_Init>

  return USBD_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBD_RegisterClass>:
>>>>>>> 6147058 (refactor)
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
<<<<<<< HEAD
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d006      	beq.n	80098fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	683a      	ldr	r2, [r7, #0]
 80098f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
 80098f8:	e001      	b.n	80098fe <USBD_RegisterClass+0x26>
=======
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d006      	beq.n	800ab32 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73fb      	strb	r3, [r7, #15]
 800ab30:	e001      	b.n	800ab36 <USBD_RegisterClass+0x26>
>>>>>>> 6147058 (refactor)
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
<<<<<<< HEAD
 80098fa:	2302      	movs	r3, #2
 80098fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	bc80      	pop	{r7}
 8009908:	4770      	bx	lr

0800990a <USBD_Start>:
=======
 800ab32:	2302      	movs	r3, #2
 800ab34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3714      	adds	r7, #20
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bc80      	pop	{r7}
 800ab40:	4770      	bx	lr

0800ab42 <USBD_Start>:
>>>>>>> 6147058 (refactor)
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fb62 	bl	800afdc <USBD_LL_Start>

  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_RunTestMode>:
=======
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f001 fb62 	bl	800c214 <USBD_LL_Start>

  return USBD_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBD_RunTestMode>:
>>>>>>> 6147058 (refactor)
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
<<<<<<< HEAD
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
=======
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
<<<<<<< HEAD
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	bc80      	pop	{r7}
 8009934:	4770      	bx	lr

08009936 <USBD_SetClassConfig>:
=======
 800ab62:	2300      	movs	r3, #0
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bc80      	pop	{r7}
 800ab6c:	4770      	bx	lr

0800ab6e <USBD_SetClassConfig>:
>>>>>>> 6147058 (refactor)
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009942:	2302      	movs	r3, #2
 8009944:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00c      	beq.n	800996a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	4798      	blx	r3
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
=======
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	460b      	mov	r3, r1
 800ab78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ab7a:	2302      	movs	r3, #2
 800ab7c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	78fa      	ldrb	r2, [r7, #3]
 800ab92:	4611      	mov	r1, r2
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]
>>>>>>> 6147058 (refactor)
    }
  }

  return ret;
<<<<<<< HEAD
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_ClrClassConfig>:
=======
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_ClrClassConfig>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
<<<<<<< HEAD
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	4611      	mov	r1, r2
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	4798      	blx	r3

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBD_LL_SetupStage>:
=======
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	78fa      	ldrb	r2, [r7, #3]
 800abc2:	4611      	mov	r1, r2
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3

  return USBD_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_LL_SetupStage>:
>>>>>>> 6147058 (refactor)
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
<<<<<<< HEAD
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fed8 	bl	800a762 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80099c0:	461a      	mov	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80099ce:	f003 031f 	and.w	r3, r3, #31
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d016      	beq.n	8009a04 <USBD_LL_SetupStage+0x6a>
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d81c      	bhi.n	8009a14 <USBD_LL_SetupStage+0x7a>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <USBD_LL_SetupStage+0x4a>
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d008      	beq.n	80099f4 <USBD_LL_SetupStage+0x5a>
 80099e2:	e017      	b.n	8009a14 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f9cb 	bl	8009d88 <USBD_StdDevReq>
      break;
 80099f2:	e01a      	b.n	8009a2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 fa2d 	bl	8009e5c <USBD_StdItfReq>
      break;
 8009a02:	e012      	b.n	8009a2a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fa6d 	bl	8009eec <USBD_StdEPReq>
      break;
 8009a12:	e00a      	b.n	8009a2a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009a1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	4619      	mov	r1, r3
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f001 fb3a 	bl	800b09c <USBD_LL_StallEP>
      break;
 8009a28:	bf00      	nop
  }

  return USBD_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_LL_DataOutStage>:
=======
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b082      	sub	sp, #8
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fed8 	bl	800b99a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800abf8:	461a      	mov	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d016      	beq.n	800ac3c <USBD_LL_SetupStage+0x6a>
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d81c      	bhi.n	800ac4c <USBD_LL_SetupStage+0x7a>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USBD_LL_SetupStage+0x4a>
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d008      	beq.n	800ac2c <USBD_LL_SetupStage+0x5a>
 800ac1a:	e017      	b.n	800ac4c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f9cb 	bl	800afc0 <USBD_StdDevReq>
      break;
 800ac2a:	e01a      	b.n	800ac62 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 fa2d 	bl	800b094 <USBD_StdItfReq>
      break;
 800ac3a:	e012      	b.n	800ac62 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fa6d 	bl	800b124 <USBD_StdEPReq>
      break;
 800ac4a:	e00a      	b.n	800ac62 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ac52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 fb3a 	bl	800c2d4 <USBD_LL_StallEP>
      break;
 800ac60:	bf00      	nop
  }

  return USBD_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_LL_DataOutStage>:
>>>>>>> 6147058 (refactor)
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d14b      	bne.n	8009ae0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009a4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d134      	bne.n	8009ac4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d919      	bls.n	8009a9a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d203      	bcs.n	8009a88 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	e002      	b.n	8009a8e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 ff57 	bl	800a946 <USBD_CtlContinueRx>
 8009a98:	e038      	b.n	8009b0c <USBD_LL_DataOutStage+0xd8>
=======
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	460b      	mov	r3, r1
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ac7a:	7afb      	ldrb	r3, [r7, #11]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d14b      	bne.n	800ad18 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ac86:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d134      	bne.n	800acfc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d919      	bls.n	800acd2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d203      	bcs.n	800acc0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	e002      	b.n	800acc6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	461a      	mov	r2, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f000 ff57 	bl	800bb7e <USBD_CtlContinueRx>
 800acd0:	e038      	b.n	800ad44 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
<<<<<<< HEAD
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d105      	bne.n	8009abc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	f000 ff54 	bl	800a96a <USBD_CtlSendStatus>
 8009ac2:	e023      	b.n	8009b0c <USBD_LL_DataOutStage+0xd8>
=======
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ace4:	2b03      	cmp	r3, #3
 800ace6:	d105      	bne.n	800acf4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 ff54 	bl	800bba2 <USBD_CtlSendStatus>
 800acfa:	e023      	b.n	800ad44 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 6147058 (refactor)
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
<<<<<<< HEAD
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d11e      	bne.n	8009b0c <USBD_LL_DataOutStage+0xd8>
=======
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad02:	2b05      	cmp	r3, #5
 800ad04:	d11e      	bne.n	800ad44 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 6147058 (refactor)
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
<<<<<<< HEAD
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009ad6:	2100      	movs	r1, #0
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f001 fadf 	bl	800b09c <USBD_LL_StallEP>
 8009ade:	e015      	b.n	8009b0c <USBD_LL_DataOutStage+0xd8>
=======
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ad0e:	2100      	movs	r1, #0
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f001 fadf 	bl	800c2d4 <USBD_LL_StallEP>
 800ad16:	e015      	b.n	800ad44 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 6147058 (refactor)
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
<<<<<<< HEAD
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00d      	beq.n	8009b08 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d108      	bne.n	8009b08 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	7afa      	ldrb	r2, [r7, #11]
 8009b00:	4611      	mov	r1, r2
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	4798      	blx	r3
 8009b06:	e001      	b.n	8009b0c <USBD_LL_DataOutStage+0xd8>
=======
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00d      	beq.n	800ad40 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d108      	bne.n	800ad40 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	7afa      	ldrb	r2, [r7, #11]
 800ad38:	4611      	mov	r1, r2
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	4798      	blx	r3
 800ad3e:	e001      	b.n	800ad44 <USBD_LL_DataOutStage+0xd8>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e000      	b.n	8009b0e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <USBD_LL_DataInStage>:
=======
 800ad40:	2302      	movs	r3, #2
 800ad42:	e000      	b.n	800ad46 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBD_LL_DataInStage>:
>>>>>>> 6147058 (refactor)
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
<<<<<<< HEAD
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b086      	sub	sp, #24
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	60f8      	str	r0, [r7, #12]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	607a      	str	r2, [r7, #4]
 8009b22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d17f      	bne.n	8009c2a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3314      	adds	r3, #20
 8009b2e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d15c      	bne.n	8009bf4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d915      	bls.n	8009b72 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fec1 	bl	800a8e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b64:	2300      	movs	r3, #0
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f001 fb42 	bl	800b1f4 <USBD_LL_PrepareReceive>
 8009b70:	e04e      	b.n	8009c10 <USBD_LL_DataInStage+0xfa>
=======
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b086      	sub	sp, #24
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	60f8      	str	r0, [r7, #12]
 800ad56:	460b      	mov	r3, r1
 800ad58:	607a      	str	r2, [r7, #4]
 800ad5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d17f      	bne.n	800ae62 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3314      	adds	r3, #20
 800ad66:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d15c      	bne.n	800ae2c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	68da      	ldr	r2, [r3, #12]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d915      	bls.n	800adaa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	461a      	mov	r2, r3
 800ad94:	6879      	ldr	r1, [r7, #4]
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fec1 	bl	800bb1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f001 fb42 	bl	800c42c <USBD_LL_PrepareReceive>
 800ada8:	e04e      	b.n	800ae48 <USBD_LL_DataInStage+0xfa>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
<<<<<<< HEAD
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	6912      	ldr	r2, [r2, #16]
 8009b7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b7e:	fb02 f201 	mul.w	r2, r2, r1
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11c      	bne.n	8009bc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d316      	bcc.n	8009bc2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d20f      	bcs.n	8009bc2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 fe9d 	bl	800a8e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f001 fb1a 	bl	800b1f4 <USBD_LL_PrepareReceive>
 8009bc0:	e026      	b.n	8009c10 <USBD_LL_DataInStage+0xfa>
=======
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	6912      	ldr	r2, [r2, #16]
 800adb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800adb6:	fb02 f201 	mul.w	r2, r2, r1
 800adba:	1a9b      	subs	r3, r3, r2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11c      	bne.n	800adfa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800adc8:	429a      	cmp	r2, r3
 800adca:	d316      	bcc.n	800adfa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800add6:	429a      	cmp	r2, r3
 800add8:	d20f      	bcs.n	800adfa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800adda:	2200      	movs	r2, #0
 800addc:	2100      	movs	r1, #0
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 fe9d 	bl	800bb1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800adec:	2300      	movs	r3, #0
 800adee:	2200      	movs	r2, #0
 800adf0:	2100      	movs	r1, #0
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f001 fb1a 	bl	800c42c <USBD_LL_PrepareReceive>
 800adf8:	e026      	b.n	800ae48 <USBD_LL_DataInStage+0xfa>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
<<<<<<< HEAD
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00a      	beq.n	8009be4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d105      	bne.n	8009be4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009be4:	2180      	movs	r1, #128	; 0x80
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f001 fa58 	bl	800b09c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 fecf 	bl	800a990 <USBD_CtlReceiveStatus>
 8009bf2:	e00d      	b.n	8009c10 <USBD_LL_DataInStage+0xfa>
=======
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d105      	bne.n	800ae1c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800ae1c:	2180      	movs	r1, #128	; 0x80
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f001 fa58 	bl	800c2d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800ae24:	68f8      	ldr	r0, [r7, #12]
 800ae26:	f000 fecf 	bl	800bbc8 <USBD_CtlReceiveStatus>
 800ae2a:	e00d      	b.n	800ae48 <USBD_LL_DataInStage+0xfa>
>>>>>>> 6147058 (refactor)
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
<<<<<<< HEAD
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	d004      	beq.n	8009c08 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d103      	bne.n	8009c10 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009c08:	2180      	movs	r1, #128	; 0x80
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f001 fa46 	bl	800b09c <USBD_LL_StallEP>
=======
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae32:	2b04      	cmp	r3, #4
 800ae34:	d004      	beq.n	800ae40 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d103      	bne.n	800ae48 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ae40:	2180      	movs	r1, #128	; 0x80
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f001 fa46 	bl	800c2d4 <USBD_LL_StallEP>
>>>>>>> 6147058 (refactor)
      }
    }

    if (pdev->dev_test_mode == 1U)
<<<<<<< HEAD
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d11d      	bne.n	8009c56 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff fe81 	bl	8009922 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009c28:	e015      	b.n	8009c56 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00d      	beq.n	8009c52 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d108      	bne.n	8009c52 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	7afa      	ldrb	r2, [r7, #11]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	4798      	blx	r3
 8009c50:	e001      	b.n	8009c56 <USBD_LL_DataInStage+0x140>
=======
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d11d      	bne.n	800ae8e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7ff fe81 	bl	800ab5a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ae60:	e015      	b.n	800ae8e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00d      	beq.n	800ae8a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d108      	bne.n	800ae8a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	7afa      	ldrb	r2, [r7, #11]
 800ae82:	4611      	mov	r1, r2
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	4798      	blx	r3
 800ae88:	e001      	b.n	800ae8e <USBD_LL_DataInStage+0x140>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
<<<<<<< HEAD
 8009c52:	2302      	movs	r3, #2
 8009c54:	e000      	b.n	8009c58 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3718      	adds	r7, #24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_LL_Reset>:
=======
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	e000      	b.n	800ae90 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBD_LL_Reset>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c68:	2340      	movs	r3, #64	; 0x40
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f9cf 	bl	800b012 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2240      	movs	r2, #64	; 0x40
 8009c80:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	2200      	movs	r2, #0
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f001 f9c1 	bl	800b012 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2240      	movs	r2, #64	; 0x40
 8009c9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d009      	beq.n	8009cd8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	4798      	blx	r3
  }

  return USBD_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_LL_SetSpeed>:
=======
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aea0:	2340      	movs	r3, #64	; 0x40
 800aea2:	2200      	movs	r2, #0
 800aea4:	2100      	movs	r1, #0
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 f9cf 	bl	800c24a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2240      	movs	r2, #64	; 0x40
 800aeb8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	2200      	movs	r2, #0
 800aec0:	2180      	movs	r1, #128	; 0x80
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 f9c1 	bl	800c24a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2240      	movs	r2, #64	; 0x40
 800aed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d009      	beq.n	800af10 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	6852      	ldr	r2, [r2, #4]
 800af08:	b2d2      	uxtb	r2, r2
 800af0a:	4611      	mov	r1, r2
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
  }

  return USBD_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_LL_SetSpeed>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
<<<<<<< HEAD
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	78fa      	ldrb	r2, [r7, #3]
 8009cf2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bc80      	pop	{r7}
 8009cfe:	4770      	bx	lr

08009d00 <USBD_LL_Suspend>:
=======
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	78fa      	ldrb	r2, [r7, #3]
 800af2a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	370c      	adds	r7, #12
 800af32:	46bd      	mov	sp, r7
 800af34:	bc80      	pop	{r7}
 800af36:	4770      	bx	lr

0800af38 <USBD_LL_Suspend>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2204      	movs	r2, #4
 8009d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009d1c:	2300      	movs	r3, #0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bc80      	pop	{r7}
 8009d26:	4770      	bx	lr

08009d28 <USBD_LL_Resume>:
=======
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2204      	movs	r2, #4
 800af50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bc80      	pop	{r7}
 800af5e:	4770      	bx	lr

0800af60 <USBD_LL_Resume>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d105      	bne.n	8009d46 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bc80      	pop	{r7}
 8009d50:	4770      	bx	lr

08009d52 <USBD_LL_SOF>:
=======
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af6e:	2b04      	cmp	r3, #4
 800af70:	d105      	bne.n	800af7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	bc80      	pop	{r7}
 800af88:	4770      	bx	lr

0800af8a <USBD_LL_SOF>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d10b      	bne.n	8009d7c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d005      	beq.n	8009d7c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	4798      	blx	r3
=======
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d10b      	bne.n	800afb4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d005      	beq.n	800afb4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
>>>>>>> 6147058 (refactor)
    }
  }

  return USBD_OK;
<<<<<<< HEAD
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBD_StdDevReq>:
=======
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <USBD_StdDevReq>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d005      	beq.n	8009dae <USBD_StdDevReq+0x26>
 8009da2:	2b40      	cmp	r3, #64	; 0x40
 8009da4:	d84f      	bhi.n	8009e46 <USBD_StdDevReq+0xbe>
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <USBD_StdDevReq+0x36>
 8009daa:	2b20      	cmp	r3, #32
 8009dac:	d14b      	bne.n	8009e46 <USBD_StdDevReq+0xbe>
=======
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afd6:	2b40      	cmp	r3, #64	; 0x40
 800afd8:	d005      	beq.n	800afe6 <USBD_StdDevReq+0x26>
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d84f      	bhi.n	800b07e <USBD_StdDevReq+0xbe>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d009      	beq.n	800aff6 <USBD_StdDevReq+0x36>
 800afe2:	2b20      	cmp	r3, #32
 800afe4:	d14b      	bne.n	800b07e <USBD_StdDevReq+0xbe>
>>>>>>> 6147058 (refactor)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	4798      	blx	r3
      break;
 8009dbc:	e048      	b.n	8009e50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d839      	bhi.n	8009e3a <USBD_StdDevReq+0xb2>
 8009dc6:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <USBD_StdDevReq+0x44>)
 8009dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dcc:	08009e1d 	.word	0x08009e1d
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	08009e3b 	.word	0x08009e3b
 8009dd8:	08009e27 	.word	0x08009e27
 8009ddc:	08009e3b 	.word	0x08009e3b
 8009de0:	08009dff 	.word	0x08009dff
 8009de4:	08009df5 	.word	0x08009df5
 8009de8:	08009e3b 	.word	0x08009e3b
 8009dec:	08009e13 	.word	0x08009e13
 8009df0:	08009e09 	.word	0x08009e09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9dc 	bl	800a1b4 <USBD_GetDescriptor>
          break;
 8009dfc:	e022      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fb3f 	bl	800a484 <USBD_SetAddress>
          break;
 8009e06:	e01d      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb7e 	bl	800a50c <USBD_SetConfig>
          break;
 8009e10:	e018      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fc07 	bl	800a628 <USBD_GetConfig>
          break;
 8009e1a:	e013      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fc37 	bl	800a692 <USBD_GetStatus>
          break;
 8009e24:	e00e      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 fc65 	bl	800a6f8 <USBD_SetFeature>
          break;
 8009e2e:	e009      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fc74 	bl	800a720 <USBD_ClrFeature>
          break;
 8009e38:	e004      	b.n	8009e44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fccc 	bl	800a7da <USBD_CtlError>
          break;
 8009e42:	bf00      	nop
      }
      break;
 8009e44:	e004      	b.n	8009e50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fcc6 	bl	800a7da <USBD_CtlError>
      break;
 8009e4e:	bf00      	nop
  }

  return ret;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop

08009e5c <USBD_StdItfReq>:
=======
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	4798      	blx	r3
      break;
 800aff4:	e048      	b.n	800b088 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	2b09      	cmp	r3, #9
 800affc:	d839      	bhi.n	800b072 <USBD_StdDevReq+0xb2>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <USBD_StdDevReq+0x44>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b055 	.word	0x0800b055
 800b008:	0800b069 	.word	0x0800b069
 800b00c:	0800b073 	.word	0x0800b073
 800b010:	0800b05f 	.word	0x0800b05f
 800b014:	0800b073 	.word	0x0800b073
 800b018:	0800b037 	.word	0x0800b037
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b073 	.word	0x0800b073
 800b024:	0800b04b 	.word	0x0800b04b
 800b028:	0800b041 	.word	0x0800b041
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f9dc 	bl	800b3ec <USBD_GetDescriptor>
          break;
 800b034:	e022      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb3f 	bl	800b6bc <USBD_SetAddress>
          break;
 800b03e:	e01d      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fb7e 	bl	800b744 <USBD_SetConfig>
          break;
 800b048:	e018      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fc07 	bl	800b860 <USBD_GetConfig>
          break;
 800b052:	e013      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fc37 	bl	800b8ca <USBD_GetStatus>
          break;
 800b05c:	e00e      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fc65 	bl	800b930 <USBD_SetFeature>
          break;
 800b066:	e009      	b.n	800b07c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fc74 	bl	800b958 <USBD_ClrFeature>
          break;
 800b070:	e004      	b.n	800b07c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fccc 	bl	800ba12 <USBD_CtlError>
          break;
 800b07a:	bf00      	nop
      }
      break;
 800b07c:	e004      	b.n	800b088 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fcc6 	bl	800ba12 <USBD_CtlError>
      break;
 800b086:	bf00      	nop
  }

  return ret;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop

0800b094 <USBD_StdItfReq>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e72:	2b40      	cmp	r3, #64	; 0x40
 8009e74:	d005      	beq.n	8009e82 <USBD_StdItfReq+0x26>
 8009e76:	2b40      	cmp	r3, #64	; 0x40
 8009e78:	d82e      	bhi.n	8009ed8 <USBD_StdItfReq+0x7c>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <USBD_StdItfReq+0x26>
 8009e7e:	2b20      	cmp	r3, #32
 8009e80:	d12a      	bne.n	8009ed8 <USBD_StdItfReq+0x7c>
=======
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d005      	beq.n	800b0ba <USBD_StdItfReq+0x26>
 800b0ae:	2b40      	cmp	r3, #64	; 0x40
 800b0b0:	d82e      	bhi.n	800b110 <USBD_StdItfReq+0x7c>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d001      	beq.n	800b0ba <USBD_StdItfReq+0x26>
 800b0b6:	2b20      	cmp	r3, #32
 800b0b8:	d12a      	bne.n	800b110 <USBD_StdItfReq+0x7c>
>>>>>>> 6147058 (refactor)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
<<<<<<< HEAD
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d81d      	bhi.n	8009eca <USBD_StdItfReq+0x6e>
=======
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	d81d      	bhi.n	800b102 <USBD_StdItfReq+0x6e>
>>>>>>> 6147058 (refactor)
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
<<<<<<< HEAD
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	889b      	ldrh	r3, [r3, #4]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d813      	bhi.n	8009ec0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	4798      	blx	r3
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d110      	bne.n	8009ed4 <USBD_StdItfReq+0x78>
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10d      	bne.n	8009ed4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fd56 	bl	800a96a <USBD_CtlSendStatus>
=======
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	889b      	ldrh	r3, [r3, #4]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d813      	bhi.n	800b0f8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	4798      	blx	r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	88db      	ldrh	r3, [r3, #6]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d110      	bne.n	800b10c <USBD_StdItfReq+0x78>
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10d      	bne.n	800b10c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fd56 	bl	800bba2 <USBD_CtlSendStatus>
>>>>>>> 6147058 (refactor)
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
<<<<<<< HEAD
 8009ebe:	e009      	b.n	8009ed4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fc89 	bl	800a7da <USBD_CtlError>
          break;
 8009ec8:	e004      	b.n	8009ed4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc84 	bl	800a7da <USBD_CtlError>
          break;
 8009ed2:	e000      	b.n	8009ed6 <USBD_StdItfReq+0x7a>
          break;
 8009ed4:	bf00      	nop
      }
      break;
 8009ed6:	e004      	b.n	8009ee2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fc7d 	bl	800a7da <USBD_CtlError>
      break;
 8009ee0:	bf00      	nop
  }

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_StdEPReq>:
=======
 800b0f6:	e009      	b.n	800b10c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 fc89 	bl	800ba12 <USBD_CtlError>
          break;
 800b100:	e004      	b.n	800b10c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc84 	bl	800ba12 <USBD_CtlError>
          break;
 800b10a:	e000      	b.n	800b10e <USBD_StdItfReq+0x7a>
          break;
 800b10c:	bf00      	nop
      }
      break;
 800b10e:	e004      	b.n	800b11a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fc7d 	bl	800ba12 <USBD_CtlError>
      break;
 800b118:	bf00      	nop
  }

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_StdEPReq>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
<<<<<<< HEAD
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	d007      	beq.n	8009f1c <USBD_StdEPReq+0x30>
 8009f0c:	2b40      	cmp	r3, #64	; 0x40
 8009f0e:	f200 8146 	bhi.w	800a19e <USBD_StdEPReq+0x2b2>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <USBD_StdEPReq+0x40>
 8009f16:	2b20      	cmp	r3, #32
 8009f18:	f040 8141 	bne.w	800a19e <USBD_StdEPReq+0x2b2>
=======
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	889b      	ldrh	r3, [r3, #4]
 800b136:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b140:	2b40      	cmp	r3, #64	; 0x40
 800b142:	d007      	beq.n	800b154 <USBD_StdEPReq+0x30>
 800b144:	2b40      	cmp	r3, #64	; 0x40
 800b146:	f200 8146 	bhi.w	800b3d6 <USBD_StdEPReq+0x2b2>
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <USBD_StdEPReq+0x40>
 800b14e:	2b20      	cmp	r3, #32
 800b150:	f040 8141 	bne.w	800b3d6 <USBD_StdEPReq+0x2b2>
>>>>>>> 6147058 (refactor)
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
<<<<<<< HEAD
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
      break;
 8009f2a:	e13d      	b.n	800a1a8 <USBD_StdEPReq+0x2bc>
=======
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	4798      	blx	r3
      break;
 800b162:	e13d      	b.n	800b3e0 <USBD_StdEPReq+0x2bc>
>>>>>>> 6147058 (refactor)

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
<<<<<<< HEAD
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f34:	2b20      	cmp	r3, #32
 8009f36:	d10a      	bne.n	8009f4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
 8009f46:	4603      	mov	r3, r0
 8009f48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	e12d      	b.n	800a1aa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	785b      	ldrb	r3, [r3, #1]
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d007      	beq.n	8009f66 <USBD_StdEPReq+0x7a>
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	f300 811b 	bgt.w	800a192 <USBD_StdEPReq+0x2a6>
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d072      	beq.n	800a046 <USBD_StdEPReq+0x15a>
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d03a      	beq.n	8009fda <USBD_StdEPReq+0xee>
 8009f64:	e115      	b.n	800a192 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d002      	beq.n	8009f76 <USBD_StdEPReq+0x8a>
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d015      	beq.n	8009fa0 <USBD_StdEPReq+0xb4>
 8009f74:	e02b      	b.n	8009fce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00c      	beq.n	8009f96 <USBD_StdEPReq+0xaa>
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b80      	cmp	r3, #128	; 0x80
 8009f80:	d009      	beq.n	8009f96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f001 f888 	bl	800b09c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009f8c:	2180      	movs	r1, #128	; 0x80
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 f884 	bl	800b09c <USBD_LL_StallEP>
=======
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b16c:	2b20      	cmp	r3, #32
 800b16e:	d10a      	bne.n	800b186 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	6839      	ldr	r1, [r7, #0]
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
 800b17e:	4603      	mov	r3, r0
 800b180:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	e12d      	b.n	800b3e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	785b      	ldrb	r3, [r3, #1]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d007      	beq.n	800b19e <USBD_StdEPReq+0x7a>
 800b18e:	2b03      	cmp	r3, #3
 800b190:	f300 811b 	bgt.w	800b3ca <USBD_StdEPReq+0x2a6>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d072      	beq.n	800b27e <USBD_StdEPReq+0x15a>
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d03a      	beq.n	800b212 <USBD_StdEPReq+0xee>
 800b19c:	e115      	b.n	800b3ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d002      	beq.n	800b1ae <USBD_StdEPReq+0x8a>
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	d015      	beq.n	800b1d8 <USBD_StdEPReq+0xb4>
 800b1ac:	e02b      	b.n	800b206 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00c      	beq.n	800b1ce <USBD_StdEPReq+0xaa>
 800b1b4:	7bbb      	ldrb	r3, [r7, #14]
 800b1b6:	2b80      	cmp	r3, #128	; 0x80
 800b1b8:	d009      	beq.n	800b1ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f001 f888 	bl	800c2d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b1c4:	2180      	movs	r1, #128	; 0x80
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f001 f884 	bl	800c2d4 <USBD_LL_StallEP>
>>>>>>> 6147058 (refactor)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 8009f94:	e020      	b.n	8009fd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fc1e 	bl	800a7da <USBD_CtlError>
              break;
 8009f9e:	e01b      	b.n	8009fd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	885b      	ldrh	r3, [r3, #2]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10e      	bne.n	8009fc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00b      	beq.n	8009fc6 <USBD_StdEPReq+0xda>
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	2b80      	cmp	r3, #128	; 0x80
 8009fb2:	d008      	beq.n	8009fc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	88db      	ldrh	r3, [r3, #6]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d104      	bne.n	8009fc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f001 f86b 	bl	800b09c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fccf 	bl	800a96a <USBD_CtlSendStatus>

              break;
 8009fcc:	e004      	b.n	8009fd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fc02 	bl	800a7da <USBD_CtlError>
              break;
 8009fd6:	bf00      	nop
          }
          break;
 8009fd8:	e0e0      	b.n	800a19c <USBD_StdEPReq+0x2b0>
=======
 800b1cc:	e020      	b.n	800b210 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fc1e 	bl	800ba12 <USBD_CtlError>
              break;
 800b1d6:	e01b      	b.n	800b210 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	885b      	ldrh	r3, [r3, #2]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10e      	bne.n	800b1fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d00b      	beq.n	800b1fe <USBD_StdEPReq+0xda>
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d008      	beq.n	800b1fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d104      	bne.n	800b1fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 f86b 	bl	800c2d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fccf 	bl	800bba2 <USBD_CtlSendStatus>

              break;
 800b204:	e004      	b.n	800b210 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 fc02 	bl	800ba12 <USBD_CtlError>
              break;
 800b20e:	bf00      	nop
          }
          break;
 800b210:	e0e0      	b.n	800b3d4 <USBD_StdEPReq+0x2b0>
>>>>>>> 6147058 (refactor)

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
<<<<<<< HEAD
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d002      	beq.n	8009fea <USBD_StdEPReq+0xfe>
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d015      	beq.n	800a014 <USBD_StdEPReq+0x128>
 8009fe8:	e026      	b.n	800a038 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00c      	beq.n	800a00a <USBD_StdEPReq+0x11e>
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b80      	cmp	r3, #128	; 0x80
 8009ff4:	d009      	beq.n	800a00a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 f84e 	bl	800b09c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a000:	2180      	movs	r1, #128	; 0x80
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 f84a 	bl	800b09c <USBD_LL_StallEP>
=======
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d002      	beq.n	800b222 <USBD_StdEPReq+0xfe>
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d015      	beq.n	800b24c <USBD_StdEPReq+0x128>
 800b220:	e026      	b.n	800b270 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b222:	7bbb      	ldrb	r3, [r7, #14]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d00c      	beq.n	800b242 <USBD_StdEPReq+0x11e>
 800b228:	7bbb      	ldrb	r3, [r7, #14]
 800b22a:	2b80      	cmp	r3, #128	; 0x80
 800b22c:	d009      	beq.n	800b242 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b22e:	7bbb      	ldrb	r3, [r7, #14]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 f84e 	bl	800c2d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b238:	2180      	movs	r1, #128	; 0x80
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f001 f84a 	bl	800c2d4 <USBD_LL_StallEP>
>>>>>>> 6147058 (refactor)
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
<<<<<<< HEAD
 800a008:	e01c      	b.n	800a044 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fbe4 	bl	800a7da <USBD_CtlError>
              break;
 800a012:	e017      	b.n	800a044 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	885b      	ldrh	r3, [r3, #2]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d112      	bne.n	800a042 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a022:	2b00      	cmp	r3, #0
 800a024:	d004      	beq.n	800a030 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f855 	bl	800b0da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fc9a 	bl	800a96a <USBD_CtlSendStatus>
              }
              break;
 800a036:	e004      	b.n	800a042 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a038:	6839      	ldr	r1, [r7, #0]
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fbcd 	bl	800a7da <USBD_CtlError>
              break;
 800a040:	e000      	b.n	800a044 <USBD_StdEPReq+0x158>
              break;
 800a042:	bf00      	nop
          }
          break;
 800a044:	e0aa      	b.n	800a19c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d002      	beq.n	800a056 <USBD_StdEPReq+0x16a>
 800a050:	2b03      	cmp	r3, #3
 800a052:	d032      	beq.n	800a0ba <USBD_StdEPReq+0x1ce>
 800a054:	e097      	b.n	800a186 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <USBD_StdEPReq+0x180>
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	2b80      	cmp	r3, #128	; 0x80
 800a060:	d004      	beq.n	800a06c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fbb8 	bl	800a7da <USBD_CtlError>
                break;
 800a06a:	e091      	b.n	800a190 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a06c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a070:	2b00      	cmp	r3, #0
 800a072:	da0b      	bge.n	800a08c <USBD_StdEPReq+0x1a0>
 800a074:	7bbb      	ldrb	r3, [r7, #14]
 800a076:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a07a:	4613      	mov	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	3310      	adds	r3, #16
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	4413      	add	r3, r2
 800a088:	3304      	adds	r3, #4
 800a08a:	e00b      	b.n	800a0a4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a08c:	7bbb      	ldrb	r3, [r7, #14]
 800a08e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fbfb 	bl	800a8ae <USBD_CtlSendData>
              break;
 800a0b8:	e06a      	b.n	800a190 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da11      	bge.n	800a0e6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0c2:	7bbb      	ldrb	r3, [r7, #14]
 800a0c4:	f003 020f 	and.w	r2, r3, #15
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	440b      	add	r3, r1
 800a0d4:	3318      	adds	r3, #24
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d117      	bne.n	800a10c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 fb7b 	bl	800a7da <USBD_CtlError>
                  break;
 800a0e4:	e054      	b.n	800a190 <USBD_StdEPReq+0x2a4>
=======
 800b240:	e01c      	b.n	800b27c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fbe4 	bl	800ba12 <USBD_CtlError>
              break;
 800b24a:	e017      	b.n	800b27c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	885b      	ldrh	r3, [r3, #2]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d112      	bne.n	800b27a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b254:	7bbb      	ldrb	r3, [r7, #14]
 800b256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	4619      	mov	r1, r3
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f001 f855 	bl	800c312 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fc9a 	bl	800bba2 <USBD_CtlSendStatus>
              }
              break;
 800b26e:	e004      	b.n	800b27a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fbcd 	bl	800ba12 <USBD_CtlError>
              break;
 800b278:	e000      	b.n	800b27c <USBD_StdEPReq+0x158>
              break;
 800b27a:	bf00      	nop
          }
          break;
 800b27c:	e0aa      	b.n	800b3d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b284:	2b02      	cmp	r3, #2
 800b286:	d002      	beq.n	800b28e <USBD_StdEPReq+0x16a>
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d032      	beq.n	800b2f2 <USBD_StdEPReq+0x1ce>
 800b28c:	e097      	b.n	800b3be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <USBD_StdEPReq+0x180>
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b80      	cmp	r3, #128	; 0x80
 800b298:	d004      	beq.n	800b2a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b29a:	6839      	ldr	r1, [r7, #0]
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 fbb8 	bl	800ba12 <USBD_CtlError>
                break;
 800b2a2:	e091      	b.n	800b3c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da0b      	bge.n	800b2c4 <USBD_StdEPReq+0x1a0>
 800b2ac:	7bbb      	ldrb	r3, [r7, #14]
 800b2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	3310      	adds	r3, #16
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4413      	add	r3, r2
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	e00b      	b.n	800b2dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	4413      	add	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	4413      	add	r3, r2
 800b2da:	3304      	adds	r3, #4
 800b2dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fbfb 	bl	800bae6 <USBD_CtlSendData>
              break;
 800b2f0:	e06a      	b.n	800b3c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	da11      	bge.n	800b31e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	f003 020f 	and.w	r2, r3, #15
 800b300:	6879      	ldr	r1, [r7, #4]
 800b302:	4613      	mov	r3, r2
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	440b      	add	r3, r1
 800b30c:	3318      	adds	r3, #24
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d117      	bne.n	800b344 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 fb7b 	bl	800ba12 <USBD_CtlError>
                  break;
 800b31c:	e054      	b.n	800b3c8 <USBD_StdEPReq+0x2a4>
>>>>>>> 6147058 (refactor)
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
<<<<<<< HEAD
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	f003 020f 	and.w	r2, r3, #15
 800a0ec:	6879      	ldr	r1, [r7, #4]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	440b      	add	r3, r1
 800a0f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fb68 	bl	800a7da <USBD_CtlError>
                  break;
 800a10a:	e041      	b.n	800a190 <USBD_StdEPReq+0x2a4>
=======
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	f003 020f 	and.w	r2, r3, #15
 800b324:	6879      	ldr	r1, [r7, #4]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	440b      	add	r3, r1
 800b330:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d104      	bne.n	800b344 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb68 	bl	800ba12 <USBD_CtlError>
                  break;
 800b342:	e041      	b.n	800b3c8 <USBD_StdEPReq+0x2a4>
>>>>>>> 6147058 (refactor)
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
<<<<<<< HEAD
 800a10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a110:	2b00      	cmp	r3, #0
 800a112:	da0b      	bge.n	800a12c <USBD_StdEPReq+0x240>
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	3310      	adds	r3, #16
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	4413      	add	r3, r2
 800a128:	3304      	adds	r3, #4
 800a12a:	e00b      	b.n	800a144 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	4413      	add	r3, r2
 800a142:	3304      	adds	r3, #4
 800a144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a146:	7bbb      	ldrb	r3, [r7, #14]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <USBD_StdEPReq+0x266>
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	2b80      	cmp	r3, #128	; 0x80
 800a150:	d103      	bne.n	800a15a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e00e      	b.n	800a178 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 ffda 	bl	800b118 <USBD_LL_IsStallEP>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d003      	beq.n	800a172 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	e002      	b.n	800a178 <USBD_StdEPReq+0x28c>
=======
 800b344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	da0b      	bge.n	800b364 <USBD_StdEPReq+0x240>
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	3310      	adds	r3, #16
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	4413      	add	r3, r2
 800b360:	3304      	adds	r3, #4
 800b362:	e00b      	b.n	800b37c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	4413      	add	r3, r2
 800b37a:	3304      	adds	r3, #4
 800b37c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <USBD_StdEPReq+0x266>
 800b384:	7bbb      	ldrb	r3, [r7, #14]
 800b386:	2b80      	cmp	r3, #128	; 0x80
 800b388:	d103      	bne.n	800b392 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2200      	movs	r2, #0
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	e00e      	b.n	800b3b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b392:	7bbb      	ldrb	r3, [r7, #14]
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 ffda 	bl	800c350 <USBD_LL_IsStallEP>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e002      	b.n	800b3b0 <USBD_StdEPReq+0x28c>
>>>>>>> 6147058 (refactor)
              }
              else
              {
                pep->status = 0x0000U;
<<<<<<< HEAD
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2200      	movs	r2, #0
 800a176:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2202      	movs	r2, #2
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fb95 	bl	800a8ae <USBD_CtlSendData>
              break;
 800a184:	e004      	b.n	800a190 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a186:	6839      	ldr	r1, [r7, #0]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 fb26 	bl	800a7da <USBD_CtlError>
              break;
 800a18e:	bf00      	nop
          }
          break;
 800a190:	e004      	b.n	800a19c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a192:	6839      	ldr	r1, [r7, #0]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fb20 	bl	800a7da <USBD_CtlError>
          break;
 800a19a:	bf00      	nop
      }
      break;
 800a19c:	e004      	b.n	800a1a8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fb1a 	bl	800a7da <USBD_CtlError>
      break;
 800a1a6:	bf00      	nop
  }

  return ret;
 800a1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <USBD_GetDescriptor>:
=======
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fb95 	bl	800bae6 <USBD_CtlSendData>
              break;
 800b3bc:	e004      	b.n	800b3c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 fb26 	bl	800ba12 <USBD_CtlError>
              break;
 800b3c6:	bf00      	nop
          }
          break;
 800b3c8:	e004      	b.n	800b3d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fb20 	bl	800ba12 <USBD_CtlError>
          break;
 800b3d2:	bf00      	nop
      }
      break;
 800b3d4:	e004      	b.n	800b3e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fb1a 	bl	800ba12 <USBD_CtlError>
      break;
 800b3de:	bf00      	nop
  }

  return ret;
 800b3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
	...

0800b3ec <USBD_GetDescriptor>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	2b06      	cmp	r3, #6
 800a1d6:	f200 8128 	bhi.w	800a42a <USBD_GetDescriptor+0x276>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <USBD_GetDescriptor+0x2c>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1fd 	.word	0x0800a1fd
 800a1e4:	0800a215 	.word	0x0800a215
 800a1e8:	0800a255 	.word	0x0800a255
 800a1ec:	0800a42b 	.word	0x0800a42b
 800a1f0:	0800a42b 	.word	0x0800a42b
 800a1f4:	0800a3cb 	.word	0x0800a3cb
 800a1f8:	0800a3f7 	.word	0x0800a3f7
=======
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	885b      	ldrh	r3, [r3, #2]
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	b29b      	uxth	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2b06      	cmp	r3, #6
 800b40e:	f200 8128 	bhi.w	800b662 <USBD_GetDescriptor+0x276>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <USBD_GetDescriptor+0x2c>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b44d 	.word	0x0800b44d
 800b420:	0800b48d 	.word	0x0800b48d
 800b424:	0800b663 	.word	0x0800b663
 800b428:	0800b663 	.word	0x0800b663
 800b42c:	0800b603 	.word	0x0800b603
 800b430:	0800b62f 	.word	0x0800b62f
>>>>>>> 6147058 (refactor)
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
<<<<<<< HEAD
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	7c12      	ldrb	r2, [r2, #16]
 800a208:	f107 0108 	add.w	r1, r7, #8
 800a20c:	4610      	mov	r0, r2
 800a20e:	4798      	blx	r3
 800a210:	60f8      	str	r0, [r7, #12]
      break;
 800a212:	e112      	b.n	800a43a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	7c1b      	ldrb	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10d      	bne.n	800a238 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f107 0208 	add.w	r2, r7, #8
 800a228:	4610      	mov	r0, r2
 800a22a:	4798      	blx	r3
 800a22c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3301      	adds	r3, #1
 800a232:	2202      	movs	r2, #2
 800a234:	701a      	strb	r2, [r3, #0]
=======
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	7c12      	ldrb	r2, [r2, #16]
 800b440:	f107 0108 	add.w	r1, r7, #8
 800b444:	4610      	mov	r0, r2
 800b446:	4798      	blx	r3
 800b448:	60f8      	str	r0, [r7, #12]
      break;
 800b44a:	e112      	b.n	800b672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7c1b      	ldrb	r3, [r3, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10d      	bne.n	800b470 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45c:	f107 0208 	add.w	r2, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3301      	adds	r3, #1
 800b46a:	2202      	movs	r2, #2
 800b46c:	701a      	strb	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
<<<<<<< HEAD
 800a236:	e100      	b.n	800a43a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	f107 0208 	add.w	r2, r7, #8
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
 800a248:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3301      	adds	r3, #1
 800a24e:	2202      	movs	r2, #2
 800a250:	701a      	strb	r2, [r3, #0]
      break;
 800a252:	e0f2      	b.n	800a43a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	885b      	ldrh	r3, [r3, #2]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b05      	cmp	r3, #5
 800a25c:	f200 80ac 	bhi.w	800a3b8 <USBD_GetDescriptor+0x204>
 800a260:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <USBD_GetDescriptor+0xb4>)
 800a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a281 	.word	0x0800a281
 800a26c:	0800a2b5 	.word	0x0800a2b5
 800a270:	0800a2e9 	.word	0x0800a2e9
 800a274:	0800a31d 	.word	0x0800a31d
 800a278:	0800a351 	.word	0x0800a351
 800a27c:	0800a385 	.word	0x0800a385
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00b      	beq.n	800a2a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	7c12      	ldrb	r2, [r2, #16]
 800a298:	f107 0108 	add.w	r1, r7, #8
 800a29c:	4610      	mov	r0, r2
 800a29e:	4798      	blx	r3
 800a2a0:	60f8      	str	r0, [r7, #12]
=======
 800b46e:	e100      	b.n	800b672 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	f107 0208 	add.w	r2, r7, #8
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
 800b480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	3301      	adds	r3, #1
 800b486:	2202      	movs	r2, #2
 800b488:	701a      	strb	r2, [r3, #0]
      break;
 800b48a:	e0f2      	b.n	800b672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	885b      	ldrh	r3, [r3, #2]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b05      	cmp	r3, #5
 800b494:	f200 80ac 	bhi.w	800b5f0 <USBD_GetDescriptor+0x204>
 800b498:	a201      	add	r2, pc, #4	; (adr r2, 800b4a0 <USBD_GetDescriptor+0xb4>)
 800b49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49e:	bf00      	nop
 800b4a0:	0800b4b9 	.word	0x0800b4b9
 800b4a4:	0800b4ed 	.word	0x0800b4ed
 800b4a8:	0800b521 	.word	0x0800b521
 800b4ac:	0800b555 	.word	0x0800b555
 800b4b0:	0800b589 	.word	0x0800b589
 800b4b4:	0800b5bd 	.word	0x0800b5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	7c12      	ldrb	r2, [r2, #16]
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a2a2:	e091      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fa97 	bl	800a7da <USBD_CtlError>
            err++;
 800a2ac:	7afb      	ldrb	r3, [r7, #11]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b2:	e089      	b.n	800a3c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	7c12      	ldrb	r2, [r2, #16]
 800a2cc:	f107 0108 	add.w	r1, r7, #8
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	4798      	blx	r3
 800a2d4:	60f8      	str	r0, [r7, #12]
=======
 800b4da:	e091      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fa97 	bl	800ba12 <USBD_CtlError>
            err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ea:	e089      	b.n	800b600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a2d6:	e077      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2d8:	6839      	ldr	r1, [r7, #0]
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa7d 	bl	800a7da <USBD_CtlError>
            err++;
 800a2e0:	7afb      	ldrb	r3, [r7, #11]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2e6:	e06f      	b.n	800a3c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00b      	beq.n	800a30c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	7c12      	ldrb	r2, [r2, #16]
 800a300:	f107 0108 	add.w	r1, r7, #8
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
 800a308:	60f8      	str	r0, [r7, #12]
=======
 800b50e:	e077      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa7d 	bl	800ba12 <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e06f      	b.n	800b600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a30a:	e05d      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fa63 	bl	800a7da <USBD_CtlError>
            err++;
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	3301      	adds	r3, #1
 800a318:	72fb      	strb	r3, [r7, #11]
          break;
 800a31a:	e055      	b.n	800a3c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	7c12      	ldrb	r2, [r2, #16]
 800a334:	f107 0108 	add.w	r1, r7, #8
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	60f8      	str	r0, [r7, #12]
=======
 800b542:	e05d      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa63 	bl	800ba12 <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e055      	b.n	800b600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a33e:	e043      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa49 	bl	800a7da <USBD_CtlError>
            err++;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	3301      	adds	r3, #1
 800a34c:	72fb      	strb	r3, [r7, #11]
          break;
 800a34e:	e03b      	b.n	800a3c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00b      	beq.n	800a374 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	7c12      	ldrb	r2, [r2, #16]
 800a368:	f107 0108 	add.w	r1, r7, #8
 800a36c:	4610      	mov	r0, r2
 800a36e:	4798      	blx	r3
 800a370:	60f8      	str	r0, [r7, #12]
=======
 800b576:	e043      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa49 	bl	800ba12 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e03b      	b.n	800b600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b58e:	695b      	ldr	r3, [r3, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b59a:	695b      	ldr	r3, [r3, #20]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a372:	e029      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fa2f 	bl	800a7da <USBD_CtlError>
            err++;
 800a37c:	7afb      	ldrb	r3, [r7, #11]
 800a37e:	3301      	adds	r3, #1
 800a380:	72fb      	strb	r3, [r7, #11]
          break;
 800a382:	e021      	b.n	800a3c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00b      	beq.n	800a3a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	7c12      	ldrb	r2, [r2, #16]
 800a39c:	f107 0108 	add.w	r1, r7, #8
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	4798      	blx	r3
 800a3a4:	60f8      	str	r0, [r7, #12]
=======
 800b5aa:	e029      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa2f 	bl	800ba12 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e021      	b.n	800b600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00b      	beq.n	800b5e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b5ce:	699b      	ldr	r3, [r3, #24]
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	7c12      	ldrb	r2, [r2, #16]
 800b5d4:	f107 0108 	add.w	r1, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
<<<<<<< HEAD
 800a3a6:	e00f      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa15 	bl	800a7da <USBD_CtlError>
            err++;
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3b6:	e007      	b.n	800a3c8 <USBD_GetDescriptor+0x214>
=======
 800b5de:	e00f      	b.n	800b600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa15 	bl	800ba12 <USBD_CtlError>
            err++;
 800b5e8:	7afb      	ldrb	r3, [r7, #11]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ee:	e007      	b.n	800b600 <USBD_GetDescriptor+0x214>
>>>>>>> 6147058 (refactor)
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa0d 	bl	800a7da <USBD_CtlError>
          err++;
 800a3c0:	7afb      	ldrb	r3, [r7, #11]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a3c6:	e038      	b.n	800a43a <USBD_GetDescriptor+0x286>
 800a3c8:	e037      	b.n	800a43a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	7c1b      	ldrb	r3, [r3, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d109      	bne.n	800a3e6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3da:	f107 0208 	add.w	r2, r7, #8
 800a3de:	4610      	mov	r0, r2
 800a3e0:	4798      	blx	r3
 800a3e2:	60f8      	str	r0, [r7, #12]
=======
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa0d 	bl	800ba12 <USBD_CtlError>
          err++;
 800b5f8:	7afb      	ldrb	r3, [r7, #11]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b5fe:	e038      	b.n	800b672 <USBD_GetDescriptor+0x286>
 800b600:	e037      	b.n	800b672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7c1b      	ldrb	r3, [r3, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f107 0208 	add.w	r2, r7, #8
 800b616:	4610      	mov	r0, r2
 800b618:	4798      	blx	r3
 800b61a:	60f8      	str	r0, [r7, #12]
>>>>>>> 6147058 (refactor)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800a3e4:	e029      	b.n	800a43a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9f6 	bl	800a7da <USBD_CtlError>
        err++;
 800a3ee:	7afb      	ldrb	r3, [r7, #11]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3f4:	e021      	b.n	800a43a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	7c1b      	ldrb	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10d      	bne.n	800a41a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f107 0208 	add.w	r2, r7, #8
 800a40a:	4610      	mov	r0, r2
 800a40c:	4798      	blx	r3
 800a40e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3301      	adds	r3, #1
 800a414:	2207      	movs	r2, #7
 800a416:	701a      	strb	r2, [r3, #0]
=======
 800b61c:	e029      	b.n	800b672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f9f6 	bl	800ba12 <USBD_CtlError>
        err++;
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	3301      	adds	r3, #1
 800b62a:	72fb      	strb	r3, [r7, #11]
      break;
 800b62c:	e021      	b.n	800b672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	7c1b      	ldrb	r3, [r3, #16]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10d      	bne.n	800b652 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63e:	f107 0208 	add.w	r2, r7, #8
 800b642:	4610      	mov	r0, r2
 800b644:	4798      	blx	r3
 800b646:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	3301      	adds	r3, #1
 800b64c:	2207      	movs	r2, #7
 800b64e:	701a      	strb	r2, [r3, #0]
>>>>>>> 6147058 (refactor)
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
<<<<<<< HEAD
 800a418:	e00f      	b.n	800a43a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a41a:	6839      	ldr	r1, [r7, #0]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9dc 	bl	800a7da <USBD_CtlError>
        err++;
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	3301      	adds	r3, #1
 800a426:	72fb      	strb	r3, [r7, #11]
      break;
 800a428:	e007      	b.n	800a43a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f9d4 	bl	800a7da <USBD_CtlError>
      err++;
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	3301      	adds	r3, #1
 800a436:	72fb      	strb	r3, [r7, #11]
      break;
 800a438:	bf00      	nop
  }

  if (err != 0U)
 800a43a:	7afb      	ldrb	r3, [r7, #11]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d11c      	bne.n	800a47a <USBD_GetDescriptor+0x2c6>
=======
 800b650:	e00f      	b.n	800b672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f9dc 	bl	800ba12 <USBD_CtlError>
        err++;
 800b65a:	7afb      	ldrb	r3, [r7, #11]
 800b65c:	3301      	adds	r3, #1
 800b65e:	72fb      	strb	r3, [r7, #11]
      break;
 800b660:	e007      	b.n	800b672 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f9d4 	bl	800ba12 <USBD_CtlError>
      err++;
 800b66a:	7afb      	ldrb	r3, [r7, #11]
 800b66c:	3301      	adds	r3, #1
 800b66e:	72fb      	strb	r3, [r7, #11]
      break;
 800b670:	bf00      	nop
  }

  if (err != 0U)
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d11c      	bne.n	800b6b2 <USBD_GetDescriptor+0x2c6>
>>>>>>> 6147058 (refactor)
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
<<<<<<< HEAD
 800a440:	893b      	ldrh	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d011      	beq.n	800a46a <USBD_GetDescriptor+0x2b6>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	88db      	ldrh	r3, [r3, #6]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	88da      	ldrh	r2, [r3, #6]
 800a452:	893b      	ldrh	r3, [r7, #8]
 800a454:	4293      	cmp	r3, r2
 800a456:	bf28      	it	cs
 800a458:	4613      	movcs	r3, r2
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a45e:	893b      	ldrh	r3, [r7, #8]
 800a460:	461a      	mov	r2, r3
 800a462:	68f9      	ldr	r1, [r7, #12]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa22 	bl	800a8ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	88db      	ldrh	r3, [r3, #6]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d104      	bne.n	800a47c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa79 	bl	800a96a <USBD_CtlSendStatus>
 800a478:	e000      	b.n	800a47c <USBD_GetDescriptor+0x2c8>
    return;
 800a47a:	bf00      	nop
    }
  }
}
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop

0800a484 <USBD_SetAddress>:
=======
 800b678:	893b      	ldrh	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d011      	beq.n	800b6a2 <USBD_GetDescriptor+0x2b6>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	88db      	ldrh	r3, [r3, #6]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00d      	beq.n	800b6a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	88da      	ldrh	r2, [r3, #6]
 800b68a:	893b      	ldrh	r3, [r7, #8]
 800b68c:	4293      	cmp	r3, r2
 800b68e:	bf28      	it	cs
 800b690:	4613      	movcs	r3, r2
 800b692:	b29b      	uxth	r3, r3
 800b694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b696:	893b      	ldrh	r3, [r7, #8]
 800b698:	461a      	mov	r2, r3
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fa22 	bl	800bae6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	88db      	ldrh	r3, [r3, #6]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d104      	bne.n	800b6b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa79 	bl	800bba2 <USBD_CtlSendStatus>
 800b6b0:	e000      	b.n	800b6b4 <USBD_GetDescriptor+0x2c8>
    return;
 800b6b2:	bf00      	nop
    }
  }
}
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop

0800b6bc <USBD_SetAddress>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	889b      	ldrh	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d130      	bne.n	800a4f8 <USBD_SetAddress+0x74>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	88db      	ldrh	r3, [r3, #6]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d12c      	bne.n	800a4f8 <USBD_SetAddress+0x74>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	885b      	ldrh	r3, [r3, #2]
 800a4a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a4a4:	d828      	bhi.n	800a4f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d104      	bne.n	800a4c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f98b 	bl	800a7da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c4:	e01d      	b.n	800a502 <USBD_SetAddress+0x7e>
=======
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	889b      	ldrh	r3, [r3, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d130      	bne.n	800b730 <USBD_SetAddress+0x74>
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	88db      	ldrh	r3, [r3, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d12c      	bne.n	800b730 <USBD_SetAddress+0x74>
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	885b      	ldrh	r3, [r3, #2]
 800b6da:	2b7f      	cmp	r3, #127	; 0x7f
 800b6dc:	d828      	bhi.n	800b730 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	885b      	ldrh	r3, [r3, #2]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d104      	bne.n	800b6fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b6f4:	6839      	ldr	r1, [r7, #0]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f98b 	bl	800ba12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fc:	e01d      	b.n	800b73a <USBD_SetAddress+0x7e>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      pdev->dev_address = dev_addr;
<<<<<<< HEAD
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4ce:	7bfb      	ldrb	r3, [r7, #15]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fe4c 	bl	800b170 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fa46 	bl	800a96a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d004      	beq.n	800a4ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2202      	movs	r2, #2
 800a4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ec:	e009      	b.n	800a502 <USBD_SetAddress+0x7e>
=======
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7bfa      	ldrb	r2, [r7, #15]
 800b702:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b706:	7bfb      	ldrb	r3, [r7, #15]
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fe4c 	bl	800c3a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fa46 	bl	800bba2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b724:	e009      	b.n	800b73a <USBD_SetAddress+0x7e>
>>>>>>> 6147058 (refactor)
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
<<<<<<< HEAD
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f6:	e004      	b.n	800a502 <USBD_SetAddress+0x7e>
=======
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72e:	e004      	b.n	800b73a <USBD_SetAddress+0x7e>
>>>>>>> 6147058 (refactor)
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
<<<<<<< HEAD
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f96d 	bl	800a7da <USBD_CtlError>
  }
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <USBD_SetConfig>:
=======
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f96d 	bl	800ba12 <USBD_CtlError>
  }
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
	...

0800b744 <USBD_SetConfig>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	b2da      	uxtb	r2, r3
 800a51c:	4b41      	ldr	r3, [pc, #260]	; (800a624 <USBD_SetConfig+0x118>)
 800a51e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a520:	4b40      	ldr	r3, [pc, #256]	; (800a624 <USBD_SetConfig+0x118>)
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d904      	bls.n	800a532 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f955 	bl	800a7da <USBD_CtlError>
 800a530:	e075      	b.n	800a61e <USBD_SetConfig+0x112>
=======
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	885b      	ldrh	r3, [r3, #2]
 800b752:	b2da      	uxtb	r2, r3
 800b754:	4b41      	ldr	r3, [pc, #260]	; (800b85c <USBD_SetConfig+0x118>)
 800b756:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b758:	4b40      	ldr	r3, [pc, #256]	; (800b85c <USBD_SetConfig+0x118>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d904      	bls.n	800b76a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f955 	bl	800ba12 <USBD_CtlError>
 800b768:	e075      	b.n	800b856 <USBD_SetConfig+0x112>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    switch (pdev->dev_state)
<<<<<<< HEAD
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d002      	beq.n	800a542 <USBD_SetConfig+0x36>
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d023      	beq.n	800a588 <USBD_SetConfig+0x7c>
 800a540:	e062      	b.n	800a608 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a542:	4b38      	ldr	r3, [pc, #224]	; (800a624 <USBD_SetConfig+0x118>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d01a      	beq.n	800a580 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a54a:	4b36      	ldr	r3, [pc, #216]	; (800a624 <USBD_SetConfig+0x118>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2203      	movs	r2, #3
 800a558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a55c:	4b31      	ldr	r3, [pc, #196]	; (800a624 <USBD_SetConfig+0x118>)
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7ff f9e7 	bl	8009936 <USBD_SetClassConfig>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d104      	bne.n	800a578 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f932 	bl	800a7da <USBD_CtlError>
            return;
 800a576:	e052      	b.n	800a61e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 f9f6 	bl	800a96a <USBD_CtlSendStatus>
=======
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b770:	2b02      	cmp	r3, #2
 800b772:	d002      	beq.n	800b77a <USBD_SetConfig+0x36>
 800b774:	2b03      	cmp	r3, #3
 800b776:	d023      	beq.n	800b7c0 <USBD_SetConfig+0x7c>
 800b778:	e062      	b.n	800b840 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b77a:	4b38      	ldr	r3, [pc, #224]	; (800b85c <USBD_SetConfig+0x118>)
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d01a      	beq.n	800b7b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b782:	4b36      	ldr	r3, [pc, #216]	; (800b85c <USBD_SetConfig+0x118>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b794:	4b31      	ldr	r3, [pc, #196]	; (800b85c <USBD_SetConfig+0x118>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff f9e7 	bl	800ab6e <USBD_SetClassConfig>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d104      	bne.n	800b7b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f932 	bl	800ba12 <USBD_CtlError>
            return;
 800b7ae:	e052      	b.n	800b856 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 f9f6 	bl	800bba2 <USBD_CtlSendStatus>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 800a57e:	e04e      	b.n	800a61e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 f9f2 	bl	800a96a <USBD_CtlSendStatus>
        break;
 800a586:	e04a      	b.n	800a61e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a588:	4b26      	ldr	r3, [pc, #152]	; (800a624 <USBD_SetConfig+0x118>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d112      	bne.n	800a5b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a598:	4b22      	ldr	r3, [pc, #136]	; (800a624 <USBD_SetConfig+0x118>)
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a5a2:	4b20      	ldr	r3, [pc, #128]	; (800a624 <USBD_SetConfig+0x118>)
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff f9e3 	bl	8009974 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f9db 	bl	800a96a <USBD_CtlSendStatus>
=======
 800b7b6:	e04e      	b.n	800b856 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f9f2 	bl	800bba2 <USBD_CtlSendStatus>
        break;
 800b7be:	e04a      	b.n	800b856 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b7c0:	4b26      	ldr	r3, [pc, #152]	; (800b85c <USBD_SetConfig+0x118>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d112      	bne.n	800b7ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b7d0:	4b22      	ldr	r3, [pc, #136]	; (800b85c <USBD_SetConfig+0x118>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b7da:	4b20      	ldr	r3, [pc, #128]	; (800b85c <USBD_SetConfig+0x118>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff f9e3 	bl	800abac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f9db 	bl	800bba2 <USBD_CtlSendStatus>
>>>>>>> 6147058 (refactor)
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
<<<<<<< HEAD
 800a5b4:	e033      	b.n	800a61e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <USBD_SetConfig+0x118>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d01d      	beq.n	800a600 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff f9d1 	bl	8009974 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a5d2:	4b14      	ldr	r3, [pc, #80]	; (800a624 <USBD_SetConfig+0x118>)
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a5dc:	4b11      	ldr	r3, [pc, #68]	; (800a624 <USBD_SetConfig+0x118>)
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff f9a7 	bl	8009936 <USBD_SetClassConfig>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d104      	bne.n	800a5f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f8f2 	bl	800a7da <USBD_CtlError>
            return;
 800a5f6:	e012      	b.n	800a61e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f9b6 	bl	800a96a <USBD_CtlSendStatus>
        break;
 800a5fe:	e00e      	b.n	800a61e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f9b2 	bl	800a96a <USBD_CtlSendStatus>
        break;
 800a606:	e00a      	b.n	800a61e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f8e5 	bl	800a7da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <USBD_SetConfig+0x118>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff f9ac 	bl	8009974 <USBD_ClrClassConfig>
        break;
 800a61c:	bf00      	nop
    }
  }
}
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20000288 	.word	0x20000288

0800a628 <USBD_GetConfig>:
=======
 800b7ec:	e033      	b.n	800b856 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b7ee:	4b1b      	ldr	r3, [pc, #108]	; (800b85c <USBD_SetConfig+0x118>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d01d      	beq.n	800b838 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	b2db      	uxtb	r3, r3
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f7ff f9d1 	bl	800abac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b80a:	4b14      	ldr	r3, [pc, #80]	; (800b85c <USBD_SetConfig+0x118>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b814:	4b11      	ldr	r3, [pc, #68]	; (800b85c <USBD_SetConfig+0x118>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	4619      	mov	r1, r3
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff f9a7 	bl	800ab6e <USBD_SetClassConfig>
 800b820:	4603      	mov	r3, r0
 800b822:	2b02      	cmp	r3, #2
 800b824:	d104      	bne.n	800b830 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f8f2 	bl	800ba12 <USBD_CtlError>
            return;
 800b82e:	e012      	b.n	800b856 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f9b6 	bl	800bba2 <USBD_CtlSendStatus>
        break;
 800b836:	e00e      	b.n	800b856 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f9b2 	bl	800bba2 <USBD_CtlSendStatus>
        break;
 800b83e:	e00a      	b.n	800b856 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 f8e5 	bl	800ba12 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <USBD_SetConfig+0x118>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff f9ac 	bl	800abac <USBD_ClrClassConfig>
        break;
 800b854:	bf00      	nop
    }
  }
}
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000280 	.word	0x20000280

0800b860 <USBD_GetConfig>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	88db      	ldrh	r3, [r3, #6]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d004      	beq.n	800a644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a63a:	6839      	ldr	r1, [r7, #0]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f8cc 	bl	800a7da <USBD_CtlError>
=======
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	88db      	ldrh	r3, [r3, #6]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d004      	beq.n	800b87c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f8cc 	bl	800ba12 <USBD_CtlError>
>>>>>>> 6147058 (refactor)
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
<<<<<<< HEAD
 800a642:	e022      	b.n	800a68a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	dc02      	bgt.n	800a654 <USBD_GetConfig+0x2c>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dc03      	bgt.n	800a65a <USBD_GetConfig+0x32>
 800a652:	e015      	b.n	800a680 <USBD_GetConfig+0x58>
 800a654:	2b03      	cmp	r3, #3
 800a656:	d00b      	beq.n	800a670 <USBD_GetConfig+0x48>
 800a658:	e012      	b.n	800a680 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3308      	adds	r3, #8
 800a664:	2201      	movs	r2, #1
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f920 	bl	800a8ae <USBD_CtlSendData>
        break;
 800a66e:	e00c      	b.n	800a68a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3304      	adds	r3, #4
 800a674:	2201      	movs	r2, #1
 800a676:	4619      	mov	r1, r3
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f918 	bl	800a8ae <USBD_CtlSendData>
        break;
 800a67e:	e004      	b.n	800a68a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a680:	6839      	ldr	r1, [r7, #0]
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f8a9 	bl	800a7da <USBD_CtlError>
        break;
 800a688:	bf00      	nop
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBD_GetStatus>:
=======
 800b87a:	e022      	b.n	800b8c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b882:	2b02      	cmp	r3, #2
 800b884:	dc02      	bgt.n	800b88c <USBD_GetConfig+0x2c>
 800b886:	2b00      	cmp	r3, #0
 800b888:	dc03      	bgt.n	800b892 <USBD_GetConfig+0x32>
 800b88a:	e015      	b.n	800b8b8 <USBD_GetConfig+0x58>
 800b88c:	2b03      	cmp	r3, #3
 800b88e:	d00b      	beq.n	800b8a8 <USBD_GetConfig+0x48>
 800b890:	e012      	b.n	800b8b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3308      	adds	r3, #8
 800b89c:	2201      	movs	r2, #1
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 f920 	bl	800bae6 <USBD_CtlSendData>
        break;
 800b8a6:	e00c      	b.n	800b8c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f918 	bl	800bae6 <USBD_CtlSendData>
        break;
 800b8b6:	e004      	b.n	800b8c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f8a9 	bl	800ba12 <USBD_CtlError>
        break;
 800b8c0:	bf00      	nop
}
 800b8c2:	bf00      	nop
 800b8c4:	3708      	adds	r7, #8
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <USBD_GetStatus>:
>>>>>>> 6147058 (refactor)
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a692:	b580      	push	{r7, lr}
 800a694:	b082      	sub	sp, #8
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
 800a69a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d81e      	bhi.n	800a6e6 <USBD_GetStatus+0x54>
=======
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b082      	sub	sp, #8
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d81e      	bhi.n	800b91e <USBD_GetStatus+0x54>
>>>>>>> 6147058 (refactor)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
<<<<<<< HEAD
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	88db      	ldrh	r3, [r3, #6]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d004      	beq.n	800a6ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f891 	bl	800a7da <USBD_CtlError>
        break;
 800a6b8:	e01a      	b.n	800a6f0 <USBD_GetStatus+0x5e>
=======
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	88db      	ldrh	r3, [r3, #6]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d004      	beq.n	800b8f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f000 f891 	bl	800ba12 <USBD_CtlError>
        break;
 800b8f0:	e01a      	b.n	800b928 <USBD_GetStatus+0x5e>
>>>>>>> 6147058 (refactor)
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
<<<<<<< HEAD
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	60da      	str	r2, [r3, #12]
=======
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	60da      	str	r2, [r3, #12]
>>>>>>> 6147058 (refactor)
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
<<<<<<< HEAD
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d005      	beq.n	800a6d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f043 0202 	orr.w	r2, r3, #2
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	2202      	movs	r2, #2
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f8e5 	bl	800a8ae <USBD_CtlSendData>
      break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f876 	bl	800a7da <USBD_CtlError>
      break;
 800a6ee:	bf00      	nop
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_SetFeature>:
=======
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f043 0202 	orr.w	r2, r3, #2
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	330c      	adds	r3, #12
 800b912:	2202      	movs	r2, #2
 800b914:	4619      	mov	r1, r3
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 f8e5 	bl	800bae6 <USBD_CtlSendData>
      break;
 800b91c:	e004      	b.n	800b928 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f876 	bl	800ba12 <USBD_CtlError>
      break;
 800b926:	bf00      	nop
  }
}
 800b928:	bf00      	nop
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_SetFeature>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	885b      	ldrh	r3, [r3, #2]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d106      	bne.n	800a718 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f929 	bl	800a96a <USBD_CtlSendStatus>
  }
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBD_ClrFeature>:
=======
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d106      	bne.n	800b950 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f929 	bl	800bba2 <USBD_CtlSendStatus>
  }
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_ClrFeature>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a730:	3b01      	subs	r3, #1
 800a732:	2b02      	cmp	r3, #2
 800a734:	d80b      	bhi.n	800a74e <USBD_ClrFeature+0x2e>
=======
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b968:	3b01      	subs	r3, #1
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d80b      	bhi.n	800b986 <USBD_ClrFeature+0x2e>
>>>>>>> 6147058 (refactor)
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
<<<<<<< HEAD
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	885b      	ldrh	r3, [r3, #2]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d10c      	bne.n	800a758 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f90f 	bl	800a96a <USBD_CtlSendStatus>
      }
      break;
 800a74c:	e004      	b.n	800a758 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f842 	bl	800a7da <USBD_CtlError>
      break;
 800a756:	e000      	b.n	800a75a <USBD_ClrFeature+0x3a>
      break;
 800a758:	bf00      	nop
  }
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <USBD_ParseSetupRequest>:
=======
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	885b      	ldrh	r3, [r3, #2]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d10c      	bne.n	800b990 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f90f 	bl	800bba2 <USBD_CtlSendStatus>
      }
      break;
 800b984:	e004      	b.n	800b990 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f842 	bl	800ba12 <USBD_CtlError>
      break;
 800b98e:	e000      	b.n	800b992 <USBD_ClrFeature+0x3a>
      break;
 800b990:	bf00      	nop
  }
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_ParseSetupRequest>:
>>>>>>> 6147058 (refactor)
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
<<<<<<< HEAD
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781a      	ldrb	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	785a      	ldrb	r2, [r3, #1]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	3302      	adds	r3, #2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b29a      	uxth	r2, r3
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	3303      	adds	r3, #3
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	b29b      	uxth	r3, r3
 800a790:	4413      	add	r3, r2
 800a792:	b29a      	uxth	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3304      	adds	r3, #4
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3305      	adds	r3, #5
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	4413      	add	r3, r2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3306      	adds	r3, #6
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3307      	adds	r3, #7
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	021b      	lsls	r3, r3, #8
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	80da      	strh	r2, [r3, #6]

}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr

0800a7da <USBD_CtlError>:
=======
 800b99a:	b480      	push	{r7}
 800b99c:	b083      	sub	sp, #12
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	781a      	ldrb	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	785a      	ldrb	r2, [r3, #1]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	3302      	adds	r3, #2
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	3303      	adds	r3, #3
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	021b      	lsls	r3, r3, #8
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	4413      	add	r3, r2
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	3305      	adds	r3, #5
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	3306      	adds	r3, #6
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	3307      	adds	r3, #7
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4413      	add	r3, r2
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	80da      	strh	r2, [r3, #6]

}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bc80      	pop	{r7}
 800ba10:	4770      	bx	lr

0800ba12 <USBD_CtlError>:
>>>>>>> 6147058 (refactor)
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
<<<<<<< HEAD
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a7e4:	2180      	movs	r1, #128	; 0x80
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fc58 	bl	800b09c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc54 	bl	800b09c <USBD_LL_StallEP>
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_GetString>:
=======
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b082      	sub	sp, #8
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba1c:	2180      	movs	r1, #128	; 0x80
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fc58 	bl	800c2d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba24:	2100      	movs	r1, #0
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fc54 	bl	800c2d4 <USBD_LL_StallEP>
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_GetString>:
>>>>>>> 6147058 (refactor)
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
<<<<<<< HEAD
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b086      	sub	sp, #24
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d032      	beq.n	800a878 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 f834 	bl	800a880 <USBD_GetLen>
 800a818:	4603      	mov	r3, r0
 800a81a:	3301      	adds	r3, #1
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	75fa      	strb	r2, [r7, #23]
 800a82c:	461a      	mov	r2, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	4413      	add	r3, r2
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a838:	7dfb      	ldrb	r3, [r7, #23]
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	75fa      	strb	r2, [r7, #23]
 800a83e:	461a      	mov	r2, r3
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	2203      	movs	r2, #3
 800a846:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a848:	e012      	b.n	800a870 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	1c5a      	adds	r2, r3, #1
 800a84e:	60fa      	str	r2, [r7, #12]
 800a850:	7dfa      	ldrb	r2, [r7, #23]
 800a852:	1c51      	adds	r1, r2, #1
 800a854:	75f9      	strb	r1, [r7, #23]
 800a856:	4611      	mov	r1, r2
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	440a      	add	r2, r1
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	75fa      	strb	r2, [r7, #23]
 800a866:	461a      	mov	r2, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	4413      	add	r3, r2
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e8      	bne.n	800a84a <USBD_GetString+0x4e>
    }
  }
}
 800a878:	bf00      	nop
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_GetLen>:
=======
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba40:	2300      	movs	r3, #0
 800ba42:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d032      	beq.n	800bab0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f000 f834 	bl	800bab8 <USBD_GetLen>
 800ba50:	4603      	mov	r3, r0
 800ba52:	3301      	adds	r3, #1
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba5e:	7dfb      	ldrb	r3, [r7, #23]
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	75fa      	strb	r2, [r7, #23]
 800ba64:	461a      	mov	r2, r3
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	4413      	add	r3, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	7812      	ldrb	r2, [r2, #0]
 800ba6e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba70:	7dfb      	ldrb	r3, [r7, #23]
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	75fa      	strb	r2, [r7, #23]
 800ba76:	461a      	mov	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	2203      	movs	r2, #3
 800ba7e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba80:	e012      	b.n	800baa8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	60fa      	str	r2, [r7, #12]
 800ba88:	7dfa      	ldrb	r2, [r7, #23]
 800ba8a:	1c51      	adds	r1, r2, #1
 800ba8c:	75f9      	strb	r1, [r7, #23]
 800ba8e:	4611      	mov	r1, r2
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	440a      	add	r2, r1
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba98:	7dfb      	ldrb	r3, [r7, #23]
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	75fa      	strb	r2, [r7, #23]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4413      	add	r3, r2
 800baa4:	2200      	movs	r2, #0
 800baa6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e8      	bne.n	800ba82 <USBD_GetString+0x4e>
    }
  }
}
 800bab0:	bf00      	nop
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBD_GetLen>:
>>>>>>> 6147058 (refactor)
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
<<<<<<< HEAD
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a88c:	e005      	b.n	800a89a <USBD_GetLen+0x1a>
  {
    len++;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	3301      	adds	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3301      	adds	r3, #1
 800a898:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f5      	bne.n	800a88e <USBD_GetLen+0xe>
  }

  return len;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bc80      	pop	{r7}
 800a8ac:	4770      	bx	lr

0800a8ae <USBD_CtlSendData>:
=======
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bac4:	e005      	b.n	800bad2 <USBD_GetLen+0x1a>
  {
    len++;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	3301      	adds	r3, #1
 800baca:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3301      	adds	r3, #1
 800bad0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1f5      	bne.n	800bac6 <USBD_GetLen+0xe>
  }

  return len;
 800bada:	7bfb      	ldrb	r3, [r7, #15]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr

0800bae6 <USBD_CtlSendData>:
>>>>>>> 6147058 (refactor)
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8c4:	88fa      	ldrh	r2, [r7, #6]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a8ca:	88fa      	ldrh	r2, [r7, #6]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 fc69 	bl	800b1ae <USBD_LL_Transmit>

  return USBD_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <USBD_CtlContinueSendData>:
=======
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	60f8      	str	r0, [r7, #12]
 800baee:	60b9      	str	r1, [r7, #8]
 800baf0:	4613      	mov	r3, r2
 800baf2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bafc:	88fa      	ldrh	r2, [r7, #6]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb02:	88fa      	ldrh	r2, [r7, #6]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb08:	88fb      	ldrh	r3, [r7, #6]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 fc69 	bl	800c3e6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_CtlContinueSendData>:
>>>>>>> 6147058 (refactor)
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	60f8      	str	r0, [r7, #12]
 800a8ee:	60b9      	str	r1, [r7, #8]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8f4:	88fb      	ldrh	r3, [r7, #6]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fc57 	bl	800b1ae <USBD_LL_Transmit>

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_CtlPrepareRx>:
=======
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	60f8      	str	r0, [r7, #12]
 800bb26:	60b9      	str	r1, [r7, #8]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb2c:	88fb      	ldrh	r3, [r7, #6]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	2100      	movs	r1, #0
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fc57 	bl	800c3e6 <USBD_LL_Transmit>

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <USBD_CtlPrepareRx>:
>>>>>>> 6147058 (refactor)
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	60b9      	str	r1, [r7, #8]
 800a914:	4613      	mov	r3, r2
 800a916:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2203      	movs	r2, #3
 800a91c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a920:	88fa      	ldrh	r2, [r7, #6]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a928:	88fa      	ldrh	r2, [r7, #6]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a930:	88fb      	ldrh	r3, [r7, #6]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	2100      	movs	r1, #0
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fc5c 	bl	800b1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_CtlContinueRx>:
=======
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	60f8      	str	r0, [r7, #12]
 800bb4a:	60b9      	str	r1, [r7, #8]
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2203      	movs	r2, #3
 800bb54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb58:	88fa      	ldrh	r2, [r7, #6]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bb60:	88fa      	ldrh	r2, [r7, #6]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb68:	88fb      	ldrh	r3, [r7, #6]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 fc5c 	bl	800c42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <USBD_CtlContinueRx>:
>>>>>>> 6147058 (refactor)
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
<<<<<<< HEAD
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	4613      	mov	r3, r2
 800a952:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	2100      	movs	r1, #0
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 fc4a 	bl	800b1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_CtlSendStatus>:
=======
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb8c:	88fb      	ldrh	r3, [r7, #6]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	2100      	movs	r1, #0
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 fc4a 	bl	800c42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBD_CtlSendStatus>:
>>>>>>> 6147058 (refactor)
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2204      	movs	r2, #4
 800a976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a97a:	2300      	movs	r3, #0
 800a97c:	2200      	movs	r2, #0
 800a97e:	2100      	movs	r1, #0
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fc14 	bl	800b1ae <USBD_LL_Transmit>

  return USBD_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_CtlReceiveStatus>:
=======
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2204      	movs	r2, #4
 800bbae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fc14 	bl	800c3e6 <USBD_LL_Transmit>

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CtlReceiveStatus>:
>>>>>>> 6147058 (refactor)
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2205      	movs	r2, #5
 800a99c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fc24 	bl	800b1f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <MX_USB_DEVICE_Init>:
=======
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fc24 	bl	800c42c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <MX_USB_DEVICE_Init>:
>>>>>>> 6147058 (refactor)
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
<<<<<<< HEAD
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
=======
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
<<<<<<< HEAD
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4912      	ldr	r1, [pc, #72]	; (800aa08 <MX_USB_DEVICE_Init+0x50>)
 800a9c0:	4812      	ldr	r0, [pc, #72]	; (800aa0c <MX_USB_DEVICE_Init+0x54>)
 800a9c2:	f7fe ff5e 	bl	8009882 <USBD_Init>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9cc:	f7f7 fe38 	bl	8002640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9d0:	490f      	ldr	r1, [pc, #60]	; (800aa10 <MX_USB_DEVICE_Init+0x58>)
 800a9d2:	480e      	ldr	r0, [pc, #56]	; (800aa0c <MX_USB_DEVICE_Init+0x54>)
 800a9d4:	f7fe ff80 	bl	80098d8 <USBD_RegisterClass>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9de:	f7f7 fe2f 	bl	8002640 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9e2:	490c      	ldr	r1, [pc, #48]	; (800aa14 <MX_USB_DEVICE_Init+0x5c>)
 800a9e4:	4809      	ldr	r0, [pc, #36]	; (800aa0c <MX_USB_DEVICE_Init+0x54>)
 800a9e6:	f7fe feb1 	bl	800974c <USBD_CDC_RegisterInterface>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9f0:	f7f7 fe26 	bl	8002640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9f4:	4805      	ldr	r0, [pc, #20]	; (800aa0c <MX_USB_DEVICE_Init+0x54>)
 800a9f6:	f7fe ff88 	bl	800990a <USBD_Start>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa00:	f7f7 fe1e 	bl	8002640 <Error_Handler>
=======
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	4912      	ldr	r1, [pc, #72]	; (800bc40 <MX_USB_DEVICE_Init+0x50>)
 800bbf8:	4812      	ldr	r0, [pc, #72]	; (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bbfa:	f7fe ff5e 	bl	800aaba <USBD_Init>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc04:	f7f7 fe68 	bl	80038d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc08:	490f      	ldr	r1, [pc, #60]	; (800bc48 <MX_USB_DEVICE_Init+0x58>)
 800bc0a:	480e      	ldr	r0, [pc, #56]	; (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc0c:	f7fe ff80 	bl	800ab10 <USBD_RegisterClass>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc16:	f7f7 fe5f 	bl	80038d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc1a:	490c      	ldr	r1, [pc, #48]	; (800bc4c <MX_USB_DEVICE_Init+0x5c>)
 800bc1c:	4809      	ldr	r0, [pc, #36]	; (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc1e:	f7fe feb1 	bl	800a984 <USBD_CDC_RegisterInterface>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bc28:	f7f7 fe56 	bl	80038d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc2c:	4805      	ldr	r0, [pc, #20]	; (800bc44 <MX_USB_DEVICE_Init+0x54>)
 800bc2e:	f7fe ff88 	bl	800ab42 <USBD_Start>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc38:	f7f7 fe4e 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800aa04:	bf00      	nop
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	2000013c 	.word	0x2000013c
 800aa0c:	200009f8 	.word	0x200009f8
 800aa10:	20000028 	.word	0x20000028
 800aa14:	2000012c 	.word	0x2000012c

0800aa18 <CDC_Init_FS>:
=======
 800bc3c:	bf00      	nop
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000140 	.word	0x20000140
 800bc44:	20000a00 	.word	0x20000a00
 800bc48:	2000002c 	.word	0x2000002c
 800bc4c:	20000130 	.word	0x20000130

0800bc50 <CDC_Init_FS>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
<<<<<<< HEAD
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4905      	ldr	r1, [pc, #20]	; (800aa34 <CDC_Init_FS+0x1c>)
 800aa20:	4805      	ldr	r0, [pc, #20]	; (800aa38 <CDC_Init_FS+0x20>)
 800aa22:	f7fe fea9 	bl	8009778 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa26:	4905      	ldr	r1, [pc, #20]	; (800aa3c <CDC_Init_FS+0x24>)
 800aa28:	4803      	ldr	r0, [pc, #12]	; (800aa38 <CDC_Init_FS+0x20>)
 800aa2a:	f7fe febe 	bl	80097aa <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800aa2e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20000ebc 	.word	0x20000ebc
 800aa38:	200009f8 	.word	0x200009f8
 800aa3c:	20000cbc 	.word	0x20000cbc

0800aa40 <CDC_DeInit_FS>:
=======
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	4905      	ldr	r1, [pc, #20]	; (800bc6c <CDC_Init_FS+0x1c>)
 800bc58:	4805      	ldr	r0, [pc, #20]	; (800bc70 <CDC_Init_FS+0x20>)
 800bc5a:	f7fe fea9 	bl	800a9b0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc5e:	4905      	ldr	r1, [pc, #20]	; (800bc74 <CDC_Init_FS+0x24>)
 800bc60:	4803      	ldr	r0, [pc, #12]	; (800bc70 <CDC_Init_FS+0x20>)
 800bc62:	f7fe febe 	bl	800a9e2 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800bc66:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20000ec4 	.word	0x20000ec4
 800bc70:	20000a00 	.word	0x20000a00
 800bc74:	20000cc4 	.word	0x20000cc4

0800bc78 <CDC_DeInit_FS>:
>>>>>>> 6147058 (refactor)
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
<<<<<<< HEAD
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800aa44:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr
	...

0800aa50 <CDC_Control_FS>:
=======
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800bc7c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bc80      	pop	{r7}
 800bc84:	4770      	bx	lr
	...

0800bc88 <CDC_Control_FS>:
>>>>>>> 6147058 (refactor)
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
<<<<<<< HEAD
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800aa60:	79fb      	ldrb	r3, [r7, #7]
 800aa62:	2b23      	cmp	r3, #35	; 0x23
 800aa64:	d84a      	bhi.n	800aafc <CDC_Control_FS+0xac>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <CDC_Control_FS+0x1c>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aafd 	.word	0x0800aafd
 800aa70:	0800aafd 	.word	0x0800aafd
 800aa74:	0800aafd 	.word	0x0800aafd
 800aa78:	0800aafd 	.word	0x0800aafd
 800aa7c:	0800aafd 	.word	0x0800aafd
 800aa80:	0800aafd 	.word	0x0800aafd
 800aa84:	0800aafd 	.word	0x0800aafd
 800aa88:	0800aafd 	.word	0x0800aafd
 800aa8c:	0800aafd 	.word	0x0800aafd
 800aa90:	0800aafd 	.word	0x0800aafd
 800aa94:	0800aafd 	.word	0x0800aafd
 800aa98:	0800aafd 	.word	0x0800aafd
 800aa9c:	0800aafd 	.word	0x0800aafd
 800aaa0:	0800aafd 	.word	0x0800aafd
 800aaa4:	0800aafd 	.word	0x0800aafd
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aafd 	.word	0x0800aafd
 800aab0:	0800aafd 	.word	0x0800aafd
 800aab4:	0800aafd 	.word	0x0800aafd
 800aab8:	0800aafd 	.word	0x0800aafd
 800aabc:	0800aafd 	.word	0x0800aafd
 800aac0:	0800aafd 	.word	0x0800aafd
 800aac4:	0800aafd 	.word	0x0800aafd
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800aafd 	.word	0x0800aafd
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	0800aafd 	.word	0x0800aafd
 800aad8:	0800aafd 	.word	0x0800aafd
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800aafd 	.word	0x0800aafd
 800aae4:	0800aafd 	.word	0x0800aafd
 800aae8:	0800aafd 	.word	0x0800aafd
 800aaec:	0800aafd 	.word	0x0800aafd
 800aaf0:	0800aafd 	.word	0x0800aafd
 800aaf4:	0800aafd 	.word	0x0800aafd
 800aaf8:	0800aafd 	.word	0x0800aafd
=======
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
 800bc94:	4613      	mov	r3, r2
 800bc96:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd)
 800bc98:	79fb      	ldrb	r3, [r7, #7]
 800bc9a:	2b23      	cmp	r3, #35	; 0x23
 800bc9c:	d84a      	bhi.n	800bd34 <CDC_Control_FS+0xac>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <CDC_Control_FS+0x1c>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd35 	.word	0x0800bd35
 800bca8:	0800bd35 	.word	0x0800bd35
 800bcac:	0800bd35 	.word	0x0800bd35
 800bcb0:	0800bd35 	.word	0x0800bd35
 800bcb4:	0800bd35 	.word	0x0800bd35
 800bcb8:	0800bd35 	.word	0x0800bd35
 800bcbc:	0800bd35 	.word	0x0800bd35
 800bcc0:	0800bd35 	.word	0x0800bd35
 800bcc4:	0800bd35 	.word	0x0800bd35
 800bcc8:	0800bd35 	.word	0x0800bd35
 800bccc:	0800bd35 	.word	0x0800bd35
 800bcd0:	0800bd35 	.word	0x0800bd35
 800bcd4:	0800bd35 	.word	0x0800bd35
 800bcd8:	0800bd35 	.word	0x0800bd35
 800bcdc:	0800bd35 	.word	0x0800bd35
 800bce0:	0800bd35 	.word	0x0800bd35
 800bce4:	0800bd35 	.word	0x0800bd35
 800bce8:	0800bd35 	.word	0x0800bd35
 800bcec:	0800bd35 	.word	0x0800bd35
 800bcf0:	0800bd35 	.word	0x0800bd35
 800bcf4:	0800bd35 	.word	0x0800bd35
 800bcf8:	0800bd35 	.word	0x0800bd35
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd35 	.word	0x0800bd35
 800bd04:	0800bd35 	.word	0x0800bd35
 800bd08:	0800bd35 	.word	0x0800bd35
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd35 	.word	0x0800bd35
 800bd1c:	0800bd35 	.word	0x0800bd35
 800bd20:	0800bd35 	.word	0x0800bd35
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bd35 	.word	0x0800bd35
 800bd2c:	0800bd35 	.word	0x0800bd35
 800bd30:	0800bd35 	.word	0x0800bd35
>>>>>>> 6147058 (refactor)
	case CDC_SEND_BREAK:

		break;

	default:
		break;
<<<<<<< HEAD
 800aafc:	bf00      	nop
	}

	return (USBD_OK);
 800aafe:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bc80      	pop	{r7}
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop

0800ab0c <CDC_Receive_FS>:
=======
 800bd34:	bf00      	nop
	}

	return (USBD_OK);
 800bd36:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bc80      	pop	{r7}
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop

0800bd44 <CDC_Receive_FS>:
>>>>>>> 6147058 (refactor)
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len)
{
<<<<<<< HEAD
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4807      	ldr	r0, [pc, #28]	; (800ab38 <CDC_Receive_FS+0x2c>)
 800ab1a:	f7fe fe46 	bl	80097aa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab1e:	4806      	ldr	r0, [pc, #24]	; (800ab38 <CDC_Receive_FS+0x2c>)
 800ab20:	f7fe fe85 	bl	800982e <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7f6 fc18 	bl	800135c <runCommands>
	return (USBD_OK);
 800ab2c:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	200009f8 	.word	0x200009f8

0800ab3c <CDC_Transmit_FS>:
=======
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	4807      	ldr	r0, [pc, #28]	; (800bd70 <CDC_Receive_FS+0x2c>)
 800bd52:	f7fe fe46 	bl	800a9e2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd56:	4806      	ldr	r0, [pc, #24]	; (800bd70 <CDC_Receive_FS+0x2c>)
 800bd58:	f7fe fe85 	bl	800aa66 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7f6 fca0 	bl	80026a4 <runCommands>
	return (USBD_OK);
 800bd64:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	20000a00 	.word	0x20000a00

0800bd74 <CDC_Transmit_FS>:
>>>>>>> 6147058 (refactor)
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len)
{
<<<<<<< HEAD
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	460b      	mov	r3, r1
 800ab46:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab52:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e00b      	b.n	800ab7a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ab62:	887b      	ldrh	r3, [r7, #2]
 800ab64:	461a      	mov	r2, r3
 800ab66:	6879      	ldr	r1, [r7, #4]
 800ab68:	4806      	ldr	r0, [pc, #24]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab6a:	f7fe fe05 	bl	8009778 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ab6e:	4805      	ldr	r0, [pc, #20]	; (800ab84 <CDC_Transmit_FS+0x48>)
 800ab70:	f7fe fe2e 	bl	80097d0 <USBD_CDC_TransmitPacket>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800ab78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200009f8 	.word	0x200009f8

0800ab88 <USBD_FS_DeviceDescriptor>:
=======
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bd84:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <CDC_Transmit_FS+0x48>)
 800bd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd8a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e00b      	b.n	800bdb2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd9a:	887b      	ldrh	r3, [r7, #2]
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4806      	ldr	r0, [pc, #24]	; (800bdbc <CDC_Transmit_FS+0x48>)
 800bda2:	f7fe fe05 	bl	800a9b0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bda6:	4805      	ldr	r0, [pc, #20]	; (800bdbc <CDC_Transmit_FS+0x48>)
 800bda8:	f7fe fe2e 	bl	800aa08 <USBD_CDC_TransmitPacket>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20000a00 	.word	0x20000a00

0800bdc0 <USBD_FS_DeviceDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2212      	movs	r2, #18
 800ab98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab9a:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bc80      	pop	{r7}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	20000158 	.word	0x20000158

0800abac <USBD_FS_LangIDStrDescriptor>:
=======
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2212      	movs	r2, #18
 800bdd0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdd2:	4b03      	ldr	r3, [pc, #12]	; (800bde0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bc80      	pop	{r7}
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	2000015c 	.word	0x2000015c

0800bde4 <USBD_FS_LangIDStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	2204      	movs	r2, #4
 800abbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abbe:	4b03      	ldr	r3, [pc, #12]	; (800abcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	2000016c 	.word	0x2000016c

0800abd0 <USBD_FS_ProductStrDescriptor>:
=======
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	2204      	movs	r2, #4
 800bdf4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdf6:	4b03      	ldr	r3, [pc, #12]	; (800be04 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bc80      	pop	{r7}
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20000170 	.word	0x20000170

0800be08 <USBD_FS_ProductStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	6039      	str	r1, [r7, #0]
 800abda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abdc:	79fb      	ldrb	r3, [r7, #7]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d105      	bne.n	800abee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	4907      	ldr	r1, [pc, #28]	; (800ac04 <USBD_FS_ProductStrDescriptor+0x34>)
 800abe6:	4808      	ldr	r0, [pc, #32]	; (800ac08 <USBD_FS_ProductStrDescriptor+0x38>)
 800abe8:	f7ff fe08 	bl	800a7fc <USBD_GetString>
 800abec:	e004      	b.n	800abf8 <USBD_FS_ProductStrDescriptor+0x28>
=======
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	4603      	mov	r3, r0
 800be10:	6039      	str	r1, [r7, #0]
 800be12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be14:	79fb      	ldrb	r3, [r7, #7]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d105      	bne.n	800be26 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	4907      	ldr	r1, [pc, #28]	; (800be3c <USBD_FS_ProductStrDescriptor+0x34>)
 800be1e:	4808      	ldr	r0, [pc, #32]	; (800be40 <USBD_FS_ProductStrDescriptor+0x38>)
 800be20:	f7ff fe08 	bl	800ba34 <USBD_GetString>
 800be24:	e004      	b.n	800be30 <USBD_FS_ProductStrDescriptor+0x28>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	4904      	ldr	r1, [pc, #16]	; (800ac04 <USBD_FS_ProductStrDescriptor+0x34>)
 800abf2:	4805      	ldr	r0, [pc, #20]	; (800ac08 <USBD_FS_ProductStrDescriptor+0x38>)
 800abf4:	f7ff fe02 	bl	800a7fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	200010bc 	.word	0x200010bc
 800ac08:	0800c850 	.word	0x0800c850

0800ac0c <USBD_FS_ManufacturerStrDescriptor>:
=======
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4904      	ldr	r1, [pc, #16]	; (800be3c <USBD_FS_ProductStrDescriptor+0x34>)
 800be2a:	4805      	ldr	r0, [pc, #20]	; (800be40 <USBD_FS_ProductStrDescriptor+0x38>)
 800be2c:	f7ff fe02 	bl	800ba34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be30:	4b02      	ldr	r3, [pc, #8]	; (800be3c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	200010c4 	.word	0x200010c4
 800be40:	0800dbb4 	.word	0x0800dbb4

0800be44 <USBD_FS_ManufacturerStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	6039      	str	r1, [r7, #0]
 800ac16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	4904      	ldr	r1, [pc, #16]	; (800ac2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac1c:	4804      	ldr	r0, [pc, #16]	; (800ac30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac1e:	f7ff fded 	bl	800a7fc <USBD_GetString>
  return USBD_StrDesc;
 800ac22:	4b02      	ldr	r3, [pc, #8]	; (800ac2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3708      	adds	r7, #8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	200010bc 	.word	0x200010bc
 800ac30:	0800c868 	.word	0x0800c868

0800ac34 <USBD_FS_SerialStrDescriptor>:
=======
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	6039      	str	r1, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	4904      	ldr	r1, [pc, #16]	; (800be64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be54:	4804      	ldr	r0, [pc, #16]	; (800be68 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be56:	f7ff fded 	bl	800ba34 <USBD_GetString>
  return USBD_StrDesc;
 800be5a:	4b02      	ldr	r3, [pc, #8]	; (800be64 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200010c4 	.word	0x200010c4
 800be68:	0800dbcc 	.word	0x0800dbcc

0800be6c <USBD_FS_SerialStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	221a      	movs	r2, #26
 800ac44:	801a      	strh	r2, [r3, #0]
=======
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	6039      	str	r1, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	221a      	movs	r2, #26
 800be7c:	801a      	strh	r2, [r3, #0]
>>>>>>> 6147058 (refactor)

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
<<<<<<< HEAD
 800ac46:	f000 f843 	bl	800acd0 <Get_SerialNum>
=======
 800be7e:	f000 f843 	bl	800bf08 <Get_SerialNum>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
<<<<<<< HEAD
 800ac4a:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000170 	.word	0x20000170

0800ac58 <USBD_FS_ConfigStrDescriptor>:
=======
 800be82:	4b02      	ldr	r3, [pc, #8]	; (800be8c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be84:	4618      	mov	r0, r3
 800be86:	3708      	adds	r7, #8
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	20000174 	.word	0x20000174

0800be90 <USBD_FS_ConfigStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	6039      	str	r1, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d105      	bne.n	800ac76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4907      	ldr	r1, [pc, #28]	; (800ac8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac6e:	4808      	ldr	r0, [pc, #32]	; (800ac90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac70:	f7ff fdc4 	bl	800a7fc <USBD_GetString>
 800ac74:	e004      	b.n	800ac80 <USBD_FS_ConfigStrDescriptor+0x28>
=======
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be9c:	79fb      	ldrb	r3, [r7, #7]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d105      	bne.n	800beae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	4907      	ldr	r1, [pc, #28]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bea6:	4808      	ldr	r0, [pc, #32]	; (800bec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bea8:	f7ff fdc4 	bl	800ba34 <USBD_GetString>
 800beac:	e004      	b.n	800beb8 <USBD_FS_ConfigStrDescriptor+0x28>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	4904      	ldr	r1, [pc, #16]	; (800ac8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac7a:	4805      	ldr	r0, [pc, #20]	; (800ac90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac7c:	f7ff fdbe 	bl	800a7fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac80:	4b02      	ldr	r3, [pc, #8]	; (800ac8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	200010bc 	.word	0x200010bc
 800ac90:	0800c87c 	.word	0x0800c87c

0800ac94 <USBD_FS_InterfaceStrDescriptor>:
=======
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	4904      	ldr	r1, [pc, #16]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beb2:	4805      	ldr	r0, [pc, #20]	; (800bec8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb4:	f7ff fdbe 	bl	800ba34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb8:	4b02      	ldr	r3, [pc, #8]	; (800bec4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3708      	adds	r7, #8
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	200010c4 	.word	0x200010c4
 800bec8:	0800dbe0 	.word	0x0800dbe0

0800becc <USBD_FS_InterfaceStrDescriptor>:
>>>>>>> 6147058 (refactor)
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
<<<<<<< HEAD
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	6039      	str	r1, [r7, #0]
 800ac9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aca0:	79fb      	ldrb	r3, [r7, #7]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d105      	bne.n	800acb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	4907      	ldr	r1, [pc, #28]	; (800acc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acaa:	4808      	ldr	r0, [pc, #32]	; (800accc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acac:	f7ff fda6 	bl	800a7fc <USBD_GetString>
 800acb0:	e004      	b.n	800acbc <USBD_FS_InterfaceStrDescriptor+0x28>
=======
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	6039      	str	r1, [r7, #0]
 800bed6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d105      	bne.n	800beea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	4907      	ldr	r1, [pc, #28]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bee2:	4808      	ldr	r0, [pc, #32]	; (800bf04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bee4:	f7ff fda6 	bl	800ba34 <USBD_GetString>
 800bee8:	e004      	b.n	800bef4 <USBD_FS_InterfaceStrDescriptor+0x28>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
<<<<<<< HEAD
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	4904      	ldr	r1, [pc, #16]	; (800acc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800acb6:	4805      	ldr	r0, [pc, #20]	; (800accc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800acb8:	f7ff fda0 	bl	800a7fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800acbc:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200010bc 	.word	0x200010bc
 800accc:	0800c888 	.word	0x0800c888

0800acd0 <Get_SerialNum>:
=======
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4904      	ldr	r1, [pc, #16]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beee:	4805      	ldr	r0, [pc, #20]	; (800bf04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bef0:	f7ff fda0 	bl	800ba34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	200010c4 	.word	0x200010c4
 800bf04:	0800dbec 	.word	0x0800dbec

0800bf08 <Get_SerialNum>:
>>>>>>> 6147058 (refactor)
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
<<<<<<< HEAD
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acd6:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <Get_SerialNum+0x44>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800acdc:	4b0e      	ldr	r3, [pc, #56]	; (800ad18 <Get_SerialNum+0x48>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ace2:	4b0e      	ldr	r3, [pc, #56]	; (800ad1c <Get_SerialNum+0x4c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4413      	add	r3, r2
 800acee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800acf6:	2208      	movs	r2, #8
 800acf8:	4909      	ldr	r1, [pc, #36]	; (800ad20 <Get_SerialNum+0x50>)
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 f814 	bl	800ad28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad00:	2204      	movs	r2, #4
 800ad02:	4908      	ldr	r1, [pc, #32]	; (800ad24 <Get_SerialNum+0x54>)
 800ad04:	68b8      	ldr	r0, [r7, #8]
 800ad06:	f000 f80f 	bl	800ad28 <IntToUnicode>
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	1ffff7e8 	.word	0x1ffff7e8
 800ad18:	1ffff7ec 	.word	0x1ffff7ec
 800ad1c:	1ffff7f0 	.word	0x1ffff7f0
 800ad20:	20000172 	.word	0x20000172
 800ad24:	20000182 	.word	0x20000182

0800ad28 <IntToUnicode>:
=======
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf0e:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <Get_SerialNum+0x44>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf14:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <Get_SerialNum+0x48>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf1a:	4b0e      	ldr	r3, [pc, #56]	; (800bf54 <Get_SerialNum+0x4c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4413      	add	r3, r2
 800bf26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d009      	beq.n	800bf42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf2e:	2208      	movs	r2, #8
 800bf30:	4909      	ldr	r1, [pc, #36]	; (800bf58 <Get_SerialNum+0x50>)
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f814 	bl	800bf60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf38:	2204      	movs	r2, #4
 800bf3a:	4908      	ldr	r1, [pc, #32]	; (800bf5c <Get_SerialNum+0x54>)
 800bf3c:	68b8      	ldr	r0, [r7, #8]
 800bf3e:	f000 f80f 	bl	800bf60 <IntToUnicode>
  }
}
 800bf42:	bf00      	nop
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	1ffff7e8 	.word	0x1ffff7e8
 800bf50:	1ffff7ec 	.word	0x1ffff7ec
 800bf54:	1ffff7f0 	.word	0x1ffff7f0
 800bf58:	20000176 	.word	0x20000176
 800bf5c:	20000186 	.word	0x20000186

0800bf60 <IntToUnicode>:
>>>>>>> 6147058 (refactor)
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
<<<<<<< HEAD
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75fb      	strb	r3, [r7, #23]
 800ad3e:	e027      	b.n	800ad90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	0f1b      	lsrs	r3, r3, #28
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d80b      	bhi.n	800ad60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	0f1b      	lsrs	r3, r3, #28
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	7dfb      	ldrb	r3, [r7, #23]
 800ad50:	005b      	lsls	r3, r3, #1
 800ad52:	4619      	mov	r1, r3
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	440b      	add	r3, r1
 800ad58:	3230      	adds	r2, #48	; 0x30
 800ad5a:	b2d2      	uxtb	r2, r2
 800ad5c:	701a      	strb	r2, [r3, #0]
 800ad5e:	e00a      	b.n	800ad76 <IntToUnicode+0x4e>
=======
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf72:	2300      	movs	r3, #0
 800bf74:	75fb      	strb	r3, [r7, #23]
 800bf76:	e027      	b.n	800bfc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	0f1b      	lsrs	r3, r3, #28
 800bf7c:	2b09      	cmp	r3, #9
 800bf7e:	d80b      	bhi.n	800bf98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	0f1b      	lsrs	r3, r3, #28
 800bf84:	b2da      	uxtb	r2, r3
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	440b      	add	r3, r1
 800bf90:	3230      	adds	r2, #48	; 0x30
 800bf92:	b2d2      	uxtb	r2, r2
 800bf94:	701a      	strb	r2, [r3, #0]
 800bf96:	e00a      	b.n	800bfae <IntToUnicode+0x4e>
>>>>>>> 6147058 (refactor)
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
<<<<<<< HEAD
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	0f1b      	lsrs	r3, r3, #28
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
 800ad68:	005b      	lsls	r3, r3, #1
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	440b      	add	r3, r1
 800ad70:	3237      	adds	r2, #55	; 0x37
 800ad72:	b2d2      	uxtb	r2, r2
 800ad74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	3301      	adds	r3, #1
 800ad82:	68ba      	ldr	r2, [r7, #8]
 800ad84:	4413      	add	r3, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
 800ad90:	7dfa      	ldrb	r2, [r7, #23]
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d3d3      	bcc.n	800ad40 <IntToUnicode+0x18>
  }
}
 800ad98:	bf00      	nop
 800ad9a:	bf00      	nop
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bc80      	pop	{r7}
 800ada2:	4770      	bx	lr

0800ada4 <HAL_PCD_MspInit>:
=======
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	0f1b      	lsrs	r3, r3, #28
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4619      	mov	r1, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3237      	adds	r2, #55	; 0x37
 800bfaa:	b2d2      	uxtb	r2, r2
 800bfac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	005b      	lsls	r3, r3, #1
 800bfb8:	3301      	adds	r3, #1
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	75fb      	strb	r3, [r7, #23]
 800bfc8:	7dfa      	ldrb	r2, [r7, #23]
 800bfca:	79fb      	ldrb	r3, [r7, #7]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d3d3      	bcc.n	800bf78 <IntToUnicode+0x18>
  }
}
 800bfd0:	bf00      	nop
 800bfd2:	bf00      	nop
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bc80      	pop	{r7}
 800bfda:	4770      	bx	lr

0800bfdc <HAL_PCD_MspInit>:
>>>>>>> 6147058 (refactor)
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
<<<<<<< HEAD
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a0d      	ldr	r2, [pc, #52]	; (800ade8 <HAL_PCD_MspInit+0x44>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d113      	bne.n	800adde <HAL_PCD_MspInit+0x3a>
=======
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a0d      	ldr	r2, [pc, #52]	; (800c020 <HAL_PCD_MspInit+0x44>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d113      	bne.n	800c016 <HAL_PCD_MspInit+0x3a>
>>>>>>> 6147058 (refactor)
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
<<<<<<< HEAD
 800adb6:	4b0d      	ldr	r3, [pc, #52]	; (800adec <HAL_PCD_MspInit+0x48>)
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	4a0c      	ldr	r2, [pc, #48]	; (800adec <HAL_PCD_MspInit+0x48>)
 800adbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800adc0:	61d3      	str	r3, [r2, #28]
 800adc2:	4b0a      	ldr	r3, [pc, #40]	; (800adec <HAL_PCD_MspInit+0x48>)
 800adc4:	69db      	ldr	r3, [r3, #28]
 800adc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800adce:	2200      	movs	r2, #0
 800add0:	2100      	movs	r1, #0
 800add2:	2014      	movs	r0, #20
 800add4:	f7f8 fcbf 	bl	8003756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800add8:	2014      	movs	r0, #20
 800adda:	f7f8 fcd8 	bl	800378e <HAL_NVIC_EnableIRQ>
=======
 800bfee:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <HAL_PCD_MspInit+0x48>)
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	4a0c      	ldr	r2, [pc, #48]	; (800c024 <HAL_PCD_MspInit+0x48>)
 800bff4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bff8:	61d3      	str	r3, [r2, #28]
 800bffa:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <HAL_PCD_MspInit+0x48>)
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c006:	2200      	movs	r2, #0
 800c008:	2100      	movs	r1, #0
 800c00a:	2014      	movs	r0, #20
 800c00c:	f7f8 fcf1 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c010:	2014      	movs	r0, #20
 800c012:	f7f8 fd0a 	bl	8004a2a <HAL_NVIC_EnableIRQ>
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
<<<<<<< HEAD
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	40005c00 	.word	0x40005c00
 800adec:	40021000 	.word	0x40021000

0800adf0 <HAL_PCD_SetupStageCallback>:
=======
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	40005c00 	.word	0x40005c00
 800c024:	40021000 	.word	0x40021000

0800c028 <HAL_PCD_SetupStageCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7fe fdc7 	bl	800999a <USBD_LL_SetupStage>
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <HAL_PCD_DataOutStageCallback>:
=======
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c03c:	4619      	mov	r1, r3
 800c03e:	4610      	mov	r0, r2
 800c040:	f7fe fdc7 	bl	800abd2 <USBD_LL_SetupStage>
}
 800c044:	bf00      	nop
 800c046:	3708      	adds	r7, #8
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <HAL_PCD_DataOutStageCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ae26:	78fa      	ldrb	r2, [r7, #3]
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f7fe fdf9 	bl	8009a34 <USBD_LL_DataOutStage>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_PCD_DataInStageCallback>:
=======
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c05e:	78fa      	ldrb	r2, [r7, #3]
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	00db      	lsls	r3, r3, #3
 800c06a:	440b      	add	r3, r1
 800c06c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	78fb      	ldrb	r3, [r7, #3]
 800c074:	4619      	mov	r1, r3
 800c076:	f7fe fdf9 	bl	800ac6c <USBD_LL_DataOutStage>
}
 800c07a:	bf00      	nop
 800c07c:	3708      	adds	r7, #8
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}

0800c082 <HAL_PCD_DataInStageCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	440b      	add	r3, r1
 800ae6a:	333c      	adds	r3, #60	; 0x3c
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7fe fe50 	bl	8009b16 <USBD_LL_DataInStage>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_PCD_SOFCallback>:
=======
 800c082:	b580      	push	{r7, lr}
 800c084:	b082      	sub	sp, #8
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
 800c08a:	460b      	mov	r3, r1
 800c08c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c094:	78fa      	ldrb	r2, [r7, #3]
 800c096:	6879      	ldr	r1, [r7, #4]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
 800c0a2:	333c      	adds	r3, #60	; 0x3c
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f7fe fe50 	bl	800ad4e <USBD_LL_DataInStage>
}
 800c0ae:	bf00      	nop
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <HAL_PCD_SOFCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe ff60 	bl	8009d52 <USBD_LL_SOF>
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <HAL_PCD_ResetCallback>:
=======
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7fe ff60 	bl	800af8a <USBD_LL_SOF>
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <HAL_PCD_ResetCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aea2:	2301      	movs	r3, #1
 800aea4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d001      	beq.n	800aeb2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aeae:	f7f7 fbc7 	bl	8002640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aeb8:	7bfa      	ldrb	r2, [r7, #15]
 800aeba:	4611      	mov	r1, r2
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fe ff10 	bl	8009ce2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe fec9 	bl	8009c60 <USBD_LL_Reset>
}
 800aece:	bf00      	nop
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <HAL_PCD_SuspendCallback>:
=======
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d001      	beq.n	800c0ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0e6:	f7f7 fbf7 	bl	80038d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0f0:	7bfa      	ldrb	r2, [r7, #15]
 800c0f2:	4611      	mov	r1, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fe ff10 	bl	800af1a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c100:	4618      	mov	r0, r3
 800c102:	f7fe fec9 	bl	800ae98 <USBD_LL_Reset>
}
 800c106:	bf00      	nop
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <HAL_PCD_SuspendCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe ff0a 	bl	8009d00 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aef4:	4b04      	ldr	r3, [pc, #16]	; (800af08 <HAL_PCD_SuspendCallback+0x30>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4a03      	ldr	r2, [pc, #12]	; (800af08 <HAL_PCD_SuspendCallback+0x30>)
 800aefa:	f043 0306 	orr.w	r3, r3, #6
 800aefe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af00:	bf00      	nop
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	e000ed00 	.word	0xe000ed00

0800af0c <HAL_PCD_ResumeCallback>:
=======
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe ff0a 	bl	800af38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d005      	beq.n	800c138 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c12c:	4b04      	ldr	r3, [pc, #16]	; (800c140 <HAL_PCD_SuspendCallback+0x30>)
 800c12e:	691b      	ldr	r3, [r3, #16]
 800c130:	4a03      	ldr	r2, [pc, #12]	; (800c140 <HAL_PCD_SuspendCallback+0x30>)
 800c132:	f043 0306 	orr.w	r3, r3, #6
 800c136:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c138:	bf00      	nop
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	e000ed00 	.word	0xe000ed00

0800c144 <HAL_PCD_ResumeCallback>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
=======
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
>>>>>>> 6147058 (refactor)
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
<<<<<<< HEAD
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe ff04 	bl	8009d28 <USBD_LL_Resume>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_LL_Init>:
=======
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe ff04 	bl	800af60 <USBD_LL_Resume>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <USBD_LL_Init>:
>>>>>>> 6147058 (refactor)
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800af30:	4a28      	ldr	r2, [pc, #160]	; (800afd4 <USBD_LL_Init+0xac>)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a26      	ldr	r2, [pc, #152]	; (800afd4 <USBD_LL_Init+0xac>)
 800af3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800af40:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <USBD_LL_Init+0xac>)
 800af42:	4a25      	ldr	r2, [pc, #148]	; (800afd8 <USBD_LL_Init+0xb0>)
 800af44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800af46:	4b23      	ldr	r3, [pc, #140]	; (800afd4 <USBD_LL_Init+0xac>)
 800af48:	2208      	movs	r2, #8
 800af4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800af4c:	4b21      	ldr	r3, [pc, #132]	; (800afd4 <USBD_LL_Init+0xac>)
 800af4e:	2202      	movs	r2, #2
 800af50:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800af52:	4b20      	ldr	r3, [pc, #128]	; (800afd4 <USBD_LL_Init+0xac>)
 800af54:	2200      	movs	r2, #0
 800af56:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <USBD_LL_Init+0xac>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800af5e:	4b1d      	ldr	r3, [pc, #116]	; (800afd4 <USBD_LL_Init+0xac>)
 800af60:	2200      	movs	r2, #0
 800af62:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800af64:	481b      	ldr	r0, [pc, #108]	; (800afd4 <USBD_LL_Init+0xac>)
 800af66:	f7f9 f82e 	bl	8003fc6 <HAL_PCD_Init>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d001      	beq.n	800af74 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800af70:	f7f7 fb66 	bl	8002640 <Error_Handler>
=======
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c168:	4a28      	ldr	r2, [pc, #160]	; (800c20c <USBD_LL_Init+0xac>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a26      	ldr	r2, [pc, #152]	; (800c20c <USBD_LL_Init+0xac>)
 800c174:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c178:	4b24      	ldr	r3, [pc, #144]	; (800c20c <USBD_LL_Init+0xac>)
 800c17a:	4a25      	ldr	r2, [pc, #148]	; (800c210 <USBD_LL_Init+0xb0>)
 800c17c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c17e:	4b23      	ldr	r3, [pc, #140]	; (800c20c <USBD_LL_Init+0xac>)
 800c180:	2208      	movs	r2, #8
 800c182:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c184:	4b21      	ldr	r3, [pc, #132]	; (800c20c <USBD_LL_Init+0xac>)
 800c186:	2202      	movs	r2, #2
 800c188:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c18a:	4b20      	ldr	r3, [pc, #128]	; (800c20c <USBD_LL_Init+0xac>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c190:	4b1e      	ldr	r3, [pc, #120]	; (800c20c <USBD_LL_Init+0xac>)
 800c192:	2200      	movs	r2, #0
 800c194:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c196:	4b1d      	ldr	r3, [pc, #116]	; (800c20c <USBD_LL_Init+0xac>)
 800c198:	2200      	movs	r2, #0
 800c19a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c19c:	481b      	ldr	r0, [pc, #108]	; (800c20c <USBD_LL_Init+0xac>)
 800c19e:	f7f9 f82e 	bl	80051fe <HAL_PCD_Init>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c1a8:	f7f7 fb96 	bl	80038d8 <Error_Handler>
>>>>>>> 6147058 (refactor)
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
<<<<<<< HEAD
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af7a:	2318      	movs	r3, #24
 800af7c:	2200      	movs	r2, #0
 800af7e:	2100      	movs	r1, #0
 800af80:	f7fa fb70 	bl	8005664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af8a:	2358      	movs	r3, #88	; 0x58
 800af8c:	2200      	movs	r2, #0
 800af8e:	2180      	movs	r1, #128	; 0x80
 800af90:	f7fa fb68 	bl	8005664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af9a:	23c0      	movs	r3, #192	; 0xc0
 800af9c:	2200      	movs	r2, #0
 800af9e:	2181      	movs	r1, #129	; 0x81
 800afa0:	f7fa fb60 	bl	8005664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afaa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800afae:	2200      	movs	r2, #0
 800afb0:	2101      	movs	r1, #1
 800afb2:	f7fa fb57 	bl	8005664 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800afbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc0:	2200      	movs	r2, #0
 800afc2:	2182      	movs	r1, #130	; 0x82
 800afc4:	f7fa fb4e 	bl	8005664 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	200012bc 	.word	0x200012bc
 800afd8:	40005c00 	.word	0x40005c00

0800afdc <USBD_LL_Start>:
=======
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1b2:	2318      	movs	r3, #24
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	f7fa fb70 	bl	800689c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1c2:	2358      	movs	r3, #88	; 0x58
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2180      	movs	r1, #128	; 0x80
 800c1c8:	f7fa fb68 	bl	800689c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1d2:	23c0      	movs	r3, #192	; 0xc0
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2181      	movs	r1, #129	; 0x81
 800c1d8:	f7fa fb60 	bl	800689c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	f7fa fb57 	bl	800689c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2182      	movs	r1, #130	; 0x82
 800c1fc:	f7fa fb4e 	bl	800689c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	200012c4 	.word	0x200012c4
 800c210:	40005c00 	.word	0x40005c00

0800c214 <USBD_LL_Start>:
>>>>>>> 6147058 (refactor)
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
<<<<<<< HEAD
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7f9 f8f2 	bl	80041dc <HAL_PCD_Start>
 800aff8:	4603      	mov	r3, r0
 800affa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f94e 	bl	800b2a0 <USBD_Get_USB_Status>
 800b004:	4603      	mov	r3, r0
 800b006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b008:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBD_LL_OpenEP>:
=======
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c220:	2300      	movs	r3, #0
 800c222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7f9 f8f2 	bl	8005414 <HAL_PCD_Start>
 800c230:	4603      	mov	r3, r0
 800c232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	4618      	mov	r0, r3
 800c238:	f000 f94e 	bl	800c4d8 <USBD_Get_USB_Status>
 800c23c:	4603      	mov	r3, r0
 800c23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c240:	7bbb      	ldrb	r3, [r7, #14]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_LL_OpenEP>:
>>>>>>> 6147058 (refactor)
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
<<<<<<< HEAD
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	4608      	mov	r0, r1
 800b01c:	4611      	mov	r1, r2
 800b01e:	461a      	mov	r2, r3
 800b020:	4603      	mov	r3, r0
 800b022:	70fb      	strb	r3, [r7, #3]
 800b024:	460b      	mov	r3, r1
 800b026:	70bb      	strb	r3, [r7, #2]
 800b028:	4613      	mov	r3, r2
 800b02a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b03a:	78bb      	ldrb	r3, [r7, #2]
 800b03c:	883a      	ldrh	r2, [r7, #0]
 800b03e:	78f9      	ldrb	r1, [r7, #3]
 800b040:	f7f9 fa6c 	bl	800451c <HAL_PCD_EP_Open>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f928 	bl	800b2a0 <USBD_Get_USB_Status>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b054:	7bbb      	ldrb	r3, [r7, #14]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_LL_CloseEP>:
=======
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	4608      	mov	r0, r1
 800c254:	4611      	mov	r1, r2
 800c256:	461a      	mov	r2, r3
 800c258:	4603      	mov	r3, r0
 800c25a:	70fb      	strb	r3, [r7, #3]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70bb      	strb	r3, [r7, #2]
 800c260:	4613      	mov	r3, r2
 800c262:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c268:	2300      	movs	r3, #0
 800c26a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c272:	78bb      	ldrb	r3, [r7, #2]
 800c274:	883a      	ldrh	r2, [r7, #0]
 800c276:	78f9      	ldrb	r1, [r7, #3]
 800c278:	f7f9 fa6c 	bl	8005754 <HAL_PCD_EP_Open>
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c280:	7bfb      	ldrb	r3, [r7, #15]
 800c282:	4618      	mov	r0, r3
 800c284:	f000 f928 	bl	800c4d8 <USBD_Get_USB_Status>
 800c288:	4603      	mov	r3, r0
 800c28a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBD_LL_CloseEP>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	460b      	mov	r3, r1
 800b068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b078:	78fa      	ldrb	r2, [r7, #3]
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7f9 fab3 	bl	80045e8 <HAL_PCD_EP_Close>
 800b082:	4603      	mov	r3, r0
 800b084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b086:	7bfb      	ldrb	r3, [r7, #15]
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 f909 	bl	800b2a0 <USBD_Get_USB_Status>
 800b08e:	4603      	mov	r3, r0
 800b090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b092:	7bbb      	ldrb	r3, [r7, #14]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_LL_StallEP>:
=======
 800c296:	b580      	push	{r7, lr}
 800c298:	b084      	sub	sp, #16
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	6078      	str	r0, [r7, #4]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2b0:	78fa      	ldrb	r2, [r7, #3]
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7f9 fab3 	bl	8005820 <HAL_PCD_EP_Close>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 f909 	bl	800c4d8 <USBD_Get_USB_Status>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <USBD_LL_StallEP>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0b6:	78fa      	ldrb	r2, [r7, #3]
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f9 fb73 	bl	80047a6 <HAL_PCD_EP_SetStall>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 f8ea 	bl	800b2a0 <USBD_Get_USB_Status>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_ClearStallEP>:
=======
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ee:	78fa      	ldrb	r2, [r7, #3]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f9 fb73 	bl	80059de <HAL_PCD_EP_SetStall>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f8ea 	bl	800c4d8 <USBD_Get_USB_Status>
 800c304:	4603      	mov	r3, r0
 800c306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c308:	7bbb      	ldrb	r3, [r7, #14]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <USBD_LL_ClearStallEP>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0f4:	78fa      	ldrb	r2, [r7, #3]
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f9 fbb4 	bl	8004866 <HAL_PCD_EP_ClrStall>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	4618      	mov	r0, r3
 800b106:	f000 f8cb 	bl	800b2a0 <USBD_Get_USB_Status>
 800b10a:	4603      	mov	r3, r0
 800b10c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b10e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_LL_IsStallEP>:
=======
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
 800c31a:	460b      	mov	r3, r1
 800c31c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c32c:	78fa      	ldrb	r2, [r7, #3]
 800c32e:	4611      	mov	r1, r2
 800c330:	4618      	mov	r0, r3
 800c332:	f7f9 fbb4 	bl	8005a9e <HAL_PCD_EP_ClrStall>
 800c336:	4603      	mov	r3, r0
 800c338:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33a:	7bfb      	ldrb	r3, [r7, #15]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f8cb 	bl	800c4d8 <USBD_Get_USB_Status>
 800c342:	4603      	mov	r3, r0
 800c344:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c346:	7bbb      	ldrb	r3, [r7, #14]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_LL_IsStallEP>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b12a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b12c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b130:	2b00      	cmp	r3, #0
 800b132:	da0c      	bge.n	800b14e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13a:	68f9      	ldr	r1, [r7, #12]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	440b      	add	r3, r1
 800b148:	3302      	adds	r3, #2
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	e00b      	b.n	800b166 <USBD_LL_IsStallEP+0x4e>
=======
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c362:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	da0c      	bge.n	800c386 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c36c:	78fb      	ldrb	r3, [r7, #3]
 800c36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c372:	68f9      	ldr	r1, [r7, #12]
 800c374:	1c5a      	adds	r2, r3, #1
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	440b      	add	r3, r1
 800c380:	3302      	adds	r3, #2
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	e00b      	b.n	800c39e <USBD_LL_IsStallEP+0x4e>
>>>>>>> 6147058 (refactor)
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
<<<<<<< HEAD
 800b14e:	78fb      	ldrb	r3, [r7, #3]
 800b150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b154:	68f9      	ldr	r1, [r7, #12]
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	00db      	lsls	r3, r3, #3
 800b15e:	440b      	add	r3, r1
 800b160:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b164:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr

0800b170 <USBD_LL_SetUSBAddress>:
=======
 800c386:	78fb      	ldrb	r3, [r7, #3]
 800c388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c38c:	68f9      	ldr	r1, [r7, #12]
 800c38e:	4613      	mov	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	440b      	add	r3, r1
 800c398:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c39c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bc80      	pop	{r7}
 800c3a6:	4770      	bx	lr

0800c3a8 <USBD_LL_SetUSBAddress>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
<<<<<<< HEAD
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b18a:	78fa      	ldrb	r2, [r7, #3]
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f9 f99f 	bl	80044d2 <HAL_PCD_SetAddress>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f880 	bl	800b2a0 <USBD_Get_USB_Status>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <USBD_LL_Transmit>:
=======
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3c2:	78fa      	ldrb	r2, [r7, #3]
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f9 f99f 	bl	800570a <HAL_PCD_SetAddress>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f880 	bl	800c4d8 <USBD_Get_USB_Status>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_LL_Transmit>:
>>>>>>> 6147058 (refactor)
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b086      	sub	sp, #24
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	72fb      	strb	r3, [r7, #11]
 800b1be:	4613      	mov	r3, r2
 800b1c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1d0:	893b      	ldrh	r3, [r7, #8]
 800b1d2:	7af9      	ldrb	r1, [r7, #11]
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	f7f9 faa3 	bl	8004720 <HAL_PCD_EP_Transmit>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f85d 	bl	800b2a0 <USBD_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_PrepareReceive>:
=======
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b086      	sub	sp, #24
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	72fb      	strb	r3, [r7, #11]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c408:	893b      	ldrh	r3, [r7, #8]
 800c40a:	7af9      	ldrb	r1, [r7, #11]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	f7f9 faa3 	bl	8005958 <HAL_PCD_EP_Transmit>
 800c412:	4603      	mov	r3, r0
 800c414:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c416:	7dfb      	ldrb	r3, [r7, #23]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 f85d 	bl	800c4d8 <USBD_Get_USB_Status>
 800c41e:	4603      	mov	r3, r0
 800c420:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c422:	7dbb      	ldrb	r3, [r7, #22]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <USBD_LL_PrepareReceive>:
>>>>>>> 6147058 (refactor)
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
<<<<<<< HEAD
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	607a      	str	r2, [r7, #4]
 800b1fe:	461a      	mov	r2, r3
 800b200:	460b      	mov	r3, r1
 800b202:	72fb      	strb	r3, [r7, #11]
 800b204:	4613      	mov	r3, r2
 800b206:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b216:	893b      	ldrh	r3, [r7, #8]
 800b218:	7af9      	ldrb	r1, [r7, #11]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f7f9 fa2c 	bl	8004678 <HAL_PCD_EP_Receive>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f83a 	bl	800b2a0 <USBD_Get_USB_Status>
 800b22c:	4603      	mov	r3, r0
 800b22e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b230:	7dbb      	ldrb	r3, [r7, #22]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_GetRxDataSize>:
=======
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	607a      	str	r2, [r7, #4]
 800c436:	461a      	mov	r2, r3
 800c438:	460b      	mov	r3, r1
 800c43a:	72fb      	strb	r3, [r7, #11]
 800c43c:	4613      	mov	r3, r2
 800c43e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c44e:	893b      	ldrh	r3, [r7, #8]
 800c450:	7af9      	ldrb	r1, [r7, #11]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	f7f9 fa2c 	bl	80058b0 <HAL_PCD_EP_Receive>
 800c458:	4603      	mov	r3, r0
 800c45a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 f83a 	bl	800c4d8 <USBD_Get_USB_Status>
 800c464:	4603      	mov	r3, r0
 800c466:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c468:	7dbb      	ldrb	r3, [r7, #22]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_LL_GetRxDataSize>:
>>>>>>> 6147058 (refactor)
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
<<<<<<< HEAD
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	460b      	mov	r3, r1
 800b244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7f9 fa4e 	bl	80046f2 <HAL_PCD_EP_GetRxCount>
 800b256:	4603      	mov	r3, r0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_static_malloc>:
=======
 800c472:	b580      	push	{r7, lr}
 800c474:	b082      	sub	sp, #8
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	460b      	mov	r3, r1
 800c47c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c484:	78fa      	ldrb	r2, [r7, #3]
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f9 fa4e 	bl	800592a <HAL_PCD_EP_GetRxCount>
 800c48e:	4603      	mov	r3, r0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <USBD_static_malloc>:
>>>>>>> 6147058 (refactor)
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
<<<<<<< HEAD
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <USBD_static_malloc+0x14>)
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	bc80      	pop	{r7}
 800b272:	4770      	bx	lr
 800b274:	2000028c 	.word	0x2000028c

0800b278 <USBD_static_free>:
=======
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c4a0:	4b02      	ldr	r3, [pc, #8]	; (800c4ac <USBD_static_malloc+0x14>)
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	370c      	adds	r7, #12
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bc80      	pop	{r7}
 800c4aa:	4770      	bx	lr
 800c4ac:	20000284 	.word	0x20000284

0800c4b0 <USBD_static_free>:
>>>>>>> 6147058 (refactor)
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
<<<<<<< HEAD
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]

}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	bc80      	pop	{r7}
 800b288:	4770      	bx	lr

0800b28a <HAL_PCDEx_SetConnectionState>:
=======
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]

}
 800c4b8:	bf00      	nop
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr

0800c4c2 <HAL_PCDEx_SetConnectionState>:
>>>>>>> 6147058 (refactor)
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
<<<<<<< HEAD
 800b28a:	b480      	push	{r7}
 800b28c:	b083      	sub	sp, #12
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	460b      	mov	r3, r1
 800b294:	70fb      	strb	r3, [r7, #3]
=======
 800c4c2:	b480      	push	{r7}
 800c4c4:	b083      	sub	sp, #12
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	70fb      	strb	r3, [r7, #3]
>>>>>>> 6147058 (refactor)
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
<<<<<<< HEAD
 800b296:	bf00      	nop
 800b298:	370c      	adds	r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr

0800b2a0 <USBD_Get_USB_Status>:
=======
 800c4ce:	bf00      	nop
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bc80      	pop	{r7}
 800c4d6:	4770      	bx	lr

0800c4d8 <USBD_Get_USB_Status>:
>>>>>>> 6147058 (refactor)
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
<<<<<<< HEAD
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b2ae:	79fb      	ldrb	r3, [r7, #7]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d817      	bhi.n	800b2e4 <USBD_Get_USB_Status+0x44>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <USBD_Get_USB_Status+0x1c>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2cd 	.word	0x0800b2cd
 800b2c0:	0800b2d3 	.word	0x0800b2d3
 800b2c4:	0800b2d9 	.word	0x0800b2d9
 800b2c8:	0800b2df 	.word	0x0800b2df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d0:	e00b      	b.n	800b2ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d6:	e008      	b.n	800b2ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	73fb      	strb	r3, [r7, #15]
    break;
 800b2dc:	e005      	b.n	800b2ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2de:	2302      	movs	r3, #2
 800b2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e2:	e002      	b.n	800b2ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2e8:	bf00      	nop
  }
  return usb_status;
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bc80      	pop	{r7}
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop

0800b2f8 <__errno>:
 800b2f8:	4b01      	ldr	r3, [pc, #4]	; (800b300 <__errno+0x8>)
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	2000018c 	.word	0x2000018c

0800b304 <__libc_init_array>:
 800b304:	b570      	push	{r4, r5, r6, lr}
 800b306:	2600      	movs	r6, #0
 800b308:	4d0c      	ldr	r5, [pc, #48]	; (800b33c <__libc_init_array+0x38>)
 800b30a:	4c0d      	ldr	r4, [pc, #52]	; (800b340 <__libc_init_array+0x3c>)
 800b30c:	1b64      	subs	r4, r4, r5
 800b30e:	10a4      	asrs	r4, r4, #2
 800b310:	42a6      	cmp	r6, r4
 800b312:	d109      	bne.n	800b328 <__libc_init_array+0x24>
 800b314:	f001 fa30 	bl	800c778 <_init>
 800b318:	2600      	movs	r6, #0
 800b31a:	4d0a      	ldr	r5, [pc, #40]	; (800b344 <__libc_init_array+0x40>)
 800b31c:	4c0a      	ldr	r4, [pc, #40]	; (800b348 <__libc_init_array+0x44>)
 800b31e:	1b64      	subs	r4, r4, r5
 800b320:	10a4      	asrs	r4, r4, #2
 800b322:	42a6      	cmp	r6, r4
 800b324:	d105      	bne.n	800b332 <__libc_init_array+0x2e>
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	f855 3b04 	ldr.w	r3, [r5], #4
 800b32c:	4798      	blx	r3
 800b32e:	3601      	adds	r6, #1
 800b330:	e7ee      	b.n	800b310 <__libc_init_array+0xc>
 800b332:	f855 3b04 	ldr.w	r3, [r5], #4
 800b336:	4798      	blx	r3
 800b338:	3601      	adds	r6, #1
 800b33a:	e7f2      	b.n	800b322 <__libc_init_array+0x1e>
 800b33c:	0800c970 	.word	0x0800c970
 800b340:	0800c970 	.word	0x0800c970
 800b344:	0800c970 	.word	0x0800c970
 800b348:	0800c974 	.word	0x0800c974

0800b34c <__itoa>:
 800b34c:	1e93      	subs	r3, r2, #2
 800b34e:	2b22      	cmp	r3, #34	; 0x22
 800b350:	b510      	push	{r4, lr}
 800b352:	460c      	mov	r4, r1
 800b354:	d904      	bls.n	800b360 <__itoa+0x14>
 800b356:	2300      	movs	r3, #0
 800b358:	461c      	mov	r4, r3
 800b35a:	700b      	strb	r3, [r1, #0]
 800b35c:	4620      	mov	r0, r4
 800b35e:	bd10      	pop	{r4, pc}
 800b360:	2a0a      	cmp	r2, #10
 800b362:	d109      	bne.n	800b378 <__itoa+0x2c>
 800b364:	2800      	cmp	r0, #0
 800b366:	da07      	bge.n	800b378 <__itoa+0x2c>
 800b368:	232d      	movs	r3, #45	; 0x2d
 800b36a:	700b      	strb	r3, [r1, #0]
 800b36c:	2101      	movs	r1, #1
 800b36e:	4240      	negs	r0, r0
 800b370:	4421      	add	r1, r4
 800b372:	f000 f853 	bl	800b41c <__utoa>
 800b376:	e7f1      	b.n	800b35c <__itoa+0x10>
 800b378:	2100      	movs	r1, #0
 800b37a:	e7f9      	b.n	800b370 <__itoa+0x24>

0800b37c <itoa>:
 800b37c:	f7ff bfe6 	b.w	800b34c <__itoa>

0800b380 <memcpy>:
 800b380:	440a      	add	r2, r1
 800b382:	4291      	cmp	r1, r2
 800b384:	f100 33ff 	add.w	r3, r0, #4294967295
 800b388:	d100      	bne.n	800b38c <memcpy+0xc>
 800b38a:	4770      	bx	lr
 800b38c:	b510      	push	{r4, lr}
 800b38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b392:	4291      	cmp	r1, r2
 800b394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b398:	d1f9      	bne.n	800b38e <memcpy+0xe>
 800b39a:	bd10      	pop	{r4, pc}

0800b39c <memset>:
 800b39c:	4603      	mov	r3, r0
 800b39e:	4402      	add	r2, r0
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d100      	bne.n	800b3a6 <memset+0xa>
 800b3a4:	4770      	bx	lr
 800b3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3aa:	e7f9      	b.n	800b3a0 <memset+0x4>

0800b3ac <iprintf>:
 800b3ac:	b40f      	push	{r0, r1, r2, r3}
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <iprintf+0x2c>)
 800b3b0:	b513      	push	{r0, r1, r4, lr}
 800b3b2:	681c      	ldr	r4, [r3, #0]
 800b3b4:	b124      	cbz	r4, 800b3c0 <iprintf+0x14>
 800b3b6:	69a3      	ldr	r3, [r4, #24]
 800b3b8:	b913      	cbnz	r3, 800b3c0 <iprintf+0x14>
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 f8c8 	bl	800b550 <__sinit>
 800b3c0:	ab05      	add	r3, sp, #20
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	9a04      	ldr	r2, [sp, #16]
 800b3c6:	68a1      	ldr	r1, [r4, #8]
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	f000 fb3f 	bl	800ba4c <_vfiprintf_r>
 800b3ce:	b002      	add	sp, #8
 800b3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d4:	b004      	add	sp, #16
 800b3d6:	4770      	bx	lr
 800b3d8:	2000018c 	.word	0x2000018c

0800b3dc <siprintf>:
 800b3dc:	b40e      	push	{r1, r2, r3}
 800b3de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3e2:	b500      	push	{lr}
 800b3e4:	b09c      	sub	sp, #112	; 0x70
 800b3e6:	ab1d      	add	r3, sp, #116	; 0x74
 800b3e8:	9002      	str	r0, [sp, #8]
 800b3ea:	9006      	str	r0, [sp, #24]
 800b3ec:	9107      	str	r1, [sp, #28]
 800b3ee:	9104      	str	r1, [sp, #16]
 800b3f0:	4808      	ldr	r0, [pc, #32]	; (800b414 <siprintf+0x38>)
 800b3f2:	4909      	ldr	r1, [pc, #36]	; (800b418 <siprintf+0x3c>)
 800b3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f8:	9105      	str	r1, [sp, #20]
 800b3fa:	6800      	ldr	r0, [r0, #0]
 800b3fc:	a902      	add	r1, sp, #8
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	f000 f9fc 	bl	800b7fc <_svfiprintf_r>
 800b404:	2200      	movs	r2, #0
 800b406:	9b02      	ldr	r3, [sp, #8]
 800b408:	701a      	strb	r2, [r3, #0]
 800b40a:	b01c      	add	sp, #112	; 0x70
 800b40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b410:	b003      	add	sp, #12
 800b412:	4770      	bx	lr
 800b414:	2000018c 	.word	0x2000018c
 800b418:	ffff0208 	.word	0xffff0208

0800b41c <__utoa>:
 800b41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41e:	b08b      	sub	sp, #44	; 0x2c
 800b420:	4605      	mov	r5, r0
 800b422:	460b      	mov	r3, r1
 800b424:	466e      	mov	r6, sp
 800b426:	4c1d      	ldr	r4, [pc, #116]	; (800b49c <__utoa+0x80>)
 800b428:	f104 0c20 	add.w	ip, r4, #32
 800b42c:	4637      	mov	r7, r6
 800b42e:	6820      	ldr	r0, [r4, #0]
 800b430:	6861      	ldr	r1, [r4, #4]
 800b432:	3408      	adds	r4, #8
 800b434:	c703      	stmia	r7!, {r0, r1}
 800b436:	4564      	cmp	r4, ip
 800b438:	463e      	mov	r6, r7
 800b43a:	d1f7      	bne.n	800b42c <__utoa+0x10>
 800b43c:	7921      	ldrb	r1, [r4, #4]
 800b43e:	6820      	ldr	r0, [r4, #0]
 800b440:	7139      	strb	r1, [r7, #4]
 800b442:	1e91      	subs	r1, r2, #2
 800b444:	2922      	cmp	r1, #34	; 0x22
 800b446:	6038      	str	r0, [r7, #0]
 800b448:	f04f 0100 	mov.w	r1, #0
 800b44c:	d904      	bls.n	800b458 <__utoa+0x3c>
 800b44e:	7019      	strb	r1, [r3, #0]
 800b450:	460b      	mov	r3, r1
 800b452:	4618      	mov	r0, r3
 800b454:	b00b      	add	sp, #44	; 0x2c
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b458:	1e58      	subs	r0, r3, #1
 800b45a:	4684      	mov	ip, r0
 800b45c:	fbb5 f7f2 	udiv	r7, r5, r2
 800b460:	fb02 5617 	mls	r6, r2, r7, r5
 800b464:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b468:	4476      	add	r6, lr
 800b46a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b46e:	460c      	mov	r4, r1
 800b470:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b474:	462e      	mov	r6, r5
 800b476:	42b2      	cmp	r2, r6
 800b478:	463d      	mov	r5, r7
 800b47a:	f101 0101 	add.w	r1, r1, #1
 800b47e:	d9ed      	bls.n	800b45c <__utoa+0x40>
 800b480:	2200      	movs	r2, #0
 800b482:	545a      	strb	r2, [r3, r1]
 800b484:	1919      	adds	r1, r3, r4
 800b486:	1aa5      	subs	r5, r4, r2
 800b488:	42aa      	cmp	r2, r5
 800b48a:	dae2      	bge.n	800b452 <__utoa+0x36>
 800b48c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b490:	780e      	ldrb	r6, [r1, #0]
 800b492:	3201      	adds	r2, #1
 800b494:	7006      	strb	r6, [r0, #0]
 800b496:	f801 5901 	strb.w	r5, [r1], #-1
 800b49a:	e7f4      	b.n	800b486 <__utoa+0x6a>
 800b49c:	0800c8b4 	.word	0x0800c8b4

0800b4a0 <std>:
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ae:	6083      	str	r3, [r0, #8]
 800b4b0:	8181      	strh	r1, [r0, #12]
 800b4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b4:	81c2      	strh	r2, [r0, #14]
 800b4b6:	6183      	str	r3, [r0, #24]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	2208      	movs	r2, #8
 800b4bc:	305c      	adds	r0, #92	; 0x5c
 800b4be:	f7ff ff6d 	bl	800b39c <memset>
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <std+0x38>)
 800b4c4:	6224      	str	r4, [r4, #32]
 800b4c6:	6263      	str	r3, [r4, #36]	; 0x24
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <std+0x3c>)
 800b4ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4cc:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <std+0x40>)
 800b4ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4d0:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <std+0x44>)
 800b4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d4:	bd10      	pop	{r4, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0800bff9 	.word	0x0800bff9
 800b4dc:	0800c01b 	.word	0x0800c01b
 800b4e0:	0800c053 	.word	0x0800c053
 800b4e4:	0800c077 	.word	0x0800c077

0800b4e8 <_cleanup_r>:
 800b4e8:	4901      	ldr	r1, [pc, #4]	; (800b4f0 <_cleanup_r+0x8>)
 800b4ea:	f000 b8af 	b.w	800b64c <_fwalk_reent>
 800b4ee:	bf00      	nop
 800b4f0:	0800c351 	.word	0x0800c351

0800b4f4 <__sfmoreglue>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	2568      	movs	r5, #104	; 0x68
 800b4f8:	1e4a      	subs	r2, r1, #1
 800b4fa:	4355      	muls	r5, r2
 800b4fc:	460e      	mov	r6, r1
 800b4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b502:	f000 f8c5 	bl	800b690 <_malloc_r>
 800b506:	4604      	mov	r4, r0
 800b508:	b140      	cbz	r0, 800b51c <__sfmoreglue+0x28>
 800b50a:	2100      	movs	r1, #0
 800b50c:	e9c0 1600 	strd	r1, r6, [r0]
 800b510:	300c      	adds	r0, #12
 800b512:	60a0      	str	r0, [r4, #8]
 800b514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b518:	f7ff ff40 	bl	800b39c <memset>
 800b51c:	4620      	mov	r0, r4
 800b51e:	bd70      	pop	{r4, r5, r6, pc}

0800b520 <__sfp_lock_acquire>:
 800b520:	4801      	ldr	r0, [pc, #4]	; (800b528 <__sfp_lock_acquire+0x8>)
 800b522:	f000 b8b3 	b.w	800b68c <__retarget_lock_acquire_recursive>
 800b526:	bf00      	nop
 800b528:	200015b0 	.word	0x200015b0

0800b52c <__sfp_lock_release>:
 800b52c:	4801      	ldr	r0, [pc, #4]	; (800b534 <__sfp_lock_release+0x8>)
 800b52e:	f000 b8ae 	b.w	800b68e <__retarget_lock_release_recursive>
 800b532:	bf00      	nop
 800b534:	200015b0 	.word	0x200015b0

0800b538 <__sinit_lock_acquire>:
 800b538:	4801      	ldr	r0, [pc, #4]	; (800b540 <__sinit_lock_acquire+0x8>)
 800b53a:	f000 b8a7 	b.w	800b68c <__retarget_lock_acquire_recursive>
 800b53e:	bf00      	nop
 800b540:	200015ab 	.word	0x200015ab

0800b544 <__sinit_lock_release>:
 800b544:	4801      	ldr	r0, [pc, #4]	; (800b54c <__sinit_lock_release+0x8>)
 800b546:	f000 b8a2 	b.w	800b68e <__retarget_lock_release_recursive>
 800b54a:	bf00      	nop
 800b54c:	200015ab 	.word	0x200015ab

0800b550 <__sinit>:
 800b550:	b510      	push	{r4, lr}
 800b552:	4604      	mov	r4, r0
 800b554:	f7ff fff0 	bl	800b538 <__sinit_lock_acquire>
 800b558:	69a3      	ldr	r3, [r4, #24]
 800b55a:	b11b      	cbz	r3, 800b564 <__sinit+0x14>
 800b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b560:	f7ff bff0 	b.w	800b544 <__sinit_lock_release>
 800b564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b568:	6523      	str	r3, [r4, #80]	; 0x50
 800b56a:	4b13      	ldr	r3, [pc, #76]	; (800b5b8 <__sinit+0x68>)
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <__sinit+0x6c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	62a2      	str	r2, [r4, #40]	; 0x28
 800b572:	42a3      	cmp	r3, r4
 800b574:	bf08      	it	eq
 800b576:	2301      	moveq	r3, #1
 800b578:	4620      	mov	r0, r4
 800b57a:	bf08      	it	eq
 800b57c:	61a3      	streq	r3, [r4, #24]
 800b57e:	f000 f81f 	bl	800b5c0 <__sfp>
 800b582:	6060      	str	r0, [r4, #4]
 800b584:	4620      	mov	r0, r4
 800b586:	f000 f81b 	bl	800b5c0 <__sfp>
 800b58a:	60a0      	str	r0, [r4, #8]
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 f817 	bl	800b5c0 <__sfp>
 800b592:	2200      	movs	r2, #0
 800b594:	2104      	movs	r1, #4
 800b596:	60e0      	str	r0, [r4, #12]
 800b598:	6860      	ldr	r0, [r4, #4]
 800b59a:	f7ff ff81 	bl	800b4a0 <std>
 800b59e:	2201      	movs	r2, #1
 800b5a0:	2109      	movs	r1, #9
 800b5a2:	68a0      	ldr	r0, [r4, #8]
 800b5a4:	f7ff ff7c 	bl	800b4a0 <std>
 800b5a8:	2202      	movs	r2, #2
 800b5aa:	2112      	movs	r1, #18
 800b5ac:	68e0      	ldr	r0, [r4, #12]
 800b5ae:	f7ff ff77 	bl	800b4a0 <std>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	61a3      	str	r3, [r4, #24]
 800b5b6:	e7d1      	b.n	800b55c <__sinit+0xc>
 800b5b8:	0800c8b0 	.word	0x0800c8b0
 800b5bc:	0800b4e9 	.word	0x0800b4e9

0800b5c0 <__sfp>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	4607      	mov	r7, r0
 800b5c4:	f7ff ffac 	bl	800b520 <__sfp_lock_acquire>
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <__sfp+0x84>)
 800b5ca:	681e      	ldr	r6, [r3, #0]
 800b5cc:	69b3      	ldr	r3, [r6, #24]
 800b5ce:	b913      	cbnz	r3, 800b5d6 <__sfp+0x16>
 800b5d0:	4630      	mov	r0, r6
 800b5d2:	f7ff ffbd 	bl	800b550 <__sinit>
 800b5d6:	3648      	adds	r6, #72	; 0x48
 800b5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	d503      	bpl.n	800b5e8 <__sfp+0x28>
 800b5e0:	6833      	ldr	r3, [r6, #0]
 800b5e2:	b30b      	cbz	r3, 800b628 <__sfp+0x68>
 800b5e4:	6836      	ldr	r6, [r6, #0]
 800b5e6:	e7f7      	b.n	800b5d8 <__sfp+0x18>
 800b5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5ec:	b9d5      	cbnz	r5, 800b624 <__sfp+0x64>
 800b5ee:	4b16      	ldr	r3, [pc, #88]	; (800b648 <__sfp+0x88>)
 800b5f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5f4:	60e3      	str	r3, [r4, #12]
 800b5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5f8:	f000 f847 	bl	800b68a <__retarget_lock_init_recursive>
 800b5fc:	f7ff ff96 	bl	800b52c <__sfp_lock_release>
 800b600:	2208      	movs	r2, #8
 800b602:	4629      	mov	r1, r5
 800b604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b60c:	6025      	str	r5, [r4, #0]
 800b60e:	61a5      	str	r5, [r4, #24]
 800b610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b614:	f7ff fec2 	bl	800b39c <memset>
 800b618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b620:	4620      	mov	r0, r4
 800b622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b624:	3468      	adds	r4, #104	; 0x68
 800b626:	e7d9      	b.n	800b5dc <__sfp+0x1c>
 800b628:	2104      	movs	r1, #4
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7ff ff62 	bl	800b4f4 <__sfmoreglue>
 800b630:	4604      	mov	r4, r0
 800b632:	6030      	str	r0, [r6, #0]
 800b634:	2800      	cmp	r0, #0
 800b636:	d1d5      	bne.n	800b5e4 <__sfp+0x24>
 800b638:	f7ff ff78 	bl	800b52c <__sfp_lock_release>
 800b63c:	230c      	movs	r3, #12
 800b63e:	603b      	str	r3, [r7, #0]
 800b640:	e7ee      	b.n	800b620 <__sfp+0x60>
 800b642:	bf00      	nop
 800b644:	0800c8b0 	.word	0x0800c8b0
 800b648:	ffff0001 	.word	0xffff0001

0800b64c <_fwalk_reent>:
 800b64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b650:	4606      	mov	r6, r0
 800b652:	4688      	mov	r8, r1
 800b654:	2700      	movs	r7, #0
 800b656:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b65a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b65e:	f1b9 0901 	subs.w	r9, r9, #1
 800b662:	d505      	bpl.n	800b670 <_fwalk_reent+0x24>
 800b664:	6824      	ldr	r4, [r4, #0]
 800b666:	2c00      	cmp	r4, #0
 800b668:	d1f7      	bne.n	800b65a <_fwalk_reent+0xe>
 800b66a:	4638      	mov	r0, r7
 800b66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b670:	89ab      	ldrh	r3, [r5, #12]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d907      	bls.n	800b686 <_fwalk_reent+0x3a>
 800b676:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b67a:	3301      	adds	r3, #1
 800b67c:	d003      	beq.n	800b686 <_fwalk_reent+0x3a>
 800b67e:	4629      	mov	r1, r5
 800b680:	4630      	mov	r0, r6
 800b682:	47c0      	blx	r8
 800b684:	4307      	orrs	r7, r0
 800b686:	3568      	adds	r5, #104	; 0x68
 800b688:	e7e9      	b.n	800b65e <_fwalk_reent+0x12>

0800b68a <__retarget_lock_init_recursive>:
 800b68a:	4770      	bx	lr

0800b68c <__retarget_lock_acquire_recursive>:
 800b68c:	4770      	bx	lr

0800b68e <__retarget_lock_release_recursive>:
 800b68e:	4770      	bx	lr

0800b690 <_malloc_r>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	1ccd      	adds	r5, r1, #3
 800b694:	f025 0503 	bic.w	r5, r5, #3
 800b698:	3508      	adds	r5, #8
 800b69a:	2d0c      	cmp	r5, #12
 800b69c:	bf38      	it	cc
 800b69e:	250c      	movcc	r5, #12
 800b6a0:	2d00      	cmp	r5, #0
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	db01      	blt.n	800b6aa <_malloc_r+0x1a>
 800b6a6:	42a9      	cmp	r1, r5
 800b6a8:	d903      	bls.n	800b6b2 <_malloc_r+0x22>
 800b6aa:	230c      	movs	r3, #12
 800b6ac:	6033      	str	r3, [r6, #0]
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b2:	f000 ff27 	bl	800c504 <__malloc_lock>
 800b6b6:	4921      	ldr	r1, [pc, #132]	; (800b73c <_malloc_r+0xac>)
 800b6b8:	680a      	ldr	r2, [r1, #0]
 800b6ba:	4614      	mov	r4, r2
 800b6bc:	b99c      	cbnz	r4, 800b6e6 <_malloc_r+0x56>
 800b6be:	4f20      	ldr	r7, [pc, #128]	; (800b740 <_malloc_r+0xb0>)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	b923      	cbnz	r3, 800b6ce <_malloc_r+0x3e>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f000 fc86 	bl	800bfd8 <_sbrk_r>
 800b6cc:	6038      	str	r0, [r7, #0]
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f000 fc81 	bl	800bfd8 <_sbrk_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d123      	bne.n	800b722 <_malloc_r+0x92>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	4630      	mov	r0, r6
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	f000 ff16 	bl	800c510 <__malloc_unlock>
 800b6e4:	e7e3      	b.n	800b6ae <_malloc_r+0x1e>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	1b5b      	subs	r3, r3, r5
 800b6ea:	d417      	bmi.n	800b71c <_malloc_r+0x8c>
 800b6ec:	2b0b      	cmp	r3, #11
 800b6ee:	d903      	bls.n	800b6f8 <_malloc_r+0x68>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	441c      	add	r4, r3
 800b6f4:	6025      	str	r5, [r4, #0]
 800b6f6:	e004      	b.n	800b702 <_malloc_r+0x72>
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	42a2      	cmp	r2, r4
 800b6fc:	bf0c      	ite	eq
 800b6fe:	600b      	streq	r3, [r1, #0]
 800b700:	6053      	strne	r3, [r2, #4]
 800b702:	4630      	mov	r0, r6
 800b704:	f000 ff04 	bl	800c510 <__malloc_unlock>
 800b708:	f104 000b 	add.w	r0, r4, #11
 800b70c:	1d23      	adds	r3, r4, #4
 800b70e:	f020 0007 	bic.w	r0, r0, #7
 800b712:	1ac2      	subs	r2, r0, r3
 800b714:	d0cc      	beq.n	800b6b0 <_malloc_r+0x20>
 800b716:	1a1b      	subs	r3, r3, r0
 800b718:	50a3      	str	r3, [r4, r2]
 800b71a:	e7c9      	b.n	800b6b0 <_malloc_r+0x20>
 800b71c:	4622      	mov	r2, r4
 800b71e:	6864      	ldr	r4, [r4, #4]
 800b720:	e7cc      	b.n	800b6bc <_malloc_r+0x2c>
 800b722:	1cc4      	adds	r4, r0, #3
 800b724:	f024 0403 	bic.w	r4, r4, #3
 800b728:	42a0      	cmp	r0, r4
 800b72a:	d0e3      	beq.n	800b6f4 <_malloc_r+0x64>
 800b72c:	1a21      	subs	r1, r4, r0
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 fc52 	bl	800bfd8 <_sbrk_r>
 800b734:	3001      	adds	r0, #1
 800b736:	d1dd      	bne.n	800b6f4 <_malloc_r+0x64>
 800b738:	e7cf      	b.n	800b6da <_malloc_r+0x4a>
 800b73a:	bf00      	nop
 800b73c:	200004ac 	.word	0x200004ac
 800b740:	200004b0 	.word	0x200004b0

0800b744 <__ssputs_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	688e      	ldr	r6, [r1, #8]
 800b74a:	4682      	mov	sl, r0
 800b74c:	429e      	cmp	r6, r3
 800b74e:	460c      	mov	r4, r1
 800b750:	4690      	mov	r8, r2
 800b752:	461f      	mov	r7, r3
 800b754:	d838      	bhi.n	800b7c8 <__ssputs_r+0x84>
 800b756:	898a      	ldrh	r2, [r1, #12]
 800b758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b75c:	d032      	beq.n	800b7c4 <__ssputs_r+0x80>
 800b75e:	6825      	ldr	r5, [r4, #0]
 800b760:	6909      	ldr	r1, [r1, #16]
 800b762:	3301      	adds	r3, #1
 800b764:	eba5 0901 	sub.w	r9, r5, r1
 800b768:	6965      	ldr	r5, [r4, #20]
 800b76a:	444b      	add	r3, r9
 800b76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b770:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b774:	106d      	asrs	r5, r5, #1
 800b776:	429d      	cmp	r5, r3
 800b778:	bf38      	it	cc
 800b77a:	461d      	movcc	r5, r3
 800b77c:	0553      	lsls	r3, r2, #21
 800b77e:	d531      	bpl.n	800b7e4 <__ssputs_r+0xa0>
 800b780:	4629      	mov	r1, r5
 800b782:	f7ff ff85 	bl	800b690 <_malloc_r>
 800b786:	4606      	mov	r6, r0
 800b788:	b950      	cbnz	r0, 800b7a0 <__ssputs_r+0x5c>
 800b78a:	230c      	movs	r3, #12
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	f8ca 3000 	str.w	r3, [sl]
 800b794:	89a3      	ldrh	r3, [r4, #12]
 800b796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b79a:	81a3      	strh	r3, [r4, #12]
 800b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a0:	464a      	mov	r2, r9
 800b7a2:	6921      	ldr	r1, [r4, #16]
 800b7a4:	f7ff fdec 	bl	800b380 <memcpy>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	444e      	add	r6, r9
 800b7b8:	6026      	str	r6, [r4, #0]
 800b7ba:	463e      	mov	r6, r7
 800b7bc:	6165      	str	r5, [r4, #20]
 800b7be:	eba5 0509 	sub.w	r5, r5, r9
 800b7c2:	60a5      	str	r5, [r4, #8]
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	d900      	bls.n	800b7ca <__ssputs_r+0x86>
 800b7c8:	463e      	mov	r6, r7
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4641      	mov	r1, r8
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	f000 fe7e 	bl	800c4d0 <memmove>
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	6822      	ldr	r2, [r4, #0]
 800b7d8:	1b9b      	subs	r3, r3, r6
 800b7da:	4432      	add	r2, r6
 800b7dc:	2000      	movs	r0, #0
 800b7de:	60a3      	str	r3, [r4, #8]
 800b7e0:	6022      	str	r2, [r4, #0]
 800b7e2:	e7db      	b.n	800b79c <__ssputs_r+0x58>
 800b7e4:	462a      	mov	r2, r5
 800b7e6:	f000 fee5 	bl	800c5b4 <_realloc_r>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d1e1      	bne.n	800b7b4 <__ssputs_r+0x70>
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	6921      	ldr	r1, [r4, #16]
 800b7f4:	f000 fe92 	bl	800c51c <_free_r>
 800b7f8:	e7c7      	b.n	800b78a <__ssputs_r+0x46>
	...

0800b7fc <_svfiprintf_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4698      	mov	r8, r3
 800b802:	898b      	ldrh	r3, [r1, #12]
 800b804:	4607      	mov	r7, r0
 800b806:	061b      	lsls	r3, r3, #24
 800b808:	460d      	mov	r5, r1
 800b80a:	4614      	mov	r4, r2
 800b80c:	b09d      	sub	sp, #116	; 0x74
 800b80e:	d50e      	bpl.n	800b82e <_svfiprintf_r+0x32>
 800b810:	690b      	ldr	r3, [r1, #16]
 800b812:	b963      	cbnz	r3, 800b82e <_svfiprintf_r+0x32>
 800b814:	2140      	movs	r1, #64	; 0x40
 800b816:	f7ff ff3b 	bl	800b690 <_malloc_r>
 800b81a:	6028      	str	r0, [r5, #0]
 800b81c:	6128      	str	r0, [r5, #16]
 800b81e:	b920      	cbnz	r0, 800b82a <_svfiprintf_r+0x2e>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e0d1      	b.n	800b9ce <_svfiprintf_r+0x1d2>
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	616b      	str	r3, [r5, #20]
 800b82e:	2300      	movs	r3, #0
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	2320      	movs	r3, #32
 800b834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b838:	2330      	movs	r3, #48	; 0x30
 800b83a:	f04f 0901 	mov.w	r9, #1
 800b83e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b9e8 <_svfiprintf_r+0x1ec>
 800b846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b84a:	4623      	mov	r3, r4
 800b84c:	469a      	mov	sl, r3
 800b84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b852:	b10a      	cbz	r2, 800b858 <_svfiprintf_r+0x5c>
 800b854:	2a25      	cmp	r2, #37	; 0x25
 800b856:	d1f9      	bne.n	800b84c <_svfiprintf_r+0x50>
 800b858:	ebba 0b04 	subs.w	fp, sl, r4
 800b85c:	d00b      	beq.n	800b876 <_svfiprintf_r+0x7a>
 800b85e:	465b      	mov	r3, fp
 800b860:	4622      	mov	r2, r4
 800b862:	4629      	mov	r1, r5
 800b864:	4638      	mov	r0, r7
 800b866:	f7ff ff6d 	bl	800b744 <__ssputs_r>
 800b86a:	3001      	adds	r0, #1
 800b86c:	f000 80aa 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b872:	445a      	add	r2, fp
 800b874:	9209      	str	r2, [sp, #36]	; 0x24
 800b876:	f89a 3000 	ldrb.w	r3, [sl]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80a2 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b880:	2300      	movs	r3, #0
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88a:	f10a 0a01 	add.w	sl, sl, #1
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b896:	931a      	str	r3, [sp, #104]	; 0x68
 800b898:	4654      	mov	r4, sl
 800b89a:	2205      	movs	r2, #5
 800b89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a0:	4851      	ldr	r0, [pc, #324]	; (800b9e8 <_svfiprintf_r+0x1ec>)
 800b8a2:	f000 fe07 	bl	800c4b4 <memchr>
 800b8a6:	9a04      	ldr	r2, [sp, #16]
 800b8a8:	b9d8      	cbnz	r0, 800b8e2 <_svfiprintf_r+0xe6>
 800b8aa:	06d0      	lsls	r0, r2, #27
 800b8ac:	bf44      	itt	mi
 800b8ae:	2320      	movmi	r3, #32
 800b8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b4:	0711      	lsls	r1, r2, #28
 800b8b6:	bf44      	itt	mi
 800b8b8:	232b      	movmi	r3, #43	; 0x2b
 800b8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8be:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c4:	d015      	beq.n	800b8f2 <_svfiprintf_r+0xf6>
 800b8c6:	4654      	mov	r4, sl
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	f04f 0c0a 	mov.w	ip, #10
 800b8ce:	9a07      	ldr	r2, [sp, #28]
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d6:	3b30      	subs	r3, #48	; 0x30
 800b8d8:	2b09      	cmp	r3, #9
 800b8da:	d94e      	bls.n	800b97a <_svfiprintf_r+0x17e>
 800b8dc:	b1b0      	cbz	r0, 800b90c <_svfiprintf_r+0x110>
 800b8de:	9207      	str	r2, [sp, #28]
 800b8e0:	e014      	b.n	800b90c <_svfiprintf_r+0x110>
 800b8e2:	eba0 0308 	sub.w	r3, r0, r8
 800b8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	46a2      	mov	sl, r4
 800b8ee:	9304      	str	r3, [sp, #16]
 800b8f0:	e7d2      	b.n	800b898 <_svfiprintf_r+0x9c>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	9103      	str	r1, [sp, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfbb      	ittet	lt
 800b8fe:	425b      	neglt	r3, r3
 800b900:	f042 0202 	orrlt.w	r2, r2, #2
 800b904:	9307      	strge	r3, [sp, #28]
 800b906:	9307      	strlt	r3, [sp, #28]
 800b908:	bfb8      	it	lt
 800b90a:	9204      	strlt	r2, [sp, #16]
 800b90c:	7823      	ldrb	r3, [r4, #0]
 800b90e:	2b2e      	cmp	r3, #46	; 0x2e
 800b910:	d10c      	bne.n	800b92c <_svfiprintf_r+0x130>
 800b912:	7863      	ldrb	r3, [r4, #1]
 800b914:	2b2a      	cmp	r3, #42	; 0x2a
 800b916:	d135      	bne.n	800b984 <_svfiprintf_r+0x188>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	3402      	adds	r4, #2
 800b91c:	1d1a      	adds	r2, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9203      	str	r2, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfb8      	it	lt
 800b926:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9f8 <_svfiprintf_r+0x1fc>
 800b930:	2203      	movs	r2, #3
 800b932:	4650      	mov	r0, sl
 800b934:	7821      	ldrb	r1, [r4, #0]
 800b936:	f000 fdbd 	bl	800c4b4 <memchr>
 800b93a:	b140      	cbz	r0, 800b94e <_svfiprintf_r+0x152>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	eba0 000a 	sub.w	r0, r0, sl
 800b942:	fa03 f000 	lsl.w	r0, r3, r0
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	3401      	adds	r4, #1
 800b94a:	4303      	orrs	r3, r0
 800b94c:	9304      	str	r3, [sp, #16]
 800b94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b952:	2206      	movs	r2, #6
 800b954:	4825      	ldr	r0, [pc, #148]	; (800b9ec <_svfiprintf_r+0x1f0>)
 800b956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95a:	f000 fdab 	bl	800c4b4 <memchr>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d038      	beq.n	800b9d4 <_svfiprintf_r+0x1d8>
 800b962:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <_svfiprintf_r+0x1f4>)
 800b964:	bb1b      	cbnz	r3, 800b9ae <_svfiprintf_r+0x1b2>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	3307      	adds	r3, #7
 800b96a:	f023 0307 	bic.w	r3, r3, #7
 800b96e:	3308      	adds	r3, #8
 800b970:	9303      	str	r3, [sp, #12]
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	4433      	add	r3, r6
 800b976:	9309      	str	r3, [sp, #36]	; 0x24
 800b978:	e767      	b.n	800b84a <_svfiprintf_r+0x4e>
 800b97a:	460c      	mov	r4, r1
 800b97c:	2001      	movs	r0, #1
 800b97e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b982:	e7a5      	b.n	800b8d0 <_svfiprintf_r+0xd4>
 800b984:	2300      	movs	r3, #0
 800b986:	f04f 0c0a 	mov.w	ip, #10
 800b98a:	4619      	mov	r1, r3
 800b98c:	3401      	adds	r4, #1
 800b98e:	9305      	str	r3, [sp, #20]
 800b990:	4620      	mov	r0, r4
 800b992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b996:	3a30      	subs	r2, #48	; 0x30
 800b998:	2a09      	cmp	r2, #9
 800b99a:	d903      	bls.n	800b9a4 <_svfiprintf_r+0x1a8>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0c5      	beq.n	800b92c <_svfiprintf_r+0x130>
 800b9a0:	9105      	str	r1, [sp, #20]
 800b9a2:	e7c3      	b.n	800b92c <_svfiprintf_r+0x130>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ac:	e7f0      	b.n	800b990 <_svfiprintf_r+0x194>
 800b9ae:	ab03      	add	r3, sp, #12
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	f3af 8000 	nop.w
 800b9be:	1c42      	adds	r2, r0, #1
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	d1d6      	bne.n	800b972 <_svfiprintf_r+0x176>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	065b      	lsls	r3, r3, #25
 800b9c8:	f53f af2c 	bmi.w	800b824 <_svfiprintf_r+0x28>
 800b9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ce:	b01d      	add	sp, #116	; 0x74
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	ab03      	add	r3, sp, #12
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	462a      	mov	r2, r5
 800b9da:	4638      	mov	r0, r7
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	f000 f9d4 	bl	800bd8c <_printf_i>
 800b9e4:	e7eb      	b.n	800b9be <_svfiprintf_r+0x1c2>
 800b9e6:	bf00      	nop
 800b9e8:	0800c93c 	.word	0x0800c93c
 800b9ec:	0800c946 	.word	0x0800c946
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	0800b745 	.word	0x0800b745
 800b9f8:	0800c942 	.word	0x0800c942

0800b9fc <__sfputc_r>:
 800b9fc:	6893      	ldr	r3, [r2, #8]
 800b9fe:	b410      	push	{r4}
 800ba00:	3b01      	subs	r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	6093      	str	r3, [r2, #8]
 800ba06:	da07      	bge.n	800ba18 <__sfputc_r+0x1c>
 800ba08:	6994      	ldr	r4, [r2, #24]
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	db01      	blt.n	800ba12 <__sfputc_r+0x16>
 800ba0e:	290a      	cmp	r1, #10
 800ba10:	d102      	bne.n	800ba18 <__sfputc_r+0x1c>
 800ba12:	bc10      	pop	{r4}
 800ba14:	f000 bb34 	b.w	800c080 <__swbuf_r>
 800ba18:	6813      	ldr	r3, [r2, #0]
 800ba1a:	1c58      	adds	r0, r3, #1
 800ba1c:	6010      	str	r0, [r2, #0]
 800ba1e:	7019      	strb	r1, [r3, #0]
 800ba20:	4608      	mov	r0, r1
 800ba22:	bc10      	pop	{r4}
 800ba24:	4770      	bx	lr

0800ba26 <__sfputs_r>:
 800ba26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	4614      	mov	r4, r2
 800ba2e:	18d5      	adds	r5, r2, r3
 800ba30:	42ac      	cmp	r4, r5
 800ba32:	d101      	bne.n	800ba38 <__sfputs_r+0x12>
 800ba34:	2000      	movs	r0, #0
 800ba36:	e007      	b.n	800ba48 <__sfputs_r+0x22>
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	f7ff ffdc 	bl	800b9fc <__sfputc_r>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d1f3      	bne.n	800ba30 <__sfputs_r+0xa>
 800ba48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba4c <_vfiprintf_r>:
 800ba4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba50:	460d      	mov	r5, r1
 800ba52:	4614      	mov	r4, r2
 800ba54:	4698      	mov	r8, r3
 800ba56:	4606      	mov	r6, r0
 800ba58:	b09d      	sub	sp, #116	; 0x74
 800ba5a:	b118      	cbz	r0, 800ba64 <_vfiprintf_r+0x18>
 800ba5c:	6983      	ldr	r3, [r0, #24]
 800ba5e:	b90b      	cbnz	r3, 800ba64 <_vfiprintf_r+0x18>
 800ba60:	f7ff fd76 	bl	800b550 <__sinit>
 800ba64:	4b89      	ldr	r3, [pc, #548]	; (800bc8c <_vfiprintf_r+0x240>)
 800ba66:	429d      	cmp	r5, r3
 800ba68:	d11b      	bne.n	800baa2 <_vfiprintf_r+0x56>
 800ba6a:	6875      	ldr	r5, [r6, #4]
 800ba6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6e:	07d9      	lsls	r1, r3, #31
 800ba70:	d405      	bmi.n	800ba7e <_vfiprintf_r+0x32>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	059a      	lsls	r2, r3, #22
 800ba76:	d402      	bmi.n	800ba7e <_vfiprintf_r+0x32>
 800ba78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7a:	f7ff fe07 	bl	800b68c <__retarget_lock_acquire_recursive>
 800ba7e:	89ab      	ldrh	r3, [r5, #12]
 800ba80:	071b      	lsls	r3, r3, #28
 800ba82:	d501      	bpl.n	800ba88 <_vfiprintf_r+0x3c>
 800ba84:	692b      	ldr	r3, [r5, #16]
 800ba86:	b9eb      	cbnz	r3, 800bac4 <_vfiprintf_r+0x78>
 800ba88:	4629      	mov	r1, r5
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	f000 fb5c 	bl	800c148 <__swsetup_r>
 800ba90:	b1c0      	cbz	r0, 800bac4 <_vfiprintf_r+0x78>
 800ba92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba94:	07dc      	lsls	r4, r3, #31
 800ba96:	d50e      	bpl.n	800bab6 <_vfiprintf_r+0x6a>
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b01d      	add	sp, #116	; 0x74
 800ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa2:	4b7b      	ldr	r3, [pc, #492]	; (800bc90 <_vfiprintf_r+0x244>)
 800baa4:	429d      	cmp	r5, r3
 800baa6:	d101      	bne.n	800baac <_vfiprintf_r+0x60>
 800baa8:	68b5      	ldr	r5, [r6, #8]
 800baaa:	e7df      	b.n	800ba6c <_vfiprintf_r+0x20>
 800baac:	4b79      	ldr	r3, [pc, #484]	; (800bc94 <_vfiprintf_r+0x248>)
 800baae:	429d      	cmp	r5, r3
 800bab0:	bf08      	it	eq
 800bab2:	68f5      	ldreq	r5, [r6, #12]
 800bab4:	e7da      	b.n	800ba6c <_vfiprintf_r+0x20>
 800bab6:	89ab      	ldrh	r3, [r5, #12]
 800bab8:	0598      	lsls	r0, r3, #22
 800baba:	d4ed      	bmi.n	800ba98 <_vfiprintf_r+0x4c>
 800babc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800babe:	f7ff fde6 	bl	800b68e <__retarget_lock_release_recursive>
 800bac2:	e7e9      	b.n	800ba98 <_vfiprintf_r+0x4c>
 800bac4:	2300      	movs	r3, #0
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	2320      	movs	r3, #32
 800baca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bace:	2330      	movs	r3, #48	; 0x30
 800bad0:	f04f 0901 	mov.w	r9, #1
 800bad4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bad8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bc98 <_vfiprintf_r+0x24c>
 800badc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bae0:	4623      	mov	r3, r4
 800bae2:	469a      	mov	sl, r3
 800bae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bae8:	b10a      	cbz	r2, 800baee <_vfiprintf_r+0xa2>
 800baea:	2a25      	cmp	r2, #37	; 0x25
 800baec:	d1f9      	bne.n	800bae2 <_vfiprintf_r+0x96>
 800baee:	ebba 0b04 	subs.w	fp, sl, r4
 800baf2:	d00b      	beq.n	800bb0c <_vfiprintf_r+0xc0>
 800baf4:	465b      	mov	r3, fp
 800baf6:	4622      	mov	r2, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7ff ff93 	bl	800ba26 <__sfputs_r>
 800bb00:	3001      	adds	r0, #1
 800bb02:	f000 80aa 	beq.w	800bc5a <_vfiprintf_r+0x20e>
 800bb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb08:	445a      	add	r2, fp
 800bb0a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 80a2 	beq.w	800bc5a <_vfiprintf_r+0x20e>
 800bb16:	2300      	movs	r3, #0
 800bb18:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb20:	f10a 0a01 	add.w	sl, sl, #1
 800bb24:	9304      	str	r3, [sp, #16]
 800bb26:	9307      	str	r3, [sp, #28]
 800bb28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb2c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb2e:	4654      	mov	r4, sl
 800bb30:	2205      	movs	r2, #5
 800bb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb36:	4858      	ldr	r0, [pc, #352]	; (800bc98 <_vfiprintf_r+0x24c>)
 800bb38:	f000 fcbc 	bl	800c4b4 <memchr>
 800bb3c:	9a04      	ldr	r2, [sp, #16]
 800bb3e:	b9d8      	cbnz	r0, 800bb78 <_vfiprintf_r+0x12c>
 800bb40:	06d1      	lsls	r1, r2, #27
 800bb42:	bf44      	itt	mi
 800bb44:	2320      	movmi	r3, #32
 800bb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb4a:	0713      	lsls	r3, r2, #28
 800bb4c:	bf44      	itt	mi
 800bb4e:	232b      	movmi	r3, #43	; 0x2b
 800bb50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb54:	f89a 3000 	ldrb.w	r3, [sl]
 800bb58:	2b2a      	cmp	r3, #42	; 0x2a
 800bb5a:	d015      	beq.n	800bb88 <_vfiprintf_r+0x13c>
 800bb5c:	4654      	mov	r4, sl
 800bb5e:	2000      	movs	r0, #0
 800bb60:	f04f 0c0a 	mov.w	ip, #10
 800bb64:	9a07      	ldr	r2, [sp, #28]
 800bb66:	4621      	mov	r1, r4
 800bb68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb6c:	3b30      	subs	r3, #48	; 0x30
 800bb6e:	2b09      	cmp	r3, #9
 800bb70:	d94e      	bls.n	800bc10 <_vfiprintf_r+0x1c4>
 800bb72:	b1b0      	cbz	r0, 800bba2 <_vfiprintf_r+0x156>
 800bb74:	9207      	str	r2, [sp, #28]
 800bb76:	e014      	b.n	800bba2 <_vfiprintf_r+0x156>
 800bb78:	eba0 0308 	sub.w	r3, r0, r8
 800bb7c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb80:	4313      	orrs	r3, r2
 800bb82:	46a2      	mov	sl, r4
 800bb84:	9304      	str	r3, [sp, #16]
 800bb86:	e7d2      	b.n	800bb2e <_vfiprintf_r+0xe2>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	1d19      	adds	r1, r3, #4
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	9103      	str	r1, [sp, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	bfbb      	ittet	lt
 800bb94:	425b      	neglt	r3, r3
 800bb96:	f042 0202 	orrlt.w	r2, r2, #2
 800bb9a:	9307      	strge	r3, [sp, #28]
 800bb9c:	9307      	strlt	r3, [sp, #28]
 800bb9e:	bfb8      	it	lt
 800bba0:	9204      	strlt	r2, [sp, #16]
 800bba2:	7823      	ldrb	r3, [r4, #0]
 800bba4:	2b2e      	cmp	r3, #46	; 0x2e
 800bba6:	d10c      	bne.n	800bbc2 <_vfiprintf_r+0x176>
 800bba8:	7863      	ldrb	r3, [r4, #1]
 800bbaa:	2b2a      	cmp	r3, #42	; 0x2a
 800bbac:	d135      	bne.n	800bc1a <_vfiprintf_r+0x1ce>
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	3402      	adds	r4, #2
 800bbb2:	1d1a      	adds	r2, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	9203      	str	r2, [sp, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bfb8      	it	lt
 800bbbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbc0:	9305      	str	r3, [sp, #20]
 800bbc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bca8 <_vfiprintf_r+0x25c>
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	4650      	mov	r0, sl
 800bbca:	7821      	ldrb	r1, [r4, #0]
 800bbcc:	f000 fc72 	bl	800c4b4 <memchr>
 800bbd0:	b140      	cbz	r0, 800bbe4 <_vfiprintf_r+0x198>
 800bbd2:	2340      	movs	r3, #64	; 0x40
 800bbd4:	eba0 000a 	sub.w	r0, r0, sl
 800bbd8:	fa03 f000 	lsl.w	r0, r3, r0
 800bbdc:	9b04      	ldr	r3, [sp, #16]
 800bbde:	3401      	adds	r4, #1
 800bbe0:	4303      	orrs	r3, r0
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe8:	2206      	movs	r2, #6
 800bbea:	482c      	ldr	r0, [pc, #176]	; (800bc9c <_vfiprintf_r+0x250>)
 800bbec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbf0:	f000 fc60 	bl	800c4b4 <memchr>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d03f      	beq.n	800bc78 <_vfiprintf_r+0x22c>
 800bbf8:	4b29      	ldr	r3, [pc, #164]	; (800bca0 <_vfiprintf_r+0x254>)
 800bbfa:	bb1b      	cbnz	r3, 800bc44 <_vfiprintf_r+0x1f8>
 800bbfc:	9b03      	ldr	r3, [sp, #12]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	f023 0307 	bic.w	r3, r3, #7
 800bc04:	3308      	adds	r3, #8
 800bc06:	9303      	str	r3, [sp, #12]
 800bc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc0a:	443b      	add	r3, r7
 800bc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0e:	e767      	b.n	800bae0 <_vfiprintf_r+0x94>
 800bc10:	460c      	mov	r4, r1
 800bc12:	2001      	movs	r0, #1
 800bc14:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc18:	e7a5      	b.n	800bb66 <_vfiprintf_r+0x11a>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f04f 0c0a 	mov.w	ip, #10
 800bc20:	4619      	mov	r1, r3
 800bc22:	3401      	adds	r4, #1
 800bc24:	9305      	str	r3, [sp, #20]
 800bc26:	4620      	mov	r0, r4
 800bc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc2c:	3a30      	subs	r2, #48	; 0x30
 800bc2e:	2a09      	cmp	r2, #9
 800bc30:	d903      	bls.n	800bc3a <_vfiprintf_r+0x1ee>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0c5      	beq.n	800bbc2 <_vfiprintf_r+0x176>
 800bc36:	9105      	str	r1, [sp, #20]
 800bc38:	e7c3      	b.n	800bbc2 <_vfiprintf_r+0x176>
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc42:	e7f0      	b.n	800bc26 <_vfiprintf_r+0x1da>
 800bc44:	ab03      	add	r3, sp, #12
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	462a      	mov	r2, r5
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <_vfiprintf_r+0x258>)
 800bc4e:	a904      	add	r1, sp, #16
 800bc50:	f3af 8000 	nop.w
 800bc54:	4607      	mov	r7, r0
 800bc56:	1c78      	adds	r0, r7, #1
 800bc58:	d1d6      	bne.n	800bc08 <_vfiprintf_r+0x1bc>
 800bc5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc5c:	07d9      	lsls	r1, r3, #31
 800bc5e:	d405      	bmi.n	800bc6c <_vfiprintf_r+0x220>
 800bc60:	89ab      	ldrh	r3, [r5, #12]
 800bc62:	059a      	lsls	r2, r3, #22
 800bc64:	d402      	bmi.n	800bc6c <_vfiprintf_r+0x220>
 800bc66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc68:	f7ff fd11 	bl	800b68e <__retarget_lock_release_recursive>
 800bc6c:	89ab      	ldrh	r3, [r5, #12]
 800bc6e:	065b      	lsls	r3, r3, #25
 800bc70:	f53f af12 	bmi.w	800ba98 <_vfiprintf_r+0x4c>
 800bc74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc76:	e711      	b.n	800ba9c <_vfiprintf_r+0x50>
 800bc78:	ab03      	add	r3, sp, #12
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	4630      	mov	r0, r6
 800bc80:	4b08      	ldr	r3, [pc, #32]	; (800bca4 <_vfiprintf_r+0x258>)
 800bc82:	a904      	add	r1, sp, #16
 800bc84:	f000 f882 	bl	800bd8c <_printf_i>
 800bc88:	e7e4      	b.n	800bc54 <_vfiprintf_r+0x208>
 800bc8a:	bf00      	nop
 800bc8c:	0800c8fc 	.word	0x0800c8fc
 800bc90:	0800c91c 	.word	0x0800c91c
 800bc94:	0800c8dc 	.word	0x0800c8dc
 800bc98:	0800c93c 	.word	0x0800c93c
 800bc9c:	0800c946 	.word	0x0800c946
 800bca0:	00000000 	.word	0x00000000
 800bca4:	0800ba27 	.word	0x0800ba27
 800bca8:	0800c942 	.word	0x0800c942

0800bcac <_printf_common>:
 800bcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb0:	4616      	mov	r6, r2
 800bcb2:	4699      	mov	r9, r3
 800bcb4:	688a      	ldr	r2, [r1, #8]
 800bcb6:	690b      	ldr	r3, [r1, #16]
 800bcb8:	4607      	mov	r7, r0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bfb8      	it	lt
 800bcbe:	4613      	movlt	r3, r2
 800bcc0:	6033      	str	r3, [r6, #0]
 800bcc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bccc:	b10a      	cbz	r2, 800bcd2 <_printf_common+0x26>
 800bcce:	3301      	adds	r3, #1
 800bcd0:	6033      	str	r3, [r6, #0]
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	0699      	lsls	r1, r3, #26
 800bcd6:	bf42      	ittt	mi
 800bcd8:	6833      	ldrmi	r3, [r6, #0]
 800bcda:	3302      	addmi	r3, #2
 800bcdc:	6033      	strmi	r3, [r6, #0]
 800bcde:	6825      	ldr	r5, [r4, #0]
 800bce0:	f015 0506 	ands.w	r5, r5, #6
 800bce4:	d106      	bne.n	800bcf4 <_printf_common+0x48>
 800bce6:	f104 0a19 	add.w	sl, r4, #25
 800bcea:	68e3      	ldr	r3, [r4, #12]
 800bcec:	6832      	ldr	r2, [r6, #0]
 800bcee:	1a9b      	subs	r3, r3, r2
 800bcf0:	42ab      	cmp	r3, r5
 800bcf2:	dc28      	bgt.n	800bd46 <_printf_common+0x9a>
 800bcf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bcf8:	1e13      	subs	r3, r2, #0
 800bcfa:	6822      	ldr	r2, [r4, #0]
 800bcfc:	bf18      	it	ne
 800bcfe:	2301      	movne	r3, #1
 800bd00:	0692      	lsls	r2, r2, #26
 800bd02:	d42d      	bmi.n	800bd60 <_printf_common+0xb4>
 800bd04:	4649      	mov	r1, r9
 800bd06:	4638      	mov	r0, r7
 800bd08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd0c:	47c0      	blx	r8
 800bd0e:	3001      	adds	r0, #1
 800bd10:	d020      	beq.n	800bd54 <_printf_common+0xa8>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	68e5      	ldr	r5, [r4, #12]
 800bd16:	f003 0306 	and.w	r3, r3, #6
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	bf18      	it	ne
 800bd1e:	2500      	movne	r5, #0
 800bd20:	6832      	ldr	r2, [r6, #0]
 800bd22:	f04f 0600 	mov.w	r6, #0
 800bd26:	68a3      	ldr	r3, [r4, #8]
 800bd28:	bf08      	it	eq
 800bd2a:	1aad      	subeq	r5, r5, r2
 800bd2c:	6922      	ldr	r2, [r4, #16]
 800bd2e:	bf08      	it	eq
 800bd30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfc4      	itt	gt
 800bd38:	1a9b      	subgt	r3, r3, r2
 800bd3a:	18ed      	addgt	r5, r5, r3
 800bd3c:	341a      	adds	r4, #26
 800bd3e:	42b5      	cmp	r5, r6
 800bd40:	d11a      	bne.n	800bd78 <_printf_common+0xcc>
 800bd42:	2000      	movs	r0, #0
 800bd44:	e008      	b.n	800bd58 <_printf_common+0xac>
 800bd46:	2301      	movs	r3, #1
 800bd48:	4652      	mov	r2, sl
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	47c0      	blx	r8
 800bd50:	3001      	adds	r0, #1
 800bd52:	d103      	bne.n	800bd5c <_printf_common+0xb0>
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5c:	3501      	adds	r5, #1
 800bd5e:	e7c4      	b.n	800bcea <_printf_common+0x3e>
 800bd60:	2030      	movs	r0, #48	; 0x30
 800bd62:	18e1      	adds	r1, r4, r3
 800bd64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd6e:	4422      	add	r2, r4
 800bd70:	3302      	adds	r3, #2
 800bd72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd76:	e7c5      	b.n	800bd04 <_printf_common+0x58>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4638      	mov	r0, r7
 800bd80:	47c0      	blx	r8
 800bd82:	3001      	adds	r0, #1
 800bd84:	d0e6      	beq.n	800bd54 <_printf_common+0xa8>
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7d9      	b.n	800bd3e <_printf_common+0x92>
	...

0800bd8c <_printf_i>:
 800bd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	460c      	mov	r4, r1
 800bd92:	7e27      	ldrb	r7, [r4, #24]
 800bd94:	4691      	mov	r9, r2
 800bd96:	2f78      	cmp	r7, #120	; 0x78
 800bd98:	4680      	mov	r8, r0
 800bd9a:	469a      	mov	sl, r3
 800bd9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bda2:	d807      	bhi.n	800bdb4 <_printf_i+0x28>
 800bda4:	2f62      	cmp	r7, #98	; 0x62
 800bda6:	d80a      	bhi.n	800bdbe <_printf_i+0x32>
 800bda8:	2f00      	cmp	r7, #0
 800bdaa:	f000 80d9 	beq.w	800bf60 <_printf_i+0x1d4>
 800bdae:	2f58      	cmp	r7, #88	; 0x58
 800bdb0:	f000 80a4 	beq.w	800befc <_printf_i+0x170>
 800bdb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdbc:	e03a      	b.n	800be34 <_printf_i+0xa8>
 800bdbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdc2:	2b15      	cmp	r3, #21
 800bdc4:	d8f6      	bhi.n	800bdb4 <_printf_i+0x28>
 800bdc6:	a001      	add	r0, pc, #4	; (adr r0, 800bdcc <_printf_i+0x40>)
 800bdc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bdcc:	0800be25 	.word	0x0800be25
 800bdd0:	0800be39 	.word	0x0800be39
 800bdd4:	0800bdb5 	.word	0x0800bdb5
 800bdd8:	0800bdb5 	.word	0x0800bdb5
 800bddc:	0800bdb5 	.word	0x0800bdb5
 800bde0:	0800bdb5 	.word	0x0800bdb5
 800bde4:	0800be39 	.word	0x0800be39
 800bde8:	0800bdb5 	.word	0x0800bdb5
 800bdec:	0800bdb5 	.word	0x0800bdb5
 800bdf0:	0800bdb5 	.word	0x0800bdb5
 800bdf4:	0800bdb5 	.word	0x0800bdb5
 800bdf8:	0800bf47 	.word	0x0800bf47
 800bdfc:	0800be69 	.word	0x0800be69
 800be00:	0800bf29 	.word	0x0800bf29
 800be04:	0800bdb5 	.word	0x0800bdb5
 800be08:	0800bdb5 	.word	0x0800bdb5
 800be0c:	0800bf69 	.word	0x0800bf69
 800be10:	0800bdb5 	.word	0x0800bdb5
 800be14:	0800be69 	.word	0x0800be69
 800be18:	0800bdb5 	.word	0x0800bdb5
 800be1c:	0800bdb5 	.word	0x0800bdb5
 800be20:	0800bf31 	.word	0x0800bf31
 800be24:	680b      	ldr	r3, [r1, #0]
 800be26:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be2a:	1d1a      	adds	r2, r3, #4
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	600a      	str	r2, [r1, #0]
 800be30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be34:	2301      	movs	r3, #1
 800be36:	e0a4      	b.n	800bf82 <_printf_i+0x1f6>
 800be38:	6825      	ldr	r5, [r4, #0]
 800be3a:	6808      	ldr	r0, [r1, #0]
 800be3c:	062e      	lsls	r6, r5, #24
 800be3e:	f100 0304 	add.w	r3, r0, #4
 800be42:	d50a      	bpl.n	800be5a <_printf_i+0xce>
 800be44:	6805      	ldr	r5, [r0, #0]
 800be46:	600b      	str	r3, [r1, #0]
 800be48:	2d00      	cmp	r5, #0
 800be4a:	da03      	bge.n	800be54 <_printf_i+0xc8>
 800be4c:	232d      	movs	r3, #45	; 0x2d
 800be4e:	426d      	negs	r5, r5
 800be50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be54:	230a      	movs	r3, #10
 800be56:	485e      	ldr	r0, [pc, #376]	; (800bfd0 <_printf_i+0x244>)
 800be58:	e019      	b.n	800be8e <_printf_i+0x102>
 800be5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be5e:	6805      	ldr	r5, [r0, #0]
 800be60:	600b      	str	r3, [r1, #0]
 800be62:	bf18      	it	ne
 800be64:	b22d      	sxthne	r5, r5
 800be66:	e7ef      	b.n	800be48 <_printf_i+0xbc>
 800be68:	680b      	ldr	r3, [r1, #0]
 800be6a:	6825      	ldr	r5, [r4, #0]
 800be6c:	1d18      	adds	r0, r3, #4
 800be6e:	6008      	str	r0, [r1, #0]
 800be70:	0628      	lsls	r0, r5, #24
 800be72:	d501      	bpl.n	800be78 <_printf_i+0xec>
 800be74:	681d      	ldr	r5, [r3, #0]
 800be76:	e002      	b.n	800be7e <_printf_i+0xf2>
 800be78:	0669      	lsls	r1, r5, #25
 800be7a:	d5fb      	bpl.n	800be74 <_printf_i+0xe8>
 800be7c:	881d      	ldrh	r5, [r3, #0]
 800be7e:	2f6f      	cmp	r7, #111	; 0x6f
 800be80:	bf0c      	ite	eq
 800be82:	2308      	moveq	r3, #8
 800be84:	230a      	movne	r3, #10
 800be86:	4852      	ldr	r0, [pc, #328]	; (800bfd0 <_printf_i+0x244>)
 800be88:	2100      	movs	r1, #0
 800be8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be8e:	6866      	ldr	r6, [r4, #4]
 800be90:	2e00      	cmp	r6, #0
 800be92:	bfa8      	it	ge
 800be94:	6821      	ldrge	r1, [r4, #0]
 800be96:	60a6      	str	r6, [r4, #8]
 800be98:	bfa4      	itt	ge
 800be9a:	f021 0104 	bicge.w	r1, r1, #4
 800be9e:	6021      	strge	r1, [r4, #0]
 800bea0:	b90d      	cbnz	r5, 800bea6 <_printf_i+0x11a>
 800bea2:	2e00      	cmp	r6, #0
 800bea4:	d04d      	beq.n	800bf42 <_printf_i+0x1b6>
 800bea6:	4616      	mov	r6, r2
 800bea8:	fbb5 f1f3 	udiv	r1, r5, r3
 800beac:	fb03 5711 	mls	r7, r3, r1, r5
 800beb0:	5dc7      	ldrb	r7, [r0, r7]
 800beb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800beb6:	462f      	mov	r7, r5
 800beb8:	42bb      	cmp	r3, r7
 800beba:	460d      	mov	r5, r1
 800bebc:	d9f4      	bls.n	800bea8 <_printf_i+0x11c>
 800bebe:	2b08      	cmp	r3, #8
 800bec0:	d10b      	bne.n	800beda <_printf_i+0x14e>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	07df      	lsls	r7, r3, #31
 800bec6:	d508      	bpl.n	800beda <_printf_i+0x14e>
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	6861      	ldr	r1, [r4, #4]
 800becc:	4299      	cmp	r1, r3
 800bece:	bfde      	ittt	le
 800bed0:	2330      	movle	r3, #48	; 0x30
 800bed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800beda:	1b92      	subs	r2, r2, r6
 800bedc:	6122      	str	r2, [r4, #16]
 800bede:	464b      	mov	r3, r9
 800bee0:	4621      	mov	r1, r4
 800bee2:	4640      	mov	r0, r8
 800bee4:	f8cd a000 	str.w	sl, [sp]
 800bee8:	aa03      	add	r2, sp, #12
 800beea:	f7ff fedf 	bl	800bcac <_printf_common>
 800beee:	3001      	adds	r0, #1
 800bef0:	d14c      	bne.n	800bf8c <_printf_i+0x200>
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	b004      	add	sp, #16
 800bef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800befc:	4834      	ldr	r0, [pc, #208]	; (800bfd0 <_printf_i+0x244>)
 800befe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf02:	680e      	ldr	r6, [r1, #0]
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf0a:	061f      	lsls	r7, r3, #24
 800bf0c:	600e      	str	r6, [r1, #0]
 800bf0e:	d514      	bpl.n	800bf3a <_printf_i+0x1ae>
 800bf10:	07d9      	lsls	r1, r3, #31
 800bf12:	bf44      	itt	mi
 800bf14:	f043 0320 	orrmi.w	r3, r3, #32
 800bf18:	6023      	strmi	r3, [r4, #0]
 800bf1a:	b91d      	cbnz	r5, 800bf24 <_printf_i+0x198>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	f023 0320 	bic.w	r3, r3, #32
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	2310      	movs	r3, #16
 800bf26:	e7af      	b.n	800be88 <_printf_i+0xfc>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	f043 0320 	orr.w	r3, r3, #32
 800bf2e:	6023      	str	r3, [r4, #0]
 800bf30:	2378      	movs	r3, #120	; 0x78
 800bf32:	4828      	ldr	r0, [pc, #160]	; (800bfd4 <_printf_i+0x248>)
 800bf34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf38:	e7e3      	b.n	800bf02 <_printf_i+0x176>
 800bf3a:	065e      	lsls	r6, r3, #25
 800bf3c:	bf48      	it	mi
 800bf3e:	b2ad      	uxthmi	r5, r5
 800bf40:	e7e6      	b.n	800bf10 <_printf_i+0x184>
 800bf42:	4616      	mov	r6, r2
 800bf44:	e7bb      	b.n	800bebe <_printf_i+0x132>
 800bf46:	680b      	ldr	r3, [r1, #0]
 800bf48:	6826      	ldr	r6, [r4, #0]
 800bf4a:	1d1d      	adds	r5, r3, #4
 800bf4c:	6960      	ldr	r0, [r4, #20]
 800bf4e:	600d      	str	r5, [r1, #0]
 800bf50:	0635      	lsls	r5, r6, #24
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	d501      	bpl.n	800bf5a <_printf_i+0x1ce>
 800bf56:	6018      	str	r0, [r3, #0]
 800bf58:	e002      	b.n	800bf60 <_printf_i+0x1d4>
 800bf5a:	0671      	lsls	r1, r6, #25
 800bf5c:	d5fb      	bpl.n	800bf56 <_printf_i+0x1ca>
 800bf5e:	8018      	strh	r0, [r3, #0]
 800bf60:	2300      	movs	r3, #0
 800bf62:	4616      	mov	r6, r2
 800bf64:	6123      	str	r3, [r4, #16]
 800bf66:	e7ba      	b.n	800bede <_printf_i+0x152>
 800bf68:	680b      	ldr	r3, [r1, #0]
 800bf6a:	1d1a      	adds	r2, r3, #4
 800bf6c:	600a      	str	r2, [r1, #0]
 800bf6e:	681e      	ldr	r6, [r3, #0]
 800bf70:	2100      	movs	r1, #0
 800bf72:	4630      	mov	r0, r6
 800bf74:	6862      	ldr	r2, [r4, #4]
 800bf76:	f000 fa9d 	bl	800c4b4 <memchr>
 800bf7a:	b108      	cbz	r0, 800bf80 <_printf_i+0x1f4>
 800bf7c:	1b80      	subs	r0, r0, r6
 800bf7e:	6060      	str	r0, [r4, #4]
 800bf80:	6863      	ldr	r3, [r4, #4]
 800bf82:	6123      	str	r3, [r4, #16]
 800bf84:	2300      	movs	r3, #0
 800bf86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8a:	e7a8      	b.n	800bede <_printf_i+0x152>
 800bf8c:	4632      	mov	r2, r6
 800bf8e:	4649      	mov	r1, r9
 800bf90:	4640      	mov	r0, r8
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	47d0      	blx	sl
 800bf96:	3001      	adds	r0, #1
 800bf98:	d0ab      	beq.n	800bef2 <_printf_i+0x166>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	079b      	lsls	r3, r3, #30
 800bf9e:	d413      	bmi.n	800bfc8 <_printf_i+0x23c>
 800bfa0:	68e0      	ldr	r0, [r4, #12]
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	bfb8      	it	lt
 800bfa8:	4618      	movlt	r0, r3
 800bfaa:	e7a4      	b.n	800bef6 <_printf_i+0x16a>
 800bfac:	2301      	movs	r3, #1
 800bfae:	4632      	mov	r2, r6
 800bfb0:	4649      	mov	r1, r9
 800bfb2:	4640      	mov	r0, r8
 800bfb4:	47d0      	blx	sl
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d09b      	beq.n	800bef2 <_printf_i+0x166>
 800bfba:	3501      	adds	r5, #1
 800bfbc:	68e3      	ldr	r3, [r4, #12]
 800bfbe:	9903      	ldr	r1, [sp, #12]
 800bfc0:	1a5b      	subs	r3, r3, r1
 800bfc2:	42ab      	cmp	r3, r5
 800bfc4:	dcf2      	bgt.n	800bfac <_printf_i+0x220>
 800bfc6:	e7eb      	b.n	800bfa0 <_printf_i+0x214>
 800bfc8:	2500      	movs	r5, #0
 800bfca:	f104 0619 	add.w	r6, r4, #25
 800bfce:	e7f5      	b.n	800bfbc <_printf_i+0x230>
 800bfd0:	0800c94d 	.word	0x0800c94d
 800bfd4:	0800c95e 	.word	0x0800c95e

0800bfd8 <_sbrk_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	2300      	movs	r3, #0
 800bfdc:	4d05      	ldr	r5, [pc, #20]	; (800bff4 <_sbrk_r+0x1c>)
 800bfde:	4604      	mov	r4, r0
 800bfe0:	4608      	mov	r0, r1
 800bfe2:	602b      	str	r3, [r5, #0]
 800bfe4:	f7f6 fd44 	bl	8002a70 <_sbrk>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_sbrk_r+0x1a>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_sbrk_r+0x1a>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	200015b4 	.word	0x200015b4

0800bff8 <__sread>:
 800bff8:	b510      	push	{r4, lr}
 800bffa:	460c      	mov	r4, r1
 800bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c000:	f000 fafe 	bl	800c600 <_read_r>
 800c004:	2800      	cmp	r0, #0
 800c006:	bfab      	itete	ge
 800c008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c00a:	89a3      	ldrhlt	r3, [r4, #12]
 800c00c:	181b      	addge	r3, r3, r0
 800c00e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c012:	bfac      	ite	ge
 800c014:	6563      	strge	r3, [r4, #84]	; 0x54
 800c016:	81a3      	strhlt	r3, [r4, #12]
 800c018:	bd10      	pop	{r4, pc}

0800c01a <__swrite>:
 800c01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01e:	461f      	mov	r7, r3
 800c020:	898b      	ldrh	r3, [r1, #12]
 800c022:	4605      	mov	r5, r0
 800c024:	05db      	lsls	r3, r3, #23
 800c026:	460c      	mov	r4, r1
 800c028:	4616      	mov	r6, r2
 800c02a:	d505      	bpl.n	800c038 <__swrite+0x1e>
 800c02c:	2302      	movs	r3, #2
 800c02e:	2200      	movs	r2, #0
 800c030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c034:	f000 f9c8 	bl	800c3c8 <_lseek_r>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	4632      	mov	r2, r6
 800c03c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	4628      	mov	r0, r5
 800c044:	463b      	mov	r3, r7
 800c046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	f000 b869 	b.w	800c124 <_write_r>

0800c052 <__sseek>:
 800c052:	b510      	push	{r4, lr}
 800c054:	460c      	mov	r4, r1
 800c056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05a:	f000 f9b5 	bl	800c3c8 <_lseek_r>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	bf15      	itete	ne
 800c064:	6560      	strne	r0, [r4, #84]	; 0x54
 800c066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c06a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06e:	81a3      	strheq	r3, [r4, #12]
 800c070:	bf18      	it	ne
 800c072:	81a3      	strhne	r3, [r4, #12]
 800c074:	bd10      	pop	{r4, pc}

0800c076 <__sclose>:
 800c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07a:	f000 b8d3 	b.w	800c224 <_close_r>
	...

0800c080 <__swbuf_r>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	460e      	mov	r6, r1
 800c084:	4614      	mov	r4, r2
 800c086:	4605      	mov	r5, r0
 800c088:	b118      	cbz	r0, 800c092 <__swbuf_r+0x12>
 800c08a:	6983      	ldr	r3, [r0, #24]
 800c08c:	b90b      	cbnz	r3, 800c092 <__swbuf_r+0x12>
 800c08e:	f7ff fa5f 	bl	800b550 <__sinit>
 800c092:	4b21      	ldr	r3, [pc, #132]	; (800c118 <__swbuf_r+0x98>)
 800c094:	429c      	cmp	r4, r3
 800c096:	d12b      	bne.n	800c0f0 <__swbuf_r+0x70>
 800c098:	686c      	ldr	r4, [r5, #4]
 800c09a:	69a3      	ldr	r3, [r4, #24]
 800c09c:	60a3      	str	r3, [r4, #8]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	071a      	lsls	r2, r3, #28
 800c0a2:	d52f      	bpl.n	800c104 <__swbuf_r+0x84>
 800c0a4:	6923      	ldr	r3, [r4, #16]
 800c0a6:	b36b      	cbz	r3, 800c104 <__swbuf_r+0x84>
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	6820      	ldr	r0, [r4, #0]
 800c0ac:	b2f6      	uxtb	r6, r6
 800c0ae:	1ac0      	subs	r0, r0, r3
 800c0b0:	6963      	ldr	r3, [r4, #20]
 800c0b2:	4637      	mov	r7, r6
 800c0b4:	4283      	cmp	r3, r0
 800c0b6:	dc04      	bgt.n	800c0c2 <__swbuf_r+0x42>
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f948 	bl	800c350 <_fflush_r>
 800c0c0:	bb30      	cbnz	r0, 800c110 <__swbuf_r+0x90>
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	60a3      	str	r3, [r4, #8]
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	1c5a      	adds	r2, r3, #1
 800c0ce:	6022      	str	r2, [r4, #0]
 800c0d0:	701e      	strb	r6, [r3, #0]
 800c0d2:	6963      	ldr	r3, [r4, #20]
 800c0d4:	4283      	cmp	r3, r0
 800c0d6:	d004      	beq.n	800c0e2 <__swbuf_r+0x62>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	07db      	lsls	r3, r3, #31
 800c0dc:	d506      	bpl.n	800c0ec <__swbuf_r+0x6c>
 800c0de:	2e0a      	cmp	r6, #10
 800c0e0:	d104      	bne.n	800c0ec <__swbuf_r+0x6c>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f000 f933 	bl	800c350 <_fflush_r>
 800c0ea:	b988      	cbnz	r0, 800c110 <__swbuf_r+0x90>
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <__swbuf_r+0x9c>)
 800c0f2:	429c      	cmp	r4, r3
 800c0f4:	d101      	bne.n	800c0fa <__swbuf_r+0x7a>
 800c0f6:	68ac      	ldr	r4, [r5, #8]
 800c0f8:	e7cf      	b.n	800c09a <__swbuf_r+0x1a>
 800c0fa:	4b09      	ldr	r3, [pc, #36]	; (800c120 <__swbuf_r+0xa0>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	bf08      	it	eq
 800c100:	68ec      	ldreq	r4, [r5, #12]
 800c102:	e7ca      	b.n	800c09a <__swbuf_r+0x1a>
 800c104:	4621      	mov	r1, r4
 800c106:	4628      	mov	r0, r5
 800c108:	f000 f81e 	bl	800c148 <__swsetup_r>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d0cb      	beq.n	800c0a8 <__swbuf_r+0x28>
 800c110:	f04f 37ff 	mov.w	r7, #4294967295
 800c114:	e7ea      	b.n	800c0ec <__swbuf_r+0x6c>
 800c116:	bf00      	nop
 800c118:	0800c8fc 	.word	0x0800c8fc
 800c11c:	0800c91c 	.word	0x0800c91c
 800c120:	0800c8dc 	.word	0x0800c8dc

0800c124 <_write_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	2200      	movs	r2, #0
 800c12e:	4d05      	ldr	r5, [pc, #20]	; (800c144 <_write_r+0x20>)
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f7f4 fedc 	bl	8000ef0 <_write>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_write_r+0x1e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_write_r+0x1e>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	200015b4 	.word	0x200015b4

0800c148 <__swsetup_r>:
 800c148:	4b32      	ldr	r3, [pc, #200]	; (800c214 <__swsetup_r+0xcc>)
 800c14a:	b570      	push	{r4, r5, r6, lr}
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	4606      	mov	r6, r0
 800c150:	460c      	mov	r4, r1
 800c152:	b125      	cbz	r5, 800c15e <__swsetup_r+0x16>
 800c154:	69ab      	ldr	r3, [r5, #24]
 800c156:	b913      	cbnz	r3, 800c15e <__swsetup_r+0x16>
 800c158:	4628      	mov	r0, r5
 800c15a:	f7ff f9f9 	bl	800b550 <__sinit>
 800c15e:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <__swsetup_r+0xd0>)
 800c160:	429c      	cmp	r4, r3
 800c162:	d10f      	bne.n	800c184 <__swsetup_r+0x3c>
 800c164:	686c      	ldr	r4, [r5, #4]
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c16c:	0719      	lsls	r1, r3, #28
 800c16e:	d42c      	bmi.n	800c1ca <__swsetup_r+0x82>
 800c170:	06dd      	lsls	r5, r3, #27
 800c172:	d411      	bmi.n	800c198 <__swsetup_r+0x50>
 800c174:	2309      	movs	r3, #9
 800c176:	6033      	str	r3, [r6, #0]
 800c178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c17c:	f04f 30ff 	mov.w	r0, #4294967295
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	e03e      	b.n	800c202 <__swsetup_r+0xba>
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <__swsetup_r+0xd4>)
 800c186:	429c      	cmp	r4, r3
 800c188:	d101      	bne.n	800c18e <__swsetup_r+0x46>
 800c18a:	68ac      	ldr	r4, [r5, #8]
 800c18c:	e7eb      	b.n	800c166 <__swsetup_r+0x1e>
 800c18e:	4b24      	ldr	r3, [pc, #144]	; (800c220 <__swsetup_r+0xd8>)
 800c190:	429c      	cmp	r4, r3
 800c192:	bf08      	it	eq
 800c194:	68ec      	ldreq	r4, [r5, #12]
 800c196:	e7e6      	b.n	800c166 <__swsetup_r+0x1e>
 800c198:	0758      	lsls	r0, r3, #29
 800c19a:	d512      	bpl.n	800c1c2 <__swsetup_r+0x7a>
 800c19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c19e:	b141      	cbz	r1, 800c1b2 <__swsetup_r+0x6a>
 800c1a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	d002      	beq.n	800c1ae <__swsetup_r+0x66>
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f000 f9b7 	bl	800c51c <_free_r>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6063      	str	r3, [r4, #4]
 800c1be:	6923      	ldr	r3, [r4, #16]
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	f043 0308 	orr.w	r3, r3, #8
 800c1c8:	81a3      	strh	r3, [r4, #12]
 800c1ca:	6923      	ldr	r3, [r4, #16]
 800c1cc:	b94b      	cbnz	r3, 800c1e2 <__swsetup_r+0x9a>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d8:	d003      	beq.n	800c1e2 <__swsetup_r+0x9a>
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f000 f929 	bl	800c434 <__smakebuf_r>
 800c1e2:	89a0      	ldrh	r0, [r4, #12]
 800c1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1e8:	f010 0301 	ands.w	r3, r0, #1
 800c1ec:	d00a      	beq.n	800c204 <__swsetup_r+0xbc>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60a3      	str	r3, [r4, #8]
 800c1f2:	6963      	ldr	r3, [r4, #20]
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	61a3      	str	r3, [r4, #24]
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	b943      	cbnz	r3, 800c20e <__swsetup_r+0xc6>
 800c1fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c200:	d1ba      	bne.n	800c178 <__swsetup_r+0x30>
 800c202:	bd70      	pop	{r4, r5, r6, pc}
 800c204:	0781      	lsls	r1, r0, #30
 800c206:	bf58      	it	pl
 800c208:	6963      	ldrpl	r3, [r4, #20]
 800c20a:	60a3      	str	r3, [r4, #8]
 800c20c:	e7f4      	b.n	800c1f8 <__swsetup_r+0xb0>
 800c20e:	2000      	movs	r0, #0
 800c210:	e7f7      	b.n	800c202 <__swsetup_r+0xba>
 800c212:	bf00      	nop
 800c214:	2000018c 	.word	0x2000018c
 800c218:	0800c8fc 	.word	0x0800c8fc
 800c21c:	0800c91c 	.word	0x0800c91c
 800c220:	0800c8dc 	.word	0x0800c8dc

0800c224 <_close_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	2300      	movs	r3, #0
 800c228:	4d05      	ldr	r5, [pc, #20]	; (800c240 <_close_r+0x1c>)
 800c22a:	4604      	mov	r4, r0
 800c22c:	4608      	mov	r0, r1
 800c22e:	602b      	str	r3, [r5, #0]
 800c230:	f7f6 fbed 	bl	8002a0e <_close>
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d102      	bne.n	800c23e <_close_r+0x1a>
 800c238:	682b      	ldr	r3, [r5, #0]
 800c23a:	b103      	cbz	r3, 800c23e <_close_r+0x1a>
 800c23c:	6023      	str	r3, [r4, #0]
 800c23e:	bd38      	pop	{r3, r4, r5, pc}
 800c240:	200015b4 	.word	0x200015b4

0800c244 <__sflush_r>:
 800c244:	898a      	ldrh	r2, [r1, #12]
 800c246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24a:	4605      	mov	r5, r0
 800c24c:	0710      	lsls	r0, r2, #28
 800c24e:	460c      	mov	r4, r1
 800c250:	d458      	bmi.n	800c304 <__sflush_r+0xc0>
 800c252:	684b      	ldr	r3, [r1, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dc05      	bgt.n	800c264 <__sflush_r+0x20>
 800c258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dc02      	bgt.n	800c264 <__sflush_r+0x20>
 800c25e:	2000      	movs	r0, #0
 800c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c266:	2e00      	cmp	r6, #0
 800c268:	d0f9      	beq.n	800c25e <__sflush_r+0x1a>
 800c26a:	2300      	movs	r3, #0
 800c26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c270:	682f      	ldr	r7, [r5, #0]
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	d032      	beq.n	800c2dc <__sflush_r+0x98>
 800c276:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	075a      	lsls	r2, r3, #29
 800c27c:	d505      	bpl.n	800c28a <__sflush_r+0x46>
 800c27e:	6863      	ldr	r3, [r4, #4]
 800c280:	1ac0      	subs	r0, r0, r3
 800c282:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c284:	b10b      	cbz	r3, 800c28a <__sflush_r+0x46>
 800c286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c288:	1ac0      	subs	r0, r0, r3
 800c28a:	2300      	movs	r3, #0
 800c28c:	4602      	mov	r2, r0
 800c28e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c290:	4628      	mov	r0, r5
 800c292:	6a21      	ldr	r1, [r4, #32]
 800c294:	47b0      	blx	r6
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	d106      	bne.n	800c2aa <__sflush_r+0x66>
 800c29c:	6829      	ldr	r1, [r5, #0]
 800c29e:	291d      	cmp	r1, #29
 800c2a0:	d82c      	bhi.n	800c2fc <__sflush_r+0xb8>
 800c2a2:	4a2a      	ldr	r2, [pc, #168]	; (800c34c <__sflush_r+0x108>)
 800c2a4:	40ca      	lsrs	r2, r1
 800c2a6:	07d6      	lsls	r6, r2, #31
 800c2a8:	d528      	bpl.n	800c2fc <__sflush_r+0xb8>
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	6062      	str	r2, [r4, #4]
 800c2ae:	6922      	ldr	r2, [r4, #16]
 800c2b0:	04d9      	lsls	r1, r3, #19
 800c2b2:	6022      	str	r2, [r4, #0]
 800c2b4:	d504      	bpl.n	800c2c0 <__sflush_r+0x7c>
 800c2b6:	1c42      	adds	r2, r0, #1
 800c2b8:	d101      	bne.n	800c2be <__sflush_r+0x7a>
 800c2ba:	682b      	ldr	r3, [r5, #0]
 800c2bc:	b903      	cbnz	r3, 800c2c0 <__sflush_r+0x7c>
 800c2be:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c2:	602f      	str	r7, [r5, #0]
 800c2c4:	2900      	cmp	r1, #0
 800c2c6:	d0ca      	beq.n	800c25e <__sflush_r+0x1a>
 800c2c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2cc:	4299      	cmp	r1, r3
 800c2ce:	d002      	beq.n	800c2d6 <__sflush_r+0x92>
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	f000 f923 	bl	800c51c <_free_r>
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c2da:	e7c1      	b.n	800c260 <__sflush_r+0x1c>
 800c2dc:	6a21      	ldr	r1, [r4, #32]
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	1c41      	adds	r1, r0, #1
 800c2e6:	d1c7      	bne.n	800c278 <__sflush_r+0x34>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0c4      	beq.n	800c278 <__sflush_r+0x34>
 800c2ee:	2b1d      	cmp	r3, #29
 800c2f0:	d001      	beq.n	800c2f6 <__sflush_r+0xb2>
 800c2f2:	2b16      	cmp	r3, #22
 800c2f4:	d101      	bne.n	800c2fa <__sflush_r+0xb6>
 800c2f6:	602f      	str	r7, [r5, #0]
 800c2f8:	e7b1      	b.n	800c25e <__sflush_r+0x1a>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	e7ad      	b.n	800c260 <__sflush_r+0x1c>
 800c304:	690f      	ldr	r7, [r1, #16]
 800c306:	2f00      	cmp	r7, #0
 800c308:	d0a9      	beq.n	800c25e <__sflush_r+0x1a>
 800c30a:	0793      	lsls	r3, r2, #30
 800c30c:	bf18      	it	ne
 800c30e:	2300      	movne	r3, #0
 800c310:	680e      	ldr	r6, [r1, #0]
 800c312:	bf08      	it	eq
 800c314:	694b      	ldreq	r3, [r1, #20]
 800c316:	eba6 0807 	sub.w	r8, r6, r7
 800c31a:	600f      	str	r7, [r1, #0]
 800c31c:	608b      	str	r3, [r1, #8]
 800c31e:	f1b8 0f00 	cmp.w	r8, #0
 800c322:	dd9c      	ble.n	800c25e <__sflush_r+0x1a>
 800c324:	4643      	mov	r3, r8
 800c326:	463a      	mov	r2, r7
 800c328:	4628      	mov	r0, r5
 800c32a:	6a21      	ldr	r1, [r4, #32]
 800c32c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c32e:	47b0      	blx	r6
 800c330:	2800      	cmp	r0, #0
 800c332:	dc06      	bgt.n	800c342 <__sflush_r+0xfe>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f04f 30ff 	mov.w	r0, #4294967295
 800c33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	e78e      	b.n	800c260 <__sflush_r+0x1c>
 800c342:	4407      	add	r7, r0
 800c344:	eba8 0800 	sub.w	r8, r8, r0
 800c348:	e7e9      	b.n	800c31e <__sflush_r+0xda>
 800c34a:	bf00      	nop
 800c34c:	20400001 	.word	0x20400001

0800c350 <_fflush_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	690b      	ldr	r3, [r1, #16]
 800c354:	4605      	mov	r5, r0
 800c356:	460c      	mov	r4, r1
 800c358:	b913      	cbnz	r3, 800c360 <_fflush_r+0x10>
 800c35a:	2500      	movs	r5, #0
 800c35c:	4628      	mov	r0, r5
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	b118      	cbz	r0, 800c36a <_fflush_r+0x1a>
 800c362:	6983      	ldr	r3, [r0, #24]
 800c364:	b90b      	cbnz	r3, 800c36a <_fflush_r+0x1a>
 800c366:	f7ff f8f3 	bl	800b550 <__sinit>
 800c36a:	4b14      	ldr	r3, [pc, #80]	; (800c3bc <_fflush_r+0x6c>)
 800c36c:	429c      	cmp	r4, r3
 800c36e:	d11b      	bne.n	800c3a8 <_fflush_r+0x58>
 800c370:	686c      	ldr	r4, [r5, #4]
 800c372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0ef      	beq.n	800c35a <_fflush_r+0xa>
 800c37a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c37c:	07d0      	lsls	r0, r2, #31
 800c37e:	d404      	bmi.n	800c38a <_fflush_r+0x3a>
 800c380:	0599      	lsls	r1, r3, #22
 800c382:	d402      	bmi.n	800c38a <_fflush_r+0x3a>
 800c384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c386:	f7ff f981 	bl	800b68c <__retarget_lock_acquire_recursive>
 800c38a:	4628      	mov	r0, r5
 800c38c:	4621      	mov	r1, r4
 800c38e:	f7ff ff59 	bl	800c244 <__sflush_r>
 800c392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c394:	4605      	mov	r5, r0
 800c396:	07da      	lsls	r2, r3, #31
 800c398:	d4e0      	bmi.n	800c35c <_fflush_r+0xc>
 800c39a:	89a3      	ldrh	r3, [r4, #12]
 800c39c:	059b      	lsls	r3, r3, #22
 800c39e:	d4dd      	bmi.n	800c35c <_fflush_r+0xc>
 800c3a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3a2:	f7ff f974 	bl	800b68e <__retarget_lock_release_recursive>
 800c3a6:	e7d9      	b.n	800c35c <_fflush_r+0xc>
 800c3a8:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <_fflush_r+0x70>)
 800c3aa:	429c      	cmp	r4, r3
 800c3ac:	d101      	bne.n	800c3b2 <_fflush_r+0x62>
 800c3ae:	68ac      	ldr	r4, [r5, #8]
 800c3b0:	e7df      	b.n	800c372 <_fflush_r+0x22>
 800c3b2:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <_fflush_r+0x74>)
 800c3b4:	429c      	cmp	r4, r3
 800c3b6:	bf08      	it	eq
 800c3b8:	68ec      	ldreq	r4, [r5, #12]
 800c3ba:	e7da      	b.n	800c372 <_fflush_r+0x22>
 800c3bc:	0800c8fc 	.word	0x0800c8fc
 800c3c0:	0800c91c 	.word	0x0800c91c
 800c3c4:	0800c8dc 	.word	0x0800c8dc

0800c3c8 <_lseek_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4d05      	ldr	r5, [pc, #20]	; (800c3e8 <_lseek_r+0x20>)
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f6 fb3d 	bl	8002a56 <_lseek>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_lseek_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_lseek_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	200015b4 	.word	0x200015b4

0800c3ec <__swhatbuf_r>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	460e      	mov	r6, r1
 800c3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3f4:	4614      	mov	r4, r2
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	461d      	mov	r5, r3
 800c3fa:	b096      	sub	sp, #88	; 0x58
 800c3fc:	da07      	bge.n	800c40e <__swhatbuf_r+0x22>
 800c3fe:	2300      	movs	r3, #0
 800c400:	602b      	str	r3, [r5, #0]
 800c402:	89b3      	ldrh	r3, [r6, #12]
 800c404:	061a      	lsls	r2, r3, #24
 800c406:	d410      	bmi.n	800c42a <__swhatbuf_r+0x3e>
 800c408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c40c:	e00e      	b.n	800c42c <__swhatbuf_r+0x40>
 800c40e:	466a      	mov	r2, sp
 800c410:	f000 f908 	bl	800c624 <_fstat_r>
 800c414:	2800      	cmp	r0, #0
 800c416:	dbf2      	blt.n	800c3fe <__swhatbuf_r+0x12>
 800c418:	9a01      	ldr	r2, [sp, #4]
 800c41a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c41e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c422:	425a      	negs	r2, r3
 800c424:	415a      	adcs	r2, r3
 800c426:	602a      	str	r2, [r5, #0]
 800c428:	e7ee      	b.n	800c408 <__swhatbuf_r+0x1c>
 800c42a:	2340      	movs	r3, #64	; 0x40
 800c42c:	2000      	movs	r0, #0
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	b016      	add	sp, #88	; 0x58
 800c432:	bd70      	pop	{r4, r5, r6, pc}

0800c434 <__smakebuf_r>:
 800c434:	898b      	ldrh	r3, [r1, #12]
 800c436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c438:	079d      	lsls	r5, r3, #30
 800c43a:	4606      	mov	r6, r0
 800c43c:	460c      	mov	r4, r1
 800c43e:	d507      	bpl.n	800c450 <__smakebuf_r+0x1c>
 800c440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	6123      	str	r3, [r4, #16]
 800c448:	2301      	movs	r3, #1
 800c44a:	6163      	str	r3, [r4, #20]
 800c44c:	b002      	add	sp, #8
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	466a      	mov	r2, sp
 800c452:	ab01      	add	r3, sp, #4
 800c454:	f7ff ffca 	bl	800c3ec <__swhatbuf_r>
 800c458:	9900      	ldr	r1, [sp, #0]
 800c45a:	4605      	mov	r5, r0
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff f917 	bl	800b690 <_malloc_r>
 800c462:	b948      	cbnz	r0, 800c478 <__smakebuf_r+0x44>
 800c464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c468:	059a      	lsls	r2, r3, #22
 800c46a:	d4ef      	bmi.n	800c44c <__smakebuf_r+0x18>
 800c46c:	f023 0303 	bic.w	r3, r3, #3
 800c470:	f043 0302 	orr.w	r3, r3, #2
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	e7e3      	b.n	800c440 <__smakebuf_r+0xc>
 800c478:	4b0d      	ldr	r3, [pc, #52]	; (800c4b0 <__smakebuf_r+0x7c>)
 800c47a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	6020      	str	r0, [r4, #0]
 800c480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c484:	81a3      	strh	r3, [r4, #12]
 800c486:	9b00      	ldr	r3, [sp, #0]
 800c488:	6120      	str	r0, [r4, #16]
 800c48a:	6163      	str	r3, [r4, #20]
 800c48c:	9b01      	ldr	r3, [sp, #4]
 800c48e:	b15b      	cbz	r3, 800c4a8 <__smakebuf_r+0x74>
 800c490:	4630      	mov	r0, r6
 800c492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c496:	f000 f8d7 	bl	800c648 <_isatty_r>
 800c49a:	b128      	cbz	r0, 800c4a8 <__smakebuf_r+0x74>
 800c49c:	89a3      	ldrh	r3, [r4, #12]
 800c49e:	f023 0303 	bic.w	r3, r3, #3
 800c4a2:	f043 0301 	orr.w	r3, r3, #1
 800c4a6:	81a3      	strh	r3, [r4, #12]
 800c4a8:	89a0      	ldrh	r0, [r4, #12]
 800c4aa:	4305      	orrs	r5, r0
 800c4ac:	81a5      	strh	r5, [r4, #12]
 800c4ae:	e7cd      	b.n	800c44c <__smakebuf_r+0x18>
 800c4b0:	0800b4e9 	.word	0x0800b4e9

0800c4b4 <memchr>:
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	b2c9      	uxtb	r1, r1
 800c4ba:	4402      	add	r2, r0
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	4618      	mov	r0, r3
 800c4c0:	d101      	bne.n	800c4c6 <memchr+0x12>
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	e003      	b.n	800c4ce <memchr+0x1a>
 800c4c6:	7804      	ldrb	r4, [r0, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	428c      	cmp	r4, r1
 800c4cc:	d1f6      	bne.n	800c4bc <memchr+0x8>
 800c4ce:	bd10      	pop	{r4, pc}

0800c4d0 <memmove>:
 800c4d0:	4288      	cmp	r0, r1
 800c4d2:	b510      	push	{r4, lr}
 800c4d4:	eb01 0402 	add.w	r4, r1, r2
 800c4d8:	d902      	bls.n	800c4e0 <memmove+0x10>
 800c4da:	4284      	cmp	r4, r0
 800c4dc:	4623      	mov	r3, r4
 800c4de:	d807      	bhi.n	800c4f0 <memmove+0x20>
 800c4e0:	1e43      	subs	r3, r0, #1
 800c4e2:	42a1      	cmp	r1, r4
 800c4e4:	d008      	beq.n	800c4f8 <memmove+0x28>
 800c4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ee:	e7f8      	b.n	800c4e2 <memmove+0x12>
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4402      	add	r2, r0
 800c4f4:	428a      	cmp	r2, r1
 800c4f6:	d100      	bne.n	800c4fa <memmove+0x2a>
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c502:	e7f7      	b.n	800c4f4 <memmove+0x24>

0800c504 <__malloc_lock>:
 800c504:	4801      	ldr	r0, [pc, #4]	; (800c50c <__malloc_lock+0x8>)
 800c506:	f7ff b8c1 	b.w	800b68c <__retarget_lock_acquire_recursive>
 800c50a:	bf00      	nop
 800c50c:	200015ac 	.word	0x200015ac

0800c510 <__malloc_unlock>:
 800c510:	4801      	ldr	r0, [pc, #4]	; (800c518 <__malloc_unlock+0x8>)
 800c512:	f7ff b8bc 	b.w	800b68e <__retarget_lock_release_recursive>
 800c516:	bf00      	nop
 800c518:	200015ac 	.word	0x200015ac

0800c51c <_free_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4605      	mov	r5, r0
 800c520:	2900      	cmp	r1, #0
 800c522:	d043      	beq.n	800c5ac <_free_r+0x90>
 800c524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c528:	1f0c      	subs	r4, r1, #4
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	bfb8      	it	lt
 800c52e:	18e4      	addlt	r4, r4, r3
 800c530:	f7ff ffe8 	bl	800c504 <__malloc_lock>
 800c534:	4a1e      	ldr	r2, [pc, #120]	; (800c5b0 <_free_r+0x94>)
 800c536:	6813      	ldr	r3, [r2, #0]
 800c538:	4610      	mov	r0, r2
 800c53a:	b933      	cbnz	r3, 800c54a <_free_r+0x2e>
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	6014      	str	r4, [r2, #0]
 800c540:	4628      	mov	r0, r5
 800c542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c546:	f7ff bfe3 	b.w	800c510 <__malloc_unlock>
 800c54a:	42a3      	cmp	r3, r4
 800c54c:	d90a      	bls.n	800c564 <_free_r+0x48>
 800c54e:	6821      	ldr	r1, [r4, #0]
 800c550:	1862      	adds	r2, r4, r1
 800c552:	4293      	cmp	r3, r2
 800c554:	bf01      	itttt	eq
 800c556:	681a      	ldreq	r2, [r3, #0]
 800c558:	685b      	ldreq	r3, [r3, #4]
 800c55a:	1852      	addeq	r2, r2, r1
 800c55c:	6022      	streq	r2, [r4, #0]
 800c55e:	6063      	str	r3, [r4, #4]
 800c560:	6004      	str	r4, [r0, #0]
 800c562:	e7ed      	b.n	800c540 <_free_r+0x24>
 800c564:	461a      	mov	r2, r3
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	b10b      	cbz	r3, 800c56e <_free_r+0x52>
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	d9fa      	bls.n	800c564 <_free_r+0x48>
 800c56e:	6811      	ldr	r1, [r2, #0]
 800c570:	1850      	adds	r0, r2, r1
 800c572:	42a0      	cmp	r0, r4
 800c574:	d10b      	bne.n	800c58e <_free_r+0x72>
 800c576:	6820      	ldr	r0, [r4, #0]
 800c578:	4401      	add	r1, r0
 800c57a:	1850      	adds	r0, r2, r1
 800c57c:	4283      	cmp	r3, r0
 800c57e:	6011      	str	r1, [r2, #0]
 800c580:	d1de      	bne.n	800c540 <_free_r+0x24>
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	4401      	add	r1, r0
 800c588:	6011      	str	r1, [r2, #0]
 800c58a:	6053      	str	r3, [r2, #4]
 800c58c:	e7d8      	b.n	800c540 <_free_r+0x24>
 800c58e:	d902      	bls.n	800c596 <_free_r+0x7a>
 800c590:	230c      	movs	r3, #12
 800c592:	602b      	str	r3, [r5, #0]
 800c594:	e7d4      	b.n	800c540 <_free_r+0x24>
 800c596:	6820      	ldr	r0, [r4, #0]
 800c598:	1821      	adds	r1, r4, r0
 800c59a:	428b      	cmp	r3, r1
 800c59c:	bf01      	itttt	eq
 800c59e:	6819      	ldreq	r1, [r3, #0]
 800c5a0:	685b      	ldreq	r3, [r3, #4]
 800c5a2:	1809      	addeq	r1, r1, r0
 800c5a4:	6021      	streq	r1, [r4, #0]
 800c5a6:	6063      	str	r3, [r4, #4]
 800c5a8:	6054      	str	r4, [r2, #4]
 800c5aa:	e7c9      	b.n	800c540 <_free_r+0x24>
 800c5ac:	bd38      	pop	{r3, r4, r5, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200004ac 	.word	0x200004ac

0800c5b4 <_realloc_r>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	460e      	mov	r6, r1
 800c5bc:	b921      	cbnz	r1, 800c5c8 <_realloc_r+0x14>
 800c5be:	4611      	mov	r1, r2
 800c5c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c5c4:	f7ff b864 	b.w	800b690 <_malloc_r>
 800c5c8:	b922      	cbnz	r2, 800c5d4 <_realloc_r+0x20>
 800c5ca:	f7ff ffa7 	bl	800c51c <_free_r>
 800c5ce:	4625      	mov	r5, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d4:	f000 f848 	bl	800c668 <_malloc_usable_size_r>
 800c5d8:	42a0      	cmp	r0, r4
 800c5da:	d20f      	bcs.n	800c5fc <_realloc_r+0x48>
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f7ff f856 	bl	800b690 <_malloc_r>
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d0f2      	beq.n	800c5d0 <_realloc_r+0x1c>
 800c5ea:	4631      	mov	r1, r6
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	f7fe fec7 	bl	800b380 <memcpy>
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7ff ff91 	bl	800c51c <_free_r>
 800c5fa:	e7e9      	b.n	800c5d0 <_realloc_r+0x1c>
 800c5fc:	4635      	mov	r5, r6
 800c5fe:	e7e7      	b.n	800c5d0 <_realloc_r+0x1c>

0800c600 <_read_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4604      	mov	r4, r0
 800c604:	4608      	mov	r0, r1
 800c606:	4611      	mov	r1, r2
 800c608:	2200      	movs	r2, #0
 800c60a:	4d05      	ldr	r5, [pc, #20]	; (800c620 <_read_r+0x20>)
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	f7f6 f9e0 	bl	80029d4 <_read>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_read_r+0x1e>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_read_r+0x1e>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	200015b4 	.word	0x200015b4

0800c624 <_fstat_r>:
 800c624:	b538      	push	{r3, r4, r5, lr}
 800c626:	2300      	movs	r3, #0
 800c628:	4d06      	ldr	r5, [pc, #24]	; (800c644 <_fstat_r+0x20>)
 800c62a:	4604      	mov	r4, r0
 800c62c:	4608      	mov	r0, r1
 800c62e:	4611      	mov	r1, r2
 800c630:	602b      	str	r3, [r5, #0]
 800c632:	f7f6 f9f7 	bl	8002a24 <_fstat>
 800c636:	1c43      	adds	r3, r0, #1
 800c638:	d102      	bne.n	800c640 <_fstat_r+0x1c>
 800c63a:	682b      	ldr	r3, [r5, #0]
 800c63c:	b103      	cbz	r3, 800c640 <_fstat_r+0x1c>
 800c63e:	6023      	str	r3, [r4, #0]
 800c640:	bd38      	pop	{r3, r4, r5, pc}
 800c642:	bf00      	nop
 800c644:	200015b4 	.word	0x200015b4

0800c648 <_isatty_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	2300      	movs	r3, #0
 800c64c:	4d05      	ldr	r5, [pc, #20]	; (800c664 <_isatty_r+0x1c>)
 800c64e:	4604      	mov	r4, r0
 800c650:	4608      	mov	r0, r1
 800c652:	602b      	str	r3, [r5, #0]
 800c654:	f7f6 f9f5 	bl	8002a42 <_isatty>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	d102      	bne.n	800c662 <_isatty_r+0x1a>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	b103      	cbz	r3, 800c662 <_isatty_r+0x1a>
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	bd38      	pop	{r3, r4, r5, pc}
 800c664:	200015b4 	.word	0x200015b4

0800c668 <_malloc_usable_size_r>:
 800c668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c66c:	1f18      	subs	r0, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfbc      	itt	lt
 800c672:	580b      	ldrlt	r3, [r1, r0]
 800c674:	18c0      	addlt	r0, r0, r3
 800c676:	4770      	bx	lr

0800c678 <floor>:
 800c678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c67c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c680:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c684:	2e13      	cmp	r6, #19
 800c686:	4602      	mov	r2, r0
 800c688:	460b      	mov	r3, r1
 800c68a:	4607      	mov	r7, r0
 800c68c:	460c      	mov	r4, r1
 800c68e:	4605      	mov	r5, r0
 800c690:	dc34      	bgt.n	800c6fc <floor+0x84>
 800c692:	2e00      	cmp	r6, #0
 800c694:	da15      	bge.n	800c6c2 <floor+0x4a>
 800c696:	a334      	add	r3, pc, #208	; (adr r3, 800c768 <floor+0xf0>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f7f3 fd66 	bl	800016c <__adddf3>
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f7f3 ff96 	bl	80005d4 <__aeabi_dcmpgt>
 800c6a8:	b140      	cbz	r0, 800c6bc <floor+0x44>
 800c6aa:	2c00      	cmp	r4, #0
 800c6ac:	da59      	bge.n	800c762 <floor+0xea>
 800c6ae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c6b2:	ea57 0503 	orrs.w	r5, r7, r3
 800c6b6:	d001      	beq.n	800c6bc <floor+0x44>
 800c6b8:	2500      	movs	r5, #0
 800c6ba:	4c2d      	ldr	r4, [pc, #180]	; (800c770 <floor+0xf8>)
 800c6bc:	4623      	mov	r3, r4
 800c6be:	462f      	mov	r7, r5
 800c6c0:	e025      	b.n	800c70e <floor+0x96>
 800c6c2:	4a2c      	ldr	r2, [pc, #176]	; (800c774 <floor+0xfc>)
 800c6c4:	fa42 f806 	asr.w	r8, r2, r6
 800c6c8:	ea01 0208 	and.w	r2, r1, r8
 800c6cc:	4302      	orrs	r2, r0
 800c6ce:	d01e      	beq.n	800c70e <floor+0x96>
 800c6d0:	a325      	add	r3, pc, #148	; (adr r3, 800c768 <floor+0xf0>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	f7f3 fd49 	bl	800016c <__adddf3>
 800c6da:	2200      	movs	r2, #0
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f7f3 ff79 	bl	80005d4 <__aeabi_dcmpgt>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d0ea      	beq.n	800c6bc <floor+0x44>
 800c6e6:	2c00      	cmp	r4, #0
 800c6e8:	bfbe      	ittt	lt
 800c6ea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c6ee:	fa43 f606 	asrlt.w	r6, r3, r6
 800c6f2:	19a4      	addlt	r4, r4, r6
 800c6f4:	2500      	movs	r5, #0
 800c6f6:	ea24 0408 	bic.w	r4, r4, r8
 800c6fa:	e7df      	b.n	800c6bc <floor+0x44>
 800c6fc:	2e33      	cmp	r6, #51	; 0x33
 800c6fe:	dd0a      	ble.n	800c716 <floor+0x9e>
 800c700:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c704:	d103      	bne.n	800c70e <floor+0x96>
 800c706:	f7f3 fd31 	bl	800016c <__adddf3>
 800c70a:	4607      	mov	r7, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4638      	mov	r0, r7
 800c710:	4619      	mov	r1, r3
 800c712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c716:	f04f 32ff 	mov.w	r2, #4294967295
 800c71a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c71e:	fa22 f808 	lsr.w	r8, r2, r8
 800c722:	ea18 0f00 	tst.w	r8, r0
 800c726:	d0f2      	beq.n	800c70e <floor+0x96>
 800c728:	a30f      	add	r3, pc, #60	; (adr r3, 800c768 <floor+0xf0>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 fd1d 	bl	800016c <__adddf3>
 800c732:	2200      	movs	r2, #0
 800c734:	2300      	movs	r3, #0
 800c736:	f7f3 ff4d 	bl	80005d4 <__aeabi_dcmpgt>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0be      	beq.n	800c6bc <floor+0x44>
 800c73e:	2c00      	cmp	r4, #0
 800c740:	da02      	bge.n	800c748 <floor+0xd0>
 800c742:	2e14      	cmp	r6, #20
 800c744:	d103      	bne.n	800c74e <floor+0xd6>
 800c746:	3401      	adds	r4, #1
 800c748:	ea25 0508 	bic.w	r5, r5, r8
 800c74c:	e7b6      	b.n	800c6bc <floor+0x44>
 800c74e:	2301      	movs	r3, #1
 800c750:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c754:	fa03 f606 	lsl.w	r6, r3, r6
 800c758:	4435      	add	r5, r6
 800c75a:	42bd      	cmp	r5, r7
 800c75c:	bf38      	it	cc
 800c75e:	18e4      	addcc	r4, r4, r3
 800c760:	e7f2      	b.n	800c748 <floor+0xd0>
 800c762:	2500      	movs	r5, #0
 800c764:	462c      	mov	r4, r5
 800c766:	e7a9      	b.n	800c6bc <floor+0x44>
 800c768:	8800759c 	.word	0x8800759c
 800c76c:	7e37e43c 	.word	0x7e37e43c
 800c770:	bff00000 	.word	0xbff00000
 800c774:	000fffff 	.word	0x000fffff

0800c778 <_init>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	bf00      	nop
 800c77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c77e:	bc08      	pop	{r3}
 800c780:	469e      	mov	lr, r3
 800c782:	4770      	bx	lr

0800c784 <_fini>:
 800c784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c786:	bf00      	nop
 800c788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c78a:	bc08      	pop	{r3}
 800c78c:	469e      	mov	lr, r3
 800c78e:	4770      	bx	lr
=======
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	4603      	mov	r3, r0
 800c4e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4e6:	79fb      	ldrb	r3, [r7, #7]
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d817      	bhi.n	800c51c <USBD_Get_USB_Status+0x44>
 800c4ec:	a201      	add	r2, pc, #4	; (adr r2, 800c4f4 <USBD_Get_USB_Status+0x1c>)
 800c4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f2:	bf00      	nop
 800c4f4:	0800c505 	.word	0x0800c505
 800c4f8:	0800c50b 	.word	0x0800c50b
 800c4fc:	0800c511 	.word	0x0800c511
 800c500:	0800c517 	.word	0x0800c517
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	73fb      	strb	r3, [r7, #15]
    break;
 800c508:	e00b      	b.n	800c522 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c50a:	2302      	movs	r3, #2
 800c50c:	73fb      	strb	r3, [r7, #15]
    break;
 800c50e:	e008      	b.n	800c522 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c510:	2301      	movs	r3, #1
 800c512:	73fb      	strb	r3, [r7, #15]
    break;
 800c514:	e005      	b.n	800c522 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c516:	2302      	movs	r3, #2
 800c518:	73fb      	strb	r3, [r7, #15]
    break;
 800c51a:	e002      	b.n	800c522 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c51c:	2302      	movs	r3, #2
 800c51e:	73fb      	strb	r3, [r7, #15]
    break;
 800c520:	bf00      	nop
  }
  return usb_status;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop

0800c530 <__errno>:
 800c530:	4b01      	ldr	r3, [pc, #4]	; (800c538 <__errno+0x8>)
 800c532:	6818      	ldr	r0, [r3, #0]
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	20000190 	.word	0x20000190

0800c53c <__libc_init_array>:
 800c53c:	b570      	push	{r4, r5, r6, lr}
 800c53e:	2600      	movs	r6, #0
 800c540:	4d0c      	ldr	r5, [pc, #48]	; (800c574 <__libc_init_array+0x38>)
 800c542:	4c0d      	ldr	r4, [pc, #52]	; (800c578 <__libc_init_array+0x3c>)
 800c544:	1b64      	subs	r4, r4, r5
 800c546:	10a4      	asrs	r4, r4, #2
 800c548:	42a6      	cmp	r6, r4
 800c54a:	d109      	bne.n	800c560 <__libc_init_array+0x24>
 800c54c:	f001 faa8 	bl	800daa0 <_init>
 800c550:	2600      	movs	r6, #0
 800c552:	4d0a      	ldr	r5, [pc, #40]	; (800c57c <__libc_init_array+0x40>)
 800c554:	4c0a      	ldr	r4, [pc, #40]	; (800c580 <__libc_init_array+0x44>)
 800c556:	1b64      	subs	r4, r4, r5
 800c558:	10a4      	asrs	r4, r4, #2
 800c55a:	42a6      	cmp	r6, r4
 800c55c:	d105      	bne.n	800c56a <__libc_init_array+0x2e>
 800c55e:	bd70      	pop	{r4, r5, r6, pc}
 800c560:	f855 3b04 	ldr.w	r3, [r5], #4
 800c564:	4798      	blx	r3
 800c566:	3601      	adds	r6, #1
 800c568:	e7ee      	b.n	800c548 <__libc_init_array+0xc>
 800c56a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c56e:	4798      	blx	r3
 800c570:	3601      	adds	r6, #1
 800c572:	e7f2      	b.n	800c55a <__libc_init_array+0x1e>
 800c574:	0800dcd4 	.word	0x0800dcd4
 800c578:	0800dcd4 	.word	0x0800dcd4
 800c57c:	0800dcd4 	.word	0x0800dcd4
 800c580:	0800dcd8 	.word	0x0800dcd8

0800c584 <__itoa>:
 800c584:	1e93      	subs	r3, r2, #2
 800c586:	2b22      	cmp	r3, #34	; 0x22
 800c588:	b510      	push	{r4, lr}
 800c58a:	460c      	mov	r4, r1
 800c58c:	d904      	bls.n	800c598 <__itoa+0x14>
 800c58e:	2300      	movs	r3, #0
 800c590:	461c      	mov	r4, r3
 800c592:	700b      	strb	r3, [r1, #0]
 800c594:	4620      	mov	r0, r4
 800c596:	bd10      	pop	{r4, pc}
 800c598:	2a0a      	cmp	r2, #10
 800c59a:	d109      	bne.n	800c5b0 <__itoa+0x2c>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	da07      	bge.n	800c5b0 <__itoa+0x2c>
 800c5a0:	232d      	movs	r3, #45	; 0x2d
 800c5a2:	700b      	strb	r3, [r1, #0]
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	4240      	negs	r0, r0
 800c5a8:	4421      	add	r1, r4
 800c5aa:	f000 f8c9 	bl	800c740 <__utoa>
 800c5ae:	e7f1      	b.n	800c594 <__itoa+0x10>
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	e7f9      	b.n	800c5a8 <__itoa+0x24>

0800c5b4 <itoa>:
 800c5b4:	f7ff bfe6 	b.w	800c584 <__itoa>

0800c5b8 <memcpy>:
 800c5b8:	440a      	add	r2, r1
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5c0:	d100      	bne.n	800c5c4 <memcpy+0xc>
 800c5c2:	4770      	bx	lr
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ca:	4291      	cmp	r1, r2
 800c5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5d0:	d1f9      	bne.n	800c5c6 <memcpy+0xe>
 800c5d2:	bd10      	pop	{r4, pc}

0800c5d4 <memset>:
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	4402      	add	r2, r0
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d100      	bne.n	800c5de <memset+0xa>
 800c5dc:	4770      	bx	lr
 800c5de:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e2:	e7f9      	b.n	800c5d8 <memset+0x4>

0800c5e4 <iprintf>:
 800c5e4:	b40f      	push	{r0, r1, r2, r3}
 800c5e6:	4b0a      	ldr	r3, [pc, #40]	; (800c610 <iprintf+0x2c>)
 800c5e8:	b513      	push	{r0, r1, r4, lr}
 800c5ea:	681c      	ldr	r4, [r3, #0]
 800c5ec:	b124      	cbz	r4, 800c5f8 <iprintf+0x14>
 800c5ee:	69a3      	ldr	r3, [r4, #24]
 800c5f0:	b913      	cbnz	r3, 800c5f8 <iprintf+0x14>
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fac0 	bl	800cb78 <__sinit>
 800c5f8:	ab05      	add	r3, sp, #20
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	9a04      	ldr	r2, [sp, #16]
 800c5fe:	68a1      	ldr	r1, [r4, #8]
 800c600:	9301      	str	r3, [sp, #4]
 800c602:	f000 fde7 	bl	800d1d4 <_vfiprintf_r>
 800c606:	b002      	add	sp, #8
 800c608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c60c:	b004      	add	sp, #16
 800c60e:	4770      	bx	lr
 800c610:	20000190 	.word	0x20000190

0800c614 <_puts_r>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	460e      	mov	r6, r1
 800c618:	4605      	mov	r5, r0
 800c61a:	b118      	cbz	r0, 800c624 <_puts_r+0x10>
 800c61c:	6983      	ldr	r3, [r0, #24]
 800c61e:	b90b      	cbnz	r3, 800c624 <_puts_r+0x10>
 800c620:	f000 faaa 	bl	800cb78 <__sinit>
 800c624:	69ab      	ldr	r3, [r5, #24]
 800c626:	68ac      	ldr	r4, [r5, #8]
 800c628:	b913      	cbnz	r3, 800c630 <_puts_r+0x1c>
 800c62a:	4628      	mov	r0, r5
 800c62c:	f000 faa4 	bl	800cb78 <__sinit>
 800c630:	4b2c      	ldr	r3, [pc, #176]	; (800c6e4 <_puts_r+0xd0>)
 800c632:	429c      	cmp	r4, r3
 800c634:	d120      	bne.n	800c678 <_puts_r+0x64>
 800c636:	686c      	ldr	r4, [r5, #4]
 800c638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c63a:	07db      	lsls	r3, r3, #31
 800c63c:	d405      	bmi.n	800c64a <_puts_r+0x36>
 800c63e:	89a3      	ldrh	r3, [r4, #12]
 800c640:	0598      	lsls	r0, r3, #22
 800c642:	d402      	bmi.n	800c64a <_puts_r+0x36>
 800c644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c646:	f000 fb35 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800c64a:	89a3      	ldrh	r3, [r4, #12]
 800c64c:	0719      	lsls	r1, r3, #28
 800c64e:	d51d      	bpl.n	800c68c <_puts_r+0x78>
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	b1db      	cbz	r3, 800c68c <_puts_r+0x78>
 800c654:	3e01      	subs	r6, #1
 800c656:	68a3      	ldr	r3, [r4, #8]
 800c658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c65c:	3b01      	subs	r3, #1
 800c65e:	60a3      	str	r3, [r4, #8]
 800c660:	bb39      	cbnz	r1, 800c6b2 <_puts_r+0x9e>
 800c662:	2b00      	cmp	r3, #0
 800c664:	da38      	bge.n	800c6d8 <_puts_r+0xc4>
 800c666:	4622      	mov	r2, r4
 800c668:	210a      	movs	r1, #10
 800c66a:	4628      	mov	r0, r5
 800c66c:	f000 f8aa 	bl	800c7c4 <__swbuf_r>
 800c670:	3001      	adds	r0, #1
 800c672:	d011      	beq.n	800c698 <_puts_r+0x84>
 800c674:	250a      	movs	r5, #10
 800c676:	e011      	b.n	800c69c <_puts_r+0x88>
 800c678:	4b1b      	ldr	r3, [pc, #108]	; (800c6e8 <_puts_r+0xd4>)
 800c67a:	429c      	cmp	r4, r3
 800c67c:	d101      	bne.n	800c682 <_puts_r+0x6e>
 800c67e:	68ac      	ldr	r4, [r5, #8]
 800c680:	e7da      	b.n	800c638 <_puts_r+0x24>
 800c682:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <_puts_r+0xd8>)
 800c684:	429c      	cmp	r4, r3
 800c686:	bf08      	it	eq
 800c688:	68ec      	ldreq	r4, [r5, #12]
 800c68a:	e7d5      	b.n	800c638 <_puts_r+0x24>
 800c68c:	4621      	mov	r1, r4
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 f8ea 	bl	800c868 <__swsetup_r>
 800c694:	2800      	cmp	r0, #0
 800c696:	d0dd      	beq.n	800c654 <_puts_r+0x40>
 800c698:	f04f 35ff 	mov.w	r5, #4294967295
 800c69c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c69e:	07da      	lsls	r2, r3, #31
 800c6a0:	d405      	bmi.n	800c6ae <_puts_r+0x9a>
 800c6a2:	89a3      	ldrh	r3, [r4, #12]
 800c6a4:	059b      	lsls	r3, r3, #22
 800c6a6:	d402      	bmi.n	800c6ae <_puts_r+0x9a>
 800c6a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6aa:	f000 fb04 	bl	800ccb6 <__retarget_lock_release_recursive>
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	da04      	bge.n	800c6c0 <_puts_r+0xac>
 800c6b6:	69a2      	ldr	r2, [r4, #24]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	dc06      	bgt.n	800c6ca <_puts_r+0xb6>
 800c6bc:	290a      	cmp	r1, #10
 800c6be:	d004      	beq.n	800c6ca <_puts_r+0xb6>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	6022      	str	r2, [r4, #0]
 800c6c6:	7019      	strb	r1, [r3, #0]
 800c6c8:	e7c5      	b.n	800c656 <_puts_r+0x42>
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	f000 f879 	bl	800c7c4 <__swbuf_r>
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d1bf      	bne.n	800c656 <_puts_r+0x42>
 800c6d6:	e7df      	b.n	800c698 <_puts_r+0x84>
 800c6d8:	250a      	movs	r5, #10
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	6022      	str	r2, [r4, #0]
 800c6e0:	701d      	strb	r5, [r3, #0]
 800c6e2:	e7db      	b.n	800c69c <_puts_r+0x88>
 800c6e4:	0800dc60 	.word	0x0800dc60
 800c6e8:	0800dc80 	.word	0x0800dc80
 800c6ec:	0800dc40 	.word	0x0800dc40

0800c6f0 <puts>:
 800c6f0:	4b02      	ldr	r3, [pc, #8]	; (800c6fc <puts+0xc>)
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	6818      	ldr	r0, [r3, #0]
 800c6f6:	f7ff bf8d 	b.w	800c614 <_puts_r>
 800c6fa:	bf00      	nop
 800c6fc:	20000190 	.word	0x20000190

0800c700 <siprintf>:
 800c700:	b40e      	push	{r1, r2, r3}
 800c702:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c706:	b500      	push	{lr}
 800c708:	b09c      	sub	sp, #112	; 0x70
 800c70a:	ab1d      	add	r3, sp, #116	; 0x74
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	9006      	str	r0, [sp, #24]
 800c710:	9107      	str	r1, [sp, #28]
 800c712:	9104      	str	r1, [sp, #16]
 800c714:	4808      	ldr	r0, [pc, #32]	; (800c738 <siprintf+0x38>)
 800c716:	4909      	ldr	r1, [pc, #36]	; (800c73c <siprintf+0x3c>)
 800c718:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71c:	9105      	str	r1, [sp, #20]
 800c71e:	6800      	ldr	r0, [r0, #0]
 800c720:	a902      	add	r1, sp, #8
 800c722:	9301      	str	r3, [sp, #4]
 800c724:	f000 fc2e 	bl	800cf84 <_svfiprintf_r>
 800c728:	2200      	movs	r2, #0
 800c72a:	9b02      	ldr	r3, [sp, #8]
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	b01c      	add	sp, #112	; 0x70
 800c730:	f85d eb04 	ldr.w	lr, [sp], #4
 800c734:	b003      	add	sp, #12
 800c736:	4770      	bx	lr
 800c738:	20000190 	.word	0x20000190
 800c73c:	ffff0208 	.word	0xffff0208

0800c740 <__utoa>:
 800c740:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c742:	b08b      	sub	sp, #44	; 0x2c
 800c744:	4605      	mov	r5, r0
 800c746:	460b      	mov	r3, r1
 800c748:	466e      	mov	r6, sp
 800c74a:	4c1d      	ldr	r4, [pc, #116]	; (800c7c0 <__utoa+0x80>)
 800c74c:	f104 0c20 	add.w	ip, r4, #32
 800c750:	4637      	mov	r7, r6
 800c752:	6820      	ldr	r0, [r4, #0]
 800c754:	6861      	ldr	r1, [r4, #4]
 800c756:	3408      	adds	r4, #8
 800c758:	c703      	stmia	r7!, {r0, r1}
 800c75a:	4564      	cmp	r4, ip
 800c75c:	463e      	mov	r6, r7
 800c75e:	d1f7      	bne.n	800c750 <__utoa+0x10>
 800c760:	7921      	ldrb	r1, [r4, #4]
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	7139      	strb	r1, [r7, #4]
 800c766:	1e91      	subs	r1, r2, #2
 800c768:	2922      	cmp	r1, #34	; 0x22
 800c76a:	6038      	str	r0, [r7, #0]
 800c76c:	f04f 0100 	mov.w	r1, #0
 800c770:	d904      	bls.n	800c77c <__utoa+0x3c>
 800c772:	7019      	strb	r1, [r3, #0]
 800c774:	460b      	mov	r3, r1
 800c776:	4618      	mov	r0, r3
 800c778:	b00b      	add	sp, #44	; 0x2c
 800c77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77c:	1e58      	subs	r0, r3, #1
 800c77e:	4684      	mov	ip, r0
 800c780:	fbb5 f7f2 	udiv	r7, r5, r2
 800c784:	fb02 5617 	mls	r6, r2, r7, r5
 800c788:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800c78c:	4476      	add	r6, lr
 800c78e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c792:	460c      	mov	r4, r1
 800c794:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c798:	462e      	mov	r6, r5
 800c79a:	42b2      	cmp	r2, r6
 800c79c:	463d      	mov	r5, r7
 800c79e:	f101 0101 	add.w	r1, r1, #1
 800c7a2:	d9ed      	bls.n	800c780 <__utoa+0x40>
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	545a      	strb	r2, [r3, r1]
 800c7a8:	1919      	adds	r1, r3, r4
 800c7aa:	1aa5      	subs	r5, r4, r2
 800c7ac:	42aa      	cmp	r2, r5
 800c7ae:	dae2      	bge.n	800c776 <__utoa+0x36>
 800c7b0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c7b4:	780e      	ldrb	r6, [r1, #0]
 800c7b6:	3201      	adds	r2, #1
 800c7b8:	7006      	strb	r6, [r0, #0]
 800c7ba:	f801 5901 	strb.w	r5, [r1], #-1
 800c7be:	e7f4      	b.n	800c7aa <__utoa+0x6a>
 800c7c0:	0800dc18 	.word	0x0800dc18

0800c7c4 <__swbuf_r>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	460e      	mov	r6, r1
 800c7c8:	4614      	mov	r4, r2
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	b118      	cbz	r0, 800c7d6 <__swbuf_r+0x12>
 800c7ce:	6983      	ldr	r3, [r0, #24]
 800c7d0:	b90b      	cbnz	r3, 800c7d6 <__swbuf_r+0x12>
 800c7d2:	f000 f9d1 	bl	800cb78 <__sinit>
 800c7d6:	4b21      	ldr	r3, [pc, #132]	; (800c85c <__swbuf_r+0x98>)
 800c7d8:	429c      	cmp	r4, r3
 800c7da:	d12b      	bne.n	800c834 <__swbuf_r+0x70>
 800c7dc:	686c      	ldr	r4, [r5, #4]
 800c7de:	69a3      	ldr	r3, [r4, #24]
 800c7e0:	60a3      	str	r3, [r4, #8]
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	071a      	lsls	r2, r3, #28
 800c7e6:	d52f      	bpl.n	800c848 <__swbuf_r+0x84>
 800c7e8:	6923      	ldr	r3, [r4, #16]
 800c7ea:	b36b      	cbz	r3, 800c848 <__swbuf_r+0x84>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	6820      	ldr	r0, [r4, #0]
 800c7f0:	b2f6      	uxtb	r6, r6
 800c7f2:	1ac0      	subs	r0, r0, r3
 800c7f4:	6963      	ldr	r3, [r4, #20]
 800c7f6:	4637      	mov	r7, r6
 800c7f8:	4283      	cmp	r3, r0
 800c7fa:	dc04      	bgt.n	800c806 <__swbuf_r+0x42>
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4628      	mov	r0, r5
 800c800:	f000 f926 	bl	800ca50 <_fflush_r>
 800c804:	bb30      	cbnz	r0, 800c854 <__swbuf_r+0x90>
 800c806:	68a3      	ldr	r3, [r4, #8]
 800c808:	3001      	adds	r0, #1
 800c80a:	3b01      	subs	r3, #1
 800c80c:	60a3      	str	r3, [r4, #8]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	6022      	str	r2, [r4, #0]
 800c814:	701e      	strb	r6, [r3, #0]
 800c816:	6963      	ldr	r3, [r4, #20]
 800c818:	4283      	cmp	r3, r0
 800c81a:	d004      	beq.n	800c826 <__swbuf_r+0x62>
 800c81c:	89a3      	ldrh	r3, [r4, #12]
 800c81e:	07db      	lsls	r3, r3, #31
 800c820:	d506      	bpl.n	800c830 <__swbuf_r+0x6c>
 800c822:	2e0a      	cmp	r6, #10
 800c824:	d104      	bne.n	800c830 <__swbuf_r+0x6c>
 800c826:	4621      	mov	r1, r4
 800c828:	4628      	mov	r0, r5
 800c82a:	f000 f911 	bl	800ca50 <_fflush_r>
 800c82e:	b988      	cbnz	r0, 800c854 <__swbuf_r+0x90>
 800c830:	4638      	mov	r0, r7
 800c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c834:	4b0a      	ldr	r3, [pc, #40]	; (800c860 <__swbuf_r+0x9c>)
 800c836:	429c      	cmp	r4, r3
 800c838:	d101      	bne.n	800c83e <__swbuf_r+0x7a>
 800c83a:	68ac      	ldr	r4, [r5, #8]
 800c83c:	e7cf      	b.n	800c7de <__swbuf_r+0x1a>
 800c83e:	4b09      	ldr	r3, [pc, #36]	; (800c864 <__swbuf_r+0xa0>)
 800c840:	429c      	cmp	r4, r3
 800c842:	bf08      	it	eq
 800c844:	68ec      	ldreq	r4, [r5, #12]
 800c846:	e7ca      	b.n	800c7de <__swbuf_r+0x1a>
 800c848:	4621      	mov	r1, r4
 800c84a:	4628      	mov	r0, r5
 800c84c:	f000 f80c 	bl	800c868 <__swsetup_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	d0cb      	beq.n	800c7ec <__swbuf_r+0x28>
 800c854:	f04f 37ff 	mov.w	r7, #4294967295
 800c858:	e7ea      	b.n	800c830 <__swbuf_r+0x6c>
 800c85a:	bf00      	nop
 800c85c:	0800dc60 	.word	0x0800dc60
 800c860:	0800dc80 	.word	0x0800dc80
 800c864:	0800dc40 	.word	0x0800dc40

0800c868 <__swsetup_r>:
 800c868:	4b32      	ldr	r3, [pc, #200]	; (800c934 <__swsetup_r+0xcc>)
 800c86a:	b570      	push	{r4, r5, r6, lr}
 800c86c:	681d      	ldr	r5, [r3, #0]
 800c86e:	4606      	mov	r6, r0
 800c870:	460c      	mov	r4, r1
 800c872:	b125      	cbz	r5, 800c87e <__swsetup_r+0x16>
 800c874:	69ab      	ldr	r3, [r5, #24]
 800c876:	b913      	cbnz	r3, 800c87e <__swsetup_r+0x16>
 800c878:	4628      	mov	r0, r5
 800c87a:	f000 f97d 	bl	800cb78 <__sinit>
 800c87e:	4b2e      	ldr	r3, [pc, #184]	; (800c938 <__swsetup_r+0xd0>)
 800c880:	429c      	cmp	r4, r3
 800c882:	d10f      	bne.n	800c8a4 <__swsetup_r+0x3c>
 800c884:	686c      	ldr	r4, [r5, #4]
 800c886:	89a3      	ldrh	r3, [r4, #12]
 800c888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c88c:	0719      	lsls	r1, r3, #28
 800c88e:	d42c      	bmi.n	800c8ea <__swsetup_r+0x82>
 800c890:	06dd      	lsls	r5, r3, #27
 800c892:	d411      	bmi.n	800c8b8 <__swsetup_r+0x50>
 800c894:	2309      	movs	r3, #9
 800c896:	6033      	str	r3, [r6, #0]
 800c898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c89c:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a0:	81a3      	strh	r3, [r4, #12]
 800c8a2:	e03e      	b.n	800c922 <__swsetup_r+0xba>
 800c8a4:	4b25      	ldr	r3, [pc, #148]	; (800c93c <__swsetup_r+0xd4>)
 800c8a6:	429c      	cmp	r4, r3
 800c8a8:	d101      	bne.n	800c8ae <__swsetup_r+0x46>
 800c8aa:	68ac      	ldr	r4, [r5, #8]
 800c8ac:	e7eb      	b.n	800c886 <__swsetup_r+0x1e>
 800c8ae:	4b24      	ldr	r3, [pc, #144]	; (800c940 <__swsetup_r+0xd8>)
 800c8b0:	429c      	cmp	r4, r3
 800c8b2:	bf08      	it	eq
 800c8b4:	68ec      	ldreq	r4, [r5, #12]
 800c8b6:	e7e6      	b.n	800c886 <__swsetup_r+0x1e>
 800c8b8:	0758      	lsls	r0, r3, #29
 800c8ba:	d512      	bpl.n	800c8e2 <__swsetup_r+0x7a>
 800c8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8be:	b141      	cbz	r1, 800c8d2 <__swsetup_r+0x6a>
 800c8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8c4:	4299      	cmp	r1, r3
 800c8c6:	d002      	beq.n	800c8ce <__swsetup_r+0x66>
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	f000 fa59 	bl	800cd80 <_free_r>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6363      	str	r3, [r4, #52]	; 0x34
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8d8:	81a3      	strh	r3, [r4, #12]
 800c8da:	2300      	movs	r3, #0
 800c8dc:	6063      	str	r3, [r4, #4]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	6023      	str	r3, [r4, #0]
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f043 0308 	orr.w	r3, r3, #8
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	b94b      	cbnz	r3, 800c902 <__swsetup_r+0x9a>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8f8:	d003      	beq.n	800c902 <__swsetup_r+0x9a>
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f000 f9ff 	bl	800cd00 <__smakebuf_r>
 800c902:	89a0      	ldrh	r0, [r4, #12]
 800c904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c908:	f010 0301 	ands.w	r3, r0, #1
 800c90c:	d00a      	beq.n	800c924 <__swsetup_r+0xbc>
 800c90e:	2300      	movs	r3, #0
 800c910:	60a3      	str	r3, [r4, #8]
 800c912:	6963      	ldr	r3, [r4, #20]
 800c914:	425b      	negs	r3, r3
 800c916:	61a3      	str	r3, [r4, #24]
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	b943      	cbnz	r3, 800c92e <__swsetup_r+0xc6>
 800c91c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c920:	d1ba      	bne.n	800c898 <__swsetup_r+0x30>
 800c922:	bd70      	pop	{r4, r5, r6, pc}
 800c924:	0781      	lsls	r1, r0, #30
 800c926:	bf58      	it	pl
 800c928:	6963      	ldrpl	r3, [r4, #20]
 800c92a:	60a3      	str	r3, [r4, #8]
 800c92c:	e7f4      	b.n	800c918 <__swsetup_r+0xb0>
 800c92e:	2000      	movs	r0, #0
 800c930:	e7f7      	b.n	800c922 <__swsetup_r+0xba>
 800c932:	bf00      	nop
 800c934:	20000190 	.word	0x20000190
 800c938:	0800dc60 	.word	0x0800dc60
 800c93c:	0800dc80 	.word	0x0800dc80
 800c940:	0800dc40 	.word	0x0800dc40

0800c944 <__sflush_r>:
 800c944:	898a      	ldrh	r2, [r1, #12]
 800c946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94a:	4605      	mov	r5, r0
 800c94c:	0710      	lsls	r0, r2, #28
 800c94e:	460c      	mov	r4, r1
 800c950:	d458      	bmi.n	800ca04 <__sflush_r+0xc0>
 800c952:	684b      	ldr	r3, [r1, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	dc05      	bgt.n	800c964 <__sflush_r+0x20>
 800c958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dc02      	bgt.n	800c964 <__sflush_r+0x20>
 800c95e:	2000      	movs	r0, #0
 800c960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c966:	2e00      	cmp	r6, #0
 800c968:	d0f9      	beq.n	800c95e <__sflush_r+0x1a>
 800c96a:	2300      	movs	r3, #0
 800c96c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c970:	682f      	ldr	r7, [r5, #0]
 800c972:	602b      	str	r3, [r5, #0]
 800c974:	d032      	beq.n	800c9dc <__sflush_r+0x98>
 800c976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c978:	89a3      	ldrh	r3, [r4, #12]
 800c97a:	075a      	lsls	r2, r3, #29
 800c97c:	d505      	bpl.n	800c98a <__sflush_r+0x46>
 800c97e:	6863      	ldr	r3, [r4, #4]
 800c980:	1ac0      	subs	r0, r0, r3
 800c982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c984:	b10b      	cbz	r3, 800c98a <__sflush_r+0x46>
 800c986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c988:	1ac0      	subs	r0, r0, r3
 800c98a:	2300      	movs	r3, #0
 800c98c:	4602      	mov	r2, r0
 800c98e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c990:	4628      	mov	r0, r5
 800c992:	6a21      	ldr	r1, [r4, #32]
 800c994:	47b0      	blx	r6
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	d106      	bne.n	800c9aa <__sflush_r+0x66>
 800c99c:	6829      	ldr	r1, [r5, #0]
 800c99e:	291d      	cmp	r1, #29
 800c9a0:	d82c      	bhi.n	800c9fc <__sflush_r+0xb8>
 800c9a2:	4a2a      	ldr	r2, [pc, #168]	; (800ca4c <__sflush_r+0x108>)
 800c9a4:	40ca      	lsrs	r2, r1
 800c9a6:	07d6      	lsls	r6, r2, #31
 800c9a8:	d528      	bpl.n	800c9fc <__sflush_r+0xb8>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	6062      	str	r2, [r4, #4]
 800c9ae:	6922      	ldr	r2, [r4, #16]
 800c9b0:	04d9      	lsls	r1, r3, #19
 800c9b2:	6022      	str	r2, [r4, #0]
 800c9b4:	d504      	bpl.n	800c9c0 <__sflush_r+0x7c>
 800c9b6:	1c42      	adds	r2, r0, #1
 800c9b8:	d101      	bne.n	800c9be <__sflush_r+0x7a>
 800c9ba:	682b      	ldr	r3, [r5, #0]
 800c9bc:	b903      	cbnz	r3, 800c9c0 <__sflush_r+0x7c>
 800c9be:	6560      	str	r0, [r4, #84]	; 0x54
 800c9c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9c2:	602f      	str	r7, [r5, #0]
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	d0ca      	beq.n	800c95e <__sflush_r+0x1a>
 800c9c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	d002      	beq.n	800c9d6 <__sflush_r+0x92>
 800c9d0:	4628      	mov	r0, r5
 800c9d2:	f000 f9d5 	bl	800cd80 <_free_r>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	6360      	str	r0, [r4, #52]	; 0x34
 800c9da:	e7c1      	b.n	800c960 <__sflush_r+0x1c>
 800c9dc:	6a21      	ldr	r1, [r4, #32]
 800c9de:	2301      	movs	r3, #1
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	47b0      	blx	r6
 800c9e4:	1c41      	adds	r1, r0, #1
 800c9e6:	d1c7      	bne.n	800c978 <__sflush_r+0x34>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0c4      	beq.n	800c978 <__sflush_r+0x34>
 800c9ee:	2b1d      	cmp	r3, #29
 800c9f0:	d001      	beq.n	800c9f6 <__sflush_r+0xb2>
 800c9f2:	2b16      	cmp	r3, #22
 800c9f4:	d101      	bne.n	800c9fa <__sflush_r+0xb6>
 800c9f6:	602f      	str	r7, [r5, #0]
 800c9f8:	e7b1      	b.n	800c95e <__sflush_r+0x1a>
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	e7ad      	b.n	800c960 <__sflush_r+0x1c>
 800ca04:	690f      	ldr	r7, [r1, #16]
 800ca06:	2f00      	cmp	r7, #0
 800ca08:	d0a9      	beq.n	800c95e <__sflush_r+0x1a>
 800ca0a:	0793      	lsls	r3, r2, #30
 800ca0c:	bf18      	it	ne
 800ca0e:	2300      	movne	r3, #0
 800ca10:	680e      	ldr	r6, [r1, #0]
 800ca12:	bf08      	it	eq
 800ca14:	694b      	ldreq	r3, [r1, #20]
 800ca16:	eba6 0807 	sub.w	r8, r6, r7
 800ca1a:	600f      	str	r7, [r1, #0]
 800ca1c:	608b      	str	r3, [r1, #8]
 800ca1e:	f1b8 0f00 	cmp.w	r8, #0
 800ca22:	dd9c      	ble.n	800c95e <__sflush_r+0x1a>
 800ca24:	4643      	mov	r3, r8
 800ca26:	463a      	mov	r2, r7
 800ca28:	4628      	mov	r0, r5
 800ca2a:	6a21      	ldr	r1, [r4, #32]
 800ca2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca2e:	47b0      	blx	r6
 800ca30:	2800      	cmp	r0, #0
 800ca32:	dc06      	bgt.n	800ca42 <__sflush_r+0xfe>
 800ca34:	89a3      	ldrh	r3, [r4, #12]
 800ca36:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	e78e      	b.n	800c960 <__sflush_r+0x1c>
 800ca42:	4407      	add	r7, r0
 800ca44:	eba8 0800 	sub.w	r8, r8, r0
 800ca48:	e7e9      	b.n	800ca1e <__sflush_r+0xda>
 800ca4a:	bf00      	nop
 800ca4c:	20400001 	.word	0x20400001

0800ca50 <_fflush_r>:
 800ca50:	b538      	push	{r3, r4, r5, lr}
 800ca52:	690b      	ldr	r3, [r1, #16]
 800ca54:	4605      	mov	r5, r0
 800ca56:	460c      	mov	r4, r1
 800ca58:	b913      	cbnz	r3, 800ca60 <_fflush_r+0x10>
 800ca5a:	2500      	movs	r5, #0
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	bd38      	pop	{r3, r4, r5, pc}
 800ca60:	b118      	cbz	r0, 800ca6a <_fflush_r+0x1a>
 800ca62:	6983      	ldr	r3, [r0, #24]
 800ca64:	b90b      	cbnz	r3, 800ca6a <_fflush_r+0x1a>
 800ca66:	f000 f887 	bl	800cb78 <__sinit>
 800ca6a:	4b14      	ldr	r3, [pc, #80]	; (800cabc <_fflush_r+0x6c>)
 800ca6c:	429c      	cmp	r4, r3
 800ca6e:	d11b      	bne.n	800caa8 <_fflush_r+0x58>
 800ca70:	686c      	ldr	r4, [r5, #4]
 800ca72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0ef      	beq.n	800ca5a <_fflush_r+0xa>
 800ca7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca7c:	07d0      	lsls	r0, r2, #31
 800ca7e:	d404      	bmi.n	800ca8a <_fflush_r+0x3a>
 800ca80:	0599      	lsls	r1, r3, #22
 800ca82:	d402      	bmi.n	800ca8a <_fflush_r+0x3a>
 800ca84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca86:	f000 f915 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	f7ff ff59 	bl	800c944 <__sflush_r>
 800ca92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca94:	4605      	mov	r5, r0
 800ca96:	07da      	lsls	r2, r3, #31
 800ca98:	d4e0      	bmi.n	800ca5c <_fflush_r+0xc>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	059b      	lsls	r3, r3, #22
 800ca9e:	d4dd      	bmi.n	800ca5c <_fflush_r+0xc>
 800caa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa2:	f000 f908 	bl	800ccb6 <__retarget_lock_release_recursive>
 800caa6:	e7d9      	b.n	800ca5c <_fflush_r+0xc>
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <_fflush_r+0x70>)
 800caaa:	429c      	cmp	r4, r3
 800caac:	d101      	bne.n	800cab2 <_fflush_r+0x62>
 800caae:	68ac      	ldr	r4, [r5, #8]
 800cab0:	e7df      	b.n	800ca72 <_fflush_r+0x22>
 800cab2:	4b04      	ldr	r3, [pc, #16]	; (800cac4 <_fflush_r+0x74>)
 800cab4:	429c      	cmp	r4, r3
 800cab6:	bf08      	it	eq
 800cab8:	68ec      	ldreq	r4, [r5, #12]
 800caba:	e7da      	b.n	800ca72 <_fflush_r+0x22>
 800cabc:	0800dc60 	.word	0x0800dc60
 800cac0:	0800dc80 	.word	0x0800dc80
 800cac4:	0800dc40 	.word	0x0800dc40

0800cac8 <std>:
 800cac8:	2300      	movs	r3, #0
 800caca:	b510      	push	{r4, lr}
 800cacc:	4604      	mov	r4, r0
 800cace:	e9c0 3300 	strd	r3, r3, [r0]
 800cad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cad6:	6083      	str	r3, [r0, #8]
 800cad8:	8181      	strh	r1, [r0, #12]
 800cada:	6643      	str	r3, [r0, #100]	; 0x64
 800cadc:	81c2      	strh	r2, [r0, #14]
 800cade:	6183      	str	r3, [r0, #24]
 800cae0:	4619      	mov	r1, r3
 800cae2:	2208      	movs	r2, #8
 800cae4:	305c      	adds	r0, #92	; 0x5c
 800cae6:	f7ff fd75 	bl	800c5d4 <memset>
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x38>)
 800caec:	6224      	str	r4, [r4, #32]
 800caee:	6263      	str	r3, [r4, #36]	; 0x24
 800caf0:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <std+0x3c>)
 800caf2:	62a3      	str	r3, [r4, #40]	; 0x28
 800caf4:	4b04      	ldr	r3, [pc, #16]	; (800cb08 <std+0x40>)
 800caf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caf8:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <std+0x44>)
 800cafa:	6323      	str	r3, [r4, #48]	; 0x30
 800cafc:	bd10      	pop	{r4, pc}
 800cafe:	bf00      	nop
 800cb00:	0800d781 	.word	0x0800d781
 800cb04:	0800d7a3 	.word	0x0800d7a3
 800cb08:	0800d7db 	.word	0x0800d7db
 800cb0c:	0800d7ff 	.word	0x0800d7ff

0800cb10 <_cleanup_r>:
 800cb10:	4901      	ldr	r1, [pc, #4]	; (800cb18 <_cleanup_r+0x8>)
 800cb12:	f000 b8af 	b.w	800cc74 <_fwalk_reent>
 800cb16:	bf00      	nop
 800cb18:	0800ca51 	.word	0x0800ca51

0800cb1c <__sfmoreglue>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	2568      	movs	r5, #104	; 0x68
 800cb20:	1e4a      	subs	r2, r1, #1
 800cb22:	4355      	muls	r5, r2
 800cb24:	460e      	mov	r6, r1
 800cb26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb2a:	f000 f975 	bl	800ce18 <_malloc_r>
 800cb2e:	4604      	mov	r4, r0
 800cb30:	b140      	cbz	r0, 800cb44 <__sfmoreglue+0x28>
 800cb32:	2100      	movs	r1, #0
 800cb34:	e9c0 1600 	strd	r1, r6, [r0]
 800cb38:	300c      	adds	r0, #12
 800cb3a:	60a0      	str	r0, [r4, #8]
 800cb3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb40:	f7ff fd48 	bl	800c5d4 <memset>
 800cb44:	4620      	mov	r0, r4
 800cb46:	bd70      	pop	{r4, r5, r6, pc}

0800cb48 <__sfp_lock_acquire>:
 800cb48:	4801      	ldr	r0, [pc, #4]	; (800cb50 <__sfp_lock_acquire+0x8>)
 800cb4a:	f000 b8b3 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800cb4e:	bf00      	nop
 800cb50:	200015b8 	.word	0x200015b8

0800cb54 <__sfp_lock_release>:
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <__sfp_lock_release+0x8>)
 800cb56:	f000 b8ae 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800cb5a:	bf00      	nop
 800cb5c:	200015b8 	.word	0x200015b8

0800cb60 <__sinit_lock_acquire>:
 800cb60:	4801      	ldr	r0, [pc, #4]	; (800cb68 <__sinit_lock_acquire+0x8>)
 800cb62:	f000 b8a7 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800cb66:	bf00      	nop
 800cb68:	200015b3 	.word	0x200015b3

0800cb6c <__sinit_lock_release>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__sinit_lock_release+0x8>)
 800cb6e:	f000 b8a2 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800cb72:	bf00      	nop
 800cb74:	200015b3 	.word	0x200015b3

0800cb78 <__sinit>:
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	f7ff fff0 	bl	800cb60 <__sinit_lock_acquire>
 800cb80:	69a3      	ldr	r3, [r4, #24]
 800cb82:	b11b      	cbz	r3, 800cb8c <__sinit+0x14>
 800cb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb88:	f7ff bff0 	b.w	800cb6c <__sinit_lock_release>
 800cb8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb90:	6523      	str	r3, [r4, #80]	; 0x50
 800cb92:	4b13      	ldr	r3, [pc, #76]	; (800cbe0 <__sinit+0x68>)
 800cb94:	4a13      	ldr	r2, [pc, #76]	; (800cbe4 <__sinit+0x6c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb9a:	42a3      	cmp	r3, r4
 800cb9c:	bf08      	it	eq
 800cb9e:	2301      	moveq	r3, #1
 800cba0:	4620      	mov	r0, r4
 800cba2:	bf08      	it	eq
 800cba4:	61a3      	streq	r3, [r4, #24]
 800cba6:	f000 f81f 	bl	800cbe8 <__sfp>
 800cbaa:	6060      	str	r0, [r4, #4]
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 f81b 	bl	800cbe8 <__sfp>
 800cbb2:	60a0      	str	r0, [r4, #8]
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f000 f817 	bl	800cbe8 <__sfp>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2104      	movs	r1, #4
 800cbbe:	60e0      	str	r0, [r4, #12]
 800cbc0:	6860      	ldr	r0, [r4, #4]
 800cbc2:	f7ff ff81 	bl	800cac8 <std>
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	2109      	movs	r1, #9
 800cbca:	68a0      	ldr	r0, [r4, #8]
 800cbcc:	f7ff ff7c 	bl	800cac8 <std>
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	2112      	movs	r1, #18
 800cbd4:	68e0      	ldr	r0, [r4, #12]
 800cbd6:	f7ff ff77 	bl	800cac8 <std>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	61a3      	str	r3, [r4, #24]
 800cbde:	e7d1      	b.n	800cb84 <__sinit+0xc>
 800cbe0:	0800dc14 	.word	0x0800dc14
 800cbe4:	0800cb11 	.word	0x0800cb11

0800cbe8 <__sfp>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	4607      	mov	r7, r0
 800cbec:	f7ff ffac 	bl	800cb48 <__sfp_lock_acquire>
 800cbf0:	4b1e      	ldr	r3, [pc, #120]	; (800cc6c <__sfp+0x84>)
 800cbf2:	681e      	ldr	r6, [r3, #0]
 800cbf4:	69b3      	ldr	r3, [r6, #24]
 800cbf6:	b913      	cbnz	r3, 800cbfe <__sfp+0x16>
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7ff ffbd 	bl	800cb78 <__sinit>
 800cbfe:	3648      	adds	r6, #72	; 0x48
 800cc00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	d503      	bpl.n	800cc10 <__sfp+0x28>
 800cc08:	6833      	ldr	r3, [r6, #0]
 800cc0a:	b30b      	cbz	r3, 800cc50 <__sfp+0x68>
 800cc0c:	6836      	ldr	r6, [r6, #0]
 800cc0e:	e7f7      	b.n	800cc00 <__sfp+0x18>
 800cc10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc14:	b9d5      	cbnz	r5, 800cc4c <__sfp+0x64>
 800cc16:	4b16      	ldr	r3, [pc, #88]	; (800cc70 <__sfp+0x88>)
 800cc18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc1c:	60e3      	str	r3, [r4, #12]
 800cc1e:	6665      	str	r5, [r4, #100]	; 0x64
 800cc20:	f000 f847 	bl	800ccb2 <__retarget_lock_init_recursive>
 800cc24:	f7ff ff96 	bl	800cb54 <__sfp_lock_release>
 800cc28:	2208      	movs	r2, #8
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc34:	6025      	str	r5, [r4, #0]
 800cc36:	61a5      	str	r5, [r4, #24]
 800cc38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc3c:	f7ff fcca 	bl	800c5d4 <memset>
 800cc40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc48:	4620      	mov	r0, r4
 800cc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc4c:	3468      	adds	r4, #104	; 0x68
 800cc4e:	e7d9      	b.n	800cc04 <__sfp+0x1c>
 800cc50:	2104      	movs	r1, #4
 800cc52:	4638      	mov	r0, r7
 800cc54:	f7ff ff62 	bl	800cb1c <__sfmoreglue>
 800cc58:	4604      	mov	r4, r0
 800cc5a:	6030      	str	r0, [r6, #0]
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d1d5      	bne.n	800cc0c <__sfp+0x24>
 800cc60:	f7ff ff78 	bl	800cb54 <__sfp_lock_release>
 800cc64:	230c      	movs	r3, #12
 800cc66:	603b      	str	r3, [r7, #0]
 800cc68:	e7ee      	b.n	800cc48 <__sfp+0x60>
 800cc6a:	bf00      	nop
 800cc6c:	0800dc14 	.word	0x0800dc14
 800cc70:	ffff0001 	.word	0xffff0001

0800cc74 <_fwalk_reent>:
 800cc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc78:	4606      	mov	r6, r0
 800cc7a:	4688      	mov	r8, r1
 800cc7c:	2700      	movs	r7, #0
 800cc7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc86:	f1b9 0901 	subs.w	r9, r9, #1
 800cc8a:	d505      	bpl.n	800cc98 <_fwalk_reent+0x24>
 800cc8c:	6824      	ldr	r4, [r4, #0]
 800cc8e:	2c00      	cmp	r4, #0
 800cc90:	d1f7      	bne.n	800cc82 <_fwalk_reent+0xe>
 800cc92:	4638      	mov	r0, r7
 800cc94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc98:	89ab      	ldrh	r3, [r5, #12]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d907      	bls.n	800ccae <_fwalk_reent+0x3a>
 800cc9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cca2:	3301      	adds	r3, #1
 800cca4:	d003      	beq.n	800ccae <_fwalk_reent+0x3a>
 800cca6:	4629      	mov	r1, r5
 800cca8:	4630      	mov	r0, r6
 800ccaa:	47c0      	blx	r8
 800ccac:	4307      	orrs	r7, r0
 800ccae:	3568      	adds	r5, #104	; 0x68
 800ccb0:	e7e9      	b.n	800cc86 <_fwalk_reent+0x12>

0800ccb2 <__retarget_lock_init_recursive>:
 800ccb2:	4770      	bx	lr

0800ccb4 <__retarget_lock_acquire_recursive>:
 800ccb4:	4770      	bx	lr

0800ccb6 <__retarget_lock_release_recursive>:
 800ccb6:	4770      	bx	lr

0800ccb8 <__swhatbuf_r>:
 800ccb8:	b570      	push	{r4, r5, r6, lr}
 800ccba:	460e      	mov	r6, r1
 800ccbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	2900      	cmp	r1, #0
 800ccc4:	461d      	mov	r5, r3
 800ccc6:	b096      	sub	sp, #88	; 0x58
 800ccc8:	da07      	bge.n	800ccda <__swhatbuf_r+0x22>
 800ccca:	2300      	movs	r3, #0
 800cccc:	602b      	str	r3, [r5, #0]
 800ccce:	89b3      	ldrh	r3, [r6, #12]
 800ccd0:	061a      	lsls	r2, r3, #24
 800ccd2:	d410      	bmi.n	800ccf6 <__swhatbuf_r+0x3e>
 800ccd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd8:	e00e      	b.n	800ccf8 <__swhatbuf_r+0x40>
 800ccda:	466a      	mov	r2, sp
 800ccdc:	f000 fdb6 	bl	800d84c <_fstat_r>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dbf2      	blt.n	800ccca <__swhatbuf_r+0x12>
 800cce4:	9a01      	ldr	r2, [sp, #4]
 800cce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccee:	425a      	negs	r2, r3
 800ccf0:	415a      	adcs	r2, r3
 800ccf2:	602a      	str	r2, [r5, #0]
 800ccf4:	e7ee      	b.n	800ccd4 <__swhatbuf_r+0x1c>
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	b016      	add	sp, #88	; 0x58
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}

0800cd00 <__smakebuf_r>:
 800cd00:	898b      	ldrh	r3, [r1, #12]
 800cd02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd04:	079d      	lsls	r5, r3, #30
 800cd06:	4606      	mov	r6, r0
 800cd08:	460c      	mov	r4, r1
 800cd0a:	d507      	bpl.n	800cd1c <__smakebuf_r+0x1c>
 800cd0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	2301      	movs	r3, #1
 800cd16:	6163      	str	r3, [r4, #20]
 800cd18:	b002      	add	sp, #8
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	466a      	mov	r2, sp
 800cd1e:	ab01      	add	r3, sp, #4
 800cd20:	f7ff ffca 	bl	800ccb8 <__swhatbuf_r>
 800cd24:	9900      	ldr	r1, [sp, #0]
 800cd26:	4605      	mov	r5, r0
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f000 f875 	bl	800ce18 <_malloc_r>
 800cd2e:	b948      	cbnz	r0, 800cd44 <__smakebuf_r+0x44>
 800cd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd34:	059a      	lsls	r2, r3, #22
 800cd36:	d4ef      	bmi.n	800cd18 <__smakebuf_r+0x18>
 800cd38:	f023 0303 	bic.w	r3, r3, #3
 800cd3c:	f043 0302 	orr.w	r3, r3, #2
 800cd40:	81a3      	strh	r3, [r4, #12]
 800cd42:	e7e3      	b.n	800cd0c <__smakebuf_r+0xc>
 800cd44:	4b0d      	ldr	r3, [pc, #52]	; (800cd7c <__smakebuf_r+0x7c>)
 800cd46:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	6020      	str	r0, [r4, #0]
 800cd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd50:	81a3      	strh	r3, [r4, #12]
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	6120      	str	r0, [r4, #16]
 800cd56:	6163      	str	r3, [r4, #20]
 800cd58:	9b01      	ldr	r3, [sp, #4]
 800cd5a:	b15b      	cbz	r3, 800cd74 <__smakebuf_r+0x74>
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd62:	f000 fd85 	bl	800d870 <_isatty_r>
 800cd66:	b128      	cbz	r0, 800cd74 <__smakebuf_r+0x74>
 800cd68:	89a3      	ldrh	r3, [r4, #12]
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	f043 0301 	orr.w	r3, r3, #1
 800cd72:	81a3      	strh	r3, [r4, #12]
 800cd74:	89a0      	ldrh	r0, [r4, #12]
 800cd76:	4305      	orrs	r5, r0
 800cd78:	81a5      	strh	r5, [r4, #12]
 800cd7a:	e7cd      	b.n	800cd18 <__smakebuf_r+0x18>
 800cd7c:	0800cb11 	.word	0x0800cb11

0800cd80 <_free_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4605      	mov	r5, r0
 800cd84:	2900      	cmp	r1, #0
 800cd86:	d043      	beq.n	800ce10 <_free_r+0x90>
 800cd88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd8c:	1f0c      	subs	r4, r1, #4
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bfb8      	it	lt
 800cd92:	18e4      	addlt	r4, r4, r3
 800cd94:	f000 fdb6 	bl	800d904 <__malloc_lock>
 800cd98:	4a1e      	ldr	r2, [pc, #120]	; (800ce14 <_free_r+0x94>)
 800cd9a:	6813      	ldr	r3, [r2, #0]
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	b933      	cbnz	r3, 800cdae <_free_r+0x2e>
 800cda0:	6063      	str	r3, [r4, #4]
 800cda2:	6014      	str	r4, [r2, #0]
 800cda4:	4628      	mov	r0, r5
 800cda6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdaa:	f000 bdb1 	b.w	800d910 <__malloc_unlock>
 800cdae:	42a3      	cmp	r3, r4
 800cdb0:	d90a      	bls.n	800cdc8 <_free_r+0x48>
 800cdb2:	6821      	ldr	r1, [r4, #0]
 800cdb4:	1862      	adds	r2, r4, r1
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	bf01      	itttt	eq
 800cdba:	681a      	ldreq	r2, [r3, #0]
 800cdbc:	685b      	ldreq	r3, [r3, #4]
 800cdbe:	1852      	addeq	r2, r2, r1
 800cdc0:	6022      	streq	r2, [r4, #0]
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	6004      	str	r4, [r0, #0]
 800cdc6:	e7ed      	b.n	800cda4 <_free_r+0x24>
 800cdc8:	461a      	mov	r2, r3
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	b10b      	cbz	r3, 800cdd2 <_free_r+0x52>
 800cdce:	42a3      	cmp	r3, r4
 800cdd0:	d9fa      	bls.n	800cdc8 <_free_r+0x48>
 800cdd2:	6811      	ldr	r1, [r2, #0]
 800cdd4:	1850      	adds	r0, r2, r1
 800cdd6:	42a0      	cmp	r0, r4
 800cdd8:	d10b      	bne.n	800cdf2 <_free_r+0x72>
 800cdda:	6820      	ldr	r0, [r4, #0]
 800cddc:	4401      	add	r1, r0
 800cdde:	1850      	adds	r0, r2, r1
 800cde0:	4283      	cmp	r3, r0
 800cde2:	6011      	str	r1, [r2, #0]
 800cde4:	d1de      	bne.n	800cda4 <_free_r+0x24>
 800cde6:	6818      	ldr	r0, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4401      	add	r1, r0
 800cdec:	6011      	str	r1, [r2, #0]
 800cdee:	6053      	str	r3, [r2, #4]
 800cdf0:	e7d8      	b.n	800cda4 <_free_r+0x24>
 800cdf2:	d902      	bls.n	800cdfa <_free_r+0x7a>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	602b      	str	r3, [r5, #0]
 800cdf8:	e7d4      	b.n	800cda4 <_free_r+0x24>
 800cdfa:	6820      	ldr	r0, [r4, #0]
 800cdfc:	1821      	adds	r1, r4, r0
 800cdfe:	428b      	cmp	r3, r1
 800ce00:	bf01      	itttt	eq
 800ce02:	6819      	ldreq	r1, [r3, #0]
 800ce04:	685b      	ldreq	r3, [r3, #4]
 800ce06:	1809      	addeq	r1, r1, r0
 800ce08:	6021      	streq	r1, [r4, #0]
 800ce0a:	6063      	str	r3, [r4, #4]
 800ce0c:	6054      	str	r4, [r2, #4]
 800ce0e:	e7c9      	b.n	800cda4 <_free_r+0x24>
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
 800ce12:	bf00      	nop
 800ce14:	200004a4 	.word	0x200004a4

0800ce18 <_malloc_r>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	1ccd      	adds	r5, r1, #3
 800ce1c:	f025 0503 	bic.w	r5, r5, #3
 800ce20:	3508      	adds	r5, #8
 800ce22:	2d0c      	cmp	r5, #12
 800ce24:	bf38      	it	cc
 800ce26:	250c      	movcc	r5, #12
 800ce28:	2d00      	cmp	r5, #0
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	db01      	blt.n	800ce32 <_malloc_r+0x1a>
 800ce2e:	42a9      	cmp	r1, r5
 800ce30:	d903      	bls.n	800ce3a <_malloc_r+0x22>
 800ce32:	230c      	movs	r3, #12
 800ce34:	6033      	str	r3, [r6, #0]
 800ce36:	2000      	movs	r0, #0
 800ce38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce3a:	f000 fd63 	bl	800d904 <__malloc_lock>
 800ce3e:	4921      	ldr	r1, [pc, #132]	; (800cec4 <_malloc_r+0xac>)
 800ce40:	680a      	ldr	r2, [r1, #0]
 800ce42:	4614      	mov	r4, r2
 800ce44:	b99c      	cbnz	r4, 800ce6e <_malloc_r+0x56>
 800ce46:	4f20      	ldr	r7, [pc, #128]	; (800cec8 <_malloc_r+0xb0>)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	b923      	cbnz	r3, 800ce56 <_malloc_r+0x3e>
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f000 fc86 	bl	800d760 <_sbrk_r>
 800ce54:	6038      	str	r0, [r7, #0]
 800ce56:	4629      	mov	r1, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f000 fc81 	bl	800d760 <_sbrk_r>
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	d123      	bne.n	800ceaa <_malloc_r+0x92>
 800ce62:	230c      	movs	r3, #12
 800ce64:	4630      	mov	r0, r6
 800ce66:	6033      	str	r3, [r6, #0]
 800ce68:	f000 fd52 	bl	800d910 <__malloc_unlock>
 800ce6c:	e7e3      	b.n	800ce36 <_malloc_r+0x1e>
 800ce6e:	6823      	ldr	r3, [r4, #0]
 800ce70:	1b5b      	subs	r3, r3, r5
 800ce72:	d417      	bmi.n	800cea4 <_malloc_r+0x8c>
 800ce74:	2b0b      	cmp	r3, #11
 800ce76:	d903      	bls.n	800ce80 <_malloc_r+0x68>
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	441c      	add	r4, r3
 800ce7c:	6025      	str	r5, [r4, #0]
 800ce7e:	e004      	b.n	800ce8a <_malloc_r+0x72>
 800ce80:	6863      	ldr	r3, [r4, #4]
 800ce82:	42a2      	cmp	r2, r4
 800ce84:	bf0c      	ite	eq
 800ce86:	600b      	streq	r3, [r1, #0]
 800ce88:	6053      	strne	r3, [r2, #4]
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f000 fd40 	bl	800d910 <__malloc_unlock>
 800ce90:	f104 000b 	add.w	r0, r4, #11
 800ce94:	1d23      	adds	r3, r4, #4
 800ce96:	f020 0007 	bic.w	r0, r0, #7
 800ce9a:	1ac2      	subs	r2, r0, r3
 800ce9c:	d0cc      	beq.n	800ce38 <_malloc_r+0x20>
 800ce9e:	1a1b      	subs	r3, r3, r0
 800cea0:	50a3      	str	r3, [r4, r2]
 800cea2:	e7c9      	b.n	800ce38 <_malloc_r+0x20>
 800cea4:	4622      	mov	r2, r4
 800cea6:	6864      	ldr	r4, [r4, #4]
 800cea8:	e7cc      	b.n	800ce44 <_malloc_r+0x2c>
 800ceaa:	1cc4      	adds	r4, r0, #3
 800ceac:	f024 0403 	bic.w	r4, r4, #3
 800ceb0:	42a0      	cmp	r0, r4
 800ceb2:	d0e3      	beq.n	800ce7c <_malloc_r+0x64>
 800ceb4:	1a21      	subs	r1, r4, r0
 800ceb6:	4630      	mov	r0, r6
 800ceb8:	f000 fc52 	bl	800d760 <_sbrk_r>
 800cebc:	3001      	adds	r0, #1
 800cebe:	d1dd      	bne.n	800ce7c <_malloc_r+0x64>
 800cec0:	e7cf      	b.n	800ce62 <_malloc_r+0x4a>
 800cec2:	bf00      	nop
 800cec4:	200004a4 	.word	0x200004a4
 800cec8:	200004a8 	.word	0x200004a8

0800cecc <__ssputs_r>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	688e      	ldr	r6, [r1, #8]
 800ced2:	4682      	mov	sl, r0
 800ced4:	429e      	cmp	r6, r3
 800ced6:	460c      	mov	r4, r1
 800ced8:	4690      	mov	r8, r2
 800ceda:	461f      	mov	r7, r3
 800cedc:	d838      	bhi.n	800cf50 <__ssputs_r+0x84>
 800cede:	898a      	ldrh	r2, [r1, #12]
 800cee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cee4:	d032      	beq.n	800cf4c <__ssputs_r+0x80>
 800cee6:	6825      	ldr	r5, [r4, #0]
 800cee8:	6909      	ldr	r1, [r1, #16]
 800ceea:	3301      	adds	r3, #1
 800ceec:	eba5 0901 	sub.w	r9, r5, r1
 800cef0:	6965      	ldr	r5, [r4, #20]
 800cef2:	444b      	add	r3, r9
 800cef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cefc:	106d      	asrs	r5, r5, #1
 800cefe:	429d      	cmp	r5, r3
 800cf00:	bf38      	it	cc
 800cf02:	461d      	movcc	r5, r3
 800cf04:	0553      	lsls	r3, r2, #21
 800cf06:	d531      	bpl.n	800cf6c <__ssputs_r+0xa0>
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7ff ff85 	bl	800ce18 <_malloc_r>
 800cf0e:	4606      	mov	r6, r0
 800cf10:	b950      	cbnz	r0, 800cf28 <__ssputs_r+0x5c>
 800cf12:	230c      	movs	r3, #12
 800cf14:	f04f 30ff 	mov.w	r0, #4294967295
 800cf18:	f8ca 3000 	str.w	r3, [sl]
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf28:	464a      	mov	r2, r9
 800cf2a:	6921      	ldr	r1, [r4, #16]
 800cf2c:	f7ff fb44 	bl	800c5b8 <memcpy>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	6126      	str	r6, [r4, #16]
 800cf3e:	444e      	add	r6, r9
 800cf40:	6026      	str	r6, [r4, #0]
 800cf42:	463e      	mov	r6, r7
 800cf44:	6165      	str	r5, [r4, #20]
 800cf46:	eba5 0509 	sub.w	r5, r5, r9
 800cf4a:	60a5      	str	r5, [r4, #8]
 800cf4c:	42be      	cmp	r6, r7
 800cf4e:	d900      	bls.n	800cf52 <__ssputs_r+0x86>
 800cf50:	463e      	mov	r6, r7
 800cf52:	4632      	mov	r2, r6
 800cf54:	4641      	mov	r1, r8
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	f000 fcba 	bl	800d8d0 <memmove>
 800cf5c:	68a3      	ldr	r3, [r4, #8]
 800cf5e:	6822      	ldr	r2, [r4, #0]
 800cf60:	1b9b      	subs	r3, r3, r6
 800cf62:	4432      	add	r2, r6
 800cf64:	2000      	movs	r0, #0
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	6022      	str	r2, [r4, #0]
 800cf6a:	e7db      	b.n	800cf24 <__ssputs_r+0x58>
 800cf6c:	462a      	mov	r2, r5
 800cf6e:	f000 fcd5 	bl	800d91c <_realloc_r>
 800cf72:	4606      	mov	r6, r0
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d1e1      	bne.n	800cf3c <__ssputs_r+0x70>
 800cf78:	4650      	mov	r0, sl
 800cf7a:	6921      	ldr	r1, [r4, #16]
 800cf7c:	f7ff ff00 	bl	800cd80 <_free_r>
 800cf80:	e7c7      	b.n	800cf12 <__ssputs_r+0x46>
	...

0800cf84 <_svfiprintf_r>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	4698      	mov	r8, r3
 800cf8a:	898b      	ldrh	r3, [r1, #12]
 800cf8c:	4607      	mov	r7, r0
 800cf8e:	061b      	lsls	r3, r3, #24
 800cf90:	460d      	mov	r5, r1
 800cf92:	4614      	mov	r4, r2
 800cf94:	b09d      	sub	sp, #116	; 0x74
 800cf96:	d50e      	bpl.n	800cfb6 <_svfiprintf_r+0x32>
 800cf98:	690b      	ldr	r3, [r1, #16]
 800cf9a:	b963      	cbnz	r3, 800cfb6 <_svfiprintf_r+0x32>
 800cf9c:	2140      	movs	r1, #64	; 0x40
 800cf9e:	f7ff ff3b 	bl	800ce18 <_malloc_r>
 800cfa2:	6028      	str	r0, [r5, #0]
 800cfa4:	6128      	str	r0, [r5, #16]
 800cfa6:	b920      	cbnz	r0, 800cfb2 <_svfiprintf_r+0x2e>
 800cfa8:	230c      	movs	r3, #12
 800cfaa:	603b      	str	r3, [r7, #0]
 800cfac:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb0:	e0d1      	b.n	800d156 <_svfiprintf_r+0x1d2>
 800cfb2:	2340      	movs	r3, #64	; 0x40
 800cfb4:	616b      	str	r3, [r5, #20]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfba:	2320      	movs	r3, #32
 800cfbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cfc0:	2330      	movs	r3, #48	; 0x30
 800cfc2:	f04f 0901 	mov.w	r9, #1
 800cfc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d170 <_svfiprintf_r+0x1ec>
 800cfce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfd2:	4623      	mov	r3, r4
 800cfd4:	469a      	mov	sl, r3
 800cfd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfda:	b10a      	cbz	r2, 800cfe0 <_svfiprintf_r+0x5c>
 800cfdc:	2a25      	cmp	r2, #37	; 0x25
 800cfde:	d1f9      	bne.n	800cfd4 <_svfiprintf_r+0x50>
 800cfe0:	ebba 0b04 	subs.w	fp, sl, r4
 800cfe4:	d00b      	beq.n	800cffe <_svfiprintf_r+0x7a>
 800cfe6:	465b      	mov	r3, fp
 800cfe8:	4622      	mov	r2, r4
 800cfea:	4629      	mov	r1, r5
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff ff6d 	bl	800cecc <__ssputs_r>
 800cff2:	3001      	adds	r0, #1
 800cff4:	f000 80aa 	beq.w	800d14c <_svfiprintf_r+0x1c8>
 800cff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cffa:	445a      	add	r2, fp
 800cffc:	9209      	str	r2, [sp, #36]	; 0x24
 800cffe:	f89a 3000 	ldrb.w	r3, [sl]
 800d002:	2b00      	cmp	r3, #0
 800d004:	f000 80a2 	beq.w	800d14c <_svfiprintf_r+0x1c8>
 800d008:	2300      	movs	r3, #0
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d012:	f10a 0a01 	add.w	sl, sl, #1
 800d016:	9304      	str	r3, [sp, #16]
 800d018:	9307      	str	r3, [sp, #28]
 800d01a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d01e:	931a      	str	r3, [sp, #104]	; 0x68
 800d020:	4654      	mov	r4, sl
 800d022:	2205      	movs	r2, #5
 800d024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d028:	4851      	ldr	r0, [pc, #324]	; (800d170 <_svfiprintf_r+0x1ec>)
 800d02a:	f000 fc43 	bl	800d8b4 <memchr>
 800d02e:	9a04      	ldr	r2, [sp, #16]
 800d030:	b9d8      	cbnz	r0, 800d06a <_svfiprintf_r+0xe6>
 800d032:	06d0      	lsls	r0, r2, #27
 800d034:	bf44      	itt	mi
 800d036:	2320      	movmi	r3, #32
 800d038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d03c:	0711      	lsls	r1, r2, #28
 800d03e:	bf44      	itt	mi
 800d040:	232b      	movmi	r3, #43	; 0x2b
 800d042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d046:	f89a 3000 	ldrb.w	r3, [sl]
 800d04a:	2b2a      	cmp	r3, #42	; 0x2a
 800d04c:	d015      	beq.n	800d07a <_svfiprintf_r+0xf6>
 800d04e:	4654      	mov	r4, sl
 800d050:	2000      	movs	r0, #0
 800d052:	f04f 0c0a 	mov.w	ip, #10
 800d056:	9a07      	ldr	r2, [sp, #28]
 800d058:	4621      	mov	r1, r4
 800d05a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d05e:	3b30      	subs	r3, #48	; 0x30
 800d060:	2b09      	cmp	r3, #9
 800d062:	d94e      	bls.n	800d102 <_svfiprintf_r+0x17e>
 800d064:	b1b0      	cbz	r0, 800d094 <_svfiprintf_r+0x110>
 800d066:	9207      	str	r2, [sp, #28]
 800d068:	e014      	b.n	800d094 <_svfiprintf_r+0x110>
 800d06a:	eba0 0308 	sub.w	r3, r0, r8
 800d06e:	fa09 f303 	lsl.w	r3, r9, r3
 800d072:	4313      	orrs	r3, r2
 800d074:	46a2      	mov	sl, r4
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	e7d2      	b.n	800d020 <_svfiprintf_r+0x9c>
 800d07a:	9b03      	ldr	r3, [sp, #12]
 800d07c:	1d19      	adds	r1, r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	9103      	str	r1, [sp, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	bfbb      	ittet	lt
 800d086:	425b      	neglt	r3, r3
 800d088:	f042 0202 	orrlt.w	r2, r2, #2
 800d08c:	9307      	strge	r3, [sp, #28]
 800d08e:	9307      	strlt	r3, [sp, #28]
 800d090:	bfb8      	it	lt
 800d092:	9204      	strlt	r2, [sp, #16]
 800d094:	7823      	ldrb	r3, [r4, #0]
 800d096:	2b2e      	cmp	r3, #46	; 0x2e
 800d098:	d10c      	bne.n	800d0b4 <_svfiprintf_r+0x130>
 800d09a:	7863      	ldrb	r3, [r4, #1]
 800d09c:	2b2a      	cmp	r3, #42	; 0x2a
 800d09e:	d135      	bne.n	800d10c <_svfiprintf_r+0x188>
 800d0a0:	9b03      	ldr	r3, [sp, #12]
 800d0a2:	3402      	adds	r4, #2
 800d0a4:	1d1a      	adds	r2, r3, #4
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	9203      	str	r2, [sp, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	bfb8      	it	lt
 800d0ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0b2:	9305      	str	r3, [sp, #20]
 800d0b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d180 <_svfiprintf_r+0x1fc>
 800d0b8:	2203      	movs	r2, #3
 800d0ba:	4650      	mov	r0, sl
 800d0bc:	7821      	ldrb	r1, [r4, #0]
 800d0be:	f000 fbf9 	bl	800d8b4 <memchr>
 800d0c2:	b140      	cbz	r0, 800d0d6 <_svfiprintf_r+0x152>
 800d0c4:	2340      	movs	r3, #64	; 0x40
 800d0c6:	eba0 000a 	sub.w	r0, r0, sl
 800d0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d0ce:	9b04      	ldr	r3, [sp, #16]
 800d0d0:	3401      	adds	r4, #1
 800d0d2:	4303      	orrs	r3, r0
 800d0d4:	9304      	str	r3, [sp, #16]
 800d0d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0da:	2206      	movs	r2, #6
 800d0dc:	4825      	ldr	r0, [pc, #148]	; (800d174 <_svfiprintf_r+0x1f0>)
 800d0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0e2:	f000 fbe7 	bl	800d8b4 <memchr>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d038      	beq.n	800d15c <_svfiprintf_r+0x1d8>
 800d0ea:	4b23      	ldr	r3, [pc, #140]	; (800d178 <_svfiprintf_r+0x1f4>)
 800d0ec:	bb1b      	cbnz	r3, 800d136 <_svfiprintf_r+0x1b2>
 800d0ee:	9b03      	ldr	r3, [sp, #12]
 800d0f0:	3307      	adds	r3, #7
 800d0f2:	f023 0307 	bic.w	r3, r3, #7
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	9303      	str	r3, [sp, #12]
 800d0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fc:	4433      	add	r3, r6
 800d0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d100:	e767      	b.n	800cfd2 <_svfiprintf_r+0x4e>
 800d102:	460c      	mov	r4, r1
 800d104:	2001      	movs	r0, #1
 800d106:	fb0c 3202 	mla	r2, ip, r2, r3
 800d10a:	e7a5      	b.n	800d058 <_svfiprintf_r+0xd4>
 800d10c:	2300      	movs	r3, #0
 800d10e:	f04f 0c0a 	mov.w	ip, #10
 800d112:	4619      	mov	r1, r3
 800d114:	3401      	adds	r4, #1
 800d116:	9305      	str	r3, [sp, #20]
 800d118:	4620      	mov	r0, r4
 800d11a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d11e:	3a30      	subs	r2, #48	; 0x30
 800d120:	2a09      	cmp	r2, #9
 800d122:	d903      	bls.n	800d12c <_svfiprintf_r+0x1a8>
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0c5      	beq.n	800d0b4 <_svfiprintf_r+0x130>
 800d128:	9105      	str	r1, [sp, #20]
 800d12a:	e7c3      	b.n	800d0b4 <_svfiprintf_r+0x130>
 800d12c:	4604      	mov	r4, r0
 800d12e:	2301      	movs	r3, #1
 800d130:	fb0c 2101 	mla	r1, ip, r1, r2
 800d134:	e7f0      	b.n	800d118 <_svfiprintf_r+0x194>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462a      	mov	r2, r5
 800d13c:	4638      	mov	r0, r7
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <_svfiprintf_r+0x1f8>)
 800d140:	a904      	add	r1, sp, #16
 800d142:	f3af 8000 	nop.w
 800d146:	1c42      	adds	r2, r0, #1
 800d148:	4606      	mov	r6, r0
 800d14a:	d1d6      	bne.n	800d0fa <_svfiprintf_r+0x176>
 800d14c:	89ab      	ldrh	r3, [r5, #12]
 800d14e:	065b      	lsls	r3, r3, #25
 800d150:	f53f af2c 	bmi.w	800cfac <_svfiprintf_r+0x28>
 800d154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d156:	b01d      	add	sp, #116	; 0x74
 800d158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d15c:	ab03      	add	r3, sp, #12
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	462a      	mov	r2, r5
 800d162:	4638      	mov	r0, r7
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <_svfiprintf_r+0x1f8>)
 800d166:	a904      	add	r1, sp, #16
 800d168:	f000 f9d4 	bl	800d514 <_printf_i>
 800d16c:	e7eb      	b.n	800d146 <_svfiprintf_r+0x1c2>
 800d16e:	bf00      	nop
 800d170:	0800dca0 	.word	0x0800dca0
 800d174:	0800dcaa 	.word	0x0800dcaa
 800d178:	00000000 	.word	0x00000000
 800d17c:	0800cecd 	.word	0x0800cecd
 800d180:	0800dca6 	.word	0x0800dca6

0800d184 <__sfputc_r>:
 800d184:	6893      	ldr	r3, [r2, #8]
 800d186:	b410      	push	{r4}
 800d188:	3b01      	subs	r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	6093      	str	r3, [r2, #8]
 800d18e:	da07      	bge.n	800d1a0 <__sfputc_r+0x1c>
 800d190:	6994      	ldr	r4, [r2, #24]
 800d192:	42a3      	cmp	r3, r4
 800d194:	db01      	blt.n	800d19a <__sfputc_r+0x16>
 800d196:	290a      	cmp	r1, #10
 800d198:	d102      	bne.n	800d1a0 <__sfputc_r+0x1c>
 800d19a:	bc10      	pop	{r4}
 800d19c:	f7ff bb12 	b.w	800c7c4 <__swbuf_r>
 800d1a0:	6813      	ldr	r3, [r2, #0]
 800d1a2:	1c58      	adds	r0, r3, #1
 800d1a4:	6010      	str	r0, [r2, #0]
 800d1a6:	7019      	strb	r1, [r3, #0]
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	bc10      	pop	{r4}
 800d1ac:	4770      	bx	lr

0800d1ae <__sfputs_r>:
 800d1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	460f      	mov	r7, r1
 800d1b4:	4614      	mov	r4, r2
 800d1b6:	18d5      	adds	r5, r2, r3
 800d1b8:	42ac      	cmp	r4, r5
 800d1ba:	d101      	bne.n	800d1c0 <__sfputs_r+0x12>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e007      	b.n	800d1d0 <__sfputs_r+0x22>
 800d1c0:	463a      	mov	r2, r7
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c8:	f7ff ffdc 	bl	800d184 <__sfputc_r>
 800d1cc:	1c43      	adds	r3, r0, #1
 800d1ce:	d1f3      	bne.n	800d1b8 <__sfputs_r+0xa>
 800d1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1d4 <_vfiprintf_r>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	460d      	mov	r5, r1
 800d1da:	4614      	mov	r4, r2
 800d1dc:	4698      	mov	r8, r3
 800d1de:	4606      	mov	r6, r0
 800d1e0:	b09d      	sub	sp, #116	; 0x74
 800d1e2:	b118      	cbz	r0, 800d1ec <_vfiprintf_r+0x18>
 800d1e4:	6983      	ldr	r3, [r0, #24]
 800d1e6:	b90b      	cbnz	r3, 800d1ec <_vfiprintf_r+0x18>
 800d1e8:	f7ff fcc6 	bl	800cb78 <__sinit>
 800d1ec:	4b89      	ldr	r3, [pc, #548]	; (800d414 <_vfiprintf_r+0x240>)
 800d1ee:	429d      	cmp	r5, r3
 800d1f0:	d11b      	bne.n	800d22a <_vfiprintf_r+0x56>
 800d1f2:	6875      	ldr	r5, [r6, #4]
 800d1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1f6:	07d9      	lsls	r1, r3, #31
 800d1f8:	d405      	bmi.n	800d206 <_vfiprintf_r+0x32>
 800d1fa:	89ab      	ldrh	r3, [r5, #12]
 800d1fc:	059a      	lsls	r2, r3, #22
 800d1fe:	d402      	bmi.n	800d206 <_vfiprintf_r+0x32>
 800d200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d202:	f7ff fd57 	bl	800ccb4 <__retarget_lock_acquire_recursive>
 800d206:	89ab      	ldrh	r3, [r5, #12]
 800d208:	071b      	lsls	r3, r3, #28
 800d20a:	d501      	bpl.n	800d210 <_vfiprintf_r+0x3c>
 800d20c:	692b      	ldr	r3, [r5, #16]
 800d20e:	b9eb      	cbnz	r3, 800d24c <_vfiprintf_r+0x78>
 800d210:	4629      	mov	r1, r5
 800d212:	4630      	mov	r0, r6
 800d214:	f7ff fb28 	bl	800c868 <__swsetup_r>
 800d218:	b1c0      	cbz	r0, 800d24c <_vfiprintf_r+0x78>
 800d21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d21c:	07dc      	lsls	r4, r3, #31
 800d21e:	d50e      	bpl.n	800d23e <_vfiprintf_r+0x6a>
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	b01d      	add	sp, #116	; 0x74
 800d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d22a:	4b7b      	ldr	r3, [pc, #492]	; (800d418 <_vfiprintf_r+0x244>)
 800d22c:	429d      	cmp	r5, r3
 800d22e:	d101      	bne.n	800d234 <_vfiprintf_r+0x60>
 800d230:	68b5      	ldr	r5, [r6, #8]
 800d232:	e7df      	b.n	800d1f4 <_vfiprintf_r+0x20>
 800d234:	4b79      	ldr	r3, [pc, #484]	; (800d41c <_vfiprintf_r+0x248>)
 800d236:	429d      	cmp	r5, r3
 800d238:	bf08      	it	eq
 800d23a:	68f5      	ldreq	r5, [r6, #12]
 800d23c:	e7da      	b.n	800d1f4 <_vfiprintf_r+0x20>
 800d23e:	89ab      	ldrh	r3, [r5, #12]
 800d240:	0598      	lsls	r0, r3, #22
 800d242:	d4ed      	bmi.n	800d220 <_vfiprintf_r+0x4c>
 800d244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d246:	f7ff fd36 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d24a:	e7e9      	b.n	800d220 <_vfiprintf_r+0x4c>
 800d24c:	2300      	movs	r3, #0
 800d24e:	9309      	str	r3, [sp, #36]	; 0x24
 800d250:	2320      	movs	r3, #32
 800d252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d256:	2330      	movs	r3, #48	; 0x30
 800d258:	f04f 0901 	mov.w	r9, #1
 800d25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d260:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d420 <_vfiprintf_r+0x24c>
 800d264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d268:	4623      	mov	r3, r4
 800d26a:	469a      	mov	sl, r3
 800d26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d270:	b10a      	cbz	r2, 800d276 <_vfiprintf_r+0xa2>
 800d272:	2a25      	cmp	r2, #37	; 0x25
 800d274:	d1f9      	bne.n	800d26a <_vfiprintf_r+0x96>
 800d276:	ebba 0b04 	subs.w	fp, sl, r4
 800d27a:	d00b      	beq.n	800d294 <_vfiprintf_r+0xc0>
 800d27c:	465b      	mov	r3, fp
 800d27e:	4622      	mov	r2, r4
 800d280:	4629      	mov	r1, r5
 800d282:	4630      	mov	r0, r6
 800d284:	f7ff ff93 	bl	800d1ae <__sfputs_r>
 800d288:	3001      	adds	r0, #1
 800d28a:	f000 80aa 	beq.w	800d3e2 <_vfiprintf_r+0x20e>
 800d28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d290:	445a      	add	r2, fp
 800d292:	9209      	str	r2, [sp, #36]	; 0x24
 800d294:	f89a 3000 	ldrb.w	r3, [sl]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f000 80a2 	beq.w	800d3e2 <_vfiprintf_r+0x20e>
 800d29e:	2300      	movs	r3, #0
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a8:	f10a 0a01 	add.w	sl, sl, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	9307      	str	r3, [sp, #28]
 800d2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2205      	movs	r2, #5
 800d2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2be:	4858      	ldr	r0, [pc, #352]	; (800d420 <_vfiprintf_r+0x24c>)
 800d2c0:	f000 faf8 	bl	800d8b4 <memchr>
 800d2c4:	9a04      	ldr	r2, [sp, #16]
 800d2c6:	b9d8      	cbnz	r0, 800d300 <_vfiprintf_r+0x12c>
 800d2c8:	06d1      	lsls	r1, r2, #27
 800d2ca:	bf44      	itt	mi
 800d2cc:	2320      	movmi	r3, #32
 800d2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d2:	0713      	lsls	r3, r2, #28
 800d2d4:	bf44      	itt	mi
 800d2d6:	232b      	movmi	r3, #43	; 0x2b
 800d2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2e2:	d015      	beq.n	800d310 <_vfiprintf_r+0x13c>
 800d2e4:	4654      	mov	r4, sl
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	f04f 0c0a 	mov.w	ip, #10
 800d2ec:	9a07      	ldr	r2, [sp, #28]
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f4:	3b30      	subs	r3, #48	; 0x30
 800d2f6:	2b09      	cmp	r3, #9
 800d2f8:	d94e      	bls.n	800d398 <_vfiprintf_r+0x1c4>
 800d2fa:	b1b0      	cbz	r0, 800d32a <_vfiprintf_r+0x156>
 800d2fc:	9207      	str	r2, [sp, #28]
 800d2fe:	e014      	b.n	800d32a <_vfiprintf_r+0x156>
 800d300:	eba0 0308 	sub.w	r3, r0, r8
 800d304:	fa09 f303 	lsl.w	r3, r9, r3
 800d308:	4313      	orrs	r3, r2
 800d30a:	46a2      	mov	sl, r4
 800d30c:	9304      	str	r3, [sp, #16]
 800d30e:	e7d2      	b.n	800d2b6 <_vfiprintf_r+0xe2>
 800d310:	9b03      	ldr	r3, [sp, #12]
 800d312:	1d19      	adds	r1, r3, #4
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	9103      	str	r1, [sp, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bfbb      	ittet	lt
 800d31c:	425b      	neglt	r3, r3
 800d31e:	f042 0202 	orrlt.w	r2, r2, #2
 800d322:	9307      	strge	r3, [sp, #28]
 800d324:	9307      	strlt	r3, [sp, #28]
 800d326:	bfb8      	it	lt
 800d328:	9204      	strlt	r2, [sp, #16]
 800d32a:	7823      	ldrb	r3, [r4, #0]
 800d32c:	2b2e      	cmp	r3, #46	; 0x2e
 800d32e:	d10c      	bne.n	800d34a <_vfiprintf_r+0x176>
 800d330:	7863      	ldrb	r3, [r4, #1]
 800d332:	2b2a      	cmp	r3, #42	; 0x2a
 800d334:	d135      	bne.n	800d3a2 <_vfiprintf_r+0x1ce>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	3402      	adds	r4, #2
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	9203      	str	r2, [sp, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	bfb8      	it	lt
 800d344:	f04f 33ff 	movlt.w	r3, #4294967295
 800d348:	9305      	str	r3, [sp, #20]
 800d34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d430 <_vfiprintf_r+0x25c>
 800d34e:	2203      	movs	r2, #3
 800d350:	4650      	mov	r0, sl
 800d352:	7821      	ldrb	r1, [r4, #0]
 800d354:	f000 faae 	bl	800d8b4 <memchr>
 800d358:	b140      	cbz	r0, 800d36c <_vfiprintf_r+0x198>
 800d35a:	2340      	movs	r3, #64	; 0x40
 800d35c:	eba0 000a 	sub.w	r0, r0, sl
 800d360:	fa03 f000 	lsl.w	r0, r3, r0
 800d364:	9b04      	ldr	r3, [sp, #16]
 800d366:	3401      	adds	r4, #1
 800d368:	4303      	orrs	r3, r0
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d370:	2206      	movs	r2, #6
 800d372:	482c      	ldr	r0, [pc, #176]	; (800d424 <_vfiprintf_r+0x250>)
 800d374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d378:	f000 fa9c 	bl	800d8b4 <memchr>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d03f      	beq.n	800d400 <_vfiprintf_r+0x22c>
 800d380:	4b29      	ldr	r3, [pc, #164]	; (800d428 <_vfiprintf_r+0x254>)
 800d382:	bb1b      	cbnz	r3, 800d3cc <_vfiprintf_r+0x1f8>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	3307      	adds	r3, #7
 800d388:	f023 0307 	bic.w	r3, r3, #7
 800d38c:	3308      	adds	r3, #8
 800d38e:	9303      	str	r3, [sp, #12]
 800d390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d392:	443b      	add	r3, r7
 800d394:	9309      	str	r3, [sp, #36]	; 0x24
 800d396:	e767      	b.n	800d268 <_vfiprintf_r+0x94>
 800d398:	460c      	mov	r4, r1
 800d39a:	2001      	movs	r0, #1
 800d39c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3a0:	e7a5      	b.n	800d2ee <_vfiprintf_r+0x11a>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f04f 0c0a 	mov.w	ip, #10
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	3401      	adds	r4, #1
 800d3ac:	9305      	str	r3, [sp, #20]
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b4:	3a30      	subs	r2, #48	; 0x30
 800d3b6:	2a09      	cmp	r2, #9
 800d3b8:	d903      	bls.n	800d3c2 <_vfiprintf_r+0x1ee>
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0c5      	beq.n	800d34a <_vfiprintf_r+0x176>
 800d3be:	9105      	str	r1, [sp, #20]
 800d3c0:	e7c3      	b.n	800d34a <_vfiprintf_r+0x176>
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ca:	e7f0      	b.n	800d3ae <_vfiprintf_r+0x1da>
 800d3cc:	ab03      	add	r3, sp, #12
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	4b15      	ldr	r3, [pc, #84]	; (800d42c <_vfiprintf_r+0x258>)
 800d3d6:	a904      	add	r1, sp, #16
 800d3d8:	f3af 8000 	nop.w
 800d3dc:	4607      	mov	r7, r0
 800d3de:	1c78      	adds	r0, r7, #1
 800d3e0:	d1d6      	bne.n	800d390 <_vfiprintf_r+0x1bc>
 800d3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3e4:	07d9      	lsls	r1, r3, #31
 800d3e6:	d405      	bmi.n	800d3f4 <_vfiprintf_r+0x220>
 800d3e8:	89ab      	ldrh	r3, [r5, #12]
 800d3ea:	059a      	lsls	r2, r3, #22
 800d3ec:	d402      	bmi.n	800d3f4 <_vfiprintf_r+0x220>
 800d3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3f0:	f7ff fc61 	bl	800ccb6 <__retarget_lock_release_recursive>
 800d3f4:	89ab      	ldrh	r3, [r5, #12]
 800d3f6:	065b      	lsls	r3, r3, #25
 800d3f8:	f53f af12 	bmi.w	800d220 <_vfiprintf_r+0x4c>
 800d3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3fe:	e711      	b.n	800d224 <_vfiprintf_r+0x50>
 800d400:	ab03      	add	r3, sp, #12
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	462a      	mov	r2, r5
 800d406:	4630      	mov	r0, r6
 800d408:	4b08      	ldr	r3, [pc, #32]	; (800d42c <_vfiprintf_r+0x258>)
 800d40a:	a904      	add	r1, sp, #16
 800d40c:	f000 f882 	bl	800d514 <_printf_i>
 800d410:	e7e4      	b.n	800d3dc <_vfiprintf_r+0x208>
 800d412:	bf00      	nop
 800d414:	0800dc60 	.word	0x0800dc60
 800d418:	0800dc80 	.word	0x0800dc80
 800d41c:	0800dc40 	.word	0x0800dc40
 800d420:	0800dca0 	.word	0x0800dca0
 800d424:	0800dcaa 	.word	0x0800dcaa
 800d428:	00000000 	.word	0x00000000
 800d42c:	0800d1af 	.word	0x0800d1af
 800d430:	0800dca6 	.word	0x0800dca6

0800d434 <_printf_common>:
 800d434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d438:	4616      	mov	r6, r2
 800d43a:	4699      	mov	r9, r3
 800d43c:	688a      	ldr	r2, [r1, #8]
 800d43e:	690b      	ldr	r3, [r1, #16]
 800d440:	4607      	mov	r7, r0
 800d442:	4293      	cmp	r3, r2
 800d444:	bfb8      	it	lt
 800d446:	4613      	movlt	r3, r2
 800d448:	6033      	str	r3, [r6, #0]
 800d44a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d44e:	460c      	mov	r4, r1
 800d450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d454:	b10a      	cbz	r2, 800d45a <_printf_common+0x26>
 800d456:	3301      	adds	r3, #1
 800d458:	6033      	str	r3, [r6, #0]
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	0699      	lsls	r1, r3, #26
 800d45e:	bf42      	ittt	mi
 800d460:	6833      	ldrmi	r3, [r6, #0]
 800d462:	3302      	addmi	r3, #2
 800d464:	6033      	strmi	r3, [r6, #0]
 800d466:	6825      	ldr	r5, [r4, #0]
 800d468:	f015 0506 	ands.w	r5, r5, #6
 800d46c:	d106      	bne.n	800d47c <_printf_common+0x48>
 800d46e:	f104 0a19 	add.w	sl, r4, #25
 800d472:	68e3      	ldr	r3, [r4, #12]
 800d474:	6832      	ldr	r2, [r6, #0]
 800d476:	1a9b      	subs	r3, r3, r2
 800d478:	42ab      	cmp	r3, r5
 800d47a:	dc28      	bgt.n	800d4ce <_printf_common+0x9a>
 800d47c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d480:	1e13      	subs	r3, r2, #0
 800d482:	6822      	ldr	r2, [r4, #0]
 800d484:	bf18      	it	ne
 800d486:	2301      	movne	r3, #1
 800d488:	0692      	lsls	r2, r2, #26
 800d48a:	d42d      	bmi.n	800d4e8 <_printf_common+0xb4>
 800d48c:	4649      	mov	r1, r9
 800d48e:	4638      	mov	r0, r7
 800d490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d494:	47c0      	blx	r8
 800d496:	3001      	adds	r0, #1
 800d498:	d020      	beq.n	800d4dc <_printf_common+0xa8>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	68e5      	ldr	r5, [r4, #12]
 800d49e:	f003 0306 	and.w	r3, r3, #6
 800d4a2:	2b04      	cmp	r3, #4
 800d4a4:	bf18      	it	ne
 800d4a6:	2500      	movne	r5, #0
 800d4a8:	6832      	ldr	r2, [r6, #0]
 800d4aa:	f04f 0600 	mov.w	r6, #0
 800d4ae:	68a3      	ldr	r3, [r4, #8]
 800d4b0:	bf08      	it	eq
 800d4b2:	1aad      	subeq	r5, r5, r2
 800d4b4:	6922      	ldr	r2, [r4, #16]
 800d4b6:	bf08      	it	eq
 800d4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	bfc4      	itt	gt
 800d4c0:	1a9b      	subgt	r3, r3, r2
 800d4c2:	18ed      	addgt	r5, r5, r3
 800d4c4:	341a      	adds	r4, #26
 800d4c6:	42b5      	cmp	r5, r6
 800d4c8:	d11a      	bne.n	800d500 <_printf_common+0xcc>
 800d4ca:	2000      	movs	r0, #0
 800d4cc:	e008      	b.n	800d4e0 <_printf_common+0xac>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	4652      	mov	r2, sl
 800d4d2:	4649      	mov	r1, r9
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	47c0      	blx	r8
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d103      	bne.n	800d4e4 <_printf_common+0xb0>
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	e7c4      	b.n	800d472 <_printf_common+0x3e>
 800d4e8:	2030      	movs	r0, #48	; 0x30
 800d4ea:	18e1      	adds	r1, r4, r3
 800d4ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4f0:	1c5a      	adds	r2, r3, #1
 800d4f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4f6:	4422      	add	r2, r4
 800d4f8:	3302      	adds	r3, #2
 800d4fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4fe:	e7c5      	b.n	800d48c <_printf_common+0x58>
 800d500:	2301      	movs	r3, #1
 800d502:	4622      	mov	r2, r4
 800d504:	4649      	mov	r1, r9
 800d506:	4638      	mov	r0, r7
 800d508:	47c0      	blx	r8
 800d50a:	3001      	adds	r0, #1
 800d50c:	d0e6      	beq.n	800d4dc <_printf_common+0xa8>
 800d50e:	3601      	adds	r6, #1
 800d510:	e7d9      	b.n	800d4c6 <_printf_common+0x92>
	...

0800d514 <_printf_i>:
 800d514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	460c      	mov	r4, r1
 800d51a:	7e27      	ldrb	r7, [r4, #24]
 800d51c:	4691      	mov	r9, r2
 800d51e:	2f78      	cmp	r7, #120	; 0x78
 800d520:	4680      	mov	r8, r0
 800d522:	469a      	mov	sl, r3
 800d524:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d52a:	d807      	bhi.n	800d53c <_printf_i+0x28>
 800d52c:	2f62      	cmp	r7, #98	; 0x62
 800d52e:	d80a      	bhi.n	800d546 <_printf_i+0x32>
 800d530:	2f00      	cmp	r7, #0
 800d532:	f000 80d9 	beq.w	800d6e8 <_printf_i+0x1d4>
 800d536:	2f58      	cmp	r7, #88	; 0x58
 800d538:	f000 80a4 	beq.w	800d684 <_printf_i+0x170>
 800d53c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d544:	e03a      	b.n	800d5bc <_printf_i+0xa8>
 800d546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d54a:	2b15      	cmp	r3, #21
 800d54c:	d8f6      	bhi.n	800d53c <_printf_i+0x28>
 800d54e:	a001      	add	r0, pc, #4	; (adr r0, 800d554 <_printf_i+0x40>)
 800d550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d5c1 	.word	0x0800d5c1
 800d55c:	0800d53d 	.word	0x0800d53d
 800d560:	0800d53d 	.word	0x0800d53d
 800d564:	0800d53d 	.word	0x0800d53d
 800d568:	0800d53d 	.word	0x0800d53d
 800d56c:	0800d5c1 	.word	0x0800d5c1
 800d570:	0800d53d 	.word	0x0800d53d
 800d574:	0800d53d 	.word	0x0800d53d
 800d578:	0800d53d 	.word	0x0800d53d
 800d57c:	0800d53d 	.word	0x0800d53d
 800d580:	0800d6cf 	.word	0x0800d6cf
 800d584:	0800d5f1 	.word	0x0800d5f1
 800d588:	0800d6b1 	.word	0x0800d6b1
 800d58c:	0800d53d 	.word	0x0800d53d
 800d590:	0800d53d 	.word	0x0800d53d
 800d594:	0800d6f1 	.word	0x0800d6f1
 800d598:	0800d53d 	.word	0x0800d53d
 800d59c:	0800d5f1 	.word	0x0800d5f1
 800d5a0:	0800d53d 	.word	0x0800d53d
 800d5a4:	0800d53d 	.word	0x0800d53d
 800d5a8:	0800d6b9 	.word	0x0800d6b9
 800d5ac:	680b      	ldr	r3, [r1, #0]
 800d5ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d5b2:	1d1a      	adds	r2, r3, #4
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	600a      	str	r2, [r1, #0]
 800d5b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e0a4      	b.n	800d70a <_printf_i+0x1f6>
 800d5c0:	6825      	ldr	r5, [r4, #0]
 800d5c2:	6808      	ldr	r0, [r1, #0]
 800d5c4:	062e      	lsls	r6, r5, #24
 800d5c6:	f100 0304 	add.w	r3, r0, #4
 800d5ca:	d50a      	bpl.n	800d5e2 <_printf_i+0xce>
 800d5cc:	6805      	ldr	r5, [r0, #0]
 800d5ce:	600b      	str	r3, [r1, #0]
 800d5d0:	2d00      	cmp	r5, #0
 800d5d2:	da03      	bge.n	800d5dc <_printf_i+0xc8>
 800d5d4:	232d      	movs	r3, #45	; 0x2d
 800d5d6:	426d      	negs	r5, r5
 800d5d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5dc:	230a      	movs	r3, #10
 800d5de:	485e      	ldr	r0, [pc, #376]	; (800d758 <_printf_i+0x244>)
 800d5e0:	e019      	b.n	800d616 <_printf_i+0x102>
 800d5e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d5e6:	6805      	ldr	r5, [r0, #0]
 800d5e8:	600b      	str	r3, [r1, #0]
 800d5ea:	bf18      	it	ne
 800d5ec:	b22d      	sxthne	r5, r5
 800d5ee:	e7ef      	b.n	800d5d0 <_printf_i+0xbc>
 800d5f0:	680b      	ldr	r3, [r1, #0]
 800d5f2:	6825      	ldr	r5, [r4, #0]
 800d5f4:	1d18      	adds	r0, r3, #4
 800d5f6:	6008      	str	r0, [r1, #0]
 800d5f8:	0628      	lsls	r0, r5, #24
 800d5fa:	d501      	bpl.n	800d600 <_printf_i+0xec>
 800d5fc:	681d      	ldr	r5, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <_printf_i+0xf2>
 800d600:	0669      	lsls	r1, r5, #25
 800d602:	d5fb      	bpl.n	800d5fc <_printf_i+0xe8>
 800d604:	881d      	ldrh	r5, [r3, #0]
 800d606:	2f6f      	cmp	r7, #111	; 0x6f
 800d608:	bf0c      	ite	eq
 800d60a:	2308      	moveq	r3, #8
 800d60c:	230a      	movne	r3, #10
 800d60e:	4852      	ldr	r0, [pc, #328]	; (800d758 <_printf_i+0x244>)
 800d610:	2100      	movs	r1, #0
 800d612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d616:	6866      	ldr	r6, [r4, #4]
 800d618:	2e00      	cmp	r6, #0
 800d61a:	bfa8      	it	ge
 800d61c:	6821      	ldrge	r1, [r4, #0]
 800d61e:	60a6      	str	r6, [r4, #8]
 800d620:	bfa4      	itt	ge
 800d622:	f021 0104 	bicge.w	r1, r1, #4
 800d626:	6021      	strge	r1, [r4, #0]
 800d628:	b90d      	cbnz	r5, 800d62e <_printf_i+0x11a>
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d04d      	beq.n	800d6ca <_printf_i+0x1b6>
 800d62e:	4616      	mov	r6, r2
 800d630:	fbb5 f1f3 	udiv	r1, r5, r3
 800d634:	fb03 5711 	mls	r7, r3, r1, r5
 800d638:	5dc7      	ldrb	r7, [r0, r7]
 800d63a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d63e:	462f      	mov	r7, r5
 800d640:	42bb      	cmp	r3, r7
 800d642:	460d      	mov	r5, r1
 800d644:	d9f4      	bls.n	800d630 <_printf_i+0x11c>
 800d646:	2b08      	cmp	r3, #8
 800d648:	d10b      	bne.n	800d662 <_printf_i+0x14e>
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	07df      	lsls	r7, r3, #31
 800d64e:	d508      	bpl.n	800d662 <_printf_i+0x14e>
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	6861      	ldr	r1, [r4, #4]
 800d654:	4299      	cmp	r1, r3
 800d656:	bfde      	ittt	le
 800d658:	2330      	movle	r3, #48	; 0x30
 800d65a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d65e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d662:	1b92      	subs	r2, r2, r6
 800d664:	6122      	str	r2, [r4, #16]
 800d666:	464b      	mov	r3, r9
 800d668:	4621      	mov	r1, r4
 800d66a:	4640      	mov	r0, r8
 800d66c:	f8cd a000 	str.w	sl, [sp]
 800d670:	aa03      	add	r2, sp, #12
 800d672:	f7ff fedf 	bl	800d434 <_printf_common>
 800d676:	3001      	adds	r0, #1
 800d678:	d14c      	bne.n	800d714 <_printf_i+0x200>
 800d67a:	f04f 30ff 	mov.w	r0, #4294967295
 800d67e:	b004      	add	sp, #16
 800d680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d684:	4834      	ldr	r0, [pc, #208]	; (800d758 <_printf_i+0x244>)
 800d686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d68a:	680e      	ldr	r6, [r1, #0]
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d692:	061f      	lsls	r7, r3, #24
 800d694:	600e      	str	r6, [r1, #0]
 800d696:	d514      	bpl.n	800d6c2 <_printf_i+0x1ae>
 800d698:	07d9      	lsls	r1, r3, #31
 800d69a:	bf44      	itt	mi
 800d69c:	f043 0320 	orrmi.w	r3, r3, #32
 800d6a0:	6023      	strmi	r3, [r4, #0]
 800d6a2:	b91d      	cbnz	r5, 800d6ac <_printf_i+0x198>
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	f023 0320 	bic.w	r3, r3, #32
 800d6aa:	6023      	str	r3, [r4, #0]
 800d6ac:	2310      	movs	r3, #16
 800d6ae:	e7af      	b.n	800d610 <_printf_i+0xfc>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	f043 0320 	orr.w	r3, r3, #32
 800d6b6:	6023      	str	r3, [r4, #0]
 800d6b8:	2378      	movs	r3, #120	; 0x78
 800d6ba:	4828      	ldr	r0, [pc, #160]	; (800d75c <_printf_i+0x248>)
 800d6bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6c0:	e7e3      	b.n	800d68a <_printf_i+0x176>
 800d6c2:	065e      	lsls	r6, r3, #25
 800d6c4:	bf48      	it	mi
 800d6c6:	b2ad      	uxthmi	r5, r5
 800d6c8:	e7e6      	b.n	800d698 <_printf_i+0x184>
 800d6ca:	4616      	mov	r6, r2
 800d6cc:	e7bb      	b.n	800d646 <_printf_i+0x132>
 800d6ce:	680b      	ldr	r3, [r1, #0]
 800d6d0:	6826      	ldr	r6, [r4, #0]
 800d6d2:	1d1d      	adds	r5, r3, #4
 800d6d4:	6960      	ldr	r0, [r4, #20]
 800d6d6:	600d      	str	r5, [r1, #0]
 800d6d8:	0635      	lsls	r5, r6, #24
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	d501      	bpl.n	800d6e2 <_printf_i+0x1ce>
 800d6de:	6018      	str	r0, [r3, #0]
 800d6e0:	e002      	b.n	800d6e8 <_printf_i+0x1d4>
 800d6e2:	0671      	lsls	r1, r6, #25
 800d6e4:	d5fb      	bpl.n	800d6de <_printf_i+0x1ca>
 800d6e6:	8018      	strh	r0, [r3, #0]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4616      	mov	r6, r2
 800d6ec:	6123      	str	r3, [r4, #16]
 800d6ee:	e7ba      	b.n	800d666 <_printf_i+0x152>
 800d6f0:	680b      	ldr	r3, [r1, #0]
 800d6f2:	1d1a      	adds	r2, r3, #4
 800d6f4:	600a      	str	r2, [r1, #0]
 800d6f6:	681e      	ldr	r6, [r3, #0]
 800d6f8:	2100      	movs	r1, #0
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	6862      	ldr	r2, [r4, #4]
 800d6fe:	f000 f8d9 	bl	800d8b4 <memchr>
 800d702:	b108      	cbz	r0, 800d708 <_printf_i+0x1f4>
 800d704:	1b80      	subs	r0, r0, r6
 800d706:	6060      	str	r0, [r4, #4]
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	2300      	movs	r3, #0
 800d70e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d712:	e7a8      	b.n	800d666 <_printf_i+0x152>
 800d714:	4632      	mov	r2, r6
 800d716:	4649      	mov	r1, r9
 800d718:	4640      	mov	r0, r8
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	47d0      	blx	sl
 800d71e:	3001      	adds	r0, #1
 800d720:	d0ab      	beq.n	800d67a <_printf_i+0x166>
 800d722:	6823      	ldr	r3, [r4, #0]
 800d724:	079b      	lsls	r3, r3, #30
 800d726:	d413      	bmi.n	800d750 <_printf_i+0x23c>
 800d728:	68e0      	ldr	r0, [r4, #12]
 800d72a:	9b03      	ldr	r3, [sp, #12]
 800d72c:	4298      	cmp	r0, r3
 800d72e:	bfb8      	it	lt
 800d730:	4618      	movlt	r0, r3
 800d732:	e7a4      	b.n	800d67e <_printf_i+0x16a>
 800d734:	2301      	movs	r3, #1
 800d736:	4632      	mov	r2, r6
 800d738:	4649      	mov	r1, r9
 800d73a:	4640      	mov	r0, r8
 800d73c:	47d0      	blx	sl
 800d73e:	3001      	adds	r0, #1
 800d740:	d09b      	beq.n	800d67a <_printf_i+0x166>
 800d742:	3501      	adds	r5, #1
 800d744:	68e3      	ldr	r3, [r4, #12]
 800d746:	9903      	ldr	r1, [sp, #12]
 800d748:	1a5b      	subs	r3, r3, r1
 800d74a:	42ab      	cmp	r3, r5
 800d74c:	dcf2      	bgt.n	800d734 <_printf_i+0x220>
 800d74e:	e7eb      	b.n	800d728 <_printf_i+0x214>
 800d750:	2500      	movs	r5, #0
 800d752:	f104 0619 	add.w	r6, r4, #25
 800d756:	e7f5      	b.n	800d744 <_printf_i+0x230>
 800d758:	0800dcb1 	.word	0x0800dcb1
 800d75c:	0800dcc2 	.word	0x0800dcc2

0800d760 <_sbrk_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	2300      	movs	r3, #0
 800d764:	4d05      	ldr	r5, [pc, #20]	; (800d77c <_sbrk_r+0x1c>)
 800d766:	4604      	mov	r4, r0
 800d768:	4608      	mov	r0, r1
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	f7f6 face 	bl	8003d0c <_sbrk>
 800d770:	1c43      	adds	r3, r0, #1
 800d772:	d102      	bne.n	800d77a <_sbrk_r+0x1a>
 800d774:	682b      	ldr	r3, [r5, #0]
 800d776:	b103      	cbz	r3, 800d77a <_sbrk_r+0x1a>
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	bd38      	pop	{r3, r4, r5, pc}
 800d77c:	200015bc 	.word	0x200015bc

0800d780 <__sread>:
 800d780:	b510      	push	{r4, lr}
 800d782:	460c      	mov	r4, r1
 800d784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d788:	f000 f8ee 	bl	800d968 <_read_r>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	bfab      	itete	ge
 800d790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d792:	89a3      	ldrhlt	r3, [r4, #12]
 800d794:	181b      	addge	r3, r3, r0
 800d796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d79a:	bfac      	ite	ge
 800d79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d79e:	81a3      	strhlt	r3, [r4, #12]
 800d7a0:	bd10      	pop	{r4, pc}

0800d7a2 <__swrite>:
 800d7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a6:	461f      	mov	r7, r3
 800d7a8:	898b      	ldrh	r3, [r1, #12]
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	05db      	lsls	r3, r3, #23
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	4616      	mov	r6, r2
 800d7b2:	d505      	bpl.n	800d7c0 <__swrite+0x1e>
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7bc:	f000 f868 	bl	800d890 <_lseek_r>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	4632      	mov	r2, r6
 800d7c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d6:	f000 b817 	b.w	800d808 <_write_r>

0800d7da <__sseek>:
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	460c      	mov	r4, r1
 800d7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e2:	f000 f855 	bl	800d890 <_lseek_r>
 800d7e6:	1c43      	adds	r3, r0, #1
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	bf15      	itete	ne
 800d7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d7f6:	81a3      	strheq	r3, [r4, #12]
 800d7f8:	bf18      	it	ne
 800d7fa:	81a3      	strhne	r3, [r4, #12]
 800d7fc:	bd10      	pop	{r4, pc}

0800d7fe <__sclose>:
 800d7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d802:	f000 b813 	b.w	800d82c <_close_r>
	...

0800d808 <_write_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4604      	mov	r4, r0
 800d80c:	4608      	mov	r0, r1
 800d80e:	4611      	mov	r1, r2
 800d810:	2200      	movs	r2, #0
 800d812:	4d05      	ldr	r5, [pc, #20]	; (800d828 <_write_r+0x20>)
 800d814:	602a      	str	r2, [r5, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	f7f4 fd24 	bl	8002264 <_write>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d102      	bne.n	800d826 <_write_r+0x1e>
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	b103      	cbz	r3, 800d826 <_write_r+0x1e>
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	bd38      	pop	{r3, r4, r5, pc}
 800d828:	200015bc 	.word	0x200015bc

0800d82c <_close_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	2300      	movs	r3, #0
 800d830:	4d05      	ldr	r5, [pc, #20]	; (800d848 <_close_r+0x1c>)
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	f7f6 fa37 	bl	8003caa <_close>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_close_r+0x1a>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_close_r+0x1a>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	200015bc 	.word	0x200015bc

0800d84c <_fstat_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	2300      	movs	r3, #0
 800d850:	4d06      	ldr	r5, [pc, #24]	; (800d86c <_fstat_r+0x20>)
 800d852:	4604      	mov	r4, r0
 800d854:	4608      	mov	r0, r1
 800d856:	4611      	mov	r1, r2
 800d858:	602b      	str	r3, [r5, #0]
 800d85a:	f7f6 fa31 	bl	8003cc0 <_fstat>
 800d85e:	1c43      	adds	r3, r0, #1
 800d860:	d102      	bne.n	800d868 <_fstat_r+0x1c>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	b103      	cbz	r3, 800d868 <_fstat_r+0x1c>
 800d866:	6023      	str	r3, [r4, #0]
 800d868:	bd38      	pop	{r3, r4, r5, pc}
 800d86a:	bf00      	nop
 800d86c:	200015bc 	.word	0x200015bc

0800d870 <_isatty_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	2300      	movs	r3, #0
 800d874:	4d05      	ldr	r5, [pc, #20]	; (800d88c <_isatty_r+0x1c>)
 800d876:	4604      	mov	r4, r0
 800d878:	4608      	mov	r0, r1
 800d87a:	602b      	str	r3, [r5, #0]
 800d87c:	f7f6 fa2f 	bl	8003cde <_isatty>
 800d880:	1c43      	adds	r3, r0, #1
 800d882:	d102      	bne.n	800d88a <_isatty_r+0x1a>
 800d884:	682b      	ldr	r3, [r5, #0]
 800d886:	b103      	cbz	r3, 800d88a <_isatty_r+0x1a>
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	bd38      	pop	{r3, r4, r5, pc}
 800d88c:	200015bc 	.word	0x200015bc

0800d890 <_lseek_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4604      	mov	r4, r0
 800d894:	4608      	mov	r0, r1
 800d896:	4611      	mov	r1, r2
 800d898:	2200      	movs	r2, #0
 800d89a:	4d05      	ldr	r5, [pc, #20]	; (800d8b0 <_lseek_r+0x20>)
 800d89c:	602a      	str	r2, [r5, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f7f6 fa27 	bl	8003cf2 <_lseek>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d102      	bne.n	800d8ae <_lseek_r+0x1e>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	b103      	cbz	r3, 800d8ae <_lseek_r+0x1e>
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	bd38      	pop	{r3, r4, r5, pc}
 800d8b0:	200015bc 	.word	0x200015bc

0800d8b4 <memchr>:
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	b2c9      	uxtb	r1, r1
 800d8ba:	4402      	add	r2, r0
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	d101      	bne.n	800d8c6 <memchr+0x12>
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e003      	b.n	800d8ce <memchr+0x1a>
 800d8c6:	7804      	ldrb	r4, [r0, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	428c      	cmp	r4, r1
 800d8cc:	d1f6      	bne.n	800d8bc <memchr+0x8>
 800d8ce:	bd10      	pop	{r4, pc}

0800d8d0 <memmove>:
 800d8d0:	4288      	cmp	r0, r1
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	eb01 0402 	add.w	r4, r1, r2
 800d8d8:	d902      	bls.n	800d8e0 <memmove+0x10>
 800d8da:	4284      	cmp	r4, r0
 800d8dc:	4623      	mov	r3, r4
 800d8de:	d807      	bhi.n	800d8f0 <memmove+0x20>
 800d8e0:	1e43      	subs	r3, r0, #1
 800d8e2:	42a1      	cmp	r1, r4
 800d8e4:	d008      	beq.n	800d8f8 <memmove+0x28>
 800d8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8ee:	e7f8      	b.n	800d8e2 <memmove+0x12>
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	4402      	add	r2, r0
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	d100      	bne.n	800d8fa <memmove+0x2a>
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d902:	e7f7      	b.n	800d8f4 <memmove+0x24>

0800d904 <__malloc_lock>:
 800d904:	4801      	ldr	r0, [pc, #4]	; (800d90c <__malloc_lock+0x8>)
 800d906:	f7ff b9d5 	b.w	800ccb4 <__retarget_lock_acquire_recursive>
 800d90a:	bf00      	nop
 800d90c:	200015b4 	.word	0x200015b4

0800d910 <__malloc_unlock>:
 800d910:	4801      	ldr	r0, [pc, #4]	; (800d918 <__malloc_unlock+0x8>)
 800d912:	f7ff b9d0 	b.w	800ccb6 <__retarget_lock_release_recursive>
 800d916:	bf00      	nop
 800d918:	200015b4 	.word	0x200015b4

0800d91c <_realloc_r>:
 800d91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91e:	4607      	mov	r7, r0
 800d920:	4614      	mov	r4, r2
 800d922:	460e      	mov	r6, r1
 800d924:	b921      	cbnz	r1, 800d930 <_realloc_r+0x14>
 800d926:	4611      	mov	r1, r2
 800d928:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d92c:	f7ff ba74 	b.w	800ce18 <_malloc_r>
 800d930:	b922      	cbnz	r2, 800d93c <_realloc_r+0x20>
 800d932:	f7ff fa25 	bl	800cd80 <_free_r>
 800d936:	4625      	mov	r5, r4
 800d938:	4628      	mov	r0, r5
 800d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d93c:	f000 f826 	bl	800d98c <_malloc_usable_size_r>
 800d940:	42a0      	cmp	r0, r4
 800d942:	d20f      	bcs.n	800d964 <_realloc_r+0x48>
 800d944:	4621      	mov	r1, r4
 800d946:	4638      	mov	r0, r7
 800d948:	f7ff fa66 	bl	800ce18 <_malloc_r>
 800d94c:	4605      	mov	r5, r0
 800d94e:	2800      	cmp	r0, #0
 800d950:	d0f2      	beq.n	800d938 <_realloc_r+0x1c>
 800d952:	4631      	mov	r1, r6
 800d954:	4622      	mov	r2, r4
 800d956:	f7fe fe2f 	bl	800c5b8 <memcpy>
 800d95a:	4631      	mov	r1, r6
 800d95c:	4638      	mov	r0, r7
 800d95e:	f7ff fa0f 	bl	800cd80 <_free_r>
 800d962:	e7e9      	b.n	800d938 <_realloc_r+0x1c>
 800d964:	4635      	mov	r5, r6
 800d966:	e7e7      	b.n	800d938 <_realloc_r+0x1c>

0800d968 <_read_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4604      	mov	r4, r0
 800d96c:	4608      	mov	r0, r1
 800d96e:	4611      	mov	r1, r2
 800d970:	2200      	movs	r2, #0
 800d972:	4d05      	ldr	r5, [pc, #20]	; (800d988 <_read_r+0x20>)
 800d974:	602a      	str	r2, [r5, #0]
 800d976:	461a      	mov	r2, r3
 800d978:	f7f6 f97a 	bl	8003c70 <_read>
 800d97c:	1c43      	adds	r3, r0, #1
 800d97e:	d102      	bne.n	800d986 <_read_r+0x1e>
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	b103      	cbz	r3, 800d986 <_read_r+0x1e>
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	bd38      	pop	{r3, r4, r5, pc}
 800d988:	200015bc 	.word	0x200015bc

0800d98c <_malloc_usable_size_r>:
 800d98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d990:	1f18      	subs	r0, r3, #4
 800d992:	2b00      	cmp	r3, #0
 800d994:	bfbc      	itt	lt
 800d996:	580b      	ldrlt	r3, [r1, r0]
 800d998:	18c0      	addlt	r0, r0, r3
 800d99a:	4770      	bx	lr
 800d99c:	0000      	movs	r0, r0
	...

0800d9a0 <floor>:
 800d9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d9a8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d9ac:	2e13      	cmp	r6, #19
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	460c      	mov	r4, r1
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	dc34      	bgt.n	800da24 <floor+0x84>
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	da15      	bge.n	800d9ea <floor+0x4a>
 800d9be:	a334      	add	r3, pc, #208	; (adr r3, 800da90 <floor+0xf0>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fbd2 	bl	800016c <__adddf3>
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f7f2 fe02 	bl	80005d4 <__aeabi_dcmpgt>
 800d9d0:	b140      	cbz	r0, 800d9e4 <floor+0x44>
 800d9d2:	2c00      	cmp	r4, #0
 800d9d4:	da59      	bge.n	800da8a <floor+0xea>
 800d9d6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d9da:	ea57 0503 	orrs.w	r5, r7, r3
 800d9de:	d001      	beq.n	800d9e4 <floor+0x44>
 800d9e0:	2500      	movs	r5, #0
 800d9e2:	4c2d      	ldr	r4, [pc, #180]	; (800da98 <floor+0xf8>)
 800d9e4:	4623      	mov	r3, r4
 800d9e6:	462f      	mov	r7, r5
 800d9e8:	e025      	b.n	800da36 <floor+0x96>
 800d9ea:	4a2c      	ldr	r2, [pc, #176]	; (800da9c <floor+0xfc>)
 800d9ec:	fa42 f806 	asr.w	r8, r2, r6
 800d9f0:	ea01 0208 	and.w	r2, r1, r8
 800d9f4:	4302      	orrs	r2, r0
 800d9f6:	d01e      	beq.n	800da36 <floor+0x96>
 800d9f8:	a325      	add	r3, pc, #148	; (adr r3, 800da90 <floor+0xf0>)
 800d9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fe:	f7f2 fbb5 	bl	800016c <__adddf3>
 800da02:	2200      	movs	r2, #0
 800da04:	2300      	movs	r3, #0
 800da06:	f7f2 fde5 	bl	80005d4 <__aeabi_dcmpgt>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d0ea      	beq.n	800d9e4 <floor+0x44>
 800da0e:	2c00      	cmp	r4, #0
 800da10:	bfbe      	ittt	lt
 800da12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da16:	fa43 f606 	asrlt.w	r6, r3, r6
 800da1a:	19a4      	addlt	r4, r4, r6
 800da1c:	2500      	movs	r5, #0
 800da1e:	ea24 0408 	bic.w	r4, r4, r8
 800da22:	e7df      	b.n	800d9e4 <floor+0x44>
 800da24:	2e33      	cmp	r6, #51	; 0x33
 800da26:	dd0a      	ble.n	800da3e <floor+0x9e>
 800da28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da2c:	d103      	bne.n	800da36 <floor+0x96>
 800da2e:	f7f2 fb9d 	bl	800016c <__adddf3>
 800da32:	4607      	mov	r7, r0
 800da34:	460b      	mov	r3, r1
 800da36:	4638      	mov	r0, r7
 800da38:	4619      	mov	r1, r3
 800da3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da3e:	f04f 32ff 	mov.w	r2, #4294967295
 800da42:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800da46:	fa22 f808 	lsr.w	r8, r2, r8
 800da4a:	ea18 0f00 	tst.w	r8, r0
 800da4e:	d0f2      	beq.n	800da36 <floor+0x96>
 800da50:	a30f      	add	r3, pc, #60	; (adr r3, 800da90 <floor+0xf0>)
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	f7f2 fb89 	bl	800016c <__adddf3>
 800da5a:	2200      	movs	r2, #0
 800da5c:	2300      	movs	r3, #0
 800da5e:	f7f2 fdb9 	bl	80005d4 <__aeabi_dcmpgt>
 800da62:	2800      	cmp	r0, #0
 800da64:	d0be      	beq.n	800d9e4 <floor+0x44>
 800da66:	2c00      	cmp	r4, #0
 800da68:	da02      	bge.n	800da70 <floor+0xd0>
 800da6a:	2e14      	cmp	r6, #20
 800da6c:	d103      	bne.n	800da76 <floor+0xd6>
 800da6e:	3401      	adds	r4, #1
 800da70:	ea25 0508 	bic.w	r5, r5, r8
 800da74:	e7b6      	b.n	800d9e4 <floor+0x44>
 800da76:	2301      	movs	r3, #1
 800da78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800da7c:	fa03 f606 	lsl.w	r6, r3, r6
 800da80:	4435      	add	r5, r6
 800da82:	42bd      	cmp	r5, r7
 800da84:	bf38      	it	cc
 800da86:	18e4      	addcc	r4, r4, r3
 800da88:	e7f2      	b.n	800da70 <floor+0xd0>
 800da8a:	2500      	movs	r5, #0
 800da8c:	462c      	mov	r4, r5
 800da8e:	e7a9      	b.n	800d9e4 <floor+0x44>
 800da90:	8800759c 	.word	0x8800759c
 800da94:	7e37e43c 	.word	0x7e37e43c
 800da98:	bff00000 	.word	0xbff00000
 800da9c:	000fffff 	.word	0x000fffff

0800daa0 <_init>:
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa2:	bf00      	nop
 800daa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daa6:	bc08      	pop	{r3}
 800daa8:	469e      	mov	lr, r3
 800daaa:	4770      	bx	lr

0800daac <_fini>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	bf00      	nop
 800dab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab2:	bc08      	pop	{r3}
 800dab4:	469e      	mov	lr, r3
 800dab6:	4770      	bx	lr
>>>>>>> 6147058 (refactor)
