
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d578  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800d688  0800d688  0001d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d878  0800d878  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d878  0800d878  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d878  0800d878  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d878  0800d878  0001d878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  200001f8  0800da74  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800da74  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc02  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8c  00000000  00000000  0003fe1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000448b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcd3  00000000  00000000  000473e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0be  00000000  00000000  000650bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e5c  00000000  00000000  00083179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011afd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000683c  00000000  00000000  0011b028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d670 	.word	0x0800d670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800d670 	.word	0x0800d670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_frsub>:
 8000638:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800063c:	e002      	b.n	8000644 <__addsf3>
 800063e:	bf00      	nop

08000640 <__aeabi_fsub>:
 8000640:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000644 <__addsf3>:
 8000644:	0042      	lsls	r2, r0, #1
 8000646:	bf1f      	itttt	ne
 8000648:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800064c:	ea92 0f03 	teqne	r2, r3
 8000650:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000654:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000658:	d06a      	beq.n	8000730 <__addsf3+0xec>
 800065a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800065e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000662:	bfc1      	itttt	gt
 8000664:	18d2      	addgt	r2, r2, r3
 8000666:	4041      	eorgt	r1, r0
 8000668:	4048      	eorgt	r0, r1
 800066a:	4041      	eorgt	r1, r0
 800066c:	bfb8      	it	lt
 800066e:	425b      	neglt	r3, r3
 8000670:	2b19      	cmp	r3, #25
 8000672:	bf88      	it	hi
 8000674:	4770      	bxhi	lr
 8000676:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800067a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800067e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4240      	negne	r0, r0
 8000686:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800068a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800068e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000692:	bf18      	it	ne
 8000694:	4249      	negne	r1, r1
 8000696:	ea92 0f03 	teq	r2, r3
 800069a:	d03f      	beq.n	800071c <__addsf3+0xd8>
 800069c:	f1a2 0201 	sub.w	r2, r2, #1
 80006a0:	fa41 fc03 	asr.w	ip, r1, r3
 80006a4:	eb10 000c 	adds.w	r0, r0, ip
 80006a8:	f1c3 0320 	rsb	r3, r3, #32
 80006ac:	fa01 f103 	lsl.w	r1, r1, r3
 80006b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b4:	d502      	bpl.n	80006bc <__addsf3+0x78>
 80006b6:	4249      	negs	r1, r1
 80006b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006c0:	d313      	bcc.n	80006ea <__addsf3+0xa6>
 80006c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006c6:	d306      	bcc.n	80006d6 <__addsf3+0x92>
 80006c8:	0840      	lsrs	r0, r0, #1
 80006ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ce:	f102 0201 	add.w	r2, r2, #1
 80006d2:	2afe      	cmp	r2, #254	; 0xfe
 80006d4:	d251      	bcs.n	800077a <__addsf3+0x136>
 80006d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006de:	bf08      	it	eq
 80006e0:	f020 0001 	biceq.w	r0, r0, #1
 80006e4:	ea40 0003 	orr.w	r0, r0, r3
 80006e8:	4770      	bx	lr
 80006ea:	0049      	lsls	r1, r1, #1
 80006ec:	eb40 0000 	adc.w	r0, r0, r0
 80006f0:	3a01      	subs	r2, #1
 80006f2:	bf28      	it	cs
 80006f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006f8:	d2ed      	bcs.n	80006d6 <__addsf3+0x92>
 80006fa:	fab0 fc80 	clz	ip, r0
 80006fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000702:	ebb2 020c 	subs.w	r2, r2, ip
 8000706:	fa00 f00c 	lsl.w	r0, r0, ip
 800070a:	bfaa      	itet	ge
 800070c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000710:	4252      	neglt	r2, r2
 8000712:	4318      	orrge	r0, r3
 8000714:	bfbc      	itt	lt
 8000716:	40d0      	lsrlt	r0, r2
 8000718:	4318      	orrlt	r0, r3
 800071a:	4770      	bx	lr
 800071c:	f092 0f00 	teq	r2, #0
 8000720:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000724:	bf06      	itte	eq
 8000726:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800072a:	3201      	addeq	r2, #1
 800072c:	3b01      	subne	r3, #1
 800072e:	e7b5      	b.n	800069c <__addsf3+0x58>
 8000730:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000738:	bf18      	it	ne
 800073a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800073e:	d021      	beq.n	8000784 <__addsf3+0x140>
 8000740:	ea92 0f03 	teq	r2, r3
 8000744:	d004      	beq.n	8000750 <__addsf3+0x10c>
 8000746:	f092 0f00 	teq	r2, #0
 800074a:	bf08      	it	eq
 800074c:	4608      	moveq	r0, r1
 800074e:	4770      	bx	lr
 8000750:	ea90 0f01 	teq	r0, r1
 8000754:	bf1c      	itt	ne
 8000756:	2000      	movne	r0, #0
 8000758:	4770      	bxne	lr
 800075a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800075e:	d104      	bne.n	800076a <__addsf3+0x126>
 8000760:	0040      	lsls	r0, r0, #1
 8000762:	bf28      	it	cs
 8000764:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000768:	4770      	bx	lr
 800076a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800076e:	bf3c      	itt	cc
 8000770:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000774:	4770      	bxcc	lr
 8000776:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800077a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800077e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000782:	4770      	bx	lr
 8000784:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000788:	bf16      	itet	ne
 800078a:	4608      	movne	r0, r1
 800078c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000790:	4601      	movne	r1, r0
 8000792:	0242      	lsls	r2, r0, #9
 8000794:	bf06      	itte	eq
 8000796:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800079a:	ea90 0f01 	teqeq	r0, r1
 800079e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007a2:	4770      	bx	lr

080007a4 <__aeabi_ui2f>:
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	e004      	b.n	80007b4 <__aeabi_i2f+0x8>
 80007aa:	bf00      	nop

080007ac <__aeabi_i2f>:
 80007ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	ea5f 0c00 	movs.w	ip, r0
 80007b8:	bf08      	it	eq
 80007ba:	4770      	bxeq	lr
 80007bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007c0:	4601      	mov	r1, r0
 80007c2:	f04f 0000 	mov.w	r0, #0
 80007c6:	e01c      	b.n	8000802 <__aeabi_l2f+0x2a>

080007c8 <__aeabi_ul2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e00a      	b.n	80007ec <__aeabi_l2f+0x14>
 80007d6:	bf00      	nop

080007d8 <__aeabi_l2f>:
 80007d8:	ea50 0201 	orrs.w	r2, r0, r1
 80007dc:	bf08      	it	eq
 80007de:	4770      	bxeq	lr
 80007e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007e4:	d502      	bpl.n	80007ec <__aeabi_l2f+0x14>
 80007e6:	4240      	negs	r0, r0
 80007e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ec:	ea5f 0c01 	movs.w	ip, r1
 80007f0:	bf02      	ittt	eq
 80007f2:	4684      	moveq	ip, r0
 80007f4:	4601      	moveq	r1, r0
 80007f6:	2000      	moveq	r0, #0
 80007f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007fc:	bf08      	it	eq
 80007fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000802:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000806:	fabc f28c 	clz	r2, ip
 800080a:	3a08      	subs	r2, #8
 800080c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000810:	db10      	blt.n	8000834 <__aeabi_l2f+0x5c>
 8000812:	fa01 fc02 	lsl.w	ip, r1, r2
 8000816:	4463      	add	r3, ip
 8000818:	fa00 fc02 	lsl.w	ip, r0, r2
 800081c:	f1c2 0220 	rsb	r2, r2, #32
 8000820:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000824:	fa20 f202 	lsr.w	r2, r0, r2
 8000828:	eb43 0002 	adc.w	r0, r3, r2
 800082c:	bf08      	it	eq
 800082e:	f020 0001 	biceq.w	r0, r0, #1
 8000832:	4770      	bx	lr
 8000834:	f102 0220 	add.w	r2, r2, #32
 8000838:	fa01 fc02 	lsl.w	ip, r1, r2
 800083c:	f1c2 0220 	rsb	r2, r2, #32
 8000840:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000844:	fa21 f202 	lsr.w	r2, r1, r2
 8000848:	eb43 0002 	adc.w	r0, r3, r2
 800084c:	bf08      	it	eq
 800084e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000852:	4770      	bx	lr

08000854 <__aeabi_fmul>:
 8000854:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000858:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800085c:	bf1e      	ittt	ne
 800085e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000862:	ea92 0f0c 	teqne	r2, ip
 8000866:	ea93 0f0c 	teqne	r3, ip
 800086a:	d06f      	beq.n	800094c <__aeabi_fmul+0xf8>
 800086c:	441a      	add	r2, r3
 800086e:	ea80 0c01 	eor.w	ip, r0, r1
 8000872:	0240      	lsls	r0, r0, #9
 8000874:	bf18      	it	ne
 8000876:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800087a:	d01e      	beq.n	80008ba <__aeabi_fmul+0x66>
 800087c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000880:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000884:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000888:	fba0 3101 	umull	r3, r1, r0, r1
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000890:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000894:	bf3e      	ittt	cc
 8000896:	0049      	lslcc	r1, r1, #1
 8000898:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800089c:	005b      	lslcc	r3, r3, #1
 800089e:	ea40 0001 	orr.w	r0, r0, r1
 80008a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008a6:	2afd      	cmp	r2, #253	; 0xfd
 80008a8:	d81d      	bhi.n	80008e6 <__aeabi_fmul+0x92>
 80008aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008b2:	bf08      	it	eq
 80008b4:	f020 0001 	biceq.w	r0, r0, #1
 80008b8:	4770      	bx	lr
 80008ba:	f090 0f00 	teq	r0, #0
 80008be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008c2:	bf08      	it	eq
 80008c4:	0249      	lsleq	r1, r1, #9
 80008c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008ce:	3a7f      	subs	r2, #127	; 0x7f
 80008d0:	bfc2      	ittt	gt
 80008d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008da:	4770      	bxgt	lr
 80008dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e0:	f04f 0300 	mov.w	r3, #0
 80008e4:	3a01      	subs	r2, #1
 80008e6:	dc5d      	bgt.n	80009a4 <__aeabi_fmul+0x150>
 80008e8:	f112 0f19 	cmn.w	r2, #25
 80008ec:	bfdc      	itt	le
 80008ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008f2:	4770      	bxle	lr
 80008f4:	f1c2 0200 	rsb	r2, r2, #0
 80008f8:	0041      	lsls	r1, r0, #1
 80008fa:	fa21 f102 	lsr.w	r1, r1, r2
 80008fe:	f1c2 0220 	rsb	r2, r2, #32
 8000902:	fa00 fc02 	lsl.w	ip, r0, r2
 8000906:	ea5f 0031 	movs.w	r0, r1, rrx
 800090a:	f140 0000 	adc.w	r0, r0, #0
 800090e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000912:	bf08      	it	eq
 8000914:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000918:	4770      	bx	lr
 800091a:	f092 0f00 	teq	r2, #0
 800091e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0040      	lsleq	r0, r0, #1
 8000926:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800092a:	3a01      	subeq	r2, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fmul+0xce>
 800092e:	ea40 000c 	orr.w	r0, r0, ip
 8000932:	f093 0f00 	teq	r3, #0
 8000936:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800093a:	bf02      	ittt	eq
 800093c:	0049      	lsleq	r1, r1, #1
 800093e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000942:	3b01      	subeq	r3, #1
 8000944:	d0f9      	beq.n	800093a <__aeabi_fmul+0xe6>
 8000946:	ea41 010c 	orr.w	r1, r1, ip
 800094a:	e78f      	b.n	800086c <__aeabi_fmul+0x18>
 800094c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000950:	ea92 0f0c 	teq	r2, ip
 8000954:	bf18      	it	ne
 8000956:	ea93 0f0c 	teqne	r3, ip
 800095a:	d00a      	beq.n	8000972 <__aeabi_fmul+0x11e>
 800095c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000960:	bf18      	it	ne
 8000962:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000966:	d1d8      	bne.n	800091a <__aeabi_fmul+0xc6>
 8000968:	ea80 0001 	eor.w	r0, r0, r1
 800096c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000970:	4770      	bx	lr
 8000972:	f090 0f00 	teq	r0, #0
 8000976:	bf17      	itett	ne
 8000978:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800097c:	4608      	moveq	r0, r1
 800097e:	f091 0f00 	teqne	r1, #0
 8000982:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000986:	d014      	beq.n	80009b2 <__aeabi_fmul+0x15e>
 8000988:	ea92 0f0c 	teq	r2, ip
 800098c:	d101      	bne.n	8000992 <__aeabi_fmul+0x13e>
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	d10f      	bne.n	80009b2 <__aeabi_fmul+0x15e>
 8000992:	ea93 0f0c 	teq	r3, ip
 8000996:	d103      	bne.n	80009a0 <__aeabi_fmul+0x14c>
 8000998:	024b      	lsls	r3, r1, #9
 800099a:	bf18      	it	ne
 800099c:	4608      	movne	r0, r1
 800099e:	d108      	bne.n	80009b2 <__aeabi_fmul+0x15e>
 80009a0:	ea80 0001 	eor.w	r0, r0, r1
 80009a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bx	lr

080009bc <__aeabi_fdiv>:
 80009bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009c4:	bf1e      	ittt	ne
 80009c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ca:	ea92 0f0c 	teqne	r2, ip
 80009ce:	ea93 0f0c 	teqne	r3, ip
 80009d2:	d069      	beq.n	8000aa8 <__aeabi_fdiv+0xec>
 80009d4:	eba2 0203 	sub.w	r2, r2, r3
 80009d8:	ea80 0c01 	eor.w	ip, r0, r1
 80009dc:	0249      	lsls	r1, r1, #9
 80009de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009e2:	d037      	beq.n	8000a54 <__aeabi_fdiv+0x98>
 80009e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009f4:	428b      	cmp	r3, r1
 80009f6:	bf38      	it	cc
 80009f8:	005b      	lslcc	r3, r3, #1
 80009fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a02:	428b      	cmp	r3, r1
 8000a04:	bf24      	itt	cs
 8000a06:	1a5b      	subcs	r3, r3, r1
 8000a08:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a0c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a10:	bf24      	itt	cs
 8000a12:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a16:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a1a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a1e:	bf24      	itt	cs
 8000a20:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a28:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a2c:	bf24      	itt	cs
 8000a2e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a32:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a36:	011b      	lsls	r3, r3, #4
 8000a38:	bf18      	it	ne
 8000a3a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a3e:	d1e0      	bne.n	8000a02 <__aeabi_fdiv+0x46>
 8000a40:	2afd      	cmp	r2, #253	; 0xfd
 8000a42:	f63f af50 	bhi.w	80008e6 <__aeabi_fmul+0x92>
 8000a46:	428b      	cmp	r3, r1
 8000a48:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a58:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a5c:	327f      	adds	r2, #127	; 0x7f
 8000a5e:	bfc2      	ittt	gt
 8000a60:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a64:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a68:	4770      	bxgt	lr
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f04f 0300 	mov.w	r3, #0
 8000a72:	3a01      	subs	r2, #1
 8000a74:	e737      	b.n	80008e6 <__aeabi_fmul+0x92>
 8000a76:	f092 0f00 	teq	r2, #0
 8000a7a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a7e:	bf02      	ittt	eq
 8000a80:	0040      	lsleq	r0, r0, #1
 8000a82:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a86:	3a01      	subeq	r2, #1
 8000a88:	d0f9      	beq.n	8000a7e <__aeabi_fdiv+0xc2>
 8000a8a:	ea40 000c 	orr.w	r0, r0, ip
 8000a8e:	f093 0f00 	teq	r3, #0
 8000a92:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a96:	bf02      	ittt	eq
 8000a98:	0049      	lsleq	r1, r1, #1
 8000a9a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a9e:	3b01      	subeq	r3, #1
 8000aa0:	d0f9      	beq.n	8000a96 <__aeabi_fdiv+0xda>
 8000aa2:	ea41 010c 	orr.w	r1, r1, ip
 8000aa6:	e795      	b.n	80009d4 <__aeabi_fdiv+0x18>
 8000aa8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aac:	ea92 0f0c 	teq	r2, ip
 8000ab0:	d108      	bne.n	8000ac4 <__aeabi_fdiv+0x108>
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	f47f af7d 	bne.w	80009b2 <__aeabi_fmul+0x15e>
 8000ab8:	ea93 0f0c 	teq	r3, ip
 8000abc:	f47f af70 	bne.w	80009a0 <__aeabi_fmul+0x14c>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e776      	b.n	80009b2 <__aeabi_fmul+0x15e>
 8000ac4:	ea93 0f0c 	teq	r3, ip
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_fdiv+0x118>
 8000aca:	024b      	lsls	r3, r1, #9
 8000acc:	f43f af4c 	beq.w	8000968 <__aeabi_fmul+0x114>
 8000ad0:	4608      	mov	r0, r1
 8000ad2:	e76e      	b.n	80009b2 <__aeabi_fmul+0x15e>
 8000ad4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ad8:	bf18      	it	ne
 8000ada:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ade:	d1ca      	bne.n	8000a76 <__aeabi_fdiv+0xba>
 8000ae0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ae4:	f47f af5c 	bne.w	80009a0 <__aeabi_fmul+0x14c>
 8000ae8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	f47f af3c 	bne.w	8000968 <__aeabi_fmul+0x114>
 8000af0:	e75f      	b.n	80009b2 <__aeabi_fmul+0x15e>
 8000af2:	bf00      	nop

08000af4 <__aeabi_f2uiz>:
 8000af4:	0042      	lsls	r2, r0, #1
 8000af6:	d20e      	bcs.n	8000b16 <__aeabi_f2uiz+0x22>
 8000af8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000afc:	d30b      	bcc.n	8000b16 <__aeabi_f2uiz+0x22>
 8000afe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b06:	d409      	bmi.n	8000b1c <__aeabi_f2uiz+0x28>
 8000b08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b10:	fa23 f002 	lsr.w	r0, r3, r2
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr
 8000b1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b20:	d101      	bne.n	8000b26 <__aeabi_f2uiz+0x32>
 8000b22:	0242      	lsls	r2, r0, #9
 8000b24:	d102      	bne.n	8000b2c <__aeabi_f2uiz+0x38>
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2102      	movs	r1, #2
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <ToggleLDAC+0x1c>)
 8000b3e:	f004 f876 	bl	8004c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2102      	movs	r1, #2
 8000b46:	4802      	ldr	r0, [pc, #8]	; (8000b50 <ToggleLDAC+0x1c>)
 8000b48:	f004 f871 	bl	8004c2e <HAL_GPIO_WritePin>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40010800 	.word	0x40010800

08000b54 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2110      	movs	r1, #16
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <SendSPI+0x34>)
 8000b66:	f004 f862 	bl	8004c2e <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b6a:	1cb9      	adds	r1, r7, #2
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	2201      	movs	r2, #1
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f006 fa09 	bl	8006f88 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <SendSPI+0x34>)
 8000b7c:	f004 f857 	bl	8004c2e <HAL_GPIO_WritePin>

}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40010800 	.word	0x40010800

08000b8c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b9e:	d302      	bcc.n	8000ba6 <DAC_AD5322_Ch1+0x1a>
 8000ba0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000ba4:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000baa:	2301      	movs	r3, #1
 8000bac:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bae:	2300      	movs	r3, #0
 8000bb0:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bb6:	8afb      	ldrh	r3, [r7, #22]
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	8abb      	ldrh	r3, [r7, #20]
 8000bbe:	039b      	lsls	r3, r3, #14
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	8a7b      	ldrh	r3, [r7, #18]
 8000bc8:	035b      	lsls	r3, r3, #13
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	8a3b      	ldrh	r3, [r7, #16]
 8000bd2:	031b      	lsls	r3, r3, #12
 8000bd4:	b21b      	sxth	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000be4:	f023 030f 	bic.w	r3, r3, #15
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000bfa:	89bb      	ldrh	r3, [r7, #12]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa8 	bl	8000b54 <SendSPI>
  	SendSPI(pSPI,out);
 8000c04:	89bb      	ldrh	r3, [r7, #12]
 8000c06:	4619      	mov	r1, r3
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ffa3 	bl	8000b54 <SendSPI>
  	ToggleLDAC();
 8000c0e:	f7ff ff91 	bl	8000b34 <ToggleLDAC>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	460b      	mov	r3, r1
 8000c24:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c2c:	d302      	bcc.n	8000c34 <DAC_AD5322_Ch2+0x1a>
 8000c2e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c32:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000c34:	2301      	movs	r3, #1
 8000c36:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c38:	2301      	movs	r3, #1
 8000c3a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000c40:	2300      	movs	r3, #0
 8000c42:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	03db      	lsls	r3, r3, #15
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	8abb      	ldrh	r3, [r7, #20]
 8000c4c:	039b      	lsls	r3, r3, #14
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	8a7b      	ldrh	r3, [r7, #18]
 8000c56:	035b      	lsls	r3, r3, #13
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	8a3b      	ldrh	r3, [r7, #16]
 8000c60:	031b      	lsls	r3, r3, #12
 8000c62:	b21b      	sxth	r3, r3
 8000c64:	4313      	orrs	r3, r2
 8000c66:	b21b      	sxth	r3, r3
 8000c68:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c72:	f023 030f 	bic.w	r3, r3, #15
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c88:	89bb      	ldrh	r3, [r7, #12]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff61 	bl	8000b54 <SendSPI>
  	SendSPI(pSPI,out);
 8000c92:	89bb      	ldrh	r3, [r7, #12]
 8000c94:	4619      	mov	r1, r3
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ff5c 	bl	8000b54 <SendSPI>
  	ToggleLDAC();
 8000c9c:	f7ff ff4a 	bl	8000b34 <ToggleLDAC>
}
 8000ca0:	bf00      	nop
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000cb8:	887b      	ldrh	r3, [r7, #2]
 8000cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cbe:	d302      	bcc.n	8000cc6 <DAC_AD5322_Ch1Ch2+0x1e>
 8000cc0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cc4:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ccc:	d302      	bcc.n	8000cd4 <DAC_AD5322_Ch1Ch2+0x2c>
 8000cce:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cd2:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000cd8:	2301      	movs	r3, #1
 8000cda:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cdc:	2300      	movs	r3, #0
 8000cde:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	03db      	lsls	r3, r3, #15
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	8abb      	ldrh	r3, [r7, #20]
 8000cec:	039b      	lsls	r3, r3, #14
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	8a7b      	ldrh	r3, [r7, #18]
 8000cf6:	035b      	lsls	r3, r3, #13
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	8a3b      	ldrh	r3, [r7, #16]
 8000d00:	031b      	lsls	r3, r3, #12
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000d0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d12:	f023 030f 	bic.w	r3, r3, #15
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	4313      	orrs	r3, r2
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000d28:	89bb      	ldrh	r3, [r7, #12]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff11 	bl	8000b54 <SendSPI>
  	SendSPI(pSPI,out);
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff0c 	bl	8000b54 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000d40:	2301      	movs	r3, #1
 8000d42:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000d44:	2300      	movs	r3, #0
 8000d46:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000d48:	2300      	movs	r3, #0
 8000d4a:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000d4c:	8afb      	ldrh	r3, [r7, #22]
 8000d4e:	03db      	lsls	r3, r3, #15
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	8abb      	ldrh	r3, [r7, #20]
 8000d54:	039b      	lsls	r3, r3, #14
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	8a7b      	ldrh	r3, [r7, #18]
 8000d5e:	035b      	lsls	r3, r3, #13
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21a      	sxth	r2, r3
 8000d66:	8a3b      	ldrh	r3, [r7, #16]
 8000d68:	031b      	lsls	r3, r3, #12
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d7a:	f023 030f 	bic.w	r3, r3, #15
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21b      	sxth	r3, r3
 8000d8e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d90:	89bb      	ldrh	r3, [r7, #12]
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fedd 	bl	8000b54 <SendSPI>
  	SendSPI(pSPI,out);
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fed8 	bl	8000b54 <SendSPI>
  	ToggleLDAC();
 8000da4:	f7ff fec6 	bl	8000b34 <ToggleLDAC>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <crete_calibration_table>:
 * @Purpose: Calibration table volt2dac
 *******************************************************************************/
#include <logic_calibration_table.h>
#include <math.h>

void crete_calibration_table(union NVRAM *DevNVRAM){
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

     DevNVRAM->calibration_table.dacValA_m12[0] = 0x0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	819a      	strh	r2, [r3, #12]
     DevNVRAM->calibration_table.dacValA_m12[1] = 0x189;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f240 1289 	movw	r2, #393	; 0x189
 8000dc4:	81da      	strh	r2, [r3, #14]
     DevNVRAM->calibration_table.dacValA_m12[2] = 0x31d;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f240 321d 	movw	r2, #797	; 0x31d
 8000dcc:	821a      	strh	r2, [r3, #16]
     DevNVRAM->calibration_table.dacValA_m12[3] = 0x223;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f240 2223 	movw	r2, #547	; 0x223
 8000dd4:	825a      	strh	r2, [r3, #18]
     DevNVRAM->calibration_table.dacValA_m12[4] = 0x21f;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f240 221f 	movw	r2, #543	; 0x21f
 8000ddc:	829a      	strh	r2, [r3, #20]
     DevNVRAM->calibration_table.dacValA_m12[5] = 0x19d;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f240 129d 	movw	r2, #413	; 0x19d
 8000de4:	82da      	strh	r2, [r3, #22]
     DevNVRAM->calibration_table.dacValA_m12[6] = 0x27e;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f240 227e 	movw	r2, #638	; 0x27e
 8000dec:	831a      	strh	r2, [r3, #24]
     DevNVRAM->calibration_table.dacValA_m12[7] = 0x297;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f240 2297 	movw	r2, #663	; 0x297
 8000df4:	835a      	strh	r2, [r3, #26]
     DevNVRAM->calibration_table.dacValA_m12[8] = 0x27e;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f240 227e 	movw	r2, #638	; 0x27e
 8000dfc:	839a      	strh	r2, [r3, #28]
     DevNVRAM->calibration_table.dacValA_m12[9] = 0x297;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f240 2297 	movw	r2, #663	; 0x297
 8000e04:	83da      	strh	r2, [r3, #30]
     DevNVRAM->calibration_table.dacValA_m12[10] = 0x1a1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000e0c:	841a      	strh	r2, [r3, #32]
     DevNVRAM->calibration_table.dacValA_m12[11] = 0x223;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f240 2223 	movw	r2, #547	; 0x223
 8000e14:	845a      	strh	r2, [r3, #34]	; 0x22
     DevNVRAM->calibration_table.dacValA_m12[12] = 0x21e;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f240 221e 	movw	r2, #542	; 0x21e
 8000e1c:	849a      	strh	r2, [r3, #36]	; 0x24
     DevNVRAM->calibration_table.dacValA_m12[13] = 0x1b6;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000e24:	84da      	strh	r2, [r3, #38]	; 0x26
     DevNVRAM->calibration_table.dacValA_m12[14] = 0x297;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f240 2297 	movw	r2, #663	; 0x297
 8000e2c:	851a      	strh	r2, [r3, #40]	; 0x28
     DevNVRAM->calibration_table.dacValA_m12[15] = 0x188;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000e34:	855a      	strh	r2, [r3, #42]	; 0x2a
     DevNVRAM->calibration_table.dacValA_m12[16] = 0x223;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f240 2223 	movw	r2, #547	; 0x223
 8000e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
     DevNVRAM->calibration_table.dacValA_m12[17] = 0x1a6;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000e44:	85da      	strh	r2, [r3, #46]	; 0x2e
     DevNVRAM->calibration_table.dacValA_m12[18] = 0x233;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f240 2233 	movw	r2, #563	; 0x233
 8000e4c:	861a      	strh	r2, [r3, #48]	; 0x30
     DevNVRAM->calibration_table.dacValA_m12[19] = 0x29b;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f240 229b 	movw	r2, #667	; 0x29b
 8000e54:	865a      	strh	r2, [r3, #50]	; 0x32
     DevNVRAM->calibration_table.dacValA_m12[20] = 0x21e;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f240 221e 	movw	r2, #542	; 0x21e
 8000e5c:	869a      	strh	r2, [r3, #52]	; 0x34
     DevNVRAM->calibration_table.dacValA_m12[21] = 0x1b6;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000e64:	86da      	strh	r2, [r3, #54]	; 0x36
     DevNVRAM->calibration_table.dacValA_m12[22] = 0x2e6;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f240 22e6 	movw	r2, #742	; 0x2e6
 8000e6c:	871a      	strh	r2, [r3, #56]	; 0x38
     DevNVRAM->calibration_table.dacValA_m12[23] = 0x233;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f240 2233 	movw	r2, #563	; 0x233
 8000e74:	875a      	strh	r2, [r3, #58]	; 0x3a
     DevNVRAM->calibration_table.dacValA_m12[24] = 0x184;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8000e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
     DevNVRAM->calibration_table.dacValA_m12[25] = 0x27e;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f240 227e 	movw	r2, #638	; 0x27e
 8000e84:	87da      	strh	r2, [r3, #62]	; 0x3e
     DevNVRAM->calibration_table.dacValA_m12[26] = 0x855;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f640 0255 	movw	r2, #2133	; 0x855
 8000e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
     DevNVRAM->calibration_table.dacValA_m12[27] = 0x877;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f640 0277 	movw	r2, #2167	; 0x877
 8000e96:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
     DevNVRAM->calibration_table.dacValA_m12[28] = 0x8b1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f640 02b1 	movw	r2, #2225	; 0x8b1
 8000ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
     DevNVRAM->calibration_table.dacValA_m12[29] = 0x8cb;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f640 02cb 	movw	r2, #2251	; 0x8cb
 8000eaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
     DevNVRAM->calibration_table.dacValA_m12[30] = 0x8fc;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000eb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
     DevNVRAM->calibration_table.dacValA_m12[31] = 0x960;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000ebe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
     DevNVRAM->calibration_table.dacValA_m12[32] = 0x953;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f640 1253 	movw	r2, #2387	; 0x953
 8000ec8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
     DevNVRAM->calibration_table.dacValA_m12[33] = 0x992;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 1292 	movw	r2, #2450	; 0x992
 8000ed2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
     DevNVRAM->calibration_table.dacValA_m12[34] = 0x9c4;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
     DevNVRAM->calibration_table.dacValA_m12[35] = 0x9d6;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f640 12d6 	movw	r2, #2518	; 0x9d6
 8000ee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
     DevNVRAM->calibration_table.dacValA_m12[36] = 0xa02;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f640 2202 	movw	r2, #2562	; 0xa02
 8000ef0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
     DevNVRAM->calibration_table.dacValA_m12[37] = 0xa2f;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f640 222f 	movw	r2, #2607	; 0xa2f
 8000efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
     DevNVRAM->calibration_table.dacValA_m12[38] = 0x9dd;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f640 12dd 	movw	r2, #2525	; 0x9dd
 8000f04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
     DevNVRAM->calibration_table.dacValA_m12[39] = 0xa89;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f640 2289 	movw	r2, #2697	; 0xa89
 8000f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
     DevNVRAM->calibration_table.dacValA_m12[40] = 0xab4;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f640 22b4 	movw	r2, #2740	; 0xab4
 8000f18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
     DevNVRAM->calibration_table.dacValA_m12[41] = 0xae1;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f640 22e1 	movw	r2, #2785	; 0xae1
 8000f22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
     DevNVRAM->calibration_table.dacValA_m12[42] = 0xb0b;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f640 320b 	movw	r2, #2827	; 0xb0b
 8000f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
     DevNVRAM->calibration_table.dacValA_m12[43] = 0xb36;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f640 3236 	movw	r2, #2870	; 0xb36
 8000f36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
     DevNVRAM->calibration_table.dacValA_m12[44] = 0xb8b;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f640 328b 	movw	r2, #2955	; 0xb8b
 8000f40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
     DevNVRAM->calibration_table.dacValA_m12[45] = 0xb8f;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f640 328f 	movw	r2, #2959	; 0xb8f
 8000f4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
     DevNVRAM->calibration_table.dacValA_m12[46] = 0xbd1;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
     DevNVRAM->calibration_table.dacValA_m12[47] = 0xbe6;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f640 32e6 	movw	r2, #3046	; 0xbe6
 8000f5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
     DevNVRAM->calibration_table.dacValA_m12[48] = 0xc12;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f640 4212 	movw	r2, #3090	; 0xc12
 8000f68:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     DevNVRAM->calibration_table.dacValA_m12[49] = 0xc4e;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000f72:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
     DevNVRAM->calibration_table.dacValA_m12[50] = 0xc69;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f640 4269 	movw	r2, #3177	; 0xc69
 8000f7c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
     DevNVRAM->calibration_table.dacValA_m12[51] = 0xc96;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f640 4296 	movw	r2, #3222	; 0xc96
 8000f86:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
     DevNVRAM->calibration_table.dacValA_m12[52] = 0xcd5;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000f90:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
     DevNVRAM->calibration_table.dacValA_m12[53] = 0xcee;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f640 42ee 	movw	r2, #3310	; 0xcee
 8000f9a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
     DevNVRAM->calibration_table.dacValA_m12[54] = 0xd19;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f640 5219 	movw	r2, #3353	; 0xd19
 8000fa4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
     DevNVRAM->calibration_table.dacValA_m12[55] = 0xc98;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f640 4298 	movw	r2, #3224	; 0xc98
 8000fae:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
     DevNVRAM->calibration_table.dacValA_m12[56] = 0xd70;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 8000fb8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
     DevNVRAM->calibration_table.dacValA_m12[57] = 0xd99;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f640 5299 	movw	r2, #3481	; 0xd99
 8000fc2:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
     DevNVRAM->calibration_table.dacValA_m12[58] = 0xdb7;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f640 52b7 	movw	r2, #3511	; 0xdb7
 8000fcc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
     DevNVRAM->calibration_table.dacValA_m12[59] = 0xdca;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f640 52ca 	movw	r2, #3530	; 0xdca
 8000fd6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
     DevNVRAM->calibration_table.dacValA_m12[60] = 0xdd8;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f640 52d8 	movw	r2, #3544	; 0xdd8
 8000fe0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
     DevNVRAM->calibration_table.dacValA_m12[61] = 0xddc;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f640 52dc 	movw	r2, #3548	; 0xddc
 8000fea:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
     DevNVRAM->calibration_table.dacValA_m12[62] = 0xde9;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f640 52e9 	movw	r2, #3561	; 0xde9
 8000ff4:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
     DevNVRAM->calibration_table.dacValA_m12[63] = 0xded;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f640 52ed 	movw	r2, #3565	; 0xded
 8000ffe:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
     DevNVRAM->calibration_table.dacValA_m12[64] = 0xdf4;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f640 52f4 	movw	r2, #3572	; 0xdf4
 8001008:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
     DevNVRAM->calibration_table.dacValA_m12[65] = 0xdf9;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f640 52f9 	movw	r2, #3577	; 0xdf9
 8001012:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
     DevNVRAM->calibration_table.dacValA_m12[66] = 0xdfc;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f640 52fc 	movw	r2, #3580	; 0xdfc
 800101c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
     DevNVRAM->calibration_table.dacValA_m12[67] = 0xdf7;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f640 52f7 	movw	r2, #3575	; 0xdf7
 8001026:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
     DevNVRAM->calibration_table.dacValA_m12[68] = 0xdf8;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f640 52f8 	movw	r2, #3576	; 0xdf8
 8001030:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
     DevNVRAM->calibration_table.dacValA_m12[69] = 0xdfa;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f640 52fa 	movw	r2, #3578	; 0xdfa
 800103a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
     DevNVRAM->calibration_table.dacValA_m12[70] = 0xdfc;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8001044:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
     DevNVRAM->calibration_table.dacValA_m12[71] = 0xdfe;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f640 52fe 	movw	r2, #3582	; 0xdfe
 800104e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
     DevNVRAM->calibration_table.dacValA_m12[72] = 0xe01;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f640 6201 	movw	r2, #3585	; 0xe01
 8001058:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
     DevNVRAM->calibration_table.dacValA_m12[73] = 0xe01;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f640 6201 	movw	r2, #3585	; 0xe01
 8001062:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
     DevNVRAM->calibration_table.dacValA_m12[74] = 0xe06;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f640 6206 	movw	r2, #3590	; 0xe06
 800106c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
     DevNVRAM->calibration_table.dacValA_m12[75] = 0xe06;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f640 6206 	movw	r2, #3590	; 0xe06
 8001076:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
     DevNVRAM->calibration_table.dacValA_m12[76] = 0xe0a;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f640 620a 	movw	r2, #3594	; 0xe0a
 8001080:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
     DevNVRAM->calibration_table.dacValA_m12[77] = 0xe0e;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f640 620e 	movw	r2, #3598	; 0xe0e
 800108a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
     DevNVRAM->calibration_table.dacValA_m12[78] = 0xe05;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f640 6205 	movw	r2, #3589	; 0xe05
 8001094:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
     DevNVRAM->calibration_table.dacValA_m12[79] = 0xe01;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f640 6201 	movw	r2, #3585	; 0xe01
 800109e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
     DevNVRAM->calibration_table.dacValA_m12[80] = 0xe09;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f640 6209 	movw	r2, #3593	; 0xe09
 80010a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
     DevNVRAM->calibration_table.dacValA_m12[81] = 0x7d0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010b2:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
     DevNVRAM->calibration_table.dacValA_m12[82] = 0xe06;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f640 6206 	movw	r2, #3590	; 0xe06
 80010bc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
     DevNVRAM->calibration_table.dacValA_m12[83] = 0x7d0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80010c6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
     DevNVRAM->calibration_table.dacValA_m12[84] = 0xe06;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f640 6206 	movw	r2, #3590	; 0xe06
 80010d0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
     DevNVRAM->calibration_table.dacValA_m12[85] = 0xe00;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80010da:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
     DevNVRAM->calibration_table.dacValA_m12[86] = 0xdfe;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f640 52fe 	movw	r2, #3582	; 0xdfe
 80010e4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
     DevNVRAM->calibration_table.dacValA_m12[87] = 0x1000;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ee:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

     DevNVRAM->calibration_table.dacValB_m12[0] = 0x0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
     DevNVRAM->calibration_table.dacValB_m12[1] = 0x1bb;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001100:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
     DevNVRAM->calibration_table.dacValB_m12[2] = 0x1ed;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f240 12ed 	movw	r2, #493	; 0x1ed
 800110a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
     DevNVRAM->calibration_table.dacValB_m12[3] = 0x251;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f240 2251 	movw	r2, #593	; 0x251
 8001114:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
     DevNVRAM->calibration_table.dacValB_m12[4] = 0x1bb;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800111e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
     DevNVRAM->calibration_table.dacValB_m12[5] = 0x1ed;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f240 12ed 	movw	r2, #493	; 0x1ed
 8001128:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
     DevNVRAM->calibration_table.dacValB_m12[6] = 0x2ce;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f240 22ce 	movw	r2, #718	; 0x2ce
 8001132:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
     DevNVRAM->calibration_table.dacValB_m12[7] = 0x1d4;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800113c:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
     DevNVRAM->calibration_table.dacValB_m12[8] = 0x1f2;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001146:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
     DevNVRAM->calibration_table.dacValB_m12[9] = 0x1d9;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001150:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
     DevNVRAM->calibration_table.dacValB_m12[10] = 0x1bc;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800115a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
     DevNVRAM->calibration_table.dacValB_m12[11] = 0x1bb;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001164:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
     DevNVRAM->calibration_table.dacValB_m12[12] = 0x1f3;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800116e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
     DevNVRAM->calibration_table.dacValB_m12[13] = 0x1d9;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001178:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
     DevNVRAM->calibration_table.dacValB_m12[14] = 0x1ed;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f240 12ed 	movw	r2, #493	; 0x1ed
 8001182:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
     DevNVRAM->calibration_table.dacValB_m12[15] = 0x1f3;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f240 12f3 	movw	r2, #499	; 0x1f3
 800118c:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
     DevNVRAM->calibration_table.dacValB_m12[16] = 0x1c0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8001196:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
     DevNVRAM->calibration_table.dacValB_m12[17] = 0x1c1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f240 12c1 	movw	r2, #449	; 0x1c1
 80011a0:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
     DevNVRAM->calibration_table.dacValB_m12[18] = 0x1c0;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80011aa:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
     DevNVRAM->calibration_table.dacValB_m12[19] = 0x2ec;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 80011b4:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
     DevNVRAM->calibration_table.dacValB_m12[20] = 0x1d4;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80011be:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
     DevNVRAM->calibration_table.dacValB_m12[21] = 0x251;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f240 2251 	movw	r2, #593	; 0x251
 80011c8:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
     DevNVRAM->calibration_table.dacValB_m12[22] = 0x1d4;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80011d2:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
     DevNVRAM->calibration_table.dacValB_m12[23] = 0x1d4;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80011dc:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
     DevNVRAM->calibration_table.dacValB_m12[24] = 0x2ce;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f240 22ce 	movw	r2, #718	; 0x2ce
 80011e6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
     DevNVRAM->calibration_table.dacValB_m12[25] = 0x1cb;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 80011f0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
     DevNVRAM->calibration_table.dacValB_m12[26] = 0x857;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 0257 	movw	r2, #2135	; 0x857
 80011fa:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
     DevNVRAM->calibration_table.dacValB_m12[27] = 0x877;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f640 0277 	movw	r2, #2167	; 0x877
 8001204:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
     DevNVRAM->calibration_table.dacValB_m12[28] = 0x8a4;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f640 02a4 	movw	r2, #2212	; 0x8a4
 800120e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
     DevNVRAM->calibration_table.dacValB_m12[29] = 0x8cf;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8001218:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
     DevNVRAM->calibration_table.dacValB_m12[30] = 0x8fb;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8001222:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
     DevNVRAM->calibration_table.dacValB_m12[31] = 0x926;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f640 1226 	movw	r2, #2342	; 0x926
 800122c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
     DevNVRAM->calibration_table.dacValB_m12[32] = 0x954;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f640 1254 	movw	r2, #2388	; 0x954
 8001236:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
     DevNVRAM->calibration_table.dacValB_m12[33] = 0x980;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f44f 6218 	mov.w	r2, #2432	; 0x980
 8001240:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
     DevNVRAM->calibration_table.dacValB_m12[34] = 0x9ac;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f640 12ac 	movw	r2, #2476	; 0x9ac
 800124a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
     DevNVRAM->calibration_table.dacValB_m12[35] = 0x9d8;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001254:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
     DevNVRAM->calibration_table.dacValB_m12[36] = 0xa04;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f640 2204 	movw	r2, #2564	; 0xa04
 800125e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
     DevNVRAM->calibration_table.dacValB_m12[37] = 0xa30;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8001268:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
     DevNVRAM->calibration_table.dacValB_m12[38] = 0xa5b;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f640 225b 	movw	r2, #2651	; 0xa5b
 8001272:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
     DevNVRAM->calibration_table.dacValB_m12[39] = 0xa86;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f640 2286 	movw	r2, #2694	; 0xa86
 800127c:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
     DevNVRAM->calibration_table.dacValB_m12[40] = 0xab2;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f640 22b2 	movw	r2, #2738	; 0xab2
 8001286:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
     DevNVRAM->calibration_table.dacValB_m12[41] = 0xadf;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f640 22df 	movw	r2, #2783	; 0xadf
 8001290:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
     DevNVRAM->calibration_table.dacValB_m12[42] = 0xb0b;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f640 320b 	movw	r2, #2827	; 0xb0b
 800129a:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
     DevNVRAM->calibration_table.dacValB_m12[43] = 0xb36;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f640 3236 	movw	r2, #2870	; 0xb36
 80012a4:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
     DevNVRAM->calibration_table.dacValB_m12[44] = 0xb63;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f640 3263 	movw	r2, #2915	; 0xb63
 80012ae:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
     DevNVRAM->calibration_table.dacValB_m12[45] = 0xb8e;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f640 328e 	movw	r2, #2958	; 0xb8e
 80012b8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
     DevNVRAM->calibration_table.dacValB_m12[46] = 0xbea;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f640 32ea 	movw	r2, #3050	; 0xbea
 80012c2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
     DevNVRAM->calibration_table.dacValB_m12[47] = 0xafd;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f640 22fd 	movw	r2, #2813	; 0xafd
 80012cc:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
     DevNVRAM->calibration_table.dacValB_m12[48] = 0xb91;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f640 3291 	movw	r2, #2961	; 0xb91
 80012d6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
     DevNVRAM->calibration_table.dacValB_m12[49] = 0xc3d;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f640 423d 	movw	r2, #3133	; 0xc3d
 80012e0:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
     DevNVRAM->calibration_table.dacValB_m12[50] = 0xc69;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 4269 	movw	r2, #3177	; 0xc69
 80012ea:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
     DevNVRAM->calibration_table.dacValB_m12[51] = 0xbbe;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f640 32be 	movw	r2, #3006	; 0xbbe
 80012f4:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
     DevNVRAM->calibration_table.dacValB_m12[52] = 0xcc2;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f640 42c2 	movw	r2, #3266	; 0xcc2
 80012fe:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
     DevNVRAM->calibration_table.dacValB_m12[53] = 0xd20;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8001308:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     DevNVRAM->calibration_table.dacValB_m12[54] = 0xd19;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f640 5219 	movw	r2, #3353	; 0xd19
 8001312:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
     DevNVRAM->calibration_table.dacValB_m12[55] = 0xd44;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f640 5244 	movw	r2, #3396	; 0xd44
 800131c:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
     DevNVRAM->calibration_table.dacValB_m12[56] = 0xd6e;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f640 526e 	movw	r2, #3438	; 0xd6e
 8001326:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
     DevNVRAM->calibration_table.dacValB_m12[57] = 0xd92;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f640 5292 	movw	r2, #3474	; 0xd92
 8001330:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
     DevNVRAM->calibration_table.dacValB_m12[58] = 0xd17;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f640 5217 	movw	r2, #3351	; 0xd17
 800133a:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
     DevNVRAM->calibration_table.dacValB_m12[59] = 0xdc5;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8001344:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
     DevNVRAM->calibration_table.dacValB_m12[60] = 0xdc2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f640 52c2 	movw	r2, #3522	; 0xdc2
 800134e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
     DevNVRAM->calibration_table.dacValB_m12[61] = 0xdcb;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f640 52cb 	movw	r2, #3531	; 0xdcb
 8001358:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
     DevNVRAM->calibration_table.dacValB_m12[62] = 0xdd4;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8001362:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
     DevNVRAM->calibration_table.dacValB_m12[63] = 0xdd9;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f640 52d9 	movw	r2, #3545	; 0xdd9
 800136c:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
     DevNVRAM->calibration_table.dacValB_m12[64] = 0xe09;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f640 6209 	movw	r2, #3593	; 0xe09
 8001376:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
     DevNVRAM->calibration_table.dacValB_m12[65] = 0xc6a;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f640 426a 	movw	r2, #3178	; 0xc6a
 8001380:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
     DevNVRAM->calibration_table.dacValB_m12[66] = 0xbbc;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 32bc 	movw	r2, #3004	; 0xbbc
 800138a:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
     DevNVRAM->calibration_table.dacValB_m12[67] = 0xc5d;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f640 425d 	movw	r2, #3165	; 0xc5d
 8001394:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
     DevNVRAM->calibration_table.dacValB_m12[68] = 0xc4f;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f640 424f 	movw	r2, #3151	; 0xc4f
 800139e:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
     DevNVRAM->calibration_table.dacValB_m12[69] = 0xcde;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f640 42de 	movw	r2, #3294	; 0xcde
 80013a8:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
     DevNVRAM->calibration_table.dacValB_m12[70] = 0xc52;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f640 4252 	movw	r2, #3154	; 0xc52
 80013b2:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
     DevNVRAM->calibration_table.dacValB_m12[71] = 0xdde;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f640 52de 	movw	r2, #3550	; 0xdde
 80013bc:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
     DevNVRAM->calibration_table.dacValB_m12[72] = 0xdff;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f640 52ff 	movw	r2, #3583	; 0xdff
 80013c6:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
     DevNVRAM->calibration_table.dacValB_m12[73] = 0xe05;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f640 6205 	movw	r2, #3589	; 0xe05
 80013d0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
     DevNVRAM->calibration_table.dacValB_m12[74] = 0xe0b;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f640 620b 	movw	r2, #3595	; 0xe0b
 80013da:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
     DevNVRAM->calibration_table.dacValB_m12[75] = 0xc80;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80013e4:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
     DevNVRAM->calibration_table.dacValB_m12[76] = 0xc1f;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f640 421f 	movw	r2, #3103	; 0xc1f
 80013ee:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
     DevNVRAM->calibration_table.dacValB_m12[77] = 0xe0d;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f640 620d 	movw	r2, #3597	; 0xe0d
 80013f8:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
     DevNVRAM->calibration_table.dacValB_m12[78] = 0xc77;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f640 4277 	movw	r2, #3191	; 0xc77
 8001402:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
     DevNVRAM->calibration_table.dacValB_m12[79] = 0xd49;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f640 5249 	movw	r2, #3401	; 0xd49
 800140c:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
     DevNVRAM->calibration_table.dacValB_m12[80] = 0xd55;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f640 5255 	movw	r2, #3413	; 0xd55
 8001416:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
     DevNVRAM->calibration_table.dacValB_m12[81] = 0xcf5;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f640 42f5 	movw	r2, #3317	; 0xcf5
 8001420:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
     DevNVRAM->calibration_table.dacValB_m12[82] = 0xe14;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f640 6214 	movw	r2, #3604	; 0xe14
 800142a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
     DevNVRAM->calibration_table.dacValB_m12[83] = 0xd7f;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f640 527f 	movw	r2, #3455	; 0xd7f
 8001434:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
     DevNVRAM->calibration_table.dacValB_m12[84] = 0xd2a;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f640 522a 	movw	r2, #3370	; 0xd2a
 800143e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
     DevNVRAM->calibration_table.dacValB_m12[85] = 0xd51;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f640 5251 	movw	r2, #3409	; 0xd51
 8001448:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
     DevNVRAM->calibration_table.dacValB_m12[86] = 0xde0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f44f 625e 	mov.w	r2, #3552	; 0xde0
 8001452:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
     DevNVRAM->calibration_table.dacValB_m12[87] = 0x1000;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145c:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

     DevNVRAM->calibration_table.dacValA_m27[0] = 0x0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
     DevNVRAM->calibration_table.dacValA_m27[1] = 0x1f1;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f240 12f1 	movw	r2, #497	; 0x1f1
 800146e:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
     DevNVRAM->calibration_table.dacValA_m27[2] = 0x1a6;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001478:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
     DevNVRAM->calibration_table.dacValA_m27[3] = 0x21e;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f240 221e 	movw	r2, #542	; 0x21e
 8001482:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
     DevNVRAM->calibration_table.dacValA_m27[4] = 0x233;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f240 2233 	movw	r2, #563	; 0x233
 800148c:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
     DevNVRAM->calibration_table.dacValA_m27[5] = 0x27e;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f240 227e 	movw	r2, #638	; 0x27e
 8001496:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
     DevNVRAM->calibration_table.dacValA_m27[6] = 0x27e;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f240 227e 	movw	r2, #638	; 0x27e
 80014a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
     DevNVRAM->calibration_table.dacValA_m27[7] = 0x1bb;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014aa:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
     DevNVRAM->calibration_table.dacValA_m27[8] = 0x1bb;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014b4:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
     DevNVRAM->calibration_table.dacValA_m27[9] = 0x1bb;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014be:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
     DevNVRAM->calibration_table.dacValA_m27[10] = 0x477;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f240 4277 	movw	r2, #1143	; 0x477
 80014c8:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
     DevNVRAM->calibration_table.dacValA_m27[11] = 0x5a3;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f240 52a3 	movw	r2, #1443	; 0x5a3
 80014d2:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
     DevNVRAM->calibration_table.dacValA_m27[12] = 0x1c4;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 80014dc:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
     DevNVRAM->calibration_table.dacValA_m27[13] = 0x1bb;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014e6:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
     DevNVRAM->calibration_table.dacValA_m27[14] = 0x1bb;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f240 12bb 	movw	r2, #443	; 0x1bb
 80014f0:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
     DevNVRAM->calibration_table.dacValA_m27[15] = 0x29c;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80014fa:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
     DevNVRAM->calibration_table.dacValA_m27[16] = 0x1bf;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001504:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
     DevNVRAM->calibration_table.dacValA_m27[17] = 0x1bb;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800150e:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
     DevNVRAM->calibration_table.dacValA_m27[18] = 0x386;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f240 3286 	movw	r2, #902	; 0x386
 8001518:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
     DevNVRAM->calibration_table.dacValA_m27[19] = 0x1bf;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001522:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
     DevNVRAM->calibration_table.dacValA_m27[20] = 0x1bb;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f240 12bb 	movw	r2, #443	; 0x1bb
 800152c:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
     DevNVRAM->calibration_table.dacValA_m27[21] = 0x283;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f240 2283 	movw	r2, #643	; 0x283
 8001536:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
     DevNVRAM->calibration_table.dacValA_m27[22] = 0x37d;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f240 327d 	movw	r2, #893	; 0x37d
 8001540:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
     DevNVRAM->calibration_table.dacValA_m27[23] = 0x283;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f240 2283 	movw	r2, #643	; 0x283
 800154a:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
     DevNVRAM->calibration_table.dacValA_m27[24] = 0x37d;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f240 327d 	movw	r2, #893	; 0x37d
 8001554:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
     DevNVRAM->calibration_table.dacValA_m27[25] = 0x37d;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f240 327d 	movw	r2, #893	; 0x37d
 800155e:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
     DevNVRAM->calibration_table.dacValA_m27[26] = 0x843;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f640 0243 	movw	r2, #2115	; 0x843
 8001568:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
     DevNVRAM->calibration_table.dacValA_m27[27] = 0x843;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f640 0243 	movw	r2, #2115	; 0x843
 8001572:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
     DevNVRAM->calibration_table.dacValA_m27[28] = 0x83e;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f640 023e 	movw	r2, #2110	; 0x83e
 800157c:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
     DevNVRAM->calibration_table.dacValA_m27[29] = 0x869;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f640 0269 	movw	r2, #2153	; 0x869
 8001586:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
     DevNVRAM->calibration_table.dacValA_m27[30] = 0x870;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001590:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
     DevNVRAM->calibration_table.dacValA_m27[31] = 0x877;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f640 0277 	movw	r2, #2167	; 0x877
 800159a:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
     DevNVRAM->calibration_table.dacValA_m27[32] = 0x7d9;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f240 72d9 	movw	r2, #2009	; 0x7d9
 80015a4:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
     DevNVRAM->calibration_table.dacValA_m27[33] = 0x7e3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f240 72e3 	movw	r2, #2019	; 0x7e3
 80015ae:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
     DevNVRAM->calibration_table.dacValA_m27[34] = 0x864;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f640 0264 	movw	r2, #2148	; 0x864
 80015b8:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
     DevNVRAM->calibration_table.dacValA_m27[35] = 0x800;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c2:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
     DevNVRAM->calibration_table.dacValA_m27[36] = 0x864;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f640 0264 	movw	r2, #2148	; 0x864
 80015cc:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
     DevNVRAM->calibration_table.dacValA_m27[37] = 0x828;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f640 0228 	movw	r2, #2088	; 0x828
 80015d6:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
     DevNVRAM->calibration_table.dacValA_m27[38] = 0x8cc;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80015e0:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
     DevNVRAM->calibration_table.dacValA_m27[39] = 0x8d2;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f640 02d2 	movw	r2, #2258	; 0x8d2
 80015ea:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
     DevNVRAM->calibration_table.dacValA_m27[40] = 0x7fc;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80015f4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
     DevNVRAM->calibration_table.dacValA_m27[41] = 0x864;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f640 0264 	movw	r2, #2148	; 0x864
 80015fe:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
     DevNVRAM->calibration_table.dacValA_m27[42] = 0x7fc;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001608:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
     DevNVRAM->calibration_table.dacValA_m27[43] = 0x8ff;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f640 02ff 	movw	r2, #2303	; 0x8ff
 8001612:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
     DevNVRAM->calibration_table.dacValA_m27[44] = 0x87e;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f640 027e 	movw	r2, #2174	; 0x87e
 800161c:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
     DevNVRAM->calibration_table.dacValA_m27[45] = 0x834;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f640 0234 	movw	r2, #2100	; 0x834
 8001626:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
     DevNVRAM->calibration_table.dacValA_m27[46] = 0x828;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f640 0228 	movw	r2, #2088	; 0x828
 8001630:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
     DevNVRAM->calibration_table.dacValA_m27[47] = 0x847;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f640 0247 	movw	r2, #2119	; 0x847
 800163a:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
     DevNVRAM->calibration_table.dacValA_m27[48] = 0x800;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001644:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
     DevNVRAM->calibration_table.dacValA_m27[49] = 0x87d;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f640 027d 	movw	r2, #2173	; 0x87d
 800164e:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
     DevNVRAM->calibration_table.dacValA_m27[50] = 0x94a;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f640 124a 	movw	r2, #2378	; 0x94a
 8001658:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
     DevNVRAM->calibration_table.dacValA_m27[51] = 0x977;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f640 1277 	movw	r2, #2423	; 0x977
 8001662:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
     DevNVRAM->calibration_table.dacValA_m27[52] = 0x7de;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f240 72de 	movw	r2, #2014	; 0x7de
 800166c:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
     DevNVRAM->calibration_table.dacValA_m27[53] = 0x864;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f640 0264 	movw	r2, #2148	; 0x864
 8001676:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
     DevNVRAM->calibration_table.dacValA_m27[54] = 0x974;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f640 1274 	movw	r2, #2420	; 0x974
 8001680:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
     DevNVRAM->calibration_table.dacValA_m27[55] = 0x90f;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f640 120f 	movw	r2, #2319	; 0x90f
 800168a:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
     DevNVRAM->calibration_table.dacValA_m27[56] = 0x8dd;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001694:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
     DevNVRAM->calibration_table.dacValA_m27[57] = 0x874;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f640 0274 	movw	r2, #2164	; 0x874
 800169e:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
     DevNVRAM->calibration_table.dacValA_m27[58] = 0x7d4;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f240 72d4 	movw	r2, #2004	; 0x7d4
 80016a8:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
     DevNVRAM->calibration_table.dacValA_m27[59] = 0x7e3;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f240 72e3 	movw	r2, #2019	; 0x7e3
 80016b2:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
     DevNVRAM->calibration_table.dacValA_m27[60] = 0x7e8;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80016bc:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
     DevNVRAM->calibration_table.dacValA_m27[61] = 0x914;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f640 1214 	movw	r2, #2324	; 0x914
 80016c6:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
     DevNVRAM->calibration_table.dacValA_m27[62] = 0x9d3;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f640 12d3 	movw	r2, #2515	; 0x9d3
 80016d0:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
     DevNVRAM->calibration_table.dacValA_m27[63] = 0x919;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f640 1219 	movw	r2, #2329	; 0x919
 80016da:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
     DevNVRAM->calibration_table.dacValA_m27[64] = 0x8fb;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80016e4:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
     DevNVRAM->calibration_table.dacValA_m27[65] = 0x7e4;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80016ee:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
     DevNVRAM->calibration_table.dacValA_m27[66] = 0x86b;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f640 026b 	movw	r2, #2155	; 0x86b
 80016f8:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
     DevNVRAM->calibration_table.dacValA_m27[67] = 0x814;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f640 0214 	movw	r2, #2068	; 0x814
 8001702:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
     DevNVRAM->calibration_table.dacValA_m27[68] = 0x823;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f640 0223 	movw	r2, #2083	; 0x823
 800170c:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
     DevNVRAM->calibration_table.dacValA_m27[69] = 0x826;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f640 0226 	movw	r2, #2086	; 0x826
 8001716:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
     DevNVRAM->calibration_table.dacValA_m27[70] = 0x8af;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f640 02af 	movw	r2, #2223	; 0x8af
 8001720:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
     DevNVRAM->calibration_table.dacValA_m27[71] = 0x804;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f640 0204 	movw	r2, #2052	; 0x804
 800172a:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
     DevNVRAM->calibration_table.dacValA_m27[72] = 0xa44;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f640 2244 	movw	r2, #2628	; 0xa44
 8001734:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
     DevNVRAM->calibration_table.dacValA_m27[73] = 0x7ef;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f240 72ef 	movw	r2, #2031	; 0x7ef
 800173e:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
     DevNVRAM->calibration_table.dacValA_m27[74] = 0x8f0;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f44f 620f 	mov.w	r2, #2288	; 0x8f0
 8001748:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
     DevNVRAM->calibration_table.dacValA_m27[75] = 0x853;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f640 0253 	movw	r2, #2131	; 0x853
 8001752:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
     DevNVRAM->calibration_table.dacValA_m27[76] = 0x7d4;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f240 72d4 	movw	r2, #2004	; 0x7d4
 800175c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
     DevNVRAM->calibration_table.dacValA_m27[77] = 0x900;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001766:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
     DevNVRAM->calibration_table.dacValA_m27[78] = 0x949;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f640 1249 	movw	r2, #2377	; 0x949
 8001770:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
     DevNVRAM->calibration_table.dacValA_m27[79] = 0x951;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f640 1251 	movw	r2, #2385	; 0x951
 800177a:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
     DevNVRAM->calibration_table.dacValA_m27[80] = 0xa80;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8001784:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
     DevNVRAM->calibration_table.dacValA_m27[81] = 0x832;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f640 0232 	movw	r2, #2098	; 0x832
 800178e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
     DevNVRAM->calibration_table.dacValA_m27[82] = 0x899;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f640 0299 	movw	r2, #2201	; 0x899
 8001798:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
     DevNVRAM->calibration_table.dacValA_m27[83] = 0x879;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f640 0279 	movw	r2, #2169	; 0x879
 80017a2:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
     DevNVRAM->calibration_table.dacValA_m27[84] = 0xac1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f640 22c1 	movw	r2, #2753	; 0xac1
 80017ac:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
     DevNVRAM->calibration_table.dacValA_m27[85] = 0x8b7;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f640 02b7 	movw	r2, #2231	; 0x8b7
 80017b6:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
     DevNVRAM->calibration_table.dacValA_m27[86] = 0x8dd;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f640 02dd 	movw	r2, #2269	; 0x8dd
 80017c0:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
     DevNVRAM->calibration_table.dacValA_m27[87] = 0x7d0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017ca:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
     DevNVRAM->calibration_table.dacValA_m27[88] = 0x897;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f640 0297 	movw	r2, #2199	; 0x897
 80017d4:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
     DevNVRAM->calibration_table.dacValA_m27[89] = 0x7d3;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f240 72d3 	movw	r2, #2003	; 0x7d3
 80017de:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
     DevNVRAM->calibration_table.dacValA_m27[90] = 0x94b;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f640 124b 	movw	r2, #2379	; 0x94b
 80017e8:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
     DevNVRAM->calibration_table.dacValA_m27[91] = 0x8e9;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017f2:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
     DevNVRAM->calibration_table.dacValA_m27[92] = 0x8e9;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80017fc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
     DevNVRAM->calibration_table.dacValA_m27[93] = 0x7da;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f240 72da 	movw	r2, #2010	; 0x7da
 8001806:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226
     DevNVRAM->calibration_table.dacValA_m27[94] = 0x836;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f640 0236 	movw	r2, #2102	; 0x836
 8001810:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
     DevNVRAM->calibration_table.dacValA_m27[95] = 0x802;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f640 0202 	movw	r2, #2050	; 0x802
 800181a:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
     DevNVRAM->calibration_table.dacValA_m27[96] = 0x836;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f640 0236 	movw	r2, #2102	; 0x836
 8001824:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
     DevNVRAM->calibration_table.dacValA_m27[97] = 0x802;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f640 0202 	movw	r2, #2050	; 0x802
 800182e:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
     DevNVRAM->calibration_table.dacValA_m27[98] = 0x8cc;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001838:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
     DevNVRAM->calibration_table.dacValA_m27[99] = 0x8e3;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f640 02e3 	movw	r2, #2275	; 0x8e3
 8001842:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
     DevNVRAM->calibration_table.dacValA_m27[100] = 0x8cc;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f640 02cc 	movw	r2, #2252	; 0x8cc
 800184c:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
     DevNVRAM->calibration_table.dacValA_m27[101] = 0x917;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f640 1217 	movw	r2, #2327	; 0x917
 8001856:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
     DevNVRAM->calibration_table.dacValA_m27[102] = 0x917;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f640 1217 	movw	r2, #2327	; 0x917
 8001860:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
     DevNVRAM->calibration_table.dacValA_m27[103] = 0x931;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f640 1231 	movw	r2, #2353	; 0x931
 800186a:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
     DevNVRAM->calibration_table.dacValA_m27[104] = 0x930;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001874:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
     DevNVRAM->calibration_table.dacValA_m27[105] = 0xb95;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f640 3295 	movw	r2, #2965	; 0xb95
 800187e:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
     DevNVRAM->calibration_table.dacValA_m27[106] = 0xb90;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8001888:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
     DevNVRAM->calibration_table.dacValA_m27[107] = 0xbc2;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f640 32c2 	movw	r2, #3010	; 0xbc2
 8001892:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
     DevNVRAM->calibration_table.dacValA_m27[108] = 0x962;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f640 1262 	movw	r2, #2402	; 0x962
 800189c:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
     DevNVRAM->calibration_table.dacValA_m27[109] = 0x992;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f640 1292 	movw	r2, #2450	; 0x992
 80018a6:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
     DevNVRAM->calibration_table.dacValA_m27[110] = 0x992;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f640 1292 	movw	r2, #2450	; 0x992
 80018b0:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
     DevNVRAM->calibration_table.dacValA_m27[111] = 0x9ab;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f640 12ab 	movw	r2, #2475	; 0x9ab
 80018ba:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
     DevNVRAM->calibration_table.dacValA_m27[112] = 0x994;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f640 1294 	movw	r2, #2452	; 0x994
 80018c4:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
     DevNVRAM->calibration_table.dacValA_m27[113] = 0xa9f;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f640 229f 	movw	r2, #2719	; 0xa9f
 80018ce:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
     DevNVRAM->calibration_table.dacValA_m27[114] = 0xbd0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 80018d8:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
     DevNVRAM->calibration_table.dacValA_m27[115] = 0xbea;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f640 32ea 	movw	r2, #3050	; 0xbea
 80018e2:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
     DevNVRAM->calibration_table.dacValA_m27[116] = 0x9c6;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f640 12c6 	movw	r2, #2502	; 0x9c6
 80018ec:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
     DevNVRAM->calibration_table.dacValA_m27[117] = 0xb31;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f640 3231 	movw	r2, #2865	; 0xb31
 80018f6:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
     DevNVRAM->calibration_table.dacValA_m27[118] = 0xc1c;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001900:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
     DevNVRAM->calibration_table.dacValA_m27[119] = 0x9ec;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f640 12ec 	movw	r2, #2540	; 0x9ec
 800190a:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
     DevNVRAM->calibration_table.dacValA_m27[120] = 0x9f8;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f640 12f8 	movw	r2, #2552	; 0x9f8
 8001914:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
     DevNVRAM->calibration_table.dacValA_m27[121] = 0xa0f;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f640 220f 	movw	r2, #2575	; 0xa0f
 800191e:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
     DevNVRAM->calibration_table.dacValA_m27[122] = 0x9fa;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f640 12fa 	movw	r2, #2554	; 0x9fa
 8001928:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
     DevNVRAM->calibration_table.dacValA_m27[123] = 0xc46;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f640 4246 	movw	r2, #3142	; 0xc46
 8001932:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
     DevNVRAM->calibration_table.dacValA_m27[124] = 0xc43;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f640 4243 	movw	r2, #3139	; 0xc43
 800193c:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
     DevNVRAM->calibration_table.dacValA_m27[125] = 0xa1e;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f640 221e 	movw	r2, #2590	; 0xa1e
 8001946:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
     DevNVRAM->calibration_table.dacValA_m27[126] = 0xa32;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f640 2232 	movw	r2, #2610	; 0xa32
 8001950:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
     DevNVRAM->calibration_table.dacValA_m27[127] = 0xa32;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f640 2232 	movw	r2, #2610	; 0xa32
 800195a:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
     DevNVRAM->calibration_table.dacValA_m27[128] = 0xa39;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f640 2239 	movw	r2, #2617	; 0xa39
 8001964:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
     DevNVRAM->calibration_table.dacValA_m27[129] = 0xa50;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f44f 6225 	mov.w	r2, #2640	; 0xa50
 800196e:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
     DevNVRAM->calibration_table.dacValA_m27[130] = 0xcb0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001978:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
     DevNVRAM->calibration_table.dacValA_m27[131] = 0xa5a;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001982:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
     DevNVRAM->calibration_table.dacValA_m27[132] = 0xa64;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f640 2264 	movw	r2, #2660	; 0xa64
 800198c:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
     DevNVRAM->calibration_table.dacValA_m27[133] = 0xcb0;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001996:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
     DevNVRAM->calibration_table.dacValA_m27[134] = 0xa76;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 2276 	movw	r2, #2678	; 0xa76
 80019a0:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
     DevNVRAM->calibration_table.dacValA_m27[135] = 0xcbf;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f640 42bf 	movw	r2, #3263	; 0xcbf
 80019aa:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
     DevNVRAM->calibration_table.dacValA_m27[136] = 0xa8c;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f640 228c 	movw	r2, #2700	; 0xa8c
 80019b4:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
     DevNVRAM->calibration_table.dacValA_m27[137] = 0xa95;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f640 2295 	movw	r2, #2709	; 0xa95
 80019be:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
     DevNVRAM->calibration_table.dacValA_m27[138] = 0xcd9;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f640 42d9 	movw	r2, #3289	; 0xcd9
 80019c8:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
     DevNVRAM->calibration_table.dacValA_m27[139] = 0xaaa;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f640 22aa 	movw	r2, #2730	; 0xaaa
 80019d2:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
     DevNVRAM->calibration_table.dacValA_m27[140] = 0xbcb;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f640 32cb 	movw	r2, #3019	; 0xbcb
 80019dc:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
     DevNVRAM->calibration_table.dacValA_m27[141] = 0xbcf;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f640 32cf 	movw	r2, #3023	; 0xbcf
 80019e6:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
     DevNVRAM->calibration_table.dacValA_m27[142] = 0xacb;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f640 22cb 	movw	r2, #2763	; 0xacb
 80019f0:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
     DevNVRAM->calibration_table.dacValA_m27[143] = 0xae1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f640 22e1 	movw	r2, #2785	; 0xae1
 80019fa:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
     DevNVRAM->calibration_table.dacValA_m27[144] = 0xaeb;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f640 22eb 	movw	r2, #2795	; 0xaeb
 8001a04:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
     DevNVRAM->calibration_table.dacValA_m27[145] = 0xaeb;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f640 22eb 	movw	r2, #2795	; 0xaeb
 8001a0e:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e
     DevNVRAM->calibration_table.dacValA_m27[146] = 0xaec;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f640 22ec 	movw	r2, #2796	; 0xaec
 8001a18:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
     DevNVRAM->calibration_table.dacValA_m27[147] = 0xaf4;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f640 22f4 	movw	r2, #2804	; 0xaf4
 8001a22:	f8a3 2292 	strh.w	r2, [r3, #658]	; 0x292
     DevNVRAM->calibration_table.dacValA_m27[148] = 0xafc;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f640 22fc 	movw	r2, #2812	; 0xafc
 8001a2c:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
     DevNVRAM->calibration_table.dacValA_m27[149] = 0xc38;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f640 4238 	movw	r2, #3128	; 0xc38
 8001a36:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
     DevNVRAM->calibration_table.dacValA_m27[150] = 0xb18;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f640 3218 	movw	r2, #2840	; 0xb18
 8001a40:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
     DevNVRAM->calibration_table.dacValA_m27[151] = 0xb11;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f640 3211 	movw	r2, #2833	; 0xb11
 8001a4a:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
     DevNVRAM->calibration_table.dacValA_m27[152] = 0xb27;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f640 3227 	movw	r2, #2855	; 0xb27
 8001a54:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
     DevNVRAM->calibration_table.dacValA_m27[153] = 0xb25;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f640 3225 	movw	r2, #2853	; 0xb25
 8001a5e:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
     DevNVRAM->calibration_table.dacValA_m27[154] = 0xb2c;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f640 322c 	movw	r2, #2860	; 0xb2c
 8001a68:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
     DevNVRAM->calibration_table.dacValA_m27[155] = 0xb31;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f640 3231 	movw	r2, #2865	; 0xb31
 8001a72:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
     DevNVRAM->calibration_table.dacValA_m27[156] = 0xb45;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f640 3245 	movw	r2, #2885	; 0xb45
 8001a7c:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
     DevNVRAM->calibration_table.dacValA_m27[157] = 0xb56;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a86:	f8a3 22a6 	strh.w	r2, [r3, #678]	; 0x2a6
     DevNVRAM->calibration_table.dacValA_m27[158] = 0xb54;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f640 3254 	movw	r2, #2900	; 0xb54
 8001a90:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
     DevNVRAM->calibration_table.dacValA_m27[159] = 0xb56;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f640 3256 	movw	r2, #2902	; 0xb56
 8001a9a:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
     DevNVRAM->calibration_table.dacValA_m27[160] = 0xb63;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f640 3263 	movw	r2, #2915	; 0xb63
 8001aa4:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
     DevNVRAM->calibration_table.dacValA_m27[161] = 0xb62;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f640 3262 	movw	r2, #2914	; 0xb62
 8001aae:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
     DevNVRAM->calibration_table.dacValA_m27[162] = 0x1000;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ab8:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0

     DevNVRAM->calibration_table.dacValB_m27[0] = 0x0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
     DevNVRAM->calibration_table.dacValB_m27[1] = 0x1c1;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001aca:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
     DevNVRAM->calibration_table.dacValB_m27[2] = 0x1d5;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ad4:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
     DevNVRAM->calibration_table.dacValB_m27[3] = 0x1d5;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ade:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
     DevNVRAM->calibration_table.dacValB_m27[4] = 0x1d5;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001ae8:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
     DevNVRAM->calibration_table.dacValB_m27[5] = 0x1d5;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001af2:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
     DevNVRAM->calibration_table.dacValB_m27[6] = 0x1d5;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001afc:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
     DevNVRAM->calibration_table.dacValB_m27[7] = 0x1d5;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001b06:	f8a3 22c0 	strh.w	r2, [r3, #704]	; 0x2c0
     DevNVRAM->calibration_table.dacValB_m27[8] = 0x1d9;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8001b10:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
     DevNVRAM->calibration_table.dacValB_m27[9] = 0x1f8;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8001b1a:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
     DevNVRAM->calibration_table.dacValB_m27[10] = 0x1bb;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b24:	f8a3 22c6 	strh.w	r2, [r3, #710]	; 0x2c6
     DevNVRAM->calibration_table.dacValB_m27[11] = 0x1bb;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b2e:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
     DevNVRAM->calibration_table.dacValB_m27[12] = 0x1bb;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b38:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
     DevNVRAM->calibration_table.dacValB_m27[13] = 0x571;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f240 5271 	movw	r2, #1393	; 0x571
 8001b42:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
     DevNVRAM->calibration_table.dacValB_m27[14] = 0x1bb;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b4c:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
     DevNVRAM->calibration_table.dacValB_m27[15] = 0x283;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f240 2283 	movw	r2, #643	; 0x283
 8001b56:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
     DevNVRAM->calibration_table.dacValB_m27[16] = 0x1cf;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b60:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
     DevNVRAM->calibration_table.dacValB_m27[17] = 0x1c9;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f240 12c9 	movw	r2, #457	; 0x1c9
 8001b6a:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
     DevNVRAM->calibration_table.dacValB_m27[18] = 0x1bf;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001b74:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
     DevNVRAM->calibration_table.dacValB_m27[19] = 0x1bb;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001b7e:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
     DevNVRAM->calibration_table.dacValB_m27[20] = 0x21f;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f240 221f 	movw	r2, #543	; 0x21f
 8001b88:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
     DevNVRAM->calibration_table.dacValB_m27[21] = 0x1cf;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001b92:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
     DevNVRAM->calibration_table.dacValB_m27[22] = 0x1e8;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001b9c:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
     DevNVRAM->calibration_table.dacValB_m27[23] = 0x1e8;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001ba6:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
     DevNVRAM->calibration_table.dacValB_m27[24] = 0x1cf;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f240 12cf 	movw	r2, #463	; 0x1cf
 8001bb0:	f8a3 22e2 	strh.w	r2, [r3, #738]	; 0x2e2
     DevNVRAM->calibration_table.dacValB_m27[25] = 0x1e8;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001bba:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
     DevNVRAM->calibration_table.dacValB_m27[26] = 0x7d3;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001bc4:	f8a3 22e6 	strh.w	r2, [r3, #742]	; 0x2e6
     DevNVRAM->calibration_table.dacValB_m27[27] = 0x80b;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f640 020b 	movw	r2, #2059	; 0x80b
 8001bce:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8
     DevNVRAM->calibration_table.dacValB_m27[28] = 0x857;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f640 0257 	movw	r2, #2135	; 0x857
 8001bd8:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
     DevNVRAM->calibration_table.dacValB_m27[29] = 0x875;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f640 0275 	movw	r2, #2165	; 0x875
 8001be2:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
     DevNVRAM->calibration_table.dacValB_m27[30] = 0x866;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f640 0266 	movw	r2, #2150	; 0x866
 8001bec:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
     DevNVRAM->calibration_table.dacValB_m27[31] = 0x7d0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001bf6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
     DevNVRAM->calibration_table.dacValB_m27[32] = 0x877;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f640 0277 	movw	r2, #2167	; 0x877
 8001c00:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
     DevNVRAM->calibration_table.dacValB_m27[33] = 0x8a7;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f640 02a7 	movw	r2, #2215	; 0x8a7
 8001c0a:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
     DevNVRAM->calibration_table.dacValB_m27[34] = 0x8a2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f640 02a2 	movw	r2, #2210	; 0x8a2
 8001c14:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
     DevNVRAM->calibration_table.dacValB_m27[35] = 0x7f7;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f240 72f7 	movw	r2, #2039	; 0x7f7
 8001c1e:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
     DevNVRAM->calibration_table.dacValB_m27[36] = 0x857;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f640 0257 	movw	r2, #2135	; 0x857
 8001c28:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
     DevNVRAM->calibration_table.dacValB_m27[37] = 0x829;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f640 0229 	movw	r2, #2089	; 0x829
 8001c32:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
     DevNVRAM->calibration_table.dacValB_m27[38] = 0x8f2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8001c3c:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
     DevNVRAM->calibration_table.dacValB_m27[39] = 0x897;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f640 0297 	movw	r2, #2199	; 0x897
 8001c46:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
     DevNVRAM->calibration_table.dacValB_m27[40] = 0x8cc;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001c50:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
     DevNVRAM->calibration_table.dacValB_m27[41] = 0x8ca;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001c5a:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
     DevNVRAM->calibration_table.dacValB_m27[42] = 0x81f;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f640 021f 	movw	r2, #2079	; 0x81f
 8001c64:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
     DevNVRAM->calibration_table.dacValB_m27[43] = 0x7de;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f240 72de 	movw	r2, #2014	; 0x7de
 8001c6e:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
     DevNVRAM->calibration_table.dacValB_m27[44] = 0x864;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f640 0264 	movw	r2, #2148	; 0x864
 8001c78:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
     DevNVRAM->calibration_table.dacValB_m27[45] = 0x8ce;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001c82:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
     DevNVRAM->calibration_table.dacValB_m27[46] = 0x8d9;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f640 02d9 	movw	r2, #2265	; 0x8d9
 8001c8c:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
     DevNVRAM->calibration_table.dacValB_m27[47] = 0x870;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001c96:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
     DevNVRAM->calibration_table.dacValB_m27[48] = 0x7de;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f240 72de 	movw	r2, #2014	; 0x7de
 8001ca0:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
     DevNVRAM->calibration_table.dacValB_m27[49] = 0x80b;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f640 020b 	movw	r2, #2059	; 0x80b
 8001caa:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
     DevNVRAM->calibration_table.dacValB_m27[50] = 0x95b;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f640 125b 	movw	r2, #2395	; 0x95b
 8001cb4:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
     DevNVRAM->calibration_table.dacValB_m27[51] = 0x89c;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f640 029c 	movw	r2, #2204	; 0x89c
 8001cbe:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
     DevNVRAM->calibration_table.dacValB_m27[52] = 0x95b;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f640 125b 	movw	r2, #2395	; 0x95b
 8001cc8:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
     DevNVRAM->calibration_table.dacValB_m27[53] = 0x7e2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f240 72e2 	movw	r2, #2018	; 0x7e2
 8001cd2:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
     DevNVRAM->calibration_table.dacValB_m27[54] = 0x8ce;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001cdc:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
     DevNVRAM->calibration_table.dacValB_m27[55] = 0x974;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f640 1274 	movw	r2, #2420	; 0x974
 8001ce6:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
     DevNVRAM->calibration_table.dacValB_m27[56] = 0x7e7;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001cf0:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
     DevNVRAM->calibration_table.dacValB_m27[57] = 0x801;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f640 0201 	movw	r2, #2049	; 0x801
 8001cfa:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
     DevNVRAM->calibration_table.dacValB_m27[58] = 0x864;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f640 0264 	movw	r2, #2148	; 0x864
 8001d04:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
     DevNVRAM->calibration_table.dacValB_m27[59] = 0x8a1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f640 02a1 	movw	r2, #2209	; 0x8a1
 8001d0e:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
     DevNVRAM->calibration_table.dacValB_m27[60] = 0x988;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f640 1288 	movw	r2, #2440	; 0x988
 8001d18:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a
     DevNVRAM->calibration_table.dacValB_m27[61] = 0x7e3;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f240 72e3 	movw	r2, #2019	; 0x7e3
 8001d22:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
     DevNVRAM->calibration_table.dacValB_m27[62] = 0x864;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f640 0264 	movw	r2, #2148	; 0x864
 8001d2c:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
     DevNVRAM->calibration_table.dacValB_m27[63] = 0x92a;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f640 122a 	movw	r2, #2346	; 0x92a
 8001d36:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
     DevNVRAM->calibration_table.dacValB_m27[64] = 0x7fc;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001d40:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
     DevNVRAM->calibration_table.dacValB_m27[65] = 0x897;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f640 0297 	movw	r2, #2199	; 0x897
 8001d4a:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
     DevNVRAM->calibration_table.dacValB_m27[66] = 0x892;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f640 0292 	movw	r2, #2194	; 0x892
 8001d54:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
     DevNVRAM->calibration_table.dacValB_m27[67] = 0x8af;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f640 02af 	movw	r2, #2223	; 0x8af
 8001d5e:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
     DevNVRAM->calibration_table.dacValB_m27[68] = 0x83a;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d68:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
     DevNVRAM->calibration_table.dacValB_m27[69] = 0x810;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f44f 6201 	mov.w	r2, #2064	; 0x810
 8001d72:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
     DevNVRAM->calibration_table.dacValB_m27[70] = 0x83a;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f640 023a 	movw	r2, #2106	; 0x83a
 8001d7c:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
     DevNVRAM->calibration_table.dacValB_m27[71] = 0x7d4;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001d86:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
     DevNVRAM->calibration_table.dacValB_m27[72] = 0x914;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f640 1214 	movw	r2, #2324	; 0x914
 8001d90:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
     DevNVRAM->calibration_table.dacValB_m27[73] = 0x7d6;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f240 72d6 	movw	r2, #2006	; 0x7d6
 8001d9a:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
     DevNVRAM->calibration_table.dacValB_m27[74] = 0x8e8;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001da4:	f8a3 2346 	strh.w	r2, [r3, #838]	; 0x346
     DevNVRAM->calibration_table.dacValB_m27[75] = 0x7e8;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001dae:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
     DevNVRAM->calibration_table.dacValB_m27[76] = 0x8e7;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001db8:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a
     DevNVRAM->calibration_table.dacValB_m27[77] = 0x8fa;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f640 02fa 	movw	r2, #2298	; 0x8fa
 8001dc2:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
     DevNVRAM->calibration_table.dacValB_m27[78] = 0xa82;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f640 2282 	movw	r2, #2690	; 0xa82
 8001dcc:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e
     DevNVRAM->calibration_table.dacValB_m27[79] = 0x86c;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f640 026c 	movw	r2, #2156	; 0x86c
 8001dd6:	f8a3 2350 	strh.w	r2, [r3, #848]	; 0x350
     DevNVRAM->calibration_table.dacValB_m27[80] = 0x906;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f640 1206 	movw	r2, #2310	; 0x906
 8001de0:	f8a3 2352 	strh.w	r2, [r3, #850]	; 0x352
     DevNVRAM->calibration_table.dacValB_m27[81] = 0x8f8;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f640 02f8 	movw	r2, #2296	; 0x8f8
 8001dea:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
     DevNVRAM->calibration_table.dacValB_m27[82] = 0x885;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f640 0285 	movw	r2, #2181	; 0x885
 8001df4:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
     DevNVRAM->calibration_table.dacValB_m27[83] = 0x884;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f640 0284 	movw	r2, #2180	; 0x884
 8001dfe:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
     DevNVRAM->calibration_table.dacValB_m27[84] = 0x930;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001e08:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
     DevNVRAM->calibration_table.dacValB_m27[85] = 0x865;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f640 0265 	movw	r2, #2149	; 0x865
 8001e12:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
     DevNVRAM->calibration_table.dacValB_m27[86] = 0x8d0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
 8001e1c:	f8a3 235e 	strh.w	r2, [r3, #862]	; 0x35e
     DevNVRAM->calibration_table.dacValB_m27[87] = 0x7e7;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8001e26:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
     DevNVRAM->calibration_table.dacValB_m27[88] = 0x8b9;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f640 02b9 	movw	r2, #2233	; 0x8b9
 8001e30:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
     DevNVRAM->calibration_table.dacValB_m27[89] = 0xab4;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001e3a:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
     DevNVRAM->calibration_table.dacValB_m27[90] = 0x8c8;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8001e44:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
     DevNVRAM->calibration_table.dacValB_m27[91] = 0x8e9;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f640 02e9 	movw	r2, #2281	; 0x8e9
 8001e4e:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
     DevNVRAM->calibration_table.dacValB_m27[92] = 0xaff;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001e58:	f8a3 236a 	strh.w	r2, [r3, #874]	; 0x36a
     DevNVRAM->calibration_table.dacValB_m27[93] = 0x7da;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e62:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
     DevNVRAM->calibration_table.dacValB_m27[94] = 0x804;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f640 0204 	movw	r2, #2052	; 0x804
 8001e6c:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
     DevNVRAM->calibration_table.dacValB_m27[95] = 0x7da;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e76:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
     DevNVRAM->calibration_table.dacValB_m27[96] = 0x804;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f640 0204 	movw	r2, #2052	; 0x804
 8001e80:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
     DevNVRAM->calibration_table.dacValB_m27[97] = 0x7da;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f240 72da 	movw	r2, #2010	; 0x7da
 8001e8a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
     DevNVRAM->calibration_table.dacValB_m27[98] = 0x8ca;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001e94:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
     DevNVRAM->calibration_table.dacValB_m27[99] = 0x947;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f640 1247 	movw	r2, #2375	; 0x947
 8001e9e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
     DevNVRAM->calibration_table.dacValB_m27[100] = 0x8fe;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f640 02fe 	movw	r2, #2302	; 0x8fe
 8001ea8:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
     DevNVRAM->calibration_table.dacValB_m27[101] = 0x8fc;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001eb2:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
     DevNVRAM->calibration_table.dacValB_m27[102] = 0x8ed;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8001ebc:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
     DevNVRAM->calibration_table.dacValB_m27[103] = 0x989;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f640 1289 	movw	r2, #2441	; 0x989
 8001ec6:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
     DevNVRAM->calibration_table.dacValB_m27[104] = 0x92e;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f640 122e 	movw	r2, #2350	; 0x92e
 8001ed0:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
     DevNVRAM->calibration_table.dacValB_m27[105] = 0x930;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001eda:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
     DevNVRAM->calibration_table.dacValB_m27[106] = 0x9cf;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001ee4:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
     DevNVRAM->calibration_table.dacValB_m27[107] = 0x979;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f640 1279 	movw	r2, #2425	; 0x979
 8001eee:	f8a3 2388 	strh.w	r2, [r3, #904]	; 0x388
     DevNVRAM->calibration_table.dacValB_m27[108] = 0x9cf;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f640 12cf 	movw	r2, #2511	; 0x9cf
 8001ef8:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
     DevNVRAM->calibration_table.dacValB_m27[109] = 0x979;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f640 1279 	movw	r2, #2425	; 0x979
 8001f02:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
     DevNVRAM->calibration_table.dacValB_m27[110] = 0x9e6;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f640 12e6 	movw	r2, #2534	; 0x9e6
 8001f0c:	f8a3 238e 	strh.w	r2, [r3, #910]	; 0x38e
     DevNVRAM->calibration_table.dacValB_m27[111] = 0x9fc;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f640 12fc 	movw	r2, #2556	; 0x9fc
 8001f16:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
     DevNVRAM->calibration_table.dacValB_m27[112] = 0x992;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f640 1292 	movw	r2, #2450	; 0x992
 8001f20:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
     DevNVRAM->calibration_table.dacValB_m27[113] = 0xaa9;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8001f2a:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
     DevNVRAM->calibration_table.dacValB_m27[114] = 0xbd0;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001f34:	f8a3 2396 	strh.w	r2, [r3, #918]	; 0x396
     DevNVRAM->calibration_table.dacValB_m27[115] = 0xc1c;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001f3e:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
     DevNVRAM->calibration_table.dacValB_m27[116] = 0x9c6;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001f48:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
     DevNVRAM->calibration_table.dacValB_m27[117] = 0xb2b;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f640 322b 	movw	r2, #2859	; 0xb2b
 8001f52:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
     DevNVRAM->calibration_table.dacValB_m27[118] = 0x9d8;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001f5c:	f8a3 239e 	strh.w	r2, [r3, #926]	; 0x39e
     DevNVRAM->calibration_table.dacValB_m27[119] = 0xc1f;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001f66:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
     DevNVRAM->calibration_table.dacValB_m27[120] = 0xb5d;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f640 325d 	movw	r2, #2909	; 0xb5d
 8001f70:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
     DevNVRAM->calibration_table.dacValB_m27[121] = 0xc50;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8001f7a:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
     DevNVRAM->calibration_table.dacValB_m27[122] = 0xc4e;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001f84:	f8a3 23a6 	strh.w	r2, [r3, #934]	; 0x3a6
     DevNVRAM->calibration_table.dacValB_m27[123] = 0xc4c;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f640 424c 	movw	r2, #3148	; 0xc4c
 8001f8e:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8
     DevNVRAM->calibration_table.dacValB_m27[124] = 0xa0e;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f640 220e 	movw	r2, #2574	; 0xa0e
 8001f98:	f8a3 23aa 	strh.w	r2, [r3, #938]	; 0x3aa
     DevNVRAM->calibration_table.dacValB_m27[125] = 0xc76;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f640 4276 	movw	r2, #3190	; 0xc76
 8001fa2:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
     DevNVRAM->calibration_table.dacValB_m27[126] = 0xbed;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f640 32ed 	movw	r2, #3053	; 0xbed
 8001fac:	f8a3 23ae 	strh.w	r2, [r3, #942]	; 0x3ae
     DevNVRAM->calibration_table.dacValB_m27[127] = 0xa2f;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f640 222f 	movw	r2, #2607	; 0xa2f
 8001fb6:	f8a3 23b0 	strh.w	r2, [r3, #944]	; 0x3b0
     DevNVRAM->calibration_table.dacValB_m27[128] = 0xa36;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f640 2236 	movw	r2, #2614	; 0xa36
 8001fc0:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2
     DevNVRAM->calibration_table.dacValB_m27[129] = 0xc80;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001fca:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
     DevNVRAM->calibration_table.dacValB_m27[130] = 0xc71;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f640 4271 	movw	r2, #3185	; 0xc71
 8001fd4:	f8a3 23b6 	strh.w	r2, [r3, #950]	; 0x3b6
     DevNVRAM->calibration_table.dacValB_m27[131] = 0xa55;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f640 2255 	movw	r2, #2645	; 0xa55
 8001fde:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
     DevNVRAM->calibration_table.dacValB_m27[132] = 0xcac;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f640 42ac 	movw	r2, #3244	; 0xcac
 8001fe8:	f8a3 23ba 	strh.w	r2, [r3, #954]	; 0x3ba
     DevNVRAM->calibration_table.dacValB_m27[133] = 0xa6b;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001ff2:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
     DevNVRAM->calibration_table.dacValB_m27[134] = 0xcbb;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8001ffc:	f8a3 23be 	strh.w	r2, [r3, #958]	; 0x3be
     DevNVRAM->calibration_table.dacValB_m27[135] = 0xa7d;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f640 227d 	movw	r2, #2685	; 0xa7d
 8002006:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
     DevNVRAM->calibration_table.dacValB_m27[136] = 0xb9a;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f640 329a 	movw	r2, #2970	; 0xb9a
 8002010:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
     DevNVRAM->calibration_table.dacValB_m27[137] = 0xba7;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f640 32a7 	movw	r2, #2983	; 0xba7
 800201a:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
     DevNVRAM->calibration_table.dacValB_m27[138] = 0xab4;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f640 22b4 	movw	r2, #2740	; 0xab4
 8002024:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
     DevNVRAM->calibration_table.dacValB_m27[139] = 0xbe4;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f640 32e4 	movw	r2, #3044	; 0xbe4
 800202e:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
     DevNVRAM->calibration_table.dacValB_m27[140] = 0xab4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f640 22b4 	movw	r2, #2740	; 0xab4
 8002038:	f8a3 23ca 	strh.w	r2, [r3, #970]	; 0x3ca
     DevNVRAM->calibration_table.dacValB_m27[141] = 0xbbc;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8002042:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
     DevNVRAM->calibration_table.dacValB_m27[142] = 0xbba;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f640 32ba 	movw	r2, #3002	; 0xbba
 800204c:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
     DevNVRAM->calibration_table.dacValB_m27[143] = 0xd02;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f640 5202 	movw	r2, #3330	; 0xd02
 8002056:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
     DevNVRAM->calibration_table.dacValB_m27[144] = 0xbf3;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f640 32f3 	movw	r2, #3059	; 0xbf3
 8002060:	f8a3 23d2 	strh.w	r2, [r3, #978]	; 0x3d2
     DevNVRAM->calibration_table.dacValB_m27[145] = 0xaf0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800206a:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
     DevNVRAM->calibration_table.dacValB_m27[146] = 0xaed;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f640 22ed 	movw	r2, #2797	; 0xaed
 8002074:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
     DevNVRAM->calibration_table.dacValB_m27[147] = 0xaf8;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800207e:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
     DevNVRAM->calibration_table.dacValB_m27[148] = 0xcfc;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002088:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
     DevNVRAM->calibration_table.dacValB_m27[149] = 0xc18;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f640 4218 	movw	r2, #3096	; 0xc18
 8002092:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
     DevNVRAM->calibration_table.dacValB_m27[150] = 0xb0b;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f640 320b 	movw	r2, #2827	; 0xb0b
 800209c:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
     DevNVRAM->calibration_table.dacValB_m27[151] = 0xb18;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f640 3218 	movw	r2, #2840	; 0xb18
 80020a6:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
     DevNVRAM->calibration_table.dacValB_m27[152] = 0xb1b;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f640 321b 	movw	r2, #2843	; 0xb1b
 80020b0:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
     DevNVRAM->calibration_table.dacValB_m27[153] = 0xc08;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f640 4208 	movw	r2, #3080	; 0xc08
 80020ba:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
     DevNVRAM->calibration_table.dacValB_m27[154] = 0xb2a;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f640 322a 	movw	r2, #2858	; 0xb2a
 80020c4:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
     DevNVRAM->calibration_table.dacValB_m27[155] = 0xb2f;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f640 322f 	movw	r2, #2863	; 0xb2f
 80020ce:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
     DevNVRAM->calibration_table.dacValB_m27[156] = 0xd09;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f640 5209 	movw	r2, #3337	; 0xd09
 80020d8:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
     DevNVRAM->calibration_table.dacValB_m27[157] = 0xc0a;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f640 420a 	movw	r2, #3082	; 0xc0a
 80020e2:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
     DevNVRAM->calibration_table.dacValB_m27[158] = 0xb4f;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f640 324f 	movw	r2, #2895	; 0xb4f
 80020ec:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
     DevNVRAM->calibration_table.dacValB_m27[159] = 0xb56;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f640 3256 	movw	r2, #2902	; 0xb56
 80020f6:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
     DevNVRAM->calibration_table.dacValB_m27[160] = 0xb6d;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f640 326d 	movw	r2, #2925	; 0xb6d
 8002100:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
     DevNVRAM->calibration_table.dacValB_m27[161] = 0xb44;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f640 3244 	movw	r2, #2884	; 0xb44
 800210a:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
     DevNVRAM->calibration_table.dacValB_m27[162] = 0x1000;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002114:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

 }
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(union NVRAM *DevNVRAM, int16_t volt){
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b08f      	sub	sp, #60	; 0x3c
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]


int16_t minVolt = MIN_VOLT_MODE_12;
 8002130:	f64e 4378 	movw	r3, #60536	; 0xec78
 8002134:	86fb      	strh	r3, [r7, #54]	; 0x36
int16_t maxVolt = MAX_VOLT_MODE_12;
 8002136:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800213a:	86bb      	strh	r3, [r7, #52]	; 0x34


uint16_t x0 = abs(minVolt);
 800213c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002140:	2b00      	cmp	r3, #0
 8002142:	bfb8      	it	lt
 8002144:	425b      	neglt	r3, r3
 8002146:	867b      	strh	r3, [r7, #50]	; 0x32
uint16_t x1 = abs(maxVolt);
 8002148:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	bfb8      	it	lt
 8002150:	425b      	neglt	r3, r3
 8002152:	863b      	strh	r3, [r7, #48]	; 0x30

float count = (x0+x1)/STEP_CALIBRATE;
 8002154:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002156:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002158:	4413      	add	r3, r2
 800215a:	4a53      	ldr	r2, [pc, #332]	; (80022a8 <volt2dgt+0x184>)
 800215c:	fb82 1203 	smull	r1, r2, r2, r3
 8002160:	1192      	asrs	r2, r2, #6
 8002162:	17db      	asrs	r3, r3, #31
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fb20 	bl	80007ac <__aeabi_i2f>
 800216c:	4603      	mov	r3, r0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c

uint16_t y0 = 0;            // начало индекса массива
 8002170:	2300      	movs	r3, #0
 8002172:	857b      	strh	r3, [r7, #42]	; 0x2a
uint16_t y1 = count;        // конец индекса массива
 8002174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002176:	f7fe fcbd 	bl	8000af4 <__aeabi_f2uiz>
 800217a:	4603      	mov	r3, r0
 800217c:	853b      	strh	r3, [r7, #40]	; 0x28

float b = (count*x0)/(x0+x1);
 800217e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fb13 	bl	80007ac <__aeabi_i2f>
 8002186:	4603      	mov	r3, r0
 8002188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fb62 	bl	8000854 <__aeabi_fmul>
 8002190:	4603      	mov	r3, r0
 8002192:	461c      	mov	r4, r3
 8002194:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002196:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002198:	4413      	add	r3, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fb06 	bl	80007ac <__aeabi_i2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7fe fc09 	bl	80009bc <__aeabi_fdiv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
float a = b/x0;
 80021ae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fafb 	bl	80007ac <__aeabi_i2f>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021bc:	f7fe fbfe 	bl	80009bc <__aeabi_fdiv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	623b      	str	r3, [r7, #32]

int16_t x = volt ;// /Ktr!!!!!!!!!!!!!!
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	83fb      	strh	r3, [r7, #30]
int y = floor(a*x+b); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
 80021c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe faed 	bl	80007ac <__aeabi_i2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	6a39      	ldr	r1, [r7, #32]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fb3c 	bl	8000854 <__aeabi_fmul>
 80021dc:	4603      	mov	r3, r0
 80021de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fa2f 	bl	8000644 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f91d 	bl	8000428 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f00b f9bb 	bl	800d570 <floor>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe f9f1 	bl	80005e8 <__aeabi_d2iz>
 8002206:	4603      	mov	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]

// TODO:Найти по найденому индексу значение в массиве!  и найти значение n+1

uint16_t Ca0 =(uint16_t *) DevNVRAM->calibration_table.dacValA_m12[y];
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	3304      	adds	r3, #4
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	889b      	ldrh	r3, [r3, #4]
 8002216:	82fb      	strh	r3, [r7, #22]
uint16_t Ca1 = DevNVRAM->calibration_table.dacValA_m12[y+1];
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	3304      	adds	r3, #4
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	82bb      	strh	r3, [r7, #20]

uint16_t a0 = (y * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!27*200 = 5400
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4413      	add	r3, r2
 8002232:	461a      	mov	r2, r3
 8002234:	0091      	lsls	r1, r2, #2
 8002236:	461a      	mov	r2, r3
 8002238:	460b      	mov	r3, r1
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	b29b      	uxth	r3, r3
 8002240:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002244:	3b08      	subs	r3, #8
 8002246:	827b      	strh	r3, [r7, #18]
uint16_t a1 = ((y+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12);// TODO: не правльно переводит значения!28*200 = 5600
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3301      	adds	r3, #1
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4413      	add	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	0091      	lsls	r1, r2, #2
 8002258:	461a      	mov	r2, r3
 800225a:	460b      	mov	r3, r1
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	b29b      	uxth	r3, r3
 8002262:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8002266:	3b08      	subs	r3, #8
 8002268:	823b      	strh	r3, [r7, #16]



float CodeX = (((Ca1-Ca0)/(a1-a0)))*(x-a0)+Ca0;
 800226a:	8aba      	ldrh	r2, [r7, #20]
 800226c:	8afb      	ldrh	r3, [r7, #22]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	8a39      	ldrh	r1, [r7, #16]
 8002272:	8a7b      	ldrh	r3, [r7, #18]
 8002274:	1acb      	subs	r3, r1, r3
 8002276:	fb92 f3f3 	sdiv	r3, r2, r3
 800227a:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800227e:	8a7a      	ldrh	r2, [r7, #18]
 8002280:	1a8a      	subs	r2, r1, r2
 8002282:	fb02 f203 	mul.w	r2, r2, r3
 8002286:	8afb      	ldrh	r3, [r7, #22]
 8002288:	4413      	add	r3, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fa8e 	bl	80007ac <__aeabi_i2f>
 8002290:	4603      	mov	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]
	return CodeX;
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7fe fc2d 	bl	8000af4 <__aeabi_f2uiz>
 800229a:	4603      	mov	r3, r0
 800229c:	b29b      	uxth	r3, r3





}
 800229e:	4618      	mov	r0, r3
 80022a0:	373c      	adds	r7, #60	; 0x3c
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	51eb851f 	.word	0x51eb851f

080022ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80022c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80022cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80022d4:	e000      	b.n	80022d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80022d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f9      	beq.n	80022d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80022e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80022fc:	4b07      	ldr	r3, [pc, #28]	; (800231c <DWT_Init+0x24>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <DWT_Init+0x24>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <DWT_Init+0x28>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <DWT_Init+0x28>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	e000edf0 	.word	0xe000edf0
 8002320:	e0001000 	.word	0xe0001000

08002324 <_write>:
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e009      	b.n	800234a <_write+0x26>
		ITM_SendChar(*ptr++);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	60ba      	str	r2, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffb4 	bl	80022ac <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf1      	blt.n	8002336 <_write+0x12>
	}
	return len;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <SetDacA>:
#if  TEST_DAC

uint16_t VDAC_A = 2154;
uint16_t VDAC_B = 2154;

void SetDacA(uint16_t da) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
	VDAC_A = da;
 8002366:	4a06      	ldr	r2, [pc, #24]	; (8002380 <SetDacA+0x24>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <SetDacA+0x24>)
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	4804      	ldr	r0, [pc, #16]	; (8002384 <SetDacA+0x28>)
 8002374:	f7fe fc0a 	bl	8000b8c <DAC_AD5322_Ch1>
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000010 	.word	0x20000010
 8002384:	20000580 	.word	0x20000580

08002388 <SetDacB>:
void SetDacB(uint16_t db) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
	VDAC_B = db;
 8002392:	4a06      	ldr	r2, [pc, #24]	; (80023ac <SetDacB+0x24>)
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <SetDacB+0x24>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	4619      	mov	r1, r3
 800239e:	4804      	ldr	r0, [pc, #16]	; (80023b0 <SetDacB+0x28>)
 80023a0:	f7fe fc3b 	bl	8000c1a <DAC_AD5322_Ch2>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000012 	.word	0x20000012
 80023b0:	20000580 	.word	0x20000580

080023b4 <SetAllDAC>:
void SetAllDAC() {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SetAllDAC+0x18>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <SetAllDAC+0x1c>)
 80023be:	8812      	ldrh	r2, [r2, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	4804      	ldr	r0, [pc, #16]	; (80023d4 <SetAllDAC+0x20>)
 80023c4:	f7fe fc70 	bl	8000ca8 <DAC_AD5322_Ch1Ch2>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000010 	.word	0x20000010
 80023d0:	20000012 	.word	0x20000012
 80023d4:	20000580 	.word	0x20000580

080023d8 <GetDacA>:
uint16_t GetDacA() {
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	return VDAC_A;
 80023dc:	4b02      	ldr	r3, [pc, #8]	; (80023e8 <GetDacA+0x10>)
 80023de:	881b      	ldrh	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000010 	.word	0x20000010

080023ec <GetDacB>:
uint16_t GetDacB() {
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	return VDAC_B;
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <GetDacB+0x10>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	20000012 	.word	0x20000012

08002400 <GetBtnRunState>:
uint32_t time_key3 = 0;

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState() {
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <GetBtnRunState+0x7c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <GetBtnRunState+0x24>
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <GetBtnRunState+0x80>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <GetBtnRunState+0x80>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <GetBtnRunState+0x7c>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	e026      	b.n	8002472 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <GetBtnRunState+0x7c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10b      	bne.n	8002444 <GetBtnRunState+0x44>
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <GetBtnRunState+0x80>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <GetBtnRunState+0x80>)
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <GetBtnRunState+0x7c>)
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8002440:	2301      	movs	r3, #1
 8002442:	e016      	b.n	8002472 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <GetBtnRunState+0x7c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <GetBtnRunState+0x64>
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <GetBtnRunState+0x80>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <GetBtnRunState+0x80>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <GetBtnRunState+0x7c>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8002460:	2302      	movs	r3, #2
 8002462:	e006      	b.n	8002472 <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <GetBtnRunState+0x80>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <GetBtnRunState+0x7c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000025d 	.word	0x2000025d
 8002480:	2000025c 	.word	0x2000025c

08002484 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState() {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 8002488:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <GetBtnUpState+0x7c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <GetBtnUpState+0x24>
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <GetBtnUpState+0x80>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d107      	bne.n	80024a8 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <GetBtnUpState+0x80>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <GetBtnUpState+0x7c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e026      	b.n	80024f6 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <GetBtnUpState+0x7c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10b      	bne.n	80024c8 <GetBtnUpState+0x44>
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <GetBtnUpState+0x80>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d107      	bne.n	80024c8 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <GetBtnUpState+0x80>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <GetBtnUpState+0x7c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e016      	b.n	80024f6 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <GetBtnUpState+0x7c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <GetBtnUpState+0x64>
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <GetBtnUpState+0x80>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <GetBtnUpState+0x80>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <GetBtnUpState+0x7c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80024e4:	2302      	movs	r3, #2
 80024e6:	e006      	b.n	80024f6 <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <GetBtnUpState+0x80>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <GetBtnUpState+0x7c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000265 	.word	0x20000265
 8002504:	20000264 	.word	0x20000264

08002508 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState() {
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <GetBtnDownState+0x7c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <GetBtnDownState+0x24>
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <GetBtnDownState+0x80>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <GetBtnDownState+0x80>)
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <GetBtnDownState+0x7c>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8002528:	2300      	movs	r3, #0
 800252a:	e026      	b.n	800257a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <GetBtnDownState+0x7c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10b      	bne.n	800254c <GetBtnDownState+0x44>
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <GetBtnDownState+0x80>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <GetBtnDownState+0x80>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 8002542:	4b10      	ldr	r3, [pc, #64]	; (8002584 <GetBtnDownState+0x7c>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8002548:	2301      	movs	r3, #1
 800254a:	e016      	b.n	800257a <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <GetBtnDownState+0x7c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <GetBtnDownState+0x64>
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <GetBtnDownState+0x80>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d107      	bne.n	800256c <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <GetBtnDownState+0x80>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <GetBtnDownState+0x7c>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8002568:	2302      	movs	r3, #2
 800256a:	e006      	b.n	800257a <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <GetBtnDownState+0x80>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 8002572:	4b04      	ldr	r3, [pc, #16]	; (8002584 <GetBtnDownState+0x7c>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000026d 	.word	0x2000026d
 8002588:	2000026c 	.word	0x2000026c

0800258c <EnableTIM3_PB4>:
volatile uint16_t g_vTIM3_PB4 = 0;
volatile uint16_t g_vTIM4_PB6 = 0;

char trans2_str[64] = {0,};
//--------------------------------------------------------------------------
void EnableTIM3_PB4(){
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <EnableTIM3_PB4+0x14>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	2000026e 	.word	0x2000026e

080025a4 <GetTIM3>:
uint16_t GetTIM3(){
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <GetTIM3+0x14>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000270 	.word	0x20000270

080025bc <resValTIM3_PB4>:
void resValTIM3_PB4(){
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <resValTIM3_PB4+0x14>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	801a      	strh	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000270 	.word	0x20000270

080025d4 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6(){
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <EnableTIM4_PB6+0x14>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000026e 	.word	0x2000026e

080025ec <GetTIM4>:
uint16_t GetTIM4(){
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <GetTIM4+0x14>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000272 	.word	0x20000272

08002604 <resValTIM4_PB6>:
void resValTIM4_PB6(){
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <resValTIM4_PB6+0x14>)
 800260a:	2200      	movs	r2, #0
 800260c:	801a      	strh	r2, [r3, #0]
}
 800260e:	bf00      	nop
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000272 	.word	0x20000272

0800261c <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork) {
 8002624:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d027      	beq.n	800267e <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Instance == TIM3) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a29      	ldr	r2, [pc, #164]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d149      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7f1b      	ldrb	r3, [r3, #28]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d145      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8002640:	2100      	movs	r1, #0
 8002642:	4826      	ldr	r0, [pc, #152]	; (80026dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002644:	f005 f974 	bl	8007930 <HAL_TIM_ReadCapturedValue>
 8002648:	4603      	mov	r3, r0
 800264a:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 800264c:	2104      	movs	r1, #4
 800264e:	4823      	ldr	r0, [pc, #140]	; (80026dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002650:	f005 f96e 	bl	8007930 <HAL_TIM_ReadCapturedValue>
 8002654:	4603      	mov	r3, r0
 8002656:	81fb      	strh	r3, [r7, #14]
						TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t) periodTIM3
						- (int16_t) pulseWidthTIM3;
 800265e:	8a3a      	ldrh	r2, [r7, #16]
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b29b      	uxth	r3, r3
				int16_t deltaTIM3 = (int16_t) periodTIM3
 8002666:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8002668:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	bfb8      	it	lt
 8002670:	425b      	neglt	r3, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 8002676:	89ba      	ldrh	r2, [r7, #12]
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800267a:	801a      	strh	r2, [r3, #0]

			}
		}
	}

}
 800267c:	e026      	b.n	80026cc <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d121      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7f1b      	ldrb	r3, [r3, #28]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d11d      	bne.n	80026cc <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002690:	2100      	movs	r1, #0
 8002692:	4815      	ldr	r0, [pc, #84]	; (80026e8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8002694:	f005 f94c 	bl	8007930 <HAL_TIM_ReadCapturedValue>
 8002698:	4603      	mov	r3, r0
 800269a:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 800269c:	2104      	movs	r1, #4
 800269e:	4812      	ldr	r0, [pc, #72]	; (80026e8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80026a0:	f005 f946 	bl	8007930 <HAL_TIM_ReadCapturedValue>
 80026a4:	4603      	mov	r3, r0
 80026a6:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
						- (int16_t) pulseWidthTIM4;
 80026ae:	8afa      	ldrh	r2, [r7, #22]
 80026b0:	8abb      	ldrh	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29b      	uxth	r3, r3
				int16_t deltaTIM4 = (int16_t) periodTIM4
 80026b6:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80026b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bfb8      	it	lt
 80026c0:	425b      	neglt	r3, r3
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80026c6:	8a7a      	ldrh	r2, [r7, #18]
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_TIM_IC_CaptureCallback+0xd0>)
 80026ca:	801a      	strh	r2, [r3, #0]
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000026e 	.word	0x2000026e
 80026d8:	40000400 	.word	0x40000400
 80026dc:	20000508 	.word	0x20000508
 80026e0:	20000270 	.word	0x20000270
 80026e4:	40000800 	.word	0x40000800
 80026e8:	200004b8 	.word	0x200004b8
 80026ec:	20000272 	.word	0x20000272

080026f0 <GetADC>:
/* USER CODE BEGIN 0 */
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC(){
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	return g_VADC;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <GetADC+0x14>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000274 	.word	0x20000274

08002708 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <HAL_ADC_ConvCpltCallback+0x28>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d106      	bne.n	8002728 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800271a:	4806      	ldr	r0, [pc, #24]	; (8002734 <HAL_ADC_ConvCpltCallback+0x2c>)
 800271c:	f001 fac0 	bl	8003ca0 <HAL_ADC_GetValue>
 8002720:	4603      	mov	r3, r0
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_ADC_ConvCpltCallback+0x30>)
 8002726:	801a      	strh	r2, [r3, #0]
    }
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40012400 	.word	0x40012400
 8002734:	20000550 	.word	0x20000550
 8002738:	20000274 	.word	0x20000274

0800273c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8002742:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002744:	f001 f898 	bl	8003878 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8002748:	f7ff fdd6 	bl	80022f8 <DWT_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800274c:	f000 fbc2 	bl	8002ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002750:	f000 fd6c 	bl	800322c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002754:	f000 fc6e 	bl	8003034 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002758:	f008 ff7a 	bl	800b650 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800275c:	f000 fc18 	bl	8002f90 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002760:	f000 fca0 	bl	80030a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002764:	f000 fd00 	bl	8003168 <MX_TIM4_Init>
  MX_CRC_Init();
 8002768:	f000 fc50 	bl	800300c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  //**************************************************************************
#if  TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 800276c:	4bce      	ldr	r3, [pc, #824]	; (8002aa8 <main+0x36c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	4bcd      	ldr	r3, [pc, #820]	; (8002aac <main+0x370>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	4bcc      	ldr	r3, [pc, #816]	; (8002ab0 <main+0x374>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4acc      	ldr	r2, [pc, #816]	; (8002ab4 <main+0x378>)
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4603      	mov	r3, r0
 800278e:	460a      	mov	r2, r1
 8002790:	49c9      	ldr	r1, [pc, #804]	; (8002ab8 <main+0x37c>)
 8002792:	48ca      	ldr	r0, [pc, #808]	; (8002abc <main+0x380>)
 8002794:	f009 fde0 	bl	800c358 <siprintf>
	printf((uint8_t*)buffer);
 8002798:	48c8      	ldr	r0, [pc, #800]	; (8002abc <main+0x380>)
 800279a:	f009 fdc5 	bl	800c328 <iprintf>
#endif	/* TEST_UID */

	//**************************************************************************
#if	TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800279e:	2100      	movs	r1, #0
 80027a0:	48c7      	ldr	r0, [pc, #796]	; (8002ac0 <main+0x384>)
 80027a2:	f004 fe23 	bl	80073ec <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80027a6:	2104      	movs	r1, #4
 80027a8:	48c5      	ldr	r0, [pc, #788]	; (8002ac0 <main+0x384>)
 80027aa:	f004 fe1f 	bl	80073ec <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80027ae:	2100      	movs	r1, #0
 80027b0:	48c4      	ldr	r0, [pc, #784]	; (8002ac4 <main+0x388>)
 80027b2:	f004 fe1b 	bl	80073ec <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80027b6:	2104      	movs	r1, #4
 80027b8:	48c2      	ldr	r0, [pc, #776]	; (8002ac4 <main+0x388>)
 80027ba:	f004 fe17 	bl	80073ec <HAL_TIM_IC_Start_IT>
#endif	/* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if	TEST_DAC
	SetAllDAC();
 80027be:	f7ff fdf9 	bl	80023b4 <SetAllDAC>
#endif	/* TEST_DAC */
	//**************************************************************************
#if	TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 80027c2:	48c1      	ldr	r0, [pc, #772]	; (8002ac8 <main+0x38c>)
 80027c4:	f001 fcc8 	bl	8004158 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 80027c8:	48bf      	ldr	r0, [pc, #764]	; (8002ac8 <main+0x38c>)
 80027ca:	f001 f9b3 	bl	8003b34 <HAL_ADC_Start_IT>

	union NVRAM DevNVRAM;

	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 80027ce:	4bbf      	ldr	r3, [pc, #764]	; (8002acc <main+0x390>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 80027d4:	4bbd      	ldr	r3, [pc, #756]	; (8002acc <main+0x390>)
 80027d6:	4abe      	ldr	r2, [pc, #760]	; (8002ad0 <main+0x394>)
 80027d8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;               // кол-во страниц для стирания
 80027da:	4bbc      	ldr	r3, [pc, #752]	; (8002acc <main+0x390>)
 80027dc:	2201      	movs	r2, #1
 80027de:	60da      	str	r2, [r3, #12]
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------
// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 80027e0:	4bbb      	ldr	r3, [pc, #748]	; (8002ad0 <main+0x394>)
 80027e2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	l_Error = 0;
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80027f2:	e012      	b.n	800281a <main+0xde>
		DevNVRAM.data32[l_Index] = *(__IO uint32_t*) l_Address;
 80027f4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	f107 0308 	add.w	r3, r7, #8
 80027fe:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		l_Index = l_Index + 1;
 8002806:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800280a:	3301      	adds	r3, #1
 800280c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		l_Address = l_Address + 4;
 8002810:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002814:	3304      	adds	r3, #4
 8002816:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800281a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800281e:	4aad      	ldr	r2, [pc, #692]	; (8002ad4 <main+0x398>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d9e7      	bls.n	80027f4 <main+0xb8>
	}

//--------------------------------------------------------------------------
// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE) {
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4aab      	ldr	r2, [pc, #684]	; (8002ad8 <main+0x39c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	f000 80ee 	beq.w	8002a0e <main+0x2d2>
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f009 fd6b 	bl	800c318 <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002848:	e010      	b.n	800286c <main+0x130>
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 800284a:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 800284e:	f897 2417 	ldrb.w	r2, [r7, #1047]	; 0x417
 8002852:	b291      	uxth	r1, r2
 8002854:	f107 0208 	add.w	r2, r7, #8
 8002858:	3304      	adds	r3, #4
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	460a      	mov	r2, r1
 8002860:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002862:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002866:	3301      	adds	r3, #1
 8002868:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 800286c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002870:	2b57      	cmp	r3, #87	; 0x57
 8002872:	d9ea      	bls.n	800284a <main+0x10e>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
 800287a:	e010      	b.n	800289e <main+0x162>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 800287c:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8002880:	f897 2416 	ldrb.w	r2, [r7, #1046]	; 0x416
 8002884:	b291      	uxth	r1, r2
 8002886:	f107 0208 	add.w	r2, r7, #8
 800288a:	335c      	adds	r3, #92	; 0x5c
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	460a      	mov	r2, r1
 8002892:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8002894:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8002898:	3301      	adds	r3, #1
 800289a:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
 800289e:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 80028a2:	2b57      	cmp	r3, #87	; 0x57
 80028a4:	d9ea      	bls.n	800287c <main+0x140>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 80028ac:	e010      	b.n	80028d0 <main+0x194>
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 80028ae:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 80028b2:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 80028b6:	b291      	uxth	r1, r2
 80028b8:	f107 0208 	add.w	r2, r7, #8
 80028bc:	33b4      	adds	r3, #180	; 0xb4
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	460a      	mov	r2, r1
 80028c4:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80028c6:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 80028ca:	3301      	adds	r3, #1
 80028cc:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 80028d0:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 80028d4:	2ba2      	cmp	r3, #162	; 0xa2
 80028d6:	d9ea      	bls.n	80028ae <main+0x172>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
 80028de:	e010      	b.n	8002902 <main+0x1c6>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 80028e0:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 80028e4:	f897 2414 	ldrb.w	r2, [r7, #1044]	; 0x414
 80028e8:	b291      	uxth	r1, r2
 80028ea:	f107 0208 	add.w	r2, r7, #8
 80028ee:	335c      	adds	r3, #92	; 0x5c
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	460a      	mov	r2, r1
 80028f6:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 80028f8:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 80028fc:	3301      	adds	r3, #1
 80028fe:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
 8002902:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 8002906:	2ba2      	cmp	r3, #162	; 0xa2
 8002908:	d9ea      	bls.n	80028e0 <main+0x1a4>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 800290a:	f107 0308 	add.w	r3, r7, #8
 800290e:	2206      	movs	r2, #6
 8002910:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8002912:	f107 0308 	add.w	r3, r7, #8
 8002916:	2205      	movs	r2, #5
 8002918:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN 		= 0x1121001; //11 неделя + год + порядковый номер изготовления
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	4a6f      	ldr	r2, [pc, #444]	; (8002adc <main+0x3a0>)
 8002920:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <main+0x39c>)
 8002928:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	2200      	movs	r2, #0
 8002930:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;//TODO: по какой то причине в этом проекте не работает CRC!!! у
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	2200      	movs	r2, #0
 800293a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 800293e:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <main+0x394>)
 8002940:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0;
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
		l_Index = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002950:	e019      	b.n	8002986 <main+0x24a>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 800295a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800295e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d004      	beq.n	8002972 <main+0x236>
				l_Error++;
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	1d3b      	adds	r3, r7, #4
 8002970:	601a      	str	r2, [r3, #0]
			}
			l_Index = l_Index + 1;
 8002972:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8002976:	3301      	adds	r3, #1
 8002978:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			l_Address = l_Address + 4;
 800297c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002980:	3304      	adds	r3, #4
 8002982:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002986:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800298a:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <main+0x398>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d9e0      	bls.n	8002952 <main+0x216>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d03a      	beq.n	8002a0e <main+0x2d2>
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8002998:	f001 fe1e 	bl	80045d8 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	484a      	ldr	r0, [pc, #296]	; (8002acc <main+0x390>)
 80029a2:	f001 ff01 	bl	80047a8 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 80029a6:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <main+0x394>)
 80029a8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			l_Error = 0x00;
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
			l_Index = 0x00;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80029b8:	e022      	b.n	8002a00 <main+0x2c4>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
						DevNVRAM.data32[l_Index]) != HAL_OK) {
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80029c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80029c6:	461a      	mov	r2, r3
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80029d0:	2002      	movs	r0, #2
 80029d2:	f001 fd91 	bl	80044f8 <HAL_FLASH_Program>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <main+0x2aa>
					l_Error++;
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	601a      	str	r2, [r3, #0]
				}

				l_Address = l_Address + 4;
 80029e6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80029ea:	3304      	adds	r3, #4
 80029ec:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				l_Index = l_Index + 1;
 80029f0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80029f4:	3301      	adds	r3, #1
 80029f6:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
				HAL_Delay(10);
 80029fa:	200a      	movs	r0, #10
 80029fc:	f000 ff9e 	bl	800393c <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002a00:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002a04:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <main+0x398>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d9d7      	bls.n	80029ba <main+0x27e>
			}
			HAL_FLASH_Lock();
 8002a0a:	f001 fe0b 	bl	8004624 <HAL_FLASH_Lock>
	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!


// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <main+0x394>)
 8002a10:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	l_Error = 0;
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002a20:	e019      	b.n	8002a56 <main+0x31a>
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002a2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a2e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d004      	beq.n	8002a42 <main+0x306>
			l_Error++;
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	601a      	str	r2, [r3, #0]
		}
		l_Index = l_Index + 1;
 8002a42:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8002a46:	3301      	adds	r3, #1
 8002a48:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		l_Address = l_Address + 4;
 8002a4c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002a50:	3304      	adds	r3, #4
 8002a52:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002a56:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <main+0x398>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d9e0      	bls.n	8002a22 <main+0x2e6>
	}

	if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d065      	beq.n	8002b34 <main+0x3f8>
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8002a68:	f001 fdb6 	bl	80045d8 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4816      	ldr	r0, [pc, #88]	; (8002acc <main+0x390>)
 8002a72:	f001 fe99 	bl	80047a8 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <main+0x394>)
 8002a78:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0x00;
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
		l_Index = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002aa4:	e03f      	b.n	8002b26 <main+0x3ea>
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	20000008 	.word	0x20000008
 8002ab4:	2000000c 	.word	0x2000000c
 8002ab8:	0800d688 	.word	0x0800d688
 8002abc:	20000214 	.word	0x20000214
 8002ac0:	20000508 	.word	0x20000508
 8002ac4:	200004b8 	.word	0x200004b8
 8002ac8:	20000550 	.word	0x20000550
 8002acc:	20000278 	.word	0x20000278
 8002ad0:	0801fc00 	.word	0x0801fc00
 8002ad4:	0801ffff 	.word	0x0801ffff
 8002ad8:	48151623 	.word	0x48151623
 8002adc:	01121001 	.word	0x01121001
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					DevNVRAM.data32[l_Index]) != HAL_OK) {
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8002af6:	2002      	movs	r0, #2
 8002af8:	f001 fcfe 	bl	80044f8 <HAL_FLASH_Program>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <main+0x3d0>
				l_Error++;
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	601a      	str	r2, [r3, #0]
			}

			l_Address = l_Address + 4;
 8002b0c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002b10:	3304      	adds	r3, #4
 8002b12:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			l_Index = l_Index + 1;
 8002b16:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			HAL_Delay(10);
 8002b20:	200a      	movs	r0, #10
 8002b22:	f000 ff0b 	bl	800393c <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002b26:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002b2a:	4ab6      	ldr	r2, [pc, #728]	; (8002e04 <main+0x6c8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d9d7      	bls.n	8002ae0 <main+0x3a4>
		}
		HAL_FLASH_Lock();
 8002b30:	f001 fd78 	bl	8004624 <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8002b34:	2064      	movs	r0, #100	; 0x64
 8002b36:	f000 ff01 	bl	800393c <HAL_Delay>
//--------------------------------------------------------------------------
	crete_calibration_table(&DevNVRAM);
 8002b3a:	f107 0308 	add.w	r3, r7, #8
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe f936 	bl	8000db0 <crete_calibration_table>
	uint16_t new_valDAC = volt2dgt(&DevNVRAM, 400);
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fae9 	bl	8002124 <volt2dgt>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f8a7 3412 	strh.w	r3, [r7, #1042]	; 0x412
	while (1) {

//**************************************************************************
// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

		l_Address = FLASH_TABLE_START_ADDR;
 8002b58:	4bab      	ldr	r3, [pc, #684]	; (8002e08 <main+0x6cc>)
 8002b5a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
		l_Index = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		//Читаем и сравниваем
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002b6a:	e019      	b.n	8002ba0 <main+0x464>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002b74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b78:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d004      	beq.n	8002b8c <main+0x450>
				l_Error++;
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	1d3b      	adds	r3, r7, #4
 8002b8a:	601a      	str	r2, [r3, #0]
			}
			l_Index = l_Index + 1;
 8002b8c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8002b90:	3301      	adds	r3, #1
 8002b92:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			l_Address = l_Address + 4;
 8002b96:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002ba0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002ba4:	4a97      	ldr	r2, [pc, #604]	; (8002e04 <main+0x6c8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d9e0      	bls.n	8002b6c <main+0x430>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d055      	beq.n	8002c5e <main+0x522>
			printf("Ошибка чтения таблицы :%i", l_Error);
 8002bb2:	1d3b      	adds	r3, r7, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4894      	ldr	r0, [pc, #592]	; (8002e0c <main+0x6d0>)
 8002bba:	f009 fbb5 	bl	800c328 <iprintf>
			if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d048      	beq.n	8002c58 <main+0x51c>
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 8002bc6:	f001 fd07 	bl	80045d8 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4890      	ldr	r0, [pc, #576]	; (8002e10 <main+0x6d4>)
 8002bd0:	f001 fdea 	bl	80047a8 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 8002bd4:	4b8c      	ldr	r3, [pc, #560]	; (8002e08 <main+0x6cc>)
 8002bd6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
					l_Error = 0x00;
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
					l_Index = 0x00;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0;
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002c02:	e022      	b.n	8002c4a <main+0x50e>
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								DevNVRAM.data32[l_Index]) != HAL_OK) {
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8002c10:	461a      	mov	r2, r3
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f001 fc6c 	bl	80044f8 <HAL_FLASH_Program>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <main+0x4f4>
							l_Error++;
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	601a      	str	r2, [r3, #0]
						}

						l_Address = l_Address + 4;
 8002c30:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002c34:	3304      	adds	r3, #4
 8002c36:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
						l_Index = l_Index + 1;
 8002c3a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
						HAL_Delay(10);
 8002c44:	200a      	movs	r0, #10
 8002c46:	f000 fe79 	bl	800393c <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002c4a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002c4e:	4a6d      	ldr	r2, [pc, #436]	; (8002e04 <main+0x6c8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d9d7      	bls.n	8002c04 <main+0x4c8>
					}
					HAL_FLASH_Lock();
 8002c54:	f001 fce6 	bl	8004624 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f000 fe6f 	bl	800393c <HAL_Delay>
		}

//**************************************************************************
#if  TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 8002c5e:	f000 fe63 	bl	8003928 <HAL_GetTick>
 8002c62:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8002c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c6a:	486a      	ldr	r0, [pc, #424]	; (8002e14 <main+0x6d8>)
 8002c6c:	f001 ffc8 	bl	8004c00 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50) {
 8002c76:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <main+0x56e>
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <main+0x6dc>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d111      	bne.n	8002caa <main+0x56e>
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <main+0x6e0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b32      	cmp	r3, #50	; 0x32
 8002c92:	d90a      	bls.n	8002caa <main+0x56e>
			short_state1 = 1;
 8002c94:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <main+0x6dc>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <main+0x6e4>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002ca0:	4a5e      	ldr	r2, [pc, #376]	; (8002e1c <main+0x6e0>)
 8002ca2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e033      	b.n	8002d12 <main+0x5d6>
		} else if (key1_state
 8002caa:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d112      	bne.n	8002cd8 <main+0x59c>
				== 0&& !long_state1 && (ms - time_key1) > KEY_LONG_DELAY) {
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <main+0x6e4>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10e      	bne.n	8002cd8 <main+0x59c>
 8002cba:	4b58      	ldr	r3, [pc, #352]	; (8002e1c <main+0x6e0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc8:	d906      	bls.n	8002cd8 <main+0x59c>
			long_state1 = 1;
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <main+0x6e4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8002cd0:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <main+0x6e8>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e01c      	b.n	8002d12 <main+0x5d6>

		} else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50) {
 8002cd8:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d118      	bne.n	8002d12 <main+0x5d6>
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	; (8002e18 <main+0x6dc>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d014      	beq.n	8002d12 <main+0x5d6>
 8002ce8:	4b4c      	ldr	r3, [pc, #304]	; (8002e1c <main+0x6e0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b32      	cmp	r3, #50	; 0x32
 8002cf4:	d90d      	bls.n	8002d12 <main+0x5d6>
			short_state1 = 0;
 8002cf6:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <main+0x6dc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8002cfc:	4a47      	ldr	r2, [pc, #284]	; (8002e1c <main+0x6e0>)
 8002cfe:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002d02:	6013      	str	r3, [r2, #0]

			if (!long_state1) {
 8002d04:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <main+0x6e4>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <main+0x5d6>
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8002d0c:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <main+0x6ec>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8002d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d16:	483f      	ldr	r0, [pc, #252]	; (8002e14 <main+0x6d8>)
 8002d18:	f001 ff72 	bl	8004c00 <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 340a 	strb.w	r3, [r7, #1034]	; 0x40a

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50) {
 8002d22:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d115      	bne.n	8002d56 <main+0x61a>
 8002d2a:	4b40      	ldr	r3, [pc, #256]	; (8002e2c <main+0x6f0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d111      	bne.n	8002d56 <main+0x61a>
 8002d32:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <main+0x6f4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b32      	cmp	r3, #50	; 0x32
 8002d3e:	d90a      	bls.n	8002d56 <main+0x61a>
			short_state2 = 1;
 8002d40:	4b3a      	ldr	r3, [pc, #232]	; (8002e2c <main+0x6f0>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8002d46:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <main+0x6f8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002d4c:	4a38      	ldr	r2, [pc, #224]	; (8002e30 <main+0x6f4>)
 8002d4e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e033      	b.n	8002dbe <main+0x682>
		} else if (key2_state
 8002d56:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d112      	bne.n	8002d84 <main+0x648>
				== 0&& !long_state2 && (ms - time_key2) > KEY_LONG_DELAY) {
 8002d5e:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <main+0x6f8>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <main+0x648>
 8002d66:	4b32      	ldr	r3, [pc, #200]	; (8002e30 <main+0x6f4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d74:	d906      	bls.n	8002d84 <main+0x648>
			long_state2 = 1;
 8002d76:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <main+0x6f8>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <main+0x6fc>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e01c      	b.n	8002dbe <main+0x682>
		} else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50) {
 8002d84:	f897 340a 	ldrb.w	r3, [r7, #1034]	; 0x40a
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d118      	bne.n	8002dbe <main+0x682>
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <main+0x6f0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d014      	beq.n	8002dbe <main+0x682>
 8002d94:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <main+0x6f4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b32      	cmp	r3, #50	; 0x32
 8002da0:	d90d      	bls.n	8002dbe <main+0x682>
			short_state2 = 0;
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <main+0x6f0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <main+0x6f4>)
 8002daa:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002dae:	6013      	str	r3, [r2, #0]

			if (!long_state2) {
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <main+0x6f8>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <main+0x682>
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <main+0x700>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8002dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dc2:	4814      	ldr	r0, [pc, #80]	; (8002e14 <main+0x6d8>)
 8002dc4:	f001 ff1c 	bl	8004c00 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50) {
 8002dce:	f897 3409 	ldrb.w	r3, [r7, #1033]	; 0x409
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d13a      	bne.n	8002e4c <main+0x710>
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <main+0x704>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d136      	bne.n	8002e4c <main+0x710>
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <main+0x708>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b32      	cmp	r3, #50	; 0x32
 8002dea:	d92f      	bls.n	8002e4c <main+0x710>
			short_state3 = 1;
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <main+0x704>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <main+0x70c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002df8:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <main+0x708>)
 8002dfa:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e05c      	b.n	8002ebc <main+0x780>
 8002e02:	bf00      	nop
 8002e04:	0801ffff 	.word	0x0801ffff
 8002e08:	0801fc00 	.word	0x0801fc00
 8002e0c:	0800d69c 	.word	0x0800d69c
 8002e10:	20000278 	.word	0x20000278
 8002e14:	40010c00 	.word	0x40010c00
 8002e18:	20000254 	.word	0x20000254
 8002e1c:	20000258 	.word	0x20000258
 8002e20:	20000255 	.word	0x20000255
 8002e24:	2000025c 	.word	0x2000025c
 8002e28:	2000025d 	.word	0x2000025d
 8002e2c:	2000025e 	.word	0x2000025e
 8002e30:	20000260 	.word	0x20000260
 8002e34:	2000025f 	.word	0x2000025f
 8002e38:	20000264 	.word	0x20000264
 8002e3c:	20000265 	.word	0x20000265
 8002e40:	20000266 	.word	0x20000266
 8002e44:	20000268 	.word	0x20000268
 8002e48:	20000267 	.word	0x20000267
		} else if (key3_state
 8002e4c:	f897 3409 	ldrb.w	r3, [r7, #1033]	; 0x409
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d112      	bne.n	8002e7a <main+0x73e>
				== 0&& !long_state3 && (ms - time_key3) > KEY_LONG_DELAY) {
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <main+0x784>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10e      	bne.n	8002e7a <main+0x73e>
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <main+0x788>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e6a:	d906      	bls.n	8002e7a <main+0x73e>
			long_state3 = 1;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <main+0x784>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <main+0x78c>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
 8002e78:	e020      	b.n	8002ebc <main+0x780>
		} else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50) {
 8002e7a:	f897 3409 	ldrb.w	r3, [r7, #1033]	; 0x409
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	f47f ae6a 	bne.w	8002b58 <main+0x41c>
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <main+0x790>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f43f ae65 	beq.w	8002b58 <main+0x41c>
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <main+0x788>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b32      	cmp	r3, #50	; 0x32
 8002e9a:	f67f ae5d 	bls.w	8002b58 <main+0x41c>
			short_state3 = 0;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <main+0x790>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <main+0x788>)
 8002ea6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002eaa:	6013      	str	r3, [r2, #0]

			if (!long_state3) {
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <main+0x784>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f ae51 	bne.w	8002b58 <main+0x41c>
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <main+0x794>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
	while (1) {
 8002ebc:	e64c      	b.n	8002b58 <main+0x41c>
 8002ebe:	bf00      	nop
 8002ec0:	20000267 	.word	0x20000267
 8002ec4:	20000268 	.word	0x20000268
 8002ec8:	2000026c 	.word	0x2000026c
 8002ecc:	20000266 	.word	0x20000266
 8002ed0:	2000026d 	.word	0x2000026d

08002ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b094      	sub	sp, #80	; 0x50
 8002ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ede:	2228      	movs	r2, #40	; 0x28
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f009 fa18 	bl	800c318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef8:	1d3b      	adds	r3, r7, #4
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f12:	2301      	movs	r3, #1
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f16:	2302      	movs	r3, #2
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f20:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 fa28 	bl	8006380 <HAL_RCC_OscConfig>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002f36:	f000 fa09 	bl	800334c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f3a:	230f      	movs	r3, #15
 8002f3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fc92 	bl	8006880 <HAL_RCC_ClockConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002f62:	f000 f9f3 	bl	800334c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002f66:	2312      	movs	r3, #18
 8002f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fe08 	bl	8006b8c <HAL_RCCEx_PeriphCLKConfig>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002f82:	f000 f9e3 	bl	800334c <Error_Handler>
  }
}
 8002f86:	bf00      	nop
 8002f88:	3750      	adds	r7, #80	; 0x50
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f96:	1d3b      	adds	r3, r7, #4
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <MX_ADC1_Init+0x78>)
 8002fa4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fce:	f000 fcd9 	bl	8003984 <HAL_ADC_Init>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002fd8:	f000 f9b8 	bl	800334c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <MX_ADC1_Init+0x74>)
 8002fee:	f000 ff2f 	bl	8003e50 <HAL_ADC_ConfigChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002ff8:	f000 f9a8 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000550 	.word	0x20000550
 8003008:	40012400 	.word	0x40012400

0800300c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <MX_CRC_Init+0x20>)
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <MX_CRC_Init+0x24>)
 8003014:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_CRC_Init+0x20>)
 8003018:	f001 fa51 	bl	80044be <HAL_CRC_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003022:	f000 f993 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000500 	.word	0x20000500
 8003030:	40023000 	.word	0x40023000

08003034 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <MX_SPI1_Init+0x68>)
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <MX_SPI1_Init+0x6c>)
 800303c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800303e:	4b17      	ldr	r3, [pc, #92]	; (800309c <MX_SPI1_Init+0x68>)
 8003040:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <MX_SPI1_Init+0x68>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <MX_SPI1_Init+0x68>)
 800304e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003052:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <MX_SPI1_Init+0x68>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <MX_SPI1_Init+0x68>)
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <MX_SPI1_Init+0x68>)
 8003062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003066:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <MX_SPI1_Init+0x68>)
 800306a:	2208      	movs	r2, #8
 800306c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <MX_SPI1_Init+0x68>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <MX_SPI1_Init+0x68>)
 8003076:	2200      	movs	r2, #0
 8003078:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <MX_SPI1_Init+0x68>)
 800307c:	2200      	movs	r2, #0
 800307e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <MX_SPI1_Init+0x68>)
 8003082:	220a      	movs	r2, #10
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <MX_SPI1_Init+0x68>)
 8003088:	f003 fefa 	bl	8006e80 <HAL_SPI_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8003092:	f000 f95b 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000580 	.word	0x20000580
 80030a0:	40013000 	.word	0x40013000

080030a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030aa:	f107 0310 	add.w	r3, r7, #16
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030b4:	463b      	mov	r3, r7
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c0:	4b27      	ldr	r3, [pc, #156]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030c2:	4a28      	ldr	r2, [pc, #160]	; (8003164 <MX_TIM3_Init+0xc0>)
 80030c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030c8:	2247      	movs	r2, #71	; 0x47
 80030ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030d4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80030d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030dc:	2200      	movs	r2, #0
 80030de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80030e6:	481e      	ldr	r0, [pc, #120]	; (8003160 <MX_TIM3_Init+0xbc>)
 80030e8:	f004 f930 	bl	800734c <HAL_TIM_IC_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80030f2:	f000 f92b 	bl	800334c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030fe:	f107 0310 	add.w	r3, r7, #16
 8003102:	4619      	mov	r1, r3
 8003104:	4816      	ldr	r0, [pc, #88]	; (8003160 <MX_TIM3_Init+0xbc>)
 8003106:	f004 fe0f 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003110:	f000 f91c 	bl	800334c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003114:	2300      	movs	r3, #0
 8003116:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003118:	2301      	movs	r3, #1
 800311a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003124:	463b      	mov	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	4619      	mov	r1, r3
 800312a:	480d      	ldr	r0, [pc, #52]	; (8003160 <MX_TIM3_Init+0xbc>)
 800312c:	f004 fb6c 	bl	8007808 <HAL_TIM_IC_ConfigChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8003136:	f000 f909 	bl	800334c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800313a:	2302      	movs	r3, #2
 800313c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800313e:	2302      	movs	r3, #2
 8003140:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003142:	463b      	mov	r3, r7
 8003144:	2204      	movs	r2, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4805      	ldr	r0, [pc, #20]	; (8003160 <MX_TIM3_Init+0xbc>)
 800314a:	f004 fb5d 	bl	8007808 <HAL_TIM_IC_ConfigChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003154:	f000 f8fa 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000508 	.word	0x20000508
 8003164:	40000400 	.word	0x40000400

08003168 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003178:	463b      	mov	r3, r7
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <MX_TIM4_Init+0xbc>)
 8003186:	4a28      	ldr	r2, [pc, #160]	; (8003228 <MX_TIM4_Init+0xc0>)
 8003188:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <MX_TIM4_Init+0xbc>)
 800318c:	2247      	movs	r2, #71	; 0x47
 800318e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <MX_TIM4_Init+0xbc>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <MX_TIM4_Init+0xbc>)
 8003198:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 800319c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <MX_TIM4_Init+0xbc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a4:	4b1f      	ldr	r3, [pc, #124]	; (8003224 <MX_TIM4_Init+0xbc>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80031aa:	481e      	ldr	r0, [pc, #120]	; (8003224 <MX_TIM4_Init+0xbc>)
 80031ac:	f004 f8ce 	bl	800734c <HAL_TIM_IC_Init>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80031b6:	f000 f8c9 	bl	800334c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4619      	mov	r1, r3
 80031c8:	4816      	ldr	r0, [pc, #88]	; (8003224 <MX_TIM4_Init+0xbc>)
 80031ca:	f004 fdad 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80031d4:	f000 f8ba 	bl	800334c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031e8:	463b      	mov	r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	4619      	mov	r1, r3
 80031ee:	480d      	ldr	r0, [pc, #52]	; (8003224 <MX_TIM4_Init+0xbc>)
 80031f0:	f004 fb0a 	bl	8007808 <HAL_TIM_IC_ConfigChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80031fa:	f000 f8a7 	bl	800334c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80031fe:	2302      	movs	r3, #2
 8003200:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003202:	2302      	movs	r3, #2
 8003204:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003206:	463b      	mov	r3, r7
 8003208:	2204      	movs	r2, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_TIM4_Init+0xbc>)
 800320e:	f004 fafb 	bl	8007808 <HAL_TIM_IC_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003218:	f000 f898 	bl	800334c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200004b8 	.word	0x200004b8
 8003228:	40000800 	.word	0x40000800

0800322c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003232:	f107 0310 	add.w	r3, r7, #16
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <MX_GPIO_Init+0x110>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a3d      	ldr	r2, [pc, #244]	; (800333c <MX_GPIO_Init+0x110>)
 8003246:	f043 0310 	orr.w	r3, r3, #16
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b3b      	ldr	r3, [pc, #236]	; (800333c <MX_GPIO_Init+0x110>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <MX_GPIO_Init+0x110>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a37      	ldr	r2, [pc, #220]	; (800333c <MX_GPIO_Init+0x110>)
 800325e:	f043 0320 	orr.w	r3, r3, #32
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b35      	ldr	r3, [pc, #212]	; (800333c <MX_GPIO_Init+0x110>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003270:	4b32      	ldr	r3, [pc, #200]	; (800333c <MX_GPIO_Init+0x110>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a31      	ldr	r2, [pc, #196]	; (800333c <MX_GPIO_Init+0x110>)
 8003276:	f043 0304 	orr.w	r3, r3, #4
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <MX_GPIO_Init+0x110>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <MX_GPIO_Init+0x110>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4a2b      	ldr	r2, [pc, #172]	; (800333c <MX_GPIO_Init+0x110>)
 800328e:	f043 0308 	orr.w	r3, r3, #8
 8003292:	6193      	str	r3, [r2, #24]
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <MX_GPIO_Init+0x110>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032a6:	4826      	ldr	r0, [pc, #152]	; (8003340 <MX_GPIO_Init+0x114>)
 80032a8:	f001 fcc1 	bl	8004c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80032ac:	2200      	movs	r2, #0
 80032ae:	f240 4112 	movw	r1, #1042	; 0x412
 80032b2:	4824      	ldr	r0, [pc, #144]	; (8003344 <MX_GPIO_Init+0x118>)
 80032b4:	f001 fcbb 	bl	8004c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 80032b8:	2201      	movs	r2, #1
 80032ba:	2104      	movs	r1, #4
 80032bc:	4821      	ldr	r0, [pc, #132]	; (8003344 <MX_GPIO_Init+0x118>)
 80032be:	f001 fcb6 	bl	8004c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c8:	2301      	movs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	4619      	mov	r1, r3
 80032da:	4819      	ldr	r0, [pc, #100]	; (8003340 <MX_GPIO_Init+0x114>)
 80032dc:	f001 fb0c 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 80032e0:	f240 4316 	movw	r3, #1046	; 0x416
 80032e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e6:	2301      	movs	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2302      	movs	r3, #2
 80032f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 0310 	add.w	r3, r7, #16
 80032f6:	4619      	mov	r1, r3
 80032f8:	4812      	ldr	r0, [pc, #72]	; (8003344 <MX_GPIO_Init+0x118>)
 80032fa:	f001 fafd 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003308:	2301      	movs	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	4619      	mov	r1, r3
 8003312:	480d      	ldr	r0, [pc, #52]	; (8003348 <MX_GPIO_Init+0x11c>)
 8003314:	f001 faf0 	bl	80048f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003318:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800331c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003326:	f107 0310 	add.w	r3, r7, #16
 800332a:	4619      	mov	r1, r3
 800332c:	4806      	ldr	r0, [pc, #24]	; (8003348 <MX_GPIO_Init+0x11c>)
 800332e:	f001 fae3 	bl	80048f8 <HAL_GPIO_Init>

}
 8003332:	bf00      	nop
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	40011000 	.word	0x40011000
 8003344:	40010800 	.word	0x40010800
 8003348:	40010c00 	.word	0x40010c00

0800334c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_MspInit+0x5c>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_MspInit+0x5c>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6193      	str	r3, [r2, #24]
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_MspInit+0x5c>)
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_MspInit+0x5c>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_MspInit+0x5c>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003380:	61d3      	str	r3, [r2, #28]
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_MspInit+0x5c>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_MspInit+0x60>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <HAL_MspInit+0x60>)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40010000 	.word	0x40010000

080033bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a18      	ldr	r2, [pc, #96]	; (8003438 <HAL_ADC_MspInit+0x7c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d129      	bne.n	8003430 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e6:	6193      	str	r3, [r2, #24]
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_ADC_MspInit+0x80>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800340c:	2308      	movs	r3, #8
 800340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003410:	2303      	movs	r3, #3
 8003412:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 0310 	add.w	r3, r7, #16
 8003418:	4619      	mov	r1, r3
 800341a:	4809      	ldr	r0, [pc, #36]	; (8003440 <HAL_ADC_MspInit+0x84>)
 800341c:	f001 fa6c 	bl	80048f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003420:	2200      	movs	r2, #0
 8003422:	2100      	movs	r1, #0
 8003424:	2012      	movs	r0, #18
 8003426:	f001 f814 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800342a:	2012      	movs	r0, #18
 800342c:	f001 f82d 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40012400 	.word	0x40012400
 800343c:	40021000 	.word	0x40021000
 8003440:	40010800 	.word	0x40010800

08003444 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <HAL_CRC_MspInit+0x34>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10b      	bne.n	800346e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_CRC_MspInit+0x38>)
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <HAL_CRC_MspInit+0x38>)
 800345c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003460:	6153      	str	r3, [r2, #20]
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_CRC_MspInit+0x38>)
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40023000 	.word	0x40023000
 800347c:	40021000 	.word	0x40021000

08003480 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <HAL_SPI_MspInit+0x70>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d123      	bne.n	80034e8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_SPI_MspInit+0x74>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 80034d0:	23a0      	movs	r3, #160	; 0xa0
 80034d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d8:	2303      	movs	r3, #3
 80034da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034dc:	f107 0310 	add.w	r3, r7, #16
 80034e0:	4619      	mov	r1, r3
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <HAL_SPI_MspInit+0x78>)
 80034e4:	f001 fa08 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034e8:	bf00      	nop
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013000 	.word	0x40013000
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40010800 	.word	0x40010800

080034fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08c      	sub	sp, #48	; 0x30
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 031c 	add.w	r3, r7, #28
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3b      	ldr	r2, [pc, #236]	; (8003604 <HAL_TIM_IC_MspInit+0x108>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d13e      	bne.n	800359a <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4a39      	ldr	r2, [pc, #228]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 8003522:	f043 0302 	orr.w	r3, r3, #2
 8003526:	61d3      	str	r3, [r2, #28]
 8003528:	4b37      	ldr	r3, [pc, #220]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	4a33      	ldr	r2, [pc, #204]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 800353a:	f043 0308 	orr.w	r3, r3, #8
 800353e:	6193      	str	r3, [r2, #24]
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800354c:	2310      	movs	r3, #16
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	482b      	ldr	r0, [pc, #172]	; (800360c <HAL_TIM_IC_MspInit+0x110>)
 8003560:	f001 f9ca 	bl	80048f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003564:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_TIM_IC_MspInit+0x114>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003582:	4a23      	ldr	r2, [pc, #140]	; (8003610 <HAL_TIM_IC_MspInit+0x114>)
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003588:	2200      	movs	r2, #0
 800358a:	2100      	movs	r1, #0
 800358c:	201d      	movs	r0, #29
 800358e:	f000 ff60 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003592:	201d      	movs	r0, #29
 8003594:	f000 ff79 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003598:	e030      	b.n	80035fc <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_TIM_IC_MspInit+0x118>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12b      	bne.n	80035fc <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	4a17      	ldr	r2, [pc, #92]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	61d3      	str	r3, [r2, #28]
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035c2:	f043 0308 	orr.w	r3, r3, #8
 80035c6:	6193      	str	r3, [r2, #24]
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_TIM_IC_MspInit+0x10c>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035d4:	2340      	movs	r3, #64	; 0x40
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f107 031c 	add.w	r3, r7, #28
 80035e4:	4619      	mov	r1, r3
 80035e6:	4809      	ldr	r0, [pc, #36]	; (800360c <HAL_TIM_IC_MspInit+0x110>)
 80035e8:	f001 f986 	bl	80048f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035ec:	2200      	movs	r2, #0
 80035ee:	2100      	movs	r1, #0
 80035f0:	201e      	movs	r0, #30
 80035f2:	f000 ff2e 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035f6:	201e      	movs	r0, #30
 80035f8:	f000 ff47 	bl	800448a <HAL_NVIC_EnableIRQ>
}
 80035fc:	bf00      	nop
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40000400 	.word	0x40000400
 8003608:	40021000 	.word	0x40021000
 800360c:	40010c00 	.word	0x40010c00
 8003610:	40010000 	.word	0x40010000
 8003614:	40000800 	.word	0x40000800

08003618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8003628:	4803      	ldr	r0, [pc, #12]	; (8003638 <HardFault_Handler+0x14>)
 800362a:	f008 fe7d 	bl	800c328 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 800362e:	4802      	ldr	r0, [pc, #8]	; (8003638 <HardFault_Handler+0x14>)
 8003630:	f008 fe7a 	bl	800c328 <iprintf>
 8003634:	e7fb      	b.n	800362e <HardFault_Handler+0xa>
 8003636:	bf00      	nop
 8003638:	0800d6fc 	.word	0x0800d6fc

0800363c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <MemManage_Handler+0x4>

08003642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003646:	e7fe      	b.n	8003646 <BusFault_Handler+0x4>

08003648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800364c:	e7fe      	b.n	800364c <UsageFault_Handler+0x4>

0800364e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003676:	f000 f945 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <ADC1_2_IRQHandler+0x10>)
 8003686:	f000 fb17 	bl	8003cb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000550 	.word	0x20000550

08003694 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800369a:	f001 fc11 	bl	8004ec0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000ec4 	.word	0x20000ec4

080036a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036ac:	4802      	ldr	r0, [pc, #8]	; (80036b8 <TIM3_IRQHandler+0x10>)
 80036ae:	f003 ffa3 	bl	80075f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000508 	.word	0x20000508

080036bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <TIM4_IRQHandler+0x10>)
 80036c2:	f003 ff99 	bl	80075f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200004b8 	.word	0x200004b8

080036d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e00a      	b.n	80036f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036e2:	f3af 8000 	nop.w
 80036e6:	4601      	mov	r1, r0
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	60ba      	str	r2, [r7, #8]
 80036ee:	b2ca      	uxtb	r2, r1
 80036f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	3301      	adds	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	dbf0      	blt.n	80036e2 <_read+0x12>
	}

return len;
 8003700:	687b      	ldr	r3, [r7, #4]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <_close>:
	}
	return len;
}

int _close(int file)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	return -1;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003730:	605a      	str	r2, [r3, #4]
	return 0;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <_isatty>:

int _isatty(int file)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	return 1;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
	return 0;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
	...

0800376c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x50>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <_sbrk+0x16>
		heap_end = &end;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <_sbrk+0x50>)
 800377e:	4a10      	ldr	r2, [pc, #64]	; (80037c0 <_sbrk+0x54>)
 8003780:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <_sbrk+0x50>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <_sbrk+0x50>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4413      	add	r3, r2
 8003790:	466a      	mov	r2, sp
 8003792:	4293      	cmp	r3, r2
 8003794:	d907      	bls.n	80037a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003796:	f008 fd87 	bl	800c2a8 <__errno>
 800379a:	4603      	mov	r3, r0
 800379c:	220c      	movs	r2, #12
 800379e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80037a0:	f04f 33ff 	mov.w	r3, #4294967295
 80037a4:	e006      	b.n	80037b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <_sbrk+0x50>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a03      	ldr	r2, [pc, #12]	; (80037bc <_sbrk+0x50>)
 80037b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000288 	.word	0x20000288
 80037c0:	200011c0 	.word	0x200011c0

080037c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <SystemInit+0x5c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <SystemInit+0x5c>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <SystemInit+0x5c>)
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	4911      	ldr	r1, [pc, #68]	; (8003820 <SystemInit+0x5c>)
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <SystemInit+0x60>)
 80037dc:	4013      	ands	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <SystemInit+0x5c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <SystemInit+0x5c>)
 80037e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <SystemInit+0x5c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <SystemInit+0x5c>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <SystemInit+0x5c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a07      	ldr	r2, [pc, #28]	; (8003820 <SystemInit+0x5c>)
 8003802:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003806:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SystemInit+0x5c>)
 800380a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800380e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SystemInit+0x64>)
 8003812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003816:	609a      	str	r2, [r3, #8]
#endif 
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	40021000 	.word	0x40021000
 8003824:	f8ff0000 	.word	0xf8ff0000
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800382c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800382e:	e003      	b.n	8003838 <LoopCopyDataInit>

08003830 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003832:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003834:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003836:	3104      	adds	r1, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003838:	480a      	ldr	r0, [pc, #40]	; (8003864 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800383c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800383e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003840:	d3f6      	bcc.n	8003830 <CopyDataInit>
  ldr r2, =_sbss
 8003842:	4a0a      	ldr	r2, [pc, #40]	; (800386c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003844:	e002      	b.n	800384c <LoopFillZerobss>

08003846 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003848:	f842 3b04 	str.w	r3, [r2], #4

0800384c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800384e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003850:	d3f9      	bcc.n	8003846 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003852:	f7ff ffb7 	bl	80037c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003856:	f008 fd2d 	bl	800c2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800385a:	f7fe ff6f 	bl	800273c <main>
  bx lr
 800385e:	4770      	bx	lr
  ldr r3, =_sidata
 8003860:	0800d880 	.word	0x0800d880
  ldr r0, =_sdata
 8003864:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003868:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 800386c:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8003870:	200011c0 	.word	0x200011c0

08003874 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003874:	e7fe      	b.n	8003874 <CAN1_RX1_IRQHandler>
	...

08003878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_Init+0x28>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_Init+0x28>)
 8003882:	f043 0310 	orr.w	r3, r3, #16
 8003886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
 800388a:	f000 fdd7 	bl	800443c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388e:	2000      	movs	r0, #0
 8003890:	f000 f808 	bl	80038a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003894:	f7ff fd60 	bl	8003358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x54>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_InitTick+0x58>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fdef 	bl	80044a6 <HAL_SYSTICK_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00e      	b.n	80038f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d80a      	bhi.n	80038ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f000 fdb7 	bl	8004452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <HAL_InitTick+0x5c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000014 	.word	0x20000014
 80038fc:	2000001c 	.word	0x2000001c
 8003900:	20000018 	.word	0x20000018

08003904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_IncTick+0x1c>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_IncTick+0x20>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4a03      	ldr	r2, [pc, #12]	; (8003924 <HAL_IncTick+0x20>)
 8003916:	6013      	str	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	2000001c 	.word	0x2000001c
 8003924:	200005d8 	.word	0x200005d8

08003928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return uwTick;
 800392c:	4b02      	ldr	r3, [pc, #8]	; (8003938 <HAL_GetTick+0x10>)
 800392e:	681b      	ldr	r3, [r3, #0]
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	200005d8 	.word	0x200005d8

0800393c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003944:	f7ff fff0 	bl	8003928 <HAL_GetTick>
 8003948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d005      	beq.n	8003962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003956:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_Delay+0x44>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003962:	bf00      	nop
 8003964:	f7ff ffe0 	bl	8003928 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	429a      	cmp	r2, r3
 8003972:	d8f7      	bhi.n	8003964 <HAL_Delay+0x28>
  {
  }
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000001c 	.word	0x2000001c

08003984 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0be      	b.n	8003b24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d109      	bne.n	80039c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fcfa 	bl	80033bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb8b 	bl	80040e4 <ADC_ConversionStop_Disable>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8099 	bne.w	8003b12 <HAL_ADC_Init+0x18e>
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 8095 	bne.w	8003b12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039f0:	f023 0302 	bic.w	r3, r3, #2
 80039f4:	f043 0202 	orr.w	r2, r3, #2
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7b1b      	ldrb	r3, [r3, #12]
 8003a0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003a0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a1c:	d003      	beq.n	8003a26 <HAL_ADC_Init+0xa2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_ADC_Init+0xa8>
 8003a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a2a:	e000      	b.n	8003a2e <HAL_ADC_Init+0xaa>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7d1b      	ldrb	r3, [r3, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d119      	bne.n	8003a70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7b1b      	ldrb	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	035a      	lsls	r2, r3, #13
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e00b      	b.n	8003a70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	f043 0201 	orr.w	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <HAL_ADC_Init+0x1a8>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	430b      	orrs	r3, r1
 8003a96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	d003      	beq.n	8003aaa <HAL_ADC_Init+0x126>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d104      	bne.n	8003ab4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	051b      	lsls	r3, r3, #20
 8003ab2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_ADC_Init+0x1ac>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003aee:	e018      	b.n	8003b22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f023 0312 	bic.w	r3, r3, #18
 8003af8:	f043 0210 	orr.w	r2, r3, #16
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f043 0201 	orr.w	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b10:	e007      	b.n	8003b22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	ffe1f7fd 	.word	0xffe1f7fd
 8003b30:	ff1f0efe 	.word	0xff1f0efe

08003b34 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_Start_IT+0x1a>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0a0      	b.n	8003c90 <HAL_ADC_Start_IT+0x15c>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa72 	bl	8004040 <ADC_Enable>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f040 808f 	bne.w	8003c86 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a45      	ldr	r2, [pc, #276]	; (8003c98 <HAL_ADC_Start_IT+0x164>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d105      	bne.n	8003b92 <HAL_ADC_Start_IT+0x5e>
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <HAL_ADC_Start_IT+0x168>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d026      	beq.n	8003bfa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bbc:	e01d      	b.n	8003bfa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <HAL_ADC_Start_IT+0x168>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_ADC_Start_IT+0xaa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <HAL_ADC_Start_IT+0x164>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10d      	bne.n	8003bfa <HAL_ADC_Start_IT+0xc6>
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_ADC_Start_IT+0x168>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f023 0206 	bic.w	r2, r3, #6
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c12:	e002      	b.n	8003c1a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0202 	mvn.w	r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c4a:	d113      	bne.n	8003c74 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c50:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <HAL_ADC_Start_IT+0x164>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_ADC_Start_IT+0x168>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	e00c      	b.n	8003c8e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e003      	b.n	8003c8e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40012800 	.word	0x40012800
 8003c9c:	40012400 	.word	0x40012400

08003ca0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d140      	bne.n	8003d50 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d139      	bne.n	8003d50 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d02:	d11d      	bne.n	8003d40 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d119      	bne.n	8003d40 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0220 	bic.w	r2, r2, #32
 8003d1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	f043 0201 	orr.w	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe fce1 	bl	8002708 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0212 	mvn.w	r2, #18
 8003d4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d14f      	bne.n	8003dfe <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d148      	bne.n	8003dfe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003d8e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003d92:	d012      	beq.n	8003dba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d125      	bne.n	8003dee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003dac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003db0:	d11d      	bne.n	8003dee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d119      	bne.n	8003dee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dc8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa4e 	bl	8004290 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 020c 	mvn.w	r2, #12
 8003dfc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d114      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10d      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f809 	bl	8003e3e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x20>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0dc      	b.n	800402a <HAL_ADC_ConfigChannel+0x1da>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	d81c      	bhi.n	8003eba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	3b05      	subs	r3, #5
 8003e92:	221f      	movs	r2, #31
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	4019      	ands	r1, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3b05      	subs	r3, #5
 8003eac:	fa00 f203 	lsl.w	r2, r0, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8003eb8:	e03c      	b.n	8003f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d81c      	bhi.n	8003efc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3b23      	subs	r3, #35	; 0x23
 8003ed4:	221f      	movs	r2, #31
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4019      	ands	r1, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b23      	subs	r3, #35	; 0x23
 8003eee:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8003efa:	e01b      	b.n	8003f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b41      	subs	r3, #65	; 0x41
 8003f0e:	221f      	movs	r2, #31
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	4019      	ands	r1, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	3b41      	subs	r3, #65	; 0x41
 8003f28:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d91c      	bls.n	8003f76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3b1e      	subs	r3, #30
 8003f4e:	2207      	movs	r2, #7
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4019      	ands	r1, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6898      	ldr	r0, [r3, #8]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	3b1e      	subs	r3, #30
 8003f68:	fa00 f203 	lsl.w	r2, r0, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	e019      	b.n	8003faa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6919      	ldr	r1, [r3, #16]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	2207      	movs	r2, #7
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	4019      	ands	r1, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6898      	ldr	r0, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d003      	beq.n	8003fba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003fb6:	2b11      	cmp	r3, #17
 8003fb8:	d132      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1d      	ldr	r2, [pc, #116]	; (8004034 <HAL_ADC_ConfigChannel+0x1e4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d125      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d126      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003fe0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d11a      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_ADC_ConfigChannel+0x1e8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_ADC_ConfigChannel+0x1ec>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	0c9a      	lsrs	r2, r3, #18
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004000:	e002      	b.n	8004008 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3b01      	subs	r3, #1
 8004006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f9      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x1b2>
 800400e:	e007      	b.n	8004020 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	f043 0220 	orr.w	r2, r3, #32
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012400 	.word	0x40012400
 8004038:	20000014 	.word	0x20000014
 800403c:	431bde83 	.word	0x431bde83

08004040 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d039      	beq.n	80040d2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800406e:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <ADC_Enable+0x9c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1b      	ldr	r2, [pc, #108]	; (80040e0 <ADC_Enable+0xa0>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	0c9b      	lsrs	r3, r3, #18
 800407a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800407c:	e002      	b.n	8004084 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3b01      	subs	r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f9      	bne.n	800407e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800408a:	f7ff fc4d 	bl	8003928 <HAL_GetTick>
 800408e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004090:	e018      	b.n	80040c4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004092:	f7ff fc49 	bl	8003928 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d911      	bls.n	80040c4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	f043 0201 	orr.w	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e007      	b.n	80040d4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d1df      	bne.n	8004092 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20000014 	.word	0x20000014
 80040e0:	431bde83 	.word	0x431bde83

080040e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d127      	bne.n	800414e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800410e:	f7ff fc0b 	bl	8003928 <HAL_GetTick>
 8004112:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004114:	e014      	b.n	8004140 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004116:	f7ff fc07 	bl	8003928 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d90d      	bls.n	8004140 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e007      	b.n	8004150 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b01      	cmp	r3, #1
 800414c:	d0e3      	beq.n	8004116 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_ADCEx_Calibration_Start+0x1e>
 8004172:	2302      	movs	r3, #2
 8004174:	e086      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0x12c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffb0 	bl	80040e4 <ADC_ConversionStop_Disable>
 8004184:	4603      	mov	r3, r0
 8004186:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d175      	bne.n	800427a <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004196:	f023 0302 	bic.w	r3, r3, #2
 800419a:	f043 0202 	orr.w	r2, r3, #2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_ADCEx_Calibration_Start+0x134>)
 80041a4:	681c      	ldr	r4, [r3, #0]
 80041a6:	2002      	movs	r0, #2
 80041a8:	f002 fda6 	bl	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80041ac:	4603      	mov	r3, r0
 80041ae:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80041b2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80041b4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80041b6:	e002      	b.n	80041be <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f9      	bne.n	80041b8 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff3b 	bl	8004040 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0208 	orr.w	r2, r2, #8
 80041d8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80041da:	f7ff fba5 	bl	8003928 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80041e0:	e014      	b.n	800420c <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80041e2:	f7ff fba1 	bl	8003928 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b0a      	cmp	r3, #10
 80041ee:	d90d      	bls.n	800420c <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	f023 0312 	bic.w	r3, r3, #18
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e03b      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e3      	bne.n	80041e2 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0204 	orr.w	r2, r2, #4
 8004228:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800422a:	f7ff fb7d 	bl	8003928 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004230:	e014      	b.n	800425c <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004232:	f7ff fb79 	bl	8003928 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b0a      	cmp	r3, #10
 800423e:	d90d      	bls.n	800425c <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	f023 0312 	bic.w	r3, r3, #18
 8004248:	f043 0210 	orr.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e013      	b.n	8004284 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e3      	bne.n	8004232 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	20000014 	.word	0x20000014

08004290 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
	...

080042a4 <__NVIC_SetPriorityGrouping>:
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	60d3      	str	r3, [r2, #12]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_GetPriorityGrouping>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <__NVIC_GetPriorityGrouping+0x18>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0307 	and.w	r3, r3, #7
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_EnableIRQ>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db0b      	blt.n	8004332 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4906      	ldr	r1, [pc, #24]	; (800433c <__NVIC_EnableIRQ+0x34>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	e000e100 	.word	0xe000e100

08004340 <__NVIC_SetPriority>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	2b00      	cmp	r3, #0
 8004352:	db0a      	blt.n	800436a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	490c      	ldr	r1, [pc, #48]	; (800438c <__NVIC_SetPriority+0x4c>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	0112      	lsls	r2, r2, #4
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	440b      	add	r3, r1
 8004364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004368:	e00a      	b.n	8004380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4908      	ldr	r1, [pc, #32]	; (8004390 <__NVIC_SetPriority+0x50>)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	3b04      	subs	r3, #4
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	440b      	add	r3, r1
 800437e:	761a      	strb	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	e000e100 	.word	0xe000e100
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <NVIC_EncodePriority>:
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	bf28      	it	cs
 80043b2:	2304      	movcs	r3, #4
 80043b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d902      	bls.n	80043c4 <NVIC_EncodePriority+0x30>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3b03      	subs	r3, #3
 80043c2:	e000      	b.n	80043c6 <NVIC_EncodePriority+0x32>
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	401a      	ands	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043dc:	f04f 31ff 	mov.w	r1, #4294967295
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	43d9      	mvns	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ec:	4313      	orrs	r3, r2
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <SysTick_Config>:
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3b01      	subs	r3, #1
 8004404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004408:	d301      	bcc.n	800440e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800440a:	2301      	movs	r3, #1
 800440c:	e00f      	b.n	800442e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <SysTick_Config+0x40>)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3b01      	subs	r3, #1
 8004414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004416:	210f      	movs	r1, #15
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f7ff ff90 	bl	8004340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <SysTick_Config+0x40>)
 8004422:	2200      	movs	r2, #0
 8004424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004426:	4b04      	ldr	r3, [pc, #16]	; (8004438 <SysTick_Config+0x40>)
 8004428:	2207      	movs	r2, #7
 800442a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	e000e010 	.word	0xe000e010

0800443c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff2d 	bl	80042a4 <__NVIC_SetPriorityGrouping>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004464:	f7ff ff42 	bl	80042ec <__NVIC_GetPriorityGrouping>
 8004468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f7ff ff90 	bl	8004394 <NVIC_EncodePriority>
 8004474:	4602      	mov	r2, r0
 8004476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447a:	4611      	mov	r1, r2
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff ff5f 	bl	8004340 <__NVIC_SetPriority>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	4603      	mov	r3, r0
 8004492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff ff35 	bl	8004308 <__NVIC_EnableIRQ>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ffa2 	bl	80043f8 <SysTick_Config>
 80044b4:	4603      	mov	r3, r0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e00e      	b.n	80044ee <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	795b      	ldrb	r3, [r3, #5]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fe ffaf 	bl	8003444 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 8004514:	7e1b      	ldrb	r3, [r3, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_FLASH_Program+0x26>
 800451a:	2302      	movs	r3, #2
 800451c:	e054      	b.n	80045c8 <HAL_FLASH_Program+0xd0>
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 8004520:	2201      	movs	r2, #1
 8004522:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004524:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004528:	f000 f8a8 	bl	800467c <FLASH_WaitForLastOperation>
 800452c:	4603      	mov	r3, r0
 800452e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8004530:	7dfb      	ldrb	r3, [r7, #23]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d144      	bne.n	80045c0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	757b      	strb	r3, [r7, #21]
 8004540:	e007      	b.n	8004552 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d102      	bne.n	800454e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8004548:	2302      	movs	r3, #2
 800454a:	757b      	strb	r3, [r7, #21]
 800454c:	e001      	b.n	8004552 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800454e:	2304      	movs	r3, #4
 8004550:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8004552:	2300      	movs	r3, #0
 8004554:	75bb      	strb	r3, [r7, #22]
 8004556:	e02d      	b.n	80045b4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004558:	7dbb      	ldrb	r3, [r7, #22]
 800455a:	005a      	lsls	r2, r3, #1
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	eb02 0c03 	add.w	ip, r2, r3
 8004562:	7dbb      	ldrb	r3, [r7, #22]
 8004564:	0119      	lsls	r1, r3, #4
 8004566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456a:	f1c1 0620 	rsb	r6, r1, #32
 800456e:	f1a1 0020 	sub.w	r0, r1, #32
 8004572:	fa22 f401 	lsr.w	r4, r2, r1
 8004576:	fa03 f606 	lsl.w	r6, r3, r6
 800457a:	4334      	orrs	r4, r6
 800457c:	fa23 f000 	lsr.w	r0, r3, r0
 8004580:	4304      	orrs	r4, r0
 8004582:	fa23 f501 	lsr.w	r5, r3, r1
 8004586:	b2a3      	uxth	r3, r4
 8004588:	4619      	mov	r1, r3
 800458a:	4660      	mov	r0, ip
 800458c:	f000 f85a 	bl	8004644 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004594:	f000 f872 	bl	800467c <FLASH_WaitForLastOperation>
 8004598:	4603      	mov	r3, r0
 800459a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800459c:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <HAL_FLASH_Program+0xdc>)
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <HAL_FLASH_Program+0xdc>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80045ae:	7dbb      	ldrb	r3, [r7, #22]
 80045b0:	3301      	adds	r3, #1
 80045b2:	75bb      	strb	r3, [r7, #22]
 80045b4:	7dba      	ldrb	r2, [r7, #22]
 80045b6:	7d7b      	ldrb	r3, [r7, #21]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3cd      	bcc.n	8004558 <HAL_FLASH_Program+0x60>
 80045bc:	e000      	b.n	80045c0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80045be:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_FLASH_Program+0xd8>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	761a      	strb	r2, [r3, #24]

  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d0:	200005e0 	.word	0x200005e0
 80045d4:	40022000 	.word	0x40022000

080045d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00d      	beq.n	800460a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045f0:	4a0a      	ldr	r2, [pc, #40]	; (800461c <HAL_FLASH_Unlock+0x44>)
 80045f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045f4:	4b08      	ldr	r3, [pc, #32]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_FLASH_Unlock+0x48>)
 80045f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045fa:	4b07      	ldr	r3, [pc, #28]	; (8004618 <HAL_FLASH_Unlock+0x40>)
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800460a:	79fb      	ldrb	r3, [r7, #7]
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40022000 	.word	0x40022000
 800461c:	45670123 	.word	0x45670123
 8004620:	cdef89ab 	.word	0xcdef89ab

08004624 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_FLASH_Lock+0x1c>)
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	4a04      	ldr	r2, [pc, #16]	; (8004640 <HAL_FLASH_Lock+0x1c>)
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40022000 	.word	0x40022000

08004644 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004650:	4b08      	ldr	r3, [pc, #32]	; (8004674 <FLASH_Program_HalfWord+0x30>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004656:	4b08      	ldr	r3, [pc, #32]	; (8004678 <FLASH_Program_HalfWord+0x34>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	4a07      	ldr	r2, [pc, #28]	; (8004678 <FLASH_Program_HalfWord+0x34>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	801a      	strh	r2, [r3, #0]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	200005e0 	.word	0x200005e0
 8004678:	40022000 	.word	0x40022000

0800467c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7ff f950 	bl	8003928 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800468a:	e010      	b.n	80046ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d00c      	beq.n	80046ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <FLASH_WaitForLastOperation+0x2e>
 800469a:	f7ff f945 	bl	8003928 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d201      	bcs.n	80046ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e025      	b.n	80046fa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e8      	bne.n	800468c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046c8:	2220      	movs	r2, #32
 80046ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10b      	bne.n	80046f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <FLASH_WaitForLastOperation+0x88>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80046f0:	f000 f80a 	bl	8004708 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40022000 	.word	0x40022000

08004708 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004712:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800471e:	4b21      	ldr	r3, [pc, #132]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004728:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f043 0310 	orr.w	r3, r3, #16
 8004730:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004732:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800473e:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f043 0301 	orr.w	r3, r3, #1
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004748:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004752:	4b13      	ldr	r3, [pc, #76]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f043 0304 	orr.w	r3, r3, #4
 8004766:	4a0f      	ldr	r2, [pc, #60]	; (80047a4 <FLASH_SetErrorCode+0x9c>)
 8004768:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 800476c:	69db      	ldr	r3, [r3, #28]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f240 1201 	movw	r2, #257	; 0x101
 800477c:	4293      	cmp	r3, r2
 800477e:	d106      	bne.n	800478e <FLASH_SetErrorCode+0x86>
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	61d3      	str	r3, [r2, #28]
}  
 800478c:	e002      	b.n	8004794 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800478e:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <FLASH_SetErrorCode+0x98>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	60d3      	str	r3, [r2, #12]
}  
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40022000 	.word	0x40022000
 80047a4:	200005e0 	.word	0x200005e0

080047a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047ba:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 80047bc:	7e1b      	ldrb	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_FLASHEx_Erase+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e053      	b.n	800486e <HAL_FLASHEx_Erase+0xc6>
 80047c6:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d116      	bne.n	8004802 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80047d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047d8:	f7ff ff50 	bl	800467c <FLASH_WaitForLastOperation>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d141      	bne.n	8004866 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 f84c 	bl	8004880 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80047e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80047ec:	f7ff ff46 	bl	800467c <FLASH_WaitForLastOperation>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 80047fa:	f023 0304 	bic.w	r3, r3, #4
 80047fe:	6113      	str	r3, [r2, #16]
 8004800:	e031      	b.n	8004866 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004802:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004806:	f7ff ff39 	bl	800467c <FLASH_WaitForLastOperation>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12a      	bne.n	8004866 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	e019      	b.n	8004854 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004820:	68b8      	ldr	r0, [r7, #8]
 8004822:	f000 f849 	bl	80048b8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004826:	f24c 3050 	movw	r0, #50000	; 0xc350
 800482a:	f7ff ff27 	bl	800467c <FLASH_WaitForLastOperation>
 800482e:	4603      	mov	r3, r0
 8004830:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <HAL_FLASHEx_Erase+0xd4>)
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	601a      	str	r2, [r3, #0]
            break;
 800484a:	e00c      	b.n	8004866 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004852:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	029a      	lsls	r2, r3, #10
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d3dc      	bcc.n	8004820 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004866:	4b04      	ldr	r3, [pc, #16]	; (8004878 <HAL_FLASHEx_Erase+0xd0>)
 8004868:	2200      	movs	r2, #0
 800486a:	761a      	strb	r2, [r3, #24]

  return status;
 800486c:	7bfb      	ldrb	r3, [r7, #15]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200005e0 	.word	0x200005e0
 800487c:	40022000 	.word	0x40022000

08004880 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <FLASH_MassErase+0x30>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <FLASH_MassErase+0x34>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <FLASH_MassErase+0x34>)
 8004894:	f043 0304 	orr.w	r3, r3, #4
 8004898:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <FLASH_MassErase+0x34>)
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <FLASH_MassErase+0x34>)
 80048a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	200005e0 	.word	0x200005e0
 80048b4:	40022000 	.word	0x40022000

080048b8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <FLASH_PageErase+0x38>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048cc:	f043 0302 	orr.w	r3, r3, #2
 80048d0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	4a05      	ldr	r2, [pc, #20]	; (80048f4 <FLASH_PageErase+0x3c>)
 80048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	200005e0 	.word	0x200005e0
 80048f4:	40022000 	.word	0x40022000

080048f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b08b      	sub	sp, #44	; 0x2c
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490a:	e169      	b.n	8004be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800490c:	2201      	movs	r2, #1
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	4013      	ands	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	429a      	cmp	r2, r3
 8004926:	f040 8158 	bne.w	8004bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	4a9a      	ldr	r2, [pc, #616]	; (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d05e      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004934:	4a98      	ldr	r2, [pc, #608]	; (8004b98 <HAL_GPIO_Init+0x2a0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d875      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800493a:	4a98      	ldr	r2, [pc, #608]	; (8004b9c <HAL_GPIO_Init+0x2a4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d058      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004940:	4a96      	ldr	r2, [pc, #600]	; (8004b9c <HAL_GPIO_Init+0x2a4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d86f      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004946:	4a96      	ldr	r2, [pc, #600]	; (8004ba0 <HAL_GPIO_Init+0x2a8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d052      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 800494c:	4a94      	ldr	r2, [pc, #592]	; (8004ba0 <HAL_GPIO_Init+0x2a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d869      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004952:	4a94      	ldr	r2, [pc, #592]	; (8004ba4 <HAL_GPIO_Init+0x2ac>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d04c      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004958:	4a92      	ldr	r2, [pc, #584]	; (8004ba4 <HAL_GPIO_Init+0x2ac>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d863      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800495e:	4a92      	ldr	r2, [pc, #584]	; (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d046      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
 8004964:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <HAL_GPIO_Init+0x2b0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d85d      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 800496a:	2b12      	cmp	r3, #18
 800496c:	d82a      	bhi.n	80049c4 <HAL_GPIO_Init+0xcc>
 800496e:	2b12      	cmp	r3, #18
 8004970:	d859      	bhi.n	8004a26 <HAL_GPIO_Init+0x12e>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_GPIO_Init+0x80>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	080049f3 	.word	0x080049f3
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049df 	.word	0x080049df
 8004984:	08004a21 	.word	0x08004a21
 8004988:	08004a27 	.word	0x08004a27
 800498c:	08004a27 	.word	0x08004a27
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004a27 	.word	0x08004a27
 8004998:	08004a27 	.word	0x08004a27
 800499c:	08004a27 	.word	0x08004a27
 80049a0:	08004a27 	.word	0x08004a27
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	4a79      	ldr	r2, [pc, #484]	; (8004bac <HAL_GPIO_Init+0x2b4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049ca:	e02c      	b.n	8004a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	623b      	str	r3, [r7, #32]
          break;
 80049d2:	e029      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	3304      	adds	r3, #4
 80049da:	623b      	str	r3, [r7, #32]
          break;
 80049dc:	e024      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	3308      	adds	r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
          break;
 80049e6:	e01f      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	330c      	adds	r3, #12
 80049ee:	623b      	str	r3, [r7, #32]
          break;
 80049f0:	e01a      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049fa:	2304      	movs	r3, #4
 80049fc:	623b      	str	r3, [r7, #32]
          break;
 80049fe:	e013      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a08:	2308      	movs	r3, #8
 8004a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	611a      	str	r2, [r3, #16]
          break;
 8004a12:	e009      	b.n	8004a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a14:	2308      	movs	r3, #8
 8004a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	615a      	str	r2, [r3, #20]
          break;
 8004a1e:	e003      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a20:	2300      	movs	r3, #0
 8004a22:	623b      	str	r3, [r7, #32]
          break;
 8004a24:	e000      	b.n	8004a28 <HAL_GPIO_Init+0x130>
          break;
 8004a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2bff      	cmp	r3, #255	; 0xff
 8004a2c:	d801      	bhi.n	8004a32 <HAL_GPIO_Init+0x13a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_Init+0x13e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d802      	bhi.n	8004a44 <HAL_GPIO_Init+0x14c>
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	e002      	b.n	8004a4a <HAL_GPIO_Init+0x152>
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	3b08      	subs	r3, #8
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	210f      	movs	r1, #15
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	6a39      	ldr	r1, [r7, #32]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80b1 	beq.w	8004bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a78:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	4a4c      	ldr	r2, [pc, #304]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6193      	str	r3, [r2, #24]
 8004a84:	4b4a      	ldr	r3, [pc, #296]	; (8004bb0 <HAL_GPIO_Init+0x2b8>)
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a90:	4a48      	ldr	r2, [pc, #288]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	43db      	mvns	r3, r3
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a40      	ldr	r2, [pc, #256]	; (8004bb8 <HAL_GPIO_Init+0x2c0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <HAL_GPIO_Init+0x1ec>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	; (8004bbc <HAL_GPIO_Init+0x2c4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00d      	beq.n	8004ae0 <HAL_GPIO_Init+0x1e8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3e      	ldr	r2, [pc, #248]	; (8004bc0 <HAL_GPIO_Init+0x2c8>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <HAL_GPIO_Init+0x1e4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3d      	ldr	r2, [pc, #244]	; (8004bc4 <HAL_GPIO_Init+0x2cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_GPIO_Init+0x1e0>
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e006      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e004      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e002      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e000      	b.n	8004ae6 <HAL_GPIO_Init+0x1ee>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae8:	f002 0203 	and.w	r2, r2, #3
 8004aec:	0092      	lsls	r2, r2, #2
 8004aee:	4093      	lsls	r3, r2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004af6:	492f      	ldr	r1, [pc, #188]	; (8004bb4 <HAL_GPIO_Init+0x2bc>)
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	3302      	adds	r3, #2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b10:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	492c      	ldr	r1, [pc, #176]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	4928      	ldr	r1, [pc, #160]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	4922      	ldr	r1, [pc, #136]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	491e      	ldr	r1, [pc, #120]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	4918      	ldr	r1, [pc, #96]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b6e:	4b16      	ldr	r3, [pc, #88]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	4914      	ldr	r1, [pc, #80]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d021      	beq.n	8004bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <HAL_GPIO_Init+0x2d0>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60cb      	str	r3, [r1, #12]
 8004b94:	e021      	b.n	8004bda <HAL_GPIO_Init+0x2e2>
 8004b96:	bf00      	nop
 8004b98:	10320000 	.word	0x10320000
 8004b9c:	10310000 	.word	0x10310000
 8004ba0:	10220000 	.word	0x10220000
 8004ba4:	10210000 	.word	0x10210000
 8004ba8:	10120000 	.word	0x10120000
 8004bac:	10110000 	.word	0x10110000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40010800 	.word	0x40010800
 8004bbc:	40010c00 	.word	0x40010c00
 8004bc0:	40011000 	.word	0x40011000
 8004bc4:	40011400 	.word	0x40011400
 8004bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_GPIO_Init+0x304>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	4909      	ldr	r1, [pc, #36]	; (8004bfc <HAL_GPIO_Init+0x304>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	3301      	adds	r3, #1
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f47f ae8e 	bne.w	800490c <HAL_GPIO_Init+0x14>
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	372c      	adds	r7, #44	; 0x2c
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr
 8004bfc:	40010400 	.word	0x40010400

08004c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e001      	b.n	8004c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	807b      	strh	r3, [r7, #2]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c3e:	787b      	ldrb	r3, [r7, #1]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c44:	887a      	ldrh	r2, [r7, #2]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c4a:	e003      	b.n	8004c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	041a      	lsls	r2, r3, #16
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	611a      	str	r2, [r3, #16]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr

08004c5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c60:	b08b      	sub	sp, #44	; 0x2c
 8004c62:	af06      	add	r7, sp, #24
 8004c64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0fd      	b.n	8004e6c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f007 f865 	bl	800bd54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 f8dc 	bl	8007e54 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	687e      	ldr	r6, [r7, #4]
 8004ca4:	466d      	mov	r5, sp
 8004ca6:	f106 0410 	add.w	r4, r6, #16
 8004caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	1d33      	adds	r3, r6, #4
 8004cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cb6:	6838      	ldr	r0, [r7, #0]
 8004cb8:	f003 f8a6 	bl	8007e08 <USB_CoreInit>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d005      	beq.n	8004cce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0ce      	b.n	8004e6c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f003 f8d7 	bl	8007e88 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	73fb      	strb	r3, [r7, #15]
 8004cde:	e04c      	b.n	8004d7a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	b298      	uxth	r0, r3
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3336      	adds	r3, #54	; 0x36
 8004d1e:	4602      	mov	r2, r0
 8004d20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	3303      	adds	r3, #3
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	3338      	adds	r3, #56	; 0x38
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	333c      	adds	r3, #60	; 0x3c
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3340      	adds	r3, #64	; 0x40
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	3301      	adds	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d3ad      	bcc.n	8004ce0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]
 8004d88:	e044      	b.n	8004e14 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	440b      	add	r3, r1
 8004d98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004db2:	7bfa      	ldrb	r2, [r7, #15]
 8004db4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004db6:	7bfa      	ldrb	r2, [r7, #15]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004dcc:	7bfa      	ldrb	r2, [r7, #15]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004df8:	7bfa      	ldrb	r2, [r7, #15]
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	440b      	add	r3, r1
 8004e06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	3301      	adds	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3b5      	bcc.n	8004d8a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	687e      	ldr	r6, [r7, #4]
 8004e26:	466d      	mov	r5, sp
 8004e28:	f106 0410 	add.w	r4, r6, #16
 8004e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	1d33      	adds	r3, r6, #4
 8004e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e38:	6838      	ldr	r0, [r7, #0]
 8004e3a:	f003 f831 	bl	8007ea0 <USB_DevInit>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e00d      	b.n	8004e6c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 ffcb 	bl	8009e00 <USB_DevDisconnect>

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d101      	bne.n	8004e8a <HAL_PCD_Start+0x16>
 8004e86:	2302      	movs	r3, #2
 8004e88:	e016      	b.n	8004eb8 <HAL_PCD_Start+0x44>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f002 ffc6 	bl	8007e28 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f007 f9cb 	bl	800c23a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f004 ff9f 	bl	8009dec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 ffa1 	bl	8009e14 <USB_ReadInterrupts>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	d102      	bne.n	8004ee4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fb61 	bl	80055a6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f004 ff93 	bl	8009e14 <USB_ReadInterrupts>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d112      	bne.n	8004f20 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f006 ff99 	bl	800be4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f925 	bl	800516a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f004 ff75 	bl	8009e14 <USB_ReadInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f34:	d10b      	bne.n	8004f4e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f48:	b292      	uxth	r2, r2
 8004f4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 ff5e 	bl	8009e14 <USB_ReadInterrupts>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d10b      	bne.n	8004f7c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f76:	b292      	uxth	r2, r2
 8004f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 ff47 	bl	8009e14 <USB_ReadInterrupts>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	d126      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0204 	bic.w	r2, r2, #4
 8004fa4:	b292      	uxth	r2, r2
 8004fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0208 	bic.w	r2, r2, #8
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f006 ff7a 	bl	800bebc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f004 ff15 	bl	8009e14 <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff4:	f040 8084 	bne.w	8005100 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e011      	b.n	8005022 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	7ffb      	ldrb	r3, [r7, #31]
 800500c:	8812      	ldrh	r2, [r2, #0]
 800500e:	b292      	uxth	r2, r2
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	f107 0120 	add.w	r1, r7, #32
 8005016:	440b      	add	r3, r1
 8005018:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800501c:	7ffb      	ldrb	r3, [r7, #31]
 800501e:	3301      	adds	r3, #1
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	7ffb      	ldrb	r3, [r7, #31]
 8005024:	2b07      	cmp	r3, #7
 8005026:	d9ea      	bls.n	8004ffe <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	b292      	uxth	r2, r2
 800503c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	b292      	uxth	r2, r2
 8005054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005058:	bf00      	nop
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005062:	b29b      	uxth	r3, r3
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f6      	beq.n	800505a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005074:	b29a      	uxth	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507e:	b292      	uxth	r2, r2
 8005080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	77fb      	strb	r3, [r7, #31]
 8005088:	e010      	b.n	80050ac <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	4611      	mov	r1, r2
 8005092:	7ffa      	ldrb	r2, [r7, #31]
 8005094:	0092      	lsls	r2, r2, #2
 8005096:	440a      	add	r2, r1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	f107 0120 	add.w	r1, r7, #32
 800509e:	440b      	add	r3, r1
 80050a0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80050a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	3301      	adds	r3, #1
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	7ffb      	ldrb	r3, [r7, #31]
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d9eb      	bls.n	800508a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	b292      	uxth	r2, r2
 80050c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050dc:	b292      	uxth	r2, r2
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0204 	orr.w	r2, r2, #4
 80050f4:	b292      	uxth	r2, r2
 80050f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f006 fec4 	bl	800be88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f004 fe85 	bl	8009e14 <USB_ReadInterrupts>
 800510a:	4603      	mov	r3, r0
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d10e      	bne.n	8005134 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005128:	b292      	uxth	r2, r2
 800512a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f006 fe7d 	bl	800be2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f004 fe6b 	bl	8009e14 <USB_ReadInterrupts>
 800513e:	4603      	mov	r3, r0
 8005140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005148:	d10b      	bne.n	8005162 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800515c:	b292      	uxth	r2, r2
 800515e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005162:	bf00      	nop
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_PCD_SetAddress+0x1a>
 8005180:	2302      	movs	r3, #2
 8005182:	e013      	b.n	80051ac <HAL_PCD_SetAddress+0x42>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f004 fe12 	bl	8009dc6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	4608      	mov	r0, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	461a      	mov	r2, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	70fb      	strb	r3, [r7, #3]
 80051c6:	460b      	mov	r3, r1
 80051c8:	803b      	strh	r3, [r7, #0]
 80051ca:	4613      	mov	r3, r2
 80051cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da0e      	bge.n	80051f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051da:	78fb      	ldrb	r3, [r7, #3]
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4413      	add	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	705a      	strb	r2, [r3, #1]
 80051f6:	e00e      	b.n	8005216 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	f003 0207 	and.w	r2, r3, #7
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005222:	883a      	ldrh	r2, [r7, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	78ba      	ldrb	r2, [r7, #2]
 800522c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d004      	beq.n	8005240 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005240:	78bb      	ldrb	r3, [r7, #2]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d102      	bne.n	800524c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_PCD_EP_Open+0xa6>
 8005256:	2302      	movs	r3, #2
 8005258:	e00e      	b.n	8005278 <HAL_PCD_EP_Open+0xc4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	4618      	mov	r0, r3
 800526a:	f002 fe39 	bl	8007ee0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005276:	7afb      	ldrb	r3, [r7, #11]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800528c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da0e      	bge.n	80052b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	705a      	strb	r2, [r3, #1]
 80052b0:	e00e      	b.n	80052d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	f003 0207 	and.w	r2, r3, #7
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_PCD_EP_Close+0x6a>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e00e      	b.n	8005308 <HAL_PCD_EP_Close+0x88>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 f95b 	bl	80085b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	460b      	mov	r3, r1
 800531e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	f003 0207 	and.w	r2, r3, #7
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	b2da      	uxtb	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800535c:	7afb      	ldrb	r3, [r7, #11]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6979      	ldr	r1, [r7, #20]
 800536c:	4618      	mov	r0, r3
 800536e:	f003 fb0d 	bl	800898c <USB_EPStartXfer>
 8005372:	e005      	b.n	8005380 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6979      	ldr	r1, [r7, #20]
 800537a:	4618      	mov	r0, r3
 800537c:	f003 fb06 	bl	800898c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3718      	adds	r7, #24
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	460b      	mov	r3, r1
 8005394:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 0207 	and.w	r2, r3, #7
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80053ac:	681b      	ldr	r3, [r3, #0]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	460b      	mov	r3, r1
 80053c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2201      	movs	r2, #1
 8005402:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005404:	7afb      	ldrb	r3, [r7, #11]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	b2da      	uxtb	r2, r3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6979      	ldr	r1, [r7, #20]
 8005420:	4618      	mov	r0, r3
 8005422:	f003 fab3 	bl	800898c <USB_EPStartXfer>
 8005426:	e005      	b.n	8005434 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	4618      	mov	r0, r3
 8005430:	f003 faac 	bl	800898c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	460b      	mov	r3, r1
 8005448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	f003 0207 	and.w	r2, r3, #7
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d901      	bls.n	800545c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e04c      	b.n	80054f6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800545c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005460:	2b00      	cmp	r3, #0
 8005462:	da0e      	bge.n	8005482 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	4413      	add	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	705a      	strb	r2, [r3, #1]
 8005480:	e00c      	b.n	800549c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_PCD_EP_SetStall+0x7e>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e01c      	b.n	80054f6 <HAL_PCD_EP_SetStall+0xb8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f004 fb7e 	bl	8009bcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d108      	bne.n	80054ec <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f004 fca3 	bl	8009e32 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	460b      	mov	r3, r1
 8005508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d901      	bls.n	800551c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e040      	b.n	800559e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800551c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005520:	2b00      	cmp	r3, #0
 8005522:	da0e      	bge.n	8005542 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	705a      	strb	r2, [r3, #1]
 8005540:	e00e      	b.n	8005560 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 0207 	and.w	r2, r3, #7
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_PCD_EP_ClrStall+0x82>
 800557c:	2302      	movs	r3, #2
 800557e:	e00e      	b.n	800559e <HAL_PCD_EP_ClrStall+0xa0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68f9      	ldr	r1, [r7, #12]
 800558e:	4618      	mov	r0, r3
 8005590:	f004 fb6c 	bl	8009c6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08e      	sub	sp, #56	; 0x38
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055ae:	e2df      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80055b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80055ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80055c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 8158 	bne.w	8005880 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d152      	bne.n	8005680 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ea:	81fb      	strh	r3, [r7, #14]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3328      	adds	r3, #40	; 0x28
 8005602:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560c:	b29b      	uxth	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4413      	add	r3, r2
 8005618:	3302      	adds	r3, #2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	441a      	add	r2, r3
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800563e:	2100      	movs	r1, #0
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f006 fbda 	bl	800bdfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 828e 	beq.w	8005b70 <PCD_EP_ISR_Handler+0x5ca>
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 8289 	bne.w	8005b70 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566a:	b2da      	uxtb	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	b292      	uxth	r2, r2
 8005672:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800567e:	e277      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005690:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005696:	2b00      	cmp	r3, #0
 8005698:	d034      	beq.n	8005704 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	3306      	adds	r3, #6
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f004 fbfa 	bl	8009ed2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056ea:	4013      	ands	r3, r2
 80056ec:	823b      	strh	r3, [r7, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	8a3a      	ldrh	r2, [r7, #16]
 80056f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056f8:	b292      	uxth	r2, r2
 80056fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f006 fb4f 	bl	800bda0 <HAL_PCD_SetupStageCallback>
 8005702:	e235      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005704:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005708:	2b00      	cmp	r3, #0
 800570a:	f280 8231 	bge.w	8005b70 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29a      	uxth	r2, r3
 8005716:	f640 738f 	movw	r3, #3983	; 0xf8f
 800571a:	4013      	ands	r3, r2
 800571c:	83bb      	strh	r3, [r7, #28]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	8bba      	ldrh	r2, [r7, #28]
 8005724:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005728:	b292      	uxth	r2, r2
 800572a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4413      	add	r3, r2
 8005740:	3306      	adds	r3, #6
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <PCD_EP_ISR_Handler+0x1ee>
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d015      	beq.n	8005794 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	6959      	ldr	r1, [r3, #20]
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005778:	b29b      	uxth	r3, r3
 800577a:	f004 fbaa 	bl	8009ed2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	441a      	add	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800578c:	2100      	movs	r1, #0
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 fb18 	bl	800bdc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	4413      	add	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d112      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x23c>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057da:	b29a      	uxth	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e02f      	b.n	8005842 <PCD_EP_ISR_Handler+0x29c>
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b3e      	cmp	r3, #62	; 0x3e
 80057e8:	d813      	bhi.n	8005812 <PCD_EP_ISR_Handler+0x26c>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	085b      	lsrs	r3, r3, #1
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <PCD_EP_ISR_Handler+0x25e>
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3301      	adds	r3, #1
 8005802:	633b      	str	r3, [r7, #48]	; 0x30
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	b29b      	uxth	r3, r3
 8005808:	029b      	lsls	r3, r3, #10
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	e017      	b.n	8005842 <PCD_EP_ISR_Handler+0x29c>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 031f 	and.w	r3, r3, #31
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <PCD_EP_ISR_Handler+0x286>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	3b01      	subs	r3, #1
 800582a:	633b      	str	r3, [r7, #48]	; 0x30
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	b29b      	uxth	r3, r3
 8005830:	029b      	lsls	r3, r3, #10
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583c:	b29a      	uxth	r2, r3
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800584e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005852:	827b      	strh	r3, [r7, #18]
 8005854:	8a7b      	ldrh	r3, [r7, #18]
 8005856:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800585a:	827b      	strh	r3, [r7, #18]
 800585c:	8a7b      	ldrh	r3, [r7, #18]
 800585e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005862:	827b      	strh	r3, [r7, #18]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	8a7b      	ldrh	r3, [r7, #18]
 800586a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]
 800587e:	e177      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005892:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005896:	2b00      	cmp	r3, #0
 8005898:	f280 80ea 	bge.w	8005a70 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058b2:	4013      	ands	r3, r2
 80058b4:	853b      	strh	r3, [r7, #40]	; 0x28
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80058c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	7b1b      	ldrb	r3, [r3, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d122      	bne.n	8005932 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	3306      	adds	r3, #6
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005914:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8087 	beq.w	8005a2c <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	6959      	ldr	r1, [r3, #20]
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	88da      	ldrh	r2, [r3, #6]
 800592a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800592c:	f004 fad1 	bl	8009ed2 <USB_ReadPMA>
 8005930:	e07c      	b.n	8005a2c <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	78db      	ldrb	r3, [r3, #3]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d108      	bne.n	800594c <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800593a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800593c:	461a      	mov	r2, r3
 800593e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f923 	bl	8005b8c <HAL_PCD_EP_DB_Receive>
 8005946:	4603      	mov	r3, r0
 8005948:	86fb      	strh	r3, [r7, #54]	; 0x36
 800594a:	e06f      	b.n	8005a2c <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	847b      	strh	r3, [r7, #34]	; 0x22
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005984:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005988:	b29b      	uxth	r3, r3
 800598a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d021      	beq.n	80059ea <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	3302      	adds	r3, #2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ce:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80059d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02a      	beq.n	8005a2c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	6959      	ldr	r1, [r3, #20]
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	891a      	ldrh	r2, [r3, #8]
 80059e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059e4:	f004 fa75 	bl	8009ed2 <USB_ReadPMA>
 80059e8:	e020      	b.n	8005a2c <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	461a      	mov	r2, r3
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4413      	add	r3, r2
 80059fe:	3306      	adds	r3, #6
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a12:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	6959      	ldr	r1, [r3, #20]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	895a      	ldrh	r2, [r3, #10]
 8005a26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a28:	f004 fa53 	bl	8009ed2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a32:	441a      	add	r2, r3
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	695a      	ldr	r2, [r3, #20]
 8005a3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a3e:	441a      	add	r2, r3
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <PCD_EP_ISR_Handler+0x4b0>
 8005a4c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d206      	bcs.n	8005a64 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f006 f9b1 	bl	800bdc4 <HAL_PCD_DataOutStageCallback>
 8005a62:	e005      	b.n	8005a70 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f002 ff8e 	bl	800898c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d07a      	beq.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	843b      	strh	r3, [r7, #32]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	441a      	add	r2, r3
 8005ab8:	8c3b      	ldrh	r3, [r7, #32]
 8005aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d108      	bne.n	8005ae0 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d146      	bne.n	8005b64 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ad6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d141      	bne.n	8005b64 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	3302      	adds	r3, #2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b08:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	8bfb      	ldrh	r3, [r7, #30]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d906      	bls.n	8005b22 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	8bfb      	ldrh	r3, [r7, #30]
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	619a      	str	r2, [r3, #24]
 8005b20:	e002      	b.n	8005b28 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	4619      	mov	r1, r3
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f006 f95f 	bl	800bdfa <HAL_PCD_DataInStageCallback>
 8005b3c:	e018      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	8bfb      	ldrh	r3, [r7, #30]
 8005b44:	441a      	add	r2, r3
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	69da      	ldr	r2, [r3, #28]
 8005b4e:	8bfb      	ldrh	r3, [r7, #30]
 8005b50:	441a      	add	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f002 ff15 	bl	800898c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005b62:	e005      	b.n	8005b70 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b66:	461a      	mov	r2, r3
 8005b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f91b 	bl	8005da6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f6ff ad17 	blt.w	80055b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	; 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d07e      	beq.n	8005ca2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3302      	adds	r3, #2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	6812      	ldr	r2, [r2, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bcc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	8b7b      	ldrh	r3, [r7, #26]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d306      	bcc.n	8005be6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	8b7b      	ldrh	r3, [r7, #26]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	619a      	str	r2, [r3, #24]
 8005be4:	e002      	b.n	8005bec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2200      	movs	r2, #0
 8005bea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d123      	bne.n	8005c3c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	833b      	strh	r3, [r7, #24]
 8005c10:	8b3b      	ldrh	r3, [r7, #24]
 8005c12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c16:	833b      	strh	r3, [r7, #24]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	441a      	add	r2, r3
 8005c26:	8b3b      	ldrh	r3, [r7, #24]
 8005c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01f      	beq.n	8005c86 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c60:	82fb      	strh	r3, [r7, #22]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	8afb      	ldrh	r3, [r7, #22]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c86:	8b7b      	ldrh	r3, [r7, #26]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 8087 	beq.w	8005d9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6959      	ldr	r1, [r3, #20]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	891a      	ldrh	r2, [r3, #8]
 8005c9a:	8b7b      	ldrh	r3, [r7, #26]
 8005c9c:	f004 f919 	bl	8009ed2 <USB_ReadPMA>
 8005ca0:	e07c      	b.n	8005d9c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3306      	adds	r3, #6
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	6812      	ldr	r2, [r2, #0]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	8b7b      	ldrh	r3, [r7, #26]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d306      	bcc.n	8005ce4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	8b7b      	ldrh	r3, [r7, #26]
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	619a      	str	r2, [r3, #24]
 8005ce2:	e002      	b.n	8005cea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d123      	bne.n	8005d3a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	83fb      	strh	r3, [r7, #30]
 8005d0e:	8bfb      	ldrh	r3, [r7, #30]
 8005d10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d14:	83fb      	strh	r3, [r7, #30]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	441a      	add	r2, r3
 8005d24:	8bfb      	ldrh	r3, [r7, #30]
 8005d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11f      	bne.n	8005d84 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	83bb      	strh	r3, [r7, #28]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	8bbb      	ldrh	r3, [r7, #28]
 8005d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d84:	8b7b      	ldrh	r3, [r7, #26]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d008      	beq.n	8005d9c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6959      	ldr	r1, [r3, #20]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	895a      	ldrh	r2, [r3, #10]
 8005d96:	8b7b      	ldrh	r3, [r7, #26]
 8005d98:	f004 f89b 	bl	8009ed2 <USB_ReadPMA>
    }
  }

  return count;
 8005d9c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b094      	sub	sp, #80	; 0x50
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	4613      	mov	r3, r2
 8005db2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8138 	beq.w	8006030 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005de8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d907      	bls.n	8005e08 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005e00:	1ad2      	subs	r2, r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	619a      	str	r2, [r3, #24]
 8005e06:	e002      	b.n	8005e0e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d12c      	bne.n	8005e70 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f005 ffec 	bl	800bdfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 823a 	beq.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	82fb      	strh	r3, [r7, #22]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	8afb      	ldrh	r3, [r7, #22]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]
 8005e6e:	e218      	b.n	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01f      	beq.n	8005eba <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f040 81ee 	bne.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ece:	441a      	add	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005edc:	441a      	add	r2, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6a1a      	ldr	r2, [r3, #32]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d309      	bcc.n	8005f02 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efa:	1ad2      	subs	r2, r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	621a      	str	r2, [r3, #32]
 8005f00:	e015      	b.n	8005f2e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8005f0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f0e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f18:	e009      	b.n	8005f2e <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	785b      	ldrb	r3, [r3, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d155      	bne.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x23c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	461a      	mov	r2, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	011a      	lsls	r2, r3, #4
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d112      	bne.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e047      	b.n	800601a <HAL_PCD_EP_DB_Transmit+0x274>
 8005f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f8e:	d811      	bhi.n	8005fb4 <HAL_PCD_EP_DB_Transmit+0x20e>
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	085b      	lsrs	r3, r3, #1
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <HAL_PCD_EP_DB_Transmit+0x200>
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e032      	b.n	800601a <HAL_PCD_EP_DB_Transmit+0x274>
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <HAL_PCD_EP_DB_Transmit+0x224>
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	801a      	strh	r2, [r3, #0]
 8005fe0:	e01b      	b.n	800601a <HAL_PCD_EP_DB_Transmit+0x274>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d117      	bne.n	800601a <HAL_PCD_EP_DB_Transmit+0x274>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	4413      	add	r3, r2
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	011a      	lsls	r2, r3, #4
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	4413      	add	r3, r2
 800600c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006014:	b29a      	uxth	r2, r3
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6959      	ldr	r1, [r3, #20]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	891a      	ldrh	r2, [r3, #8]
 8006026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006028:	b29b      	uxth	r3, r3
 800602a:	f003 ff0d 	bl	8009e48 <USB_WritePMA>
 800602e:	e138      	b.n	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	4413      	add	r3, r2
 8006044:	3306      	adds	r3, #6
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006058:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006064:	429a      	cmp	r2, r3
 8006066:	d307      	bcc.n	8006078 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	619a      	str	r2, [r3, #24]
 8006076:	e002      	b.n	800607e <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d12e      	bne.n	80060e4 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f005 feb4 	bl	800bdfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 8102 	bne.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060de:	b29b      	uxth	r3, r3
 80060e0:	8013      	strh	r3, [r2, #0]
 80060e2:	e0de      	b.n	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11f      	bne.n	800612e <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	867b      	strh	r3, [r7, #50]	; 0x32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006134:	2b01      	cmp	r3, #1
 8006136:	f040 80b4 	bne.w	80062a2 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006142:	441a      	add	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006150:	441a      	add	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6a1a      	ldr	r2, [r3, #32]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d309      	bcc.n	8006176 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	621a      	str	r2, [r3, #32]
 8006174:	e015      	b.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800617e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006182:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800618c:	e009      	b.n	80061a2 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	643b      	str	r3, [r7, #64]	; 0x40
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d155      	bne.n	800625c <HAL_PCD_EP_DB_Transmit+0x4b6>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	4413      	add	r3, r2
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	011a      	lsls	r2, r3, #4
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d112      	bne.n	8006204 <HAL_PCD_EP_DB_Transmit+0x45e>
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	e044      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006206:	2b3e      	cmp	r3, #62	; 0x3e
 8006208:	d811      	bhi.n	800622e <HAL_PCD_EP_DB_Transmit+0x488>
 800620a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_PCD_EP_DB_Transmit+0x47a>
 800621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621c:	3301      	adds	r3, #1
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006222:	b29b      	uxth	r3, r3
 8006224:	029b      	lsls	r3, r3, #10
 8006226:	b29a      	uxth	r2, r3
 8006228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622a:	801a      	strh	r2, [r3, #0]
 800622c:	e02f      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800622e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_PCD_EP_DB_Transmit+0x49e>
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	3b01      	subs	r3, #1
 8006242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29b      	uxth	r3, r3
 800624c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006254:	b29a      	uxth	r2, r3
 8006256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	e018      	b.n	800628e <HAL_PCD_EP_DB_Transmit+0x4e8>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	785b      	ldrb	r3, [r3, #1]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d114      	bne.n	800628e <HAL_PCD_EP_DB_Transmit+0x4e8>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	4413      	add	r3, r2
 8006274:	643b      	str	r3, [r7, #64]	; 0x40
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	011a      	lsls	r2, r3, #4
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	4413      	add	r3, r2
 8006280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006288:	b29a      	uxth	r2, r3
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6959      	ldr	r1, [r3, #20]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	895a      	ldrh	r2, [r3, #10]
 800629a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629c:	b29b      	uxth	r3, r3
 800629e:	f003 fdd3 	bl	8009e48 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062bc:	82bb      	strh	r3, [r7, #20]
 80062be:	8abb      	ldrh	r3, [r7, #20]
 80062c0:	f083 0310 	eor.w	r3, r3, #16
 80062c4:	82bb      	strh	r3, [r7, #20]
 80062c6:	8abb      	ldrh	r3, [r7, #20]
 80062c8:	f083 0320 	eor.w	r3, r3, #32
 80062cc:	82bb      	strh	r3, [r7, #20]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	8abb      	ldrh	r3, [r7, #20]
 80062de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3750      	adds	r7, #80	; 0x50
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	817b      	strh	r3, [r7, #10]
 800630a:	4613      	mov	r3, r2
 800630c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800631a:	897b      	ldrh	r3, [r7, #10]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e009      	b.n	8006346 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006332:	897a      	ldrh	r2, [r7, #10]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d107      	bne.n	800635c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2200      	movs	r2, #0
 8006350:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	b29a      	uxth	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	80da      	strh	r2, [r3, #6]
 800635a:	e00b      	b.n	8006374 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2201      	movs	r2, #1
 8006360:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	b29a      	uxth	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	b29a      	uxth	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e26c      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8087 	beq.w	80064ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063a0:	4b92      	ldr	r3, [pc, #584]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 030c 	and.w	r3, r3, #12
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d00c      	beq.n	80063c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063ac:	4b8f      	ldr	r3, [pc, #572]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 030c 	and.w	r3, r3, #12
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d112      	bne.n	80063de <HAL_RCC_OscConfig+0x5e>
 80063b8:	4b8c      	ldr	r3, [pc, #560]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c4:	d10b      	bne.n	80063de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c6:	4b89      	ldr	r3, [pc, #548]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d06c      	beq.n	80064ac <HAL_RCC_OscConfig+0x12c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d168      	bne.n	80064ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e246      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e6:	d106      	bne.n	80063f6 <HAL_RCC_OscConfig+0x76>
 80063e8:	4b80      	ldr	r3, [pc, #512]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a7f      	ldr	r2, [pc, #508]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80063ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e02e      	b.n	8006454 <HAL_RCC_OscConfig+0xd4>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10c      	bne.n	8006418 <HAL_RCC_OscConfig+0x98>
 80063fe:	4b7b      	ldr	r3, [pc, #492]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a7a      	ldr	r2, [pc, #488]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	4b78      	ldr	r3, [pc, #480]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a77      	ldr	r2, [pc, #476]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e01d      	b.n	8006454 <HAL_RCC_OscConfig+0xd4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006420:	d10c      	bne.n	800643c <HAL_RCC_OscConfig+0xbc>
 8006422:	4b72      	ldr	r3, [pc, #456]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a71      	ldr	r2, [pc, #452]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4b6f      	ldr	r3, [pc, #444]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a6e      	ldr	r2, [pc, #440]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e00b      	b.n	8006454 <HAL_RCC_OscConfig+0xd4>
 800643c:	4b6b      	ldr	r3, [pc, #428]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a6a      	ldr	r2, [pc, #424]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4b68      	ldr	r3, [pc, #416]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a67      	ldr	r2, [pc, #412]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 800644e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d013      	beq.n	8006484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645c:	f7fd fa64 	bl	8003928 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006464:	f7fd fa60 	bl	8003928 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b64      	cmp	r3, #100	; 0x64
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e1fa      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006476:	4b5d      	ldr	r3, [pc, #372]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0xe4>
 8006482:	e014      	b.n	80064ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fd fa50 	bl	8003928 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fd fa4c 	bl	8003928 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	; 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e1e6      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649e:	4b53      	ldr	r3, [pc, #332]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0x10c>
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d063      	beq.n	8006582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ba:	4b4c      	ldr	r3, [pc, #304]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064c6:	4b49      	ldr	r3, [pc, #292]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f003 030c 	and.w	r3, r3, #12
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d11c      	bne.n	800650c <HAL_RCC_OscConfig+0x18c>
 80064d2:	4b46      	ldr	r3, [pc, #280]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d116      	bne.n	800650c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064de:	4b43      	ldr	r3, [pc, #268]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_RCC_OscConfig+0x176>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d001      	beq.n	80064f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1ba      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	4b3d      	ldr	r3, [pc, #244]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4939      	ldr	r1, [pc, #228]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650a:	e03a      	b.n	8006582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006514:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <HAL_RCC_OscConfig+0x270>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651a:	f7fd fa05 	bl	8003928 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006522:	f7fd fa01 	bl	8003928 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e19b      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006534:	4b2d      	ldr	r3, [pc, #180]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006540:	4b2a      	ldr	r3, [pc, #168]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	4927      	ldr	r1, [pc, #156]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	e015      	b.n	8006582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006556:	4b26      	ldr	r3, [pc, #152]	; (80065f0 <HAL_RCC_OscConfig+0x270>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655c:	f7fd f9e4 	bl	8003928 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006564:	f7fd f9e0 	bl	8003928 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e17a      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f0      	bne.n	8006564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d03a      	beq.n	8006604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d019      	beq.n	80065ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006596:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <HAL_RCC_OscConfig+0x274>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659c:	f7fd f9c4 	bl	8003928 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a4:	f7fd f9c0 	bl	8003928 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e15a      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <HAL_RCC_OscConfig+0x26c>)
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065c2:	2001      	movs	r0, #1
 80065c4:	f000 fac4 	bl	8006b50 <RCC_Delay>
 80065c8:	e01c      	b.n	8006604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <HAL_RCC_OscConfig+0x274>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d0:	f7fd f9aa 	bl	8003928 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d6:	e00f      	b.n	80065f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fd f9a6 	bl	8003928 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d908      	bls.n	80065f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e140      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
 80065ea:	bf00      	nop
 80065ec:	40021000 	.word	0x40021000
 80065f0:	42420000 	.word	0x42420000
 80065f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f8:	4b9e      	ldr	r3, [pc, #632]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e9      	bne.n	80065d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 80a6 	beq.w	800675e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006616:	4b97      	ldr	r3, [pc, #604]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10d      	bne.n	800663e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006622:	4b94      	ldr	r3, [pc, #592]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4a93      	ldr	r2, [pc, #588]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662c:	61d3      	str	r3, [r2, #28]
 800662e:	4b91      	ldr	r3, [pc, #580]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663a:	2301      	movs	r3, #1
 800663c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	4b8e      	ldr	r3, [pc, #568]	; (8006878 <HAL_RCC_OscConfig+0x4f8>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	2b00      	cmp	r3, #0
 8006648:	d118      	bne.n	800667c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664a:	4b8b      	ldr	r3, [pc, #556]	; (8006878 <HAL_RCC_OscConfig+0x4f8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a8a      	ldr	r2, [pc, #552]	; (8006878 <HAL_RCC_OscConfig+0x4f8>)
 8006650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006656:	f7fd f967 	bl	8003928 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665c:	e008      	b.n	8006670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665e:	f7fd f963 	bl	8003928 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b64      	cmp	r3, #100	; 0x64
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e0fd      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006670:	4b81      	ldr	r3, [pc, #516]	; (8006878 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d106      	bne.n	8006692 <HAL_RCC_OscConfig+0x312>
 8006684:	4b7b      	ldr	r3, [pc, #492]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	6213      	str	r3, [r2, #32]
 8006690:	e02d      	b.n	80066ee <HAL_RCC_OscConfig+0x36e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10c      	bne.n	80066b4 <HAL_RCC_OscConfig+0x334>
 800669a:	4b76      	ldr	r3, [pc, #472]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a75      	ldr	r2, [pc, #468]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	6213      	str	r3, [r2, #32]
 80066a6:	4b73      	ldr	r3, [pc, #460]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	4a72      	ldr	r2, [pc, #456]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066ac:	f023 0304 	bic.w	r3, r3, #4
 80066b0:	6213      	str	r3, [r2, #32]
 80066b2:	e01c      	b.n	80066ee <HAL_RCC_OscConfig+0x36e>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d10c      	bne.n	80066d6 <HAL_RCC_OscConfig+0x356>
 80066bc:	4b6d      	ldr	r3, [pc, #436]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	4a6c      	ldr	r2, [pc, #432]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066c2:	f043 0304 	orr.w	r3, r3, #4
 80066c6:	6213      	str	r3, [r2, #32]
 80066c8:	4b6a      	ldr	r3, [pc, #424]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	4a69      	ldr	r2, [pc, #420]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	6213      	str	r3, [r2, #32]
 80066d4:	e00b      	b.n	80066ee <HAL_RCC_OscConfig+0x36e>
 80066d6:	4b67      	ldr	r3, [pc, #412]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	4a66      	ldr	r2, [pc, #408]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	6213      	str	r3, [r2, #32]
 80066e2:	4b64      	ldr	r3, [pc, #400]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4a63      	ldr	r2, [pc, #396]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d015      	beq.n	8006722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f6:	f7fd f917 	bl	8003928 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066fc:	e00a      	b.n	8006714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fe:	f7fd f913 	bl	8003928 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	f241 3288 	movw	r2, #5000	; 0x1388
 800670c:	4293      	cmp	r3, r2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e0ab      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006714:	4b57      	ldr	r3, [pc, #348]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ee      	beq.n	80066fe <HAL_RCC_OscConfig+0x37e>
 8006720:	e014      	b.n	800674c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006722:	f7fd f901 	bl	8003928 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006728:	e00a      	b.n	8006740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672a:	f7fd f8fd 	bl	8003928 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f241 3288 	movw	r2, #5000	; 0x1388
 8006738:	4293      	cmp	r3, r2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e095      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006740:	4b4c      	ldr	r3, [pc, #304]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ee      	bne.n	800672a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d105      	bne.n	800675e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006752:	4b48      	ldr	r3, [pc, #288]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	4a47      	ldr	r2, [pc, #284]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800675c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8081 	beq.w	800686a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f003 030c 	and.w	r3, r3, #12
 8006770:	2b08      	cmp	r3, #8
 8006772:	d061      	beq.n	8006838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d146      	bne.n	800680a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677c:	4b3f      	ldr	r3, [pc, #252]	; (800687c <HAL_RCC_OscConfig+0x4fc>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006782:	f7fd f8d1 	bl	8003928 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678a:	f7fd f8cd 	bl	8003928 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e067      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800679c:	4b35      	ldr	r3, [pc, #212]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f0      	bne.n	800678a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b0:	d108      	bne.n	80067c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067b2:	4b30      	ldr	r3, [pc, #192]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	492d      	ldr	r1, [pc, #180]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c4:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a19      	ldr	r1, [r3, #32]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	430b      	orrs	r3, r1
 80067d6:	4927      	ldr	r1, [pc, #156]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067dc:	4b27      	ldr	r3, [pc, #156]	; (800687c <HAL_RCC_OscConfig+0x4fc>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e2:	f7fd f8a1 	bl	8003928 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fd f89d 	bl	8003928 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e037      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x46a>
 8006808:	e02f      	b.n	800686a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680a:	4b1c      	ldr	r3, [pc, #112]	; (800687c <HAL_RCC_OscConfig+0x4fc>)
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006810:	f7fd f88a 	bl	8003928 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006818:	f7fd f886 	bl	8003928 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e020      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1f0      	bne.n	8006818 <HAL_RCC_OscConfig+0x498>
 8006836:	e018      	b.n	800686a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e013      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <HAL_RCC_OscConfig+0x4f4>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	429a      	cmp	r2, r3
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	429a      	cmp	r2, r3
 8006864:	d001      	beq.n	800686a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40021000 	.word	0x40021000
 8006878:	40007000 	.word	0x40007000
 800687c:	42420060 	.word	0x42420060

08006880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0d0      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d910      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 0207 	bic.w	r2, r3, #7
 80068aa:	4965      	ldr	r1, [pc, #404]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0b8      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d020      	beq.n	8006912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f4:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a52      	ldr	r2, [pc, #328]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006900:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	494d      	ldr	r1, [pc, #308]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d040      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d115      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07f      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e073      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06b      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4936      	ldr	r1, [pc, #216]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fc ffda 	bl	8003928 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fc ffd6 	bl	8003928 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e053      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d210      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0207 	bic.w	r2, r3, #7
 80069b6:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e032      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069dc:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4916      	ldr	r1, [pc, #88]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	490e      	ldr	r1, [pc, #56]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a0e:	f000 f821 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	490a      	ldr	r1, [pc, #40]	; (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	5ccb      	ldrb	r3, [r1, r3]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1cc>)
 8006a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x1d0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fc ff38 	bl	80038a4 <HAL_InitTick>

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40022000 	.word	0x40022000
 8006a44:	40021000 	.word	0x40021000
 8006a48:	0800d7c8 	.word	0x0800d7c8
 8006a4c:	20000014 	.word	0x20000014
 8006a50:	20000018 	.word	0x20000018

08006a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b490      	push	{r4, r7}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a5a:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a5c:	1d3c      	adds	r4, r7, #4
 8006a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a64:	f240 2301 	movw	r3, #513	; 0x201
 8006a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	2300      	movs	r3, #0
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a7e:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d002      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x40>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x46>
 8006a92:	e02d      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a96:	623b      	str	r3, [r7, #32]
      break;
 8006a98:	e02d      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	0c9b      	lsrs	r3, r3, #18
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006aac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	0c5b      	lsrs	r3, r3, #17
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006acc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad2:	fb02 f203 	mul.w	r2, r2, r3
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ade:	e004      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ae4:	fb02 f303 	mul.w	r3, r2, r3
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	623b      	str	r3, [r7, #32]
      break;
 8006aee:	e002      	b.n	8006af6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006af2:	623b      	str	r3, [r7, #32]
      break;
 8006af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af6:	6a3b      	ldr	r3, [r7, #32]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc90      	pop	{r4, r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	0800d70c 	.word	0x0800d70c
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	007a1200 	.word	0x007a1200
 8006b10:	003d0900 	.word	0x003d0900

08006b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b18:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr
 8006b24:	20000014 	.word	0x20000014

08006b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b2c:	f7ff fff2 	bl	8006b14 <HAL_RCC_GetHCLKFreq>
 8006b30:	4602      	mov	r2, r0
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	0adb      	lsrs	r3, r3, #11
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	4903      	ldr	r1, [pc, #12]	; (8006b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b3e:	5ccb      	ldrb	r3, [r1, r3]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	40021000 	.word	0x40021000
 8006b4c:	0800d7d8 	.word	0x0800d7d8

08006b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <RCC_Delay+0x34>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a0a      	ldr	r2, [pc, #40]	; (8006b88 <RCC_Delay+0x38>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	0a5b      	lsrs	r3, r3, #9
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b6c:	bf00      	nop
  }
  while (Delay --);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1e5a      	subs	r2, r3, #1
 8006b72:	60fa      	str	r2, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f9      	bne.n	8006b6c <RCC_Delay+0x1c>
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr
 8006b84:	20000014 	.word	0x20000014
 8006b88:	10624dd3 	.word	0x10624dd3

08006b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d07d      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bac:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10d      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb8:	4b4c      	ldr	r3, [pc, #304]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	4a4b      	ldr	r2, [pc, #300]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bc2:	61d3      	str	r3, [r2, #28]
 8006bc4:	4b49      	ldr	r3, [pc, #292]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd4:	4b46      	ldr	r3, [pc, #280]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d118      	bne.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006be0:	4b43      	ldr	r3, [pc, #268]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bec:	f7fc fe9c 	bl	8003928 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bf2:	e008      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf4:	f7fc fe98 	bl	8003928 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d901      	bls.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e06d      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c06:	4b3a      	ldr	r3, [pc, #232]	; (8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c12:	4b36      	ldr	r3, [pc, #216]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d02e      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d027      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c30:	4b2e      	ldr	r3, [pc, #184]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c3a:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c40:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c46:	4a29      	ldr	r2, [pc, #164]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d014      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c56:	f7fc fe67 	bl	8003928 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c5c:	e00a      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5e:	f7fc fe63 	bl	8003928 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e036      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c74:	4b1d      	ldr	r3, [pc, #116]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0ee      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	4917      	ldr	r1, [pc, #92]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c98:	4b14      	ldr	r3, [pc, #80]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	4a13      	ldr	r2, [pc, #76]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cb0:	4b0e      	ldr	r3, [pc, #56]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	490b      	ldr	r1, [pc, #44]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0310 	and.w	r3, r3, #16
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d008      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	4904      	ldr	r1, [pc, #16]	; (8006cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40007000 	.word	0x40007000
 8006cf4:	42420440 	.word	0x42420440

08006cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b08d      	sub	sp, #52	; 0x34
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d00:	4b5a      	ldr	r3, [pc, #360]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006d02:	f107 040c 	add.w	r4, r7, #12
 8006d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d0c:	f240 2301 	movw	r3, #513	; 0x201
 8006d10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
 8006d16:	2300      	movs	r3, #0
 8006d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	2300      	movs	r3, #0
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d00a      	beq.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	f200 8091 	bhi.w	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d04c      	beq.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d07c      	beq.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006d40:	e089      	b.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006d42:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d48:	4b49      	ldr	r3, [pc, #292]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8082 	beq.w	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	0c9b      	lsrs	r3, r3, #18
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d62:	4413      	add	r3, r2
 8006d64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d018      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d74:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	0c5b      	lsrs	r3, r3, #17
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d82:	4413      	add	r3, r2
 8006d84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00d      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d94:	4a37      	ldr	r2, [pc, #220]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da4:	e004      	b.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	4a33      	ldr	r2, [pc, #204]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006db0:	4b2f      	ldr	r3, [pc, #188]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbc:	d102      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006dc2:	e04a      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	4a2c      	ldr	r2, [pc, #176]	; (8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006dca:	fba2 2303 	umull	r2, r3, r2, r3
 8006dce:	085b      	lsrs	r3, r3, #1
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006dd2:	e042      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006dd4:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de4:	d108      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006df6:	e01f      	b.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e02:	d109      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006e10:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e16:	e00f      	b.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e22:	d11c      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006e24:	4b12      	ldr	r3, [pc, #72]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d016      	beq.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006e30:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e36:	e012      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006e38:	e011      	b.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006e3a:	f7ff fe75 	bl	8006b28 <HAL_RCC_GetPCLK2Freq>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	0b9b      	lsrs	r3, r3, #14
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e54:	e004      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e5e:	bf00      	nop
    }
  }
  return (frequency);
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3734      	adds	r7, #52	; 0x34
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd90      	pop	{r4, r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	0800d71c 	.word	0x0800d71c
 8006e70:	40021000 	.word	0x40021000
 8006e74:	007a1200 	.word	0x007a1200
 8006e78:	003d0900 	.word	0x003d0900
 8006e7c:	aaaaaaab 	.word	0xaaaaaaab

08006e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e076      	b.n	8006f80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d108      	bne.n	8006eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea2:	d009      	beq.n	8006eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	61da      	str	r2, [r3, #28]
 8006eaa:	e005      	b.n	8006eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fc fad4 	bl	8003480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	ea42 0103 	orr.w	r1, r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	0c1a      	lsrs	r2, r3, #16
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f002 0204 	and.w	r2, r2, #4
 8006f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_SPI_Transmit+0x22>
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e126      	b.n	80071f8 <HAL_SPI_Transmit+0x270>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb2:	f7fc fcb9 	bl	8003928 <HAL_GetTick>
 8006fb6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d002      	beq.n	8006fce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fcc:	e10b      	b.n	80071e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <HAL_SPI_Transmit+0x52>
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fde:	e102      	b.n	80071e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2203      	movs	r2, #3
 8006fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	88fa      	ldrh	r2, [r7, #6]
 8006ff8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	88fa      	ldrh	r2, [r7, #6]
 8006ffe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007026:	d10f      	bne.n	8007048 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007036:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007046:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d007      	beq.n	8007066 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007064:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800706e:	d14b      	bne.n	8007108 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0xf6>
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d13e      	bne.n	80070fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007098:	b29b      	uxth	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070a2:	e02b      	b.n	80070fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d112      	bne.n	80070d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	881a      	ldrh	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80070d6:	e011      	b.n	80070fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070d8:	f7fc fc26 	bl	8003928 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d803      	bhi.n	80070f0 <HAL_SPI_Transmit+0x168>
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ee:	d102      	bne.n	80070f6 <HAL_SPI_Transmit+0x16e>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d102      	bne.n	80070fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070fa:	e074      	b.n	80071e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007100:	b29b      	uxth	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ce      	bne.n	80070a4 <HAL_SPI_Transmit+0x11c>
 8007106:	e04c      	b.n	80071a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SPI_Transmit+0x18e>
 8007110:	8afb      	ldrh	r3, [r7, #22]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d140      	bne.n	8007198 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	7812      	ldrb	r2, [r2, #0]
 8007122:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800713c:	e02c      	b.n	8007198 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b02      	cmp	r3, #2
 800714a:	d113      	bne.n	8007174 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	7812      	ldrb	r2, [r2, #0]
 8007158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	86da      	strh	r2, [r3, #54]	; 0x36
 8007172:	e011      	b.n	8007198 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007174:	f7fc fbd8 	bl	8003928 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	429a      	cmp	r2, r3
 8007182:	d803      	bhi.n	800718c <HAL_SPI_Transmit+0x204>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d102      	bne.n	8007192 <HAL_SPI_Transmit+0x20a>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d102      	bne.n	8007198 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007196:	e026      	b.n	80071e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1cd      	bne.n	800713e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 f8b2 	bl	8007310 <SPI_EndRxTxTransaction>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e000      	b.n	80071e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4613      	mov	r3, r2
 800720e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007210:	f7fc fb8a 	bl	8003928 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	4413      	add	r3, r2
 800721e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007220:	f7fc fb82 	bl	8003928 <HAL_GetTick>
 8007224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007226:	4b39      	ldr	r3, [pc, #228]	; (800730c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	015b      	lsls	r3, r3, #5
 800722c:	0d1b      	lsrs	r3, r3, #20
 800722e:	69fa      	ldr	r2, [r7, #28]
 8007230:	fb02 f303 	mul.w	r3, r2, r3
 8007234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007236:	e054      	b.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d050      	beq.n	80072e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007240:	f7fc fb72 	bl	8003928 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	429a      	cmp	r2, r3
 800724e:	d902      	bls.n	8007256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d13d      	bne.n	80072d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726e:	d111      	bne.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007278:	d004      	beq.n	8007284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007282:	d107      	bne.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729c:	d10f      	bne.n	80072be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e017      	b.n	8007302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	3b01      	subs	r3, #1
 80072e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	bf0c      	ite	eq
 80072f2:	2301      	moveq	r3, #1
 80072f4:	2300      	movne	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d19b      	bne.n	8007238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000014 	.word	0x20000014

08007310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2200      	movs	r2, #0
 8007324:	2180      	movs	r1, #128	; 0x80
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7ff ff6a 	bl	8007200 <SPI_WaitFlagStateUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	f043 0220 	orr.w	r2, r3, #32
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e000      	b.n	8007344 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e041      	b.n	80073e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7fc f8c2 	bl	80034fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2202      	movs	r2, #2
 800737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	f000 fb38 	bl	8007a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d104      	bne.n	8007406 <HAL_TIM_IC_Start_IT+0x1a>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007402:	b2db      	uxtb	r3, r3
 8007404:	e013      	b.n	800742e <HAL_TIM_IC_Start_IT+0x42>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b04      	cmp	r3, #4
 800740a:	d104      	bne.n	8007416 <HAL_TIM_IC_Start_IT+0x2a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007412:	b2db      	uxtb	r3, r3
 8007414:	e00b      	b.n	800742e <HAL_TIM_IC_Start_IT+0x42>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d104      	bne.n	8007426 <HAL_TIM_IC_Start_IT+0x3a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007422:	b2db      	uxtb	r3, r3
 8007424:	e003      	b.n	800742e <HAL_TIM_IC_Start_IT+0x42>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800742c:	b2db      	uxtb	r3, r3
 800742e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <HAL_TIM_IC_Start_IT+0x54>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800743c:	b2db      	uxtb	r3, r3
 800743e:	e013      	b.n	8007468 <HAL_TIM_IC_Start_IT+0x7c>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d104      	bne.n	8007450 <HAL_TIM_IC_Start_IT+0x64>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800744c:	b2db      	uxtb	r3, r3
 800744e:	e00b      	b.n	8007468 <HAL_TIM_IC_Start_IT+0x7c>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b08      	cmp	r3, #8
 8007454:	d104      	bne.n	8007460 <HAL_TIM_IC_Start_IT+0x74>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e003      	b.n	8007468 <HAL_TIM_IC_Start_IT+0x7c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007466:	b2db      	uxtb	r3, r3
 8007468:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d102      	bne.n	8007476 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d001      	beq.n	800747a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0b3      	b.n	80075e2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_TIM_IC_Start_IT+0x9e>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007488:	e013      	b.n	80074b2 <HAL_TIM_IC_Start_IT+0xc6>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d104      	bne.n	800749a <HAL_TIM_IC_Start_IT+0xae>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007498:	e00b      	b.n	80074b2 <HAL_TIM_IC_Start_IT+0xc6>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d104      	bne.n	80074aa <HAL_TIM_IC_Start_IT+0xbe>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a8:	e003      	b.n	80074b2 <HAL_TIM_IC_Start_IT+0xc6>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_IC_Start_IT+0xd6>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2202      	movs	r2, #2
 80074bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c0:	e013      	b.n	80074ea <HAL_TIM_IC_Start_IT+0xfe>
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d104      	bne.n	80074d2 <HAL_TIM_IC_Start_IT+0xe6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d0:	e00b      	b.n	80074ea <HAL_TIM_IC_Start_IT+0xfe>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d104      	bne.n	80074e2 <HAL_TIM_IC_Start_IT+0xf6>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074e0:	e003      	b.n	80074ea <HAL_TIM_IC_Start_IT+0xfe>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2202      	movs	r2, #2
 80074e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	d841      	bhi.n	8007574 <HAL_TIM_IC_Start_IT+0x188>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <HAL_TIM_IC_Start_IT+0x10c>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800752d 	.word	0x0800752d
 80074fc:	08007575 	.word	0x08007575
 8007500:	08007575 	.word	0x08007575
 8007504:	08007575 	.word	0x08007575
 8007508:	0800753f 	.word	0x0800753f
 800750c:	08007575 	.word	0x08007575
 8007510:	08007575 	.word	0x08007575
 8007514:	08007575 	.word	0x08007575
 8007518:	08007551 	.word	0x08007551
 800751c:	08007575 	.word	0x08007575
 8007520:	08007575 	.word	0x08007575
 8007524:	08007575 	.word	0x08007575
 8007528:	08007563 	.word	0x08007563
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0202 	orr.w	r2, r2, #2
 800753a:	60da      	str	r2, [r3, #12]
      break;
 800753c:	e01b      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0204 	orr.w	r2, r2, #4
 800754c:	60da      	str	r2, [r3, #12]
      break;
 800754e:	e012      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0208 	orr.w	r2, r2, #8
 800755e:	60da      	str	r2, [r3, #12]
      break;
 8007560:	e009      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0210 	orr.w	r2, r2, #16
 8007570:	60da      	str	r2, [r3, #12]
      break;
 8007572:	e000      	b.n	8007576 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8007574:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fbad 	bl	8007cde <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a18      	ldr	r2, [pc, #96]	; (80075ec <HAL_TIM_IC_Start_IT+0x200>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00e      	beq.n	80075ac <HAL_TIM_IC_Start_IT+0x1c0>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d009      	beq.n	80075ac <HAL_TIM_IC_Start_IT+0x1c0>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a14      	ldr	r2, [pc, #80]	; (80075f0 <HAL_TIM_IC_Start_IT+0x204>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <HAL_TIM_IC_Start_IT+0x1c0>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a13      	ldr	r2, [pc, #76]	; (80075f4 <HAL_TIM_IC_Start_IT+0x208>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d111      	bne.n	80075d0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	d010      	beq.n	80075e0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ce:	e007      	b.n	80075e0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800

080075f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0202 	mvn.w	r2, #2
 8007624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fa ffee 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f9c1 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f9c7 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b04      	cmp	r3, #4
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b04      	cmp	r3, #4
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0204 	mvn.w	r2, #4
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2202      	movs	r2, #2
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fa ffc4 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f997 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f99d 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0208 	mvn.w	r2, #8
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2204      	movs	r2, #4
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7fa ff9a 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f96d 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f973 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b10      	cmp	r3, #16
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0210 	mvn.w	r2, #16
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2208      	movs	r2, #8
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa ff70 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f943 	bl	80079ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f949 	bl	80079dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	d10e      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d107      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0201 	mvn.w	r2, #1
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f91e 	bl	80079b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b80      	cmp	r3, #128	; 0x80
 8007788:	d10e      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d107      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fb27 	bl	8007df6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d10e      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b40      	cmp	r3, #64	; 0x40
 80077c2:	d107      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f90d 	bl	80079ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d10e      	bne.n	8007800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d107      	bne.n	8007800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0220 	mvn.w	r2, #32
 80077f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 faf2 	bl	8007de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_TIM_IC_ConfigChannel+0x1a>
 800781e:	2302      	movs	r3, #2
 8007820:	e082      	b.n	8007928 <HAL_TIM_IC_ConfigChannel+0x120>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d11b      	bne.n	8007868 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6819      	ldr	r1, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	685a      	ldr	r2, [r3, #4]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f000 f940 	bl	8007ac4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 020c 	bic.w	r2, r2, #12
 8007852:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6999      	ldr	r1, [r3, #24]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	619a      	str	r2, [r3, #24]
 8007866:	e05a      	b.n	800791e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b04      	cmp	r3, #4
 800786c:	d11c      	bne.n	80078a8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6819      	ldr	r1, [r3, #0]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f000 f97b 	bl	8007b78 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007890:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6999      	ldr	r1, [r3, #24]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	021a      	lsls	r2, r3, #8
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	619a      	str	r2, [r3, #24]
 80078a6:	e03a      	b.n	800791e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d11b      	bne.n	80078e6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f000 f997 	bl	8007bf0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69da      	ldr	r2, [r3, #28]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 020c 	bic.w	r2, r2, #12
 80078d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69d9      	ldr	r1, [r3, #28]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	61da      	str	r2, [r3, #28]
 80078e4:	e01b      	b.n	800791e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6819      	ldr	r1, [r3, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f000 f9b6 	bl	8007c66 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69da      	ldr	r2, [r3, #28]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007908:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69d9      	ldr	r1, [r3, #28]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	021a      	lsls	r2, r3, #8
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b0c      	cmp	r3, #12
 8007942:	d831      	bhi.n	80079a8 <HAL_TIM_ReadCapturedValue+0x78>
 8007944:	a201      	add	r2, pc, #4	; (adr r2, 800794c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794a:	bf00      	nop
 800794c:	08007981 	.word	0x08007981
 8007950:	080079a9 	.word	0x080079a9
 8007954:	080079a9 	.word	0x080079a9
 8007958:	080079a9 	.word	0x080079a9
 800795c:	0800798b 	.word	0x0800798b
 8007960:	080079a9 	.word	0x080079a9
 8007964:	080079a9 	.word	0x080079a9
 8007968:	080079a9 	.word	0x080079a9
 800796c:	08007995 	.word	0x08007995
 8007970:	080079a9 	.word	0x080079a9
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079a9 	.word	0x080079a9
 800797c:	0800799f 	.word	0x0800799f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007986:	60fb      	str	r3, [r7, #12]

      break;
 8007988:	e00f      	b.n	80079aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	60fb      	str	r3, [r7, #12]

      break;
 8007992:	e00a      	b.n	80079aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	60fb      	str	r3, [r7, #12]

      break;
 800799c:	e005      	b.n	80079aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	60fb      	str	r3, [r7, #12]

      break;
 80079a6:	e000      	b.n	80079aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80079a8:	bf00      	nop
  }

  return tmpreg;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bc80      	pop	{r7}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d2:	bf00      	nop
 80079d4:	370c      	adds	r7, #12
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr

080079ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a29      	ldr	r2, [pc, #164]	; (8007ab8 <TIM_Base_SetConfig+0xb8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_Base_SetConfig+0x30>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1e:	d007      	beq.n	8007a30 <TIM_Base_SetConfig+0x30>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a26      	ldr	r2, [pc, #152]	; (8007abc <TIM_Base_SetConfig+0xbc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_Base_SetConfig+0x30>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a25      	ldr	r2, [pc, #148]	; (8007ac0 <TIM_Base_SetConfig+0xc0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d108      	bne.n	8007a42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <TIM_Base_SetConfig+0xb8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00b      	beq.n	8007a62 <TIM_Base_SetConfig+0x62>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a50:	d007      	beq.n	8007a62 <TIM_Base_SetConfig+0x62>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a19      	ldr	r2, [pc, #100]	; (8007abc <TIM_Base_SetConfig+0xbc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d003      	beq.n	8007a62 <TIM_Base_SetConfig+0x62>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a18      	ldr	r2, [pc, #96]	; (8007ac0 <TIM_Base_SetConfig+0xc0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d108      	bne.n	8007a74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <TIM_Base_SetConfig+0xb8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d103      	bne.n	8007aa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	691a      	ldr	r2, [r3, #16]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	615a      	str	r2, [r3, #20]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr
 8007ab8:	40012c00 	.word	0x40012c00
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800

08007ac4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f023 0201 	bic.w	r2, r3, #1
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a1b      	ldr	r3, [r3, #32]
 8007ae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4a1f      	ldr	r2, [pc, #124]	; (8007b6c <TIM_TI1_SetConfig+0xa8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00b      	beq.n	8007b0a <TIM_TI1_SetConfig+0x46>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d007      	beq.n	8007b0a <TIM_TI1_SetConfig+0x46>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <TIM_TI1_SetConfig+0xac>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_TI1_SetConfig+0x46>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4a1b      	ldr	r2, [pc, #108]	; (8007b74 <TIM_TI1_SetConfig+0xb0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d101      	bne.n	8007b0e <TIM_TI1_SetConfig+0x4a>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <TIM_TI1_SetConfig+0x4c>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d008      	beq.n	8007b26 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e003      	b.n	8007b2e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f043 0301 	orr.w	r3, r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f023 030a 	bic.w	r3, r3, #10
 8007b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f003 030a 	and.w	r3, r3, #10
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	40012c00 	.word	0x40012c00
 8007b70:	40000400 	.word	0x40000400
 8007b74:	40000800 	.word	0x40000800

08007b78 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f023 0210 	bic.w	r2, r3, #16
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	021b      	lsls	r3, r3, #8
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	031b      	lsls	r3, r3, #12
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr

08007bf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	621a      	str	r2, [r3, #32]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b087      	sub	sp, #28
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ca4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	031b      	lsls	r3, r3, #12
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	031b      	lsls	r3, r3, #12
 8007cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	621a      	str	r2, [r3, #32]
}
 8007cd4:	bf00      	nop
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f003 031f 	and.w	r3, r3, #31
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	401a      	ands	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1a      	ldr	r2, [r3, #32]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f003 031f 	and.w	r3, r3, #31
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	fa01 f303 	lsl.w	r3, r1, r3
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	621a      	str	r2, [r3, #32]
}
 8007d1c:	bf00      	nop
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bc80      	pop	{r7}
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e046      	b.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a12      	ldr	r2, [pc, #72]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10c      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	40012c00 	.word	0x40012c00
 8007ddc:	40000400 	.word	0x40000400
 8007de0:	40000800 	.word	0x40000800

08007de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr

08007df6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e08:	b084      	sub	sp, #16
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	f107 0014 	add.w	r0, r7, #20
 8007e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	b004      	add	sp, #16
 8007e26:	4770      	bx	lr

08007e28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007e3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007e60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4013      	ands	r3, r2
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bc80      	pop	{r7}
 8007e86:	4770      	bx	lr

08007e88 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	f107 0014 	add.w	r0, r7, #20
 8007eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	b004      	add	sp, #16
 8007ede:	4770      	bx	lr

08007ee0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b09b      	sub	sp, #108	; 0x6c
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	78db      	ldrb	r3, [r3, #3]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d81f      	bhi.n	8007f52 <USB_ActivateEndpoint+0x72>
 8007f12:	a201      	add	r2, pc, #4	; (adr r2, 8007f18 <USB_ActivateEndpoint+0x38>)
 8007f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f18:	08007f29 	.word	0x08007f29
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f5b 	.word	0x08007f5b
 8007f24:	08007f37 	.word	0x08007f37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f28:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007f34:	e012      	b.n	8007f5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007f3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007f42:	e00b      	b.n	8007f5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007f44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f4c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007f50:	e004      	b.n	8007f5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007f58:	e000      	b.n	8007f5c <USB_ActivateEndpoint+0x7c>
      break;
 8007f5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	441a      	add	r2, r3
 8007f66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	7b1b      	ldrb	r3, [r3, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f040 8149 	bne.w	8008260 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 8084 	beq.w	80080e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	011a      	lsls	r2, r3, #4
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	88db      	ldrh	r3, [r3, #6]
 8008000:	085b      	lsrs	r3, r3, #1
 8008002:	b29b      	uxth	r3, r3
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	b29a      	uxth	r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	81fb      	strh	r3, [r7, #14]
 800801a:	89fb      	ldrh	r3, [r7, #14]
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d01b      	beq.n	800805c <USB_ActivateEndpoint+0x17c>
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803a:	81bb      	strh	r3, [r7, #12]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	441a      	add	r2, r3
 8008046:	89bb      	ldrh	r3, [r7, #12]
 8008048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008054:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008058:	b29b      	uxth	r3, r3
 800805a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d020      	beq.n	80080a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807a:	813b      	strh	r3, [r7, #8]
 800807c:	893b      	ldrh	r3, [r7, #8]
 800807e:	f083 0320 	eor.w	r3, r3, #32
 8008082:	813b      	strh	r3, [r7, #8]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	441a      	add	r2, r3
 800808e:	893b      	ldrh	r3, [r7, #8]
 8008090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	8013      	strh	r3, [r2, #0]
 80080a4:	e27f      	b.n	80085a6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080bc:	817b      	strh	r3, [r7, #10]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	897b      	ldrh	r3, [r7, #10]
 80080ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080da:	b29b      	uxth	r3, r3
 80080dc:	8013      	strh	r3, [r2, #0]
 80080de:	e262      	b.n	80085a6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	4413      	add	r3, r2
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	011a      	lsls	r2, r3, #4
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	4413      	add	r3, r2
 80080fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	88db      	ldrh	r3, [r3, #6]
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	b29b      	uxth	r3, r3
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800811e:	b29b      	uxth	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	4413      	add	r3, r2
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	011a      	lsls	r2, r3, #4
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	4413      	add	r3, r2
 8008132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008136:	623b      	str	r3, [r7, #32]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d112      	bne.n	8008166 <USB_ActivateEndpoint+0x286>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800814a:	b29a      	uxth	r2, r3
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815e:	b29a      	uxth	r2, r3
 8008160:	6a3b      	ldr	r3, [r7, #32]
 8008162:	801a      	strh	r2, [r3, #0]
 8008164:	e02f      	b.n	80081c6 <USB_ActivateEndpoint+0x2e6>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	2b3e      	cmp	r3, #62	; 0x3e
 800816c:	d813      	bhi.n	8008196 <USB_ActivateEndpoint+0x2b6>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	663b      	str	r3, [r7, #96]	; 0x60
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <USB_ActivateEndpoint+0x2a8>
 8008182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008184:	3301      	adds	r3, #1
 8008186:	663b      	str	r3, [r7, #96]	; 0x60
 8008188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800818a:	b29b      	uxth	r3, r3
 800818c:	029b      	lsls	r3, r3, #10
 800818e:	b29a      	uxth	r2, r3
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e017      	b.n	80081c6 <USB_ActivateEndpoint+0x2e6>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	663b      	str	r3, [r7, #96]	; 0x60
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d102      	bne.n	80081b0 <USB_ActivateEndpoint+0x2d0>
 80081aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081ac:	3b01      	subs	r3, #1
 80081ae:	663b      	str	r3, [r7, #96]	; 0x60
 80081b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	029b      	lsls	r3, r3, #10
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	83fb      	strh	r3, [r7, #30]
 80081d4:	8bfb      	ldrh	r3, [r7, #30]
 80081d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01b      	beq.n	8008216 <USB_ActivateEndpoint+0x336>
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f4:	83bb      	strh	r3, [r7, #28]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	441a      	add	r2, r3
 8008200:	8bbb      	ldrh	r3, [r7, #28]
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800820a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822c:	837b      	strh	r3, [r7, #26]
 800822e:	8b7b      	ldrh	r3, [r7, #26]
 8008230:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008234:	837b      	strh	r3, [r7, #26]
 8008236:	8b7b      	ldrh	r3, [r7, #26]
 8008238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800823c:	837b      	strh	r3, [r7, #26]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	441a      	add	r2, r3
 8008248:	8b7b      	ldrh	r3, [r7, #26]
 800824a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800825a:	b29b      	uxth	r3, r3
 800825c:	8013      	strh	r3, [r2, #0]
 800825e:	e1a2      	b.n	80085a6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	b29b      	uxth	r3, r3
 800826e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	441a      	add	r2, r3
 8008284:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800828c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008290:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008298:	b29b      	uxth	r3, r3
 800829a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	65bb      	str	r3, [r7, #88]	; 0x58
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ac:	4413      	add	r3, r2
 80082ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	011a      	lsls	r2, r3, #4
 80082b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082be:	657b      	str	r3, [r7, #84]	; 0x54
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	891b      	ldrh	r3, [r3, #8]
 80082c4:	085b      	lsrs	r3, r3, #1
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	653b      	str	r3, [r7, #80]	; 0x50
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082da:	b29b      	uxth	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e0:	4413      	add	r3, r2
 80082e2:	653b      	str	r3, [r7, #80]	; 0x50
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	011a      	lsls	r2, r3, #4
 80082ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80082f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	895b      	ldrh	r3, [r3, #10]
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008302:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f040 8091 	bne.w	8008430 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800831c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800831e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01b      	beq.n	800835e <USB_ActivateEndpoint+0x47e>
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800833c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	441a      	add	r2, r3
 8008348:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800834a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800834e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835a:	b29b      	uxth	r3, r3
 800835c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	873b      	strh	r3, [r7, #56]	; 0x38
 800836c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d01b      	beq.n	80083ae <USB_ActivateEndpoint+0x4ce>
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	441a      	add	r2, r3
 8008398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800839a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80083c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80083ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	441a      	add	r2, r3
 80083e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800840c:	867b      	strh	r3, [r7, #50]	; 0x32
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800841a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842a:	b29b      	uxth	r3, r3
 800842c:	8013      	strh	r3, [r2, #0]
 800842e:	e0ba      	b.n	80085a6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01d      	beq.n	8008488 <USB_ActivateEndpoint+0x5a8>
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	441a      	add	r2, r3
 8008470:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008484:	b29b      	uxth	r3, r3
 8008486:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008498:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01d      	beq.n	80084e0 <USB_ActivateEndpoint+0x600>
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	441a      	add	r2, r3
 80084c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80084cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084dc:	b29b      	uxth	r3, r3
 80084de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	78db      	ldrb	r3, [r3, #3]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d024      	beq.n	8008532 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	881b      	ldrh	r3, [r3, #0]
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008502:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008506:	f083 0320 	eor.w	r3, r3, #32
 800850a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]
 8008530:	e01d      	b.n	800856e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008548:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	441a      	add	r2, r3
 8008556:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800855a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800855e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800856a:	b29b      	uxth	r3, r3
 800856c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008584:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	441a      	add	r2, r3
 8008590:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80085a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	376c      	adds	r7, #108	; 0x6c
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr

080085b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b08d      	sub	sp, #52	; 0x34
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	7b1b      	ldrb	r3, [r3, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 808e 	bne.w	80086e4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d044      	beq.n	800865a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	81bb      	strh	r3, [r7, #12]
 80085de:	89bb      	ldrh	r3, [r7, #12]
 80085e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01b      	beq.n	8008620 <USB_DeactivateEndpoint+0x6c>
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	817b      	strh	r3, [r7, #10]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	441a      	add	r2, r3
 800860a:	897b      	ldrh	r3, [r7, #10]
 800860c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800861c:	b29b      	uxth	r3, r3
 800861e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008636:	813b      	strh	r3, [r7, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	441a      	add	r2, r3
 8008642:	893b      	ldrh	r3, [r7, #8]
 8008644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008654:	b29b      	uxth	r3, r3
 8008656:	8013      	strh	r3, [r2, #0]
 8008658:	e192      	b.n	8008980 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	827b      	strh	r3, [r7, #18]
 8008668:	8a7b      	ldrh	r3, [r7, #18]
 800866a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01b      	beq.n	80086aa <USB_DeactivateEndpoint+0xf6>
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	823b      	strh	r3, [r7, #16]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	441a      	add	r2, r3
 8008694:	8a3b      	ldrh	r3, [r7, #16]
 8008696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800869a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800869e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c0:	81fb      	strh	r3, [r7, #14]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	441a      	add	r2, r3
 80086cc:	89fb      	ldrh	r3, [r7, #14]
 80086ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086de:	b29b      	uxth	r3, r3
 80086e0:	8013      	strh	r3, [r2, #0]
 80086e2:	e14d      	b.n	8008980 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 80a5 	bne.w	8008838 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	843b      	strh	r3, [r7, #32]
 80086fc:	8c3b      	ldrh	r3, [r7, #32]
 80086fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d01b      	beq.n	800873e <USB_DeactivateEndpoint+0x18a>
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871c:	83fb      	strh	r3, [r7, #30]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	8bfb      	ldrh	r3, [r7, #30]
 800872a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873a:	b29b      	uxth	r3, r3
 800873c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	83bb      	strh	r3, [r7, #28]
 800874c:	8bbb      	ldrh	r3, [r7, #28]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01b      	beq.n	800878e <USB_DeactivateEndpoint+0x1da>
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800876c:	837b      	strh	r3, [r7, #26]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	8b7b      	ldrh	r3, [r7, #26]
 800877a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008786:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800878a:	b29b      	uxth	r3, r3
 800878c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a4:	833b      	strh	r3, [r7, #24]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	441a      	add	r2, r3
 80087b0:	8b3b      	ldrh	r3, [r7, #24]
 80087b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087dc:	82fb      	strh	r3, [r7, #22]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	441a      	add	r2, r3
 80087e8:	8afb      	ldrh	r3, [r7, #22]
 80087ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008814:	82bb      	strh	r3, [r7, #20]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	8abb      	ldrh	r3, [r7, #20]
 8008822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800882e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008832:	b29b      	uxth	r3, r3
 8008834:	8013      	strh	r3, [r2, #0]
 8008836:	e0a3      	b.n	8008980 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008846:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01b      	beq.n	8008888 <USB_DeactivateEndpoint+0x2d4>
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	441a      	add	r2, r3
 8008872:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008896:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01b      	beq.n	80088d8 <USB_DeactivateEndpoint+0x324>
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b6:	853b      	strh	r3, [r7, #40]	; 0x28
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	441a      	add	r2, r3
 80088c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	881b      	ldrh	r3, [r3, #0]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890c:	b29b      	uxth	r3, r3
 800890e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008926:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	441a      	add	r2, r3
 8008932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800893c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008944:	b29b      	uxth	r3, r3
 8008946:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29b      	uxth	r3, r3
 8008956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800895a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800896c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897c:	b29b      	uxth	r3, r3
 800897e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3734      	adds	r7, #52	; 0x34
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr

0800898c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b0c4      	sub	sp, #272	; 0x110
 8008990:	af00      	add	r7, sp, #0
 8008992:	1d3b      	adds	r3, r7, #4
 8008994:	6018      	str	r0, [r3, #0]
 8008996:	463b      	mov	r3, r7
 8008998:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800899a:	463b      	mov	r3, r7
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	f040 8557 	bne.w	8009454 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	699a      	ldr	r2, [r3, #24]
 80089ac:	463b      	mov	r3, r7
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d905      	bls.n	80089c2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80089b6:	463b      	mov	r3, r7
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80089c0:	e004      	b.n	80089cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80089c2:	463b      	mov	r3, r7
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80089cc:	463b      	mov	r3, r7
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	7b1b      	ldrb	r3, [r3, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d12c      	bne.n	8008a30 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80089d6:	463b      	mov	r3, r7
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6959      	ldr	r1, [r3, #20]
 80089dc:	463b      	mov	r3, r7
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	88da      	ldrh	r2, [r3, #6]
 80089e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	1d38      	adds	r0, r7, #4
 80089ea:	6800      	ldr	r0, [r0, #0]
 80089ec:	f001 fa2c 	bl	8009e48 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80089f0:	1d3b      	adds	r3, r7, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	1d3b      	adds	r3, r7, #4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4413      	add	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	463b      	mov	r3, r7
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	011a      	lsls	r2, r3, #4
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	4413      	add	r3, r2
 8008a14:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008a18:	f107 0310 	add.w	r3, r7, #16
 8008a1c:	601a      	str	r2, [r3, #0]
 8008a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	f107 0310 	add.w	r3, r7, #16
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	f000 bcdd 	b.w	80093ea <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008a30:	463b      	mov	r3, r7
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	78db      	ldrb	r3, [r3, #3]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	f040 8347 	bne.w	80090ca <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6a1a      	ldr	r2, [r3, #32]
 8008a42:	463b      	mov	r3, r7
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	f240 82eb 	bls.w	8009024 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008a4e:	1d3b      	adds	r3, r7, #4
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	463b      	mov	r3, r7
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008a6c:	1d3b      	adds	r3, r7, #4
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	463b      	mov	r3, r7
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	441a      	add	r2, r3
 8008a7a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a86:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a92:	463b      	mov	r3, r7
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a9c:	1ad2      	subs	r2, r2, r3
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008aa4:	1d3b      	adds	r3, r7, #4
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 8159 	beq.w	8008d72 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ac0:	1d3b      	adds	r3, r7, #4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d164      	bne.n	8008b9a <USB_EPStartXfer+0x20e>
 8008ad0:	1d3b      	adds	r3, r7, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad6:	1d3b      	adds	r3, r7, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	4413      	add	r3, r2
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae8:	463b      	mov	r3, r7
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	011a      	lsls	r2, r3, #4
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	4413      	add	r3, r2
 8008af4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d112      	bne.n	8008b28 <USB_EPStartXfer+0x19c>
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	e054      	b.n	8008bd2 <USB_EPStartXfer+0x246>
 8008b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b2e:	d817      	bhi.n	8008b60 <USB_EPStartXfer+0x1d4>
 8008b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <USB_EPStartXfer+0x1c4>
 8008b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	801a      	strh	r2, [r3, #0]
 8008b5e:	e038      	b.n	8008bd2 <USB_EPStartXfer+0x246>
 8008b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b64:	095b      	lsrs	r3, r3, #5
 8008b66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b6e:	f003 031f 	and.w	r3, r3, #31
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <USB_EPStartXfer+0x1f4>
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	029b      	lsls	r3, r3, #10
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e01b      	b.n	8008bd2 <USB_EPStartXfer+0x246>
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	785b      	ldrb	r3, [r3, #1]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d116      	bne.n	8008bd2 <USB_EPStartXfer+0x246>
 8008ba4:	1d3b      	adds	r3, r7, #4
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb2:	4413      	add	r3, r2
 8008bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	011a      	lsls	r2, r3, #4
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8008bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	895b      	ldrh	r3, [r3, #10]
 8008bd8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bdc:	463b      	mov	r3, r7
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6959      	ldr	r1, [r3, #20]
 8008be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008bec:	1d38      	adds	r0, r7, #4
 8008bee:	6800      	ldr	r0, [r0, #0]
 8008bf0:	f001 f92a 	bl	8009e48 <USB_WritePMA>
            ep->xfer_buff += len;
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bfe:	441a      	add	r2, r3
 8008c00:	463b      	mov	r3, r7
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c06:	463b      	mov	r3, r7
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6a1a      	ldr	r2, [r3, #32]
 8008c0c:	463b      	mov	r3, r7
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d909      	bls.n	8008c2a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8008c16:	463b      	mov	r3, r7
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6a1a      	ldr	r2, [r3, #32]
 8008c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c20:	1ad2      	subs	r2, r2, r3
 8008c22:	463b      	mov	r3, r7
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	621a      	str	r2, [r3, #32]
 8008c28:	e008      	b.n	8008c3c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008c34:	463b      	mov	r3, r7
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c3c:	463b      	mov	r3, r7
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d164      	bne.n	8008d10 <USB_EPStartXfer+0x384>
 8008c46:	1d3b      	adds	r3, r7, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	1d3b      	adds	r3, r7, #4
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	61fb      	str	r3, [r7, #28]
 8008c5e:	463b      	mov	r3, r7
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	011a      	lsls	r2, r3, #4
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USB_EPStartXfer+0x312>
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	801a      	strh	r2, [r3, #0]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e057      	b.n	8008d4e <USB_EPStartXfer+0x3c2>
 8008c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca4:	d817      	bhi.n	8008cd6 <USB_EPStartXfer+0x34a>
 8008ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d004      	beq.n	8008cc6 <USB_EPStartXfer+0x33a>
 8008cbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	029b      	lsls	r3, r3, #10
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	e03b      	b.n	8008d4e <USB_EPStartXfer+0x3c2>
 8008cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008cda:	095b      	lsrs	r3, r3, #5
 8008cdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <USB_EPStartXfer+0x36a>
 8008cec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008cf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	029b      	lsls	r3, r3, #10
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	801a      	strh	r2, [r3, #0]
 8008d0e:	e01e      	b.n	8008d4e <USB_EPStartXfer+0x3c2>
 8008d10:	463b      	mov	r3, r7
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	785b      	ldrb	r3, [r3, #1]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d119      	bne.n	8008d4e <USB_EPStartXfer+0x3c2>
 8008d1a:	1d3b      	adds	r3, r7, #4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d20:	1d3b      	adds	r3, r7, #4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	4413      	add	r3, r2
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
 8008d32:	463b      	mov	r3, r7
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	011a      	lsls	r2, r3, #4
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d42:	623b      	str	r3, [r7, #32]
 8008d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	6a3b      	ldr	r3, [r7, #32]
 8008d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d4e:	463b      	mov	r3, r7
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	891b      	ldrh	r3, [r3, #8]
 8008d54:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d58:	463b      	mov	r3, r7
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6959      	ldr	r1, [r3, #20]
 8008d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008d68:	1d38      	adds	r0, r7, #4
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	f001 f86c 	bl	8009e48 <USB_WritePMA>
 8008d70:	e33b      	b.n	80093ea <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d72:	463b      	mov	r3, r7
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	785b      	ldrb	r3, [r3, #1]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d164      	bne.n	8008e46 <USB_EPStartXfer+0x4ba>
 8008d7c:	1d3b      	adds	r3, r7, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d82:	1d3b      	adds	r3, r7, #4
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d90:	4413      	add	r3, r2
 8008d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d94:	463b      	mov	r3, r7
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	011a      	lsls	r2, r3, #4
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d9e:	4413      	add	r3, r2
 8008da0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d112      	bne.n	8008dd4 <USB_EPStartXfer+0x448>
 8008dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dbc:	801a      	strh	r2, [r3, #0]
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd0:	801a      	strh	r2, [r3, #0]
 8008dd2:	e057      	b.n	8008e84 <USB_EPStartXfer+0x4f8>
 8008dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dda:	d817      	bhi.n	8008e0c <USB_EPStartXfer+0x480>
 8008ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <USB_EPStartXfer+0x470>
 8008df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df6:	3301      	adds	r3, #1
 8008df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	029b      	lsls	r3, r3, #10
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	e03b      	b.n	8008e84 <USB_EPStartXfer+0x4f8>
 8008e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1a:	f003 031f 	and.w	r3, r3, #31
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <USB_EPStartXfer+0x4a0>
 8008e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e26:	3b01      	subs	r3, #1
 8008e28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	029b      	lsls	r3, r3, #10
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e42:	801a      	strh	r2, [r3, #0]
 8008e44:	e01e      	b.n	8008e84 <USB_EPStartXfer+0x4f8>
 8008e46:	463b      	mov	r3, r7
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d119      	bne.n	8008e84 <USB_EPStartXfer+0x4f8>
 8008e50:	1d3b      	adds	r3, r7, #4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	657b      	str	r3, [r7, #84]	; 0x54
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e64:	4413      	add	r3, r2
 8008e66:	657b      	str	r3, [r7, #84]	; 0x54
 8008e68:	463b      	mov	r3, r7
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	011a      	lsls	r2, r3, #4
 8008e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e72:	4413      	add	r3, r2
 8008e74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e78:	653b      	str	r3, [r7, #80]	; 0x50
 8008e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008e84:	463b      	mov	r3, r7
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	891b      	ldrh	r3, [r3, #8]
 8008e8a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6959      	ldr	r1, [r3, #20]
 8008e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008e9e:	1d38      	adds	r0, r7, #4
 8008ea0:	6800      	ldr	r0, [r0, #0]
 8008ea2:	f000 ffd1 	bl	8009e48 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695a      	ldr	r2, [r3, #20]
 8008eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008eb0:	441a      	add	r2, r3
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eb8:	463b      	mov	r3, r7
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6a1a      	ldr	r2, [r3, #32]
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d909      	bls.n	8008edc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008ec8:	463b      	mov	r3, r7
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ed2:	1ad2      	subs	r2, r2, r3
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	621a      	str	r2, [r3, #32]
 8008eda:	e008      	b.n	8008eee <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008edc:	463b      	mov	r3, r7
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d164      	bne.n	8008fc8 <USB_EPStartXfer+0x63c>
 8008efe:	1d3b      	adds	r3, r7, #4
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f12:	4413      	add	r3, r2
 8008f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f16:	463b      	mov	r3, r7
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	011a      	lsls	r2, r3, #4
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	4413      	add	r3, r2
 8008f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d112      	bne.n	8008f56 <USB_EPStartXfer+0x5ca>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f3a:	b29a      	uxth	r2, r3
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	801a      	strh	r2, [r3, #0]
 8008f54:	e054      	b.n	8009000 <USB_EPStartXfer+0x674>
 8008f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5c:	d817      	bhi.n	8008f8e <USB_EPStartXfer+0x602>
 8008f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <USB_EPStartXfer+0x5f2>
 8008f74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f78:	3301      	adds	r3, #1
 8008f7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	029b      	lsls	r3, r3, #10
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e038      	b.n	8009000 <USB_EPStartXfer+0x674>
 8008f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f92:	095b      	lsrs	r3, r3, #5
 8008f94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d104      	bne.n	8008fae <USB_EPStartXfer+0x622>
 8008fa4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	029b      	lsls	r3, r3, #10
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	801a      	strh	r2, [r3, #0]
 8008fc6:	e01b      	b.n	8009000 <USB_EPStartXfer+0x674>
 8008fc8:	463b      	mov	r3, r7
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d116      	bne.n	8009000 <USB_EPStartXfer+0x674>
 8008fd2:	1d3b      	adds	r3, r7, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe0:	4413      	add	r3, r2
 8008fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8008fe4:	463b      	mov	r3, r7
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	011a      	lsls	r2, r3, #4
 8008fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fee:	4413      	add	r3, r2
 8008ff0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ffe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009000:	463b      	mov	r3, r7
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	895b      	ldrh	r3, [r3, #10]
 8009006:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800900a:	463b      	mov	r3, r7
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6959      	ldr	r1, [r3, #20]
 8009010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009014:	b29b      	uxth	r3, r3
 8009016:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800901a:	1d38      	adds	r0, r7, #4
 800901c:	6800      	ldr	r0, [r0, #0]
 800901e:	f000 ff13 	bl	8009e48 <USB_WritePMA>
 8009022:	e1e2      	b.n	80093ea <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009024:	463b      	mov	r3, r7
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800902e:	1d3b      	adds	r3, r7, #4
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	463b      	mov	r3, r7
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	b29b      	uxth	r3, r3
 8009040:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009048:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800904c:	1d3b      	adds	r3, r7, #4
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	463b      	mov	r3, r7
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	441a      	add	r2, r3
 800905a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800906a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009072:	1d3b      	adds	r3, r7, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	663b      	str	r3, [r7, #96]	; 0x60
 8009078:	1d3b      	adds	r3, r7, #4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009086:	4413      	add	r3, r2
 8009088:	663b      	str	r3, [r7, #96]	; 0x60
 800908a:	463b      	mov	r3, r7
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	011a      	lsls	r2, r3, #4
 8009092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009094:	4413      	add	r3, r2
 8009096:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800909a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800909c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090a6:	463b      	mov	r3, r7
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	891b      	ldrh	r3, [r3, #8]
 80090ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090b0:	463b      	mov	r3, r7
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6959      	ldr	r1, [r3, #20]
 80090b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80090c0:	1d38      	adds	r0, r7, #4
 80090c2:	6800      	ldr	r0, [r0, #0]
 80090c4:	f000 fec0 	bl	8009e48 <USB_WritePMA>
 80090c8:	e18f      	b.n	80093ea <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090ca:	1d3b      	adds	r3, r7, #4
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	463b      	mov	r3, r7
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 808f 	beq.w	8009204 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80090ec:	463b      	mov	r3, r7
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d164      	bne.n	80091c0 <USB_EPStartXfer+0x834>
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	673b      	str	r3, [r7, #112]	; 0x70
 80090fc:	1d3b      	adds	r3, r7, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009104:	b29b      	uxth	r3, r3
 8009106:	461a      	mov	r2, r3
 8009108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800910a:	4413      	add	r3, r2
 800910c:	673b      	str	r3, [r7, #112]	; 0x70
 800910e:	463b      	mov	r3, r7
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	011a      	lsls	r2, r3, #4
 8009116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009118:	4413      	add	r3, r2
 800911a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800911e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d112      	bne.n	800914e <USB_EPStartXfer+0x7c2>
 8009128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	b29b      	uxth	r3, r3
 800912e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009132:	b29a      	uxth	r2, r3
 8009134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009146:	b29a      	uxth	r2, r3
 8009148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800914a:	801a      	strh	r2, [r3, #0]
 800914c:	e054      	b.n	80091f8 <USB_EPStartXfer+0x86c>
 800914e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009152:	2b3e      	cmp	r3, #62	; 0x3e
 8009154:	d817      	bhi.n	8009186 <USB_EPStartXfer+0x7fa>
 8009156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d004      	beq.n	8009176 <USB_EPStartXfer+0x7ea>
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	3301      	adds	r3, #1
 8009172:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29a      	uxth	r2, r3
 8009180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e038      	b.n	80091f8 <USB_EPStartXfer+0x86c>
 8009186:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800918a:	095b      	lsrs	r3, r3, #5
 800918c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009194:	f003 031f 	and.w	r3, r3, #31
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <USB_EPStartXfer+0x81a>
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	3b01      	subs	r3, #1
 80091a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80091a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	029b      	lsls	r3, r3, #10
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e01b      	b.n	80091f8 <USB_EPStartXfer+0x86c>
 80091c0:	463b      	mov	r3, r7
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d116      	bne.n	80091f8 <USB_EPStartXfer+0x86c>
 80091ca:	1d3b      	adds	r3, r7, #4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091d8:	4413      	add	r3, r2
 80091da:	67bb      	str	r3, [r7, #120]	; 0x78
 80091dc:	463b      	mov	r3, r7
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	011a      	lsls	r2, r3, #4
 80091e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091e6:	4413      	add	r3, r2
 80091e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091ec:	677b      	str	r3, [r7, #116]	; 0x74
 80091ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80091f8:	463b      	mov	r3, r7
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	895b      	ldrh	r3, [r3, #10]
 80091fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8009202:	e097      	b.n	8009334 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009204:	463b      	mov	r3, r7
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d168      	bne.n	80092e0 <USB_EPStartXfer+0x954>
 800920e:	1d3b      	adds	r3, r7, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921e:	b29b      	uxth	r3, r3
 8009220:	461a      	mov	r2, r3
 8009222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009226:	4413      	add	r3, r2
 8009228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800922c:	463b      	mov	r3, r7
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	011a      	lsls	r2, r3, #4
 8009234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009238:	4413      	add	r3, r2
 800923a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800923e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d112      	bne.n	800926e <USB_EPStartXfer+0x8e2>
 8009248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009252:	b29a      	uxth	r2, r3
 8009254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009256:	801a      	strh	r2, [r3, #0]
 8009258:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009266:	b29a      	uxth	r2, r3
 8009268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e05d      	b.n	800932a <USB_EPStartXfer+0x99e>
 800926e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009272:	2b3e      	cmp	r3, #62	; 0x3e
 8009274:	d817      	bhi.n	80092a6 <USB_EPStartXfer+0x91a>
 8009276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d004      	beq.n	8009296 <USB_EPStartXfer+0x90a>
 800928c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009290:	3301      	adds	r3, #1
 8009292:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800929a:	b29b      	uxth	r3, r3
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	b29a      	uxth	r2, r3
 80092a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092a2:	801a      	strh	r2, [r3, #0]
 80092a4:	e041      	b.n	800932a <USB_EPStartXfer+0x99e>
 80092a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092aa:	095b      	lsrs	r3, r3, #5
 80092ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <USB_EPStartXfer+0x93a>
 80092bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092c0:	3b01      	subs	r3, #1
 80092c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	029b      	lsls	r3, r3, #10
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092d8:	b29a      	uxth	r2, r3
 80092da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092dc:	801a      	strh	r2, [r3, #0]
 80092de:	e024      	b.n	800932a <USB_EPStartXfer+0x99e>
 80092e0:	463b      	mov	r3, r7
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	785b      	ldrb	r3, [r3, #1]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d11f      	bne.n	800932a <USB_EPStartXfer+0x99e>
 80092ea:	1d3b      	adds	r3, r7, #4
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	461a      	mov	r2, r3
 80092fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009302:	4413      	add	r3, r2
 8009304:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009308:	463b      	mov	r3, r7
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	011a      	lsls	r2, r3, #4
 8009310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009314:	4413      	add	r3, r2
 8009316:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800931a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800931e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009322:	b29a      	uxth	r2, r3
 8009324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009328:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800932a:	463b      	mov	r3, r7
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	891b      	ldrh	r3, [r3, #8]
 8009330:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009334:	463b      	mov	r3, r7
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6959      	ldr	r1, [r3, #20]
 800933a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800933e:	b29b      	uxth	r3, r3
 8009340:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8009344:	1d38      	adds	r0, r7, #4
 8009346:	6800      	ldr	r0, [r0, #0]
 8009348:	f000 fd7e 	bl	8009e48 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800934c:	463b      	mov	r3, r7
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d122      	bne.n	800939c <USB_EPStartXfer+0xa10>
 8009356:	1d3b      	adds	r3, r7, #4
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	463b      	mov	r3, r7
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009370:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009374:	1d3b      	adds	r3, r7, #4
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	441a      	add	r2, r3
 8009382:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800938a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800938e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009392:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009396:	b29b      	uxth	r3, r3
 8009398:	8013      	strh	r3, [r2, #0]
 800939a:	e026      	b.n	80093ea <USB_EPStartXfer+0xa5e>
 800939c:	463b      	mov	r3, r7
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	785b      	ldrb	r3, [r3, #1]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d121      	bne.n	80093ea <USB_EPStartXfer+0xa5e>
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	463b      	mov	r3, r7
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80093c4:	1d3b      	adds	r3, r7, #4
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	463b      	mov	r3, r7
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	441a      	add	r2, r3
 80093d2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80093d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093ea:	1d3b      	adds	r3, r7, #4
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	463b      	mov	r3, r7
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f107 020e 	add.w	r2, r7, #14
 8009400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009408:	8013      	strh	r3, [r2, #0]
 800940a:	f107 030e 	add.w	r3, r7, #14
 800940e:	f107 020e 	add.w	r2, r7, #14
 8009412:	8812      	ldrh	r2, [r2, #0]
 8009414:	f082 0210 	eor.w	r2, r2, #16
 8009418:	801a      	strh	r2, [r3, #0]
 800941a:	f107 030e 	add.w	r3, r7, #14
 800941e:	f107 020e 	add.w	r2, r7, #14
 8009422:	8812      	ldrh	r2, [r2, #0]
 8009424:	f082 0220 	eor.w	r2, r2, #32
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	1d3b      	adds	r3, r7, #4
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	463b      	mov	r3, r7
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	441a      	add	r2, r3
 8009438:	f107 030e 	add.w	r3, r7, #14
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800944a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]
 8009452:	e3b5      	b.n	8009bc0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009454:	463b      	mov	r3, r7
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	7b1b      	ldrb	r3, [r3, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 8090 	bne.w	8009580 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009460:	463b      	mov	r3, r7
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	699a      	ldr	r2, [r3, #24]
 8009466:	463b      	mov	r3, r7
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	429a      	cmp	r2, r3
 800946e:	d90e      	bls.n	800948e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8009470:	463b      	mov	r3, r7
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800947a:	463b      	mov	r3, r7
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009484:	1ad2      	subs	r2, r2, r3
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	619a      	str	r2, [r3, #24]
 800948c:	e008      	b.n	80094a0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800948e:	463b      	mov	r3, r7
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8009498:	463b      	mov	r3, r7
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2200      	movs	r2, #0
 800949e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80094a0:	1d3b      	adds	r3, r7, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094a8:	1d3b      	adds	r3, r7, #4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	461a      	mov	r2, r3
 80094b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094b8:	4413      	add	r3, r2
 80094ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094be:	463b      	mov	r3, r7
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	011a      	lsls	r2, r3, #4
 80094c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80094ca:	4413      	add	r3, r2
 80094cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d116      	bne.n	800950a <USB_EPStartXfer+0xb7e>
 80094dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009500:	b29a      	uxth	r2, r3
 8009502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e32c      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
 800950a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800950e:	2b3e      	cmp	r3, #62	; 0x3e
 8009510:	d818      	bhi.n	8009544 <USB_EPStartXfer+0xbb8>
 8009512:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800951c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <USB_EPStartXfer+0xba6>
 8009528:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800952c:	3301      	adds	r3, #1
 800952e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009532:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29a      	uxth	r2, r3
 800953c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009540:	801a      	strh	r2, [r3, #0]
 8009542:	e30f      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
 8009544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800954e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <USB_EPStartXfer+0xbd8>
 800955a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800955e:	3b01      	subs	r3, #1
 8009560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009568:	b29b      	uxth	r3, r3
 800956a:	029b      	lsls	r3, r3, #10
 800956c:	b29b      	uxth	r3, r3
 800956e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009576:	b29a      	uxth	r2, r3
 8009578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	e2f1      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009580:	463b      	mov	r3, r7
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	78db      	ldrb	r3, [r3, #3]
 8009586:	2b02      	cmp	r3, #2
 8009588:	f040 818f 	bne.w	80098aa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800958c:	463b      	mov	r3, r7
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d175      	bne.n	8009682 <USB_EPStartXfer+0xcf6>
 8009596:	1d3b      	adds	r3, r7, #4
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800959e:	1d3b      	adds	r3, r7, #4
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	461a      	mov	r2, r3
 80095aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095ae:	4413      	add	r3, r2
 80095b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80095b4:	463b      	mov	r3, r7
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	011a      	lsls	r2, r3, #4
 80095bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80095c0:	4413      	add	r3, r2
 80095c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80095c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095ca:	463b      	mov	r3, r7
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d116      	bne.n	8009602 <USB_EPStartXfer+0xc76>
 80095d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095e6:	801a      	strh	r2, [r3, #0]
 80095e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	e065      	b.n	80096ce <USB_EPStartXfer+0xd42>
 8009602:	463b      	mov	r3, r7
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b3e      	cmp	r3, #62	; 0x3e
 800960a:	d81a      	bhi.n	8009642 <USB_EPStartXfer+0xcb6>
 800960c:	463b      	mov	r3, r7
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	085b      	lsrs	r3, r3, #1
 8009614:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009618:	463b      	mov	r3, r7
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <USB_EPStartXfer+0xca4>
 8009626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800962a:	3301      	adds	r3, #1
 800962c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009634:	b29b      	uxth	r3, r3
 8009636:	029b      	lsls	r3, r3, #10
 8009638:	b29a      	uxth	r2, r3
 800963a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800963e:	801a      	strh	r2, [r3, #0]
 8009640:	e045      	b.n	80096ce <USB_EPStartXfer+0xd42>
 8009642:	463b      	mov	r3, r7
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	095b      	lsrs	r3, r3, #5
 800964a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800964e:	463b      	mov	r3, r7
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f003 031f 	and.w	r3, r3, #31
 8009658:	2b00      	cmp	r3, #0
 800965a:	d104      	bne.n	8009666 <USB_EPStartXfer+0xcda>
 800965c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009660:	3b01      	subs	r3, #1
 8009662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800966a:	b29b      	uxth	r3, r3
 800966c:	029b      	lsls	r3, r3, #10
 800966e:	b29b      	uxth	r3, r3
 8009670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009678:	b29a      	uxth	r2, r3
 800967a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800967e:	801a      	strh	r2, [r3, #0]
 8009680:	e025      	b.n	80096ce <USB_EPStartXfer+0xd42>
 8009682:	463b      	mov	r3, r7
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d120      	bne.n	80096ce <USB_EPStartXfer+0xd42>
 800968c:	1d3b      	adds	r3, r7, #4
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009694:	1d3b      	adds	r3, r7, #4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800969c:	b29b      	uxth	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096a4:	4413      	add	r3, r2
 80096a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096aa:	463b      	mov	r3, r7
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	011a      	lsls	r2, r3, #4
 80096b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80096b6:	4413      	add	r3, r2
 80096b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80096bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096c0:	463b      	mov	r3, r7
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	1d3b      	adds	r3, r7, #4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80096d6:	463b      	mov	r3, r7
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d175      	bne.n	80097cc <USB_EPStartXfer+0xe40>
 80096e0:	1d3b      	adds	r3, r7, #4
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096e8:	1d3b      	adds	r3, r7, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096f8:	4413      	add	r3, r2
 80096fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096fe:	463b      	mov	r3, r7
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	011a      	lsls	r2, r3, #4
 8009706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800970a:	4413      	add	r3, r2
 800970c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009714:	463b      	mov	r3, r7
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d116      	bne.n	800974c <USB_EPStartXfer+0xdc0>
 800971e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800972a:	b29a      	uxth	r2, r3
 800972c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009730:	801a      	strh	r2, [r3, #0]
 8009732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009742:	b29a      	uxth	r2, r3
 8009744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	e061      	b.n	8009810 <USB_EPStartXfer+0xe84>
 800974c:	463b      	mov	r3, r7
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	2b3e      	cmp	r3, #62	; 0x3e
 8009754:	d81a      	bhi.n	800978c <USB_EPStartXfer+0xe00>
 8009756:	463b      	mov	r3, r7
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	085b      	lsrs	r3, r3, #1
 800975e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009762:	463b      	mov	r3, r7
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d004      	beq.n	800977a <USB_EPStartXfer+0xdee>
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	3301      	adds	r3, #1
 8009776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800977a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800977e:	b29b      	uxth	r3, r3
 8009780:	029b      	lsls	r3, r3, #10
 8009782:	b29a      	uxth	r2, r3
 8009784:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009788:	801a      	strh	r2, [r3, #0]
 800978a:	e041      	b.n	8009810 <USB_EPStartXfer+0xe84>
 800978c:	463b      	mov	r3, r7
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009798:	463b      	mov	r3, r7
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	f003 031f 	and.w	r3, r3, #31
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d104      	bne.n	80097b0 <USB_EPStartXfer+0xe24>
 80097a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097aa:	3b01      	subs	r3, #1
 80097ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	029b      	lsls	r3, r3, #10
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	e021      	b.n	8009810 <USB_EPStartXfer+0xe84>
 80097cc:	463b      	mov	r3, r7
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	785b      	ldrb	r3, [r3, #1]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d11c      	bne.n	8009810 <USB_EPStartXfer+0xe84>
 80097d6:	1d3b      	adds	r3, r7, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097de:	b29b      	uxth	r3, r3
 80097e0:	461a      	mov	r2, r3
 80097e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097e6:	4413      	add	r3, r2
 80097e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097ec:	463b      	mov	r3, r7
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	011a      	lsls	r2, r3, #4
 80097f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097f8:	4413      	add	r3, r2
 80097fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009802:	463b      	mov	r3, r7
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	b29a      	uxth	r2, r3
 800980a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800980e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009810:	463b      	mov	r3, r7
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 81a4 	beq.w	8009b64 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	463b      	mov	r3, r7
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009830:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <USB_EPStartXfer+0xebc>
 800983c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10d      	bne.n	8009864 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009848:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800984c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 8187 	bne.w	8009b64 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009856:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800985a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	f040 8180 	bne.w	8009b64 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009864:	1d3b      	adds	r3, r7, #4
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	463b      	mov	r3, r7
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	b29b      	uxth	r3, r3
 8009876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800987a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009882:	1d3b      	adds	r3, r7, #4
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	463b      	mov	r3, r7
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	441a      	add	r2, r3
 8009890:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8013      	strh	r3, [r2, #0]
 80098a8:	e15c      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80098aa:	463b      	mov	r3, r7
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	78db      	ldrb	r3, [r3, #3]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f040 8155 	bne.w	8009b60 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80098b6:	463b      	mov	r3, r7
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	463b      	mov	r3, r7
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d90e      	bls.n	80098e4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80098c6:	463b      	mov	r3, r7
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80098d0:	463b      	mov	r3, r7
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	463b      	mov	r3, r7
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	619a      	str	r2, [r3, #24]
 80098e2:	e008      	b.n	80098f6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80098e4:	463b      	mov	r3, r7
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80098ee:	463b      	mov	r3, r7
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80098f6:	463b      	mov	r3, r7
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d16f      	bne.n	80099e0 <USB_EPStartXfer+0x1054>
 8009900:	1d3b      	adds	r3, r7, #4
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009908:	1d3b      	adds	r3, r7, #4
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009918:	4413      	add	r3, r2
 800991a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800991e:	463b      	mov	r3, r7
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	011a      	lsls	r2, r3, #4
 8009926:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800992a:	4413      	add	r3, r2
 800992c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009934:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009938:	2b00      	cmp	r3, #0
 800993a:	d116      	bne.n	800996a <USB_EPStartXfer+0xfde>
 800993c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29b      	uxth	r3, r3
 8009944:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009948:	b29a      	uxth	r2, r3
 800994a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800995c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009960:	b29a      	uxth	r2, r3
 8009962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e05f      	b.n	8009a2a <USB_EPStartXfer+0x109e>
 800996a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800996e:	2b3e      	cmp	r3, #62	; 0x3e
 8009970:	d818      	bhi.n	80099a4 <USB_EPStartXfer+0x1018>
 8009972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009976:	085b      	lsrs	r3, r3, #1
 8009978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800997c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <USB_EPStartXfer+0x1006>
 8009988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800998c:	3301      	adds	r3, #1
 800998e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009996:	b29b      	uxth	r3, r3
 8009998:	029b      	lsls	r3, r3, #10
 800999a:	b29a      	uxth	r2, r3
 800999c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	e042      	b.n	8009a2a <USB_EPStartXfer+0x109e>
 80099a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099a8:	095b      	lsrs	r3, r3, #5
 80099aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <USB_EPStartXfer+0x1038>
 80099ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099be:	3b01      	subs	r3, #1
 80099c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	029b      	lsls	r3, r3, #10
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80099dc:	801a      	strh	r2, [r3, #0]
 80099de:	e024      	b.n	8009a2a <USB_EPStartXfer+0x109e>
 80099e0:	463b      	mov	r3, r7
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d11f      	bne.n	8009a2a <USB_EPStartXfer+0x109e>
 80099ea:	1d3b      	adds	r3, r7, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099f2:	1d3b      	adds	r3, r7, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	461a      	mov	r2, r3
 80099fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a02:	4413      	add	r3, r2
 8009a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a08:	463b      	mov	r3, r7
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	011a      	lsls	r2, r3, #4
 8009a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a14:	4413      	add	r3, r2
 8009a16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a28:	801a      	strh	r2, [r3, #0]
 8009a2a:	1d3b      	adds	r3, r7, #4
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a32:	463b      	mov	r3, r7
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	785b      	ldrb	r3, [r3, #1]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d16f      	bne.n	8009b1c <USB_EPStartXfer+0x1190>
 8009a3c:	1d3b      	adds	r3, r7, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a44:	1d3b      	adds	r3, r7, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	461a      	mov	r2, r3
 8009a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a54:	4413      	add	r3, r2
 8009a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	011a      	lsls	r2, r3, #4
 8009a62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a66:	4413      	add	r3, r2
 8009a68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d116      	bne.n	8009aa6 <USB_EPStartXfer+0x111a>
 8009a78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009aa2:	801a      	strh	r2, [r3, #0]
 8009aa4:	e05e      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
 8009aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aaa:	2b3e      	cmp	r3, #62	; 0x3e
 8009aac:	d818      	bhi.n	8009ae0 <USB_EPStartXfer+0x1154>
 8009aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ab2:	085b      	lsrs	r3, r3, #1
 8009ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <USB_EPStartXfer+0x1142>
 8009ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	029b      	lsls	r3, r3, #10
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e041      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
 8009ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae4:	095b      	lsrs	r3, r3, #5
 8009ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d104      	bne.n	8009b00 <USB_EPStartXfer+0x1174>
 8009af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afa:	3b01      	subs	r3, #1
 8009afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	029b      	lsls	r3, r3, #10
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009b18:	801a      	strh	r2, [r3, #0]
 8009b1a:	e023      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d11e      	bne.n	8009b64 <USB_EPStartXfer+0x11d8>
 8009b26:	1d3b      	adds	r3, r7, #4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b36:	4413      	add	r3, r2
 8009b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	011a      	lsls	r2, r3, #4
 8009b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b48:	4413      	add	r3, r2
 8009b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b5c:	801a      	strh	r2, [r3, #0]
 8009b5e:	e001      	b.n	8009b64 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e02e      	b.n	8009bc2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b64:	1d3b      	adds	r3, r7, #4
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	463b      	mov	r3, r7
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009b82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009b8e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009b9a:	1d3b      	adds	r3, r7, #4
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	463b      	mov	r3, r7
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	441a      	add	r2, r3
 8009ba8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d020      	beq.n	8009c20 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf4:	81bb      	strh	r3, [r7, #12]
 8009bf6:	89bb      	ldrh	r3, [r7, #12]
 8009bf8:	f083 0310 	eor.w	r3, r3, #16
 8009bfc:	81bb      	strh	r3, [r7, #12]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	441a      	add	r2, r3
 8009c08:	89bb      	ldrh	r3, [r7, #12]
 8009c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	8013      	strh	r3, [r2, #0]
 8009c1e:	e01f      	b.n	8009c60 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4413      	add	r3, r2
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c36:	81fb      	strh	r3, [r7, #14]
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c3e:	81fb      	strh	r3, [r7, #14]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	441a      	add	r2, r3
 8009c4a:	89fb      	ldrh	r3, [r7, #14]
 8009c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr

08009c6c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	7b1b      	ldrb	r3, [r3, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f040 809d 	bne.w	8009dba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d04c      	beq.n	8009d22 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	823b      	strh	r3, [r7, #16]
 8009c96:	8a3b      	ldrh	r3, [r7, #16]
 8009c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01b      	beq.n	8009cd8 <USB_EPClearStall+0x6c>
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb6:	81fb      	strh	r3, [r7, #14]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	441a      	add	r2, r3
 8009cc2:	89fb      	ldrh	r3, [r7, #14]
 8009cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	78db      	ldrb	r3, [r3, #3]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d06c      	beq.n	8009dba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf6:	81bb      	strh	r3, [r7, #12]
 8009cf8:	89bb      	ldrh	r3, [r7, #12]
 8009cfa:	f083 0320 	eor.w	r3, r3, #32
 8009cfe:	81bb      	strh	r3, [r7, #12]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	441a      	add	r2, r3
 8009d0a:	89bb      	ldrh	r3, [r7, #12]
 8009d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	8013      	strh	r3, [r2, #0]
 8009d20:	e04b      	b.n	8009dba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	82fb      	strh	r3, [r7, #22]
 8009d30:	8afb      	ldrh	r3, [r7, #22]
 8009d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01b      	beq.n	8009d72 <USB_EPClearStall+0x106>
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d50:	82bb      	strh	r3, [r7, #20]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	441a      	add	r2, r3
 8009d5c:	8abb      	ldrh	r3, [r7, #20]
 8009d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d88:	827b      	strh	r3, [r7, #18]
 8009d8a:	8a7b      	ldrh	r3, [r7, #18]
 8009d8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d90:	827b      	strh	r3, [r7, #18]
 8009d92:	8a7b      	ldrh	r3, [r7, #18]
 8009d94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d98:	827b      	strh	r3, [r7, #18]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	441a      	add	r2, r3
 8009da4:	8a7b      	ldrh	r3, [r7, #18]
 8009da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	371c      	adds	r7, #28
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr

08009dc6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d103      	bne.n	8009de0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2280      	movs	r2, #128	; 0x80
 8009ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr

08009dec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009e26:	68fb      	ldr	r3, [r7, #12]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr

08009e32 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr

08009e48 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b08d      	sub	sp, #52	; 0x34
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4611      	mov	r1, r2
 8009e54:	461a      	mov	r2, r3
 8009e56:	460b      	mov	r3, r1
 8009e58:	80fb      	strh	r3, [r7, #6]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009e5e:	88bb      	ldrh	r3, [r7, #4]
 8009e60:	3301      	adds	r3, #1
 8009e62:	085b      	lsrs	r3, r3, #1
 8009e64:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	005a      	lsls	r2, r3, #1
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e80:	e01e      	b.n	8009ec0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	3302      	adds	r3, #2
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1dd      	bne.n	8009e82 <USB_WritePMA+0x3a>
  }
}
 8009ec6:	bf00      	nop
 8009ec8:	bf00      	nop
 8009eca:	3734      	adds	r7, #52	; 0x34
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b08b      	sub	sp, #44	; 0x2c
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	4611      	mov	r1, r2
 8009ede:	461a      	mov	r2, r3
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	80fb      	strh	r3, [r7, #6]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009ee8:	88bb      	ldrh	r3, [r7, #4]
 8009eea:	085b      	lsrs	r3, r3, #1
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009ef8:	88fb      	ldrh	r3, [r7, #6]
 8009efa:	005a      	lsls	r2, r3, #1
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f04:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0a:	e01b      	b.n	8009f44 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	3302      	adds	r3, #2
 8009f18:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	3301      	adds	r3, #1
 8009f26:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	3301      	adds	r3, #1
 8009f36:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	3b01      	subs	r3, #1
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e0      	bne.n	8009f0c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009f4a:	88bb      	ldrh	r3, [r7, #4]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009f56:	6a3b      	ldr	r3, [r7, #32]
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	701a      	strb	r2, [r3, #0]
  }
}
 8009f66:	bf00      	nop
 8009f68:	372c      	adds	r7, #44	; 0x2c
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bc80      	pop	{r7}
 8009f6e:	4770      	bx	lr

08009f70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7c1b      	ldrb	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d115      	bne.n	8009fb4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	2181      	movs	r1, #129	; 0x81
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f002 f816 	bl	800bfc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 f80c 	bl	800bfc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009fb2:	e012      	b.n	8009fda <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	2181      	movs	r1, #129	; 0x81
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f002 f801 	bl	800bfc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009fc6:	2340      	movs	r3, #64	; 0x40
 8009fc8:	2202      	movs	r2, #2
 8009fca:	2101      	movs	r1, #1
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fff8 	bl	800bfc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009fda:	2308      	movs	r3, #8
 8009fdc:	2203      	movs	r2, #3
 8009fde:	2182      	movs	r1, #130	; 0x82
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 ffee 	bl	800bfc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009fec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ff0:	f002 f90e 	bl	800c210 <USBD_static_malloc>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a006:	2301      	movs	r3, #1
 800a008:	73fb      	strb	r3, [r7, #15]
 800a00a:	e026      	b.n	800a05a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a012:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2200      	movs	r2, #0
 800a022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7c1b      	ldrb	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d109      	bne.n	800a04a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a040:	2101      	movs	r1, #1
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 f8ae 	bl	800c1a4 <USBD_LL_PrepareReceive>
 800a048:	e007      	b.n	800a05a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a050:	2340      	movs	r3, #64	; 0x40
 800a052:	2101      	movs	r1, #1
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f002 f8a5 	bl	800c1a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a074:	2181      	movs	r1, #129	; 0x81
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f001 ffc9 	bl	800c00e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a082:	2101      	movs	r1, #1
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 ffc2 	bl	800c00e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a092:	2182      	movs	r1, #130	; 0x82
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f001 ffba 	bl	800c00e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00e      	beq.n	800a0c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f002 f8b4 	bl	800c228 <USBD_static_free>
    pdev->pClassData = NULL;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d039      	beq.n	800a170 <USBD_CDC_Setup+0x9e>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d17f      	bne.n	800a200 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	88db      	ldrh	r3, [r3, #6]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d029      	beq.n	800a15c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	b25b      	sxtb	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da11      	bge.n	800a136 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a11e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	88d2      	ldrh	r2, [r2, #6]
 800a124:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a126:	6939      	ldr	r1, [r7, #16]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	88db      	ldrh	r3, [r3, #6]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fa09 	bl	800b546 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a134:	e06b      	b.n	800a20e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	785a      	ldrb	r2, [r3, #1]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	88db      	ldrh	r3, [r3, #6]
 800a144:	b2da      	uxtb	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a14c:	6939      	ldr	r1, [r7, #16]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	88db      	ldrh	r3, [r3, #6]
 800a152:	461a      	mov	r2, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 fa24 	bl	800b5a2 <USBD_CtlPrepareRx>
      break;
 800a15a:	e058      	b.n	800a20e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	7850      	ldrb	r0, [r2, #1]
 800a168:	2200      	movs	r2, #0
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	4798      	blx	r3
      break;
 800a16e:	e04e      	b.n	800a20e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b0b      	cmp	r3, #11
 800a176:	d02e      	beq.n	800a1d6 <USBD_CDC_Setup+0x104>
 800a178:	2b0b      	cmp	r3, #11
 800a17a:	dc38      	bgt.n	800a1ee <USBD_CDC_Setup+0x11c>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <USBD_CDC_Setup+0xb4>
 800a180:	2b0a      	cmp	r3, #10
 800a182:	d014      	beq.n	800a1ae <USBD_CDC_Setup+0xdc>
 800a184:	e033      	b.n	800a1ee <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a18c:	2b03      	cmp	r3, #3
 800a18e:	d107      	bne.n	800a1a0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	2202      	movs	r2, #2
 800a196:	4619      	mov	r1, r3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f001 f9d4 	bl	800b546 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a19e:	e02e      	b.n	800a1fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f001 f965 	bl	800b472 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a1ac:	e027      	b.n	800a1fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d107      	bne.n	800a1c8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a1b8:	f107 030f 	add.w	r3, r7, #15
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f9c0 	bl	800b546 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a1c6:	e01a      	b.n	800a1fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f951 	bl	800b472 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a1d4:	e013      	b.n	800a1fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d00d      	beq.n	800a1fc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 f945 	bl	800b472 <USBD_CtlError>
            ret = USBD_FAIL;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a1ec:	e006      	b.n	800a1fc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 f93e 	bl	800b472 <USBD_CtlError>
          ret = USBD_FAIL;
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a1fa:	e000      	b.n	800a1fe <USBD_CDC_Setup+0x12c>
          break;
 800a1fc:	bf00      	nop
      }
      break;
 800a1fe:	e006      	b.n	800a20e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 f935 	bl	800b472 <USBD_CtlError>
      ret = USBD_FAIL;
 800a208:	2302      	movs	r3, #2
 800a20a:	75fb      	strb	r3, [r7, #23]
      break;
 800a20c:	bf00      	nop
  }

  return ret;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a232:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d03a      	beq.n	800a2b4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	440b      	add	r3, r1
 800a24c:	331c      	adds	r3, #28
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d029      	beq.n	800a2a8 <USBD_CDC_DataIn+0x90>
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	331c      	adds	r3, #28
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	78f9      	ldrb	r1, [r7, #3]
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	460b      	mov	r3, r1
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	440b      	add	r3, r1
 800a270:	00db      	lsls	r3, r3, #3
 800a272:	4403      	add	r3, r0
 800a274:	3338      	adds	r3, #56	; 0x38
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	fbb2 f1f3 	udiv	r1, r2, r3
 800a27c:	fb03 f301 	mul.w	r3, r3, r1
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d110      	bne.n	800a2a8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	440b      	add	r3, r1
 800a294:	331c      	adds	r3, #28
 800a296:	2200      	movs	r2, #0
 800a298:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a29a:	78f9      	ldrb	r1, [r7, #3]
 800a29c:	2300      	movs	r3, #0
 800a29e:	2200      	movs	r2, #0
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 ff5c 	bl	800c15e <USBD_LL_Transmit>
 800a2a6:	e003      	b.n	800a2b0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e000      	b.n	800a2b6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a2b4:	2302      	movs	r3, #2
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 ff87 	bl	800c1ea <USBD_LL_GetRxDataSize>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00d      	beq.n	800a30a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a302:	4611      	mov	r1, r2
 800a304:	4798      	blx	r3

    return USBD_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	e000      	b.n	800a30c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a30a:	2302      	movs	r3, #2
  }
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a322:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d015      	beq.n	800a35a <USBD_CDC_EP0_RxReady+0x46>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a334:	2bff      	cmp	r3, #255	; 0xff
 800a336:	d010      	beq.n	800a35a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a346:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a34e:	b292      	uxth	r2, r2
 800a350:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	22ff      	movs	r2, #255	; 0xff
 800a356:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2243      	movs	r2, #67	; 0x43
 800a370:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a374:	4618      	mov	r0, r3
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	200000a8 	.word	0x200000a8

0800a384 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2243      	movs	r2, #67	; 0x43
 800a390:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a392:	4b03      	ldr	r3, [pc, #12]	; (800a3a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	bc80      	pop	{r7}
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	20000064 	.word	0x20000064

0800a3a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2243      	movs	r2, #67	; 0x43
 800a3b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a3b2:	4b03      	ldr	r3, [pc, #12]	; (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bc80      	pop	{r7}
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	200000ec 	.word	0x200000ec

0800a3c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bc80      	pop	{r7}
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000020 	.word	0x20000020

0800a3e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d005      	beq.n	800a404 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bc80      	pop	{r7}
 800a40e:	4770      	bx	lr

0800a410 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a424:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a42e:	88fa      	ldrh	r2, [r7, #6]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr

0800a442 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a452:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	bc80      	pop	{r7}
 800a466:	4770      	bx	lr

0800a468 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d01c      	beq.n	800a4bc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d115      	bne.n	800a4b8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2181      	movs	r1, #129	; 0x81
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 fe55 	bl	800c15e <USBD_LL_Transmit>

      return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e002      	b.n	800a4be <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e000      	b.n	800a4be <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a4bc:	2302      	movs	r3, #2
  }
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d017      	beq.n	800a510 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	7c1b      	ldrb	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fe55 	bl	800c1a4 <USBD_LL_PrepareReceive>
 800a4fa:	e007      	b.n	800a50c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a502:	2340      	movs	r3, #64	; 0x40
 800a504:	2101      	movs	r1, #1
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 fe4c 	bl	800c1a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	e000      	b.n	800a512 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a510:	2302      	movs	r3, #2
  }
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	4613      	mov	r3, r2
 800a526:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d101      	bne.n	800a532 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a52e:	2302      	movs	r3, #2
 800a530:	e01a      	b.n	800a568 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d003      	beq.n	800a544 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	79fa      	ldrb	r2, [r7, #7]
 800a55e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f001 fcb9 	bl	800bed8 <USBD_LL_Init>

  return USBD_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d006      	beq.n	800a592 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
 800a590:	e001      	b.n	800a596 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a592:	2302      	movs	r3, #2
 800a594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a596:	7bfb      	ldrb	r3, [r7, #15]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bc80      	pop	{r7}
 800a5a0:	4770      	bx	lr

0800a5a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fcee 	bl	800bf8c <USBD_LL_Start>

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bc80      	pop	{r7}
 800a5cc:	4770      	bx	lr

0800a5ce <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a5da:	2302      	movs	r3, #2
 800a5dc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00c      	beq.n	800a602 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	78fa      	ldrb	r2, [r7, #3]
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	4798      	blx	r3
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a602:	7bfb      	ldrb	r3, [r7, #15]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4611      	mov	r1, r2
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	4798      	blx	r3

  return USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b082      	sub	sp, #8
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	4618      	mov	r0, r3
 800a646:	f000 fed8 	bl	800b3fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a658:	461a      	mov	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a666:	f003 031f 	and.w	r3, r3, #31
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d016      	beq.n	800a69c <USBD_LL_SetupStage+0x6a>
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d81c      	bhi.n	800a6ac <USBD_LL_SetupStage+0x7a>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <USBD_LL_SetupStage+0x4a>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d008      	beq.n	800a68c <USBD_LL_SetupStage+0x5a>
 800a67a:	e017      	b.n	800a6ac <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f9cb 	bl	800aa20 <USBD_StdDevReq>
      break;
 800a68a:	e01a      	b.n	800a6c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fa2d 	bl	800aaf4 <USBD_StdItfReq>
      break;
 800a69a:	e012      	b.n	800a6c2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa6d 	bl	800ab84 <USBD_StdEPReq>
      break;
 800a6aa:	e00a      	b.n	800a6c2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a6b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 fcc6 	bl	800c04c <USBD_LL_StallEP>
      break;
 800a6c0:	bf00      	nop
  }

  return USBD_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6da:	7afb      	ldrb	r3, [r7, #11]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d14b      	bne.n	800a778 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d134      	bne.n	800a75c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d919      	bls.n	800a732 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	68da      	ldr	r2, [r3, #12]
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a714:	429a      	cmp	r2, r3
 800a716:	d203      	bcs.n	800a720 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	e002      	b.n	800a726 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a724:	b29b      	uxth	r3, r3
 800a726:	461a      	mov	r2, r3
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 ff57 	bl	800b5de <USBD_CtlContinueRx>
 800a730:	e038      	b.n	800a7a4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00a      	beq.n	800a754 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a744:	2b03      	cmp	r3, #3
 800a746:	d105      	bne.n	800a754 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 ff54 	bl	800b602 <USBD_CtlSendStatus>
 800a75a:	e023      	b.n	800a7a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a762:	2b05      	cmp	r3, #5
 800a764:	d11e      	bne.n	800a7a4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a76e:	2100      	movs	r1, #0
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f001 fc6b 	bl	800c04c <USBD_LL_StallEP>
 800a776:	e015      	b.n	800a7a4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00d      	beq.n	800a7a0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d108      	bne.n	800a7a0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	7afa      	ldrb	r2, [r7, #11]
 800a798:	4611      	mov	r1, r2
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	4798      	blx	r3
 800a79e:	e001      	b.n	800a7a4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	e000      	b.n	800a7a6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	607a      	str	r2, [r7, #4]
 800a7ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a7bc:	7afb      	ldrb	r3, [r7, #11]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d17f      	bne.n	800a8c2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3314      	adds	r3, #20
 800a7c6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d15c      	bne.n	800a88c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d915      	bls.n	800a80a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	68da      	ldr	r2, [r3, #12]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	1ad2      	subs	r2, r2, r3
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6879      	ldr	r1, [r7, #4]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 fec1 	bl	800b57e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	2200      	movs	r2, #0
 800a800:	2100      	movs	r1, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f001 fcce 	bl	800c1a4 <USBD_LL_PrepareReceive>
 800a808:	e04e      	b.n	800a8a8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	6912      	ldr	r2, [r2, #16]
 800a812:	fbb3 f1f2 	udiv	r1, r3, r2
 800a816:	fb02 f201 	mul.w	r2, r2, r1
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d11c      	bne.n	800a85a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a828:	429a      	cmp	r2, r3
 800a82a:	d316      	bcc.n	800a85a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a836:	429a      	cmp	r2, r3
 800a838:	d20f      	bcs.n	800a85a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a83a:	2200      	movs	r2, #0
 800a83c:	2100      	movs	r1, #0
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fe9d 	bl	800b57e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a84c:	2300      	movs	r3, #0
 800a84e:	2200      	movs	r2, #0
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f001 fca6 	bl	800c1a4 <USBD_LL_PrepareReceive>
 800a858:	e026      	b.n	800a8a8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d105      	bne.n	800a87c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a876:	68db      	ldr	r3, [r3, #12]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a87c:	2180      	movs	r1, #128	; 0x80
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f001 fbe4 	bl	800c04c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 fecf 	bl	800b628 <USBD_CtlReceiveStatus>
 800a88a:	e00d      	b.n	800a8a8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a892:	2b04      	cmp	r3, #4
 800a894:	d004      	beq.n	800a8a0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d103      	bne.n	800a8a8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a8a0:	2180      	movs	r1, #128	; 0x80
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f001 fbd2 	bl	800c04c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d11d      	bne.n	800a8ee <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff fe81 	bl	800a5ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8c0:	e015      	b.n	800a8ee <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c8:	695b      	ldr	r3, [r3, #20]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00d      	beq.n	800a8ea <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d108      	bne.n	800a8ea <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8de:	695b      	ldr	r3, [r3, #20]
 800a8e0:	7afa      	ldrb	r2, [r7, #11]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	4798      	blx	r3
 800a8e8:	e001      	b.n	800a8ee <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e000      	b.n	800a8f0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a900:	2340      	movs	r3, #64	; 0x40
 800a902:	2200      	movs	r2, #0
 800a904:	2100      	movs	r1, #0
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 fb5b 	bl	800bfc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2240      	movs	r2, #64	; 0x40
 800a918:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a91c:	2340      	movs	r3, #64	; 0x40
 800a91e:	2200      	movs	r2, #0
 800a920:	2180      	movs	r1, #128	; 0x80
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f001 fb4d 	bl	800bfc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2240      	movs	r2, #64	; 0x40
 800a932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6852      	ldr	r2, [r2, #4]
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	4611      	mov	r1, r2
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	4798      	blx	r3
  }

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	bc80      	pop	{r7}
 800a996:	4770      	bx	lr

0800a998 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bc80      	pop	{r7}
 800a9be:	4770      	bx	lr

0800a9c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d105      	bne.n	800a9de <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bc80      	pop	{r7}
 800a9e8:	4770      	bx	lr

0800a9ea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f8:	2b03      	cmp	r3, #3
 800a9fa:	d10b      	bne.n	800aa14 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d005      	beq.n	800aa14 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa36:	2b40      	cmp	r3, #64	; 0x40
 800aa38:	d005      	beq.n	800aa46 <USBD_StdDevReq+0x26>
 800aa3a:	2b40      	cmp	r3, #64	; 0x40
 800aa3c:	d84f      	bhi.n	800aade <USBD_StdDevReq+0xbe>
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <USBD_StdDevReq+0x36>
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	d14b      	bne.n	800aade <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	4798      	blx	r3
      break;
 800aa54:	e048      	b.n	800aae8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b09      	cmp	r3, #9
 800aa5c:	d839      	bhi.n	800aad2 <USBD_StdDevReq+0xb2>
 800aa5e:	a201      	add	r2, pc, #4	; (adr r2, 800aa64 <USBD_StdDevReq+0x44>)
 800aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aac9 	.word	0x0800aac9
 800aa6c:	0800aad3 	.word	0x0800aad3
 800aa70:	0800aabf 	.word	0x0800aabf
 800aa74:	0800aad3 	.word	0x0800aad3
 800aa78:	0800aa97 	.word	0x0800aa97
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aad3 	.word	0x0800aad3
 800aa84:	0800aaab 	.word	0x0800aaab
 800aa88:	0800aaa1 	.word	0x0800aaa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f9dc 	bl	800ae4c <USBD_GetDescriptor>
          break;
 800aa94:	e022      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fb3f 	bl	800b11c <USBD_SetAddress>
          break;
 800aa9e:	e01d      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fb7e 	bl	800b1a4 <USBD_SetConfig>
          break;
 800aaa8:	e018      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 fc07 	bl	800b2c0 <USBD_GetConfig>
          break;
 800aab2:	e013      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fc37 	bl	800b32a <USBD_GetStatus>
          break;
 800aabc:	e00e      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aabe:	6839      	ldr	r1, [r7, #0]
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 fc65 	bl	800b390 <USBD_SetFeature>
          break;
 800aac6:	e009      	b.n	800aadc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fc74 	bl	800b3b8 <USBD_ClrFeature>
          break;
 800aad0:	e004      	b.n	800aadc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fccc 	bl	800b472 <USBD_CtlError>
          break;
 800aada:	bf00      	nop
      }
      break;
 800aadc:	e004      	b.n	800aae8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fcc6 	bl	800b472 <USBD_CtlError>
      break;
 800aae6:	bf00      	nop
  }

  return ret;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop

0800aaf4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d005      	beq.n	800ab1a <USBD_StdItfReq+0x26>
 800ab0e:	2b40      	cmp	r3, #64	; 0x40
 800ab10:	d82e      	bhi.n	800ab70 <USBD_StdItfReq+0x7c>
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <USBD_StdItfReq+0x26>
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d12a      	bne.n	800ab70 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab20:	3b01      	subs	r3, #1
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d81d      	bhi.n	800ab62 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	889b      	ldrh	r3, [r3, #4]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d813      	bhi.n	800ab58 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	88db      	ldrh	r3, [r3, #6]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d110      	bne.n	800ab6c <USBD_StdItfReq+0x78>
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10d      	bne.n	800ab6c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fd56 	bl	800b602 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab56:	e009      	b.n	800ab6c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fc89 	bl	800b472 <USBD_CtlError>
          break;
 800ab60:	e004      	b.n	800ab6c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fc84 	bl	800b472 <USBD_CtlError>
          break;
 800ab6a:	e000      	b.n	800ab6e <USBD_StdItfReq+0x7a>
          break;
 800ab6c:	bf00      	nop
      }
      break;
 800ab6e:	e004      	b.n	800ab7a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ab70:	6839      	ldr	r1, [r7, #0]
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fc7d 	bl	800b472 <USBD_CtlError>
      break;
 800ab78:	bf00      	nop
  }

  return USBD_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	889b      	ldrh	r3, [r3, #4]
 800ab96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	d007      	beq.n	800abb4 <USBD_StdEPReq+0x30>
 800aba4:	2b40      	cmp	r3, #64	; 0x40
 800aba6:	f200 8146 	bhi.w	800ae36 <USBD_StdEPReq+0x2b2>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <USBD_StdEPReq+0x40>
 800abae:	2b20      	cmp	r3, #32
 800abb0:	f040 8141 	bne.w	800ae36 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	4798      	blx	r3
      break;
 800abc2:	e13d      	b.n	800ae40 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abcc:	2b20      	cmp	r3, #32
 800abce:	d10a      	bne.n	800abe6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	e12d      	b.n	800ae42 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	785b      	ldrb	r3, [r3, #1]
 800abea:	2b03      	cmp	r3, #3
 800abec:	d007      	beq.n	800abfe <USBD_StdEPReq+0x7a>
 800abee:	2b03      	cmp	r3, #3
 800abf0:	f300 811b 	bgt.w	800ae2a <USBD_StdEPReq+0x2a6>
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d072      	beq.n	800acde <USBD_StdEPReq+0x15a>
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d03a      	beq.n	800ac72 <USBD_StdEPReq+0xee>
 800abfc:	e115      	b.n	800ae2a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d002      	beq.n	800ac0e <USBD_StdEPReq+0x8a>
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d015      	beq.n	800ac38 <USBD_StdEPReq+0xb4>
 800ac0c:	e02b      	b.n	800ac66 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00c      	beq.n	800ac2e <USBD_StdEPReq+0xaa>
 800ac14:	7bbb      	ldrb	r3, [r7, #14]
 800ac16:	2b80      	cmp	r3, #128	; 0x80
 800ac18:	d009      	beq.n	800ac2e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f001 fa14 	bl	800c04c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac24:	2180      	movs	r1, #128	; 0x80
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 fa10 	bl	800c04c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac2c:	e020      	b.n	800ac70 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fc1e 	bl	800b472 <USBD_CtlError>
              break;
 800ac36:	e01b      	b.n	800ac70 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	885b      	ldrh	r3, [r3, #2]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10e      	bne.n	800ac5e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <USBD_StdEPReq+0xda>
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	2b80      	cmp	r3, #128	; 0x80
 800ac4a:	d008      	beq.n	800ac5e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	88db      	ldrh	r3, [r3, #6]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d104      	bne.n	800ac5e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 f9f7 	bl	800c04c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fccf 	bl	800b602 <USBD_CtlSendStatus>

              break;
 800ac64:	e004      	b.n	800ac70 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fc02 	bl	800b472 <USBD_CtlError>
              break;
 800ac6e:	bf00      	nop
          }
          break;
 800ac70:	e0e0      	b.n	800ae34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d002      	beq.n	800ac82 <USBD_StdEPReq+0xfe>
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d015      	beq.n	800acac <USBD_StdEPReq+0x128>
 800ac80:	e026      	b.n	800acd0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d00c      	beq.n	800aca2 <USBD_StdEPReq+0x11e>
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	2b80      	cmp	r3, #128	; 0x80
 800ac8c:	d009      	beq.n	800aca2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 f9da 	bl	800c04c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ac98:	2180      	movs	r1, #128	; 0x80
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 f9d6 	bl	800c04c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aca0:	e01c      	b.n	800acdc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fbe4 	bl	800b472 <USBD_CtlError>
              break;
 800acaa:	e017      	b.n	800acdc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	885b      	ldrh	r3, [r3, #2]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d112      	bne.n	800acda <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d004      	beq.n	800acc8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f9e1 	bl	800c08a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fc9a 	bl	800b602 <USBD_CtlSendStatus>
              }
              break;
 800acce:	e004      	b.n	800acda <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fbcd 	bl	800b472 <USBD_CtlError>
              break;
 800acd8:	e000      	b.n	800acdc <USBD_StdEPReq+0x158>
              break;
 800acda:	bf00      	nop
          }
          break;
 800acdc:	e0aa      	b.n	800ae34 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d002      	beq.n	800acee <USBD_StdEPReq+0x16a>
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d032      	beq.n	800ad52 <USBD_StdEPReq+0x1ce>
 800acec:	e097      	b.n	800ae1e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <USBD_StdEPReq+0x180>
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	2b80      	cmp	r3, #128	; 0x80
 800acf8:	d004      	beq.n	800ad04 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fbb8 	bl	800b472 <USBD_CtlError>
                break;
 800ad02:	e091      	b.n	800ae28 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da0b      	bge.n	800ad24 <USBD_StdEPReq+0x1a0>
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
 800ad0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	3310      	adds	r3, #16
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4413      	add	r3, r2
 800ad20:	3304      	adds	r3, #4
 800ad22:	e00b      	b.n	800ad3c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4413      	add	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	4413      	add	r3, r2
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2202      	movs	r2, #2
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fbfb 	bl	800b546 <USBD_CtlSendData>
              break;
 800ad50:	e06a      	b.n	800ae28 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	da11      	bge.n	800ad7e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad5a:	7bbb      	ldrb	r3, [r7, #14]
 800ad5c:	f003 020f 	and.w	r2, r3, #15
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d117      	bne.n	800ada4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fb7b 	bl	800b472 <USBD_CtlError>
                  break;
 800ad7c:	e054      	b.n	800ae28 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d104      	bne.n	800ada4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fb68 	bl	800b472 <USBD_CtlError>
                  break;
 800ada2:	e041      	b.n	800ae28 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ada4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	da0b      	bge.n	800adc4 <USBD_StdEPReq+0x240>
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	3310      	adds	r3, #16
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	4413      	add	r3, r2
 800adc0:	3304      	adds	r3, #4
 800adc2:	e00b      	b.n	800addc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4413      	add	r3, r2
 800adda:	3304      	adds	r3, #4
 800addc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <USBD_StdEPReq+0x266>
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
 800ade6:	2b80      	cmp	r3, #128	; 0x80
 800ade8:	d103      	bne.n	800adf2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2200      	movs	r2, #0
 800adee:	601a      	str	r2, [r3, #0]
 800adf0:	e00e      	b.n	800ae10 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800adf2:	7bbb      	ldrb	r3, [r7, #14]
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 f966 	bl	800c0c8 <USBD_LL_IsStallEP>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2201      	movs	r2, #1
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	e002      	b.n	800ae10 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2202      	movs	r2, #2
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fb95 	bl	800b546 <USBD_CtlSendData>
              break;
 800ae1c:	e004      	b.n	800ae28 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fb26 	bl	800b472 <USBD_CtlError>
              break;
 800ae26:	bf00      	nop
          }
          break;
 800ae28:	e004      	b.n	800ae34 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fb20 	bl	800b472 <USBD_CtlError>
          break;
 800ae32:	bf00      	nop
      }
      break;
 800ae34:	e004      	b.n	800ae40 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 fb1a 	bl	800b472 <USBD_CtlError>
      break;
 800ae3e:	bf00      	nop
  }

  return ret;
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	885b      	ldrh	r3, [r3, #2]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	2b06      	cmp	r3, #6
 800ae6e:	f200 8128 	bhi.w	800b0c2 <USBD_GetDescriptor+0x276>
 800ae72:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <USBD_GetDescriptor+0x2c>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800ae95 	.word	0x0800ae95
 800ae7c:	0800aead 	.word	0x0800aead
 800ae80:	0800aeed 	.word	0x0800aeed
 800ae84:	0800b0c3 	.word	0x0800b0c3
 800ae88:	0800b0c3 	.word	0x0800b0c3
 800ae8c:	0800b063 	.word	0x0800b063
 800ae90:	0800b08f 	.word	0x0800b08f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	7c12      	ldrb	r2, [r2, #16]
 800aea0:	f107 0108 	add.w	r1, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
      break;
 800aeaa:	e112      	b.n	800b0d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	7c1b      	ldrb	r3, [r3, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10d      	bne.n	800aed0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	f107 0208 	add.w	r2, r7, #8
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	2202      	movs	r2, #2
 800aecc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aece:	e100      	b.n	800b0d2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	f107 0208 	add.w	r2, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3301      	adds	r3, #1
 800aee6:	2202      	movs	r2, #2
 800aee8:	701a      	strb	r2, [r3, #0]
      break;
 800aeea:	e0f2      	b.n	800b0d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	885b      	ldrh	r3, [r3, #2]
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	f200 80ac 	bhi.w	800b050 <USBD_GetDescriptor+0x204>
 800aef8:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <USBD_GetDescriptor+0xb4>)
 800aefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefe:	bf00      	nop
 800af00:	0800af19 	.word	0x0800af19
 800af04:	0800af4d 	.word	0x0800af4d
 800af08:	0800af81 	.word	0x0800af81
 800af0c:	0800afb5 	.word	0x0800afb5
 800af10:	0800afe9 	.word	0x0800afe9
 800af14:	0800b01d 	.word	0x0800b01d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00b      	beq.n	800af3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	7c12      	ldrb	r2, [r2, #16]
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af3a:	e091      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 fa97 	bl	800b472 <USBD_CtlError>
            err++;
 800af44:	7afb      	ldrb	r3, [r7, #11]
 800af46:	3301      	adds	r3, #1
 800af48:	72fb      	strb	r3, [r7, #11]
          break;
 800af4a:	e089      	b.n	800b060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00b      	beq.n	800af70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	7c12      	ldrb	r2, [r2, #16]
 800af64:	f107 0108 	add.w	r1, r7, #8
 800af68:	4610      	mov	r0, r2
 800af6a:	4798      	blx	r3
 800af6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af6e:	e077      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa7d 	bl	800b472 <USBD_CtlError>
            err++;
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	3301      	adds	r3, #1
 800af7c:	72fb      	strb	r3, [r7, #11]
          break;
 800af7e:	e06f      	b.n	800b060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00b      	beq.n	800afa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	7c12      	ldrb	r2, [r2, #16]
 800af98:	f107 0108 	add.w	r1, r7, #8
 800af9c:	4610      	mov	r0, r2
 800af9e:	4798      	blx	r3
 800afa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afa2:	e05d      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fa63 	bl	800b472 <USBD_CtlError>
            err++;
 800afac:	7afb      	ldrb	r3, [r7, #11]
 800afae:	3301      	adds	r3, #1
 800afb0:	72fb      	strb	r3, [r7, #11]
          break;
 800afb2:	e055      	b.n	800b060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00b      	beq.n	800afd8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	7c12      	ldrb	r2, [r2, #16]
 800afcc:	f107 0108 	add.w	r1, r7, #8
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
 800afd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afd6:	e043      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fa49 	bl	800b472 <USBD_CtlError>
            err++;
 800afe0:	7afb      	ldrb	r3, [r7, #11]
 800afe2:	3301      	adds	r3, #1
 800afe4:	72fb      	strb	r3, [r7, #11]
          break;
 800afe6:	e03b      	b.n	800b060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00b      	beq.n	800b00c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7c12      	ldrb	r2, [r2, #16]
 800b000:	f107 0108 	add.w	r1, r7, #8
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
 800b008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b00a:	e029      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 fa2f 	bl	800b472 <USBD_CtlError>
            err++;
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	3301      	adds	r3, #1
 800b018:	72fb      	strb	r3, [r7, #11]
          break;
 800b01a:	e021      	b.n	800b060 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	7c12      	ldrb	r2, [r2, #16]
 800b034:	f107 0108 	add.w	r1, r7, #8
 800b038:	4610      	mov	r0, r2
 800b03a:	4798      	blx	r3
 800b03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b03e:	e00f      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa15 	bl	800b472 <USBD_CtlError>
            err++;
 800b048:	7afb      	ldrb	r3, [r7, #11]
 800b04a:	3301      	adds	r3, #1
 800b04c:	72fb      	strb	r3, [r7, #11]
          break;
 800b04e:	e007      	b.n	800b060 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa0d 	bl	800b472 <USBD_CtlError>
          err++;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	3301      	adds	r3, #1
 800b05c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b05e:	e038      	b.n	800b0d2 <USBD_GetDescriptor+0x286>
 800b060:	e037      	b.n	800b0d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7c1b      	ldrb	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d109      	bne.n	800b07e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b072:	f107 0208 	add.w	r2, r7, #8
 800b076:	4610      	mov	r0, r2
 800b078:	4798      	blx	r3
 800b07a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b07c:	e029      	b.n	800b0d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f9f6 	bl	800b472 <USBD_CtlError>
        err++;
 800b086:	7afb      	ldrb	r3, [r7, #11]
 800b088:	3301      	adds	r3, #1
 800b08a:	72fb      	strb	r3, [r7, #11]
      break;
 800b08c:	e021      	b.n	800b0d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	7c1b      	ldrb	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10d      	bne.n	800b0b2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09e:	f107 0208 	add.w	r2, r7, #8
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	4798      	blx	r3
 800b0a6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	2207      	movs	r2, #7
 800b0ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0b0:	e00f      	b.n	800b0d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f9dc 	bl	800b472 <USBD_CtlError>
        err++;
 800b0ba:	7afb      	ldrb	r3, [r7, #11]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	72fb      	strb	r3, [r7, #11]
      break;
 800b0c0:	e007      	b.n	800b0d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f9d4 	bl	800b472 <USBD_CtlError>
      err++;
 800b0ca:	7afb      	ldrb	r3, [r7, #11]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b0d0:	bf00      	nop
  }

  if (err != 0U)
 800b0d2:	7afb      	ldrb	r3, [r7, #11]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d11c      	bne.n	800b112 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b0d8:	893b      	ldrh	r3, [r7, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d011      	beq.n	800b102 <USBD_GetDescriptor+0x2b6>
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	88db      	ldrh	r3, [r3, #6]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00d      	beq.n	800b102 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	88da      	ldrh	r2, [r3, #6]
 800b0ea:	893b      	ldrh	r3, [r7, #8]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	bf28      	it	cs
 800b0f0:	4613      	movcs	r3, r2
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0f6:	893b      	ldrh	r3, [r7, #8]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68f9      	ldr	r1, [r7, #12]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fa22 	bl	800b546 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	88db      	ldrh	r3, [r3, #6]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d104      	bne.n	800b114 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fa79 	bl	800b602 <USBD_CtlSendStatus>
 800b110:	e000      	b.n	800b114 <USBD_GetDescriptor+0x2c8>
    return;
 800b112:	bf00      	nop
    }
  }
}
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop

0800b11c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	889b      	ldrh	r3, [r3, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d130      	bne.n	800b190 <USBD_SetAddress+0x74>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	88db      	ldrh	r3, [r3, #6]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d12c      	bne.n	800b190 <USBD_SetAddress+0x74>
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	885b      	ldrh	r3, [r3, #2]
 800b13a:	2b7f      	cmp	r3, #127	; 0x7f
 800b13c:	d828      	bhi.n	800b190 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	885b      	ldrh	r3, [r3, #2]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b148:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b150:	2b03      	cmp	r3, #3
 800b152:	d104      	bne.n	800b15e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f98b 	bl	800b472 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15c:	e01d      	b.n	800b19a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	7bfa      	ldrb	r2, [r7, #15]
 800b162:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 ffd8 	bl	800c120 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 fa46 	bl	800b602 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b184:	e009      	b.n	800b19a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18e:	e004      	b.n	800b19a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f96d 	bl	800b472 <USBD_CtlError>
  }
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	4b41      	ldr	r3, [pc, #260]	; (800b2bc <USBD_SetConfig+0x118>)
 800b1b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1b8:	4b40      	ldr	r3, [pc, #256]	; (800b2bc <USBD_SetConfig+0x118>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d904      	bls.n	800b1ca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 f955 	bl	800b472 <USBD_CtlError>
 800b1c8:	e075      	b.n	800b2b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d002      	beq.n	800b1da <USBD_SetConfig+0x36>
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d023      	beq.n	800b220 <USBD_SetConfig+0x7c>
 800b1d8:	e062      	b.n	800b2a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b1da:	4b38      	ldr	r3, [pc, #224]	; (800b2bc <USBD_SetConfig+0x118>)
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d01a      	beq.n	800b218 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b1e2:	4b36      	ldr	r3, [pc, #216]	; (800b2bc <USBD_SetConfig+0x118>)
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1f4:	4b31      	ldr	r3, [pc, #196]	; (800b2bc <USBD_SetConfig+0x118>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff f9e7 	bl	800a5ce <USBD_SetClassConfig>
 800b200:	4603      	mov	r3, r0
 800b202:	2b02      	cmp	r3, #2
 800b204:	d104      	bne.n	800b210 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f932 	bl	800b472 <USBD_CtlError>
            return;
 800b20e:	e052      	b.n	800b2b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f9f6 	bl	800b602 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b216:	e04e      	b.n	800b2b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f9f2 	bl	800b602 <USBD_CtlSendStatus>
        break;
 800b21e:	e04a      	b.n	800b2b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b220:	4b26      	ldr	r3, [pc, #152]	; (800b2bc <USBD_SetConfig+0x118>)
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d112      	bne.n	800b24e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b230:	4b22      	ldr	r3, [pc, #136]	; (800b2bc <USBD_SetConfig+0x118>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	461a      	mov	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b23a:	4b20      	ldr	r3, [pc, #128]	; (800b2bc <USBD_SetConfig+0x118>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff f9e3 	bl	800a60c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f9db 	bl	800b602 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b24c:	e033      	b.n	800b2b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b24e:	4b1b      	ldr	r3, [pc, #108]	; (800b2bc <USBD_SetConfig+0x118>)
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d01d      	beq.n	800b298 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff f9d1 	bl	800a60c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b26a:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <USBD_SetConfig+0x118>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b274:	4b11      	ldr	r3, [pc, #68]	; (800b2bc <USBD_SetConfig+0x118>)
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	4619      	mov	r1, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff f9a7 	bl	800a5ce <USBD_SetClassConfig>
 800b280:	4603      	mov	r3, r0
 800b282:	2b02      	cmp	r3, #2
 800b284:	d104      	bne.n	800b290 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f8f2 	bl	800b472 <USBD_CtlError>
            return;
 800b28e:	e012      	b.n	800b2b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 f9b6 	bl	800b602 <USBD_CtlSendStatus>
        break;
 800b296:	e00e      	b.n	800b2b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f9b2 	bl	800b602 <USBD_CtlSendStatus>
        break;
 800b29e:	e00a      	b.n	800b2b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f8e5 	bl	800b472 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <USBD_SetConfig+0x118>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7ff f9ac 	bl	800a60c <USBD_ClrClassConfig>
        break;
 800b2b4:	bf00      	nop
    }
  }
}
 800b2b6:	3708      	adds	r7, #8
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	2000028c 	.word	0x2000028c

0800b2c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	88db      	ldrh	r3, [r3, #6]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d004      	beq.n	800b2dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f8cc 	bl	800b472 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2da:	e022      	b.n	800b322 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	dc02      	bgt.n	800b2ec <USBD_GetConfig+0x2c>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	dc03      	bgt.n	800b2f2 <USBD_GetConfig+0x32>
 800b2ea:	e015      	b.n	800b318 <USBD_GetConfig+0x58>
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d00b      	beq.n	800b308 <USBD_GetConfig+0x48>
 800b2f0:	e012      	b.n	800b318 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3308      	adds	r3, #8
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f920 	bl	800b546 <USBD_CtlSendData>
        break;
 800b306:	e00c      	b.n	800b322 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	3304      	adds	r3, #4
 800b30c:	2201      	movs	r2, #1
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f918 	bl	800b546 <USBD_CtlSendData>
        break;
 800b316:	e004      	b.n	800b322 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f8a9 	bl	800b472 <USBD_CtlError>
        break;
 800b320:	bf00      	nop
}
 800b322:	bf00      	nop
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b082      	sub	sp, #8
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d81e      	bhi.n	800b37e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	88db      	ldrh	r3, [r3, #6]
 800b344:	2b02      	cmp	r3, #2
 800b346:	d004      	beq.n	800b352 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f891 	bl	800b472 <USBD_CtlError>
        break;
 800b350:	e01a      	b.n	800b388 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d005      	beq.n	800b36e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	f043 0202 	orr.w	r2, r3, #2
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	330c      	adds	r3, #12
 800b372:	2202      	movs	r2, #2
 800b374:	4619      	mov	r1, r3
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f8e5 	bl	800b546 <USBD_CtlSendData>
      break;
 800b37c:	e004      	b.n	800b388 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b37e:	6839      	ldr	r1, [r7, #0]
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 f876 	bl	800b472 <USBD_CtlError>
      break;
 800b386:	bf00      	nop
  }
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	885b      	ldrh	r3, [r3, #2]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d106      	bne.n	800b3b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f929 	bl	800b602 <USBD_CtlSendStatus>
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d80b      	bhi.n	800b3e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d10c      	bne.n	800b3f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f90f 	bl	800b602 <USBD_CtlSendStatus>
      }
      break;
 800b3e4:	e004      	b.n	800b3f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f842 	bl	800b472 <USBD_CtlError>
      break;
 800b3ee:	e000      	b.n	800b3f2 <USBD_ClrFeature+0x3a>
      break;
 800b3f0:	bf00      	nop
  }
}
 800b3f2:	bf00      	nop
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b3fa:	b480      	push	{r7}
 800b3fc:	b083      	sub	sp, #12
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	781a      	ldrb	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	785a      	ldrb	r2, [r3, #1]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	3302      	adds	r3, #2
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	3303      	adds	r3, #3
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	b29b      	uxth	r3, r3
 800b428:	4413      	add	r3, r2
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	3304      	adds	r3, #4
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b29a      	uxth	r2, r3
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	3305      	adds	r3, #5
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b29b      	uxth	r3, r3
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	b29b      	uxth	r3, r3
 800b444:	4413      	add	r3, r2
 800b446:	b29a      	uxth	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	3306      	adds	r3, #6
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	b29a      	uxth	r2, r3
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	3307      	adds	r3, #7
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	b29b      	uxth	r3, r3
 800b460:	4413      	add	r3, r2
 800b462:	b29a      	uxth	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	80da      	strh	r2, [r3, #6]

}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr

0800b472 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b082      	sub	sp, #8
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b47c:	2180      	movs	r1, #128	; 0x80
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fde4 	bl	800c04c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b484:	2100      	movs	r1, #0
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fde0 	bl	800c04c <USBD_LL_StallEP>
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d032      	beq.n	800b510 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f000 f834 	bl	800b518 <USBD_GetLen>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	75fa      	strb	r2, [r7, #23]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	7812      	ldrb	r2, [r2, #0]
 800b4ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	75fa      	strb	r2, [r7, #23]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	4413      	add	r3, r2
 800b4dc:	2203      	movs	r2, #3
 800b4de:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b4e0:	e012      	b.n	800b508 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	60fa      	str	r2, [r7, #12]
 800b4e8:	7dfa      	ldrb	r2, [r7, #23]
 800b4ea:	1c51      	adds	r1, r2, #1
 800b4ec:	75f9      	strb	r1, [r7, #23]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	440a      	add	r2, r1
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	75fa      	strb	r2, [r7, #23]
 800b4fe:	461a      	mov	r2, r3
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	4413      	add	r3, r2
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e8      	bne.n	800b4e2 <USBD_GetString+0x4e>
    }
  }
}
 800b510:	bf00      	nop
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b524:	e005      	b.n	800b532 <USBD_GetLen+0x1a>
  {
    len++;
 800b526:	7bfb      	ldrb	r3, [r7, #15]
 800b528:	3301      	adds	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3301      	adds	r3, #1
 800b530:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1f5      	bne.n	800b526 <USBD_GetLen+0xe>
  }

  return len;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	bc80      	pop	{r7}
 800b544:	4770      	bx	lr

0800b546 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	60f8      	str	r0, [r7, #12]
 800b54e:	60b9      	str	r1, [r7, #8]
 800b550:	4613      	mov	r3, r2
 800b552:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2202      	movs	r2, #2
 800b558:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b55c:	88fa      	ldrh	r2, [r7, #6]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b562:	88fa      	ldrh	r2, [r7, #6]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b568:	88fb      	ldrh	r3, [r7, #6]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	2100      	movs	r1, #0
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fdf5 	bl	800c15e <USBD_LL_Transmit>

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b084      	sub	sp, #16
 800b582:	af00      	add	r7, sp, #0
 800b584:	60f8      	str	r0, [r7, #12]
 800b586:	60b9      	str	r1, [r7, #8]
 800b588:	4613      	mov	r3, r2
 800b58a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	2100      	movs	r1, #0
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 fde3 	bl	800c15e <USBD_LL_Transmit>

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2203      	movs	r2, #3
 800b5b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b5c0:	88fa      	ldrh	r2, [r7, #6]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c8:	88fb      	ldrh	r3, [r7, #6]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fde8 	bl	800c1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5ec:	88fb      	ldrh	r3, [r7, #6]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fdd6 	bl	800c1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2204      	movs	r2, #4
 800b60e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b612:	2300      	movs	r3, #0
 800b614:	2200      	movs	r2, #0
 800b616:	2100      	movs	r1, #0
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fda0 	bl	800c15e <USBD_LL_Transmit>

  return USBD_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2205      	movs	r2, #5
 800b634:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b638:	2300      	movs	r3, #0
 800b63a:	2200      	movs	r2, #0
 800b63c:	2100      	movs	r1, #0
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fdb0 	bl	800c1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3708      	adds	r7, #8
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
	...

0800b650 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b654:	2200      	movs	r2, #0
 800b656:	4912      	ldr	r1, [pc, #72]	; (800b6a0 <MX_USB_DEVICE_Init+0x50>)
 800b658:	4812      	ldr	r0, [pc, #72]	; (800b6a4 <MX_USB_DEVICE_Init+0x54>)
 800b65a:	f7fe ff5e 	bl	800a51a <USBD_Init>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b664:	f7f7 fe72 	bl	800334c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b668:	490f      	ldr	r1, [pc, #60]	; (800b6a8 <MX_USB_DEVICE_Init+0x58>)
 800b66a:	480e      	ldr	r0, [pc, #56]	; (800b6a4 <MX_USB_DEVICE_Init+0x54>)
 800b66c:	f7fe ff80 	bl	800a570 <USBD_RegisterClass>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b676:	f7f7 fe69 	bl	800334c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b67a:	490c      	ldr	r1, [pc, #48]	; (800b6ac <MX_USB_DEVICE_Init+0x5c>)
 800b67c:	4809      	ldr	r0, [pc, #36]	; (800b6a4 <MX_USB_DEVICE_Init+0x54>)
 800b67e:	f7fe feb1 	bl	800a3e4 <USBD_CDC_RegisterInterface>
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d001      	beq.n	800b68c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b688:	f7f7 fe60 	bl	800334c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b68c:	4805      	ldr	r0, [pc, #20]	; (800b6a4 <MX_USB_DEVICE_Init+0x54>)
 800b68e:	f7fe ff88 	bl	800a5a2 <USBD_Start>
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b698:	f7f7 fe58 	bl	800334c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b69c:	bf00      	nop
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	20000140 	.word	0x20000140
 800b6a4:	20000600 	.word	0x20000600
 800b6a8:	2000002c 	.word	0x2000002c
 800b6ac:	20000130 	.word	0x20000130

0800b6b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4905      	ldr	r1, [pc, #20]	; (800b6cc <CDC_Init_FS+0x1c>)
 800b6b8:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <CDC_Init_FS+0x20>)
 800b6ba:	f7fe fea9 	bl	800a410 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6be:	4905      	ldr	r1, [pc, #20]	; (800b6d4 <CDC_Init_FS+0x24>)
 800b6c0:	4803      	ldr	r0, [pc, #12]	; (800b6d0 <CDC_Init_FS+0x20>)
 800b6c2:	f7fe febe 	bl	800a442 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800b6c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000ac4 	.word	0x20000ac4
 800b6d0:	20000600 	.word	0x20000600
 800b6d4:	200008c4 	.word	0x200008c4

0800b6d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800b6dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bc80      	pop	{r7}
 800b6e4:	4770      	bx	lr
	...

0800b6e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	6039      	str	r1, [r7, #0]
 800b6f2:	71fb      	strb	r3, [r7, #7]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	2b23      	cmp	r3, #35	; 0x23
 800b6fc:	d84a      	bhi.n	800b794 <CDC_Control_FS+0xac>
 800b6fe:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <CDC_Control_FS+0x1c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b795 	.word	0x0800b795
 800b708:	0800b795 	.word	0x0800b795
 800b70c:	0800b795 	.word	0x0800b795
 800b710:	0800b795 	.word	0x0800b795
 800b714:	0800b795 	.word	0x0800b795
 800b718:	0800b795 	.word	0x0800b795
 800b71c:	0800b795 	.word	0x0800b795
 800b720:	0800b795 	.word	0x0800b795
 800b724:	0800b795 	.word	0x0800b795
 800b728:	0800b795 	.word	0x0800b795
 800b72c:	0800b795 	.word	0x0800b795
 800b730:	0800b795 	.word	0x0800b795
 800b734:	0800b795 	.word	0x0800b795
 800b738:	0800b795 	.word	0x0800b795
 800b73c:	0800b795 	.word	0x0800b795
 800b740:	0800b795 	.word	0x0800b795
 800b744:	0800b795 	.word	0x0800b795
 800b748:	0800b795 	.word	0x0800b795
 800b74c:	0800b795 	.word	0x0800b795
 800b750:	0800b795 	.word	0x0800b795
 800b754:	0800b795 	.word	0x0800b795
 800b758:	0800b795 	.word	0x0800b795
 800b75c:	0800b795 	.word	0x0800b795
 800b760:	0800b795 	.word	0x0800b795
 800b764:	0800b795 	.word	0x0800b795
 800b768:	0800b795 	.word	0x0800b795
 800b76c:	0800b795 	.word	0x0800b795
 800b770:	0800b795 	.word	0x0800b795
 800b774:	0800b795 	.word	0x0800b795
 800b778:	0800b795 	.word	0x0800b795
 800b77c:	0800b795 	.word	0x0800b795
 800b780:	0800b795 	.word	0x0800b795
 800b784:	0800b795 	.word	0x0800b795
 800b788:	0800b795 	.word	0x0800b795
 800b78c:	0800b795 	.word	0x0800b795
 800b790:	0800b795 	.word	0x0800b795
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800b794:	bf00      	nop
	}

	return (USBD_OK);
 800b796:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bc80      	pop	{r7}
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop

0800b7a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7a4:	b590      	push	{r4, r7, lr}
 800b7a6:	b089      	sub	sp, #36	; 0x24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	48b2      	ldr	r0, [pc, #712]	; (800ba7c <CDC_Receive_FS+0x2d8>)
 800b7b2:	f7fe fe46 	bl	800a442 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7b6:	48b1      	ldr	r0, [pc, #708]	; (800ba7c <CDC_Receive_FS+0x2d8>)
 800b7b8:	f7fe fe85 	bl	800a4c6 <USBD_CDC_ReceivePacket>

	if (*Len < 1)	return (USBD_OK);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d101      	bne.n	800b7c8 <CDC_Receive_FS+0x24>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e188      	b.n	800bada <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	77fb      	strb	r3, [r7, #31]

//--------------------------------------------------------------------------


	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01) {
 800b7ce:	7ffb      	ldrb	r3, [r7, #31]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d15b      	bne.n	800b88c <CDC_Receive_FS+0xe8>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d94b      	bls.n	800b874 <CDC_Receive_FS+0xd0>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d004      	beq.n	800b7f0 <CDC_Receive_FS+0x4c>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d141      	bne.n	800b874 <CDC_Receive_FS+0xd0>
			if (Buf[1] == 0x01) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d11b      	bne.n	800b832 <CDC_Receive_FS+0x8e>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	2104      	movs	r1, #4
 800b7fe:	48a0      	ldr	r0, [pc, #640]	; (800ba80 <CDC_Receive_FS+0x2dc>)
 800b800:	f7f9 fa15 	bl	8004c2e <HAL_GPIO_WritePin>
				RelayState = 0x01;
 800b804:	4b9f      	ldr	r3, [pc, #636]	; (800ba84 <CDC_Receive_FS+0x2e0>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 800b80a:	4b9e      	ldr	r3, [pc, #632]	; (800ba84 <CDC_Receive_FS+0x2e0>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	4619      	mov	r1, r3
 800b810:	489d      	ldr	r0, [pc, #628]	; (800ba88 <CDC_Receive_FS+0x2e4>)
 800b812:	f000 fd89 	bl	800c328 <iprintf>
				SetAllDAC();
 800b816:	f7f6 fdcd 	bl	80023b4 <SetAllDAC>

				UserTxBufferFS[0]	= cmd;
 800b81a:	4a9c      	ldr	r2, [pc, #624]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b81c:	7ffb      	ldrb	r3, [r7, #31]
 800b81e:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 800b820:	4b9a      	ldr	r3, [pc, #616]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b822:	2200      	movs	r2, #0
 800b824:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800b826:	2102      	movs	r1, #2
 800b828:	4898      	ldr	r0, [pc, #608]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b82a:	f000 f95f 	bl	800baec <CDC_Transmit_FS>
				return (USBD_OK);
 800b82e:	2300      	movs	r3, #0
 800b830:	e153      	b.n	800bada <CDC_Receive_FS+0x336>

			} else if (Buf[1] == 0x00) {
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	3301      	adds	r3, #1
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d11b      	bne.n	800b874 <CDC_Receive_FS+0xd0>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800b83c:	2200      	movs	r2, #0
 800b83e:	2104      	movs	r1, #4
 800b840:	488f      	ldr	r0, [pc, #572]	; (800ba80 <CDC_Receive_FS+0x2dc>)
 800b842:	f7f9 f9f4 	bl	8004c2e <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800b846:	4b8f      	ldr	r3, [pc, #572]	; (800ba84 <CDC_Receive_FS+0x2e0>)
 800b848:	2200      	movs	r2, #0
 800b84a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800b84c:	4b8d      	ldr	r3, [pc, #564]	; (800ba84 <CDC_Receive_FS+0x2e0>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	4619      	mov	r1, r3
 800b852:	488f      	ldr	r0, [pc, #572]	; (800ba90 <CDC_Receive_FS+0x2ec>)
 800b854:	f000 fd68 	bl	800c328 <iprintf>
				SetAllDAC();
 800b858:	f7f6 fdac 	bl	80023b4 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800b85c:	4a8b      	ldr	r2, [pc, #556]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b85e:	7ffb      	ldrb	r3, [r7, #31]
 800b860:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 800b862:	4b8a      	ldr	r3, [pc, #552]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b864:	2200      	movs	r2, #0
 800b866:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800b868:	2102      	movs	r1, #2
 800b86a:	4888      	ldr	r0, [pc, #544]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b86c:	f000 f93e 	bl	800baec <CDC_Transmit_FS>
				return (USBD_OK);
 800b870:	2300      	movs	r3, #0
 800b872:	e132      	b.n	800bada <CDC_Receive_FS+0x336>
			}
		}

		UserTxBufferFS[0] = cmd;
 800b874:	4a85      	ldr	r2, [pc, #532]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b876:	7ffb      	ldrb	r3, [r7, #31]
 800b878:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 800b87a:	4b84      	ldr	r3, [pc, #528]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b880:	2102      	movs	r1, #2
 800b882:	4882      	ldr	r0, [pc, #520]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b884:	f000 f932 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b888:	2300      	movs	r3, #0
 800b88a:	e126      	b.n	800bada <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------
	// DA:4095
	} else if (cmd == 0x02) {
 800b88c:	7ffb      	ldrb	r3, [r7, #31]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d12d      	bne.n	800b8ee <CDC_Receive_FS+0x14a>
		if (*Len >= 3) {
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d91d      	bls.n	800b8d6 <CDC_Receive_FS+0x132>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800b89a:	f7f6 fe8f 	bl	80025bc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800b89e:	f7f6 feb1 	bl	8002604 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 800b8ac:	8bbb      	ldrh	r3, [r7, #28]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f6 fd54 	bl	800235c <SetDacA>

			printf("DacA: %d\n", tVal16);
 800b8b4:	8bbb      	ldrh	r3, [r7, #28]
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4876      	ldr	r0, [pc, #472]	; (800ba94 <CDC_Receive_FS+0x2f0>)
 800b8ba:	f000 fd35 	bl	800c328 <iprintf>
			UserTxBufferFS[0] = cmd;
 800b8be:	4a73      	ldr	r2, [pc, #460]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8c0:	7ffb      	ldrb	r3, [r7, #31]
 800b8c2:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800b8c4:	4b71      	ldr	r3, [pc, #452]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800b8ca:	2102      	movs	r1, #2
 800b8cc:	486f      	ldr	r0, [pc, #444]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8ce:	f000 f90d 	bl	800baec <CDC_Transmit_FS>
			return (USBD_OK);
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	e101      	b.n	800bada <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 800b8d6:	4a6d      	ldr	r2, [pc, #436]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8d8:	7ffb      	ldrb	r3, [r7, #31]
 800b8da:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800b8dc:	4b6b      	ldr	r3, [pc, #428]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8de:	2201      	movs	r2, #1
 800b8e0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b8e2:	2102      	movs	r1, #2
 800b8e4:	4869      	ldr	r0, [pc, #420]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b8e6:	f000 f901 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e0f5      	b.n	800bada <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// DB:4095
	} else if (cmd == 0x03) {
 800b8ee:	7ffb      	ldrb	r3, [r7, #31]
 800b8f0:	2b03      	cmp	r3, #3
 800b8f2:	d12d      	bne.n	800b950 <CDC_Receive_FS+0x1ac>
		if (*Len >= 3) {
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d91d      	bls.n	800b938 <CDC_Receive_FS+0x194>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800b8fc:	f7f6 fe5e 	bl	80025bc <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800b900:	f7f6 fe80 	bl	8002604 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 800b90e:	8bbb      	ldrh	r3, [r7, #28]
 800b910:	4618      	mov	r0, r3
 800b912:	f7f6 fd39 	bl	8002388 <SetDacB>

			UserTxBufferFS[0] = cmd;
 800b916:	4a5d      	ldr	r2, [pc, #372]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b918:	7ffb      	ldrb	r3, [r7, #31]
 800b91a:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800b91c:	4b5b      	ldr	r3, [pc, #364]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b91e:	2200      	movs	r2, #0
 800b920:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n",tVal16);
 800b922:	8bbb      	ldrh	r3, [r7, #28]
 800b924:	4619      	mov	r1, r3
 800b926:	485c      	ldr	r0, [pc, #368]	; (800ba98 <CDC_Receive_FS+0x2f4>)
 800b928:	f000 fcfe 	bl	800c328 <iprintf>


			CDC_Transmit_FS(UserTxBufferFS, 2);
 800b92c:	2102      	movs	r1, #2
 800b92e:	4857      	ldr	r0, [pc, #348]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b930:	f000 f8dc 	bl	800baec <CDC_Transmit_FS>
			return (USBD_OK);
 800b934:	2300      	movs	r3, #0
 800b936:	e0d0      	b.n	800bada <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 800b938:	4a54      	ldr	r2, [pc, #336]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b93a:	7ffb      	ldrb	r3, [r7, #31]
 800b93c:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800b93e:	4b53      	ldr	r3, [pc, #332]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b940:	2201      	movs	r2, #1
 800b942:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800b944:	2102      	movs	r1, #2
 800b946:	4851      	ldr	r0, [pc, #324]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b948:	f000 f8d0 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b94c:	2300      	movs	r3, #0
 800b94e:	e0c4      	b.n	800bada <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// ADC?
	} else if (cmd == 0x04) {
 800b950:	7ffb      	ldrb	r3, [r7, #31]
 800b952:	2b04      	cmp	r3, #4
 800b954:	d10f      	bne.n	800b976 <CDC_Receive_FS+0x1d2>
		tVal16 = GetADC();
 800b956:	f7f6 fecb 	bl	80026f0 <GetADC>
 800b95a:	4603      	mov	r3, r0
 800b95c:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 800b95e:	4a4b      	ldr	r2, [pc, #300]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b960:	7ffb      	ldrb	r3, [r7, #31]
 800b962:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800b964:	4a4d      	ldr	r2, [pc, #308]	; (800ba9c <CDC_Receive_FS+0x2f8>)
 800b966:	8bbb      	ldrh	r3, [r7, #28]
 800b968:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800b96a:	2103      	movs	r1, #3
 800b96c:	4847      	ldr	r0, [pc, #284]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b96e:	f000 f8bd 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b972:	2300      	movs	r3, #0
 800b974:	e0b1      	b.n	800bada <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 800b976:	7ffb      	ldrb	r3, [r7, #31]
 800b978:	2b05      	cmp	r3, #5
 800b97a:	d11a      	bne.n	800b9b2 <CDC_Receive_FS+0x20e>
		UserTxBufferFS[0] = cmd;
 800b97c:	4a43      	ldr	r2, [pc, #268]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b97e:	7ffb      	ldrb	r3, [r7, #31]
 800b980:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 800b982:	4b40      	ldr	r3, [pc, #256]	; (800ba84 <CDC_Receive_FS+0x2e0>)
 800b984:	781a      	ldrb	r2, [r3, #0]
 800b986:	4b41      	ldr	r3, [pc, #260]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b988:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 800b98a:	f7f6 fd25 	bl	80023d8 <GetDacA>
 800b98e:	4603      	mov	r3, r0
 800b990:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800b992:	4a43      	ldr	r2, [pc, #268]	; (800baa0 <CDC_Receive_FS+0x2fc>)
 800b994:	8bbb      	ldrh	r3, [r7, #28]
 800b996:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 800b998:	f7f6 fd28 	bl	80023ec <GetDacB>
 800b99c:	4603      	mov	r3, r0
 800b99e:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800b9a0:	4a40      	ldr	r2, [pc, #256]	; (800baa4 <CDC_Receive_FS+0x300>)
 800b9a2:	8bbb      	ldrh	r3, [r7, #28]
 800b9a4:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800b9a6:	2106      	movs	r1, #6
 800b9a8:	4838      	ldr	r0, [pc, #224]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9aa:	f000 f89f 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e093      	b.n	800bada <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Btn?
	} else if (cmd == 0x06) {
 800b9b2:	7ffb      	ldrb	r3, [r7, #31]
 800b9b4:	2b06      	cmp	r3, #6
 800b9b6:	d11a      	bne.n	800b9ee <CDC_Receive_FS+0x24a>
		UserTxBufferFS[0] = cmd;
 800b9b8:	4a34      	ldr	r2, [pc, #208]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9ba:	7ffb      	ldrb	r3, [r7, #31]
 800b9bc:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800b9be:	f7f6 fd1f 	bl	8002400 <GetBtnRunState>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4b31      	ldr	r3, [pc, #196]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9c8:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800b9ca:	f7f6 fd5b 	bl	8002484 <GetBtnUpState>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4b2e      	ldr	r3, [pc, #184]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9d4:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800b9d6:	f7f6 fd97 	bl	8002508 <GetBtnDownState>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9e0:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 800b9e2:	2104      	movs	r1, #4
 800b9e4:	4829      	ldr	r0, [pc, #164]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800b9e6:	f000 f881 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e075      	b.n	800bada <CDC_Receive_FS+0x336>
	// ID? 
	} else if (cmd == 0x07) {
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	2b07      	cmp	r3, #7
 800b9f2:	d12d      	bne.n	800ba50 <CDC_Receive_FS+0x2ac>
		char str[] = "prb_v0.3";
 800b9f4:	4a2c      	ldr	r2, [pc, #176]	; (800baa8 <CDC_Receive_FS+0x304>)
 800b9f6:	f107 0310 	add.w	r3, r7, #16
 800b9fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800b9fc:	c303      	stmia	r3!, {r0, r1}
 800b9fe:	701a      	strb	r2, [r3, #0]

		UserTxBufferFS[0] = cmd;
 800ba00:	4a22      	ldr	r2, [pc, #136]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800ba02:	7ffb      	ldrb	r3, [r7, #31]
 800ba04:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 800ba06:	f107 0310 	add.w	r3, r7, #16
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f4 fba0 	bl	8000150 <strlen>
 800ba10:	4603      	mov	r3, r0
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800ba16:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800ba18:	4c21      	ldr	r4, [pc, #132]	; (800baa0 <CDC_Receive_FS+0x2fc>)
 800ba1a:	f107 0310 	add.w	r3, r7, #16
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f4 fb96 	bl	8000150 <strlen>
 800ba24:	4602      	mov	r2, r0
 800ba26:	f107 0310 	add.w	r3, r7, #16
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 fc65 	bl	800c2fc <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 800ba32:	f107 0310 	add.w	r3, r7, #16
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f4 fb8a 	bl	8000150 <strlen>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	3302      	adds	r3, #2
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	4619      	mov	r1, r3
 800ba46:	4811      	ldr	r0, [pc, #68]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800ba48:	f000 f850 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	e044      	b.n	800bada <CDC_Receive_FS+0x336>
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 800ba50:	7ffb      	ldrb	r3, [r7, #31]
 800ba52:	2b08      	cmp	r3, #8
 800ba54:	d12a      	bne.n	800baac <CDC_Receive_FS+0x308>
		EnableTIM3_PB4();
 800ba56:	f7f6 fd99 	bl	800258c <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 800ba5a:	f7f6 fda3 	bl	80025a4 <GetTIM3>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 800ba64:	4a09      	ldr	r2, [pc, #36]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800ba66:	7ffb      	ldrb	r3, [r7, #31]
 800ba68:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800ba6a:	4a0c      	ldr	r2, [pc, #48]	; (800ba9c <CDC_Receive_FS+0x2f8>)
 800ba6c:	89fb      	ldrh	r3, [r7, #14]
 800ba6e:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800ba70:	2103      	movs	r1, #3
 800ba72:	4806      	ldr	r0, [pc, #24]	; (800ba8c <CDC_Receive_FS+0x2e8>)
 800ba74:	f000 f83a 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800ba78:	2300      	movs	r3, #0
 800ba7a:	e02e      	b.n	800bada <CDC_Receive_FS+0x336>
 800ba7c:	20000600 	.word	0x20000600
 800ba80:	40010800 	.word	0x40010800
 800ba84:	2000028d 	.word	0x2000028d
 800ba88:	0800d72c 	.word	0x0800d72c
 800ba8c:	20000ac4 	.word	0x20000ac4
 800ba90:	0800d744 	.word	0x0800d744
 800ba94:	0800d75c 	.word	0x0800d75c
 800ba98:	0800d768 	.word	0x0800d768
 800ba9c:	20000ac5 	.word	0x20000ac5
 800baa0:	20000ac6 	.word	0x20000ac6
 800baa4:	20000ac8 	.word	0x20000ac8
 800baa8:	0800d774 	.word	0x0800d774

	// inLL?
	} else if (cmd == 0x09) {
 800baac:	7ffb      	ldrb	r3, [r7, #31]
 800baae:	2b09      	cmp	r3, #9
 800bab0:	d112      	bne.n	800bad8 <CDC_Receive_FS+0x334>
		EnableTIM4_PB6();
 800bab2:	f7f6 fd8f 	bl	80025d4 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 800bab6:	f7f6 fd99 	bl	80025ec <GetTIM4>
 800baba:	4603      	mov	r3, r0
 800babc:	b29b      	uxth	r3, r3
 800babe:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 800bac0:	4a08      	ldr	r2, [pc, #32]	; (800bae4 <CDC_Receive_FS+0x340>)
 800bac2:	7ffb      	ldrb	r3, [r7, #31]
 800bac4:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800bac6:	4a08      	ldr	r2, [pc, #32]	; (800bae8 <CDC_Receive_FS+0x344>)
 800bac8:	89bb      	ldrh	r3, [r7, #12]
 800baca:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800bacc:	2103      	movs	r1, #3
 800bace:	4805      	ldr	r0, [pc, #20]	; (800bae4 <CDC_Receive_FS+0x340>)
 800bad0:	f000 f80c 	bl	800baec <CDC_Transmit_FS>
		return (USBD_OK);
 800bad4:	2300      	movs	r3, #0
 800bad6:	e000      	b.n	800bada <CDC_Receive_FS+0x336>
	}

//--------------------------------------------------------------------------
	return (USBD_OK);
 800bad8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bada:	4618      	mov	r0, r3
 800badc:	3724      	adds	r7, #36	; 0x24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd90      	pop	{r4, r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000ac4 	.word	0x20000ac4
 800bae8:	20000ac5 	.word	0x20000ac5

0800baec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	460b      	mov	r3, r1
 800baf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800bafc:	4b0d      	ldr	r3, [pc, #52]	; (800bb34 <CDC_Transmit_FS+0x48>)
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d001      	beq.n	800bb12 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e00b      	b.n	800bb2a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bb12:	887b      	ldrh	r3, [r7, #2]
 800bb14:	461a      	mov	r2, r3
 800bb16:	6879      	ldr	r1, [r7, #4]
 800bb18:	4806      	ldr	r0, [pc, #24]	; (800bb34 <CDC_Transmit_FS+0x48>)
 800bb1a:	f7fe fc79 	bl	800a410 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bb1e:	4805      	ldr	r0, [pc, #20]	; (800bb34 <CDC_Transmit_FS+0x48>)
 800bb20:	f7fe fca2 	bl	800a468 <USBD_CDC_TransmitPacket>
 800bb24:	4603      	mov	r3, r0
 800bb26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000600 	.word	0x20000600

0800bb38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	6039      	str	r1, [r7, #0]
 800bb42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	2212      	movs	r2, #18
 800bb48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bb4a:	4b03      	ldr	r3, [pc, #12]	; (800bb58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bc80      	pop	{r7}
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	2000015c 	.word	0x2000015c

0800bb5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb6e:	4b03      	ldr	r3, [pc, #12]	; (800bb7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bc80      	pop	{r7}
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	20000170 	.word	0x20000170

0800bb80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb8c:	79fb      	ldrb	r3, [r7, #7]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	4907      	ldr	r1, [pc, #28]	; (800bbb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb96:	4808      	ldr	r0, [pc, #32]	; (800bbb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb98:	f7ff fc7c 	bl	800b494 <USBD_GetString>
 800bb9c:	e004      	b.n	800bba8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	4904      	ldr	r1, [pc, #16]	; (800bbb4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bba2:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bba4:	f7ff fc76 	bl	800b494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bba8:	4b02      	ldr	r3, [pc, #8]	; (800bbb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3708      	adds	r7, #8
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	20000cc4 	.word	0x20000cc4
 800bbb8:	0800d780 	.word	0x0800d780

0800bbbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bbc8:	683a      	ldr	r2, [r7, #0]
 800bbca:	4904      	ldr	r1, [pc, #16]	; (800bbdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bbcc:	4804      	ldr	r0, [pc, #16]	; (800bbe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bbce:	f7ff fc61 	bl	800b494 <USBD_GetString>
  return USBD_StrDesc;
 800bbd2:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	20000cc4 	.word	0x20000cc4
 800bbe0:	0800d798 	.word	0x0800d798

0800bbe4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	4603      	mov	r3, r0
 800bbec:	6039      	str	r1, [r7, #0]
 800bbee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	221a      	movs	r2, #26
 800bbf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbf6:	f000 f843 	bl	800bc80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bbfa:	4b02      	ldr	r3, [pc, #8]	; (800bc04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20000174 	.word	0x20000174

0800bc08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc14:	79fb      	ldrb	r3, [r7, #7]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d105      	bne.n	800bc26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	4907      	ldr	r1, [pc, #28]	; (800bc3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc1e:	4808      	ldr	r0, [pc, #32]	; (800bc40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc20:	f7ff fc38 	bl	800b494 <USBD_GetString>
 800bc24:	e004      	b.n	800bc30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	4904      	ldr	r1, [pc, #16]	; (800bc3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bc2a:	4805      	ldr	r0, [pc, #20]	; (800bc40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bc2c:	f7ff fc32 	bl	800b494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc30:	4b02      	ldr	r3, [pc, #8]	; (800bc3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000cc4 	.word	0x20000cc4
 800bc40:	0800d7ac 	.word	0x0800d7ac

0800bc44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	6039      	str	r1, [r7, #0]
 800bc4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc50:	79fb      	ldrb	r3, [r7, #7]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d105      	bne.n	800bc62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	4907      	ldr	r1, [pc, #28]	; (800bc78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc5a:	4808      	ldr	r0, [pc, #32]	; (800bc7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc5c:	f7ff fc1a 	bl	800b494 <USBD_GetString>
 800bc60:	e004      	b.n	800bc6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	4904      	ldr	r1, [pc, #16]	; (800bc78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc66:	4805      	ldr	r0, [pc, #20]	; (800bc7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc68:	f7ff fc14 	bl	800b494 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000cc4 	.word	0x20000cc4
 800bc7c:	0800d7b8 	.word	0x0800d7b8

0800bc80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc86:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <Get_SerialNum+0x44>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc8c:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <Get_SerialNum+0x48>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc92:	4b0e      	ldr	r3, [pc, #56]	; (800bccc <Get_SerialNum+0x4c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bca6:	2208      	movs	r2, #8
 800bca8:	4909      	ldr	r1, [pc, #36]	; (800bcd0 <Get_SerialNum+0x50>)
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f814 	bl	800bcd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcb0:	2204      	movs	r2, #4
 800bcb2:	4908      	ldr	r1, [pc, #32]	; (800bcd4 <Get_SerialNum+0x54>)
 800bcb4:	68b8      	ldr	r0, [r7, #8]
 800bcb6:	f000 f80f 	bl	800bcd8 <IntToUnicode>
  }
}
 800bcba:	bf00      	nop
 800bcbc:	3710      	adds	r7, #16
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	1ffff7e8 	.word	0x1ffff7e8
 800bcc8:	1ffff7ec 	.word	0x1ffff7ec
 800bccc:	1ffff7f0 	.word	0x1ffff7f0
 800bcd0:	20000176 	.word	0x20000176
 800bcd4:	20000186 	.word	0x20000186

0800bcd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	4613      	mov	r3, r2
 800bce4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	75fb      	strb	r3, [r7, #23]
 800bcee:	e027      	b.n	800bd40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	0f1b      	lsrs	r3, r3, #28
 800bcf4:	2b09      	cmp	r3, #9
 800bcf6:	d80b      	bhi.n	800bd10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	0f1b      	lsrs	r3, r3, #28
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	4619      	mov	r1, r3
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	440b      	add	r3, r1
 800bd08:	3230      	adds	r2, #48	; 0x30
 800bd0a:	b2d2      	uxtb	r2, r2
 800bd0c:	701a      	strb	r2, [r3, #0]
 800bd0e:	e00a      	b.n	800bd26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	0f1b      	lsrs	r3, r3, #28
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	440b      	add	r3, r1
 800bd20:	3237      	adds	r2, #55	; 0x37
 800bd22:	b2d2      	uxtb	r2, r2
 800bd24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	011b      	lsls	r3, r3, #4
 800bd2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	3301      	adds	r3, #1
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	4413      	add	r3, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	75fb      	strb	r3, [r7, #23]
 800bd40:	7dfa      	ldrb	r2, [r7, #23]
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d3d3      	bcc.n	800bcf0 <IntToUnicode+0x18>
  }
}
 800bd48:	bf00      	nop
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bc80      	pop	{r7}
 800bd52:	4770      	bx	lr

0800bd54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a0d      	ldr	r2, [pc, #52]	; (800bd98 <HAL_PCD_MspInit+0x44>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d113      	bne.n	800bd8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bd66:	4b0d      	ldr	r3, [pc, #52]	; (800bd9c <HAL_PCD_MspInit+0x48>)
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	4a0c      	ldr	r2, [pc, #48]	; (800bd9c <HAL_PCD_MspInit+0x48>)
 800bd6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd70:	61d3      	str	r3, [r2, #28]
 800bd72:	4b0a      	ldr	r3, [pc, #40]	; (800bd9c <HAL_PCD_MspInit+0x48>)
 800bd74:	69db      	ldr	r3, [r3, #28]
 800bd76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bd7e:	2200      	movs	r2, #0
 800bd80:	2100      	movs	r1, #0
 800bd82:	2014      	movs	r0, #20
 800bd84:	f7f8 fb65 	bl	8004452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bd88:	2014      	movs	r0, #20
 800bd8a:	f7f8 fb7e 	bl	800448a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bd8e:	bf00      	nop
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	40005c00 	.word	0x40005c00
 800bd9c:	40021000 	.word	0x40021000

0800bda0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f7fe fc3b 	bl	800a632 <USBD_LL_SetupStage>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bdd6:	78fa      	ldrb	r2, [r7, #3]
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	00db      	lsls	r3, r3, #3
 800bde2:	440b      	add	r3, r1
 800bde4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	78fb      	ldrb	r3, [r7, #3]
 800bdec:	4619      	mov	r1, r3
 800bdee:	f7fe fc6d 	bl	800a6cc <USBD_LL_DataOutStage>
}
 800bdf2:	bf00      	nop
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	460b      	mov	r3, r1
 800be04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800be0c:	78fa      	ldrb	r2, [r7, #3]
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	440b      	add	r3, r1
 800be1a:	333c      	adds	r3, #60	; 0x3c
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	78fb      	ldrb	r3, [r7, #3]
 800be20:	4619      	mov	r1, r3
 800be22:	f7fe fcc4 	bl	800a7ae <USBD_LL_DataInStage>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fdd4 	bl	800a9ea <USBD_LL_SOF>
}
 800be42:	bf00      	nop
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be52:	2301      	movs	r3, #1
 800be54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d001      	beq.n	800be62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be5e:	f7f7 fa75 	bl	800334c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800be68:	7bfa      	ldrb	r2, [r7, #15]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fe fd84 	bl	800a97a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fe fd3d 	bl	800a8f8 <USBD_LL_Reset>
}
 800be7e:	bf00      	nop
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe fd7e 	bl	800a998 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bea4:	4b04      	ldr	r3, [pc, #16]	; (800beb8 <HAL_PCD_SuspendCallback+0x30>)
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	4a03      	ldr	r2, [pc, #12]	; (800beb8 <HAL_PCD_SuspendCallback+0x30>)
 800beaa:	f043 0306 	orr.w	r3, r3, #6
 800beae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	e000ed00 	.word	0xe000ed00

0800bebc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fd78 	bl	800a9c0 <USBD_LL_Resume>
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bee0:	4a28      	ldr	r2, [pc, #160]	; (800bf84 <USBD_LL_Init+0xac>)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a26      	ldr	r2, [pc, #152]	; (800bf84 <USBD_LL_Init+0xac>)
 800beec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bef0:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <USBD_LL_Init+0xac>)
 800bef2:	4a25      	ldr	r2, [pc, #148]	; (800bf88 <USBD_LL_Init+0xb0>)
 800bef4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bef6:	4b23      	ldr	r3, [pc, #140]	; (800bf84 <USBD_LL_Init+0xac>)
 800bef8:	2208      	movs	r2, #8
 800befa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800befc:	4b21      	ldr	r3, [pc, #132]	; (800bf84 <USBD_LL_Init+0xac>)
 800befe:	2202      	movs	r2, #2
 800bf00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bf02:	4b20      	ldr	r3, [pc, #128]	; (800bf84 <USBD_LL_Init+0xac>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bf08:	4b1e      	ldr	r3, [pc, #120]	; (800bf84 <USBD_LL_Init+0xac>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bf0e:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <USBD_LL_Init+0xac>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bf14:	481b      	ldr	r0, [pc, #108]	; (800bf84 <USBD_LL_Init+0xac>)
 800bf16:	f7f8 fea2 	bl	8004c5e <HAL_PCD_Init>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bf20:	f7f7 fa14 	bl	800334c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf2a:	2318      	movs	r3, #24
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f7fa f9e4 	bl	80062fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf3a:	2358      	movs	r3, #88	; 0x58
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	f7fa f9dc 	bl	80062fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf4a:	23c0      	movs	r3, #192	; 0xc0
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2181      	movs	r1, #129	; 0x81
 800bf50:	f7fa f9d4 	bl	80062fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2101      	movs	r1, #1
 800bf62:	f7fa f9cb 	bl	80062fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf70:	2200      	movs	r2, #0
 800bf72:	2182      	movs	r1, #130	; 0x82
 800bf74:	f7fa f9c2 	bl	80062fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20000ec4 	.word	0x20000ec4
 800bf88:	40005c00 	.word	0x40005c00

0800bf8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7f8 ff66 	bl	8004e74 <HAL_PCD_Start>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f94e 	bl	800c250 <USBD_Get_USB_Status>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	4611      	mov	r1, r2
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	70fb      	strb	r3, [r7, #3]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	70bb      	strb	r3, [r7, #2]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfea:	78bb      	ldrb	r3, [r7, #2]
 800bfec:	883a      	ldrh	r2, [r7, #0]
 800bfee:	78f9      	ldrb	r1, [r7, #3]
 800bff0:	f7f9 f8e0 	bl	80051b4 <HAL_PCD_EP_Open>
 800bff4:	4603      	mov	r3, r0
 800bff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f000 f928 	bl	800c250 <USBD_Get_USB_Status>
 800c000:	4603      	mov	r3, r0
 800c002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c004:	7bbb      	ldrb	r3, [r7, #14]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01e:	2300      	movs	r3, #0
 800c020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c028:	78fa      	ldrb	r2, [r7, #3]
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7f9 f927 	bl	8005280 <HAL_PCD_EP_Close>
 800c032:	4603      	mov	r3, r0
 800c034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 f909 	bl	800c250 <USBD_Get_USB_Status>
 800c03e:	4603      	mov	r3, r0
 800c040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c042:	7bbb      	ldrb	r3, [r7, #14]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c058:	2300      	movs	r3, #0
 800c05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c066:	78fa      	ldrb	r2, [r7, #3]
 800c068:	4611      	mov	r1, r2
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7f9 f9e7 	bl	800543e <HAL_PCD_EP_SetStall>
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	4618      	mov	r0, r3
 800c078:	f000 f8ea 	bl	800c250 <USBD_Get_USB_Status>
 800c07c:	4603      	mov	r3, r0
 800c07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c080:	7bbb      	ldrb	r3, [r7, #14]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0a4:	78fa      	ldrb	r2, [r7, #3]
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7f9 fa28 	bl	80054fe <HAL_PCD_EP_ClrStall>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 f8cb 	bl	800c250 <USBD_Get_USB_Status>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0be:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c0dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da0c      	bge.n	800c0fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c0e4:	78fb      	ldrb	r3, [r7, #3]
 800c0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ea:	68f9      	ldr	r1, [r7, #12]
 800c0ec:	1c5a      	adds	r2, r3, #1
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	e00b      	b.n	800c116 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c0fe:	78fb      	ldrb	r3, [r7, #3]
 800c100:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c104:	68f9      	ldr	r1, [r7, #12]
 800c106:	4613      	mov	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	440b      	add	r3, r1
 800c110:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c114:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c116:	4618      	mov	r0, r3
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bc80      	pop	{r7}
 800c11e:	4770      	bx	lr

0800c120 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	460b      	mov	r3, r1
 800c12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c13a:	78fa      	ldrb	r2, [r7, #3]
 800c13c:	4611      	mov	r1, r2
 800c13e:	4618      	mov	r0, r3
 800c140:	f7f9 f813 	bl	800516a <HAL_PCD_SetAddress>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f880 	bl	800c250 <USBD_Get_USB_Status>
 800c150:	4603      	mov	r3, r0
 800c152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c154:	7bbb      	ldrb	r3, [r7, #14]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	461a      	mov	r2, r3
 800c16a:	460b      	mov	r3, r1
 800c16c:	72fb      	strb	r3, [r7, #11]
 800c16e:	4613      	mov	r3, r2
 800c170:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c176:	2300      	movs	r3, #0
 800c178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c180:	893b      	ldrh	r3, [r7, #8]
 800c182:	7af9      	ldrb	r1, [r7, #11]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	f7f9 f917 	bl	80053b8 <HAL_PCD_EP_Transmit>
 800c18a:	4603      	mov	r3, r0
 800c18c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c18e:	7dfb      	ldrb	r3, [r7, #23]
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f85d 	bl	800c250 <USBD_Get_USB_Status>
 800c196:	4603      	mov	r3, r0
 800c198:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c19a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	72fb      	strb	r3, [r7, #11]
 800c1b4:	4613      	mov	r3, r2
 800c1b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1c6:	893b      	ldrh	r3, [r7, #8]
 800c1c8:	7af9      	ldrb	r1, [r7, #11]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	f7f9 f8a0 	bl	8005310 <HAL_PCD_EP_Receive>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f83a 	bl	800c250 <USBD_Get_USB_Status>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c1e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1fc:	78fa      	ldrb	r2, [r7, #3]
 800c1fe:	4611      	mov	r1, r2
 800c200:	4618      	mov	r0, r3
 800c202:	f7f9 f8c2 	bl	800538a <HAL_PCD_EP_GetRxCount>
 800c206:	4603      	mov	r3, r0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c218:	4b02      	ldr	r3, [pc, #8]	; (800c224 <USBD_static_malloc+0x14>)
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	bc80      	pop	{r7}
 800c222:	4770      	bx	lr
 800c224:	20000290 	.word	0x20000290

0800c228 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]

}
 800c230:	bf00      	nop
 800c232:	370c      	adds	r7, #12
 800c234:	46bd      	mov	sp, r7
 800c236:	bc80      	pop	{r7}
 800c238:	4770      	bx	lr

0800c23a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c23a:	b480      	push	{r7}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	460b      	mov	r3, r1
 800c244:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c246:	bf00      	nop
 800c248:	370c      	adds	r7, #12
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bc80      	pop	{r7}
 800c24e:	4770      	bx	lr

0800c250 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c250:	b480      	push	{r7}
 800c252:	b085      	sub	sp, #20
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	2b03      	cmp	r3, #3
 800c262:	d817      	bhi.n	800c294 <USBD_Get_USB_Status+0x44>
 800c264:	a201      	add	r2, pc, #4	; (adr r2, 800c26c <USBD_Get_USB_Status+0x1c>)
 800c266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26a:	bf00      	nop
 800c26c:	0800c27d 	.word	0x0800c27d
 800c270:	0800c283 	.word	0x0800c283
 800c274:	0800c289 	.word	0x0800c289
 800c278:	0800c28f 	.word	0x0800c28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c27c:	2300      	movs	r3, #0
 800c27e:	73fb      	strb	r3, [r7, #15]
    break;
 800c280:	e00b      	b.n	800c29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c282:	2302      	movs	r3, #2
 800c284:	73fb      	strb	r3, [r7, #15]
    break;
 800c286:	e008      	b.n	800c29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c288:	2301      	movs	r3, #1
 800c28a:	73fb      	strb	r3, [r7, #15]
    break;
 800c28c:	e005      	b.n	800c29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c28e:	2302      	movs	r3, #2
 800c290:	73fb      	strb	r3, [r7, #15]
    break;
 800c292:	e002      	b.n	800c29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c294:	2302      	movs	r3, #2
 800c296:	73fb      	strb	r3, [r7, #15]
    break;
 800c298:	bf00      	nop
  }
  return usb_status;
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bc80      	pop	{r7}
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop

0800c2a8 <__errno>:
 800c2a8:	4b01      	ldr	r3, [pc, #4]	; (800c2b0 <__errno+0x8>)
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	20000190 	.word	0x20000190

0800c2b4 <__libc_init_array>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	2600      	movs	r6, #0
 800c2b8:	4d0c      	ldr	r5, [pc, #48]	; (800c2ec <__libc_init_array+0x38>)
 800c2ba:	4c0d      	ldr	r4, [pc, #52]	; (800c2f0 <__libc_init_array+0x3c>)
 800c2bc:	1b64      	subs	r4, r4, r5
 800c2be:	10a4      	asrs	r4, r4, #2
 800c2c0:	42a6      	cmp	r6, r4
 800c2c2:	d109      	bne.n	800c2d8 <__libc_init_array+0x24>
 800c2c4:	f001 f9d4 	bl	800d670 <_init>
 800c2c8:	2600      	movs	r6, #0
 800c2ca:	4d0a      	ldr	r5, [pc, #40]	; (800c2f4 <__libc_init_array+0x40>)
 800c2cc:	4c0a      	ldr	r4, [pc, #40]	; (800c2f8 <__libc_init_array+0x44>)
 800c2ce:	1b64      	subs	r4, r4, r5
 800c2d0:	10a4      	asrs	r4, r4, #2
 800c2d2:	42a6      	cmp	r6, r4
 800c2d4:	d105      	bne.n	800c2e2 <__libc_init_array+0x2e>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2dc:	4798      	blx	r3
 800c2de:	3601      	adds	r6, #1
 800c2e0:	e7ee      	b.n	800c2c0 <__libc_init_array+0xc>
 800c2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e6:	4798      	blx	r3
 800c2e8:	3601      	adds	r6, #1
 800c2ea:	e7f2      	b.n	800c2d2 <__libc_init_array+0x1e>
 800c2ec:	0800d878 	.word	0x0800d878
 800c2f0:	0800d878 	.word	0x0800d878
 800c2f4:	0800d878 	.word	0x0800d878
 800c2f8:	0800d87c 	.word	0x0800d87c

0800c2fc <memcpy>:
 800c2fc:	440a      	add	r2, r1
 800c2fe:	4291      	cmp	r1, r2
 800c300:	f100 33ff 	add.w	r3, r0, #4294967295
 800c304:	d100      	bne.n	800c308 <memcpy+0xc>
 800c306:	4770      	bx	lr
 800c308:	b510      	push	{r4, lr}
 800c30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c30e:	4291      	cmp	r1, r2
 800c310:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c314:	d1f9      	bne.n	800c30a <memcpy+0xe>
 800c316:	bd10      	pop	{r4, pc}

0800c318 <memset>:
 800c318:	4603      	mov	r3, r0
 800c31a:	4402      	add	r2, r0
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d100      	bne.n	800c322 <memset+0xa>
 800c320:	4770      	bx	lr
 800c322:	f803 1b01 	strb.w	r1, [r3], #1
 800c326:	e7f9      	b.n	800c31c <memset+0x4>

0800c328 <iprintf>:
 800c328:	b40f      	push	{r0, r1, r2, r3}
 800c32a:	4b0a      	ldr	r3, [pc, #40]	; (800c354 <iprintf+0x2c>)
 800c32c:	b513      	push	{r0, r1, r4, lr}
 800c32e:	681c      	ldr	r4, [r3, #0]
 800c330:	b124      	cbz	r4, 800c33c <iprintf+0x14>
 800c332:	69a3      	ldr	r3, [r4, #24]
 800c334:	b913      	cbnz	r3, 800c33c <iprintf+0x14>
 800c336:	4620      	mov	r0, r4
 800c338:	f000 f886 	bl	800c448 <__sinit>
 800c33c:	ab05      	add	r3, sp, #20
 800c33e:	4620      	mov	r0, r4
 800c340:	9a04      	ldr	r2, [sp, #16]
 800c342:	68a1      	ldr	r1, [r4, #8]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	f000 fafd 	bl	800c944 <_vfiprintf_r>
 800c34a:	b002      	add	sp, #8
 800c34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c350:	b004      	add	sp, #16
 800c352:	4770      	bx	lr
 800c354:	20000190 	.word	0x20000190

0800c358 <siprintf>:
 800c358:	b40e      	push	{r1, r2, r3}
 800c35a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c35e:	b500      	push	{lr}
 800c360:	b09c      	sub	sp, #112	; 0x70
 800c362:	ab1d      	add	r3, sp, #116	; 0x74
 800c364:	9002      	str	r0, [sp, #8]
 800c366:	9006      	str	r0, [sp, #24]
 800c368:	9107      	str	r1, [sp, #28]
 800c36a:	9104      	str	r1, [sp, #16]
 800c36c:	4808      	ldr	r0, [pc, #32]	; (800c390 <siprintf+0x38>)
 800c36e:	4909      	ldr	r1, [pc, #36]	; (800c394 <siprintf+0x3c>)
 800c370:	f853 2b04 	ldr.w	r2, [r3], #4
 800c374:	9105      	str	r1, [sp, #20]
 800c376:	6800      	ldr	r0, [r0, #0]
 800c378:	a902      	add	r1, sp, #8
 800c37a:	9301      	str	r3, [sp, #4]
 800c37c:	f000 f9ba 	bl	800c6f4 <_svfiprintf_r>
 800c380:	2200      	movs	r2, #0
 800c382:	9b02      	ldr	r3, [sp, #8]
 800c384:	701a      	strb	r2, [r3, #0]
 800c386:	b01c      	add	sp, #112	; 0x70
 800c388:	f85d eb04 	ldr.w	lr, [sp], #4
 800c38c:	b003      	add	sp, #12
 800c38e:	4770      	bx	lr
 800c390:	20000190 	.word	0x20000190
 800c394:	ffff0208 	.word	0xffff0208

0800c398 <std>:
 800c398:	2300      	movs	r3, #0
 800c39a:	b510      	push	{r4, lr}
 800c39c:	4604      	mov	r4, r0
 800c39e:	e9c0 3300 	strd	r3, r3, [r0]
 800c3a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3a6:	6083      	str	r3, [r0, #8]
 800c3a8:	8181      	strh	r1, [r0, #12]
 800c3aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c3ac:	81c2      	strh	r2, [r0, #14]
 800c3ae:	6183      	str	r3, [r0, #24]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	2208      	movs	r2, #8
 800c3b4:	305c      	adds	r0, #92	; 0x5c
 800c3b6:	f7ff ffaf 	bl	800c318 <memset>
 800c3ba:	4b05      	ldr	r3, [pc, #20]	; (800c3d0 <std+0x38>)
 800c3bc:	6224      	str	r4, [r4, #32]
 800c3be:	6263      	str	r3, [r4, #36]	; 0x24
 800c3c0:	4b04      	ldr	r3, [pc, #16]	; (800c3d4 <std+0x3c>)
 800c3c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <std+0x40>)
 800c3c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3c8:	4b04      	ldr	r3, [pc, #16]	; (800c3dc <std+0x44>)
 800c3ca:	6323      	str	r3, [r4, #48]	; 0x30
 800c3cc:	bd10      	pop	{r4, pc}
 800c3ce:	bf00      	nop
 800c3d0:	0800cef1 	.word	0x0800cef1
 800c3d4:	0800cf13 	.word	0x0800cf13
 800c3d8:	0800cf4b 	.word	0x0800cf4b
 800c3dc:	0800cf6f 	.word	0x0800cf6f

0800c3e0 <_cleanup_r>:
 800c3e0:	4901      	ldr	r1, [pc, #4]	; (800c3e8 <_cleanup_r+0x8>)
 800c3e2:	f000 b8af 	b.w	800c544 <_fwalk_reent>
 800c3e6:	bf00      	nop
 800c3e8:	0800d249 	.word	0x0800d249

0800c3ec <__sfmoreglue>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	2568      	movs	r5, #104	; 0x68
 800c3f0:	1e4a      	subs	r2, r1, #1
 800c3f2:	4355      	muls	r5, r2
 800c3f4:	460e      	mov	r6, r1
 800c3f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3fa:	f000 f8c5 	bl	800c588 <_malloc_r>
 800c3fe:	4604      	mov	r4, r0
 800c400:	b140      	cbz	r0, 800c414 <__sfmoreglue+0x28>
 800c402:	2100      	movs	r1, #0
 800c404:	e9c0 1600 	strd	r1, r6, [r0]
 800c408:	300c      	adds	r0, #12
 800c40a:	60a0      	str	r0, [r4, #8]
 800c40c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c410:	f7ff ff82 	bl	800c318 <memset>
 800c414:	4620      	mov	r0, r4
 800c416:	bd70      	pop	{r4, r5, r6, pc}

0800c418 <__sfp_lock_acquire>:
 800c418:	4801      	ldr	r0, [pc, #4]	; (800c420 <__sfp_lock_acquire+0x8>)
 800c41a:	f000 b8b3 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c41e:	bf00      	nop
 800c420:	200011b8 	.word	0x200011b8

0800c424 <__sfp_lock_release>:
 800c424:	4801      	ldr	r0, [pc, #4]	; (800c42c <__sfp_lock_release+0x8>)
 800c426:	f000 b8ae 	b.w	800c586 <__retarget_lock_release_recursive>
 800c42a:	bf00      	nop
 800c42c:	200011b8 	.word	0x200011b8

0800c430 <__sinit_lock_acquire>:
 800c430:	4801      	ldr	r0, [pc, #4]	; (800c438 <__sinit_lock_acquire+0x8>)
 800c432:	f000 b8a7 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800c436:	bf00      	nop
 800c438:	200011b3 	.word	0x200011b3

0800c43c <__sinit_lock_release>:
 800c43c:	4801      	ldr	r0, [pc, #4]	; (800c444 <__sinit_lock_release+0x8>)
 800c43e:	f000 b8a2 	b.w	800c586 <__retarget_lock_release_recursive>
 800c442:	bf00      	nop
 800c444:	200011b3 	.word	0x200011b3

0800c448 <__sinit>:
 800c448:	b510      	push	{r4, lr}
 800c44a:	4604      	mov	r4, r0
 800c44c:	f7ff fff0 	bl	800c430 <__sinit_lock_acquire>
 800c450:	69a3      	ldr	r3, [r4, #24]
 800c452:	b11b      	cbz	r3, 800c45c <__sinit+0x14>
 800c454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c458:	f7ff bff0 	b.w	800c43c <__sinit_lock_release>
 800c45c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c460:	6523      	str	r3, [r4, #80]	; 0x50
 800c462:	4b13      	ldr	r3, [pc, #76]	; (800c4b0 <__sinit+0x68>)
 800c464:	4a13      	ldr	r2, [pc, #76]	; (800c4b4 <__sinit+0x6c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	62a2      	str	r2, [r4, #40]	; 0x28
 800c46a:	42a3      	cmp	r3, r4
 800c46c:	bf08      	it	eq
 800c46e:	2301      	moveq	r3, #1
 800c470:	4620      	mov	r0, r4
 800c472:	bf08      	it	eq
 800c474:	61a3      	streq	r3, [r4, #24]
 800c476:	f000 f81f 	bl	800c4b8 <__sfp>
 800c47a:	6060      	str	r0, [r4, #4]
 800c47c:	4620      	mov	r0, r4
 800c47e:	f000 f81b 	bl	800c4b8 <__sfp>
 800c482:	60a0      	str	r0, [r4, #8]
 800c484:	4620      	mov	r0, r4
 800c486:	f000 f817 	bl	800c4b8 <__sfp>
 800c48a:	2200      	movs	r2, #0
 800c48c:	2104      	movs	r1, #4
 800c48e:	60e0      	str	r0, [r4, #12]
 800c490:	6860      	ldr	r0, [r4, #4]
 800c492:	f7ff ff81 	bl	800c398 <std>
 800c496:	2201      	movs	r2, #1
 800c498:	2109      	movs	r1, #9
 800c49a:	68a0      	ldr	r0, [r4, #8]
 800c49c:	f7ff ff7c 	bl	800c398 <std>
 800c4a0:	2202      	movs	r2, #2
 800c4a2:	2112      	movs	r1, #18
 800c4a4:	68e0      	ldr	r0, [r4, #12]
 800c4a6:	f7ff ff77 	bl	800c398 <std>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	61a3      	str	r3, [r4, #24]
 800c4ae:	e7d1      	b.n	800c454 <__sinit+0xc>
 800c4b0:	0800d7e0 	.word	0x0800d7e0
 800c4b4:	0800c3e1 	.word	0x0800c3e1

0800c4b8 <__sfp>:
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	f7ff ffac 	bl	800c418 <__sfp_lock_acquire>
 800c4c0:	4b1e      	ldr	r3, [pc, #120]	; (800c53c <__sfp+0x84>)
 800c4c2:	681e      	ldr	r6, [r3, #0]
 800c4c4:	69b3      	ldr	r3, [r6, #24]
 800c4c6:	b913      	cbnz	r3, 800c4ce <__sfp+0x16>
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	f7ff ffbd 	bl	800c448 <__sinit>
 800c4ce:	3648      	adds	r6, #72	; 0x48
 800c4d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	d503      	bpl.n	800c4e0 <__sfp+0x28>
 800c4d8:	6833      	ldr	r3, [r6, #0]
 800c4da:	b30b      	cbz	r3, 800c520 <__sfp+0x68>
 800c4dc:	6836      	ldr	r6, [r6, #0]
 800c4de:	e7f7      	b.n	800c4d0 <__sfp+0x18>
 800c4e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4e4:	b9d5      	cbnz	r5, 800c51c <__sfp+0x64>
 800c4e6:	4b16      	ldr	r3, [pc, #88]	; (800c540 <__sfp+0x88>)
 800c4e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ec:	60e3      	str	r3, [r4, #12]
 800c4ee:	6665      	str	r5, [r4, #100]	; 0x64
 800c4f0:	f000 f847 	bl	800c582 <__retarget_lock_init_recursive>
 800c4f4:	f7ff ff96 	bl	800c424 <__sfp_lock_release>
 800c4f8:	2208      	movs	r2, #8
 800c4fa:	4629      	mov	r1, r5
 800c4fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c500:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c504:	6025      	str	r5, [r4, #0]
 800c506:	61a5      	str	r5, [r4, #24]
 800c508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c50c:	f7ff ff04 	bl	800c318 <memset>
 800c510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c518:	4620      	mov	r0, r4
 800c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c51c:	3468      	adds	r4, #104	; 0x68
 800c51e:	e7d9      	b.n	800c4d4 <__sfp+0x1c>
 800c520:	2104      	movs	r1, #4
 800c522:	4638      	mov	r0, r7
 800c524:	f7ff ff62 	bl	800c3ec <__sfmoreglue>
 800c528:	4604      	mov	r4, r0
 800c52a:	6030      	str	r0, [r6, #0]
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d1d5      	bne.n	800c4dc <__sfp+0x24>
 800c530:	f7ff ff78 	bl	800c424 <__sfp_lock_release>
 800c534:	230c      	movs	r3, #12
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	e7ee      	b.n	800c518 <__sfp+0x60>
 800c53a:	bf00      	nop
 800c53c:	0800d7e0 	.word	0x0800d7e0
 800c540:	ffff0001 	.word	0xffff0001

0800c544 <_fwalk_reent>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4606      	mov	r6, r0
 800c54a:	4688      	mov	r8, r1
 800c54c:	2700      	movs	r7, #0
 800c54e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c556:	f1b9 0901 	subs.w	r9, r9, #1
 800c55a:	d505      	bpl.n	800c568 <_fwalk_reent+0x24>
 800c55c:	6824      	ldr	r4, [r4, #0]
 800c55e:	2c00      	cmp	r4, #0
 800c560:	d1f7      	bne.n	800c552 <_fwalk_reent+0xe>
 800c562:	4638      	mov	r0, r7
 800c564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d907      	bls.n	800c57e <_fwalk_reent+0x3a>
 800c56e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c572:	3301      	adds	r3, #1
 800c574:	d003      	beq.n	800c57e <_fwalk_reent+0x3a>
 800c576:	4629      	mov	r1, r5
 800c578:	4630      	mov	r0, r6
 800c57a:	47c0      	blx	r8
 800c57c:	4307      	orrs	r7, r0
 800c57e:	3568      	adds	r5, #104	; 0x68
 800c580:	e7e9      	b.n	800c556 <_fwalk_reent+0x12>

0800c582 <__retarget_lock_init_recursive>:
 800c582:	4770      	bx	lr

0800c584 <__retarget_lock_acquire_recursive>:
 800c584:	4770      	bx	lr

0800c586 <__retarget_lock_release_recursive>:
 800c586:	4770      	bx	lr

0800c588 <_malloc_r>:
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58a:	1ccd      	adds	r5, r1, #3
 800c58c:	f025 0503 	bic.w	r5, r5, #3
 800c590:	3508      	adds	r5, #8
 800c592:	2d0c      	cmp	r5, #12
 800c594:	bf38      	it	cc
 800c596:	250c      	movcc	r5, #12
 800c598:	2d00      	cmp	r5, #0
 800c59a:	4606      	mov	r6, r0
 800c59c:	db01      	blt.n	800c5a2 <_malloc_r+0x1a>
 800c59e:	42a9      	cmp	r1, r5
 800c5a0:	d903      	bls.n	800c5aa <_malloc_r+0x22>
 800c5a2:	230c      	movs	r3, #12
 800c5a4:	6033      	str	r3, [r6, #0]
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5aa:	f000 ff27 	bl	800d3fc <__malloc_lock>
 800c5ae:	4921      	ldr	r1, [pc, #132]	; (800c634 <_malloc_r+0xac>)
 800c5b0:	680a      	ldr	r2, [r1, #0]
 800c5b2:	4614      	mov	r4, r2
 800c5b4:	b99c      	cbnz	r4, 800c5de <_malloc_r+0x56>
 800c5b6:	4f20      	ldr	r7, [pc, #128]	; (800c638 <_malloc_r+0xb0>)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	b923      	cbnz	r3, 800c5c6 <_malloc_r+0x3e>
 800c5bc:	4621      	mov	r1, r4
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f000 fc86 	bl	800ced0 <_sbrk_r>
 800c5c4:	6038      	str	r0, [r7, #0]
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f000 fc81 	bl	800ced0 <_sbrk_r>
 800c5ce:	1c43      	adds	r3, r0, #1
 800c5d0:	d123      	bne.n	800c61a <_malloc_r+0x92>
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	6033      	str	r3, [r6, #0]
 800c5d8:	f000 ff16 	bl	800d408 <__malloc_unlock>
 800c5dc:	e7e3      	b.n	800c5a6 <_malloc_r+0x1e>
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	1b5b      	subs	r3, r3, r5
 800c5e2:	d417      	bmi.n	800c614 <_malloc_r+0x8c>
 800c5e4:	2b0b      	cmp	r3, #11
 800c5e6:	d903      	bls.n	800c5f0 <_malloc_r+0x68>
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	441c      	add	r4, r3
 800c5ec:	6025      	str	r5, [r4, #0]
 800c5ee:	e004      	b.n	800c5fa <_malloc_r+0x72>
 800c5f0:	6863      	ldr	r3, [r4, #4]
 800c5f2:	42a2      	cmp	r2, r4
 800c5f4:	bf0c      	ite	eq
 800c5f6:	600b      	streq	r3, [r1, #0]
 800c5f8:	6053      	strne	r3, [r2, #4]
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	f000 ff04 	bl	800d408 <__malloc_unlock>
 800c600:	f104 000b 	add.w	r0, r4, #11
 800c604:	1d23      	adds	r3, r4, #4
 800c606:	f020 0007 	bic.w	r0, r0, #7
 800c60a:	1ac2      	subs	r2, r0, r3
 800c60c:	d0cc      	beq.n	800c5a8 <_malloc_r+0x20>
 800c60e:	1a1b      	subs	r3, r3, r0
 800c610:	50a3      	str	r3, [r4, r2]
 800c612:	e7c9      	b.n	800c5a8 <_malloc_r+0x20>
 800c614:	4622      	mov	r2, r4
 800c616:	6864      	ldr	r4, [r4, #4]
 800c618:	e7cc      	b.n	800c5b4 <_malloc_r+0x2c>
 800c61a:	1cc4      	adds	r4, r0, #3
 800c61c:	f024 0403 	bic.w	r4, r4, #3
 800c620:	42a0      	cmp	r0, r4
 800c622:	d0e3      	beq.n	800c5ec <_malloc_r+0x64>
 800c624:	1a21      	subs	r1, r4, r0
 800c626:	4630      	mov	r0, r6
 800c628:	f000 fc52 	bl	800ced0 <_sbrk_r>
 800c62c:	3001      	adds	r0, #1
 800c62e:	d1dd      	bne.n	800c5ec <_malloc_r+0x64>
 800c630:	e7cf      	b.n	800c5d2 <_malloc_r+0x4a>
 800c632:	bf00      	nop
 800c634:	200004b0 	.word	0x200004b0
 800c638:	200004b4 	.word	0x200004b4

0800c63c <__ssputs_r>:
 800c63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c640:	688e      	ldr	r6, [r1, #8]
 800c642:	4682      	mov	sl, r0
 800c644:	429e      	cmp	r6, r3
 800c646:	460c      	mov	r4, r1
 800c648:	4690      	mov	r8, r2
 800c64a:	461f      	mov	r7, r3
 800c64c:	d838      	bhi.n	800c6c0 <__ssputs_r+0x84>
 800c64e:	898a      	ldrh	r2, [r1, #12]
 800c650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c654:	d032      	beq.n	800c6bc <__ssputs_r+0x80>
 800c656:	6825      	ldr	r5, [r4, #0]
 800c658:	6909      	ldr	r1, [r1, #16]
 800c65a:	3301      	adds	r3, #1
 800c65c:	eba5 0901 	sub.w	r9, r5, r1
 800c660:	6965      	ldr	r5, [r4, #20]
 800c662:	444b      	add	r3, r9
 800c664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c66c:	106d      	asrs	r5, r5, #1
 800c66e:	429d      	cmp	r5, r3
 800c670:	bf38      	it	cc
 800c672:	461d      	movcc	r5, r3
 800c674:	0553      	lsls	r3, r2, #21
 800c676:	d531      	bpl.n	800c6dc <__ssputs_r+0xa0>
 800c678:	4629      	mov	r1, r5
 800c67a:	f7ff ff85 	bl	800c588 <_malloc_r>
 800c67e:	4606      	mov	r6, r0
 800c680:	b950      	cbnz	r0, 800c698 <__ssputs_r+0x5c>
 800c682:	230c      	movs	r3, #12
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	f8ca 3000 	str.w	r3, [sl]
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c698:	464a      	mov	r2, r9
 800c69a:	6921      	ldr	r1, [r4, #16]
 800c69c:	f7ff fe2e 	bl	800c2fc <memcpy>
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6aa:	81a3      	strh	r3, [r4, #12]
 800c6ac:	6126      	str	r6, [r4, #16]
 800c6ae:	444e      	add	r6, r9
 800c6b0:	6026      	str	r6, [r4, #0]
 800c6b2:	463e      	mov	r6, r7
 800c6b4:	6165      	str	r5, [r4, #20]
 800c6b6:	eba5 0509 	sub.w	r5, r5, r9
 800c6ba:	60a5      	str	r5, [r4, #8]
 800c6bc:	42be      	cmp	r6, r7
 800c6be:	d900      	bls.n	800c6c2 <__ssputs_r+0x86>
 800c6c0:	463e      	mov	r6, r7
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	4641      	mov	r1, r8
 800c6c6:	6820      	ldr	r0, [r4, #0]
 800c6c8:	f000 fe7e 	bl	800d3c8 <memmove>
 800c6cc:	68a3      	ldr	r3, [r4, #8]
 800c6ce:	6822      	ldr	r2, [r4, #0]
 800c6d0:	1b9b      	subs	r3, r3, r6
 800c6d2:	4432      	add	r2, r6
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	60a3      	str	r3, [r4, #8]
 800c6d8:	6022      	str	r2, [r4, #0]
 800c6da:	e7db      	b.n	800c694 <__ssputs_r+0x58>
 800c6dc:	462a      	mov	r2, r5
 800c6de:	f000 fee5 	bl	800d4ac <_realloc_r>
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d1e1      	bne.n	800c6ac <__ssputs_r+0x70>
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	6921      	ldr	r1, [r4, #16]
 800c6ec:	f000 fe92 	bl	800d414 <_free_r>
 800c6f0:	e7c7      	b.n	800c682 <__ssputs_r+0x46>
	...

0800c6f4 <_svfiprintf_r>:
 800c6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f8:	4698      	mov	r8, r3
 800c6fa:	898b      	ldrh	r3, [r1, #12]
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	061b      	lsls	r3, r3, #24
 800c700:	460d      	mov	r5, r1
 800c702:	4614      	mov	r4, r2
 800c704:	b09d      	sub	sp, #116	; 0x74
 800c706:	d50e      	bpl.n	800c726 <_svfiprintf_r+0x32>
 800c708:	690b      	ldr	r3, [r1, #16]
 800c70a:	b963      	cbnz	r3, 800c726 <_svfiprintf_r+0x32>
 800c70c:	2140      	movs	r1, #64	; 0x40
 800c70e:	f7ff ff3b 	bl	800c588 <_malloc_r>
 800c712:	6028      	str	r0, [r5, #0]
 800c714:	6128      	str	r0, [r5, #16]
 800c716:	b920      	cbnz	r0, 800c722 <_svfiprintf_r+0x2e>
 800c718:	230c      	movs	r3, #12
 800c71a:	603b      	str	r3, [r7, #0]
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	e0d1      	b.n	800c8c6 <_svfiprintf_r+0x1d2>
 800c722:	2340      	movs	r3, #64	; 0x40
 800c724:	616b      	str	r3, [r5, #20]
 800c726:	2300      	movs	r3, #0
 800c728:	9309      	str	r3, [sp, #36]	; 0x24
 800c72a:	2320      	movs	r3, #32
 800c72c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c730:	2330      	movs	r3, #48	; 0x30
 800c732:	f04f 0901 	mov.w	r9, #1
 800c736:	f8cd 800c 	str.w	r8, [sp, #12]
 800c73a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c8e0 <_svfiprintf_r+0x1ec>
 800c73e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c742:	4623      	mov	r3, r4
 800c744:	469a      	mov	sl, r3
 800c746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c74a:	b10a      	cbz	r2, 800c750 <_svfiprintf_r+0x5c>
 800c74c:	2a25      	cmp	r2, #37	; 0x25
 800c74e:	d1f9      	bne.n	800c744 <_svfiprintf_r+0x50>
 800c750:	ebba 0b04 	subs.w	fp, sl, r4
 800c754:	d00b      	beq.n	800c76e <_svfiprintf_r+0x7a>
 800c756:	465b      	mov	r3, fp
 800c758:	4622      	mov	r2, r4
 800c75a:	4629      	mov	r1, r5
 800c75c:	4638      	mov	r0, r7
 800c75e:	f7ff ff6d 	bl	800c63c <__ssputs_r>
 800c762:	3001      	adds	r0, #1
 800c764:	f000 80aa 	beq.w	800c8bc <_svfiprintf_r+0x1c8>
 800c768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c76a:	445a      	add	r2, fp
 800c76c:	9209      	str	r2, [sp, #36]	; 0x24
 800c76e:	f89a 3000 	ldrb.w	r3, [sl]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 80a2 	beq.w	800c8bc <_svfiprintf_r+0x1c8>
 800c778:	2300      	movs	r3, #0
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295
 800c77e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c782:	f10a 0a01 	add.w	sl, sl, #1
 800c786:	9304      	str	r3, [sp, #16]
 800c788:	9307      	str	r3, [sp, #28]
 800c78a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c78e:	931a      	str	r3, [sp, #104]	; 0x68
 800c790:	4654      	mov	r4, sl
 800c792:	2205      	movs	r2, #5
 800c794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c798:	4851      	ldr	r0, [pc, #324]	; (800c8e0 <_svfiprintf_r+0x1ec>)
 800c79a:	f000 fe07 	bl	800d3ac <memchr>
 800c79e:	9a04      	ldr	r2, [sp, #16]
 800c7a0:	b9d8      	cbnz	r0, 800c7da <_svfiprintf_r+0xe6>
 800c7a2:	06d0      	lsls	r0, r2, #27
 800c7a4:	bf44      	itt	mi
 800c7a6:	2320      	movmi	r3, #32
 800c7a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ac:	0711      	lsls	r1, r2, #28
 800c7ae:	bf44      	itt	mi
 800c7b0:	232b      	movmi	r3, #43	; 0x2b
 800c7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c7bc:	d015      	beq.n	800c7ea <_svfiprintf_r+0xf6>
 800c7be:	4654      	mov	r4, sl
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	f04f 0c0a 	mov.w	ip, #10
 800c7c6:	9a07      	ldr	r2, [sp, #28]
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ce:	3b30      	subs	r3, #48	; 0x30
 800c7d0:	2b09      	cmp	r3, #9
 800c7d2:	d94e      	bls.n	800c872 <_svfiprintf_r+0x17e>
 800c7d4:	b1b0      	cbz	r0, 800c804 <_svfiprintf_r+0x110>
 800c7d6:	9207      	str	r2, [sp, #28]
 800c7d8:	e014      	b.n	800c804 <_svfiprintf_r+0x110>
 800c7da:	eba0 0308 	sub.w	r3, r0, r8
 800c7de:	fa09 f303 	lsl.w	r3, r9, r3
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	46a2      	mov	sl, r4
 800c7e6:	9304      	str	r3, [sp, #16]
 800c7e8:	e7d2      	b.n	800c790 <_svfiprintf_r+0x9c>
 800c7ea:	9b03      	ldr	r3, [sp, #12]
 800c7ec:	1d19      	adds	r1, r3, #4
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	9103      	str	r1, [sp, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	bfbb      	ittet	lt
 800c7f6:	425b      	neglt	r3, r3
 800c7f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c7fc:	9307      	strge	r3, [sp, #28]
 800c7fe:	9307      	strlt	r3, [sp, #28]
 800c800:	bfb8      	it	lt
 800c802:	9204      	strlt	r2, [sp, #16]
 800c804:	7823      	ldrb	r3, [r4, #0]
 800c806:	2b2e      	cmp	r3, #46	; 0x2e
 800c808:	d10c      	bne.n	800c824 <_svfiprintf_r+0x130>
 800c80a:	7863      	ldrb	r3, [r4, #1]
 800c80c:	2b2a      	cmp	r3, #42	; 0x2a
 800c80e:	d135      	bne.n	800c87c <_svfiprintf_r+0x188>
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	3402      	adds	r4, #2
 800c814:	1d1a      	adds	r2, r3, #4
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	9203      	str	r2, [sp, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bfb8      	it	lt
 800c81e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c822:	9305      	str	r3, [sp, #20]
 800c824:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8f0 <_svfiprintf_r+0x1fc>
 800c828:	2203      	movs	r2, #3
 800c82a:	4650      	mov	r0, sl
 800c82c:	7821      	ldrb	r1, [r4, #0]
 800c82e:	f000 fdbd 	bl	800d3ac <memchr>
 800c832:	b140      	cbz	r0, 800c846 <_svfiprintf_r+0x152>
 800c834:	2340      	movs	r3, #64	; 0x40
 800c836:	eba0 000a 	sub.w	r0, r0, sl
 800c83a:	fa03 f000 	lsl.w	r0, r3, r0
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	3401      	adds	r4, #1
 800c842:	4303      	orrs	r3, r0
 800c844:	9304      	str	r3, [sp, #16]
 800c846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84a:	2206      	movs	r2, #6
 800c84c:	4825      	ldr	r0, [pc, #148]	; (800c8e4 <_svfiprintf_r+0x1f0>)
 800c84e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c852:	f000 fdab 	bl	800d3ac <memchr>
 800c856:	2800      	cmp	r0, #0
 800c858:	d038      	beq.n	800c8cc <_svfiprintf_r+0x1d8>
 800c85a:	4b23      	ldr	r3, [pc, #140]	; (800c8e8 <_svfiprintf_r+0x1f4>)
 800c85c:	bb1b      	cbnz	r3, 800c8a6 <_svfiprintf_r+0x1b2>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	3307      	adds	r3, #7
 800c862:	f023 0307 	bic.w	r3, r3, #7
 800c866:	3308      	adds	r3, #8
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c86c:	4433      	add	r3, r6
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	e767      	b.n	800c742 <_svfiprintf_r+0x4e>
 800c872:	460c      	mov	r4, r1
 800c874:	2001      	movs	r0, #1
 800c876:	fb0c 3202 	mla	r2, ip, r2, r3
 800c87a:	e7a5      	b.n	800c7c8 <_svfiprintf_r+0xd4>
 800c87c:	2300      	movs	r3, #0
 800c87e:	f04f 0c0a 	mov.w	ip, #10
 800c882:	4619      	mov	r1, r3
 800c884:	3401      	adds	r4, #1
 800c886:	9305      	str	r3, [sp, #20]
 800c888:	4620      	mov	r0, r4
 800c88a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c88e:	3a30      	subs	r2, #48	; 0x30
 800c890:	2a09      	cmp	r2, #9
 800c892:	d903      	bls.n	800c89c <_svfiprintf_r+0x1a8>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d0c5      	beq.n	800c824 <_svfiprintf_r+0x130>
 800c898:	9105      	str	r1, [sp, #20]
 800c89a:	e7c3      	b.n	800c824 <_svfiprintf_r+0x130>
 800c89c:	4604      	mov	r4, r0
 800c89e:	2301      	movs	r3, #1
 800c8a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8a4:	e7f0      	b.n	800c888 <_svfiprintf_r+0x194>
 800c8a6:	ab03      	add	r3, sp, #12
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <_svfiprintf_r+0x1f8>)
 800c8b0:	a904      	add	r1, sp, #16
 800c8b2:	f3af 8000 	nop.w
 800c8b6:	1c42      	adds	r2, r0, #1
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	d1d6      	bne.n	800c86a <_svfiprintf_r+0x176>
 800c8bc:	89ab      	ldrh	r3, [r5, #12]
 800c8be:	065b      	lsls	r3, r3, #25
 800c8c0:	f53f af2c 	bmi.w	800c71c <_svfiprintf_r+0x28>
 800c8c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c6:	b01d      	add	sp, #116	; 0x74
 800c8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8cc:	ab03      	add	r3, sp, #12
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	462a      	mov	r2, r5
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <_svfiprintf_r+0x1f8>)
 800c8d6:	a904      	add	r1, sp, #16
 800c8d8:	f000 f9d4 	bl	800cc84 <_printf_i>
 800c8dc:	e7eb      	b.n	800c8b6 <_svfiprintf_r+0x1c2>
 800c8de:	bf00      	nop
 800c8e0:	0800d844 	.word	0x0800d844
 800c8e4:	0800d84e 	.word	0x0800d84e
 800c8e8:	00000000 	.word	0x00000000
 800c8ec:	0800c63d 	.word	0x0800c63d
 800c8f0:	0800d84a 	.word	0x0800d84a

0800c8f4 <__sfputc_r>:
 800c8f4:	6893      	ldr	r3, [r2, #8]
 800c8f6:	b410      	push	{r4}
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	6093      	str	r3, [r2, #8]
 800c8fe:	da07      	bge.n	800c910 <__sfputc_r+0x1c>
 800c900:	6994      	ldr	r4, [r2, #24]
 800c902:	42a3      	cmp	r3, r4
 800c904:	db01      	blt.n	800c90a <__sfputc_r+0x16>
 800c906:	290a      	cmp	r1, #10
 800c908:	d102      	bne.n	800c910 <__sfputc_r+0x1c>
 800c90a:	bc10      	pop	{r4}
 800c90c:	f000 bb34 	b.w	800cf78 <__swbuf_r>
 800c910:	6813      	ldr	r3, [r2, #0]
 800c912:	1c58      	adds	r0, r3, #1
 800c914:	6010      	str	r0, [r2, #0]
 800c916:	7019      	strb	r1, [r3, #0]
 800c918:	4608      	mov	r0, r1
 800c91a:	bc10      	pop	{r4}
 800c91c:	4770      	bx	lr

0800c91e <__sfputs_r>:
 800c91e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c920:	4606      	mov	r6, r0
 800c922:	460f      	mov	r7, r1
 800c924:	4614      	mov	r4, r2
 800c926:	18d5      	adds	r5, r2, r3
 800c928:	42ac      	cmp	r4, r5
 800c92a:	d101      	bne.n	800c930 <__sfputs_r+0x12>
 800c92c:	2000      	movs	r0, #0
 800c92e:	e007      	b.n	800c940 <__sfputs_r+0x22>
 800c930:	463a      	mov	r2, r7
 800c932:	4630      	mov	r0, r6
 800c934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c938:	f7ff ffdc 	bl	800c8f4 <__sfputc_r>
 800c93c:	1c43      	adds	r3, r0, #1
 800c93e:	d1f3      	bne.n	800c928 <__sfputs_r+0xa>
 800c940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c944 <_vfiprintf_r>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	460d      	mov	r5, r1
 800c94a:	4614      	mov	r4, r2
 800c94c:	4698      	mov	r8, r3
 800c94e:	4606      	mov	r6, r0
 800c950:	b09d      	sub	sp, #116	; 0x74
 800c952:	b118      	cbz	r0, 800c95c <_vfiprintf_r+0x18>
 800c954:	6983      	ldr	r3, [r0, #24]
 800c956:	b90b      	cbnz	r3, 800c95c <_vfiprintf_r+0x18>
 800c958:	f7ff fd76 	bl	800c448 <__sinit>
 800c95c:	4b89      	ldr	r3, [pc, #548]	; (800cb84 <_vfiprintf_r+0x240>)
 800c95e:	429d      	cmp	r5, r3
 800c960:	d11b      	bne.n	800c99a <_vfiprintf_r+0x56>
 800c962:	6875      	ldr	r5, [r6, #4]
 800c964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c966:	07d9      	lsls	r1, r3, #31
 800c968:	d405      	bmi.n	800c976 <_vfiprintf_r+0x32>
 800c96a:	89ab      	ldrh	r3, [r5, #12]
 800c96c:	059a      	lsls	r2, r3, #22
 800c96e:	d402      	bmi.n	800c976 <_vfiprintf_r+0x32>
 800c970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c972:	f7ff fe07 	bl	800c584 <__retarget_lock_acquire_recursive>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	071b      	lsls	r3, r3, #28
 800c97a:	d501      	bpl.n	800c980 <_vfiprintf_r+0x3c>
 800c97c:	692b      	ldr	r3, [r5, #16]
 800c97e:	b9eb      	cbnz	r3, 800c9bc <_vfiprintf_r+0x78>
 800c980:	4629      	mov	r1, r5
 800c982:	4630      	mov	r0, r6
 800c984:	f000 fb5c 	bl	800d040 <__swsetup_r>
 800c988:	b1c0      	cbz	r0, 800c9bc <_vfiprintf_r+0x78>
 800c98a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c98c:	07dc      	lsls	r4, r3, #31
 800c98e:	d50e      	bpl.n	800c9ae <_vfiprintf_r+0x6a>
 800c990:	f04f 30ff 	mov.w	r0, #4294967295
 800c994:	b01d      	add	sp, #116	; 0x74
 800c996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99a:	4b7b      	ldr	r3, [pc, #492]	; (800cb88 <_vfiprintf_r+0x244>)
 800c99c:	429d      	cmp	r5, r3
 800c99e:	d101      	bne.n	800c9a4 <_vfiprintf_r+0x60>
 800c9a0:	68b5      	ldr	r5, [r6, #8]
 800c9a2:	e7df      	b.n	800c964 <_vfiprintf_r+0x20>
 800c9a4:	4b79      	ldr	r3, [pc, #484]	; (800cb8c <_vfiprintf_r+0x248>)
 800c9a6:	429d      	cmp	r5, r3
 800c9a8:	bf08      	it	eq
 800c9aa:	68f5      	ldreq	r5, [r6, #12]
 800c9ac:	e7da      	b.n	800c964 <_vfiprintf_r+0x20>
 800c9ae:	89ab      	ldrh	r3, [r5, #12]
 800c9b0:	0598      	lsls	r0, r3, #22
 800c9b2:	d4ed      	bmi.n	800c990 <_vfiprintf_r+0x4c>
 800c9b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9b6:	f7ff fde6 	bl	800c586 <__retarget_lock_release_recursive>
 800c9ba:	e7e9      	b.n	800c990 <_vfiprintf_r+0x4c>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9309      	str	r3, [sp, #36]	; 0x24
 800c9c0:	2320      	movs	r3, #32
 800c9c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9c6:	2330      	movs	r3, #48	; 0x30
 800c9c8:	f04f 0901 	mov.w	r9, #1
 800c9cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800cb90 <_vfiprintf_r+0x24c>
 800c9d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9d8:	4623      	mov	r3, r4
 800c9da:	469a      	mov	sl, r3
 800c9dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9e0:	b10a      	cbz	r2, 800c9e6 <_vfiprintf_r+0xa2>
 800c9e2:	2a25      	cmp	r2, #37	; 0x25
 800c9e4:	d1f9      	bne.n	800c9da <_vfiprintf_r+0x96>
 800c9e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9ea:	d00b      	beq.n	800ca04 <_vfiprintf_r+0xc0>
 800c9ec:	465b      	mov	r3, fp
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4629      	mov	r1, r5
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7ff ff93 	bl	800c91e <__sfputs_r>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f000 80aa 	beq.w	800cb52 <_vfiprintf_r+0x20e>
 800c9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca00:	445a      	add	r2, fp
 800ca02:	9209      	str	r2, [sp, #36]	; 0x24
 800ca04:	f89a 3000 	ldrb.w	r3, [sl]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 80a2 	beq.w	800cb52 <_vfiprintf_r+0x20e>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f04f 32ff 	mov.w	r2, #4294967295
 800ca14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca18:	f10a 0a01 	add.w	sl, sl, #1
 800ca1c:	9304      	str	r3, [sp, #16]
 800ca1e:	9307      	str	r3, [sp, #28]
 800ca20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca24:	931a      	str	r3, [sp, #104]	; 0x68
 800ca26:	4654      	mov	r4, sl
 800ca28:	2205      	movs	r2, #5
 800ca2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2e:	4858      	ldr	r0, [pc, #352]	; (800cb90 <_vfiprintf_r+0x24c>)
 800ca30:	f000 fcbc 	bl	800d3ac <memchr>
 800ca34:	9a04      	ldr	r2, [sp, #16]
 800ca36:	b9d8      	cbnz	r0, 800ca70 <_vfiprintf_r+0x12c>
 800ca38:	06d1      	lsls	r1, r2, #27
 800ca3a:	bf44      	itt	mi
 800ca3c:	2320      	movmi	r3, #32
 800ca3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca42:	0713      	lsls	r3, r2, #28
 800ca44:	bf44      	itt	mi
 800ca46:	232b      	movmi	r3, #43	; 0x2b
 800ca48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca50:	2b2a      	cmp	r3, #42	; 0x2a
 800ca52:	d015      	beq.n	800ca80 <_vfiprintf_r+0x13c>
 800ca54:	4654      	mov	r4, sl
 800ca56:	2000      	movs	r0, #0
 800ca58:	f04f 0c0a 	mov.w	ip, #10
 800ca5c:	9a07      	ldr	r2, [sp, #28]
 800ca5e:	4621      	mov	r1, r4
 800ca60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca64:	3b30      	subs	r3, #48	; 0x30
 800ca66:	2b09      	cmp	r3, #9
 800ca68:	d94e      	bls.n	800cb08 <_vfiprintf_r+0x1c4>
 800ca6a:	b1b0      	cbz	r0, 800ca9a <_vfiprintf_r+0x156>
 800ca6c:	9207      	str	r2, [sp, #28]
 800ca6e:	e014      	b.n	800ca9a <_vfiprintf_r+0x156>
 800ca70:	eba0 0308 	sub.w	r3, r0, r8
 800ca74:	fa09 f303 	lsl.w	r3, r9, r3
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	46a2      	mov	sl, r4
 800ca7c:	9304      	str	r3, [sp, #16]
 800ca7e:	e7d2      	b.n	800ca26 <_vfiprintf_r+0xe2>
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	1d19      	adds	r1, r3, #4
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	9103      	str	r1, [sp, #12]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	bfbb      	ittet	lt
 800ca8c:	425b      	neglt	r3, r3
 800ca8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca92:	9307      	strge	r3, [sp, #28]
 800ca94:	9307      	strlt	r3, [sp, #28]
 800ca96:	bfb8      	it	lt
 800ca98:	9204      	strlt	r2, [sp, #16]
 800ca9a:	7823      	ldrb	r3, [r4, #0]
 800ca9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca9e:	d10c      	bne.n	800caba <_vfiprintf_r+0x176>
 800caa0:	7863      	ldrb	r3, [r4, #1]
 800caa2:	2b2a      	cmp	r3, #42	; 0x2a
 800caa4:	d135      	bne.n	800cb12 <_vfiprintf_r+0x1ce>
 800caa6:	9b03      	ldr	r3, [sp, #12]
 800caa8:	3402      	adds	r4, #2
 800caaa:	1d1a      	adds	r2, r3, #4
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	9203      	str	r2, [sp, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bfb8      	it	lt
 800cab4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cab8:	9305      	str	r3, [sp, #20]
 800caba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cba0 <_vfiprintf_r+0x25c>
 800cabe:	2203      	movs	r2, #3
 800cac0:	4650      	mov	r0, sl
 800cac2:	7821      	ldrb	r1, [r4, #0]
 800cac4:	f000 fc72 	bl	800d3ac <memchr>
 800cac8:	b140      	cbz	r0, 800cadc <_vfiprintf_r+0x198>
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	eba0 000a 	sub.w	r0, r0, sl
 800cad0:	fa03 f000 	lsl.w	r0, r3, r0
 800cad4:	9b04      	ldr	r3, [sp, #16]
 800cad6:	3401      	adds	r4, #1
 800cad8:	4303      	orrs	r3, r0
 800cada:	9304      	str	r3, [sp, #16]
 800cadc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae0:	2206      	movs	r2, #6
 800cae2:	482c      	ldr	r0, [pc, #176]	; (800cb94 <_vfiprintf_r+0x250>)
 800cae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cae8:	f000 fc60 	bl	800d3ac <memchr>
 800caec:	2800      	cmp	r0, #0
 800caee:	d03f      	beq.n	800cb70 <_vfiprintf_r+0x22c>
 800caf0:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <_vfiprintf_r+0x254>)
 800caf2:	bb1b      	cbnz	r3, 800cb3c <_vfiprintf_r+0x1f8>
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	3307      	adds	r3, #7
 800caf8:	f023 0307 	bic.w	r3, r3, #7
 800cafc:	3308      	adds	r3, #8
 800cafe:	9303      	str	r3, [sp, #12]
 800cb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb02:	443b      	add	r3, r7
 800cb04:	9309      	str	r3, [sp, #36]	; 0x24
 800cb06:	e767      	b.n	800c9d8 <_vfiprintf_r+0x94>
 800cb08:	460c      	mov	r4, r1
 800cb0a:	2001      	movs	r0, #1
 800cb0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb10:	e7a5      	b.n	800ca5e <_vfiprintf_r+0x11a>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f04f 0c0a 	mov.w	ip, #10
 800cb18:	4619      	mov	r1, r3
 800cb1a:	3401      	adds	r4, #1
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	4620      	mov	r0, r4
 800cb20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb24:	3a30      	subs	r2, #48	; 0x30
 800cb26:	2a09      	cmp	r2, #9
 800cb28:	d903      	bls.n	800cb32 <_vfiprintf_r+0x1ee>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0c5      	beq.n	800caba <_vfiprintf_r+0x176>
 800cb2e:	9105      	str	r1, [sp, #20]
 800cb30:	e7c3      	b.n	800caba <_vfiprintf_r+0x176>
 800cb32:	4604      	mov	r4, r0
 800cb34:	2301      	movs	r3, #1
 800cb36:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb3a:	e7f0      	b.n	800cb1e <_vfiprintf_r+0x1da>
 800cb3c:	ab03      	add	r3, sp, #12
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	462a      	mov	r2, r5
 800cb42:	4630      	mov	r0, r6
 800cb44:	4b15      	ldr	r3, [pc, #84]	; (800cb9c <_vfiprintf_r+0x258>)
 800cb46:	a904      	add	r1, sp, #16
 800cb48:	f3af 8000 	nop.w
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	1c78      	adds	r0, r7, #1
 800cb50:	d1d6      	bne.n	800cb00 <_vfiprintf_r+0x1bc>
 800cb52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb54:	07d9      	lsls	r1, r3, #31
 800cb56:	d405      	bmi.n	800cb64 <_vfiprintf_r+0x220>
 800cb58:	89ab      	ldrh	r3, [r5, #12]
 800cb5a:	059a      	lsls	r2, r3, #22
 800cb5c:	d402      	bmi.n	800cb64 <_vfiprintf_r+0x220>
 800cb5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb60:	f7ff fd11 	bl	800c586 <__retarget_lock_release_recursive>
 800cb64:	89ab      	ldrh	r3, [r5, #12]
 800cb66:	065b      	lsls	r3, r3, #25
 800cb68:	f53f af12 	bmi.w	800c990 <_vfiprintf_r+0x4c>
 800cb6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb6e:	e711      	b.n	800c994 <_vfiprintf_r+0x50>
 800cb70:	ab03      	add	r3, sp, #12
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	462a      	mov	r2, r5
 800cb76:	4630      	mov	r0, r6
 800cb78:	4b08      	ldr	r3, [pc, #32]	; (800cb9c <_vfiprintf_r+0x258>)
 800cb7a:	a904      	add	r1, sp, #16
 800cb7c:	f000 f882 	bl	800cc84 <_printf_i>
 800cb80:	e7e4      	b.n	800cb4c <_vfiprintf_r+0x208>
 800cb82:	bf00      	nop
 800cb84:	0800d804 	.word	0x0800d804
 800cb88:	0800d824 	.word	0x0800d824
 800cb8c:	0800d7e4 	.word	0x0800d7e4
 800cb90:	0800d844 	.word	0x0800d844
 800cb94:	0800d84e 	.word	0x0800d84e
 800cb98:	00000000 	.word	0x00000000
 800cb9c:	0800c91f 	.word	0x0800c91f
 800cba0:	0800d84a 	.word	0x0800d84a

0800cba4 <_printf_common>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	4616      	mov	r6, r2
 800cbaa:	4699      	mov	r9, r3
 800cbac:	688a      	ldr	r2, [r1, #8]
 800cbae:	690b      	ldr	r3, [r1, #16]
 800cbb0:	4607      	mov	r7, r0
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	bfb8      	it	lt
 800cbb6:	4613      	movlt	r3, r2
 800cbb8:	6033      	str	r3, [r6, #0]
 800cbba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbc4:	b10a      	cbz	r2, 800cbca <_printf_common+0x26>
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	6033      	str	r3, [r6, #0]
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	0699      	lsls	r1, r3, #26
 800cbce:	bf42      	ittt	mi
 800cbd0:	6833      	ldrmi	r3, [r6, #0]
 800cbd2:	3302      	addmi	r3, #2
 800cbd4:	6033      	strmi	r3, [r6, #0]
 800cbd6:	6825      	ldr	r5, [r4, #0]
 800cbd8:	f015 0506 	ands.w	r5, r5, #6
 800cbdc:	d106      	bne.n	800cbec <_printf_common+0x48>
 800cbde:	f104 0a19 	add.w	sl, r4, #25
 800cbe2:	68e3      	ldr	r3, [r4, #12]
 800cbe4:	6832      	ldr	r2, [r6, #0]
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	dc28      	bgt.n	800cc3e <_printf_common+0x9a>
 800cbec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbf0:	1e13      	subs	r3, r2, #0
 800cbf2:	6822      	ldr	r2, [r4, #0]
 800cbf4:	bf18      	it	ne
 800cbf6:	2301      	movne	r3, #1
 800cbf8:	0692      	lsls	r2, r2, #26
 800cbfa:	d42d      	bmi.n	800cc58 <_printf_common+0xb4>
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc04:	47c0      	blx	r8
 800cc06:	3001      	adds	r0, #1
 800cc08:	d020      	beq.n	800cc4c <_printf_common+0xa8>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	68e5      	ldr	r5, [r4, #12]
 800cc0e:	f003 0306 	and.w	r3, r3, #6
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	bf18      	it	ne
 800cc16:	2500      	movne	r5, #0
 800cc18:	6832      	ldr	r2, [r6, #0]
 800cc1a:	f04f 0600 	mov.w	r6, #0
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	bf08      	it	eq
 800cc22:	1aad      	subeq	r5, r5, r2
 800cc24:	6922      	ldr	r2, [r4, #16]
 800cc26:	bf08      	it	eq
 800cc28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	bfc4      	itt	gt
 800cc30:	1a9b      	subgt	r3, r3, r2
 800cc32:	18ed      	addgt	r5, r5, r3
 800cc34:	341a      	adds	r4, #26
 800cc36:	42b5      	cmp	r5, r6
 800cc38:	d11a      	bne.n	800cc70 <_printf_common+0xcc>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	e008      	b.n	800cc50 <_printf_common+0xac>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	4652      	mov	r2, sl
 800cc42:	4649      	mov	r1, r9
 800cc44:	4638      	mov	r0, r7
 800cc46:	47c0      	blx	r8
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d103      	bne.n	800cc54 <_printf_common+0xb0>
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc54:	3501      	adds	r5, #1
 800cc56:	e7c4      	b.n	800cbe2 <_printf_common+0x3e>
 800cc58:	2030      	movs	r0, #48	; 0x30
 800cc5a:	18e1      	adds	r1, r4, r3
 800cc5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc60:	1c5a      	adds	r2, r3, #1
 800cc62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc66:	4422      	add	r2, r4
 800cc68:	3302      	adds	r3, #2
 800cc6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc6e:	e7c5      	b.n	800cbfc <_printf_common+0x58>
 800cc70:	2301      	movs	r3, #1
 800cc72:	4622      	mov	r2, r4
 800cc74:	4649      	mov	r1, r9
 800cc76:	4638      	mov	r0, r7
 800cc78:	47c0      	blx	r8
 800cc7a:	3001      	adds	r0, #1
 800cc7c:	d0e6      	beq.n	800cc4c <_printf_common+0xa8>
 800cc7e:	3601      	adds	r6, #1
 800cc80:	e7d9      	b.n	800cc36 <_printf_common+0x92>
	...

0800cc84 <_printf_i>:
 800cc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc88:	460c      	mov	r4, r1
 800cc8a:	7e27      	ldrb	r7, [r4, #24]
 800cc8c:	4691      	mov	r9, r2
 800cc8e:	2f78      	cmp	r7, #120	; 0x78
 800cc90:	4680      	mov	r8, r0
 800cc92:	469a      	mov	sl, r3
 800cc94:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cc96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc9a:	d807      	bhi.n	800ccac <_printf_i+0x28>
 800cc9c:	2f62      	cmp	r7, #98	; 0x62
 800cc9e:	d80a      	bhi.n	800ccb6 <_printf_i+0x32>
 800cca0:	2f00      	cmp	r7, #0
 800cca2:	f000 80d9 	beq.w	800ce58 <_printf_i+0x1d4>
 800cca6:	2f58      	cmp	r7, #88	; 0x58
 800cca8:	f000 80a4 	beq.w	800cdf4 <_printf_i+0x170>
 800ccac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccb4:	e03a      	b.n	800cd2c <_printf_i+0xa8>
 800ccb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccba:	2b15      	cmp	r3, #21
 800ccbc:	d8f6      	bhi.n	800ccac <_printf_i+0x28>
 800ccbe:	a001      	add	r0, pc, #4	; (adr r0, 800ccc4 <_printf_i+0x40>)
 800ccc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ccc4:	0800cd1d 	.word	0x0800cd1d
 800ccc8:	0800cd31 	.word	0x0800cd31
 800cccc:	0800ccad 	.word	0x0800ccad
 800ccd0:	0800ccad 	.word	0x0800ccad
 800ccd4:	0800ccad 	.word	0x0800ccad
 800ccd8:	0800ccad 	.word	0x0800ccad
 800ccdc:	0800cd31 	.word	0x0800cd31
 800cce0:	0800ccad 	.word	0x0800ccad
 800cce4:	0800ccad 	.word	0x0800ccad
 800cce8:	0800ccad 	.word	0x0800ccad
 800ccec:	0800ccad 	.word	0x0800ccad
 800ccf0:	0800ce3f 	.word	0x0800ce3f
 800ccf4:	0800cd61 	.word	0x0800cd61
 800ccf8:	0800ce21 	.word	0x0800ce21
 800ccfc:	0800ccad 	.word	0x0800ccad
 800cd00:	0800ccad 	.word	0x0800ccad
 800cd04:	0800ce61 	.word	0x0800ce61
 800cd08:	0800ccad 	.word	0x0800ccad
 800cd0c:	0800cd61 	.word	0x0800cd61
 800cd10:	0800ccad 	.word	0x0800ccad
 800cd14:	0800ccad 	.word	0x0800ccad
 800cd18:	0800ce29 	.word	0x0800ce29
 800cd1c:	680b      	ldr	r3, [r1, #0]
 800cd1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd22:	1d1a      	adds	r2, r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	600a      	str	r2, [r1, #0]
 800cd28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e0a4      	b.n	800ce7a <_printf_i+0x1f6>
 800cd30:	6825      	ldr	r5, [r4, #0]
 800cd32:	6808      	ldr	r0, [r1, #0]
 800cd34:	062e      	lsls	r6, r5, #24
 800cd36:	f100 0304 	add.w	r3, r0, #4
 800cd3a:	d50a      	bpl.n	800cd52 <_printf_i+0xce>
 800cd3c:	6805      	ldr	r5, [r0, #0]
 800cd3e:	600b      	str	r3, [r1, #0]
 800cd40:	2d00      	cmp	r5, #0
 800cd42:	da03      	bge.n	800cd4c <_printf_i+0xc8>
 800cd44:	232d      	movs	r3, #45	; 0x2d
 800cd46:	426d      	negs	r5, r5
 800cd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd4c:	230a      	movs	r3, #10
 800cd4e:	485e      	ldr	r0, [pc, #376]	; (800cec8 <_printf_i+0x244>)
 800cd50:	e019      	b.n	800cd86 <_printf_i+0x102>
 800cd52:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd56:	6805      	ldr	r5, [r0, #0]
 800cd58:	600b      	str	r3, [r1, #0]
 800cd5a:	bf18      	it	ne
 800cd5c:	b22d      	sxthne	r5, r5
 800cd5e:	e7ef      	b.n	800cd40 <_printf_i+0xbc>
 800cd60:	680b      	ldr	r3, [r1, #0]
 800cd62:	6825      	ldr	r5, [r4, #0]
 800cd64:	1d18      	adds	r0, r3, #4
 800cd66:	6008      	str	r0, [r1, #0]
 800cd68:	0628      	lsls	r0, r5, #24
 800cd6a:	d501      	bpl.n	800cd70 <_printf_i+0xec>
 800cd6c:	681d      	ldr	r5, [r3, #0]
 800cd6e:	e002      	b.n	800cd76 <_printf_i+0xf2>
 800cd70:	0669      	lsls	r1, r5, #25
 800cd72:	d5fb      	bpl.n	800cd6c <_printf_i+0xe8>
 800cd74:	881d      	ldrh	r5, [r3, #0]
 800cd76:	2f6f      	cmp	r7, #111	; 0x6f
 800cd78:	bf0c      	ite	eq
 800cd7a:	2308      	moveq	r3, #8
 800cd7c:	230a      	movne	r3, #10
 800cd7e:	4852      	ldr	r0, [pc, #328]	; (800cec8 <_printf_i+0x244>)
 800cd80:	2100      	movs	r1, #0
 800cd82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd86:	6866      	ldr	r6, [r4, #4]
 800cd88:	2e00      	cmp	r6, #0
 800cd8a:	bfa8      	it	ge
 800cd8c:	6821      	ldrge	r1, [r4, #0]
 800cd8e:	60a6      	str	r6, [r4, #8]
 800cd90:	bfa4      	itt	ge
 800cd92:	f021 0104 	bicge.w	r1, r1, #4
 800cd96:	6021      	strge	r1, [r4, #0]
 800cd98:	b90d      	cbnz	r5, 800cd9e <_printf_i+0x11a>
 800cd9a:	2e00      	cmp	r6, #0
 800cd9c:	d04d      	beq.n	800ce3a <_printf_i+0x1b6>
 800cd9e:	4616      	mov	r6, r2
 800cda0:	fbb5 f1f3 	udiv	r1, r5, r3
 800cda4:	fb03 5711 	mls	r7, r3, r1, r5
 800cda8:	5dc7      	ldrb	r7, [r0, r7]
 800cdaa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdae:	462f      	mov	r7, r5
 800cdb0:	42bb      	cmp	r3, r7
 800cdb2:	460d      	mov	r5, r1
 800cdb4:	d9f4      	bls.n	800cda0 <_printf_i+0x11c>
 800cdb6:	2b08      	cmp	r3, #8
 800cdb8:	d10b      	bne.n	800cdd2 <_printf_i+0x14e>
 800cdba:	6823      	ldr	r3, [r4, #0]
 800cdbc:	07df      	lsls	r7, r3, #31
 800cdbe:	d508      	bpl.n	800cdd2 <_printf_i+0x14e>
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	6861      	ldr	r1, [r4, #4]
 800cdc4:	4299      	cmp	r1, r3
 800cdc6:	bfde      	ittt	le
 800cdc8:	2330      	movle	r3, #48	; 0x30
 800cdca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdd2:	1b92      	subs	r2, r2, r6
 800cdd4:	6122      	str	r2, [r4, #16]
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	4621      	mov	r1, r4
 800cdda:	4640      	mov	r0, r8
 800cddc:	f8cd a000 	str.w	sl, [sp]
 800cde0:	aa03      	add	r2, sp, #12
 800cde2:	f7ff fedf 	bl	800cba4 <_printf_common>
 800cde6:	3001      	adds	r0, #1
 800cde8:	d14c      	bne.n	800ce84 <_printf_i+0x200>
 800cdea:	f04f 30ff 	mov.w	r0, #4294967295
 800cdee:	b004      	add	sp, #16
 800cdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf4:	4834      	ldr	r0, [pc, #208]	; (800cec8 <_printf_i+0x244>)
 800cdf6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cdfa:	680e      	ldr	r6, [r1, #0]
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce02:	061f      	lsls	r7, r3, #24
 800ce04:	600e      	str	r6, [r1, #0]
 800ce06:	d514      	bpl.n	800ce32 <_printf_i+0x1ae>
 800ce08:	07d9      	lsls	r1, r3, #31
 800ce0a:	bf44      	itt	mi
 800ce0c:	f043 0320 	orrmi.w	r3, r3, #32
 800ce10:	6023      	strmi	r3, [r4, #0]
 800ce12:	b91d      	cbnz	r5, 800ce1c <_printf_i+0x198>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	f023 0320 	bic.w	r3, r3, #32
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	2310      	movs	r3, #16
 800ce1e:	e7af      	b.n	800cd80 <_printf_i+0xfc>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	f043 0320 	orr.w	r3, r3, #32
 800ce26:	6023      	str	r3, [r4, #0]
 800ce28:	2378      	movs	r3, #120	; 0x78
 800ce2a:	4828      	ldr	r0, [pc, #160]	; (800cecc <_printf_i+0x248>)
 800ce2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce30:	e7e3      	b.n	800cdfa <_printf_i+0x176>
 800ce32:	065e      	lsls	r6, r3, #25
 800ce34:	bf48      	it	mi
 800ce36:	b2ad      	uxthmi	r5, r5
 800ce38:	e7e6      	b.n	800ce08 <_printf_i+0x184>
 800ce3a:	4616      	mov	r6, r2
 800ce3c:	e7bb      	b.n	800cdb6 <_printf_i+0x132>
 800ce3e:	680b      	ldr	r3, [r1, #0]
 800ce40:	6826      	ldr	r6, [r4, #0]
 800ce42:	1d1d      	adds	r5, r3, #4
 800ce44:	6960      	ldr	r0, [r4, #20]
 800ce46:	600d      	str	r5, [r1, #0]
 800ce48:	0635      	lsls	r5, r6, #24
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	d501      	bpl.n	800ce52 <_printf_i+0x1ce>
 800ce4e:	6018      	str	r0, [r3, #0]
 800ce50:	e002      	b.n	800ce58 <_printf_i+0x1d4>
 800ce52:	0671      	lsls	r1, r6, #25
 800ce54:	d5fb      	bpl.n	800ce4e <_printf_i+0x1ca>
 800ce56:	8018      	strh	r0, [r3, #0]
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4616      	mov	r6, r2
 800ce5c:	6123      	str	r3, [r4, #16]
 800ce5e:	e7ba      	b.n	800cdd6 <_printf_i+0x152>
 800ce60:	680b      	ldr	r3, [r1, #0]
 800ce62:	1d1a      	adds	r2, r3, #4
 800ce64:	600a      	str	r2, [r1, #0]
 800ce66:	681e      	ldr	r6, [r3, #0]
 800ce68:	2100      	movs	r1, #0
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	6862      	ldr	r2, [r4, #4]
 800ce6e:	f000 fa9d 	bl	800d3ac <memchr>
 800ce72:	b108      	cbz	r0, 800ce78 <_printf_i+0x1f4>
 800ce74:	1b80      	subs	r0, r0, r6
 800ce76:	6060      	str	r0, [r4, #4]
 800ce78:	6863      	ldr	r3, [r4, #4]
 800ce7a:	6123      	str	r3, [r4, #16]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce82:	e7a8      	b.n	800cdd6 <_printf_i+0x152>
 800ce84:	4632      	mov	r2, r6
 800ce86:	4649      	mov	r1, r9
 800ce88:	4640      	mov	r0, r8
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	47d0      	blx	sl
 800ce8e:	3001      	adds	r0, #1
 800ce90:	d0ab      	beq.n	800cdea <_printf_i+0x166>
 800ce92:	6823      	ldr	r3, [r4, #0]
 800ce94:	079b      	lsls	r3, r3, #30
 800ce96:	d413      	bmi.n	800cec0 <_printf_i+0x23c>
 800ce98:	68e0      	ldr	r0, [r4, #12]
 800ce9a:	9b03      	ldr	r3, [sp, #12]
 800ce9c:	4298      	cmp	r0, r3
 800ce9e:	bfb8      	it	lt
 800cea0:	4618      	movlt	r0, r3
 800cea2:	e7a4      	b.n	800cdee <_printf_i+0x16a>
 800cea4:	2301      	movs	r3, #1
 800cea6:	4632      	mov	r2, r6
 800cea8:	4649      	mov	r1, r9
 800ceaa:	4640      	mov	r0, r8
 800ceac:	47d0      	blx	sl
 800ceae:	3001      	adds	r0, #1
 800ceb0:	d09b      	beq.n	800cdea <_printf_i+0x166>
 800ceb2:	3501      	adds	r5, #1
 800ceb4:	68e3      	ldr	r3, [r4, #12]
 800ceb6:	9903      	ldr	r1, [sp, #12]
 800ceb8:	1a5b      	subs	r3, r3, r1
 800ceba:	42ab      	cmp	r3, r5
 800cebc:	dcf2      	bgt.n	800cea4 <_printf_i+0x220>
 800cebe:	e7eb      	b.n	800ce98 <_printf_i+0x214>
 800cec0:	2500      	movs	r5, #0
 800cec2:	f104 0619 	add.w	r6, r4, #25
 800cec6:	e7f5      	b.n	800ceb4 <_printf_i+0x230>
 800cec8:	0800d855 	.word	0x0800d855
 800cecc:	0800d866 	.word	0x0800d866

0800ced0 <_sbrk_r>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	2300      	movs	r3, #0
 800ced4:	4d05      	ldr	r5, [pc, #20]	; (800ceec <_sbrk_r+0x1c>)
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7f6 fc46 	bl	800376c <_sbrk>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d102      	bne.n	800ceea <_sbrk_r+0x1a>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	b103      	cbz	r3, 800ceea <_sbrk_r+0x1a>
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	bd38      	pop	{r3, r4, r5, pc}
 800ceec:	200011bc 	.word	0x200011bc

0800cef0 <__sread>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	460c      	mov	r4, r1
 800cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef8:	f000 fafe 	bl	800d4f8 <_read_r>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	bfab      	itete	ge
 800cf00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf02:	89a3      	ldrhlt	r3, [r4, #12]
 800cf04:	181b      	addge	r3, r3, r0
 800cf06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf0a:	bfac      	ite	ge
 800cf0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf0e:	81a3      	strhlt	r3, [r4, #12]
 800cf10:	bd10      	pop	{r4, pc}

0800cf12 <__swrite>:
 800cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	461f      	mov	r7, r3
 800cf18:	898b      	ldrh	r3, [r1, #12]
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	05db      	lsls	r3, r3, #23
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4616      	mov	r6, r2
 800cf22:	d505      	bpl.n	800cf30 <__swrite+0x1e>
 800cf24:	2302      	movs	r3, #2
 800cf26:	2200      	movs	r2, #0
 800cf28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2c:	f000 f9c8 	bl	800d2c0 <_lseek_r>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	4632      	mov	r2, r6
 800cf34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf38:	81a3      	strh	r3, [r4, #12]
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	463b      	mov	r3, r7
 800cf3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	f000 b869 	b.w	800d01c <_write_r>

0800cf4a <__sseek>:
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf52:	f000 f9b5 	bl	800d2c0 <_lseek_r>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	bf15      	itete	ne
 800cf5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf66:	81a3      	strheq	r3, [r4, #12]
 800cf68:	bf18      	it	ne
 800cf6a:	81a3      	strhne	r3, [r4, #12]
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <__sclose>:
 800cf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf72:	f000 b8d3 	b.w	800d11c <_close_r>
	...

0800cf78 <__swbuf_r>:
 800cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7a:	460e      	mov	r6, r1
 800cf7c:	4614      	mov	r4, r2
 800cf7e:	4605      	mov	r5, r0
 800cf80:	b118      	cbz	r0, 800cf8a <__swbuf_r+0x12>
 800cf82:	6983      	ldr	r3, [r0, #24]
 800cf84:	b90b      	cbnz	r3, 800cf8a <__swbuf_r+0x12>
 800cf86:	f7ff fa5f 	bl	800c448 <__sinit>
 800cf8a:	4b21      	ldr	r3, [pc, #132]	; (800d010 <__swbuf_r+0x98>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	d12b      	bne.n	800cfe8 <__swbuf_r+0x70>
 800cf90:	686c      	ldr	r4, [r5, #4]
 800cf92:	69a3      	ldr	r3, [r4, #24]
 800cf94:	60a3      	str	r3, [r4, #8]
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	071a      	lsls	r2, r3, #28
 800cf9a:	d52f      	bpl.n	800cffc <__swbuf_r+0x84>
 800cf9c:	6923      	ldr	r3, [r4, #16]
 800cf9e:	b36b      	cbz	r3, 800cffc <__swbuf_r+0x84>
 800cfa0:	6923      	ldr	r3, [r4, #16]
 800cfa2:	6820      	ldr	r0, [r4, #0]
 800cfa4:	b2f6      	uxtb	r6, r6
 800cfa6:	1ac0      	subs	r0, r0, r3
 800cfa8:	6963      	ldr	r3, [r4, #20]
 800cfaa:	4637      	mov	r7, r6
 800cfac:	4283      	cmp	r3, r0
 800cfae:	dc04      	bgt.n	800cfba <__swbuf_r+0x42>
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f000 f948 	bl	800d248 <_fflush_r>
 800cfb8:	bb30      	cbnz	r0, 800d008 <__swbuf_r+0x90>
 800cfba:	68a3      	ldr	r3, [r4, #8]
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	60a3      	str	r3, [r4, #8]
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	1c5a      	adds	r2, r3, #1
 800cfc6:	6022      	str	r2, [r4, #0]
 800cfc8:	701e      	strb	r6, [r3, #0]
 800cfca:	6963      	ldr	r3, [r4, #20]
 800cfcc:	4283      	cmp	r3, r0
 800cfce:	d004      	beq.n	800cfda <__swbuf_r+0x62>
 800cfd0:	89a3      	ldrh	r3, [r4, #12]
 800cfd2:	07db      	lsls	r3, r3, #31
 800cfd4:	d506      	bpl.n	800cfe4 <__swbuf_r+0x6c>
 800cfd6:	2e0a      	cmp	r6, #10
 800cfd8:	d104      	bne.n	800cfe4 <__swbuf_r+0x6c>
 800cfda:	4621      	mov	r1, r4
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f000 f933 	bl	800d248 <_fflush_r>
 800cfe2:	b988      	cbnz	r0, 800d008 <__swbuf_r+0x90>
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe8:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <__swbuf_r+0x9c>)
 800cfea:	429c      	cmp	r4, r3
 800cfec:	d101      	bne.n	800cff2 <__swbuf_r+0x7a>
 800cfee:	68ac      	ldr	r4, [r5, #8]
 800cff0:	e7cf      	b.n	800cf92 <__swbuf_r+0x1a>
 800cff2:	4b09      	ldr	r3, [pc, #36]	; (800d018 <__swbuf_r+0xa0>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	bf08      	it	eq
 800cff8:	68ec      	ldreq	r4, [r5, #12]
 800cffa:	e7ca      	b.n	800cf92 <__swbuf_r+0x1a>
 800cffc:	4621      	mov	r1, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	f000 f81e 	bl	800d040 <__swsetup_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	d0cb      	beq.n	800cfa0 <__swbuf_r+0x28>
 800d008:	f04f 37ff 	mov.w	r7, #4294967295
 800d00c:	e7ea      	b.n	800cfe4 <__swbuf_r+0x6c>
 800d00e:	bf00      	nop
 800d010:	0800d804 	.word	0x0800d804
 800d014:	0800d824 	.word	0x0800d824
 800d018:	0800d7e4 	.word	0x0800d7e4

0800d01c <_write_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4604      	mov	r4, r0
 800d020:	4608      	mov	r0, r1
 800d022:	4611      	mov	r1, r2
 800d024:	2200      	movs	r2, #0
 800d026:	4d05      	ldr	r5, [pc, #20]	; (800d03c <_write_r+0x20>)
 800d028:	602a      	str	r2, [r5, #0]
 800d02a:	461a      	mov	r2, r3
 800d02c:	f7f5 f97a 	bl	8002324 <_write>
 800d030:	1c43      	adds	r3, r0, #1
 800d032:	d102      	bne.n	800d03a <_write_r+0x1e>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	b103      	cbz	r3, 800d03a <_write_r+0x1e>
 800d038:	6023      	str	r3, [r4, #0]
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	200011bc 	.word	0x200011bc

0800d040 <__swsetup_r>:
 800d040:	4b32      	ldr	r3, [pc, #200]	; (800d10c <__swsetup_r+0xcc>)
 800d042:	b570      	push	{r4, r5, r6, lr}
 800d044:	681d      	ldr	r5, [r3, #0]
 800d046:	4606      	mov	r6, r0
 800d048:	460c      	mov	r4, r1
 800d04a:	b125      	cbz	r5, 800d056 <__swsetup_r+0x16>
 800d04c:	69ab      	ldr	r3, [r5, #24]
 800d04e:	b913      	cbnz	r3, 800d056 <__swsetup_r+0x16>
 800d050:	4628      	mov	r0, r5
 800d052:	f7ff f9f9 	bl	800c448 <__sinit>
 800d056:	4b2e      	ldr	r3, [pc, #184]	; (800d110 <__swsetup_r+0xd0>)
 800d058:	429c      	cmp	r4, r3
 800d05a:	d10f      	bne.n	800d07c <__swsetup_r+0x3c>
 800d05c:	686c      	ldr	r4, [r5, #4]
 800d05e:	89a3      	ldrh	r3, [r4, #12]
 800d060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d064:	0719      	lsls	r1, r3, #28
 800d066:	d42c      	bmi.n	800d0c2 <__swsetup_r+0x82>
 800d068:	06dd      	lsls	r5, r3, #27
 800d06a:	d411      	bmi.n	800d090 <__swsetup_r+0x50>
 800d06c:	2309      	movs	r3, #9
 800d06e:	6033      	str	r3, [r6, #0]
 800d070:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d074:	f04f 30ff 	mov.w	r0, #4294967295
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	e03e      	b.n	800d0fa <__swsetup_r+0xba>
 800d07c:	4b25      	ldr	r3, [pc, #148]	; (800d114 <__swsetup_r+0xd4>)
 800d07e:	429c      	cmp	r4, r3
 800d080:	d101      	bne.n	800d086 <__swsetup_r+0x46>
 800d082:	68ac      	ldr	r4, [r5, #8]
 800d084:	e7eb      	b.n	800d05e <__swsetup_r+0x1e>
 800d086:	4b24      	ldr	r3, [pc, #144]	; (800d118 <__swsetup_r+0xd8>)
 800d088:	429c      	cmp	r4, r3
 800d08a:	bf08      	it	eq
 800d08c:	68ec      	ldreq	r4, [r5, #12]
 800d08e:	e7e6      	b.n	800d05e <__swsetup_r+0x1e>
 800d090:	0758      	lsls	r0, r3, #29
 800d092:	d512      	bpl.n	800d0ba <__swsetup_r+0x7a>
 800d094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d096:	b141      	cbz	r1, 800d0aa <__swsetup_r+0x6a>
 800d098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d09c:	4299      	cmp	r1, r3
 800d09e:	d002      	beq.n	800d0a6 <__swsetup_r+0x66>
 800d0a0:	4630      	mov	r0, r6
 800d0a2:	f000 f9b7 	bl	800d414 <_free_r>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6363      	str	r3, [r4, #52]	; 0x34
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6063      	str	r3, [r4, #4]
 800d0b6:	6923      	ldr	r3, [r4, #16]
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	f043 0308 	orr.w	r3, r3, #8
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	b94b      	cbnz	r3, 800d0da <__swsetup_r+0x9a>
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0d0:	d003      	beq.n	800d0da <__swsetup_r+0x9a>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f000 f929 	bl	800d32c <__smakebuf_r>
 800d0da:	89a0      	ldrh	r0, [r4, #12]
 800d0dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0e0:	f010 0301 	ands.w	r3, r0, #1
 800d0e4:	d00a      	beq.n	800d0fc <__swsetup_r+0xbc>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	60a3      	str	r3, [r4, #8]
 800d0ea:	6963      	ldr	r3, [r4, #20]
 800d0ec:	425b      	negs	r3, r3
 800d0ee:	61a3      	str	r3, [r4, #24]
 800d0f0:	6923      	ldr	r3, [r4, #16]
 800d0f2:	b943      	cbnz	r3, 800d106 <__swsetup_r+0xc6>
 800d0f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0f8:	d1ba      	bne.n	800d070 <__swsetup_r+0x30>
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	0781      	lsls	r1, r0, #30
 800d0fe:	bf58      	it	pl
 800d100:	6963      	ldrpl	r3, [r4, #20]
 800d102:	60a3      	str	r3, [r4, #8]
 800d104:	e7f4      	b.n	800d0f0 <__swsetup_r+0xb0>
 800d106:	2000      	movs	r0, #0
 800d108:	e7f7      	b.n	800d0fa <__swsetup_r+0xba>
 800d10a:	bf00      	nop
 800d10c:	20000190 	.word	0x20000190
 800d110:	0800d804 	.word	0x0800d804
 800d114:	0800d824 	.word	0x0800d824
 800d118:	0800d7e4 	.word	0x0800d7e4

0800d11c <_close_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	2300      	movs	r3, #0
 800d120:	4d05      	ldr	r5, [pc, #20]	; (800d138 <_close_r+0x1c>)
 800d122:	4604      	mov	r4, r0
 800d124:	4608      	mov	r0, r1
 800d126:	602b      	str	r3, [r5, #0]
 800d128:	f7f6 faef 	bl	800370a <_close>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_close_r+0x1a>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_close_r+0x1a>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	200011bc 	.word	0x200011bc

0800d13c <__sflush_r>:
 800d13c:	898a      	ldrh	r2, [r1, #12]
 800d13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d142:	4605      	mov	r5, r0
 800d144:	0710      	lsls	r0, r2, #28
 800d146:	460c      	mov	r4, r1
 800d148:	d458      	bmi.n	800d1fc <__sflush_r+0xc0>
 800d14a:	684b      	ldr	r3, [r1, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dc05      	bgt.n	800d15c <__sflush_r+0x20>
 800d150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d152:	2b00      	cmp	r3, #0
 800d154:	dc02      	bgt.n	800d15c <__sflush_r+0x20>
 800d156:	2000      	movs	r0, #0
 800d158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d15e:	2e00      	cmp	r6, #0
 800d160:	d0f9      	beq.n	800d156 <__sflush_r+0x1a>
 800d162:	2300      	movs	r3, #0
 800d164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d168:	682f      	ldr	r7, [r5, #0]
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	d032      	beq.n	800d1d4 <__sflush_r+0x98>
 800d16e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	075a      	lsls	r2, r3, #29
 800d174:	d505      	bpl.n	800d182 <__sflush_r+0x46>
 800d176:	6863      	ldr	r3, [r4, #4]
 800d178:	1ac0      	subs	r0, r0, r3
 800d17a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d17c:	b10b      	cbz	r3, 800d182 <__sflush_r+0x46>
 800d17e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d180:	1ac0      	subs	r0, r0, r3
 800d182:	2300      	movs	r3, #0
 800d184:	4602      	mov	r2, r0
 800d186:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d188:	4628      	mov	r0, r5
 800d18a:	6a21      	ldr	r1, [r4, #32]
 800d18c:	47b0      	blx	r6
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	89a3      	ldrh	r3, [r4, #12]
 800d192:	d106      	bne.n	800d1a2 <__sflush_r+0x66>
 800d194:	6829      	ldr	r1, [r5, #0]
 800d196:	291d      	cmp	r1, #29
 800d198:	d82c      	bhi.n	800d1f4 <__sflush_r+0xb8>
 800d19a:	4a2a      	ldr	r2, [pc, #168]	; (800d244 <__sflush_r+0x108>)
 800d19c:	40ca      	lsrs	r2, r1
 800d19e:	07d6      	lsls	r6, r2, #31
 800d1a0:	d528      	bpl.n	800d1f4 <__sflush_r+0xb8>
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	6062      	str	r2, [r4, #4]
 800d1a6:	6922      	ldr	r2, [r4, #16]
 800d1a8:	04d9      	lsls	r1, r3, #19
 800d1aa:	6022      	str	r2, [r4, #0]
 800d1ac:	d504      	bpl.n	800d1b8 <__sflush_r+0x7c>
 800d1ae:	1c42      	adds	r2, r0, #1
 800d1b0:	d101      	bne.n	800d1b6 <__sflush_r+0x7a>
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b903      	cbnz	r3, 800d1b8 <__sflush_r+0x7c>
 800d1b6:	6560      	str	r0, [r4, #84]	; 0x54
 800d1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1ba:	602f      	str	r7, [r5, #0]
 800d1bc:	2900      	cmp	r1, #0
 800d1be:	d0ca      	beq.n	800d156 <__sflush_r+0x1a>
 800d1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1c4:	4299      	cmp	r1, r3
 800d1c6:	d002      	beq.n	800d1ce <__sflush_r+0x92>
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f000 f923 	bl	800d414 <_free_r>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	6360      	str	r0, [r4, #52]	; 0x34
 800d1d2:	e7c1      	b.n	800d158 <__sflush_r+0x1c>
 800d1d4:	6a21      	ldr	r1, [r4, #32]
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	4628      	mov	r0, r5
 800d1da:	47b0      	blx	r6
 800d1dc:	1c41      	adds	r1, r0, #1
 800d1de:	d1c7      	bne.n	800d170 <__sflush_r+0x34>
 800d1e0:	682b      	ldr	r3, [r5, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d0c4      	beq.n	800d170 <__sflush_r+0x34>
 800d1e6:	2b1d      	cmp	r3, #29
 800d1e8:	d001      	beq.n	800d1ee <__sflush_r+0xb2>
 800d1ea:	2b16      	cmp	r3, #22
 800d1ec:	d101      	bne.n	800d1f2 <__sflush_r+0xb6>
 800d1ee:	602f      	str	r7, [r5, #0]
 800d1f0:	e7b1      	b.n	800d156 <__sflush_r+0x1a>
 800d1f2:	89a3      	ldrh	r3, [r4, #12]
 800d1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1f8:	81a3      	strh	r3, [r4, #12]
 800d1fa:	e7ad      	b.n	800d158 <__sflush_r+0x1c>
 800d1fc:	690f      	ldr	r7, [r1, #16]
 800d1fe:	2f00      	cmp	r7, #0
 800d200:	d0a9      	beq.n	800d156 <__sflush_r+0x1a>
 800d202:	0793      	lsls	r3, r2, #30
 800d204:	bf18      	it	ne
 800d206:	2300      	movne	r3, #0
 800d208:	680e      	ldr	r6, [r1, #0]
 800d20a:	bf08      	it	eq
 800d20c:	694b      	ldreq	r3, [r1, #20]
 800d20e:	eba6 0807 	sub.w	r8, r6, r7
 800d212:	600f      	str	r7, [r1, #0]
 800d214:	608b      	str	r3, [r1, #8]
 800d216:	f1b8 0f00 	cmp.w	r8, #0
 800d21a:	dd9c      	ble.n	800d156 <__sflush_r+0x1a>
 800d21c:	4643      	mov	r3, r8
 800d21e:	463a      	mov	r2, r7
 800d220:	4628      	mov	r0, r5
 800d222:	6a21      	ldr	r1, [r4, #32]
 800d224:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d226:	47b0      	blx	r6
 800d228:	2800      	cmp	r0, #0
 800d22a:	dc06      	bgt.n	800d23a <__sflush_r+0xfe>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	f04f 30ff 	mov.w	r0, #4294967295
 800d232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	e78e      	b.n	800d158 <__sflush_r+0x1c>
 800d23a:	4407      	add	r7, r0
 800d23c:	eba8 0800 	sub.w	r8, r8, r0
 800d240:	e7e9      	b.n	800d216 <__sflush_r+0xda>
 800d242:	bf00      	nop
 800d244:	20400001 	.word	0x20400001

0800d248 <_fflush_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	690b      	ldr	r3, [r1, #16]
 800d24c:	4605      	mov	r5, r0
 800d24e:	460c      	mov	r4, r1
 800d250:	b913      	cbnz	r3, 800d258 <_fflush_r+0x10>
 800d252:	2500      	movs	r5, #0
 800d254:	4628      	mov	r0, r5
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	b118      	cbz	r0, 800d262 <_fflush_r+0x1a>
 800d25a:	6983      	ldr	r3, [r0, #24]
 800d25c:	b90b      	cbnz	r3, 800d262 <_fflush_r+0x1a>
 800d25e:	f7ff f8f3 	bl	800c448 <__sinit>
 800d262:	4b14      	ldr	r3, [pc, #80]	; (800d2b4 <_fflush_r+0x6c>)
 800d264:	429c      	cmp	r4, r3
 800d266:	d11b      	bne.n	800d2a0 <_fflush_r+0x58>
 800d268:	686c      	ldr	r4, [r5, #4]
 800d26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d0ef      	beq.n	800d252 <_fflush_r+0xa>
 800d272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d274:	07d0      	lsls	r0, r2, #31
 800d276:	d404      	bmi.n	800d282 <_fflush_r+0x3a>
 800d278:	0599      	lsls	r1, r3, #22
 800d27a:	d402      	bmi.n	800d282 <_fflush_r+0x3a>
 800d27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d27e:	f7ff f981 	bl	800c584 <__retarget_lock_acquire_recursive>
 800d282:	4628      	mov	r0, r5
 800d284:	4621      	mov	r1, r4
 800d286:	f7ff ff59 	bl	800d13c <__sflush_r>
 800d28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d28c:	4605      	mov	r5, r0
 800d28e:	07da      	lsls	r2, r3, #31
 800d290:	d4e0      	bmi.n	800d254 <_fflush_r+0xc>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	059b      	lsls	r3, r3, #22
 800d296:	d4dd      	bmi.n	800d254 <_fflush_r+0xc>
 800d298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d29a:	f7ff f974 	bl	800c586 <__retarget_lock_release_recursive>
 800d29e:	e7d9      	b.n	800d254 <_fflush_r+0xc>
 800d2a0:	4b05      	ldr	r3, [pc, #20]	; (800d2b8 <_fflush_r+0x70>)
 800d2a2:	429c      	cmp	r4, r3
 800d2a4:	d101      	bne.n	800d2aa <_fflush_r+0x62>
 800d2a6:	68ac      	ldr	r4, [r5, #8]
 800d2a8:	e7df      	b.n	800d26a <_fflush_r+0x22>
 800d2aa:	4b04      	ldr	r3, [pc, #16]	; (800d2bc <_fflush_r+0x74>)
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	bf08      	it	eq
 800d2b0:	68ec      	ldreq	r4, [r5, #12]
 800d2b2:	e7da      	b.n	800d26a <_fflush_r+0x22>
 800d2b4:	0800d804 	.word	0x0800d804
 800d2b8:	0800d824 	.word	0x0800d824
 800d2bc:	0800d7e4 	.word	0x0800d7e4

0800d2c0 <_lseek_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	4608      	mov	r0, r1
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4d05      	ldr	r5, [pc, #20]	; (800d2e0 <_lseek_r+0x20>)
 800d2cc:	602a      	str	r2, [r5, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	f7f6 fa3f 	bl	8003752 <_lseek>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	d102      	bne.n	800d2de <_lseek_r+0x1e>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	b103      	cbz	r3, 800d2de <_lseek_r+0x1e>
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	bd38      	pop	{r3, r4, r5, pc}
 800d2e0:	200011bc 	.word	0x200011bc

0800d2e4 <__swhatbuf_r>:
 800d2e4:	b570      	push	{r4, r5, r6, lr}
 800d2e6:	460e      	mov	r6, r1
 800d2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2ec:	4614      	mov	r4, r2
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	461d      	mov	r5, r3
 800d2f2:	b096      	sub	sp, #88	; 0x58
 800d2f4:	da07      	bge.n	800d306 <__swhatbuf_r+0x22>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	602b      	str	r3, [r5, #0]
 800d2fa:	89b3      	ldrh	r3, [r6, #12]
 800d2fc:	061a      	lsls	r2, r3, #24
 800d2fe:	d410      	bmi.n	800d322 <__swhatbuf_r+0x3e>
 800d300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d304:	e00e      	b.n	800d324 <__swhatbuf_r+0x40>
 800d306:	466a      	mov	r2, sp
 800d308:	f000 f908 	bl	800d51c <_fstat_r>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	dbf2      	blt.n	800d2f6 <__swhatbuf_r+0x12>
 800d310:	9a01      	ldr	r2, [sp, #4]
 800d312:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d316:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d31a:	425a      	negs	r2, r3
 800d31c:	415a      	adcs	r2, r3
 800d31e:	602a      	str	r2, [r5, #0]
 800d320:	e7ee      	b.n	800d300 <__swhatbuf_r+0x1c>
 800d322:	2340      	movs	r3, #64	; 0x40
 800d324:	2000      	movs	r0, #0
 800d326:	6023      	str	r3, [r4, #0]
 800d328:	b016      	add	sp, #88	; 0x58
 800d32a:	bd70      	pop	{r4, r5, r6, pc}

0800d32c <__smakebuf_r>:
 800d32c:	898b      	ldrh	r3, [r1, #12]
 800d32e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d330:	079d      	lsls	r5, r3, #30
 800d332:	4606      	mov	r6, r0
 800d334:	460c      	mov	r4, r1
 800d336:	d507      	bpl.n	800d348 <__smakebuf_r+0x1c>
 800d338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	6123      	str	r3, [r4, #16]
 800d340:	2301      	movs	r3, #1
 800d342:	6163      	str	r3, [r4, #20]
 800d344:	b002      	add	sp, #8
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	466a      	mov	r2, sp
 800d34a:	ab01      	add	r3, sp, #4
 800d34c:	f7ff ffca 	bl	800d2e4 <__swhatbuf_r>
 800d350:	9900      	ldr	r1, [sp, #0]
 800d352:	4605      	mov	r5, r0
 800d354:	4630      	mov	r0, r6
 800d356:	f7ff f917 	bl	800c588 <_malloc_r>
 800d35a:	b948      	cbnz	r0, 800d370 <__smakebuf_r+0x44>
 800d35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d360:	059a      	lsls	r2, r3, #22
 800d362:	d4ef      	bmi.n	800d344 <__smakebuf_r+0x18>
 800d364:	f023 0303 	bic.w	r3, r3, #3
 800d368:	f043 0302 	orr.w	r3, r3, #2
 800d36c:	81a3      	strh	r3, [r4, #12]
 800d36e:	e7e3      	b.n	800d338 <__smakebuf_r+0xc>
 800d370:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <__smakebuf_r+0x7c>)
 800d372:	62b3      	str	r3, [r6, #40]	; 0x28
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	6020      	str	r0, [r4, #0]
 800d378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	9b00      	ldr	r3, [sp, #0]
 800d380:	6120      	str	r0, [r4, #16]
 800d382:	6163      	str	r3, [r4, #20]
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	b15b      	cbz	r3, 800d3a0 <__smakebuf_r+0x74>
 800d388:	4630      	mov	r0, r6
 800d38a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d38e:	f000 f8d7 	bl	800d540 <_isatty_r>
 800d392:	b128      	cbz	r0, 800d3a0 <__smakebuf_r+0x74>
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	f023 0303 	bic.w	r3, r3, #3
 800d39a:	f043 0301 	orr.w	r3, r3, #1
 800d39e:	81a3      	strh	r3, [r4, #12]
 800d3a0:	89a0      	ldrh	r0, [r4, #12]
 800d3a2:	4305      	orrs	r5, r0
 800d3a4:	81a5      	strh	r5, [r4, #12]
 800d3a6:	e7cd      	b.n	800d344 <__smakebuf_r+0x18>
 800d3a8:	0800c3e1 	.word	0x0800c3e1

0800d3ac <memchr>:
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	b510      	push	{r4, lr}
 800d3b0:	b2c9      	uxtb	r1, r1
 800d3b2:	4402      	add	r2, r0
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	d101      	bne.n	800d3be <memchr+0x12>
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e003      	b.n	800d3c6 <memchr+0x1a>
 800d3be:	7804      	ldrb	r4, [r0, #0]
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	428c      	cmp	r4, r1
 800d3c4:	d1f6      	bne.n	800d3b4 <memchr+0x8>
 800d3c6:	bd10      	pop	{r4, pc}

0800d3c8 <memmove>:
 800d3c8:	4288      	cmp	r0, r1
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	eb01 0402 	add.w	r4, r1, r2
 800d3d0:	d902      	bls.n	800d3d8 <memmove+0x10>
 800d3d2:	4284      	cmp	r4, r0
 800d3d4:	4623      	mov	r3, r4
 800d3d6:	d807      	bhi.n	800d3e8 <memmove+0x20>
 800d3d8:	1e43      	subs	r3, r0, #1
 800d3da:	42a1      	cmp	r1, r4
 800d3dc:	d008      	beq.n	800d3f0 <memmove+0x28>
 800d3de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3e6:	e7f8      	b.n	800d3da <memmove+0x12>
 800d3e8:	4601      	mov	r1, r0
 800d3ea:	4402      	add	r2, r0
 800d3ec:	428a      	cmp	r2, r1
 800d3ee:	d100      	bne.n	800d3f2 <memmove+0x2a>
 800d3f0:	bd10      	pop	{r4, pc}
 800d3f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3fa:	e7f7      	b.n	800d3ec <memmove+0x24>

0800d3fc <__malloc_lock>:
 800d3fc:	4801      	ldr	r0, [pc, #4]	; (800d404 <__malloc_lock+0x8>)
 800d3fe:	f7ff b8c1 	b.w	800c584 <__retarget_lock_acquire_recursive>
 800d402:	bf00      	nop
 800d404:	200011b4 	.word	0x200011b4

0800d408 <__malloc_unlock>:
 800d408:	4801      	ldr	r0, [pc, #4]	; (800d410 <__malloc_unlock+0x8>)
 800d40a:	f7ff b8bc 	b.w	800c586 <__retarget_lock_release_recursive>
 800d40e:	bf00      	nop
 800d410:	200011b4 	.word	0x200011b4

0800d414 <_free_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4605      	mov	r5, r0
 800d418:	2900      	cmp	r1, #0
 800d41a:	d043      	beq.n	800d4a4 <_free_r+0x90>
 800d41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d420:	1f0c      	subs	r4, r1, #4
 800d422:	2b00      	cmp	r3, #0
 800d424:	bfb8      	it	lt
 800d426:	18e4      	addlt	r4, r4, r3
 800d428:	f7ff ffe8 	bl	800d3fc <__malloc_lock>
 800d42c:	4a1e      	ldr	r2, [pc, #120]	; (800d4a8 <_free_r+0x94>)
 800d42e:	6813      	ldr	r3, [r2, #0]
 800d430:	4610      	mov	r0, r2
 800d432:	b933      	cbnz	r3, 800d442 <_free_r+0x2e>
 800d434:	6063      	str	r3, [r4, #4]
 800d436:	6014      	str	r4, [r2, #0]
 800d438:	4628      	mov	r0, r5
 800d43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43e:	f7ff bfe3 	b.w	800d408 <__malloc_unlock>
 800d442:	42a3      	cmp	r3, r4
 800d444:	d90a      	bls.n	800d45c <_free_r+0x48>
 800d446:	6821      	ldr	r1, [r4, #0]
 800d448:	1862      	adds	r2, r4, r1
 800d44a:	4293      	cmp	r3, r2
 800d44c:	bf01      	itttt	eq
 800d44e:	681a      	ldreq	r2, [r3, #0]
 800d450:	685b      	ldreq	r3, [r3, #4]
 800d452:	1852      	addeq	r2, r2, r1
 800d454:	6022      	streq	r2, [r4, #0]
 800d456:	6063      	str	r3, [r4, #4]
 800d458:	6004      	str	r4, [r0, #0]
 800d45a:	e7ed      	b.n	800d438 <_free_r+0x24>
 800d45c:	461a      	mov	r2, r3
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	b10b      	cbz	r3, 800d466 <_free_r+0x52>
 800d462:	42a3      	cmp	r3, r4
 800d464:	d9fa      	bls.n	800d45c <_free_r+0x48>
 800d466:	6811      	ldr	r1, [r2, #0]
 800d468:	1850      	adds	r0, r2, r1
 800d46a:	42a0      	cmp	r0, r4
 800d46c:	d10b      	bne.n	800d486 <_free_r+0x72>
 800d46e:	6820      	ldr	r0, [r4, #0]
 800d470:	4401      	add	r1, r0
 800d472:	1850      	adds	r0, r2, r1
 800d474:	4283      	cmp	r3, r0
 800d476:	6011      	str	r1, [r2, #0]
 800d478:	d1de      	bne.n	800d438 <_free_r+0x24>
 800d47a:	6818      	ldr	r0, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	4401      	add	r1, r0
 800d480:	6011      	str	r1, [r2, #0]
 800d482:	6053      	str	r3, [r2, #4]
 800d484:	e7d8      	b.n	800d438 <_free_r+0x24>
 800d486:	d902      	bls.n	800d48e <_free_r+0x7a>
 800d488:	230c      	movs	r3, #12
 800d48a:	602b      	str	r3, [r5, #0]
 800d48c:	e7d4      	b.n	800d438 <_free_r+0x24>
 800d48e:	6820      	ldr	r0, [r4, #0]
 800d490:	1821      	adds	r1, r4, r0
 800d492:	428b      	cmp	r3, r1
 800d494:	bf01      	itttt	eq
 800d496:	6819      	ldreq	r1, [r3, #0]
 800d498:	685b      	ldreq	r3, [r3, #4]
 800d49a:	1809      	addeq	r1, r1, r0
 800d49c:	6021      	streq	r1, [r4, #0]
 800d49e:	6063      	str	r3, [r4, #4]
 800d4a0:	6054      	str	r4, [r2, #4]
 800d4a2:	e7c9      	b.n	800d438 <_free_r+0x24>
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200004b0 	.word	0x200004b0

0800d4ac <_realloc_r>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	460e      	mov	r6, r1
 800d4b4:	b921      	cbnz	r1, 800d4c0 <_realloc_r+0x14>
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4bc:	f7ff b864 	b.w	800c588 <_malloc_r>
 800d4c0:	b922      	cbnz	r2, 800d4cc <_realloc_r+0x20>
 800d4c2:	f7ff ffa7 	bl	800d414 <_free_r>
 800d4c6:	4625      	mov	r5, r4
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4cc:	f000 f848 	bl	800d560 <_malloc_usable_size_r>
 800d4d0:	42a0      	cmp	r0, r4
 800d4d2:	d20f      	bcs.n	800d4f4 <_realloc_r+0x48>
 800d4d4:	4621      	mov	r1, r4
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	f7ff f856 	bl	800c588 <_malloc_r>
 800d4dc:	4605      	mov	r5, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d0f2      	beq.n	800d4c8 <_realloc_r+0x1c>
 800d4e2:	4631      	mov	r1, r6
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	f7fe ff09 	bl	800c2fc <memcpy>
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	f7ff ff91 	bl	800d414 <_free_r>
 800d4f2:	e7e9      	b.n	800d4c8 <_realloc_r+0x1c>
 800d4f4:	4635      	mov	r5, r6
 800d4f6:	e7e7      	b.n	800d4c8 <_realloc_r+0x1c>

0800d4f8 <_read_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	4608      	mov	r0, r1
 800d4fe:	4611      	mov	r1, r2
 800d500:	2200      	movs	r2, #0
 800d502:	4d05      	ldr	r5, [pc, #20]	; (800d518 <_read_r+0x20>)
 800d504:	602a      	str	r2, [r5, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	f7f6 f8e2 	bl	80036d0 <_read>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d102      	bne.n	800d516 <_read_r+0x1e>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	b103      	cbz	r3, 800d516 <_read_r+0x1e>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	bd38      	pop	{r3, r4, r5, pc}
 800d518:	200011bc 	.word	0x200011bc

0800d51c <_fstat_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	2300      	movs	r3, #0
 800d520:	4d06      	ldr	r5, [pc, #24]	; (800d53c <_fstat_r+0x20>)
 800d522:	4604      	mov	r4, r0
 800d524:	4608      	mov	r0, r1
 800d526:	4611      	mov	r1, r2
 800d528:	602b      	str	r3, [r5, #0]
 800d52a:	f7f6 f8f9 	bl	8003720 <_fstat>
 800d52e:	1c43      	adds	r3, r0, #1
 800d530:	d102      	bne.n	800d538 <_fstat_r+0x1c>
 800d532:	682b      	ldr	r3, [r5, #0]
 800d534:	b103      	cbz	r3, 800d538 <_fstat_r+0x1c>
 800d536:	6023      	str	r3, [r4, #0]
 800d538:	bd38      	pop	{r3, r4, r5, pc}
 800d53a:	bf00      	nop
 800d53c:	200011bc 	.word	0x200011bc

0800d540 <_isatty_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	2300      	movs	r3, #0
 800d544:	4d05      	ldr	r5, [pc, #20]	; (800d55c <_isatty_r+0x1c>)
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	602b      	str	r3, [r5, #0]
 800d54c:	f7f6 f8f7 	bl	800373e <_isatty>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_isatty_r+0x1a>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_isatty_r+0x1a>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	200011bc 	.word	0x200011bc

0800d560 <_malloc_usable_size_r>:
 800d560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d564:	1f18      	subs	r0, r3, #4
 800d566:	2b00      	cmp	r3, #0
 800d568:	bfbc      	itt	lt
 800d56a:	580b      	ldrlt	r3, [r1, r0]
 800d56c:	18c0      	addlt	r0, r0, r3
 800d56e:	4770      	bx	lr

0800d570 <floor>:
 800d570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d574:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800d578:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800d57c:	2e13      	cmp	r6, #19
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4607      	mov	r7, r0
 800d584:	460c      	mov	r4, r1
 800d586:	4605      	mov	r5, r0
 800d588:	dc34      	bgt.n	800d5f4 <floor+0x84>
 800d58a:	2e00      	cmp	r6, #0
 800d58c:	da15      	bge.n	800d5ba <floor+0x4a>
 800d58e:	a334      	add	r3, pc, #208	; (adr r3, 800d660 <floor+0xf0>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	f7f2 fdea 	bl	800016c <__adddf3>
 800d598:	2200      	movs	r2, #0
 800d59a:	2300      	movs	r3, #0
 800d59c:	f7f3 f81a 	bl	80005d4 <__aeabi_dcmpgt>
 800d5a0:	b140      	cbz	r0, 800d5b4 <floor+0x44>
 800d5a2:	2c00      	cmp	r4, #0
 800d5a4:	da59      	bge.n	800d65a <floor+0xea>
 800d5a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d5aa:	ea57 0503 	orrs.w	r5, r7, r3
 800d5ae:	d001      	beq.n	800d5b4 <floor+0x44>
 800d5b0:	2500      	movs	r5, #0
 800d5b2:	4c2d      	ldr	r4, [pc, #180]	; (800d668 <floor+0xf8>)
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	462f      	mov	r7, r5
 800d5b8:	e025      	b.n	800d606 <floor+0x96>
 800d5ba:	4a2c      	ldr	r2, [pc, #176]	; (800d66c <floor+0xfc>)
 800d5bc:	fa42 f806 	asr.w	r8, r2, r6
 800d5c0:	ea01 0208 	and.w	r2, r1, r8
 800d5c4:	4302      	orrs	r2, r0
 800d5c6:	d01e      	beq.n	800d606 <floor+0x96>
 800d5c8:	a325      	add	r3, pc, #148	; (adr r3, 800d660 <floor+0xf0>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	f7f2 fdcd 	bl	800016c <__adddf3>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f7f2 fffd 	bl	80005d4 <__aeabi_dcmpgt>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d0ea      	beq.n	800d5b4 <floor+0x44>
 800d5de:	2c00      	cmp	r4, #0
 800d5e0:	bfbe      	ittt	lt
 800d5e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d5e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800d5ea:	19a4      	addlt	r4, r4, r6
 800d5ec:	2500      	movs	r5, #0
 800d5ee:	ea24 0408 	bic.w	r4, r4, r8
 800d5f2:	e7df      	b.n	800d5b4 <floor+0x44>
 800d5f4:	2e33      	cmp	r6, #51	; 0x33
 800d5f6:	dd0a      	ble.n	800d60e <floor+0x9e>
 800d5f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d5fc:	d103      	bne.n	800d606 <floor+0x96>
 800d5fe:	f7f2 fdb5 	bl	800016c <__adddf3>
 800d602:	4607      	mov	r7, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4638      	mov	r0, r7
 800d608:	4619      	mov	r1, r3
 800d60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60e:	f04f 32ff 	mov.w	r2, #4294967295
 800d612:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800d616:	fa22 f808 	lsr.w	r8, r2, r8
 800d61a:	ea18 0f00 	tst.w	r8, r0
 800d61e:	d0f2      	beq.n	800d606 <floor+0x96>
 800d620:	a30f      	add	r3, pc, #60	; (adr r3, 800d660 <floor+0xf0>)
 800d622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d626:	f7f2 fda1 	bl	800016c <__adddf3>
 800d62a:	2200      	movs	r2, #0
 800d62c:	2300      	movs	r3, #0
 800d62e:	f7f2 ffd1 	bl	80005d4 <__aeabi_dcmpgt>
 800d632:	2800      	cmp	r0, #0
 800d634:	d0be      	beq.n	800d5b4 <floor+0x44>
 800d636:	2c00      	cmp	r4, #0
 800d638:	da02      	bge.n	800d640 <floor+0xd0>
 800d63a:	2e14      	cmp	r6, #20
 800d63c:	d103      	bne.n	800d646 <floor+0xd6>
 800d63e:	3401      	adds	r4, #1
 800d640:	ea25 0508 	bic.w	r5, r5, r8
 800d644:	e7b6      	b.n	800d5b4 <floor+0x44>
 800d646:	2301      	movs	r3, #1
 800d648:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d64c:	fa03 f606 	lsl.w	r6, r3, r6
 800d650:	4435      	add	r5, r6
 800d652:	42bd      	cmp	r5, r7
 800d654:	bf38      	it	cc
 800d656:	18e4      	addcc	r4, r4, r3
 800d658:	e7f2      	b.n	800d640 <floor+0xd0>
 800d65a:	2500      	movs	r5, #0
 800d65c:	462c      	mov	r4, r5
 800d65e:	e7a9      	b.n	800d5b4 <floor+0x44>
 800d660:	8800759c 	.word	0x8800759c
 800d664:	7e37e43c 	.word	0x7e37e43c
 800d668:	bff00000 	.word	0xbff00000
 800d66c:	000fffff 	.word	0x000fffff

0800d670 <_init>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	bf00      	nop
 800d674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d676:	bc08      	pop	{r3}
 800d678:	469e      	mov	lr, r3
 800d67a:	4770      	bx	lr

0800d67c <_fini>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	bf00      	nop
 800d680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d682:	bc08      	pop	{r3}
 800d684:	469e      	mov	lr, r3
 800d686:	4770      	bx	lr
