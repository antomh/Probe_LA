
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7a0  0800c7a0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7a0  0800c7a0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  200001f8  0800c99c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b0  0800c99c  000215b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200e4  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf8  00000000  00000000  00040301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00044f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  000465f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df88  00000000  00000000  00047ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c531  00000000  00000000  00065a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f08  00000000  00000000  00081f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00119e89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006990  00000000  00000000  00119edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c5c0 	.word	0x0800c5c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	0800c5c0 	.word	0x0800c5c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f003 f95c 	bl	8003daa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f003 f957 	bl	8003daa <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f003 f948 	bl	8003daa <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 fb09 	bl	8006138 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f003 f93d 	bl	8003daa <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <flash_fill_calibTable>:
/*---------------------------------------------------------------------------*/
/*
 * @brief   Test function
 */
void flash_fill_calibTable(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
    for (uint16_t i = 0; i < 254; ++i) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	e007      	b.n	8000d7c <flash_fill_calibTable+0x1c>
        DevNVRAM.sector.data[i] = i;
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	88fa      	ldrh	r2, [r7, #6]
 8000d70:	490b      	ldr	r1, [pc, #44]	; (8000da0 <flash_fill_calibTable+0x40>)
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint16_t i = 0; i < 254; ++i) {
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	2bfd      	cmp	r3, #253	; 0xfd
 8000d80:	d9f4      	bls.n	8000d6c <flash_fill_calibTable+0xc>
    }
    DevNVRAM.sector.CheckSum = 0xAAAAAAAA;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <flash_fill_calibTable+0x40>)
 8000d84:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000d88:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
    DevNVRAM.sector.NWrite = 0;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <flash_fill_calibTable+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200004f4 	.word	0x200004f4

08000da4 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <flash_write_calibTable+0x11c>)
 8000dac:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000dba:	e010      	b.n	8000dde <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000dbc:	4a41      	ldr	r2, [pc, #260]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d002      	beq.n	8000dd2 <flash_write_calibTable+0x2e>
            ++err;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4a39      	ldr	r2, [pc, #228]	; (8000ec8 <flash_write_calibTable+0x124>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d9ea      	bls.n	8000dbc <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d063      	beq.n	8000eb4 <flash_write_calibTable+0x110>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000dec:	f002 fcb2 	bl	8003754 <HAL_FLASH_Unlock>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	76fb      	strb	r3, [r7, #27]
            return status;
 8000dfa:	7efb      	ldrb	r3, [r7, #27]
 8000dfc:	e05b      	b.n	8000eb6 <flash_write_calibTable+0x112>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <flash_write_calibTable+0x11c>)
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 8000e12:	f107 0210 	add.w	r2, r7, #16
 8000e16:	463b      	mov	r3, r7
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fd82 	bl	8003924 <HAL_FLASHEx_Erase>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	76fb      	strb	r3, [r7, #27]
            return status;
 8000e2a:	7efb      	ldrb	r3, [r7, #27]
 8000e2c:	e043      	b.n	8000eb6 <flash_write_calibTable+0x112>
        }
        if ( err != 0xFFFFFFFF ) {
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e34:	d003      	beq.n	8000e3e <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	76fb      	strb	r3, [r7, #27]
            return status;
 8000e3a:	7efb      	ldrb	r3, [r7, #27]
 8000e3c:	e03b      	b.n	8000eb6 <flash_write_calibTable+0x112>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <flash_write_calibTable+0x11c>)
 8000e40:	617b      	str	r3, [r7, #20]
        err     = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
        index   = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000e4c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000e54:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 8000e58:	22fe      	movs	r2, #254	; 0xfe
 8000e5a:	491a      	ldr	r1, [pc, #104]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000e5c:	481b      	ldr	r0, [pc, #108]	; (8000ecc <flash_write_calibTable+0x128>)
 8000e5e:	f002 fbd6 	bl	800360e <HAL_CRC_Calculate>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000e66:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000e6a:	e01d      	b.n	8000ea8 <flash_write_calibTable+0x104>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 8000e6c:	6979      	ldr	r1, [r7, #20]
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <flash_write_calibTable+0x120>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f002 fbf9 	bl	8003674 <HAL_FLASH_Program>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <flash_write_calibTable+0xea>
                err++;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3301      	adds	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
            addr += 4;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3304      	adds	r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 8000e9a:	bf00      	nop
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <flash_write_calibTable+0x12c>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f9      	bne.n	8000e9c <flash_write_calibTable+0xf8>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <flash_write_calibTable+0x124>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d9dd      	bls.n	8000e6c <flash_write_calibTable+0xc8>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000eb0:	f002 fc76 	bl	80037a0 <HAL_FLASH_Lock>
    }
    return status;
 8000eb4:	7efb      	ldrb	r3, [r7, #27]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3720      	adds	r7, #32
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	0801fc00 	.word	0x0801fc00
 8000ec4:	200004f4 	.word	0x200004f4
 8000ec8:	0801ffff 	.word	0x0801ffff
 8000ecc:	200008f4 	.word	0x200008f4
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = ( abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) / STEP_CALIBRATE;
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <volt2dgt+0x10c>)
 8000ee2:	60fb      	str	r3, [r7, #12]
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000ee4:	493f      	ldr	r1, [pc, #252]	; (8000fe4 <volt2dgt+0x110>)
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f7ff fcac 	bl	8000844 <__aeabi_fmul>
 8000eec:	4603      	mov	r3, r0
 8000eee:	493e      	ldr	r1, [pc, #248]	; (8000fe8 <volt2dgt+0x114>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fd5b 	bl	80009ac <__aeabi_fdiv>
 8000ef6:	4603      	mov	r3, r0
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)) /
 8000ef8:	493a      	ldr	r1, [pc, #232]	; (8000fe4 <volt2dgt+0x110>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fd56 	bl	80009ac <__aeabi_fdiv>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461c      	mov	r4, r3
               abs(MIN_VOLT_MODE_12)*volt
 8000f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fc47 	bl	800079c <__aeabi_i2f>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4619      	mov	r1, r3
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fc96 	bl	8000844 <__aeabi_fmul>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461c      	mov	r4, r3
               +
               (count*abs(MIN_VOLT_MODE_12)) /
 8000f1c:	4931      	ldr	r1, [pc, #196]	; (8000fe4 <volt2dgt+0x110>)
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fc90 	bl	8000844 <__aeabi_fmul>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4930      	ldr	r1, [pc, #192]	; (8000fe8 <volt2dgt+0x114>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd3f 	bl	80009ac <__aeabi_fdiv>
 8000f2e:	4603      	mov	r3, r0
               +
 8000f30:	4619      	mov	r1, r3
 8000f32:	4620      	mov	r0, r4
 8000f34:	f7ff fb7e 	bl	8000634 <__addsf3>
 8000f38:	4603      	mov	r3, r0
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fa74 	bl	8000428 <__aeabi_f2d>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f00b faba 	bl	800c4c0 <floor>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fb48 	bl	80005e8 <__aeabi_d2uiz>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	817b      	strh	r3, [r7, #10]
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) ) ); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000f5c:	897b      	ldrh	r3, [r7, #10]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	3304      	adds	r3, #4
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	889b      	ldrh	r3, [r3, #4]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	1aca      	subs	r2, r1, r3
 8000f7a:	897b      	ldrh	r3, [r7, #10]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	21c8      	movs	r1, #200	; 0xc8
 8000f80:	fb01 f303 	mul.w	r3, r1, r3
 8000f84:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	8979      	ldrh	r1, [r7, #10]
 8000f8c:	3101      	adds	r1, #1
 8000f8e:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000f92:	fb00 f101 	mul.w	r1, r0, r1
 8000f96:	440b      	add	r3, r1
 8000f98:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000fa8:	897b      	ldrh	r3, [r7, #10]
 8000faa:	3301      	adds	r3, #1
 8000fac:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000fb0:	fb00 f303 	mul.w	r3, r0, r3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000fba:	3b08      	subs	r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	fb03 f302 	mul.w	r3, r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	440b      	add	r3, r1
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000fd6:	893b      	ldrh	r3, [r7, #8]





}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	42aa0000 	.word	0x42aa0000
 8000fe4:	459c4000 	.word	0x459c4000
 8000fe8:	4684d000 	.word	0x4684d000

08000fec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800100c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00b      	beq.n	800102c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001014:	e000      	b.n	8001018 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001016:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001022:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <DWT_Init+0x24>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <DWT_Init+0x24>)
 8001042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001046:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <DWT_Init+0x28>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <DWT_Init+0x28>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	e000edf0 	.word	0xe000edf0
 8001060:	e0001000 	.word	0xe0001000

08001064 <_write>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e009      	b.n	800108a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffb4 	bl	8000fec <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbf1      	blt.n	8001076 <_write+0x12>
	}
	return len;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t da)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 80010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4808      	ldr	r0, [pc, #32]	; (80010d0 <SetDacA+0x34>)
 80010ae:	f7ff ff11 	bl	8000ed4 <volt2dgt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <SetDacA+0x38>)
 80010b8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SetDacA+0x38>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <SetDacA+0x3c>)
 80010c2:	f7ff fd3b 	bl	8000b3c <DAC_AD5322_Ch1>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200004f4 	.word	0x200004f4
 80010d4:	20000256 	.word	0x20000256
 80010d8:	20000974 	.word	0x20000974

080010dc <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <SetDacB+0x34>)
 80010ee:	f7ff fef1 	bl	8000ed4 <volt2dgt>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <SetDacB+0x38>)
 80010f8:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SetDacB+0x38>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <SetDacB+0x3c>)
 8001102:	f7ff fd62 	bl	8000bca <DAC_AD5322_Ch2>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200004f4 	.word	0x200004f4
 8001114:	20000258 	.word	0x20000258
 8001118:	20000974 	.word	0x20000974

0800111c <SetAllDAC>:
void SetAllDAC()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SetAllDAC+0x18>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <SetAllDAC+0x1c>)
 8001126:	8812      	ldrh	r2, [r2, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <SetAllDAC+0x20>)
 800112c:	f7ff fd94 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000256 	.word	0x20000256
 8001138:	20000258 	.word	0x20000258
 800113c:	20000974 	.word	0x20000974

08001140 <GetDacA>:
uint16_t GetDacA()
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	return VDAC_A;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <GetDacA+0x10>)
 8001146:	881b      	ldrh	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000256 	.word	0x20000256

08001154 <GetDacB>:
uint16_t GetDacB()
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <GetDacB+0x10>)
 800115a:	881b      	ldrh	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000258 	.word	0x20000258

08001168 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <GetBtnRunState+0x7c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <GetBtnRunState+0x24>
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <GetBtnRunState+0x80>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d107      	bne.n	800118c <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <GetBtnRunState+0x80>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <GetBtnRunState+0x7c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	e026      	b.n	80011da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <GetBtnRunState+0x7c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10b      	bne.n	80011ac <GetBtnRunState+0x44>
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <GetBtnRunState+0x80>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d107      	bne.n	80011ac <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <GetBtnRunState+0x80>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <GetBtnRunState+0x7c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e016      	b.n	80011da <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <GetBtnRunState+0x7c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10b      	bne.n	80011cc <GetBtnRunState+0x64>
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <GetBtnRunState+0x80>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <GetBtnRunState+0x80>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <GetBtnRunState+0x7c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e006      	b.n	80011da <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <GetBtnRunState+0x80>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <GetBtnRunState+0x7c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000261 	.word	0x20000261
 80011e8:	20000260 	.word	0x20000260

080011ec <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <GetBtnUpState+0x7c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <GetBtnUpState+0x24>
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <GetBtnUpState+0x80>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d107      	bne.n	8001210 <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <GetBtnUpState+0x80>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <GetBtnUpState+0x7c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	e026      	b.n	800125e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <GetBtnUpState+0x7c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10b      	bne.n	8001230 <GetBtnUpState+0x44>
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <GetBtnUpState+0x80>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <GetBtnUpState+0x80>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <GetBtnUpState+0x7c>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800122c:	2301      	movs	r3, #1
 800122e:	e016      	b.n	800125e <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <GetBtnUpState+0x7c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <GetBtnUpState+0x64>
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <GetBtnUpState+0x80>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d107      	bne.n	8001250 <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <GetBtnUpState+0x80>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <GetBtnUpState+0x7c>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800124c:	2302      	movs	r3, #2
 800124e:	e006      	b.n	800125e <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <GetBtnUpState+0x80>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <GetBtnUpState+0x7c>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000269 	.word	0x20000269
 800126c:	20000268 	.word	0x20000268

08001270 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <GetBtnDownState+0x7c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10b      	bne.n	8001294 <GetBtnDownState+0x24>
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <GetBtnDownState+0x80>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d107      	bne.n	8001294 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <GetBtnDownState+0x80>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <GetBtnDownState+0x7c>)
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	e026      	b.n	80012e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <GetBtnDownState+0x7c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10b      	bne.n	80012b4 <GetBtnDownState+0x44>
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <GetBtnDownState+0x80>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d107      	bne.n	80012b4 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <GetBtnDownState+0x80>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <GetBtnDownState+0x7c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e016      	b.n	80012e2 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <GetBtnDownState+0x7c>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10b      	bne.n	80012d4 <GetBtnDownState+0x64>
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <GetBtnDownState+0x80>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <GetBtnDownState+0x80>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <GetBtnDownState+0x7c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		return 0x02;
 80012d0:	2302      	movs	r3, #2
 80012d2:	e006      	b.n	80012e2 <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <GetBtnDownState+0x80>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <GetBtnDownState+0x7c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000271 	.word	0x20000271
 80012f0:	20000270 	.word	0x20000270

080012f4 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4()
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	timWork = 1;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <EnableTIM3_PB4+0x14>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000272 	.word	0x20000272

0800130c <GetTIM3>:
uint16_t GetTIM3()
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <GetTIM3+0x14>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000274 	.word	0x20000274

08001324 <resValTIM3_PB4>:
void resValTIM3_PB4()
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <resValTIM3_PB4+0x14>)
 800132a:	2200      	movs	r2, #0
 800132c:	801a      	strh	r2, [r3, #0]
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000274 	.word	0x20000274

0800133c <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	timWork = 0;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <EnableTIM4_PB6+0x14>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000272 	.word	0x20000272

08001354 <GetTIM4>:
uint16_t GetTIM4()
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001358:	4b03      	ldr	r3, [pc, #12]	; (8001368 <GetTIM4+0x14>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000276 	.word	0x20000276

0800136c <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <resValTIM4_PB6+0x14>)
 8001372:	2200      	movs	r2, #0
 8001374:	801a      	strh	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000276 	.word	0x20000276

08001384 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_TIM_IC_CaptureCallback+0xb8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d027      	beq.n	80013e6 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d149      	bne.n	8001434 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7f1b      	ldrb	r3, [r3, #28]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d145      	bne.n	8001434 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80013a8:	2100      	movs	r1, #0
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80013ac:	f005 fb98 	bl	8006ae0 <HAL_TIM_ReadCapturedValue>
 80013b0:	4603      	mov	r3, r0
 80013b2:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 80013b4:	2104      	movs	r1, #4
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80013b8:	f005 fb92 	bl	8006ae0 <HAL_TIM_ReadCapturedValue>
 80013bc:	4603      	mov	r3, r0
 80013be:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 80013c6:	8a3a      	ldrh	r2, [r7, #16]
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 80013d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bfb8      	it	lt
 80013d8:	425b      	neglt	r3, r3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80013de:	89ba      	ldrh	r2, [r7, #12]
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80013e2:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80013e4:	e026      	b.n	8001434 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_TIM_IC_CaptureCallback+0xc8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d121      	bne.n	8001434 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7f1b      	ldrb	r3, [r3, #28]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d11d      	bne.n	8001434 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4815      	ldr	r0, [pc, #84]	; (8001450 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80013fc:	f005 fb70 	bl	8006ae0 <HAL_TIM_ReadCapturedValue>
 8001400:	4603      	mov	r3, r0
 8001402:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 8001404:	2104      	movs	r1, #4
 8001406:	4812      	ldr	r0, [pc, #72]	; (8001450 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001408:	f005 fb6a 	bl	8006ae0 <HAL_TIM_ReadCapturedValue>
 800140c:	4603      	mov	r3, r0
 800140e:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8001416:	8afa      	ldrh	r2, [r7, #22]
 8001418:	8abb      	ldrh	r3, [r7, #20]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 8001420:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001424:	2b00      	cmp	r3, #0
 8001426:	bfb8      	it	lt
 8001428:	425b      	neglt	r3, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 800142e:	8a7a      	ldrh	r2, [r7, #18]
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001432:	801a      	strh	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000272 	.word	0x20000272
 8001440:	40000400 	.word	0x40000400
 8001444:	200008fc 	.word	0x200008fc
 8001448:	20000274 	.word	0x20000274
 800144c:	40000800 	.word	0x40000800
 8001450:	200004ac 	.word	0x200004ac
 8001454:	20000276 	.word	0x20000276

08001458 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	return g_VADC;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <GetADC+0x14>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000278 	.word	0x20000278

08001470 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_ADC_ConvCpltCallback+0x28>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d106      	bne.n	8001490 <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001484:	f001 fc98 	bl	8002db8 <HAL_ADC_GetValue>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_ADC_ConvCpltCallback+0x30>)
 800148e:	801a      	strh	r2, [r3, #0]
	}
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40012400 	.word	0x40012400
 800149c:	20000944 	.word	0x20000944
 80014a0:	20000278 	.word	0x20000278

080014a4 <runCommands>:
	Калибровка 
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.
	--------------------------------------------------------------------------*/
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	6018      	str	r0, [r3, #0]
 80014b0:	463b      	mov	r3, r7
 80014b2:	6019      	str	r1, [r3, #0]
	if (*Len < 1)
 80014b4:	463b      	mov	r3, r7
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8400 	beq.w	8001cc0 <runCommands+0x81c>

	//--------------------------------------------------------------------------

	uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];
	uint16_t tVal16;
	uint8_t cmd = Buf[0];
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	//--------------------------------------------------------------------------
	if 		(cmd == 0x01)	// Relay:1 - 12V	[0x01 - 0x01]
 80014ca:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d16c      	bne.n	80015ac <runCommands+0x108>
	{
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00))
 80014d2:	463b      	mov	r3, r7
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d957      	bls.n	800158c <runCommands+0xe8>
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <runCommands+0x50>
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d14b      	bne.n	800158c <runCommands+0xe8>
		{
			if (Buf[1] == 0x01)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d11f      	bne.n	8001540 <runCommands+0x9c>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	2104      	movs	r1, #4
 8001504:	48cb      	ldr	r0, [pc, #812]	; (8001834 <runCommands+0x390>)
 8001506:	f002 fc50 	bl	8003daa <HAL_GPIO_WritePin>
				RelayState = m12;
 800150a:	4bcb      	ldr	r3, [pc, #812]	; (8001838 <runCommands+0x394>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 8001510:	4bc9      	ldr	r3, [pc, #804]	; (8001838 <runCommands+0x394>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	48c9      	ldr	r0, [pc, #804]	; (800183c <runCommands+0x398>)
 8001518:	f009 fe6c 	bl	800b1f4 <iprintf>
				SetAllDAC();
 800151c:	f7ff fdfe 	bl	800111c <SetAllDAC>
				UserTxBufferFS[0] = cmd;
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001528:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	2102      	movs	r1, #2
 8001538:	4618      	mov	r0, r3
 800153a:	f009 fa23 	bl	800a984 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800153e:	e3c4      	b.n	8001cca <runCommands+0x826>
			}
			else if (Buf[1] == 0x00)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d11f      	bne.n	800158c <runCommands+0xe8>
			{
				#if TEST_RELAY
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	48b8      	ldr	r0, [pc, #736]	; (8001834 <runCommands+0x390>)
 8001552:	f002 fc2a 	bl	8003daa <HAL_GPIO_WritePin>
				RelayState = m27;
 8001556:	4bb8      	ldr	r3, [pc, #736]	; (8001838 <runCommands+0x394>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800155c:	4bb6      	ldr	r3, [pc, #728]	; (8001838 <runCommands+0x394>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	48b7      	ldr	r0, [pc, #732]	; (8001840 <runCommands+0x39c>)
 8001564:	f009 fe46 	bl	800b1f4 <iprintf>
				SetAllDAC();
 8001568:	f7ff fdd8 	bl	800111c <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800156c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001570:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001574:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x00; // успешно
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	2200      	movs	r2, #0
 800157c:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f009 f9fd 	bl	800a984 <CDC_Transmit_FS>
				#endif /* TEST_RELAY */
				return;
 800158a:	e39e      	b.n	8001cca <runCommands+0x826>
			}
		}

		UserTxBufferFS[0] = cmd;
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001594:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	2201      	movs	r2, #1
 800159c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	2102      	movs	r1, #2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 f9ed 	bl	800a984 <CDC_Transmit_FS>
		return;
 80015aa:	e38e      	b.n	8001cca <runCommands+0x826>

		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x02)	// DA:4095
 80015ac:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d13e      	bne.n	8001632 <runCommands+0x18e>
	{
		if (*Len >= 3)
 80015b4:	463b      	mov	r3, r7
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d929      	bls.n	8001612 <runCommands+0x16e>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 80015be:	f7ff feb1 	bl	8001324 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 80015c2:	f7ff fed3 	bl	800136c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015d4:	801a      	strh	r2, [r3, #0]
			SetDacA(tVal16);
 80015d6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fd5c 	bl	800109c <SetDacA>
			//			SetDacA(tVal16);

			printf("DacA: %d\n", tVal16);
 80015e4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4895      	ldr	r0, [pc, #596]	; (8001844 <runCommands+0x3a0>)
 80015ee:	f009 fe01 	bl	800b1f4 <iprintf>
			UserTxBufferFS[0] = cmd;
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80015fa:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2102      	movs	r1, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f009 f9ba 	bl	800a984 <CDC_Transmit_FS>
			return;
 8001610:	e35b      	b.n	8001cca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 800161a:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	2201      	movs	r2, #1
 8001622:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	2102      	movs	r1, #2
 800162a:	4618      	mov	r0, r3
 800162c:	f009 f9aa 	bl	800a984 <CDC_Transmit_FS>
		return;
 8001630:	e34b      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x03)	// DB:4095
 8001632:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001636:	2b03      	cmp	r3, #3
 8001638:	d13e      	bne.n	80016b8 <runCommands+0x214>
	{
		if (*Len >= 3)
 800163a:	463b      	mov	r3, r7
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d929      	bls.n	8001698 <runCommands+0x1f4>
		{
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001644:	f7ff fe6e 	bl	8001324 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001648:	f7ff fe90 	bl	800136c <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3301      	adds	r3, #1
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	b29a      	uxth	r2, r3
 8001656:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800165a:	801a      	strh	r2, [r3, #0]
			SetDacB(tVal16);
 800165c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fd39 	bl	80010dc <SetDacB>

			UserTxBufferFS[0] = cmd;
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001672:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	2200      	movs	r2, #0
 800167a:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n", tVal16);
 800167c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4870      	ldr	r0, [pc, #448]	; (8001848 <runCommands+0x3a4>)
 8001686:	f009 fdb5 	bl	800b1f4 <iprintf>

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f009 f977 	bl	800a984 <CDC_Transmit_FS>
			return;
 8001696:	e318      	b.n	8001cca <runCommands+0x826>
		}

		UserTxBufferFS[0] = cmd;
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80016a0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	2201      	movs	r2, #1
 80016a8:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	2102      	movs	r1, #2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f009 f967 	bl	800a984 <CDC_Transmit_FS>
		return;
 80016b6:	e308      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x04)	// ADC?
 80016b8:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d119      	bne.n	80016f4 <runCommands+0x250>
	{
		tVal16 = GetADC();
 80016c0:	f7ff feca 	bl	8001458 <GetADC>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80016cc:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80016d6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	3301      	adds	r3, #1
 80016de:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80016e2:	8812      	ldrh	r2, [r2, #0]
 80016e4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	2103      	movs	r1, #3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f009 f949 	bl	800a984 <CDC_Transmit_FS>
		return;
 80016f2:	e2ea      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x05)	// Relay?DA?DB?
 80016f4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d12d      	bne.n	8001758 <runCommands+0x2b4>
	{
		UserTxBufferFS[0] = cmd;
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001704:	701a      	strb	r2, [r3, #0]
		#if TEST_RELAY
		UserTxBufferFS[1] = RelayState;
 8001706:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <runCommands+0x394>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	705a      	strb	r2, [r3, #1]
		#endif /* TEST_RELAY */

		tVal16 = GetDacA();
 8001712:	f7ff fd15 	bl	8001140 <GetDacA>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800171e:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	3302      	adds	r3, #2
 8001726:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800172a:	8812      	ldrh	r2, [r2, #0]
 800172c:	801a      	strh	r2, [r3, #0]

		tVal16 = GetDacB();
 800172e:	f7ff fd11 	bl	8001154 <GetDacB>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	f107 0322 	add.w	r3, r7, #34	; 0x22
 800173a:	801a      	strh	r2, [r3, #0]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	3304      	adds	r3, #4
 8001742:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	801a      	strh	r2, [r3, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800174a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174e:	2106      	movs	r1, #6
 8001750:	4618      	mov	r0, r3
 8001752:	f009 f917 	bl	800a984 <CDC_Transmit_FS>
		return;
 8001756:	e2b8      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x06)	// Btn?
 8001758:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 800175c:	2b06      	cmp	r3, #6
 800175e:	d120      	bne.n	80017a2 <runCommands+0x2fe>
	{
		UserTxBufferFS[0] = cmd;
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001768:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800176a:	f7ff fcfd 	bl	8001168 <GetBtnRunState>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001776:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 8001778:	f7ff fd38 	bl	80011ec <GetBtnUpState>
 800177c:	4603      	mov	r3, r0
 800177e:	461a      	mov	r2, r3
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 8001786:	f7ff fd73 	bl	8001270 <GetBtnDownState>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	70da      	strb	r2, [r3, #3]
		CDC_Transmit_FS(UserTxBufferFS, 4);
 8001794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001798:	2104      	movs	r1, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f009 f8f2 	bl	800a984 <CDC_Transmit_FS>
		return;
 80017a0:	e293      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
		
	}
	else if (cmd == 0x07)	// ID?
 80017a2:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	d154      	bne.n	8001854 <runCommands+0x3b0>
	{
		char str[9] = {
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	711a      	strb	r2, [r3, #4]
			0,
		};
		memcpy(str, "SN", strlen("SN"));
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	2202      	movs	r2, #2
 80017c0:	4922      	ldr	r1, [pc, #136]	; (800184c <runCommands+0x3a8>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f009 fd00 	bl	800b1c8 <memcpy>
		itoa(SN_DEFINE, str + 2, 16);
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	3302      	adds	r3, #2
 80017ce:	2210      	movs	r2, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	481f      	ldr	r0, [pc, #124]	; (8001850 <runCommands+0x3ac>)
 80017d4:	f009 fcf6 	bl	800b1c4 <itoa>

		UserTxBufferFS[0] = cmd;
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80017e0:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = strlen(str);
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcb2 	bl	8000150 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 80017f6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80017fa:	3402      	adds	r4, #2
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fca5 	bl	8000150 <strlen>
 8001806:	4602      	mov	r2, r0
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f009 fcda 	bl	800b1c8 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fc99 	bl	8000150 <strlen>
 800181e:	4603      	mov	r3, r0
 8001820:	b29b      	uxth	r3, r3
 8001822:	3302      	adds	r3, #2
 8001824:	b29a      	uxth	r2, r3
 8001826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f009 f8a9 	bl	800a984 <CDC_Transmit_FS>
 8001832:	e24a      	b.n	8001cca <runCommands+0x826>
 8001834:	40010800 	.word	0x40010800
 8001838:	20000010 	.word	0x20000010
 800183c:	0800c5d8 	.word	0x0800c5d8
 8001840:	0800c5f0 	.word	0x0800c5f0
 8001844:	0800c608 	.word	0x0800c608
 8001848:	0800c614 	.word	0x0800c614
 800184c:	0800c620 	.word	0x0800c620
 8001850:	01121001 	.word	0x01121001
	На вход щупа подается семетричная пила с частотой 1кГц с оффестом установленным на ип.
	после компарирования сигнала МК измеряет длительность импульса
	т.к. 1 кГц соотвествет длительности в 500 мс то это означает что мы попапали в полуку офсета.*/
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x08)	// Калибровка TIM inHL?
 8001854:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001858:	2b08      	cmp	r3, #8
 800185a:	d11b      	bne.n	8001894 <runCommands+0x3f0>
	{
		EnableTIM3_PB4();
 800185c:	f7ff fd4a 	bl	80012f4 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 8001860:	f7ff fd54 	bl	800130c <GetTIM3>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	f107 0316 	add.w	r3, r7, #22
 800186c:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 800186e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001872:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001876:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 8001878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187c:	3301      	adds	r3, #1
 800187e:	f107 0216 	add.w	r2, r7, #22
 8001882:	8812      	ldrh	r2, [r2, #0]
 8001884:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 8001886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188a:	2103      	movs	r1, #3
 800188c:	4618      	mov	r0, r3
 800188e:	f009 f879 	bl	800a984 <CDC_Transmit_FS>
 8001892:	e21a      	b.n	8001cca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x09)	// Калибровка TIM inLL?
 8001894:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001898:	2b09      	cmp	r3, #9
 800189a:	d11b      	bne.n	80018d4 <runCommands+0x430>
	{
		EnableTIM4_PB6();
 800189c:	f7ff fd4e 	bl	800133c <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 80018a0:	f7ff fd58 	bl	8001354 <GetTIM4>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	801a      	strh	r2, [r3, #0]
		UserTxBufferFS[0] = cmd;
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 80018b6:	701a      	strb	r2, [r3, #0]
		memcpy(UserTxBufferFS + 1, &temp, sizeof(uint16_t));
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	3301      	adds	r3, #1
 80018be:	f107 0214 	add.w	r2, r7, #20
 80018c2:	8812      	ldrh	r2, [r2, #0]
 80018c4:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	2103      	movs	r1, #3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f009 f859 	bl	800a984 <CDC_Transmit_FS>
 80018d2:	e1fa      	b.n	8001cca <runCommands+0x826>
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0A)	// TODO: Прием калибровочной таблицы [0x0A][1-4][offset][count][data] 	answer: [0x0A]+[1-4]+[offset]+[count]+[status] (0x00 - сработал; 0x01 - не сработал)
 80018d4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 80018d8:	2b0a      	cmp	r3, #10
 80018da:	f040 81ad 	bne.w	8001c38 <runCommands+0x794>
	{
		//Прием калибровочной таблицы [0x0A][1-4][offset][count][data]
		//FIXME: За одну посылку можно получить максимум 64 byte. Нужно организовать пакетную передачу
		uint16_t tOffset, tCount, tData;
		if (*Len >= 2 && Buf[1] >= 0x00 && Buf[1] <= 0x03)
 80018de:	463b      	mov	r3, r7
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	f240 8197 	bls.w	8001c18 <runCommands+0x774>
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	f200 8190 	bhi.w	8001c18 <runCommands+0x774>
		{
			if 		(Buf[1] == 0x00)	//А_m12
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	3301      	adds	r3, #1
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d15f      	bne.n	80019c4 <runCommands+0x520>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3302      	adds	r3, #2
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	b29a      	uxth	r2, r3
 800190e:	f107 0312 	add.w	r3, r7, #18
 8001912:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3304      	adds	r3, #4
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 800192a:	e01f      	b.n	800196c <runCommands+0x4c8>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 800192c:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	3306      	adds	r3, #6
 8001934:	1d3a      	adds	r2, r7, #4
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4413      	add	r3, r2
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 030e 	add.w	r3, r7, #14
 8001942:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m12[i + tOffset] = tData;
 8001944:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001948:	f107 0212 	add.w	r2, r7, #18
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	4413      	add	r3, r2
 8001950:	f107 020e 	add.w	r2, r7, #14
 8001954:	8811      	ldrh	r1, [r2, #0]
 8001956:	4acf      	ldr	r2, [pc, #828]	; (8001c94 <runCommands+0x7f0>)
 8001958:	3304      	adds	r3, #4
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	460a      	mov	r2, r1
 8001960:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001962:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8001966:	3301      	adds	r3, #1
 8001968:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	f8b7 222e 	ldrh.w	r2, [r7, #558]	; 0x22e
 8001976:	429a      	cmp	r2, r3
 8001978:	d3d8      	bcc.n	800192c <runCommands+0x488>
				}

				changeTableFlag = true;
 800197a:	4bc7      	ldr	r3, [pc, #796]	; (8001c98 <runCommands+0x7f4>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001984:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001988:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	2201      	movs	r2, #1
 8001990:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2			->4
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	3302      	adds	r3, #2
 8001998:	f107 0212 	add.w	r2, r7, #18
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	3304      	adds	r3, #4
 80019a6:	f107 0210 	add.w	r2, r7, #16
 80019aa:	8812      	ldrh	r2, [r2, #0]
 80019ac:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1		->7
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	2200      	movs	r2, #0
 80019b4:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	2101      	movs	r1, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f008 ffe1 	bl	800a984 <CDC_Transmit_FS>
				return;
 80019c2:	e182      	b.n	8001cca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x01)	//B_m12
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3301      	adds	r3, #1
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d15c      	bne.n	8001a8a <runCommands+0x5e6>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3302      	adds	r3, #2
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	f107 0312 	add.w	r3, r7, #18
 80019de:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3304      	adds	r3, #4
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 80019f6:	e01f      	b.n	8001a38 <runCommands+0x594>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 80019f8:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	3306      	adds	r3, #6
 8001a00:	1d3a      	adds	r2, r7, #4
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	f107 030e 	add.w	r3, r7, #14
 8001a0e:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m12[i + tOffset] = tData;
 8001a10:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001a14:	f107 0212 	add.w	r2, r7, #18
 8001a18:	8812      	ldrh	r2, [r2, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f107 020e 	add.w	r2, r7, #14
 8001a20:	8811      	ldrh	r1, [r2, #0]
 8001a22:	4a9c      	ldr	r2, [pc, #624]	; (8001c94 <runCommands+0x7f0>)
 8001a24:	335c      	adds	r3, #92	; 0x5c
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001a2e:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8001a32:	3301      	adds	r3, #1
 8001a34:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3d8      	bcc.n	80019f8 <runCommands+0x554>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001a4e:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	2201      	movs	r2, #1
 8001a56:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f107 0212 	add.w	r2, r7, #18
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	8812      	ldrh	r2, [r2, #0]
 8001a72:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	2200      	movs	r2, #0
 8001a7a:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	2101      	movs	r1, #1
 8001a82:	4618      	mov	r0, r3
 8001a84:	f008 ff7e 	bl	800a984 <CDC_Transmit_FS>
				return;
 8001a88:	e11f      	b.n	8001cca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x02)	//A_m27
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d15c      	bne.n	8001b50 <runCommands+0x6ac>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f107 0312 	add.w	r3, r7, #18
 8001aa4:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001abc:	e01f      	b.n	8001afe <runCommands+0x65a>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001abe:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	1d3a      	adds	r2, r7, #4
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f107 030e 	add.w	r3, r7, #14
 8001ad4:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValA_m27[i + tOffset] = tData;
 8001ad6:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001ada:	f107 0212 	add.w	r2, r7, #18
 8001ade:	8812      	ldrh	r2, [r2, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f107 020e 	add.w	r2, r7, #14
 8001ae6:	8811      	ldrh	r1, [r2, #0]
 8001ae8:	4a6a      	ldr	r2, [pc, #424]	; (8001c94 <runCommands+0x7f0>)
 8001aea:	33b4      	adds	r3, #180	; 0xb4
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	460a      	mov	r2, r1
 8001af2:	809a      	strh	r2, [r3, #4]
				for (uint16_t i = 0; i < tCount; i++)
 8001af4:	f8b7 322a 	ldrh.w	r3, [r7, #554]	; 0x22a
 8001af8:	3301      	adds	r3, #1
 8001afa:	f8a7 322a 	strh.w	r3, [r7, #554]	; 0x22a
 8001afe:	f107 0310 	add.w	r3, r7, #16
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f8b7 222a 	ldrh.w	r2, [r7, #554]	; 0x22a
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3d8      	bcc.n	8001abe <runCommands+0x61a>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001b14:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	3302      	adds	r3, #2
 8001b24:	f107 0212 	add.w	r2, r7, #18
 8001b28:	8812      	ldrh	r2, [r2, #0]
 8001b2a:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b30:	3304      	adds	r3, #4
 8001b32:	f107 0210 	add.w	r2, r7, #16
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3e:	2200      	movs	r2, #0
 8001b40:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	2101      	movs	r1, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f008 ff1b 	bl	800a984 <CDC_Transmit_FS>
				return;
 8001b4e:	e0bc      	b.n	8001cca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
			else if (Buf[1] == 0x03)	//B_m27
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d15d      	bne.n	8001c18 <runCommands+0x774>
				----------------------
				...
				u16 Buf[count] = data[n-1]  u8
					Buf[count] = data[n] 	u8
				*/
				memcpy(&tOffset, Buf + 2, sizeof(uint16_t));
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3302      	adds	r3, #2
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	f107 0312 	add.w	r3, r7, #18
 8001b6a:	801a      	strh	r2, [r3, #0]
				memcpy(&tCount, Buf + 2 + sizeof(uint16_t), sizeof(uint16_t));
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3304      	adds	r3, #4
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	801a      	strh	r2, [r3, #0]

				for (uint16_t i = 0; i < tCount; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001b82:	e020      	b.n	8001bc6 <runCommands+0x722>
				{
					memcpy(&tData, Buf + 2 + 2 * sizeof(uint16_t) + i * 2, sizeof(uint16_t));
 8001b84:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	1d3a      	adds	r2, r7, #4
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f107 030e 	add.w	r3, r7, #14
 8001b9a:	801a      	strh	r2, [r3, #0]
					DevNVRAM.calibration_table.dacValB_m27[i + tOffset] = tData;
 8001b9c:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001ba0:	f107 0212 	add.w	r2, r7, #18
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f107 020e 	add.w	r2, r7, #14
 8001bac:	8811      	ldrh	r1, [r2, #0]
 8001bae:	4a39      	ldr	r2, [pc, #228]	; (8001c94 <runCommands+0x7f0>)
 8001bb0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	4413      	add	r3, r2
 8001bb8:	460a      	mov	r2, r1
 8001bba:	805a      	strh	r2, [r3, #2]
				for (uint16_t i = 0; i < tCount; i++)
 8001bbc:	f8b7 3228 	ldrh.w	r3, [r7, #552]	; 0x228
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3d7      	bcc.n	8001b84 <runCommands+0x6e0>
					Buf[5] = count u8
				----------------------
				u8	Buf[6] = status u8	(0x00 - сработал; 0x01 - не сработал)
				----------------------
				*/
				UserTxBufferFS[0] = cmd;												  //1			->1
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001bdc:	701a      	strb	r2, [r3, #0]
				UserTxBufferFS[1] = 0x01;												  //1			->2
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	2201      	movs	r2, #1
 8001be4:	705a      	strb	r2, [r3, #1]
				memcpy(UserTxBufferFS + 2, &tOffset, sizeof(uint16_t));					  //2+2		->4
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	3302      	adds	r3, #2
 8001bec:	f107 0212 	add.w	r2, r7, #18
 8001bf0:	8812      	ldrh	r2, [r2, #0]
 8001bf2:	801a      	strh	r2, [r3, #0]
				memcpy(UserTxBufferFS + 2 + sizeof(uint16_t), &tCount, sizeof(uint16_t)); //2+2+2		->6
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	f107 0210 	add.w	r2, r7, #16
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	801a      	strh	r2, [r3, #0]
				UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1] = 0x00;					  //2+2*2+1	->7
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	2200      	movs	r2, #0
 8001c08:	71da      	strb	r2, [r3, #7]

				CDC_Transmit_FS(UserTxBufferFS, sizeof(UserTxBufferFS[2 + 2 * sizeof(uint16_t) + 1]));
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	2101      	movs	r1, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 feb7 	bl	800a984 <CDC_Transmit_FS>
				return;
 8001c16:	e058      	b.n	8001cca <runCommands+0x826>
				//--------------------------------------------------------------------------
			}
			//--------------------------------------------------------------------------
		}
		UserTxBufferFS[0] = cmd;
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c20:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 fea7 	bl	800a984 <CDC_Transmit_FS>
		return;
 8001c36:	e048      	b.n	8001cca <runCommands+0x826>
		//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0B)	// TODO: Отправка CRC 1-4 таблицы [0x0B][1-4][CRC(1-4)]	answer:
 8001c38:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c3c:	2b0b      	cmp	r3, #11
 8001c3e:	d041      	beq.n	8001cc4 <runCommands+0x820>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0C)	// TODO: Прием длины калибровочной таблицы [0x0C][Длина][???]
 8001c40:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d03f      	beq.n	8001cc8 <runCommands+0x824>
	{
		return;
	//--------------------------------------------------------------------------
	}
	else if (cmd == 0x0D)	// TODO: Запись во флеш калибровочной таблицы [0x0D] data: 1B (0x00 - успешно; 0x01 - ошибка при записи)	answer: 0x0D + 1B status
 8001c48:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8001c4c:	2b0d      	cmp	r3, #13
 8001c4e:	d13c      	bne.n	8001cca <runCommands+0x826>
	{
		if (*Len >= 2 && (Buf[1] == 0x02))
 8001c50:	463b      	mov	r3, r7
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d922      	bls.n	8001ca0 <runCommands+0x7fc>
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d11c      	bne.n	8001ca0 <runCommands+0x7fc>
		{
			//TODO: Функция записи фо флеш. FIXME: не работает запись фо флеш!
			 changeTableFlag = true;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <runCommands+0x7f4>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
			// writeTableInFlash();
			printf("changeTableFlag = true!");
 8001c6c:	480b      	ldr	r0, [pc, #44]	; (8001c9c <runCommands+0x7f8>)
 8001c6e:	f009 fac1 	bl	800b1f4 <iprintf>
			UserTxBufferFS[0] = cmd;
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001c7a:	701a      	strb	r2, [r3, #0]
			UserTxBufferFS[1] = 0x00; // успешно
 8001c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c80:	2200      	movs	r2, #0
 8001c82:	705a      	strb	r2, [r3, #1]
			CDC_Transmit_FS(UserTxBufferFS, 2);
 8001c84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 fe7a 	bl	800a984 <CDC_Transmit_FS>
			return;
 8001c90:	e01b      	b.n	8001cca <runCommands+0x826>
 8001c92:	bf00      	nop
 8001c94:	200004f4 	.word	0x200004f4
 8001c98:	20000254 	.word	0x20000254
 8001c9c:	0800c624 	.word	0x0800c624
		}
 		
		//--------------------------------------------------------------------------
		UserTxBufferFS[0] = cmd;
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	f897 2227 	ldrb.w	r2, [r7, #551]	; 0x227
 8001ca8:	701a      	strb	r2, [r3, #0]
		UserTxBufferFS[1] = 0x01; // ошибка
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2201      	movs	r2, #1
 8001cb0:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 fe63 	bl	800a984 <CDC_Transmit_FS>
		return;
 8001cbe:	e004      	b.n	8001cca <runCommands+0x826>
		return;
 8001cc0:	bf00      	nop
 8001cc2:	e002      	b.n	8001cca <runCommands+0x826>
		return;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <runCommands+0x826>
		return;
 8001cc8:	bf00      	nop
		//--------------------------------------------------------------------------
	}
//-------------------------------------------------------------------------
	
}
 8001cca:	f507 770d 	add.w	r7, r7, #564	; 0x234
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop

08001cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cda:	f000 fe7d 	bl	80029d8 <HAL_Init>

  /* USER CODE BEGIN Init */
//--------------------------------------------------------------------------
#if DWT_INIT
	DWT_Init();
 8001cde:	f7ff f9ab 	bl	8001038 <DWT_Init>
	//--------------------------------------------------------------------------

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce2:	f000 f979 	bl	8001fd8 <SystemClock_Config>
//-------------------------------------------------------------------------

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce6:	f000 fb23 	bl	8002330 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001cea:	f000 fa25 	bl	8002138 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001cee:	f008 fd87 	bl	800a800 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001cf2:	f000 f9cf 	bl	8002094 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001cf6:	f000 fa57 	bl	80021a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cfa:	f000 fab7 	bl	800226c <MX_TIM4_Init>
  MX_CRC_Init();
 8001cfe:	f000 fa07 	bl	8002110 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
	//**************************************************************************
#if TEST_UID
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8001d02:	4b9b      	ldr	r3, [pc, #620]	; (8001f70 <main+0x29c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4b9a      	ldr	r3, [pc, #616]	; (8001f74 <main+0x2a0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <main+0x2a4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a98      	ldr	r2, [pc, #608]	; (8001f7c <main+0x2a8>)
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	9201      	str	r2, [sp, #4]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4603      	mov	r3, r0
 8001d24:	460a      	mov	r2, r1
 8001d26:	4996      	ldr	r1, [pc, #600]	; (8001f80 <main+0x2ac>)
 8001d28:	4896      	ldr	r0, [pc, #600]	; (8001f84 <main+0x2b0>)
 8001d2a:	f009 fa7b 	bl	800b224 <siprintf>
	printf(buffer);
 8001d2e:	4895      	ldr	r0, [pc, #596]	; (8001f84 <main+0x2b0>)
 8001d30:	f009 fa60 	bl	800b1f4 <iprintf>
#endif /* TEST_UID */

	//**************************************************************************
#if TEST_TIM_CAPTURE
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001d34:	2100      	movs	r1, #0
 8001d36:	4894      	ldr	r0, [pc, #592]	; (8001f88 <main+0x2b4>)
 8001d38:	f004 fc30 	bl	800659c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	4892      	ldr	r0, [pc, #584]	; (8001f88 <main+0x2b4>)
 8001d40:	f004 fc2c 	bl	800659c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001d44:	2100      	movs	r1, #0
 8001d46:	4891      	ldr	r0, [pc, #580]	; (8001f8c <main+0x2b8>)
 8001d48:	f004 fc28 	bl	800659c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	488f      	ldr	r0, [pc, #572]	; (8001f8c <main+0x2b8>)
 8001d50:	f004 fc24 	bl	800659c <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */
//--------------------------------------------------------------------------
#if TEST_DAC
	SetAllDAC();
 8001d54:	f7ff f9e2 	bl	800111c <SetAllDAC>
#endif /* TEST_DAC */
	   //**************************************************************************
#if TEST_ADC
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001d58:	488d      	ldr	r0, [pc, #564]	; (8001f90 <main+0x2bc>)
 8001d5a:	f001 fa89 	bl	8003270 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001d5e:	488c      	ldr	r0, [pc, #560]	; (8001f90 <main+0x2bc>)
 8001d60:	f000 ff74 	bl	8002c4c <HAL_ADC_Start_IT>

#endif /* TEST_ADC */
//**************************************************************************
#if TEST_FLASH_TABLE
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	488a      	ldr	r0, [pc, #552]	; (8001f94 <main+0x2c0>)
 8001d6a:	f002 f836 	bl	8003dda <HAL_GPIO_TogglePin>
	flash_fill_calibTable();
 8001d6e:	f7fe fff7 	bl	8000d60 <flash_fill_calibTable>
	flash_write_calibTable();
 8001d72:	f7ff f817 	bl	8000da4 <flash_write_calibTable>
    // TODO: Надо по запросе какая версия калиброчной табцы высылать значения дефолтной таблице...
    //--------------------------------------------------------------------------
*/
#endif /* TEST_FLASH_TABLE */

	uint32_t timme = 0; // для таймера в 10 сек
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Циклически проверяем соотвествует ли информация в памяти массиву настроек?
		if ((HAL_GetTick() - timme) > 10000) // интервал  10сек
 8001d7a:	f000 fe85 	bl	8002a88 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d902      	bls.n	8001d92 <main+0xbe>
				HAL_Delay(100);
				//--------------------------------------------------------------------------
				printf("flash done");
			}*/
#endif /* TEST_FLASH_TABLE */
			timme = HAL_GetTick();
 8001d8c:	f000 fe7c 	bl	8002a88 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]
		}

//**************************************************************************
#if TEST_READ_BTN //TODO: данная реализация плохо отрабатывает! TODO: Нужно переделать на EXTI+TIM

		uint32_t ms = HAL_GetTick();
 8001d92:	f000 fe79 	bl	8002a88 <HAL_GetTick>
 8001d96:	60b8      	str	r0, [r7, #8]
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8001d98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d9c:	487e      	ldr	r0, [pc, #504]	; (8001f98 <main+0x2c4>)
 8001d9e:	f001 ffed 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50)
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <main+0x100>
 8001dac:	4b7b      	ldr	r3, [pc, #492]	; (8001f9c <main+0x2c8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10f      	bne.n	8001dd4 <main+0x100>
 8001db4:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <main+0x2cc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b32      	cmp	r3, #50	; 0x32
 8001dbe:	d909      	bls.n	8001dd4 <main+0x100>
		{
			short_state1 = 1;
 8001dc0:	4b76      	ldr	r3, [pc, #472]	; (8001f9c <main+0x2c8>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8001dc6:	4b77      	ldr	r3, [pc, #476]	; (8001fa4 <main+0x2d0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001dcc:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <main+0x2cc>)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e02e      	b.n	8001e32 <main+0x15e>
		}
		else if (key1_state == 0 && !long_state1 && (ms - time_key1) > KEY_LONG_DELAY)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <main+0x12a>
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <main+0x2d0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <main+0x12a>
 8001de2:	4b6f      	ldr	r3, [pc, #444]	; (8001fa0 <main+0x2cc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dee:	d906      	bls.n	8001dfe <main+0x12a>
		{
			long_state1 = 1;
 8001df0:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <main+0x2d0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 8001df6:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <main+0x2d4>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	e019      	b.n	8001e32 <main+0x15e>
		}
		else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d116      	bne.n	8001e32 <main+0x15e>
 8001e04:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <main+0x2c8>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <main+0x15e>
 8001e0c:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <main+0x2cc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b32      	cmp	r3, #50	; 0x32
 8001e16:	d90c      	bls.n	8001e32 <main+0x15e>
		{
			short_state1 = 0;
 8001e18:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <main+0x2c8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 8001e1e:	4a60      	ldr	r2, [pc, #384]	; (8001fa0 <main+0x2cc>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	6013      	str	r3, [r2, #0]

			if (!long_state1)
 8001e24:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <main+0x2d0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <main+0x15e>
			{
				// действие на короткое нажатие
				btn1_short_rd = 1;
 8001e2c:	4b5f      	ldr	r3, [pc, #380]	; (8001fac <main+0x2d8>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 8001e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e36:	4858      	ldr	r0, [pc, #352]	; (8001f98 <main+0x2c4>)
 8001e38:	f001 ffa0 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71bb      	strb	r3, [r7, #6]

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50)
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d113      	bne.n	8001e6e <main+0x19a>
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <main+0x2dc>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10f      	bne.n	8001e6e <main+0x19a>
 8001e4e:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <main+0x2e0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b32      	cmp	r3, #50	; 0x32
 8001e58:	d909      	bls.n	8001e6e <main+0x19a>
		{
			short_state2 = 1;
 8001e5a:	4b55      	ldr	r3, [pc, #340]	; (8001fb0 <main+0x2dc>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <main+0x2e4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001e66:	4a53      	ldr	r2, [pc, #332]	; (8001fb4 <main+0x2e0>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <main+0x1f8>
		}
		else if (key2_state == 0 && !long_state2 && (ms - time_key2) > KEY_LONG_DELAY)
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d111      	bne.n	8001e98 <main+0x1c4>
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <main+0x2e4>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10d      	bne.n	8001e98 <main+0x1c4>
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <main+0x2e0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e88:	d906      	bls.n	8001e98 <main+0x1c4>
		{
			long_state2 = 1;
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <main+0x2e4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 8001e90:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <main+0x2e8>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	e019      	b.n	8001ecc <main+0x1f8>
		}
		else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50)
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d116      	bne.n	8001ecc <main+0x1f8>
 8001e9e:	4b44      	ldr	r3, [pc, #272]	; (8001fb0 <main+0x2dc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d012      	beq.n	8001ecc <main+0x1f8>
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <main+0x2e0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b32      	cmp	r3, #50	; 0x32
 8001eb0:	d90c      	bls.n	8001ecc <main+0x1f8>
		{
			short_state2 = 0;
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <main+0x2dc>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8001eb8:	4a3e      	ldr	r2, [pc, #248]	; (8001fb4 <main+0x2e0>)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	6013      	str	r3, [r2, #0]

			if (!long_state2)
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <main+0x2e4>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <main+0x1f8>
			{
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8001ec6:	4b3e      	ldr	r3, [pc, #248]	; (8001fc0 <main+0x2ec>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 8001ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed0:	4831      	ldr	r0, [pc, #196]	; (8001f98 <main+0x2c4>)
 8001ed2:	f001 ff53 	bl	8003d7c <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	717b      	strb	r3, [r7, #5]
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50)
 8001eda:	797b      	ldrb	r3, [r7, #5]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d113      	bne.n	8001f08 <main+0x234>
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <main+0x2f0>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10f      	bne.n	8001f08 <main+0x234>
 8001ee8:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <main+0x2f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b32      	cmp	r3, #50	; 0x32
 8001ef2:	d909      	bls.n	8001f08 <main+0x234>
		{
			short_state3 = 1;
 8001ef4:	4b33      	ldr	r3, [pc, #204]	; (8001fc4 <main+0x2f0>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <main+0x2f8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001f00:	4a31      	ldr	r2, [pc, #196]	; (8001fc8 <main+0x2f4>)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e032      	b.n	8001f6e <main+0x29a>
		}
		else if (key3_state == 0 && !long_state3 && (ms - time_key3) > KEY_LONG_DELAY)
 8001f08:	797b      	ldrb	r3, [r7, #5]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d111      	bne.n	8001f32 <main+0x25e>
 8001f0e:	4b2f      	ldr	r3, [pc, #188]	; (8001fcc <main+0x2f8>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <main+0x25e>
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <main+0x2f4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f22:	d906      	bls.n	8001f32 <main+0x25e>
		{
			long_state3 = 1;
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <main+0x2f8>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <main+0x2fc>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e01d      	b.n	8001f6e <main+0x29a>
		}
		else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50)
 8001f32:	797b      	ldrb	r3, [r7, #5]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f47f af20 	bne.w	8001d7a <main+0xa6>
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <main+0x2f0>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f43f af1b 	beq.w	8001d7a <main+0xa6>
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <main+0x2f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b32      	cmp	r3, #50	; 0x32
 8001f4e:	f67f af14 	bls.w	8001d7a <main+0xa6>
		{
			short_state3 = 0;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <main+0x2f0>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <main+0x2f4>)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6013      	str	r3, [r2, #0]

			if (!long_state3)
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <main+0x2f8>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f af09 	bne.w	8001d7a <main+0xa6>
			{
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <main+0x300>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
	{
 8001f6e:	e704      	b.n	8001d7a <main+0xa6>
 8001f70:	20000000 	.word	0x20000000
 8001f74:	20000004 	.word	0x20000004
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	2000000c 	.word	0x2000000c
 8001f80:	0800c63c 	.word	0x0800c63c
 8001f84:	20000214 	.word	0x20000214
 8001f88:	200008fc 	.word	0x200008fc
 8001f8c:	200004ac 	.word	0x200004ac
 8001f90:	20000944 	.word	0x20000944
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	2000025a 	.word	0x2000025a
 8001fa0:	2000025c 	.word	0x2000025c
 8001fa4:	2000025b 	.word	0x2000025b
 8001fa8:	20000260 	.word	0x20000260
 8001fac:	20000261 	.word	0x20000261
 8001fb0:	20000262 	.word	0x20000262
 8001fb4:	20000264 	.word	0x20000264
 8001fb8:	20000263 	.word	0x20000263
 8001fbc:	20000268 	.word	0x20000268
 8001fc0:	20000269 	.word	0x20000269
 8001fc4:	2000026a 	.word	0x2000026a
 8001fc8:	2000026c 	.word	0x2000026c
 8001fcc:	2000026b 	.word	0x2000026b
 8001fd0:	20000270 	.word	0x20000270
 8001fd4:	20000271 	.word	0x20000271

08001fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b094      	sub	sp, #80	; 0x50
 8001fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fe2:	2228      	movs	r2, #40	; 0x28
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 f8fc 	bl	800b1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002016:	2301      	movs	r3, #1
 8002018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800201a:	2302      	movs	r3, #2
 800201c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800201e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002024:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fa7e 	bl	8005530 <HAL_RCC_OscConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800203a:	f000 fa2f 	bl	800249c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203e:	230f      	movs	r3, #15
 8002040:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800204a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800204e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fce8 	bl	8005a30 <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002066:	f000 fa19 	bl	800249c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800206a:	2312      	movs	r3, #18
 800206c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800206e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002072:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fe5e 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002086:	f000 fa09 	bl	800249c <Error_Handler>
  }
}
 800208a:	bf00      	nop
 800208c:	3750      	adds	r7, #80	; 0x50
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_ADC1_Init+0x74>)
 80020a6:	4a19      	ldr	r2, [pc, #100]	; (800210c <MX_ADC1_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_ADC1_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_ADC1_Init+0x74>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_ADC1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_ADC1_Init+0x74>)
 80020be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c4:	4b10      	ldr	r3, [pc, #64]	; (8002108 <MX_ADC1_Init+0x74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_ADC1_Init+0x74>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020d0:	480d      	ldr	r0, [pc, #52]	; (8002108 <MX_ADC1_Init+0x74>)
 80020d2:	f000 fce3 	bl	8002a9c <HAL_ADC_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80020dc:	f000 f9de 	bl	800249c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80020e0:	2303      	movs	r3, #3
 80020e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80020e8:	2302      	movs	r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_ADC1_Init+0x74>)
 80020f2:	f000 ff39 	bl	8002f68 <HAL_ADC_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80020fc:	f000 f9ce 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000944 	.word	0x20000944
 800210c:	40012400 	.word	0x40012400

08002110 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_CRC_Init+0x20>)
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <MX_CRC_Init+0x24>)
 8002118:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_CRC_Init+0x20>)
 800211c:	f001 fa5b 	bl	80035d6 <HAL_CRC_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002126:	f000 f9b9 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200008f4 	.word	0x200008f4
 8002134:	40023000 	.word	0x40023000

08002138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_SPI1_Init+0x68>)
 800213e:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <MX_SPI1_Init+0x6c>)
 8002140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MX_SPI1_Init+0x68>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002156:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <MX_SPI1_Init+0x68>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800216a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_SPI1_Init+0x68>)
 800216e:	2208      	movs	r2, #8
 8002170:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_SPI1_Init+0x68>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002180:	2200      	movs	r2, #0
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_SPI1_Init+0x68>)
 8002186:	220a      	movs	r2, #10
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_SPI1_Init+0x68>)
 800218c:	f003 ff50 	bl	8006030 <HAL_SPI_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002196:	f000 f981 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000974 	.word	0x20000974
 80021a4:	40013000 	.word	0x40013000

080021a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021c6:	4a28      	ldr	r2, [pc, #160]	; (8002268 <MX_TIM3_Init+0xc0>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80021ca:	4b26      	ldr	r3, [pc, #152]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021cc:	2247      	movs	r2, #71	; 0x47
 80021ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021d8:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80021dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80021ea:	481e      	ldr	r0, [pc, #120]	; (8002264 <MX_TIM3_Init+0xbc>)
 80021ec:	f004 f986 	bl	80064fc <HAL_TIM_IC_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80021f6:	f000 f951 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4619      	mov	r1, r3
 8002208:	4816      	ldr	r0, [pc, #88]	; (8002264 <MX_TIM3_Init+0xbc>)
 800220a:	f004 fe65 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002214:	f000 f942 	bl	800249c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002218:	2300      	movs	r3, #0
 800221a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800221c:	2301      	movs	r3, #1
 800221e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	4619      	mov	r1, r3
 800222e:	480d      	ldr	r0, [pc, #52]	; (8002264 <MX_TIM3_Init+0xbc>)
 8002230:	f004 fbc2 	bl	80069b8 <HAL_TIM_IC_ConfigChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800223a:	f000 f92f 	bl	800249c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800223e:	2302      	movs	r3, #2
 8002240:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002242:	2302      	movs	r3, #2
 8002244:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002246:	463b      	mov	r3, r7
 8002248:	2204      	movs	r2, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM3_Init+0xbc>)
 800224e:	f004 fbb3 	bl	80069b8 <HAL_TIM_IC_ConfigChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002258:	f000 f920 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200008fc 	.word	0x200008fc
 8002268:	40000400 	.word	0x40000400

0800226c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
 8002286:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002288:	4b27      	ldr	r3, [pc, #156]	; (8002328 <MX_TIM4_Init+0xbc>)
 800228a:	4a28      	ldr	r2, [pc, #160]	; (800232c <MX_TIM4_Init+0xc0>)
 800228c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <MX_TIM4_Init+0xbc>)
 8002290:	2247      	movs	r2, #71	; 0x47
 8002292:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b24      	ldr	r3, [pc, #144]	; (8002328 <MX_TIM4_Init+0xbc>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <MX_TIM4_Init+0xbc>)
 800229c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80022a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <MX_TIM4_Init+0xbc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <MX_TIM4_Init+0xbc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80022ae:	481e      	ldr	r0, [pc, #120]	; (8002328 <MX_TIM4_Init+0xbc>)
 80022b0:	f004 f924 	bl	80064fc <HAL_TIM_IC_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 f8ef 	bl	800249c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022c6:	f107 0310 	add.w	r3, r7, #16
 80022ca:	4619      	mov	r1, r3
 80022cc:	4816      	ldr	r0, [pc, #88]	; (8002328 <MX_TIM4_Init+0xbc>)
 80022ce:	f004 fe03 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80022d8:	f000 f8e0 	bl	800249c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022e0:	2301      	movs	r3, #1
 80022e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022ec:	463b      	mov	r3, r7
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	480d      	ldr	r0, [pc, #52]	; (8002328 <MX_TIM4_Init+0xbc>)
 80022f4:	f004 fb60 	bl	80069b8 <HAL_TIM_IC_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80022fe:	f000 f8cd 	bl	800249c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002302:	2302      	movs	r3, #2
 8002304:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002306:	2302      	movs	r3, #2
 8002308:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	2204      	movs	r2, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_TIM4_Init+0xbc>)
 8002312:	f004 fb51 	bl	80069b8 <HAL_TIM_IC_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800231c:	f000 f8be 	bl	800249c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200004ac 	.word	0x200004ac
 800232c:	40000800 	.word	0x40000800

08002330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <MX_GPIO_Init+0x15c>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <MX_GPIO_Init+0x15c>)
 800234a:	f043 0310 	orr.w	r3, r3, #16
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <MX_GPIO_Init+0x15c>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <MX_GPIO_Init+0x15c>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a4a      	ldr	r2, [pc, #296]	; (800248c <MX_GPIO_Init+0x15c>)
 8002362:	f043 0320 	orr.w	r3, r3, #32
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <MX_GPIO_Init+0x15c>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <MX_GPIO_Init+0x15c>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a44      	ldr	r2, [pc, #272]	; (800248c <MX_GPIO_Init+0x15c>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b42      	ldr	r3, [pc, #264]	; (800248c <MX_GPIO_Init+0x15c>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <MX_GPIO_Init+0x15c>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a3e      	ldr	r2, [pc, #248]	; (800248c <MX_GPIO_Init+0x15c>)
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <MX_GPIO_Init+0x15c>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	607b      	str	r3, [r7, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2302      	movs	r3, #2
 80023b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4835      	ldr	r0, [pc, #212]	; (8002490 <MX_GPIO_Init+0x160>)
 80023ba:	f001 fb5b 	bl	8003a74 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c4:	4832      	ldr	r0, [pc, #200]	; (8002490 <MX_GPIO_Init+0x160>)
 80023c6:	f001 fcf0 	bl	8003daa <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80023ca:	2300      	movs	r3, #0
 80023cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023ce:	e002      	b.n	80023d6 <MX_GPIO_Init+0xa6>
 80023d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023d2:	3301      	adds	r3, #1
 80023d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80023d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80023dc:	4293      	cmp	r3, r2
 80023de:	d9f7      	bls.n	80023d0 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4828      	ldr	r0, [pc, #160]	; (8002490 <MX_GPIO_Init+0x160>)
 80023f0:	f001 fb40 	bl	8003a74 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80023f4:	2300      	movs	r3, #0
 80023f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023f8:	e002      	b.n	8002400 <MX_GPIO_Init+0xd0>
 80023fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023fc:	3301      	adds	r3, #1
 80023fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002402:	f242 720f 	movw	r2, #9999	; 0x270f
 8002406:	4293      	cmp	r3, r2
 8002408:	d9f7      	bls.n	80023fa <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002410:	4820      	ldr	r0, [pc, #128]	; (8002494 <MX_GPIO_Init+0x164>)
 8002412:	f001 fcca 	bl	8003daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f240 4112 	movw	r1, #1042	; 0x412
 800241c:	481c      	ldr	r0, [pc, #112]	; (8002490 <MX_GPIO_Init+0x160>)
 800241e:	f001 fcc4 	bl	8003daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2104      	movs	r1, #4
 8002426:	481a      	ldr	r0, [pc, #104]	; (8002490 <MX_GPIO_Init+0x160>)
 8002428:	f001 fcbf 	bl	8003daa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800242c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2302      	movs	r3, #2
 800243c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <MX_GPIO_Init+0x164>)
 8002446:	f001 fb15 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 800244a:	f240 4316 	movw	r3, #1046	; 0x416
 800244e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002450:	2301      	movs	r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	480b      	ldr	r0, [pc, #44]	; (8002490 <MX_GPIO_Init+0x160>)
 8002464:	f001 fb06 	bl	8003a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002468:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4806      	ldr	r0, [pc, #24]	; (8002498 <MX_GPIO_Init+0x168>)
 800247e:	f001 faf9 	bl	8003a74 <HAL_GPIO_Init>

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	40010800 	.word	0x40010800
 8002494:	40011000 	.word	0x40011000
 8002498:	40010c00 	.word	0x40010c00

0800249c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_MspInit+0x5c>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a14      	ldr	r2, [pc, #80]	; (8002504 <HAL_MspInit+0x5c>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_MspInit+0x5c>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_MspInit+0x5c>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_MspInit+0x5c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_MspInit+0x5c>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_MspInit+0x60>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_MspInit+0x60>)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000

0800250c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_ADC_MspInit+0x7c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d129      	bne.n	8002580 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_ADC_MspInit+0x80>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_ADC_MspInit+0x80>)
 8002532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_ADC_MspInit+0x80>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_ADC_MspInit+0x80>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_ADC_MspInit+0x80>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	6193      	str	r3, [r2, #24]
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_ADC_MspInit+0x80>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800255c:	2308      	movs	r3, #8
 800255e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002560:	2303      	movs	r3, #3
 8002562:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	4619      	mov	r1, r3
 800256a:	4809      	ldr	r0, [pc, #36]	; (8002590 <HAL_ADC_MspInit+0x84>)
 800256c:	f001 fa82 	bl	8003a74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	2012      	movs	r0, #18
 8002576:	f000 fff8 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800257a:	2012      	movs	r0, #18
 800257c:	f001 f811 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002580:	bf00      	nop
 8002582:	3720      	adds	r7, #32
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40012400 	.word	0x40012400
 800258c:	40021000 	.word	0x40021000
 8002590:	40010800 	.word	0x40010800

08002594 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_CRC_MspInit+0x34>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10b      	bne.n	80025be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_CRC_MspInit+0x38>)
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	4a08      	ldr	r2, [pc, #32]	; (80025cc <HAL_CRC_MspInit+0x38>)
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	6153      	str	r3, [r2, #20]
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_CRC_MspInit+0x38>)
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40023000 	.word	0x40023000
 80025cc:	40021000 	.word	0x40021000

080025d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_SPI_MspInit+0x70>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d123      	bne.n	8002638 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <HAL_SPI_MspInit+0x74>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_SPI_MspInit+0x74>)
 80025f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_SPI_MspInit+0x74>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_SPI_MspInit+0x74>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	4a0d      	ldr	r2, [pc, #52]	; (8002644 <HAL_SPI_MspInit+0x74>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6193      	str	r3, [r2, #24]
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_SPI_MspInit+0x74>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002620:	23a0      	movs	r3, #160	; 0xa0
 8002622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	4619      	mov	r1, r3
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <HAL_SPI_MspInit+0x78>)
 8002634:	f001 fa1e 	bl	8003a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3720      	adds	r7, #32
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40013000 	.word	0x40013000
 8002644:	40021000 	.word	0x40021000
 8002648:	40010800 	.word	0x40010800

0800264c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3b      	ldr	r2, [pc, #236]	; (8002754 <HAL_TIM_IC_MspInit+0x108>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d13e      	bne.n	80026ea <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	4a39      	ldr	r2, [pc, #228]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	61d3      	str	r3, [r2, #28]
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	4a33      	ldr	r2, [pc, #204]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	6193      	str	r3, [r2, #24]
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800269c:	2310      	movs	r3, #16
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	482b      	ldr	r0, [pc, #172]	; (800275c <HAL_TIM_IC_MspInit+0x110>)
 80026b0:	f001 f9e0 	bl	8003a74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_TIM_IC_MspInit+0x114>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d2:	4a23      	ldr	r2, [pc, #140]	; (8002760 <HAL_TIM_IC_MspInit+0x114>)
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	201d      	movs	r0, #29
 80026de:	f000 ff44 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026e2:	201d      	movs	r0, #29
 80026e4:	f000 ff5d 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026e8:	e030      	b.n	800274c <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_TIM_IC_MspInit+0x118>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12b      	bne.n	800274c <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	61d3      	str	r3, [r2, #28]
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_TIM_IC_MspInit+0x10c>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002724:	2340      	movs	r3, #64	; 0x40
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4809      	ldr	r0, [pc, #36]	; (800275c <HAL_TIM_IC_MspInit+0x110>)
 8002738:	f001 f99c 	bl	8003a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	201e      	movs	r0, #30
 8002742:	f000 ff12 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002746:	201e      	movs	r0, #30
 8002748:	f000 ff2b 	bl	80035a2 <HAL_NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3730      	adds	r7, #48	; 0x30
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40000400 	.word	0x40000400
 8002758:	40021000 	.word	0x40021000
 800275c:	40010c00 	.word	0x40010c00
 8002760:	40010000 	.word	0x40010000
 8002764:	40000800 	.word	0x40000800

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002778:	4806      	ldr	r0, [pc, #24]	; (8002794 <HardFault_Handler+0x20>)
 800277a:	f008 fd3b 	bl	800b1f4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HardFault_Handler+0x20>)
 8002780:	f008 fd38 	bl	800b1f4 <iprintf>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800278a:	4803      	ldr	r0, [pc, #12]	; (8002798 <HardFault_Handler+0x24>)
 800278c:	f001 fb0d 	bl	8003daa <HAL_GPIO_WritePin>
	  printf("HardFault_IRQn");
 8002790:	e7f5      	b.n	800277e <HardFault_Handler+0xa>
 8002792:	bf00      	nop
 8002794:	0800c650 	.word	0x0800c650
 8002798:	40011000 	.word	0x40011000

0800279c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <MemManage_Handler+0x4>

080027a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <BusFault_Handler+0x4>

080027a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <UsageFault_Handler+0x4>

080027ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d6:	f000 f945 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <ADC1_2_IRQHandler+0x10>)
 80027e6:	f000 faf3 	bl	8002dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000944 	.word	0x20000944

080027f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80027fa:	f001 fc38 	bl	800406e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200012b4 	.word	0x200012b4

08002808 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM3_IRQHandler+0x10>)
 800280e:	f003 ffcb 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200008fc 	.word	0x200008fc

0800281c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <TIM4_IRQHandler+0x10>)
 8002822:	f003 ffc1 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200004ac 	.word	0x200004ac

08002830 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e00a      	b.n	8002858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002842:	f3af 8000 	nop.w
 8002846:	4601      	mov	r1, r0
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	60ba      	str	r2, [r7, #8]
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3301      	adds	r3, #1
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	dbf0      	blt.n	8002842 <_read+0x12>
	}

return len;
 8002860:	687b      	ldr	r3, [r7, #4]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_close>:
	}
	return len;
}

int _close(int file)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002890:	605a      	str	r2, [r3, #4]
	return 0;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <_isatty>:

int _isatty(int file)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	return 1;
 80028a6:	2301      	movs	r3, #1
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
	return 0;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028d4:	4b11      	ldr	r3, [pc, #68]	; (800291c <_sbrk+0x50>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x16>
		heap_end = &end;
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <_sbrk+0x50>)
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <_sbrk+0x54>)
 80028e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <_sbrk+0x50>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <_sbrk+0x50>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	466a      	mov	r2, sp
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d907      	bls.n	8002906 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028f6:	f008 fc23 	bl	800b140 <__errno>
 80028fa:	4603      	mov	r3, r0
 80028fc:	220c      	movs	r2, #12
 80028fe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e006      	b.n	8002914 <_sbrk+0x48>
	}

	heap_end += incr;
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <_sbrk+0x50>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a03      	ldr	r2, [pc, #12]	; (800291c <_sbrk+0x50>)
 8002910:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000027c 	.word	0x2000027c
 8002920:	200015b0 	.word	0x200015b0

08002924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <SystemInit+0x5c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <SystemInit+0x5c>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <SystemInit+0x5c>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4911      	ldr	r1, [pc, #68]	; (8002980 <SystemInit+0x5c>)
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <SystemInit+0x60>)
 800293c:	4013      	ands	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <SystemInit+0x5c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <SystemInit+0x5c>)
 8002946:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800294a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <SystemInit+0x5c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <SystemInit+0x5c>)
 8002956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <SystemInit+0x5c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a07      	ldr	r2, [pc, #28]	; (8002980 <SystemInit+0x5c>)
 8002962:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002966:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <SystemInit+0x5c>)
 800296a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800296e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <SystemInit+0x64>)
 8002972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002976:	609a      	str	r2, [r3, #8]
#endif 
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	f8ff0000 	.word	0xf8ff0000
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800298c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800298e:	e003      	b.n	8002998 <LoopCopyDataInit>

08002990 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002992:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002994:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002996:	3104      	adds	r1, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002998:	480a      	ldr	r0, [pc, #40]	; (80029c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800299c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800299e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029a0:	d3f6      	bcc.n	8002990 <CopyDataInit>
  ldr r2, =_sbss
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029a4:	e002      	b.n	80029ac <LoopFillZerobss>

080029a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029a8:	f842 3b04 	str.w	r3, [r2], #4

080029ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029b0:	d3f9      	bcc.n	80029a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029b2:	f7ff ffb7 	bl	8002924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f008 fbc9 	bl	800b14c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ba:	f7ff f98b 	bl	8001cd4 <main>
  bx lr
 80029be:	4770      	bx	lr
  ldr r3, =_sidata
 80029c0:	0800c7a8 	.word	0x0800c7a8
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029c8:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 80029cc:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 80029d0:	200015b0 	.word	0x200015b0

080029d4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d4:	e7fe      	b.n	80029d4 <CAN1_RX1_IRQHandler>
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_Init+0x28>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_Init+0x28>)
 80029e2:	f043 0310 	orr.w	r3, r3, #16
 80029e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 fdb3 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7ff fd58 	bl	80024a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fdcb 	bl	80035be <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 fd93 	bl	800356a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000014 	.word	0x20000014
 8002a5c:	2000001c 	.word	0x2000001c
 8002a60:	20000018 	.word	0x20000018

08002a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_IncTick+0x1c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_IncTick+0x20>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a03      	ldr	r2, [pc, #12]	; (8002a84 <HAL_IncTick+0x20>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	2000001c 	.word	0x2000001c
 8002a84:	200009cc 	.word	0x200009cc

08002a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <HAL_GetTick+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	200009cc 	.word	0x200009cc

08002a9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0be      	b.n	8002c3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fd16 	bl	800250c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fb8b 	bl	80031fc <ADC_ConversionStop_Disable>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8099 	bne.w	8002c2a <HAL_ADC_Init+0x18e>
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 8095 	bne.w	8002c2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b08:	f023 0302 	bic.w	r3, r3, #2
 8002b0c:	f043 0202 	orr.w	r2, r3, #2
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7b1b      	ldrb	r3, [r3, #12]
 8002b22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b34:	d003      	beq.n	8002b3e <HAL_ADC_Init+0xa2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_Init+0xa8>
 8002b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b42:	e000      	b.n	8002b46 <HAL_ADC_Init+0xaa>
 8002b44:	2300      	movs	r3, #0
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7d1b      	ldrb	r3, [r3, #20]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d119      	bne.n	8002b88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7b1b      	ldrb	r3, [r3, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	035a      	lsls	r2, r3, #13
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e00b      	b.n	8002b88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <HAL_ADC_Init+0x1a8>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb8:	d003      	beq.n	8002bc2 <HAL_ADC_Init+0x126>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d104      	bne.n	8002bcc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	051b      	lsls	r3, r3, #20
 8002bca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_ADC_Init+0x1ac>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d10b      	bne.n	8002c08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c06:	e018      	b.n	8002c3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f023 0312 	bic.w	r3, r3, #18
 8002c10:	f043 0210 	orr.w	r2, r3, #16
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c28:	e007      	b.n	8002c3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	ffe1f7fd 	.word	0xffe1f7fd
 8002c48:	ff1f0efe 	.word	0xff1f0efe

08002c4c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Start_IT+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0a0      	b.n	8002da8 <HAL_ADC_Start_IT+0x15c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa72 	bl	8003158 <ADC_Enable>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 808f 	bne.w	8002d9e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c88:	f023 0301 	bic.w	r3, r3, #1
 8002c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a45      	ldr	r2, [pc, #276]	; (8002db0 <HAL_ADC_Start_IT+0x164>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_Start_IT+0x5e>
 8002c9e:	4b45      	ldr	r3, [pc, #276]	; (8002db4 <HAL_ADC_Start_IT+0x168>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d115      	bne.n	8002cd6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d026      	beq.n	8002d12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ccc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd4:	e01d      	b.n	8002d12 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <HAL_ADC_Start_IT+0x168>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_ADC_Start_IT+0xaa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <HAL_ADC_Start_IT+0x164>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10d      	bne.n	8002d12 <HAL_ADC_Start_IT+0xc6>
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_ADC_Start_IT+0x168>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d006      	beq.n	8002d2c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f023 0206 	bic.w	r2, r3, #6
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d2a:	e002      	b.n	8002d32 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f06f 0202 	mvn.w	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d62:	d113      	bne.n	8002d8c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d68:	4a11      	ldr	r2, [pc, #68]	; (8002db0 <HAL_ADC_Start_IT+0x164>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d105      	bne.n	8002d7a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_ADC_Start_IT+0x168>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	e00c      	b.n	8002da6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e003      	b.n	8002da6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40012800 	.word	0x40012800
 8002db4:	40012400 	.word	0x40012400

08002db8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d140      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d139      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e1a:	d11d      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d119      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0220 	bic.w	r2, r2, #32
 8002e32:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fb09 	bl	8001470 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f06f 0212 	mvn.w	r2, #18
 8002e66:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d14f      	bne.n	8002f16 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d148      	bne.n	8002f16 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d105      	bne.n	8002e9c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002ea6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002eaa:	d012      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d125      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ec4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ec8:	d11d      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d119      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ee0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f043 0201 	orr.w	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa4e 	bl	80033a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 020c 	mvn.w	r2, #12
 8002f14:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	d114      	bne.n	8002f4e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10d      	bne.n	8002f4e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f809 	bl	8002f56 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0201 	mvn.w	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x20>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0dc      	b.n	8003142 <HAL_ADC_ConfigChannel+0x1da>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d81c      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b05      	subs	r3, #5
 8002faa:	221f      	movs	r2, #31
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4019      	ands	r1, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b05      	subs	r3, #5
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd0:	e03c      	b.n	800304c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d81c      	bhi.n	8003014 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b23      	subs	r3, #35	; 0x23
 8002fec:	221f      	movs	r2, #31
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	4019      	ands	r1, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
 8003012:	e01b      	b.n	800304c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b41      	subs	r3, #65	; 0x41
 8003026:	221f      	movs	r2, #31
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	4019      	ands	r1, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b41      	subs	r3, #65	; 0x41
 8003040:	fa00 f203 	lsl.w	r2, r0, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b09      	cmp	r3, #9
 8003052:	d91c      	bls.n	800308e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	4019      	ands	r1, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6898      	ldr	r0, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	3b1e      	subs	r3, #30
 8003080:	fa00 f203 	lsl.w	r2, r0, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e019      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4019      	ands	r1, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6898      	ldr	r0, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d003      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ce:	2b11      	cmp	r3, #17
 80030d0:	d132      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_ADC_ConfigChannel+0x1e4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d125      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d126      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030f8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d11a      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_ADC_ConfigChannel+0x1e8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_ADC_ConfigChannel+0x1ec>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	0c9a      	lsrs	r2, r3, #18
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003118:	e002      	b.n	8003120 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3b01      	subs	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f9      	bne.n	800311a <HAL_ADC_ConfigChannel+0x1b2>
 8003126:	e007      	b.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40012400 	.word	0x40012400
 8003150:	20000014 	.word	0x20000014
 8003154:	431bde83 	.word	0x431bde83

08003158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d039      	beq.n	80031ea <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <ADC_Enable+0x9c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1b      	ldr	r2, [pc, #108]	; (80031f8 <ADC_Enable+0xa0>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003194:	e002      	b.n	800319c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f9      	bne.n	8003196 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031a2:	f7ff fc71 	bl	8002a88 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031a8:	e018      	b.n	80031dc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031aa:	f7ff fc6d 	bl	8002a88 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d911      	bls.n	80031dc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e007      	b.n	80031ec <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d1df      	bne.n	80031aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000014 	.word	0x20000014
 80031f8:	431bde83 	.word	0x431bde83

080031fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d127      	bne.n	8003266 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003226:	f7ff fc2f 	bl	8002a88 <HAL_GetTick>
 800322a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800322c:	e014      	b.n	8003258 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800322e:	f7ff fc2b 	bl	8002a88 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d90d      	bls.n	8003258 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	f043 0201 	orr.w	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d0e3      	beq.n	800322e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADCEx_Calibration_Start+0x1e>
 800328a:	2302      	movs	r3, #2
 800328c:	e086      	b.n	800339c <HAL_ADCEx_Calibration_Start+0x12c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffb0 	bl	80031fc <ADC_ConversionStop_Disable>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d175      	bne.n	8003392 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ae:	f023 0302 	bic.w	r3, r3, #2
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_ADCEx_Calibration_Start+0x134>)
 80032bc:	681c      	ldr	r4, [r3, #0]
 80032be:	2002      	movs	r0, #2
 80032c0:	f002 fdf2 	bl	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c4:	4603      	mov	r3, r0
 80032c6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80032ca:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80032cc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80032ce:	e002      	b.n	80032d6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f9      	bne.n	80032d0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff3b 	bl	8003158 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0208 	orr.w	r2, r2, #8
 80032f0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80032f2:	f7ff fbc9 	bl	8002a88 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80032f8:	e014      	b.n	8003324 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80032fa:	f7ff fbc5 	bl	8002a88 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b0a      	cmp	r3, #10
 8003306:	d90d      	bls.n	8003324 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f023 0312 	bic.w	r3, r3, #18
 8003310:	f043 0210 	orr.w	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e03b      	b.n	800339c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e3      	bne.n	80032fa <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0204 	orr.w	r2, r2, #4
 8003340:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003342:	f7ff fba1 	bl	8002a88 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003348:	e014      	b.n	8003374 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800334a:	f7ff fb9d 	bl	8002a88 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b0a      	cmp	r3, #10
 8003356:	d90d      	bls.n	8003374 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f023 0312 	bic.w	r3, r3, #18
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e013      	b.n	800339c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e3      	bne.n	800334a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
}
 800339c:	4618      	mov	r0, r3
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}
 80033a4:	20000014 	.word	0x20000014

080033a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
	...

080033bc <__NVIC_SetPriorityGrouping>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d8:	4013      	ands	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ee:	4a04      	ldr	r2, [pc, #16]	; (8003400 <__NVIC_SetPriorityGrouping+0x44>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	60d3      	str	r3, [r2, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_GetPriorityGrouping>:
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <__NVIC_GetPriorityGrouping+0x18>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0307 	and.w	r3, r3, #7
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000ed00 	.word	0xe000ed00

08003420 <__NVIC_EnableIRQ>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	2b00      	cmp	r3, #0
 8003430:	db0b      	blt.n	800344a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	f003 021f 	and.w	r2, r3, #31
 8003438:	4906      	ldr	r1, [pc, #24]	; (8003454 <__NVIC_EnableIRQ+0x34>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2001      	movs	r0, #1
 8003442:	fa00 f202 	lsl.w	r2, r0, r2
 8003446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	; (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	; (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	; 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <SysTick_Config>:
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff90 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff2d 	bl	80033bc <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff ff42 	bl	8003404 <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff90 	bl	80034ac <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff5f 	bl	8003458 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff35 	bl	8003420 <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffa2 	bl	8003510 <SysTick_Config>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e00e      	b.n	8003606 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	795b      	ldrb	r3, [r3, #5]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fe ffcb 	bl	8002594 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800360e:	b480      	push	{r7}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e00a      	b.n	8003650 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	441a      	add	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d3f0      	bcc.n	800363a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003666:	693b      	ldr	r3, [r7, #16]
}
 8003668:	4618      	mov	r0, r3
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800368e:	4b2f      	ldr	r3, [pc, #188]	; (800374c <HAL_FLASH_Program+0xd8>)
 8003690:	7e1b      	ldrb	r3, [r3, #24]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_FLASH_Program+0x26>
 8003696:	2302      	movs	r3, #2
 8003698:	e054      	b.n	8003744 <HAL_FLASH_Program+0xd0>
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <HAL_FLASH_Program+0xd8>)
 800369c:	2201      	movs	r2, #1
 800369e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80036a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80036a4:	f000 f8a8 	bl	80037f8 <FLASH_WaitForLastOperation>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80036ac:	7dfb      	ldrb	r3, [r7, #23]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d144      	bne.n	800373c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d102      	bne.n	80036be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80036b8:	2301      	movs	r3, #1
 80036ba:	757b      	strb	r3, [r7, #21]
 80036bc:	e007      	b.n	80036ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d102      	bne.n	80036ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80036c4:	2302      	movs	r3, #2
 80036c6:	757b      	strb	r3, [r7, #21]
 80036c8:	e001      	b.n	80036ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80036ca:	2304      	movs	r3, #4
 80036cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	75bb      	strb	r3, [r7, #22]
 80036d2:	e02d      	b.n	8003730 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80036d4:	7dbb      	ldrb	r3, [r7, #22]
 80036d6:	005a      	lsls	r2, r3, #1
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	eb02 0c03 	add.w	ip, r2, r3
 80036de:	7dbb      	ldrb	r3, [r7, #22]
 80036e0:	0119      	lsls	r1, r3, #4
 80036e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e6:	f1c1 0620 	rsb	r6, r1, #32
 80036ea:	f1a1 0020 	sub.w	r0, r1, #32
 80036ee:	fa22 f401 	lsr.w	r4, r2, r1
 80036f2:	fa03 f606 	lsl.w	r6, r3, r6
 80036f6:	4334      	orrs	r4, r6
 80036f8:	fa23 f000 	lsr.w	r0, r3, r0
 80036fc:	4304      	orrs	r4, r0
 80036fe:	fa23 f501 	lsr.w	r5, r3, r1
 8003702:	b2a3      	uxth	r3, r4
 8003704:	4619      	mov	r1, r3
 8003706:	4660      	mov	r0, ip
 8003708:	f000 f85a 	bl	80037c0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800370c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003710:	f000 f872 	bl	80037f8 <FLASH_WaitForLastOperation>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_FLASH_Program+0xdc>)
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_FLASH_Program+0xdc>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d107      	bne.n	800373a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800372a:	7dbb      	ldrb	r3, [r7, #22]
 800372c:	3301      	adds	r3, #1
 800372e:	75bb      	strb	r3, [r7, #22]
 8003730:	7dba      	ldrb	r2, [r7, #22]
 8003732:	7d7b      	ldrb	r3, [r7, #21]
 8003734:	429a      	cmp	r2, r3
 8003736:	d3cd      	bcc.n	80036d4 <HAL_FLASH_Program+0x60>
 8003738:	e000      	b.n	800373c <HAL_FLASH_Program+0xc8>
      {
        break;
 800373a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_FLASH_Program+0xd8>)
 800373e:	2200      	movs	r2, #0
 8003740:	761a      	strb	r2, [r3, #24]

  return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374c:	200009d0 	.word	0x200009d0
 8003750:	40022000 	.word	0x40022000

08003754 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_FLASH_Unlock+0x40>)
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00d      	beq.n	8003786 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_FLASH_Unlock+0x40>)
 800376c:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <HAL_FLASH_Unlock+0x44>)
 800376e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <HAL_FLASH_Unlock+0x40>)
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_FLASH_Unlock+0x48>)
 8003774:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_FLASH_Unlock+0x40>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003786:	79fb      	ldrb	r3, [r7, #7]
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40022000 	.word	0x40022000
 8003798:	45670123 	.word	0x45670123
 800379c:	cdef89ab 	.word	0xcdef89ab

080037a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_FLASH_Lock+0x1c>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	4a04      	ldr	r2, [pc, #16]	; (80037bc <HAL_FLASH_Lock+0x1c>)
 80037aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ae:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000

080037c0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <FLASH_Program_HalfWord+0x30>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <FLASH_Program_HalfWord+0x34>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	4a07      	ldr	r2, [pc, #28]	; (80037f4 <FLASH_Program_HalfWord+0x34>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	887a      	ldrh	r2, [r7, #2]
 80037e2:	801a      	strh	r2, [r3, #0]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	200009d0 	.word	0x200009d0
 80037f4:	40022000 	.word	0x40022000

080037f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff f942 	bl	8002a88 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003806:	e010      	b.n	800382a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d00c      	beq.n	800382a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <FLASH_WaitForLastOperation+0x2e>
 8003816:	f7ff f937 	bl	8002a88 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d201      	bcs.n	800382a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e025      	b.n	8003876 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e8      	bne.n	8003808 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 8003844:	2220      	movs	r2, #32
 8003846:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <FLASH_WaitForLastOperation+0x88>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800386c:	f000 f80a 	bl	8003884 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40022000 	.word	0x40022000

08003884 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <FLASH_SetErrorCode+0x98>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800389a:	4b21      	ldr	r3, [pc, #132]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 80038a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f043 0310 	orr.w	r3, r3, #16
 80038ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80038ae:	4b1b      	ldr	r3, [pc, #108]	; (800391c <FLASH_SetErrorCode+0x98>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 80038c4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <FLASH_SetErrorCode+0x98>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	4a0f      	ldr	r2, [pc, #60]	; (8003920 <FLASH_SetErrorCode+0x9c>)
 80038e4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <FLASH_SetErrorCode+0x98>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a0c      	ldr	r2, [pc, #48]	; (800391c <FLASH_SetErrorCode+0x98>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f240 1201 	movw	r2, #257	; 0x101
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d106      	bne.n	800390a <FLASH_SetErrorCode+0x86>
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <FLASH_SetErrorCode+0x98>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <FLASH_SetErrorCode+0x98>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	61d3      	str	r3, [r2, #28]
}  
 8003908:	e002      	b.n	8003910 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <FLASH_SetErrorCode+0x98>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	60d3      	str	r3, [r2, #12]
}  
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40022000 	.word	0x40022000
 8003920:	200009d0 	.word	0x200009d0

08003924 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_FLASHEx_Erase+0xd0>)
 8003938:	7e1b      	ldrb	r3, [r3, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_FLASHEx_Erase+0x1e>
 800393e:	2302      	movs	r3, #2
 8003940:	e053      	b.n	80039ea <HAL_FLASHEx_Erase+0xc6>
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_FLASHEx_Erase+0xd0>)
 8003944:	2201      	movs	r2, #1
 8003946:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d116      	bne.n	800397e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003950:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003954:	f7ff ff50 	bl	80037f8 <FLASH_WaitForLastOperation>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d141      	bne.n	80039e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800395e:	2001      	movs	r0, #1
 8003960:	f000 f84c 	bl	80039fc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003964:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003968:	f7ff ff46 	bl	80037f8 <FLASH_WaitForLastOperation>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_FLASHEx_Erase+0xd4>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4a20      	ldr	r2, [pc, #128]	; (80039f8 <HAL_FLASHEx_Erase+0xd4>)
 8003976:	f023 0304 	bic.w	r3, r3, #4
 800397a:	6113      	str	r3, [r2, #16]
 800397c:	e031      	b.n	80039e2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800397e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003982:	f7ff ff39 	bl	80037f8 <FLASH_WaitForLastOperation>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d12a      	bne.n	80039e2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f04f 32ff 	mov.w	r2, #4294967295
 8003992:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	e019      	b.n	80039d0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800399c:	68b8      	ldr	r0, [r7, #8]
 800399e:	f000 f849 	bl	8003a34 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039a6:	f7ff ff27 	bl	80037f8 <FLASH_WaitForLastOperation>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_FLASHEx_Erase+0xd4>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4a11      	ldr	r2, [pc, #68]	; (80039f8 <HAL_FLASHEx_Erase+0xd4>)
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	601a      	str	r2, [r3, #0]
            break;
 80039c6:	e00c      	b.n	80039e2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ce:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	029a      	lsls	r2, r3, #10
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d3dc      	bcc.n	800399c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_FLASHEx_Erase+0xd0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	761a      	strb	r2, [r3, #24]

  return status;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200009d0 	.word	0x200009d0
 80039f8:	40022000 	.word	0x40022000

080039fc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a04:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <FLASH_MassErase+0x30>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <FLASH_MassErase+0x34>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <FLASH_MassErase+0x34>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <FLASH_MassErase+0x34>)
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <FLASH_MassErase+0x34>)
 8003a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a20:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	200009d0 	.word	0x200009d0
 8003a30:	40022000 	.word	0x40022000

08003a34 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <FLASH_PageErase+0x38>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <FLASH_PageErase+0x3c>)
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <FLASH_PageErase+0x3c>)
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <FLASH_PageErase+0x3c>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <FLASH_PageErase+0x3c>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <FLASH_PageErase+0x3c>)
 8003a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	200009d0 	.word	0x200009d0
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b08b      	sub	sp, #44	; 0x2c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a82:	2300      	movs	r3, #0
 8003a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a86:	e169      	b.n	8003d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	f040 8158 	bne.w	8003d56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a9a      	ldr	r2, [pc, #616]	; (8003d14 <HAL_GPIO_Init+0x2a0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d05e      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
 8003ab0:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_GPIO_Init+0x2a0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d875      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003ab6:	4a98      	ldr	r2, [pc, #608]	; (8003d18 <HAL_GPIO_Init+0x2a4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d058      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
 8003abc:	4a96      	ldr	r2, [pc, #600]	; (8003d18 <HAL_GPIO_Init+0x2a4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d86f      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003ac2:	4a96      	ldr	r2, [pc, #600]	; (8003d1c <HAL_GPIO_Init+0x2a8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d052      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
 8003ac8:	4a94      	ldr	r2, [pc, #592]	; (8003d1c <HAL_GPIO_Init+0x2a8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d869      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003ace:	4a94      	ldr	r2, [pc, #592]	; (8003d20 <HAL_GPIO_Init+0x2ac>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04c      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
 8003ad4:	4a92      	ldr	r2, [pc, #584]	; (8003d20 <HAL_GPIO_Init+0x2ac>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d863      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003ada:	4a92      	ldr	r2, [pc, #584]	; (8003d24 <HAL_GPIO_Init+0x2b0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d046      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
 8003ae0:	4a90      	ldr	r2, [pc, #576]	; (8003d24 <HAL_GPIO_Init+0x2b0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d85d      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d82a      	bhi.n	8003b40 <HAL_GPIO_Init+0xcc>
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d859      	bhi.n	8003ba2 <HAL_GPIO_Init+0x12e>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_GPIO_Init+0x80>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b6f 	.word	0x08003b6f
 8003af8:	08003b49 	.word	0x08003b49
 8003afc:	08003b5b 	.word	0x08003b5b
 8003b00:	08003b9d 	.word	0x08003b9d
 8003b04:	08003ba3 	.word	0x08003ba3
 8003b08:	08003ba3 	.word	0x08003ba3
 8003b0c:	08003ba3 	.word	0x08003ba3
 8003b10:	08003ba3 	.word	0x08003ba3
 8003b14:	08003ba3 	.word	0x08003ba3
 8003b18:	08003ba3 	.word	0x08003ba3
 8003b1c:	08003ba3 	.word	0x08003ba3
 8003b20:	08003ba3 	.word	0x08003ba3
 8003b24:	08003ba3 	.word	0x08003ba3
 8003b28:	08003ba3 	.word	0x08003ba3
 8003b2c:	08003ba3 	.word	0x08003ba3
 8003b30:	08003ba3 	.word	0x08003ba3
 8003b34:	08003ba3 	.word	0x08003ba3
 8003b38:	08003b51 	.word	0x08003b51
 8003b3c:	08003b65 	.word	0x08003b65
 8003b40:	4a79      	ldr	r2, [pc, #484]	; (8003d28 <HAL_GPIO_Init+0x2b4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b46:	e02c      	b.n	8003ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	623b      	str	r3, [r7, #32]
          break;
 8003b4e:	e029      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	3304      	adds	r3, #4
 8003b56:	623b      	str	r3, [r7, #32]
          break;
 8003b58:	e024      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	3308      	adds	r3, #8
 8003b60:	623b      	str	r3, [r7, #32]
          break;
 8003b62:	e01f      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	623b      	str	r3, [r7, #32]
          break;
 8003b6c:	e01a      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b76:	2304      	movs	r3, #4
 8003b78:	623b      	str	r3, [r7, #32]
          break;
 8003b7a:	e013      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b84:	2308      	movs	r3, #8
 8003b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	611a      	str	r2, [r3, #16]
          break;
 8003b8e:	e009      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b90:	2308      	movs	r3, #8
 8003b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	615a      	str	r2, [r3, #20]
          break;
 8003b9a:	e003      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	623b      	str	r3, [r7, #32]
          break;
 8003ba0:	e000      	b.n	8003ba4 <HAL_GPIO_Init+0x130>
          break;
 8003ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	2bff      	cmp	r3, #255	; 0xff
 8003ba8:	d801      	bhi.n	8003bae <HAL_GPIO_Init+0x13a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	e001      	b.n	8003bb2 <HAL_GPIO_Init+0x13e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2bff      	cmp	r3, #255	; 0xff
 8003bb8:	d802      	bhi.n	8003bc0 <HAL_GPIO_Init+0x14c>
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	e002      	b.n	8003bc6 <HAL_GPIO_Init+0x152>
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	3b08      	subs	r3, #8
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	210f      	movs	r1, #15
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	6a39      	ldr	r1, [r7, #32]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80b1 	beq.w	8003d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf4:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <HAL_GPIO_Init+0x2b8>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <HAL_GPIO_Init+0x2b8>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	6193      	str	r3, [r2, #24]
 8003c00:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_GPIO_Init+0x2b8>)
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c0c:	4a48      	ldr	r2, [pc, #288]	; (8003d30 <HAL_GPIO_Init+0x2bc>)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	220f      	movs	r2, #15
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a40      	ldr	r2, [pc, #256]	; (8003d34 <HAL_GPIO_Init+0x2c0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d013      	beq.n	8003c60 <HAL_GPIO_Init+0x1ec>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <HAL_GPIO_Init+0x2c4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00d      	beq.n	8003c5c <HAL_GPIO_Init+0x1e8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3e      	ldr	r2, [pc, #248]	; (8003d3c <HAL_GPIO_Init+0x2c8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <HAL_GPIO_Init+0x1e4>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3d      	ldr	r2, [pc, #244]	; (8003d40 <HAL_GPIO_Init+0x2cc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <HAL_GPIO_Init+0x1e0>
 8003c50:	2303      	movs	r3, #3
 8003c52:	e006      	b.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c54:	2304      	movs	r3, #4
 8003c56:	e004      	b.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e002      	b.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_GPIO_Init+0x1ee>
 8003c60:	2300      	movs	r3, #0
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	f002 0203 	and.w	r2, r2, #3
 8003c68:	0092      	lsls	r2, r2, #2
 8003c6a:	4093      	lsls	r3, r2
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c72:	492f      	ldr	r1, [pc, #188]	; (8003d30 <HAL_GPIO_Init+0x2bc>)
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	3302      	adds	r3, #2
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d006      	beq.n	8003c9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	492c      	ldr	r1, [pc, #176]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	e006      	b.n	8003ca8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	4928      	ldr	r1, [pc, #160]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d006      	beq.n	8003cc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cb4:	4b23      	ldr	r3, [pc, #140]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4922      	ldr	r1, [pc, #136]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
 8003cc0:	e006      	b.n	8003cd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	491e      	ldr	r1, [pc, #120]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4918      	ldr	r1, [pc, #96]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	608b      	str	r3, [r1, #8]
 8003ce8:	e006      	b.n	8003cf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	4914      	ldr	r1, [pc, #80]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d021      	beq.n	8003d48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_GPIO_Init+0x2d0>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
 8003d10:	e021      	b.n	8003d56 <HAL_GPIO_Init+0x2e2>
 8003d12:	bf00      	nop
 8003d14:	10320000 	.word	0x10320000
 8003d18:	10310000 	.word	0x10310000
 8003d1c:	10220000 	.word	0x10220000
 8003d20:	10210000 	.word	0x10210000
 8003d24:	10120000 	.word	0x10120000
 8003d28:	10110000 	.word	0x10110000
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40010800 	.word	0x40010800
 8003d38:	40010c00 	.word	0x40010c00
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	40011400 	.word	0x40011400
 8003d44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d4a:	68da      	ldr	r2, [r3, #12]
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	4909      	ldr	r1, [pc, #36]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	3301      	adds	r3, #1
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	fa22 f303 	lsr.w	r3, r2, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f47f ae8e 	bne.w	8003a88 <HAL_GPIO_Init+0x14>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	372c      	adds	r7, #44	; 0x2c
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	40010400 	.word	0x40010400

08003d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	807b      	strh	r3, [r7, #2]
 8003db6:	4613      	mov	r3, r2
 8003db8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dba:	787b      	ldrb	r3, [r7, #1]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc0:	887a      	ldrh	r2, [r7, #2]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003dc6:	e003      	b.n	8003dd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	041a      	lsls	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	611a      	str	r2, [r3, #16]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dec:	887a      	ldrh	r2, [r7, #2]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	041a      	lsls	r2, r3, #16
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43d9      	mvns	r1, r3
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	400b      	ands	r3, r1
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0e:	b08b      	sub	sp, #44	; 0x2c
 8003e10:	af06      	add	r7, sp, #24
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e0fd      	b.n	800401a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f006 feda 	bl	800abec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 f8dd 	bl	8007004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	687e      	ldr	r6, [r7, #4]
 8003e52:	466d      	mov	r5, sp
 8003e54:	f106 0410 	add.w	r4, r6, #16
 8003e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	1d33      	adds	r3, r6, #4
 8003e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e64:	6838      	ldr	r0, [r7, #0]
 8003e66:	f003 f8a7 	bl	8006fb8 <USB_CoreInit>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0ce      	b.n	800401a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 f8d8 	bl	8007038 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73fb      	strb	r3, [r7, #15]
 8003e8c:	e04c      	b.n	8003f28 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	7bfa      	ldrb	r2, [r7, #15]
 8003eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	b298      	uxth	r0, r3
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3336      	adds	r3, #54	; 0x36
 8003ecc:	4602      	mov	r2, r0
 8003ece:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3303      	adds	r3, #3
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3338      	adds	r3, #56	; 0x38
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	333c      	adds	r3, #60	; 0x3c
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3340      	adds	r3, #64	; 0x40
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	3301      	adds	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3ad      	bcc.n	8003e8e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e044      	b.n	8003fc2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa6:	7bfa      	ldrb	r2, [r7, #15]
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	440b      	add	r3, r1
 8003fb4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	7bfa      	ldrb	r2, [r7, #15]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d3b5      	bcc.n	8003f38 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	687e      	ldr	r6, [r7, #4]
 8003fd4:	466d      	mov	r5, sp
 8003fd6:	f106 0410 	add.w	r4, r6, #16
 8003fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	602b      	str	r3, [r5, #0]
 8003fe2:	1d33      	adds	r3, r6, #4
 8003fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fe6:	6838      	ldr	r0, [r7, #0]
 8003fe8:	f003 f832 	bl	8007050 <USB_DevInit>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00d      	b.n	800401a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f004 ffcc 	bl	8008fb0 <USB_DevDisconnect>

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004022 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_PCD_Start+0x16>
 8004034:	2302      	movs	r3, #2
 8004036:	e016      	b.n	8004066 <HAL_PCD_Start+0x44>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f002 ffc7 	bl	8006fd8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800404a:	2101      	movs	r1, #1
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f007 f840 	bl	800b0d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f004 ffa0 	bl	8008f9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f004 ffa2 	bl	8008fc4 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	d102      	bne.n	8004092 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fb61 	bl	8004754 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4618      	mov	r0, r3
 8004098:	f004 ff94 	bl	8008fc4 <USB_ReadInterrupts>
 800409c:	4603      	mov	r3, r0
 800409e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a6:	d112      	bne.n	80040ce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ba:	b292      	uxth	r2, r2
 80040bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f006 fe0e 	bl	800ace2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f925 	bl	8004318 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 ff76 	bl	8008fc4 <USB_ReadInterrupts>
 80040d8:	4603      	mov	r3, r0
 80040da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e2:	d10b      	bne.n	80040fc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040f6:	b292      	uxth	r2, r2
 80040f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f004 ff5f 	bl	8008fc4 <USB_ReadInterrupts>
 8004106:	4603      	mov	r3, r0
 8004108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004110:	d10b      	bne.n	800412a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004124:	b292      	uxth	r2, r2
 8004126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f004 ff48 	bl	8008fc4 <USB_ReadInterrupts>
 8004134:	4603      	mov	r3, r0
 8004136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800413a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413e:	d126      	bne.n	800418e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004148:	b29a      	uxth	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	b292      	uxth	r2, r2
 8004154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0208 	bic.w	r2, r2, #8
 800416a:	b292      	uxth	r2, r2
 800416c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f006 fdef 	bl	800ad54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004188:	b292      	uxth	r2, r2
 800418a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f004 ff16 	bl	8008fc4 <USB_ReadInterrupts>
 8004198:	4603      	mov	r3, r0
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a2:	f040 8084 	bne.w	80042ae <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	77fb      	strb	r3, [r7, #31]
 80041aa:	e011      	b.n	80041d0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	8812      	ldrh	r2, [r2, #0]
 80041bc:	b292      	uxth	r2, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	f107 0120 	add.w	r1, r7, #32
 80041c4:	440b      	add	r3, r1
 80041c6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
 80041cc:	3301      	adds	r3, #1
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	7ffb      	ldrb	r3, [r7, #31]
 80041d2:	2b07      	cmp	r3, #7
 80041d4:	d9ea      	bls.n	80041ac <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	b292      	uxth	r2, r2
 80041ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	b292      	uxth	r2, r2
 8004202:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004206:	bf00      	nop
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004210:	b29b      	uxth	r3, r3
 8004212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f6      	beq.n	8004208 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422c:	b292      	uxth	r2, r2
 800422e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e010      	b.n	800425a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	4611      	mov	r1, r2
 8004240:	7ffa      	ldrb	r2, [r7, #31]
 8004242:	0092      	lsls	r2, r2, #2
 8004244:	440a      	add	r2, r1
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	f107 0120 	add.w	r1, r7, #32
 800424c:	440b      	add	r3, r1
 800424e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004252:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004254:	7ffb      	ldrb	r3, [r7, #31]
 8004256:	3301      	adds	r3, #1
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	7ffb      	ldrb	r3, [r7, #31]
 800425c:	2b07      	cmp	r3, #7
 800425e:	d9eb      	bls.n	8004238 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	b292      	uxth	r2, r2
 8004274:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800428a:	b292      	uxth	r2, r2
 800428c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0204 	orr.w	r2, r2, #4
 80042a2:	b292      	uxth	r2, r2
 80042a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f006 fd39 	bl	800ad20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f004 fe86 	bl	8008fc4 <USB_ReadInterrupts>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c2:	d10e      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042d6:	b292      	uxth	r2, r2
 80042d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f006 fcf2 	bl	800acc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 fe6c 	bl	8008fc4 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f6:	d10b      	bne.n	8004310 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800430a:	b292      	uxth	r2, r2
 800430c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_PCD_SetAddress+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e013      	b.n	800435a <HAL_PCD_SetAddress+0x42>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f004 fe13 	bl	8008f76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	461a      	mov	r2, r3
 8004370:	4603      	mov	r3, r0
 8004372:	70fb      	strb	r3, [r7, #3]
 8004374:	460b      	mov	r3, r1
 8004376:	803b      	strh	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da0e      	bge.n	80043a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	705a      	strb	r2, [r3, #1]
 80043a4:	e00e      	b.n	80043c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 0207 	and.w	r2, r3, #7
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043d0:	883a      	ldrh	r2, [r7, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	78ba      	ldrb	r2, [r7, #2]
 80043da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	785b      	ldrb	r3, [r3, #1]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043ee:	78bb      	ldrb	r3, [r7, #2]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d102      	bne.n	80043fa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_PCD_EP_Open+0xa6>
 8004404:	2302      	movs	r3, #2
 8004406:	e00e      	b.n	8004426 <HAL_PCD_EP_Open+0xc4>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68f9      	ldr	r1, [r7, #12]
 8004416:	4618      	mov	r0, r3
 8004418:	f002 fe3a 	bl	8007090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004424:	7afb      	ldrb	r3, [r7, #11]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800443a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443e:	2b00      	cmp	r3, #0
 8004440:	da0e      	bge.n	8004460 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	4613      	mov	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	705a      	strb	r2, [r3, #1]
 800445e:	e00e      	b.n	800447e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_PCD_EP_Close+0x6a>
 8004494:	2302      	movs	r3, #2
 8004496:	e00e      	b.n	80044b6 <HAL_PCD_EP_Close+0x88>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f003 f95c 	bl	8007764 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	460b      	mov	r3, r1
 80044cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	7afb      	ldrb	r3, [r7, #11]
 80044d0:	f003 0207 	and.w	r2, r3, #7
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2200      	movs	r2, #0
 80044fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044fe:	7afb      	ldrb	r3, [r7, #11]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	b2da      	uxtb	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	4618      	mov	r0, r3
 800451c:	f003 fb0e 	bl	8007b3c <USB_EPStartXfer>
 8004520:	e005      	b.n	800452e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	4618      	mov	r0, r3
 800452a:	f003 fb07 	bl	8007b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	440b      	add	r3, r1
 8004556:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b086      	sub	sp, #24
 800456a:	af00      	add	r7, sp, #0
 800456c:	60f8      	str	r0, [r7, #12]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
 8004572:	460b      	mov	r3, r1
 8004574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2201      	movs	r2, #1
 80045b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b2:	7afb      	ldrb	r3, [r7, #11]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045be:	7afb      	ldrb	r3, [r7, #11]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f003 fab4 	bl	8007b3c <USB_EPStartXfer>
 80045d4:	e005      	b.n	80045e2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	4618      	mov	r0, r3
 80045de:	f003 faad 	bl	8007b3c <USB_EPStartXfer>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d901      	bls.n	800460a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e04c      	b.n	80046a4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800460a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460e:	2b00      	cmp	r3, #0
 8004610:	da0e      	bge.n	8004630 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	705a      	strb	r2, [r3, #1]
 800462e:	e00c      	b.n	800464a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	4413      	add	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_PCD_EP_SetStall+0x7e>
 8004666:	2302      	movs	r3, #2
 8004668:	e01c      	b.n	80046a4 <HAL_PCD_EP_SetStall+0xb8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	4618      	mov	r0, r3
 800467a:	f004 fb7f 	bl	8008d7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800467e:	78fb      	ldrb	r3, [r7, #3]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f004 fca4 	bl	8008fe2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d901      	bls.n	80046ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e040      	b.n	800474c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	da0e      	bge.n	80046f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	705a      	strb	r2, [r3, #1]
 80046ee:	e00e      	b.n	800470e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_PCD_EP_ClrStall+0x82>
 800472a:	2302      	movs	r3, #2
 800472c:	e00e      	b.n	800474c <HAL_PCD_EP_ClrStall+0xa0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	4618      	mov	r0, r3
 800473e:	f004 fb6d 	bl	8008e1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08e      	sub	sp, #56	; 0x38
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800475c:	e2df      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004766:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004768:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004774:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8158 	bne.w	8004a2e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800477e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d152      	bne.n	800482e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	81fb      	strh	r3, [r7, #14]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	89fb      	ldrh	r3, [r7, #14]
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3328      	adds	r3, #40	; 0x28
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	3302      	adds	r3, #2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	441a      	add	r2, r3
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047ec:	2100      	movs	r1, #0
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f006 fa4f 	bl	800ac92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 828e 	beq.w	8004d1e <PCD_EP_ISR_Handler+0x5ca>
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 8289 	bne.w	8004d1e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004818:	b2da      	uxtb	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	b292      	uxth	r2, r2
 8004820:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800482c:	e277      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800483e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004844:	2b00      	cmp	r3, #0
 8004846:	d034      	beq.n	80048b2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004850:	b29b      	uxth	r3, r3
 8004852:	461a      	mov	r2, r3
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	3306      	adds	r3, #6
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004886:	b29b      	uxth	r3, r3
 8004888:	f004 fbfb 	bl	8009082 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29a      	uxth	r2, r3
 8004894:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004898:	4013      	ands	r3, r2
 800489a:	823b      	strh	r3, [r7, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	8a3a      	ldrh	r2, [r7, #16]
 80048a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048a6:	b292      	uxth	r2, r2
 80048a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f006 f9c4 	bl	800ac38 <HAL_PCD_SetupStageCallback>
 80048b0:	e235      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f280 8231 	bge.w	8004d1e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048c8:	4013      	ands	r3, r2
 80048ca:	83bb      	strh	r3, [r7, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	8bba      	ldrh	r2, [r7, #28]
 80048d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048d6:	b292      	uxth	r2, r2
 80048d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	3306      	adds	r3, #6
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d019      	beq.n	8004942 <PCD_EP_ISR_Handler+0x1ee>
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d015      	beq.n	8004942 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	6959      	ldr	r1, [r3, #20]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004926:	b29b      	uxth	r3, r3
 8004928:	f004 fbab 	bl	8009082 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	441a      	add	r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800493a:	2100      	movs	r1, #0
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f006 f98d 	bl	800ac5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d112      	bne.n	8004990 <PCD_EP_ISR_Handler+0x23c>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004988:	b29a      	uxth	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	e02f      	b.n	80049f0 <PCD_EP_ISR_Handler+0x29c>
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b3e      	cmp	r3, #62	; 0x3e
 8004996:	d813      	bhi.n	80049c0 <PCD_EP_ISR_Handler+0x26c>
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	633b      	str	r3, [r7, #48]	; 0x30
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <PCD_EP_ISR_Handler+0x25e>
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	3301      	adds	r3, #1
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	e017      	b.n	80049f0 <PCD_EP_ISR_Handler+0x29c>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	633b      	str	r3, [r7, #48]	; 0x30
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d102      	bne.n	80049da <PCD_EP_ISR_Handler+0x286>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	3b01      	subs	r3, #1
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	827b      	strh	r3, [r7, #18]
 8004a02:	8a7b      	ldrh	r3, [r7, #18]
 8004a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a08:	827b      	strh	r3, [r7, #18]
 8004a0a:	8a7b      	ldrh	r3, [r7, #18]
 8004a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a10:	827b      	strh	r3, [r7, #18]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	8a7b      	ldrh	r3, [r7, #18]
 8004a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]
 8004a2c:	e177      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004a40:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f280 80ea 	bge.w	8004c1e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004a60:	4013      	ands	r3, r2
 8004a62:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	7b1b      	ldrb	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d122      	bne.n	8004ae0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	3306      	adds	r3, #6
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004ac4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8087 	beq.w	8004bda <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	6959      	ldr	r1, [r3, #20]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	88da      	ldrh	r2, [r3, #6]
 8004ad8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ada:	f004 fad2 	bl	8009082 <USB_ReadPMA>
 8004ade:	e07c      	b.n	8004bda <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	78db      	ldrb	r3, [r3, #3]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d108      	bne.n	8004afa <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aea:	461a      	mov	r2, r3
 8004aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f923 	bl	8004d3a <HAL_PCD_EP_DB_Receive>
 8004af4:	4603      	mov	r3, r0
 8004af6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004af8:	e06f      	b.n	8004bda <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	847b      	strh	r3, [r7, #34]	; 0x22
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	441a      	add	r2, r3
 8004b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d021      	beq.n	8004b98 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	3302      	adds	r3, #2
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004b7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02a      	beq.n	8004bda <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	6959      	ldr	r1, [r3, #20]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	891a      	ldrh	r2, [r3, #8]
 8004b90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b92:	f004 fa76 	bl	8009082 <USB_ReadPMA>
 8004b96:	e020      	b.n	8004bda <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	3306      	adds	r3, #6
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004bc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	6959      	ldr	r1, [r3, #20]
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	895a      	ldrh	r2, [r3, #10]
 8004bd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bd6:	f004 fa54 	bl	8009082 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	69da      	ldr	r2, [r3, #28]
 8004bde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004be0:	441a      	add	r2, r3
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bec:	441a      	add	r2, r3
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <PCD_EP_ISR_Handler+0x4b0>
 8004bfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d206      	bcs.n	8004c12 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f006 f826 	bl	800ac5c <HAL_PCD_DataOutStageCallback>
 8004c10:	e005      	b.n	8004c1e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f002 ff8f 	bl	8007b3c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d07a      	beq.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	843b      	strh	r3, [r7, #32]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	441a      	add	r2, r3
 8004c66:	8c3b      	ldrh	r3, [r7, #32]
 8004c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d108      	bne.n	8004c8e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d146      	bne.n	8004d12 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004c84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d141      	bne.n	8004d12 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	8bfb      	ldrh	r3, [r7, #30]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d906      	bls.n	8004cd0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	8bfb      	ldrh	r3, [r7, #30]
 8004cc8:	1ad2      	subs	r2, r2, r3
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	619a      	str	r2, [r3, #24]
 8004cce:	e002      	b.n	8004cd6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 ffd4 	bl	800ac92 <HAL_PCD_DataInStageCallback>
 8004cea:	e018      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	8bfb      	ldrh	r3, [r7, #30]
 8004cf2:	441a      	add	r2, r3
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	441a      	add	r2, r3
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 ff16 	bl	8007b3c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004d10:	e005      	b.n	8004d1e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d14:	461a      	mov	r2, r3
 8004d16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f91b 	bl	8004f54 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	b21b      	sxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f6ff ad17 	blt.w	800475e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3738      	adds	r7, #56	; 0x38
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b088      	sub	sp, #32
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	4613      	mov	r3, r2
 8004d46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d07e      	beq.n	8004e50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	3302      	adds	r3, #2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	8b7b      	ldrh	r3, [r7, #26]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d306      	bcc.n	8004d94 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	8b7b      	ldrh	r3, [r7, #26]
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	619a      	str	r2, [r3, #24]
 8004d92:	e002      	b.n	8004d9a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d123      	bne.n	8004dea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbc:	833b      	strh	r3, [r7, #24]
 8004dbe:	8b3b      	ldrh	r3, [r7, #24]
 8004dc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dc4:	833b      	strh	r3, [r7, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	441a      	add	r2, r3
 8004dd4:	8b3b      	ldrh	r3, [r7, #24]
 8004dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01f      	beq.n	8004e34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	82fb      	strh	r3, [r7, #22]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	8afb      	ldrh	r3, [r7, #22]
 8004e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e34:	8b7b      	ldrh	r3, [r7, #26]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	6959      	ldr	r1, [r3, #20]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	891a      	ldrh	r2, [r3, #8]
 8004e48:	8b7b      	ldrh	r3, [r7, #26]
 8004e4a:	f004 f91a 	bl	8009082 <USB_ReadPMA>
 8004e4e:	e07c      	b.n	8004f4a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	3306      	adds	r3, #6
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d306      	bcc.n	8004e92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	8b7b      	ldrh	r3, [r7, #26]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	619a      	str	r2, [r3, #24]
 8004e90:	e002      	b.n	8004e98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d123      	bne.n	8004ee8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eba:	83fb      	strh	r3, [r7, #30]
 8004ebc:	8bfb      	ldrh	r3, [r7, #30]
 8004ebe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ec2:	83fb      	strh	r3, [r7, #30]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	441a      	add	r2, r3
 8004ed2:	8bfb      	ldrh	r3, [r7, #30]
 8004ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11f      	bne.n	8004f32 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	83bb      	strh	r3, [r7, #28]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	8bbb      	ldrh	r3, [r7, #28]
 8004f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f32:	8b7b      	ldrh	r3, [r7, #26]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6959      	ldr	r1, [r3, #20]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	895a      	ldrh	r2, [r3, #10]
 8004f44:	8b7b      	ldrh	r3, [r7, #26]
 8004f46:	f004 f89c 	bl	8009082 <USB_ReadPMA>
    }
  }

  return count;
 8004f4a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b094      	sub	sp, #80	; 0x50
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8138 	beq.w	80051de <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4413      	add	r3, r2
 8004f82:	3302      	adds	r3, #2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d907      	bls.n	8004fb6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	619a      	str	r2, [r3, #24]
 8004fb4:	e002      	b.n	8004fbc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d12c      	bne.n	800501e <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f005 fe61 	bl	800ac92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 823a 	beq.w	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	82fb      	strh	r3, [r7, #22]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	441a      	add	r2, r3
 8005006:	8afb      	ldrh	r3, [r7, #22]
 8005008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800500c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005018:	b29b      	uxth	r3, r3
 800501a:	8013      	strh	r3, [r2, #0]
 800501c:	e218      	b.n	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01f      	beq.n	8005068 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005042:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	b29b      	uxth	r3, r3
 8005066:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800506e:	2b01      	cmp	r3, #1
 8005070:	f040 81ee 	bne.w	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800507c:	441a      	add	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	69da      	ldr	r2, [r3, #28]
 8005086:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800508a:	441a      	add	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	429a      	cmp	r2, r3
 800509a:	d309      	bcc.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	621a      	str	r2, [r3, #32]
 80050ae:	e015      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80050b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050c6:	e009      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d155      	bne.n	8005190 <HAL_PCD_EP_DB_Transmit+0x23c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	011a      	lsls	r2, r3, #4
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510e:	2b00      	cmp	r3, #0
 8005110:	d112      	bne.n	8005138 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800511c:	b29a      	uxth	r2, r3
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	801a      	strh	r2, [r3, #0]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005130:	b29a      	uxth	r2, r3
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e047      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x274>
 8005138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800513a:	2b3e      	cmp	r3, #62	; 0x3e
 800513c:	d811      	bhi.n	8005162 <HAL_PCD_EP_DB_Transmit+0x20e>
 800513e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_PCD_EP_DB_Transmit+0x200>
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	3301      	adds	r3, #1
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29a      	uxth	r2, r3
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	e032      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x274>
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b00      	cmp	r3, #0
 8005170:	d102      	bne.n	8005178 <HAL_PCD_EP_DB_Transmit+0x224>
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	3b01      	subs	r3, #1
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	b29b      	uxth	r3, r3
 800517c:	029b      	lsls	r3, r3, #10
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e01b      	b.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x274>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d117      	bne.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x274>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	4413      	add	r3, r2
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	4413      	add	r3, r2
 80051ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051be:	623b      	str	r3, [r7, #32]
 80051c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6818      	ldr	r0, [r3, #0]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	6959      	ldr	r1, [r3, #20]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	891a      	ldrh	r2, [r3, #8]
 80051d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f003 ff0e 	bl	8008ff8 <USB_WritePMA>
 80051dc:	e138      	b.n	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	3306      	adds	r3, #6
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005206:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	699a      	ldr	r2, [r3, #24]
 800520e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005212:	429a      	cmp	r2, r3
 8005214:	d307      	bcc.n	8005226 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	619a      	str	r2, [r3, #24]
 8005224:	e002      	b.n	800522c <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2200      	movs	r2, #0
 800522a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d12e      	bne.n	8005292 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f005 fd29 	bl	800ac92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f040 8102 	bne.w	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]
 8005290:	e0de      	b.n	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11f      	bne.n	80052dc <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	867b      	strh	r3, [r7, #50]	; 0x32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	441a      	add	r2, r3
 80052c6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	f040 80b4 	bne.w	8005450 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052f0:	441a      	add	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052fe:	441a      	add	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	429a      	cmp	r2, r3
 800530e:	d309      	bcc.n	8005324 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	621a      	str	r2, [r3, #32]
 8005322:	e015      	b.n	8005350 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d107      	bne.n	800533c <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800532c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005330:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800533a:	e009      	b.n	8005350 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	643b      	str	r3, [r7, #64]	; 0x40
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d155      	bne.n	800540a <HAL_PCD_EP_DB_Transmit+0x4b6>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	4413      	add	r3, r2
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	011a      	lsls	r2, r3, #4
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	4413      	add	r3, r2
 8005380:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	2b00      	cmp	r3, #0
 800538a:	d112      	bne.n	80053b2 <HAL_PCD_EP_DB_Transmit+0x45e>
 800538c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005396:	b29a      	uxth	r2, r3
 8005398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e044      	b.n	800543c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b4:	2b3e      	cmp	r3, #62	; 0x3e
 80053b6:	d811      	bhi.n	80053dc <HAL_PCD_EP_DB_Transmit+0x488>
 80053b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_PCD_EP_DB_Transmit+0x47a>
 80053c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ca:	3301      	adds	r3, #1
 80053cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e02f      	b.n	800543c <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <HAL_PCD_EP_DB_Transmit+0x49e>
 80053ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ee:	3b01      	subs	r3, #1
 80053f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005402:	b29a      	uxth	r2, r3
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e018      	b.n	800543c <HAL_PCD_EP_DB_Transmit+0x4e8>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d114      	bne.n	800543c <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005420:	4413      	add	r3, r2
 8005422:	643b      	str	r3, [r7, #64]	; 0x40
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	011a      	lsls	r2, r3, #4
 800542a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542c:	4413      	add	r3, r2
 800542e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005436:	b29a      	uxth	r2, r3
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6959      	ldr	r1, [r3, #20]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	895a      	ldrh	r2, [r3, #10]
 8005448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544a:	b29b      	uxth	r3, r3
 800544c:	f003 fdd4 	bl	8008ff8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	461a      	mov	r2, r3
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800546a:	82bb      	strh	r3, [r7, #20]
 800546c:	8abb      	ldrh	r3, [r7, #20]
 800546e:	f083 0310 	eor.w	r3, r3, #16
 8005472:	82bb      	strh	r3, [r7, #20]
 8005474:	8abb      	ldrh	r3, [r7, #20]
 8005476:	f083 0320 	eor.w	r3, r3, #32
 800547a:	82bb      	strh	r3, [r7, #20]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	8abb      	ldrh	r3, [r7, #20]
 800548c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	b29b      	uxth	r3, r3
 800549e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3750      	adds	r7, #80	; 0x50
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	817b      	strh	r3, [r7, #10]
 80054b8:	4613      	mov	r3, r2
 80054ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054bc:	897b      	ldrh	r3, [r7, #10]
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00b      	beq.n	80054e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e009      	b.n	80054f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054e0:	897a      	ldrh	r2, [r7, #10]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	b29a      	uxth	r2, r3
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	80da      	strh	r2, [r3, #6]
 8005508:	e00b      	b.n	8005522 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2201      	movs	r2, #1
 800550e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	b29a      	uxth	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	b29a      	uxth	r2, r3
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
	...

08005530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e26c      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8087 	beq.w	800565e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005550:	4b92      	ldr	r3, [pc, #584]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b04      	cmp	r3, #4
 800555a:	d00c      	beq.n	8005576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800555c:	4b8f      	ldr	r3, [pc, #572]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b08      	cmp	r3, #8
 8005566:	d112      	bne.n	800558e <HAL_RCC_OscConfig+0x5e>
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d10b      	bne.n	800558e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005576:	4b89      	ldr	r3, [pc, #548]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d06c      	beq.n	800565c <HAL_RCC_OscConfig+0x12c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d168      	bne.n	800565c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e246      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x76>
 8005598:	4b80      	ldr	r3, [pc, #512]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a7f      	ldr	r2, [pc, #508]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800559e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e02e      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b7b      	ldr	r3, [pc, #492]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7a      	ldr	r2, [pc, #488]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b78      	ldr	r3, [pc, #480]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a77      	ldr	r2, [pc, #476]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e01d      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d0:	d10c      	bne.n	80055ec <HAL_RCC_OscConfig+0xbc>
 80055d2:	4b72      	ldr	r3, [pc, #456]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a71      	ldr	r2, [pc, #452]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6e      	ldr	r2, [pc, #440]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055e8:	6013      	str	r3, [r2, #0]
 80055ea:	e00b      	b.n	8005604 <HAL_RCC_OscConfig+0xd4>
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b68      	ldr	r3, [pc, #416]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a67      	ldr	r2, [pc, #412]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560c:	f7fd fa3c 	bl	8002a88 <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005614:	f7fd fa38 	bl	8002a88 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e1fa      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005626:	4b5d      	ldr	r3, [pc, #372]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0xe4>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005634:	f7fd fa28 	bl	8002a88 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd fa24 	bl	8002a88 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e1e6      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564e:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x10c>
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d063      	beq.n	8005732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800566a:	4b4c      	ldr	r3, [pc, #304]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005676:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b08      	cmp	r3, #8
 8005680:	d11c      	bne.n	80056bc <HAL_RCC_OscConfig+0x18c>
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d116      	bne.n	80056bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568e:	4b43      	ldr	r3, [pc, #268]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_RCC_OscConfig+0x176>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e1ba      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a6:	4b3d      	ldr	r3, [pc, #244]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4939      	ldr	r1, [pc, #228]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ba:	e03a      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d020      	beq.n	8005706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <HAL_RCC_OscConfig+0x270>)
 80056c6:	2201      	movs	r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ca:	f7fd f9dd 	bl	8002a88 <HAL_GetTick>
 80056ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d2:	f7fd f9d9 	bl	8002a88 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e19b      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e4:	4b2d      	ldr	r3, [pc, #180]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4927      	ldr	r1, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
 8005704:	e015      	b.n	8005732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005706:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_RCC_OscConfig+0x270>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800570c:	f7fd f9bc 	bl	8002a88 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005714:	f7fd f9b8 	bl	8002a88 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e17a      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03a      	beq.n	80057b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d019      	beq.n	800577a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005746:	4b17      	ldr	r3, [pc, #92]	; (80057a4 <HAL_RCC_OscConfig+0x274>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574c:	f7fd f99c 	bl	8002a88 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005754:	f7fd f998 	bl	8002a88 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e15a      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <HAL_RCC_OscConfig+0x26c>)
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005772:	2001      	movs	r0, #1
 8005774:	f000 fac4 	bl	8005d00 <RCC_Delay>
 8005778:	e01c      	b.n	80057b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <HAL_RCC_OscConfig+0x274>)
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005780:	f7fd f982 	bl	8002a88 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005786:	e00f      	b.n	80057a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005788:	f7fd f97e 	bl	8002a88 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d908      	bls.n	80057a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e140      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
 800579a:	bf00      	nop
 800579c:	40021000 	.word	0x40021000
 80057a0:	42420000 	.word	0x42420000
 80057a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057a8:	4b9e      	ldr	r3, [pc, #632]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e9      	bne.n	8005788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80a6 	beq.w	800590e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057c6:	4b97      	ldr	r3, [pc, #604]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d2:	4b94      	ldr	r3, [pc, #592]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4a93      	ldr	r2, [pc, #588]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057dc:	61d3      	str	r3, [r2, #28]
 80057de:	4b91      	ldr	r3, [pc, #580]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ee:	4b8e      	ldr	r3, [pc, #568]	; (8005a28 <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d118      	bne.n	800582c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057fa:	4b8b      	ldr	r3, [pc, #556]	; (8005a28 <HAL_RCC_OscConfig+0x4f8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a8a      	ldr	r2, [pc, #552]	; (8005a28 <HAL_RCC_OscConfig+0x4f8>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005806:	f7fd f93f 	bl	8002a88 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580e:	f7fd f93b 	bl	8002a88 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	; 0x64
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e0fd      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005820:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_OscConfig+0x4f8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d106      	bne.n	8005842 <HAL_RCC_OscConfig+0x312>
 8005834:	4b7b      	ldr	r3, [pc, #492]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	4a7a      	ldr	r2, [pc, #488]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6213      	str	r3, [r2, #32]
 8005840:	e02d      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x334>
 800584a:	4b76      	ldr	r3, [pc, #472]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	4a75      	ldr	r2, [pc, #468]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6213      	str	r3, [r2, #32]
 8005856:	4b73      	ldr	r3, [pc, #460]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4a72      	ldr	r2, [pc, #456]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6213      	str	r3, [r2, #32]
 8005862:	e01c      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b05      	cmp	r3, #5
 800586a:	d10c      	bne.n	8005886 <HAL_RCC_OscConfig+0x356>
 800586c:	4b6d      	ldr	r3, [pc, #436]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	4a6c      	ldr	r2, [pc, #432]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	6213      	str	r3, [r2, #32]
 8005878:	4b6a      	ldr	r3, [pc, #424]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800587e:	f043 0301 	orr.w	r3, r3, #1
 8005882:	6213      	str	r3, [r2, #32]
 8005884:	e00b      	b.n	800589e <HAL_RCC_OscConfig+0x36e>
 8005886:	4b67      	ldr	r3, [pc, #412]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	4a66      	ldr	r2, [pc, #408]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	6213      	str	r3, [r2, #32]
 8005892:	4b64      	ldr	r3, [pc, #400]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	4a63      	ldr	r2, [pc, #396]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005898:	f023 0304 	bic.w	r3, r3, #4
 800589c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d015      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a6:	f7fd f8ef 	bl	8002a88 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fd f8eb 	bl	8002a88 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0ab      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c4:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ee      	beq.n	80058ae <HAL_RCC_OscConfig+0x37e>
 80058d0:	e014      	b.n	80058fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d2:	f7fd f8d9 	bl	8002a88 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fd f8d5 	bl	8002a88 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e095      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	4b4c      	ldr	r3, [pc, #304]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ee      	bne.n	80058da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d105      	bne.n	800590e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005902:	4b48      	ldr	r3, [pc, #288]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4a47      	ldr	r2, [pc, #284]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8081 	beq.w	8005a1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f003 030c 	and.w	r3, r3, #12
 8005920:	2b08      	cmp	r3, #8
 8005922:	d061      	beq.n	80059e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d146      	bne.n	80059ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592c:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <HAL_RCC_OscConfig+0x4fc>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fd f8a9 	bl	8002a88 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593a:	f7fd f8a5 	bl	8002a88 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e067      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594c:	4b35      	ldr	r3, [pc, #212]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d108      	bne.n	8005974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005962:	4b30      	ldr	r3, [pc, #192]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	492d      	ldr	r1, [pc, #180]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a19      	ldr	r1, [r3, #32]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	430b      	orrs	r3, r1
 8005986:	4927      	ldr	r1, [pc, #156]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 8005988:	4313      	orrs	r3, r2
 800598a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800598c:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <HAL_RCC_OscConfig+0x4fc>)
 800598e:	2201      	movs	r2, #1
 8005990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005992:	f7fd f879 	bl	8002a88 <HAL_GetTick>
 8005996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005998:	e008      	b.n	80059ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599a:	f7fd f875 	bl	8002a88 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d901      	bls.n	80059ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e037      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0f0      	beq.n	800599a <HAL_RCC_OscConfig+0x46a>
 80059b8:	e02f      	b.n	8005a1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <HAL_RCC_OscConfig+0x4fc>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd f862 	bl	8002a88 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fd f85e 	bl	8002a88 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e020      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059da:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x498>
 80059e6:	e018      	b.n	8005a1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e013      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80059f4:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <HAL_RCC_OscConfig+0x4f4>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d106      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	42420060 	.word	0x42420060

08005a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0d0      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a44:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d910      	bls.n	8005a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a52:	4b67      	ldr	r3, [pc, #412]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f023 0207 	bic.w	r2, r3, #7
 8005a5a:	4965      	ldr	r1, [pc, #404]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0b8      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d020      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a8c:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a58      	ldr	r2, [pc, #352]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa4:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab0:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	494d      	ldr	r1, [pc, #308]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d040      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d115      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e07f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	4b41      	ldr	r3, [pc, #260]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e073      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afe:	4b3d      	ldr	r3, [pc, #244]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e06b      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b0e:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f023 0203 	bic.w	r2, r3, #3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	4936      	ldr	r1, [pc, #216]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fc ffb2 	bl	8002a88 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b26:	e00a      	b.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b28:	f7fc ffae 	bl	8002a88 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e053      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b3e:	4b2d      	ldr	r3, [pc, #180]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 020c 	and.w	r2, r3, #12
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1eb      	bne.n	8005b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d210      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b5e:	4b24      	ldr	r3, [pc, #144]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 0207 	bic.w	r2, r3, #7
 8005b66:	4922      	ldr	r1, [pc, #136]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e032      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	490e      	ldr	r1, [pc, #56]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005bbe:	f000 f821 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bd0:	5ccb      	ldrb	r3, [r1, r3]
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <HAL_RCC_ClockConfig+0x1cc>)
 8005bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCC_ClockConfig+0x1d0>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc ff10 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40022000 	.word	0x40022000
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	0800c6c8 	.word	0x0800c6c8
 8005bfc:	20000014 	.word	0x20000014
 8005c00:	20000018 	.word	0x20000018

08005c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	b490      	push	{r4, r7}
 8005c06:	b08a      	sub	sp, #40	; 0x28
 8005c08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005c0a:	4b2a      	ldr	r3, [pc, #168]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005c0c:	1d3c      	adds	r4, r7, #4
 8005c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005c14:	f240 2301 	movw	r3, #513	; 0x201
 8005c18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	2300      	movs	r3, #0
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c2e:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 030c 	and.w	r3, r3, #12
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d002      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x40>
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_GetSysClockFreq+0x46>
 8005c42:	e02d      	b.n	8005ca0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c46:	623b      	str	r3, [r7, #32]
      break;
 8005c48:	e02d      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	0c9b      	lsrs	r3, r3, #18
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c56:	4413      	add	r3, r2
 8005c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005c5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c68:	4b13      	ldr	r3, [pc, #76]	; (8005cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	0c5b      	lsrs	r3, r3, #17
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c76:	4413      	add	r3, r2
 8005c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4a0e      	ldr	r2, [pc, #56]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c82:	fb02 f203 	mul.w	r2, r2, r3
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c8e:	e004      	b.n	8005c9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	623b      	str	r3, [r7, #32]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca2:	623b      	str	r3, [r7, #32]
      break;
 8005ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	; 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bc90      	pop	{r4, r7}
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	0800c660 	.word	0x0800c660
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	007a1200 	.word	0x007a1200
 8005cc0:	003d0900 	.word	0x003d0900

08005cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cc8:	4b02      	ldr	r3, [pc, #8]	; (8005cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cca:	681b      	ldr	r3, [r3, #0]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bc80      	pop	{r7}
 8005cd2:	4770      	bx	lr
 8005cd4:	20000014 	.word	0x20000014

08005cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cdc:	f7ff fff2 	bl	8005cc4 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	0adb      	lsrs	r3, r3, #11
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4903      	ldr	r1, [pc, #12]	; (8005cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	0800c6d8 	.word	0x0800c6d8

08005d00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <RCC_Delay+0x34>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <RCC_Delay+0x38>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	0a5b      	lsrs	r3, r3, #9
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d1c:	bf00      	nop
  }
  while (Delay --);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1e5a      	subs	r2, r3, #1
 8005d22:	60fa      	str	r2, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f9      	bne.n	8005d1c <RCC_Delay+0x1c>
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr
 8005d34:	20000014 	.word	0x20000014
 8005d38:	10624dd3 	.word	0x10624dd3

08005d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d07d      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d5c:	4b4f      	ldr	r3, [pc, #316]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	4a4b      	ldr	r2, [pc, #300]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	61d3      	str	r3, [r2, #28]
 8005d74:	4b49      	ldr	r3, [pc, #292]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d80:	2301      	movs	r3, #1
 8005d82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d84:	4b46      	ldr	r3, [pc, #280]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d118      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d90:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a42      	ldr	r2, [pc, #264]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fc fe74 	bl	8002a88 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fc fe70 	bl	8002a88 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b64      	cmp	r3, #100	; 0x64
 8005db0:	d901      	bls.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e06d      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db6:	4b3a      	ldr	r3, [pc, #232]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d02e      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d027      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005de0:	4b2e      	ldr	r3, [pc, #184]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005dec:	2201      	movs	r2, #1
 8005dee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005df6:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d014      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e06:	f7fc fe3f 	bl	8002a88 <HAL_GetTick>
 8005e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	e00a      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0e:	f7fc fe3b 	bl	8002a88 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d901      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e036      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0ee      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e30:	4b1a      	ldr	r3, [pc, #104]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4917      	ldr	r1, [pc, #92]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d105      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e48:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4a13      	ldr	r2, [pc, #76]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	490b      	ldr	r1, [pc, #44]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	4904      	ldr	r1, [pc, #16]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
 8005ea4:	42420440 	.word	0x42420440

08005ea8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b08d      	sub	sp, #52	; 0x34
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005eb0:	4b5a      	ldr	r3, [pc, #360]	; (800601c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005eb2:	f107 040c 	add.w	r4, r7, #12
 8005eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ebc:	f240 2301 	movw	r3, #513	; 0x201
 8005ec0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eca:	2300      	movs	r3, #0
 8005ecc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b10      	cmp	r3, #16
 8005ee0:	f200 8091 	bhi.w	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d04c      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d07c      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005ef0:	e089      	b.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8005ef2:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005ef8:	4b49      	ldr	r3, [pc, #292]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8082 	beq.w	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	0c9b      	lsrs	r3, r3, #18
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f12:	4413      	add	r3, r2
 8005f14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f18:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d018      	beq.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f24:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	0c5b      	lsrs	r3, r3, #17
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005f32:	4413      	add	r3, r2
 8005f34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f44:	4a37      	ldr	r2, [pc, #220]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f54:	e004      	b.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	4a33      	ldr	r2, [pc, #204]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005f5a:	fb02 f303 	mul.w	r3, r2, r3
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f60:	4b2f      	ldr	r3, [pc, #188]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005f72:	e04a      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4a2c      	ldr	r2, [pc, #176]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005f82:	e042      	b.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005f84:	4b26      	ldr	r3, [pc, #152]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d003      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa6:	e01f      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb2:	d109      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005fb4:	4b1a      	ldr	r3, [pc, #104]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005fc0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc6:	e00f      	b.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd2:	d11c      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005fd4:	4b12      	ldr	r3, [pc, #72]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005fe0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005fe6:	e012      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005fe8:	e011      	b.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005fea:	f7ff fe75 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	0b9b      	lsrs	r3, r3, #14
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006004:	e004      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800600e:	bf00      	nop
    }
  }
  return (frequency);
 8006010:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006012:	4618      	mov	r0, r3
 8006014:	3734      	adds	r7, #52	; 0x34
 8006016:	46bd      	mov	sp, r7
 8006018:	bd90      	pop	{r4, r7, pc}
 800601a:	bf00      	nop
 800601c:	0800c670 	.word	0x0800c670
 8006020:	40021000 	.word	0x40021000
 8006024:	007a1200 	.word	0x007a1200
 8006028:	003d0900 	.word	0x003d0900
 800602c:	aaaaaaab 	.word	0xaaaaaaab

08006030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e076      	b.n	8006130 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006052:	d009      	beq.n	8006068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	61da      	str	r2, [r3, #28]
 800605a:	e005      	b.n	8006068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc faa4 	bl	80025d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	ea42 0103 	orr.w	r1, r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	0c1a      	lsrs	r2, r3, #16
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f002 0204 	and.w	r2, r2, #4
 800610e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800611e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_SPI_Transmit+0x22>
 8006156:	2302      	movs	r3, #2
 8006158:	e126      	b.n	80063a8 <HAL_SPI_Transmit+0x270>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006162:	f7fc fc91 	bl	8002a88 <HAL_GetTick>
 8006166:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d002      	beq.n	800617e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006178:	2302      	movs	r3, #2
 800617a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800617c:	e10b      	b.n	8006396 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_SPI_Transmit+0x52>
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800618e:	e102      	b.n	8006396 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2203      	movs	r2, #3
 8006194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	88fa      	ldrh	r2, [r7, #6]
 80061ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061d6:	d10f      	bne.n	80061f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006202:	2b40      	cmp	r3, #64	; 0x40
 8006204:	d007      	beq.n	8006216 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006214:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d14b      	bne.n	80062b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_SPI_Transmit+0xf6>
 8006228:	8afb      	ldrh	r3, [r7, #22]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d13e      	bne.n	80062ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	881a      	ldrh	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006252:	e02b      	b.n	80062ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d112      	bne.n	8006288 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	1c9a      	adds	r2, r3, #2
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	86da      	strh	r2, [r3, #54]	; 0x36
 8006286:	e011      	b.n	80062ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006288:	f7fc fbfe 	bl	8002a88 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d803      	bhi.n	80062a0 <HAL_SPI_Transmit+0x168>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800629e:	d102      	bne.n	80062a6 <HAL_SPI_Transmit+0x16e>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062aa:	e074      	b.n	8006396 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ce      	bne.n	8006254 <HAL_SPI_Transmit+0x11c>
 80062b6:	e04c      	b.n	8006352 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_SPI_Transmit+0x18e>
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d140      	bne.n	8006348 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062ec:	e02c      	b.n	8006348 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d113      	bne.n	8006324 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
 8006322:	e011      	b.n	8006348 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006324:	f7fc fbb0 	bl	8002a88 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d803      	bhi.n	800633c <HAL_SPI_Transmit+0x204>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Transmit+0x20a>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006346:	e026      	b.n	8006396 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1cd      	bne.n	80062ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f8b2 	bl	80064c0 <SPI_EndRxTxTransaction>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e000      	b.n	8006396 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006394:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063c0:	f7fc fb62 	bl	8002a88 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4413      	add	r3, r2
 80063ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063d0:	f7fc fb5a 	bl	8002a88 <HAL_GetTick>
 80063d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	015b      	lsls	r3, r3, #5
 80063dc:	0d1b      	lsrs	r3, r3, #20
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	fb02 f303 	mul.w	r3, r2, r3
 80063e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063e6:	e054      	b.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d050      	beq.n	8006492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f0:	f7fc fb4a 	bl	8002a88 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d902      	bls.n	8006406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d13d      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641e:	d111      	bne.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006428:	d004      	beq.n	8006434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006432:	d107      	bne.n	8006444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800644c:	d10f      	bne.n	800646e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800646c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e017      	b.n	80064b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	3b01      	subs	r3, #1
 8006490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4013      	ands	r3, r2
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d19b      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000014 	.word	0x20000014

080064c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2200      	movs	r2, #0
 80064d4:	2180      	movs	r1, #128	; 0x80
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f7ff ff6a 	bl	80063b0 <SPI_WaitFlagStateUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e000      	b.n	80064f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e041      	b.n	8006592 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d106      	bne.n	8006528 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fc f892 	bl	800264c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f000 fb38 	bl	8006bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_IC_Start_IT+0x1a>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	e013      	b.n	80065de <HAL_TIM_IC_Start_IT+0x42>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_IC_Start_IT+0x2a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e00b      	b.n	80065de <HAL_TIM_IC_Start_IT+0x42>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_IC_Start_IT+0x3a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e003      	b.n	80065de <HAL_TIM_IC_Start_IT+0x42>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_TIM_IC_Start_IT+0x54>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e013      	b.n	8006618 <HAL_TIM_IC_Start_IT+0x7c>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d104      	bne.n	8006600 <HAL_TIM_IC_Start_IT+0x64>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e00b      	b.n	8006618 <HAL_TIM_IC_Start_IT+0x7c>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d104      	bne.n	8006610 <HAL_TIM_IC_Start_IT+0x74>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e003      	b.n	8006618 <HAL_TIM_IC_Start_IT+0x7c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006616:	b2db      	uxtb	r3, r3
 8006618:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800661a:	7bfb      	ldrb	r3, [r7, #15]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d102      	bne.n	8006626 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d001      	beq.n	800662a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0b3      	b.n	8006792 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <HAL_TIM_IC_Start_IT+0x9e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	e013      	b.n	8006662 <HAL_TIM_IC_Start_IT+0xc6>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d104      	bne.n	800664a <HAL_TIM_IC_Start_IT+0xae>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006648:	e00b      	b.n	8006662 <HAL_TIM_IC_Start_IT+0xc6>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d104      	bne.n	800665a <HAL_TIM_IC_Start_IT+0xbe>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006658:	e003      	b.n	8006662 <HAL_TIM_IC_Start_IT+0xc6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_TIM_IC_Start_IT+0xd6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2202      	movs	r2, #2
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006670:	e013      	b.n	800669a <HAL_TIM_IC_Start_IT+0xfe>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b04      	cmp	r3, #4
 8006676:	d104      	bne.n	8006682 <HAL_TIM_IC_Start_IT+0xe6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006680:	e00b      	b.n	800669a <HAL_TIM_IC_Start_IT+0xfe>
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d104      	bne.n	8006692 <HAL_TIM_IC_Start_IT+0xf6>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006690:	e003      	b.n	800669a <HAL_TIM_IC_Start_IT+0xfe>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b0c      	cmp	r3, #12
 800669e:	d841      	bhi.n	8006724 <HAL_TIM_IC_Start_IT+0x188>
 80066a0:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <HAL_TIM_IC_Start_IT+0x10c>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066dd 	.word	0x080066dd
 80066ac:	08006725 	.word	0x08006725
 80066b0:	08006725 	.word	0x08006725
 80066b4:	08006725 	.word	0x08006725
 80066b8:	080066ef 	.word	0x080066ef
 80066bc:	08006725 	.word	0x08006725
 80066c0:	08006725 	.word	0x08006725
 80066c4:	08006725 	.word	0x08006725
 80066c8:	08006701 	.word	0x08006701
 80066cc:	08006725 	.word	0x08006725
 80066d0:	08006725 	.word	0x08006725
 80066d4:	08006725 	.word	0x08006725
 80066d8:	08006713 	.word	0x08006713
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0202 	orr.w	r2, r2, #2
 80066ea:	60da      	str	r2, [r3, #12]
      break;
 80066ec:	e01b      	b.n	8006726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0204 	orr.w	r2, r2, #4
 80066fc:	60da      	str	r2, [r3, #12]
      break;
 80066fe:	e012      	b.n	8006726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0208 	orr.w	r2, r2, #8
 800670e:	60da      	str	r2, [r3, #12]
      break;
 8006710:	e009      	b.n	8006726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0210 	orr.w	r2, r2, #16
 8006720:	60da      	str	r2, [r3, #12]
      break;
 8006722:	e000      	b.n	8006726 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006724:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fbad 	bl	8006e8e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a18      	ldr	r2, [pc, #96]	; (800679c <HAL_TIM_IC_Start_IT+0x200>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00e      	beq.n	800675c <HAL_TIM_IC_Start_IT+0x1c0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006746:	d009      	beq.n	800675c <HAL_TIM_IC_Start_IT+0x1c0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a14      	ldr	r2, [pc, #80]	; (80067a0 <HAL_TIM_IC_Start_IT+0x204>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d004      	beq.n	800675c <HAL_TIM_IC_Start_IT+0x1c0>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a13      	ldr	r2, [pc, #76]	; (80067a4 <HAL_TIM_IC_Start_IT+0x208>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d111      	bne.n	8006780 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b06      	cmp	r3, #6
 800676c:	d010      	beq.n	8006790 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0201 	orr.w	r2, r2, #1
 800677c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677e:	e007      	b.n	8006790 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0201 	orr.w	r2, r2, #1
 800678e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800

080067a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d122      	bne.n	8006804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d11b      	bne.n	8006804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0202 	mvn.w	r2, #2
 80067d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fdca 	bl	8001384 <HAL_TIM_IC_CaptureCallback>
 80067f0:	e005      	b.n	80067fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f9c1 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f9c7 	bl	8006b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b04      	cmp	r3, #4
 8006810:	d122      	bne.n	8006858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d11b      	bne.n	8006858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0204 	mvn.w	r2, #4
 8006828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fa fda0 	bl	8001384 <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f997 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f99d 	bl	8006b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b08      	cmp	r3, #8
 8006864:	d122      	bne.n	80068ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d11b      	bne.n	80068ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0208 	mvn.w	r2, #8
 800687c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2204      	movs	r2, #4
 8006882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fa fd76 	bl	8001384 <HAL_TIM_IC_CaptureCallback>
 8006898:	e005      	b.n	80068a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f96d 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f973 	bl	8006b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d122      	bne.n	8006900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d11b      	bne.n	8006900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0210 	mvn.w	r2, #16
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2208      	movs	r2, #8
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fa fd4c 	bl	8001384 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f943 	bl	8006b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f949 	bl	8006b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d10e      	bne.n	800692c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0201 	mvn.w	r2, #1
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f91e 	bl	8006b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	2b80      	cmp	r3, #128	; 0x80
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fb27 	bl	8006fa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d10e      	bne.n	8006984 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d107      	bne.n	8006984 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800697c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f90d 	bl	8006b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b20      	cmp	r3, #32
 8006990:	d10e      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b20      	cmp	r3, #32
 800699e:	d107      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f06f 0220 	mvn.w	r2, #32
 80069a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 faf2 	bl	8006f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_TIM_IC_ConfigChannel+0x1a>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e082      	b.n	8006ad8 <HAL_TIM_IC_ConfigChannel+0x120>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d11b      	bne.n	8006a18 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6819      	ldr	r1, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f000 f940 	bl	8006c74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 020c 	bic.w	r2, r2, #12
 8006a02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6999      	ldr	r1, [r3, #24]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]
 8006a16:	e05a      	b.n	8006ace <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d11c      	bne.n	8006a58 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f000 f97b 	bl	8006d28 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	699a      	ldr	r2, [r3, #24]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6999      	ldr	r1, [r3, #24]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	021a      	lsls	r2, r3, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	619a      	str	r2, [r3, #24]
 8006a56:	e03a      	b.n	8006ace <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d11b      	bne.n	8006a96 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6819      	ldr	r1, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f000 f997 	bl	8006da0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 020c 	bic.w	r2, r2, #12
 8006a80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69d9      	ldr	r1, [r3, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	61da      	str	r2, [r3, #28]
 8006a94:	e01b      	b.n	8006ace <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	6819      	ldr	r1, [r3, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f000 f9b6 	bl	8006e16 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ab8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69d9      	ldr	r1, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	021a      	lsls	r2, r3, #8
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b0c      	cmp	r3, #12
 8006af2:	d831      	bhi.n	8006b58 <HAL_TIM_ReadCapturedValue+0x78>
 8006af4:	a201      	add	r2, pc, #4	; (adr r2, 8006afc <HAL_TIM_ReadCapturedValue+0x1c>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006b59 	.word	0x08006b59
 8006b0c:	08006b3b 	.word	0x08006b3b
 8006b10:	08006b59 	.word	0x08006b59
 8006b14:	08006b59 	.word	0x08006b59
 8006b18:	08006b59 	.word	0x08006b59
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b59 	.word	0x08006b59
 8006b24:	08006b59 	.word	0x08006b59
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b4f 	.word	0x08006b4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	60fb      	str	r3, [r7, #12]

      break;
 8006b38:	e00f      	b.n	8006b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	60fb      	str	r3, [r7, #12]

      break;
 8006b42:	e00a      	b.n	8006b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	60fb      	str	r3, [r7, #12]

      break;
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	60fb      	str	r3, [r7, #12]

      break;
 8006b56:	e000      	b.n	8006b5a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b58:	bf00      	nop
  }

  return tmpreg;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a29      	ldr	r2, [pc, #164]	; (8006c68 <TIM_Base_SetConfig+0xb8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00b      	beq.n	8006be0 <TIM_Base_SetConfig+0x30>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d007      	beq.n	8006be0 <TIM_Base_SetConfig+0x30>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a26      	ldr	r2, [pc, #152]	; (8006c6c <TIM_Base_SetConfig+0xbc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d003      	beq.n	8006be0 <TIM_Base_SetConfig+0x30>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <TIM_Base_SetConfig+0xc0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d108      	bne.n	8006bf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	; (8006c68 <TIM_Base_SetConfig+0xb8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <TIM_Base_SetConfig+0x62>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c00:	d007      	beq.n	8006c12 <TIM_Base_SetConfig+0x62>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <TIM_Base_SetConfig+0xbc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_Base_SetConfig+0x62>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	; (8006c70 <TIM_Base_SetConfig+0xc0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d108      	bne.n	8006c24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <TIM_Base_SetConfig+0xb8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d103      	bne.n	8006c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	615a      	str	r2, [r3, #20]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800

08006c74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f023 0201 	bic.w	r2, r3, #1
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4a1f      	ldr	r2, [pc, #124]	; (8006d1c <TIM_TI1_SetConfig+0xa8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_TI1_SetConfig+0x46>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d007      	beq.n	8006cba <TIM_TI1_SetConfig+0x46>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a1c      	ldr	r2, [pc, #112]	; (8006d20 <TIM_TI1_SetConfig+0xac>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_TI1_SetConfig+0x46>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <TIM_TI1_SetConfig+0xb0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d101      	bne.n	8006cbe <TIM_TI1_SetConfig+0x4a>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <TIM_TI1_SetConfig+0x4c>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	e003      	b.n	8006cde <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f023 030a 	bic.w	r3, r3, #10
 8006cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f003 030a 	and.w	r3, r3, #10
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr
 8006d1c:	40012c00 	.word	0x40012c00
 8006d20:	40000400 	.word	0x40000400
 8006d24:	40000800 	.word	0x40000800

08006d28 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0210 	bic.w	r2, r3, #16
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	031b      	lsls	r3, r3, #12
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr

08006da0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f023 0303 	bic.w	r3, r3, #3
 8006dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ddc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006df0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	621a      	str	r2, [r3, #32]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr

08006e16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b087      	sub	sp, #28
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	60b9      	str	r1, [r7, #8]
 8006e20:	607a      	str	r2, [r7, #4]
 8006e22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	031b      	lsls	r3, r3, #12
 8006e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	621a      	str	r2, [r3, #32]
}
 8006e84:	bf00      	nop
 8006e86:	371c      	adds	r7, #28
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr

08006e8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b087      	sub	sp, #28
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	43db      	mvns	r3, r3
 8006eb0:	401a      	ands	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	621a      	str	r2, [r3, #32]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr
	...

08006ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e046      	b.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a16      	ldr	r2, [pc, #88]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00e      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d009      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a10      	ldr	r2, [pc, #64]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10c      	bne.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40000800 	.word	0x40000800

08006f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006fb8:	b084      	sub	sp, #16
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	f107 0014 	add.w	r0, r7, #20
 8006fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	b004      	add	sp, #16
 8006fd6:	4770      	bx	lr

08006fd8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006fe8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006fec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800700c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007010:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	b29b      	uxth	r3, r3
 800701e:	43db      	mvns	r3, r3
 8007020:	b29b      	uxth	r3, r3
 8007022:	4013      	ands	r3, r2
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007050:	b084      	sub	sp, #16
 8007052:	b480      	push	{r7}
 8007054:	b083      	sub	sp, #12
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	f107 0014 	add.w	r0, r7, #20
 800705e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	bc80      	pop	{r7}
 800708c:	b004      	add	sp, #16
 800708e:	4770      	bx	lr

08007090 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007090:	b480      	push	{r7}
 8007092:	b09b      	sub	sp, #108	; 0x6c
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	78db      	ldrb	r3, [r3, #3]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d81f      	bhi.n	8007102 <USB_ActivateEndpoint+0x72>
 80070c2:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USB_ActivateEndpoint+0x38>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070f5 	.word	0x080070f5
 80070d0:	0800710b 	.word	0x0800710b
 80070d4:	080070e7 	.word	0x080070e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80070d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80070e4:	e012      	b.n	800710c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80070e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80070ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80070f2:	e00b      	b.n	800710c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80070f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80070f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007100:	e004      	b.n	800710c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007108:	e000      	b.n	800710c <USB_ActivateEndpoint+0x7c>
      break;
 800710a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800711a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800711e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712a:	b29b      	uxth	r3, r3
 800712c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007144:	b29a      	uxth	r2, r3
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	441a      	add	r2, r3
 800715c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	b29b      	uxth	r3, r3
 8007172:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	7b1b      	ldrb	r3, [r3, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 8149 	bne.w	8007410 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8084 	beq.w	8007290 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007192:	b29b      	uxth	r3, r3
 8007194:	461a      	mov	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	011a      	lsls	r2, r3, #4
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071aa:	613b      	str	r3, [r7, #16]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	81fb      	strh	r3, [r7, #14]
 80071ca:	89fb      	ldrh	r3, [r7, #14]
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01b      	beq.n	800720c <USB_ActivateEndpoint+0x17c>
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ea:	81bb      	strh	r3, [r7, #12]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	441a      	add	r2, r3
 80071f6:	89bb      	ldrh	r3, [r7, #12]
 80071f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007204:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007208:	b29b      	uxth	r3, r3
 800720a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	78db      	ldrb	r3, [r3, #3]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d020      	beq.n	8007256 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722a:	813b      	strh	r3, [r7, #8]
 800722c:	893b      	ldrh	r3, [r7, #8]
 800722e:	f083 0320 	eor.w	r3, r3, #32
 8007232:	813b      	strh	r3, [r7, #8]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	441a      	add	r2, r3
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800724c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007250:	b29b      	uxth	r3, r3
 8007252:	8013      	strh	r3, [r2, #0]
 8007254:	e27f      	b.n	8007756 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726c:	817b      	strh	r3, [r7, #10]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	897b      	ldrh	r3, [r7, #10]
 800727a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800727e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728a:	b29b      	uxth	r3, r3
 800728c:	8013      	strh	r3, [r2, #0]
 800728e:	e262      	b.n	8007756 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800729a:	b29b      	uxth	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	4413      	add	r3, r2
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	011a      	lsls	r2, r3, #4
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80072b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	88db      	ldrh	r3, [r3, #6]
 80072b8:	085b      	lsrs	r3, r3, #1
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	4413      	add	r3, r2
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	011a      	lsls	r2, r3, #4
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	4413      	add	r3, r2
 80072e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072e6:	623b      	str	r3, [r7, #32]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d112      	bne.n	8007316 <USB_ActivateEndpoint+0x286>
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e02f      	b.n	8007376 <USB_ActivateEndpoint+0x2e6>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b3e      	cmp	r3, #62	; 0x3e
 800731c:	d813      	bhi.n	8007346 <USB_ActivateEndpoint+0x2b6>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	663b      	str	r3, [r7, #96]	; 0x60
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <USB_ActivateEndpoint+0x2a8>
 8007332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007334:	3301      	adds	r3, #1
 8007336:	663b      	str	r3, [r7, #96]	; 0x60
 8007338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800733a:	b29b      	uxth	r3, r3
 800733c:	029b      	lsls	r3, r3, #10
 800733e:	b29a      	uxth	r2, r3
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	e017      	b.n	8007376 <USB_ActivateEndpoint+0x2e6>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	095b      	lsrs	r3, r3, #5
 800734c:	663b      	str	r3, [r7, #96]	; 0x60
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <USB_ActivateEndpoint+0x2d0>
 800735a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800735c:	3b01      	subs	r3, #1
 800735e:	663b      	str	r3, [r7, #96]	; 0x60
 8007360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007362:	b29b      	uxth	r3, r3
 8007364:	029b      	lsls	r3, r3, #10
 8007366:	b29b      	uxth	r3, r3
 8007368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007370:	b29a      	uxth	r2, r3
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	83fb      	strh	r3, [r7, #30]
 8007384:	8bfb      	ldrh	r3, [r7, #30]
 8007386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d01b      	beq.n	80073c6 <USB_ActivateEndpoint+0x336>
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	83bb      	strh	r3, [r7, #28]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	8bbb      	ldrh	r3, [r7, #28]
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073dc:	837b      	strh	r3, [r7, #26]
 80073de:	8b7b      	ldrh	r3, [r7, #26]
 80073e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073e4:	837b      	strh	r3, [r7, #26]
 80073e6:	8b7b      	ldrh	r3, [r7, #26]
 80073e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073ec:	837b      	strh	r3, [r7, #26]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	441a      	add	r2, r3
 80073f8:	8b7b      	ldrh	r3, [r7, #26]
 80073fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740a:	b29b      	uxth	r3, r3
 800740c:	8013      	strh	r3, [r2, #0]
 800740e:	e1a2      	b.n	8007756 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007426:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	441a      	add	r2, r3
 8007434:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007440:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007448:	b29b      	uxth	r3, r3
 800744a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800745c:	4413      	add	r3, r2
 800745e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	011a      	lsls	r2, r3, #4
 8007466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007468:	4413      	add	r3, r2
 800746a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746e:	657b      	str	r3, [r7, #84]	; 0x54
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	891b      	ldrh	r3, [r3, #8]
 8007474:	085b      	lsrs	r3, r3, #1
 8007476:	b29b      	uxth	r3, r3
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	653b      	str	r3, [r7, #80]	; 0x50
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007490:	4413      	add	r3, r2
 8007492:	653b      	str	r3, [r7, #80]	; 0x50
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	011a      	lsls	r2, r3, #4
 800749a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800749c:	4413      	add	r3, r2
 800749e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80074a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	895b      	ldrh	r3, [r3, #10]
 80074a8:	085b      	lsrs	r3, r3, #1
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 8091 	bne.w	80075e0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80074cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80074ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01b      	beq.n	800750e <USB_ActivateEndpoint+0x47e>
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	441a      	add	r2, r3
 80074f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80074fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750a:	b29b      	uxth	r3, r3
 800750c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	873b      	strh	r3, [r7, #56]	; 0x38
 800751c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01b      	beq.n	800755e <USB_ActivateEndpoint+0x4ce>
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	441a      	add	r2, r3
 8007548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800754a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800754e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800755a:	b29b      	uxth	r3, r3
 800755c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007574:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007576:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007578:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800757c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800757e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007580:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007584:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	441a      	add	r2, r3
 8007590:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800759a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075bc:	867b      	strh	r3, [r7, #50]	; 0x32
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]
 80075de:	e0ba      	b.n	8007756 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80075f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80075f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01d      	beq.n	8007638 <USB_ActivateEndpoint+0x5a8>
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	441a      	add	r2, r3
 8007620:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800762c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007648:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01d      	beq.n	8007690 <USB_ActivateEndpoint+0x600>
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800767c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007688:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800768c:	b29b      	uxth	r3, r3
 800768e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	78db      	ldrb	r3, [r3, #3]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d024      	beq.n	80076e2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076b6:	f083 0320 	eor.w	r3, r3, #32
 80076ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	441a      	add	r2, r3
 80076c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80076cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076dc:	b29b      	uxth	r3, r3
 80076de:	8013      	strh	r3, [r2, #0]
 80076e0:	e01d      	b.n	800771e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	441a      	add	r2, r3
 8007706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800770a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771a:	b29b      	uxth	r3, r3
 800771c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	b29b      	uxth	r3, r3
 800772c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007734:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800774a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	b29b      	uxth	r3, r3
 8007754:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007756:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800775a:	4618      	mov	r0, r3
 800775c:	376c      	adds	r7, #108	; 0x6c
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007764:	b480      	push	{r7}
 8007766:	b08d      	sub	sp, #52	; 0x34
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	7b1b      	ldrb	r3, [r3, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f040 808e 	bne.w	8007894 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d044      	beq.n	800780a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	81bb      	strh	r3, [r7, #12]
 800778e:	89bb      	ldrh	r3, [r7, #12]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01b      	beq.n	80077d0 <USB_DeactivateEndpoint+0x6c>
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	817b      	strh	r3, [r7, #10]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	897b      	ldrh	r3, [r7, #10]
 80077bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e6:	813b      	strh	r3, [r7, #8]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	893b      	ldrh	r3, [r7, #8]
 80077f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007804:	b29b      	uxth	r3, r3
 8007806:	8013      	strh	r3, [r2, #0]
 8007808:	e192      	b.n	8007b30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	827b      	strh	r3, [r7, #18]
 8007818:	8a7b      	ldrh	r3, [r7, #18]
 800781a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <USB_DeactivateEndpoint+0xf6>
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007838:	823b      	strh	r3, [r7, #16]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	441a      	add	r2, r3
 8007844:	8a3b      	ldrh	r3, [r7, #16]
 8007846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800784a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007856:	b29b      	uxth	r3, r3
 8007858:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800786c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007870:	81fb      	strh	r3, [r7, #14]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
 8007892:	e14d      	b.n	8007b30 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 80a5 	bne.w	80079e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	881b      	ldrh	r3, [r3, #0]
 80078aa:	843b      	strh	r3, [r7, #32]
 80078ac:	8c3b      	ldrh	r3, [r7, #32]
 80078ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01b      	beq.n	80078ee <USB_DeactivateEndpoint+0x18a>
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078cc:	83fb      	strh	r3, [r7, #30]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	441a      	add	r2, r3
 80078d8:	8bfb      	ldrh	r3, [r7, #30]
 80078da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	83bb      	strh	r3, [r7, #28]
 80078fc:	8bbb      	ldrh	r3, [r7, #28]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b00      	cmp	r3, #0
 8007904:	d01b      	beq.n	800793e <USB_DeactivateEndpoint+0x1da>
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791c:	837b      	strh	r3, [r7, #26]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	441a      	add	r2, r3
 8007928:	8b7b      	ldrh	r3, [r7, #26]
 800792a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007936:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800793a:	b29b      	uxth	r3, r3
 800793c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007954:	833b      	strh	r3, [r7, #24]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	8b3b      	ldrh	r3, [r7, #24]
 8007962:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007966:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007972:	b29b      	uxth	r3, r3
 8007974:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798c:	82fb      	strh	r3, [r7, #22]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	441a      	add	r2, r3
 8007998:	8afb      	ldrh	r3, [r7, #22]
 800799a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800799e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c4:	82bb      	strh	r3, [r7, #20]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	441a      	add	r2, r3
 80079d0:	8abb      	ldrh	r3, [r7, #20]
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
 80079e6:	e0a3      	b.n	8007b30 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80079f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80079f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01b      	beq.n	8007a38 <USB_DeactivateEndpoint+0x2d4>
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a16:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	441a      	add	r2, r3
 8007a22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01b      	beq.n	8007a88 <USB_DeactivateEndpoint+0x324>
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	853b      	strh	r3, [r7, #40]	; 0x28
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	441a      	add	r2, r3
 8007a72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	441a      	add	r2, r3
 8007ae2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3734      	adds	r7, #52	; 0x34
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b0c4      	sub	sp, #272	; 0x110
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	1d3b      	adds	r3, r7, #4
 8007b44:	6018      	str	r0, [r3, #0]
 8007b46:	463b      	mov	r3, r7
 8007b48:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b4a:	463b      	mov	r3, r7
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 8557 	bne.w	8008604 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007b56:	463b      	mov	r3, r7
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699a      	ldr	r2, [r3, #24]
 8007b5c:	463b      	mov	r3, r7
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d905      	bls.n	8007b72 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007b66:	463b      	mov	r3, r7
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b70:	e004      	b.n	8007b7c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007b72:	463b      	mov	r3, r7
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	7b1b      	ldrb	r3, [r3, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d12c      	bne.n	8007be0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007b86:	463b      	mov	r3, r7
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6959      	ldr	r1, [r3, #20]
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	88da      	ldrh	r2, [r3, #6]
 8007b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	1d38      	adds	r0, r7, #4
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	f001 fa2c 	bl	8008ff8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ba0:	1d3b      	adds	r3, r7, #4
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	1d3b      	adds	r3, r7, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	463b      	mov	r3, r7
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	011a      	lsls	r2, r3, #4
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007bc8:	f107 0310 	add.w	r3, r7, #16
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f107 0310 	add.w	r3, r7, #16
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	f000 bcdd 	b.w	800859a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007be0:	463b      	mov	r3, r7
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	f040 8347 	bne.w	800827a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007bec:	463b      	mov	r3, r7
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6a1a      	ldr	r2, [r3, #32]
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	f240 82eb 	bls.w	80081d4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007bfe:	1d3b      	adds	r3, r7, #4
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	463b      	mov	r3, r7
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	463b      	mov	r3, r7
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	441a      	add	r2, r3
 8007c2a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007c42:	463b      	mov	r3, r7
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6a1a      	ldr	r2, [r3, #32]
 8007c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c4c:	1ad2      	subs	r2, r2, r3
 8007c4e:	463b      	mov	r3, r7
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c54:	1d3b      	adds	r3, r7, #4
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	463b      	mov	r3, r7
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 8159 	beq.w	8007f22 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c70:	1d3b      	adds	r3, r7, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
 8007c76:	463b      	mov	r3, r7
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	785b      	ldrb	r3, [r3, #1]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d164      	bne.n	8007d4a <USB_EPStartXfer+0x20e>
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c86:	1d3b      	adds	r3, r7, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	4413      	add	r3, r2
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c98:	463b      	mov	r3, r7
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	011a      	lsls	r2, r3, #4
 8007ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d112      	bne.n	8007cd8 <USB_EPStartXfer+0x19c>
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	801a      	strh	r2, [r3, #0]
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ccc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	801a      	strh	r2, [r3, #0]
 8007cd6:	e054      	b.n	8007d82 <USB_EPStartXfer+0x246>
 8007cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8007cde:	d817      	bhi.n	8007d10 <USB_EPStartXfer+0x1d4>
 8007ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <USB_EPStartXfer+0x1c4>
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	029b      	lsls	r3, r3, #10
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e038      	b.n	8007d82 <USB_EPStartXfer+0x246>
 8007d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d104      	bne.n	8007d30 <USB_EPStartXfer+0x1f4>
 8007d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	029b      	lsls	r3, r3, #10
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e01b      	b.n	8007d82 <USB_EPStartXfer+0x246>
 8007d4a:	463b      	mov	r3, r7
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d116      	bne.n	8007d82 <USB_EPStartXfer+0x246>
 8007d54:	1d3b      	adds	r3, r7, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	4413      	add	r3, r2
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
 8007d66:	463b      	mov	r3, r7
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	011a      	lsls	r2, r3, #4
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d70:	4413      	add	r3, r2
 8007d72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d76:	633b      	str	r3, [r7, #48]	; 0x30
 8007d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007d82:	463b      	mov	r3, r7
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	895b      	ldrh	r3, [r3, #10]
 8007d88:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6959      	ldr	r1, [r3, #20]
 8007d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007d9c:	1d38      	adds	r0, r7, #4
 8007d9e:	6800      	ldr	r0, [r0, #0]
 8007da0:	f001 f92a 	bl	8008ff8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007da4:	463b      	mov	r3, r7
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695a      	ldr	r2, [r3, #20]
 8007daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dae:	441a      	add	r2, r3
 8007db0:	463b      	mov	r3, r7
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007db6:	463b      	mov	r3, r7
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6a1a      	ldr	r2, [r3, #32]
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d909      	bls.n	8007dda <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007dc6:	463b      	mov	r3, r7
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6a1a      	ldr	r2, [r3, #32]
 8007dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dd0:	1ad2      	subs	r2, r2, r3
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	621a      	str	r2, [r3, #32]
 8007dd8:	e008      	b.n	8007dec <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8007dda:	463b      	mov	r3, r7
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007de4:	463b      	mov	r3, r7
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2200      	movs	r2, #0
 8007dea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dec:	463b      	mov	r3, r7
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	785b      	ldrb	r3, [r3, #1]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d164      	bne.n	8007ec0 <USB_EPStartXfer+0x384>
 8007df6:	1d3b      	adds	r3, r7, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	1d3b      	adds	r3, r7, #4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	461a      	mov	r2, r3
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	463b      	mov	r3, r7
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	011a      	lsls	r2, r3, #4
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d112      	bne.n	8007e4e <USB_EPStartXfer+0x312>
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	881b      	ldrh	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	e057      	b.n	8007efe <USB_EPStartXfer+0x3c2>
 8007e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e52:	2b3e      	cmp	r3, #62	; 0x3e
 8007e54:	d817      	bhi.n	8007e86 <USB_EPStartXfer+0x34a>
 8007e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e64:	f003 0301 	and.w	r3, r3, #1
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d004      	beq.n	8007e76 <USB_EPStartXfer+0x33a>
 8007e6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e70:	3301      	adds	r3, #1
 8007e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	029b      	lsls	r3, r3, #10
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e03b      	b.n	8007efe <USB_EPStartXfer+0x3c2>
 8007e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <USB_EPStartXfer+0x36a>
 8007e9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ea6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	029b      	lsls	r3, r3, #10
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	801a      	strh	r2, [r3, #0]
 8007ebe:	e01e      	b.n	8007efe <USB_EPStartXfer+0x3c2>
 8007ec0:	463b      	mov	r3, r7
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d119      	bne.n	8007efe <USB_EPStartXfer+0x3c2>
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed0:	1d3b      	adds	r3, r7, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	4413      	add	r3, r2
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	011a      	lsls	r2, r3, #4
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	4413      	add	r3, r2
 8007eee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef2:	623b      	str	r3, [r7, #32]
 8007ef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007efe:	463b      	mov	r3, r7
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	891b      	ldrh	r3, [r3, #8]
 8007f04:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f08:	463b      	mov	r3, r7
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6959      	ldr	r1, [r3, #20]
 8007f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f18:	1d38      	adds	r0, r7, #4
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	f001 f86c 	bl	8008ff8 <USB_WritePMA>
 8007f20:	e33b      	b.n	800859a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007f22:	463b      	mov	r3, r7
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d164      	bne.n	8007ff6 <USB_EPStartXfer+0x4ba>
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f32:	1d3b      	adds	r3, r7, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	4413      	add	r3, r2
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	011a      	lsls	r2, r3, #4
 8007f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4e:	4413      	add	r3, r2
 8007f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d112      	bne.n	8007f84 <USB_EPStartXfer+0x448>
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f6c:	801a      	strh	r2, [r3, #0]
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f80:	801a      	strh	r2, [r3, #0]
 8007f82:	e057      	b.n	8008034 <USB_EPStartXfer+0x4f8>
 8007f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f88:	2b3e      	cmp	r3, #62	; 0x3e
 8007f8a:	d817      	bhi.n	8007fbc <USB_EPStartXfer+0x480>
 8007f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <USB_EPStartXfer+0x470>
 8007fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e03b      	b.n	8008034 <USB_EPStartXfer+0x4f8>
 8007fbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fc0:	095b      	lsrs	r3, r3, #5
 8007fc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d104      	bne.n	8007fdc <USB_EPStartXfer+0x4a0>
 8007fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff2:	801a      	strh	r2, [r3, #0]
 8007ff4:	e01e      	b.n	8008034 <USB_EPStartXfer+0x4f8>
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d119      	bne.n	8008034 <USB_EPStartXfer+0x4f8>
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	657b      	str	r3, [r7, #84]	; 0x54
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008014:	4413      	add	r3, r2
 8008016:	657b      	str	r3, [r7, #84]	; 0x54
 8008018:	463b      	mov	r3, r7
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	011a      	lsls	r2, r3, #4
 8008020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008022:	4413      	add	r3, r2
 8008024:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008028:	653b      	str	r3, [r7, #80]	; 0x50
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802e:	b29a      	uxth	r2, r3
 8008030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008032:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008034:	463b      	mov	r3, r7
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	891b      	ldrh	r3, [r3, #8]
 800803a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800803e:	463b      	mov	r3, r7
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6959      	ldr	r1, [r3, #20]
 8008044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008048:	b29b      	uxth	r3, r3
 800804a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800804e:	1d38      	adds	r0, r7, #4
 8008050:	6800      	ldr	r0, [r0, #0]
 8008052:	f000 ffd1 	bl	8008ff8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008056:	463b      	mov	r3, r7
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	695a      	ldr	r2, [r3, #20]
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008060:	441a      	add	r2, r3
 8008062:	463b      	mov	r3, r7
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008068:	463b      	mov	r3, r7
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	463b      	mov	r3, r7
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	429a      	cmp	r2, r3
 8008076:	d909      	bls.n	800808c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008078:	463b      	mov	r3, r7
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a1a      	ldr	r2, [r3, #32]
 800807e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008082:	1ad2      	subs	r2, r2, r3
 8008084:	463b      	mov	r3, r7
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	621a      	str	r2, [r3, #32]
 800808a:	e008      	b.n	800809e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800808c:	463b      	mov	r3, r7
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008096:	463b      	mov	r3, r7
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800809e:	1d3b      	adds	r3, r7, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	647b      	str	r3, [r7, #68]	; 0x44
 80080a4:	463b      	mov	r3, r7
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d164      	bne.n	8008178 <USB_EPStartXfer+0x63c>
 80080ae:	1d3b      	adds	r3, r7, #4
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b4:	1d3b      	adds	r3, r7, #4
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080bc:	b29b      	uxth	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	4413      	add	r3, r2
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c6:	463b      	mov	r3, r7
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	011a      	lsls	r2, r3, #4
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80080d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d112      	bne.n	8008106 <USB_EPStartXfer+0x5ca>
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	881b      	ldrh	r3, [r3, #0]
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080fe:	b29a      	uxth	r2, r3
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	801a      	strh	r2, [r3, #0]
 8008104:	e054      	b.n	80081b0 <USB_EPStartXfer+0x674>
 8008106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800810a:	2b3e      	cmp	r3, #62	; 0x3e
 800810c:	d817      	bhi.n	800813e <USB_EPStartXfer+0x602>
 800810e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d004      	beq.n	800812e <USB_EPStartXfer+0x5f2>
 8008124:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008128:	3301      	adds	r3, #1
 800812a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800812e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008132:	b29b      	uxth	r3, r3
 8008134:	029b      	lsls	r3, r3, #10
 8008136:	b29a      	uxth	r2, r3
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e038      	b.n	80081b0 <USB_EPStartXfer+0x674>
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <USB_EPStartXfer+0x622>
 8008154:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008158:	3b01      	subs	r3, #1
 800815a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800815e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008162:	b29b      	uxth	r3, r3
 8008164:	029b      	lsls	r3, r3, #10
 8008166:	b29b      	uxth	r3, r3
 8008168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800816c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008170:	b29a      	uxth	r2, r3
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	e01b      	b.n	80081b0 <USB_EPStartXfer+0x674>
 8008178:	463b      	mov	r3, r7
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d116      	bne.n	80081b0 <USB_EPStartXfer+0x674>
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008190:	4413      	add	r3, r2
 8008192:	647b      	str	r3, [r7, #68]	; 0x44
 8008194:	463b      	mov	r3, r7
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	011a      	lsls	r2, r3, #4
 800819c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800819e:	4413      	add	r3, r2
 80081a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081a4:	643b      	str	r3, [r7, #64]	; 0x40
 80081a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	895b      	ldrh	r3, [r3, #10]
 80081b6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081ba:	463b      	mov	r3, r7
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6959      	ldr	r1, [r3, #20]
 80081c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80081ca:	1d38      	adds	r0, r7, #4
 80081cc:	6800      	ldr	r0, [r0, #0]
 80081ce:	f000 ff13 	bl	8008ff8 <USB_WritePMA>
 80081d2:	e1e2      	b.n	800859a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80081d4:	463b      	mov	r3, r7
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80081de:	1d3b      	adds	r3, r7, #4
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	463b      	mov	r3, r7
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80081f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80081fc:	1d3b      	adds	r3, r7, #4
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	463b      	mov	r3, r7
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	441a      	add	r2, r3
 800820a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800820e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800821e:	b29b      	uxth	r3, r3
 8008220:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008222:	1d3b      	adds	r3, r7, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	663b      	str	r3, [r7, #96]	; 0x60
 8008228:	1d3b      	adds	r3, r7, #4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008230:	b29b      	uxth	r3, r3
 8008232:	461a      	mov	r2, r3
 8008234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008236:	4413      	add	r3, r2
 8008238:	663b      	str	r3, [r7, #96]	; 0x60
 800823a:	463b      	mov	r3, r7
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	011a      	lsls	r2, r3, #4
 8008242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008244:	4413      	add	r3, r2
 8008246:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800824a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800824c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008250:	b29a      	uxth	r2, r3
 8008252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008254:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008256:	463b      	mov	r3, r7
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	891b      	ldrh	r3, [r3, #8]
 800825c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008260:	463b      	mov	r3, r7
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6959      	ldr	r1, [r3, #20]
 8008266:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800826a:	b29b      	uxth	r3, r3
 800826c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008270:	1d38      	adds	r0, r7, #4
 8008272:	6800      	ldr	r0, [r0, #0]
 8008274:	f000 fec0 	bl	8008ff8 <USB_WritePMA>
 8008278:	e18f      	b.n	800859a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800827a:	1d3b      	adds	r3, r7, #4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 808f 	beq.w	80083b4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008296:	1d3b      	adds	r3, r7, #4
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	67bb      	str	r3, [r7, #120]	; 0x78
 800829c:	463b      	mov	r3, r7
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d164      	bne.n	8008370 <USB_EPStartXfer+0x834>
 80082a6:	1d3b      	adds	r3, r7, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	673b      	str	r3, [r7, #112]	; 0x70
 80082ac:	1d3b      	adds	r3, r7, #4
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	461a      	mov	r2, r3
 80082b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ba:	4413      	add	r3, r2
 80082bc:	673b      	str	r3, [r7, #112]	; 0x70
 80082be:	463b      	mov	r3, r7
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	011a      	lsls	r2, r3, #4
 80082c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c8:	4413      	add	r3, r2
 80082ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d112      	bne.n	80082fe <USB_EPStartXfer+0x7c2>
 80082d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e6:	801a      	strh	r2, [r3, #0]
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	e054      	b.n	80083a8 <USB_EPStartXfer+0x86c>
 80082fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008302:	2b3e      	cmp	r3, #62	; 0x3e
 8008304:	d817      	bhi.n	8008336 <USB_EPStartXfer+0x7fa>
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d004      	beq.n	8008326 <USB_EPStartXfer+0x7ea>
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008320:	3301      	adds	r3, #1
 8008322:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832a:	b29b      	uxth	r3, r3
 800832c:	029b      	lsls	r3, r3, #10
 800832e:	b29a      	uxth	r2, r3
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e038      	b.n	80083a8 <USB_EPStartXfer+0x86c>
 8008336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800833a:	095b      	lsrs	r3, r3, #5
 800833c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2b00      	cmp	r3, #0
 800834a:	d104      	bne.n	8008356 <USB_EPStartXfer+0x81a>
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008350:	3b01      	subs	r3, #1
 8008352:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835a:	b29b      	uxth	r3, r3
 800835c:	029b      	lsls	r3, r3, #10
 800835e:	b29b      	uxth	r3, r3
 8008360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008368:	b29a      	uxth	r2, r3
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	801a      	strh	r2, [r3, #0]
 800836e:	e01b      	b.n	80083a8 <USB_EPStartXfer+0x86c>
 8008370:	463b      	mov	r3, r7
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d116      	bne.n	80083a8 <USB_EPStartXfer+0x86c>
 800837a:	1d3b      	adds	r3, r7, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008382:	b29b      	uxth	r3, r3
 8008384:	461a      	mov	r2, r3
 8008386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008388:	4413      	add	r3, r2
 800838a:	67bb      	str	r3, [r7, #120]	; 0x78
 800838c:	463b      	mov	r3, r7
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	011a      	lsls	r2, r3, #4
 8008394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008396:	4413      	add	r3, r2
 8008398:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800839c:	677b      	str	r3, [r7, #116]	; 0x74
 800839e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80083a8:	463b      	mov	r3, r7
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	895b      	ldrh	r3, [r3, #10]
 80083ae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80083b2:	e097      	b.n	80084e4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80083b4:	463b      	mov	r3, r7
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d168      	bne.n	8008490 <USB_EPStartXfer+0x954>
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083c6:	1d3b      	adds	r3, r7, #4
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083d6:	4413      	add	r3, r2
 80083d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083dc:	463b      	mov	r3, r7
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	011a      	lsls	r2, r3, #4
 80083e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80083e8:	4413      	add	r3, r2
 80083ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d112      	bne.n	800841e <USB_EPStartXfer+0x8e2>
 80083f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008402:	b29a      	uxth	r2, r3
 8008404:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29b      	uxth	r3, r3
 800840e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008416:	b29a      	uxth	r2, r3
 8008418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800841a:	801a      	strh	r2, [r3, #0]
 800841c:	e05d      	b.n	80084da <USB_EPStartXfer+0x99e>
 800841e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008422:	2b3e      	cmp	r3, #62	; 0x3e
 8008424:	d817      	bhi.n	8008456 <USB_EPStartXfer+0x91a>
 8008426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <USB_EPStartXfer+0x90a>
 800843c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008440:	3301      	adds	r3, #1
 8008442:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008446:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800844a:	b29b      	uxth	r3, r3
 800844c:	029b      	lsls	r3, r3, #10
 800844e:	b29a      	uxth	r2, r3
 8008450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e041      	b.n	80084da <USB_EPStartXfer+0x99e>
 8008456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <USB_EPStartXfer+0x93a>
 800846c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008470:	3b01      	subs	r3, #1
 8008472:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008476:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800847a:	b29b      	uxth	r3, r3
 800847c:	029b      	lsls	r3, r3, #10
 800847e:	b29b      	uxth	r3, r3
 8008480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008488:	b29a      	uxth	r2, r3
 800848a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800848c:	801a      	strh	r2, [r3, #0]
 800848e:	e024      	b.n	80084da <USB_EPStartXfer+0x99e>
 8008490:	463b      	mov	r3, r7
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d11f      	bne.n	80084da <USB_EPStartXfer+0x99e>
 800849a:	1d3b      	adds	r3, r7, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	461a      	mov	r2, r3
 80084ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b2:	4413      	add	r3, r2
 80084b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084b8:	463b      	mov	r3, r7
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	011a      	lsls	r2, r3, #4
 80084c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084c4:	4413      	add	r3, r2
 80084c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80084da:	463b      	mov	r3, r7
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	891b      	ldrh	r3, [r3, #8]
 80084e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084e4:	463b      	mov	r3, r7
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6959      	ldr	r1, [r3, #20]
 80084ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80084f4:	1d38      	adds	r0, r7, #4
 80084f6:	6800      	ldr	r0, [r0, #0]
 80084f8:	f000 fd7e 	bl	8008ff8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80084fc:	463b      	mov	r3, r7
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d122      	bne.n	800854c <USB_EPStartXfer+0xa10>
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	463b      	mov	r3, r7
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008524:	1d3b      	adds	r3, r7, #4
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	463b      	mov	r3, r7
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	441a      	add	r2, r3
 8008532:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008542:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008546:	b29b      	uxth	r3, r3
 8008548:	8013      	strh	r3, [r2, #0]
 800854a:	e026      	b.n	800859a <USB_EPStartXfer+0xa5e>
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d121      	bne.n	800859a <USB_EPStartXfer+0xa5e>
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	463b      	mov	r3, r7
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800856c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008570:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008574:	1d3b      	adds	r3, r7, #4
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	463b      	mov	r3, r7
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008596:	b29b      	uxth	r3, r3
 8008598:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800859a:	1d3b      	adds	r3, r7, #4
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	463b      	mov	r3, r7
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	881b      	ldrh	r3, [r3, #0]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	f107 020e 	add.w	r2, r7, #14
 80085b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b8:	8013      	strh	r3, [r2, #0]
 80085ba:	f107 030e 	add.w	r3, r7, #14
 80085be:	f107 020e 	add.w	r2, r7, #14
 80085c2:	8812      	ldrh	r2, [r2, #0]
 80085c4:	f082 0210 	eor.w	r2, r2, #16
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	f107 030e 	add.w	r3, r7, #14
 80085ce:	f107 020e 	add.w	r2, r7, #14
 80085d2:	8812      	ldrh	r2, [r2, #0]
 80085d4:	f082 0220 	eor.w	r2, r2, #32
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	1d3b      	adds	r3, r7, #4
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	463b      	mov	r3, r7
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	441a      	add	r2, r3
 80085e8:	f107 030e 	add.w	r3, r7, #14
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]
 8008602:	e3b5      	b.n	8008d70 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008604:	463b      	mov	r3, r7
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	7b1b      	ldrb	r3, [r3, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	f040 8090 	bne.w	8008730 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008610:	463b      	mov	r3, r7
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699a      	ldr	r2, [r3, #24]
 8008616:	463b      	mov	r3, r7
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	429a      	cmp	r2, r3
 800861e:	d90e      	bls.n	800863e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8008620:	463b      	mov	r3, r7
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800862a:	463b      	mov	r3, r7
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	699a      	ldr	r2, [r3, #24]
 8008630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	463b      	mov	r3, r7
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	619a      	str	r2, [r3, #24]
 800863c:	e008      	b.n	8008650 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800863e:	463b      	mov	r3, r7
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008648:	463b      	mov	r3, r7
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2200      	movs	r2, #0
 800864e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008650:	1d3b      	adds	r3, r7, #4
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008658:	1d3b      	adds	r3, r7, #4
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008660:	b29b      	uxth	r3, r3
 8008662:	461a      	mov	r2, r3
 8008664:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008668:	4413      	add	r3, r2
 800866a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800866e:	463b      	mov	r3, r7
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	011a      	lsls	r2, r3, #4
 8008676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800867a:	4413      	add	r3, r2
 800867c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d116      	bne.n	80086ba <USB_EPStartXfer+0xb7e>
 800868c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008698:	b29a      	uxth	r2, r3
 800869a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086a4:	881b      	ldrh	r3, [r3, #0]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e32c      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
 80086ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086be:	2b3e      	cmp	r3, #62	; 0x3e
 80086c0:	d818      	bhi.n	80086f4 <USB_EPStartXfer+0xbb8>
 80086c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <USB_EPStartXfer+0xba6>
 80086d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	029b      	lsls	r3, r3, #10
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	e30f      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
 80086f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80086fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <USB_EPStartXfer+0xbd8>
 800870a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800870e:	3b01      	subs	r3, #1
 8008710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008718:	b29b      	uxth	r3, r3
 800871a:	029b      	lsls	r3, r3, #10
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008726:	b29a      	uxth	r2, r3
 8008728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	e2f1      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008730:	463b      	mov	r3, r7
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	78db      	ldrb	r3, [r3, #3]
 8008736:	2b02      	cmp	r3, #2
 8008738:	f040 818f 	bne.w	8008a5a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800873c:	463b      	mov	r3, r7
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d175      	bne.n	8008832 <USB_EPStartXfer+0xcf6>
 8008746:	1d3b      	adds	r3, r7, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008756:	b29b      	uxth	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800875e:	4413      	add	r3, r2
 8008760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008764:	463b      	mov	r3, r7
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	011a      	lsls	r2, r3, #4
 800876c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008770:	4413      	add	r3, r2
 8008772:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008776:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800877a:	463b      	mov	r3, r7
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d116      	bne.n	80087b2 <USB_EPStartXfer+0xc76>
 8008784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	b29b      	uxth	r3, r3
 800878c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008790:	b29a      	uxth	r2, r3
 8008792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008796:	801a      	strh	r2, [r3, #0]
 8008798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ae:	801a      	strh	r2, [r3, #0]
 80087b0:	e065      	b.n	800887e <USB_EPStartXfer+0xd42>
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b3e      	cmp	r3, #62	; 0x3e
 80087ba:	d81a      	bhi.n	80087f2 <USB_EPStartXfer+0xcb6>
 80087bc:	463b      	mov	r3, r7
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087c8:	463b      	mov	r3, r7
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d004      	beq.n	80087e0 <USB_EPStartXfer+0xca4>
 80087d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087da:	3301      	adds	r3, #1
 80087dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	029b      	lsls	r3, r3, #10
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ee:	801a      	strh	r2, [r3, #0]
 80087f0:	e045      	b.n	800887e <USB_EPStartXfer+0xd42>
 80087f2:	463b      	mov	r3, r7
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	095b      	lsrs	r3, r3, #5
 80087fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087fe:	463b      	mov	r3, r7
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f003 031f 	and.w	r3, r3, #31
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <USB_EPStartXfer+0xcda>
 800880c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008810:	3b01      	subs	r3, #1
 8008812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800881a:	b29b      	uxth	r3, r3
 800881c:	029b      	lsls	r3, r3, #10
 800881e:	b29b      	uxth	r3, r3
 8008820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008828:	b29a      	uxth	r2, r3
 800882a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800882e:	801a      	strh	r2, [r3, #0]
 8008830:	e025      	b.n	800887e <USB_EPStartXfer+0xd42>
 8008832:	463b      	mov	r3, r7
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d120      	bne.n	800887e <USB_EPStartXfer+0xd42>
 800883c:	1d3b      	adds	r3, r7, #4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008844:	1d3b      	adds	r3, r7, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800884c:	b29b      	uxth	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008854:	4413      	add	r3, r2
 8008856:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800885a:	463b      	mov	r3, r7
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	011a      	lsls	r2, r3, #4
 8008862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008866:	4413      	add	r3, r2
 8008868:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800886c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008870:	463b      	mov	r3, r7
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800887c:	801a      	strh	r2, [r3, #0]
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008886:	463b      	mov	r3, r7
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d175      	bne.n	800897c <USB_EPStartXfer+0xe40>
 8008890:	1d3b      	adds	r3, r7, #4
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008898:	1d3b      	adds	r3, r7, #4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088a8:	4413      	add	r3, r2
 80088aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ae:	463b      	mov	r3, r7
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	011a      	lsls	r2, r3, #4
 80088b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088ba:	4413      	add	r3, r2
 80088bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088c4:	463b      	mov	r3, r7
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d116      	bne.n	80088fc <USB_EPStartXfer+0xdc0>
 80088ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088da:	b29a      	uxth	r2, r3
 80088dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e0:	801a      	strh	r2, [r3, #0]
 80088e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e061      	b.n	80089c0 <USB_EPStartXfer+0xe84>
 80088fc:	463b      	mov	r3, r7
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b3e      	cmp	r3, #62	; 0x3e
 8008904:	d81a      	bhi.n	800893c <USB_EPStartXfer+0xe00>
 8008906:	463b      	mov	r3, r7
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008912:	463b      	mov	r3, r7
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d004      	beq.n	800892a <USB_EPStartXfer+0xdee>
 8008920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008924:	3301      	adds	r3, #1
 8008926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800892a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892e:	b29b      	uxth	r3, r3
 8008930:	029b      	lsls	r3, r3, #10
 8008932:	b29a      	uxth	r2, r3
 8008934:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008938:	801a      	strh	r2, [r3, #0]
 800893a:	e041      	b.n	80089c0 <USB_EPStartXfer+0xe84>
 800893c:	463b      	mov	r3, r7
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008948:	463b      	mov	r3, r7
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 031f 	and.w	r3, r3, #31
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <USB_EPStartXfer+0xe24>
 8008956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800895a:	3b01      	subs	r3, #1
 800895c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008964:	b29b      	uxth	r3, r3
 8008966:	029b      	lsls	r3, r3, #10
 8008968:	b29b      	uxth	r3, r3
 800896a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008972:	b29a      	uxth	r2, r3
 8008974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008978:	801a      	strh	r2, [r3, #0]
 800897a:	e021      	b.n	80089c0 <USB_EPStartXfer+0xe84>
 800897c:	463b      	mov	r3, r7
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	785b      	ldrb	r3, [r3, #1]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d11c      	bne.n	80089c0 <USB_EPStartXfer+0xe84>
 8008986:	1d3b      	adds	r3, r7, #4
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800898e:	b29b      	uxth	r3, r3
 8008990:	461a      	mov	r2, r3
 8008992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008996:	4413      	add	r3, r2
 8008998:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800899c:	463b      	mov	r3, r7
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	011a      	lsls	r2, r3, #4
 80089a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089a8:	4413      	add	r3, r2
 80089aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089b2:	463b      	mov	r3, r7
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80089c0:	463b      	mov	r3, r7
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 81a4 	beq.w	8008d14 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	463b      	mov	r3, r7
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80089e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d005      	beq.n	80089f8 <USB_EPStartXfer+0xebc>
 80089ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10d      	bne.n	8008a14 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089f8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80089fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 8187 	bne.w	8008d14 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008a06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 8180 	bne.w	8008d14 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008a14:	1d3b      	adds	r3, r7, #4
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	463b      	mov	r3, r7
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	463b      	mov	r3, r7
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	441a      	add	r2, r3
 8008a40:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	8013      	strh	r3, [r2, #0]
 8008a58:	e15c      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a5a:	463b      	mov	r3, r7
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	78db      	ldrb	r3, [r3, #3]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	f040 8155 	bne.w	8008d10 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	463b      	mov	r3, r7
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d90e      	bls.n	8008a94 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008a76:	463b      	mov	r3, r7
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008a80:	463b      	mov	r3, r7
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008a8a:	1ad2      	subs	r2, r2, r3
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	619a      	str	r2, [r3, #24]
 8008a92:	e008      	b.n	8008aa6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008a94:	463b      	mov	r3, r7
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	785b      	ldrb	r3, [r3, #1]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d16f      	bne.n	8008b90 <USB_EPStartXfer+0x1054>
 8008ab0:	1d3b      	adds	r3, r7, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ab8:	1d3b      	adds	r3, r7, #4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ac8:	4413      	add	r3, r2
 8008aca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ace:	463b      	mov	r3, r7
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	011a      	lsls	r2, r3, #4
 8008ad6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ada:	4413      	add	r3, r2
 8008adc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d116      	bne.n	8008b1a <USB_EPStartXfer+0xfde>
 8008aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b16:	801a      	strh	r2, [r3, #0]
 8008b18:	e05f      	b.n	8008bda <USB_EPStartXfer+0x109e>
 8008b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b20:	d818      	bhi.n	8008b54 <USB_EPStartXfer+0x1018>
 8008b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b26:	085b      	lsrs	r3, r3, #1
 8008b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <USB_EPStartXfer+0x1006>
 8008b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	029b      	lsls	r3, r3, #10
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b50:	801a      	strh	r2, [r3, #0]
 8008b52:	e042      	b.n	8008bda <USB_EPStartXfer+0x109e>
 8008b54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b58:	095b      	lsrs	r3, r3, #5
 8008b5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008b62:	f003 031f 	and.w	r3, r3, #31
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <USB_EPStartXfer+0x1038>
 8008b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	029b      	lsls	r3, r3, #10
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	e024      	b.n	8008bda <USB_EPStartXfer+0x109e>
 8008b90:	463b      	mov	r3, r7
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	785b      	ldrb	r3, [r3, #1]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d11f      	bne.n	8008bda <USB_EPStartXfer+0x109e>
 8008b9a:	1d3b      	adds	r3, r7, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ba2:	1d3b      	adds	r3, r7, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bb8:	463b      	mov	r3, r7
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	011a      	lsls	r2, r3, #4
 8008bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008be2:	463b      	mov	r3, r7
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d16f      	bne.n	8008ccc <USB_EPStartXfer+0x1190>
 8008bec:	1d3b      	adds	r3, r7, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bf4:	1d3b      	adds	r3, r7, #4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c04:	4413      	add	r3, r2
 8008c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c0a:	463b      	mov	r3, r7
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	011a      	lsls	r2, r3, #4
 8008c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c16:	4413      	add	r3, r2
 8008c18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d116      	bne.n	8008c56 <USB_EPStartXfer+0x111a>
 8008c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	e05e      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
 8008c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c5c:	d818      	bhi.n	8008c90 <USB_EPStartXfer+0x1154>
 8008c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <USB_EPStartXfer+0x1142>
 8008c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	029b      	lsls	r3, r3, #10
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c8c:	801a      	strh	r2, [r3, #0]
 8008c8e:	e041      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
 8008c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <USB_EPStartXfer+0x1174>
 8008ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008caa:	3b01      	subs	r3, #1
 8008cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	029b      	lsls	r3, r3, #10
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	e023      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
 8008ccc:	463b      	mov	r3, r7
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	785b      	ldrb	r3, [r3, #1]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d11e      	bne.n	8008d14 <USB_EPStartXfer+0x11d8>
 8008cd6:	1d3b      	adds	r3, r7, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cec:	463b      	mov	r3, r7
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	011a      	lsls	r2, r3, #4
 8008cf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d0c:	801a      	strh	r2, [r3, #0]
 8008d0e:	e001      	b.n	8008d14 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e02e      	b.n	8008d72 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	463b      	mov	r3, r7
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d36:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d46:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8008d4a:	1d3b      	adds	r3, r7, #4
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	463b      	mov	r3, r7
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d020      	beq.n	8008dd0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	881b      	ldrh	r3, [r3, #0]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da4:	81bb      	strh	r3, [r7, #12]
 8008da6:	89bb      	ldrh	r3, [r7, #12]
 8008da8:	f083 0310 	eor.w	r3, r3, #16
 8008dac:	81bb      	strh	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	441a      	add	r2, r3
 8008db8:	89bb      	ldrh	r3, [r7, #12]
 8008dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	8013      	strh	r3, [r2, #0]
 8008dce:	e01f      	b.n	8008e10 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	81fb      	strh	r3, [r7, #14]
 8008de8:	89fb      	ldrh	r3, [r7, #14]
 8008dea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008dee:	81fb      	strh	r3, [r7, #14]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	441a      	add	r2, r3
 8008dfa:	89fb      	ldrh	r3, [r7, #14]
 8008dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bc80      	pop	{r7}
 8008e1a:	4770      	bx	lr

08008e1c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	7b1b      	ldrb	r3, [r3, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f040 809d 	bne.w	8008f6a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	785b      	ldrb	r3, [r3, #1]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d04c      	beq.n	8008ed2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4413      	add	r3, r2
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	823b      	strh	r3, [r7, #16]
 8008e46:	8a3b      	ldrh	r3, [r7, #16]
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01b      	beq.n	8008e88 <USB_EPClearStall+0x6c>
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	81fb      	strh	r3, [r7, #14]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	441a      	add	r2, r3
 8008e72:	89fb      	ldrh	r3, [r7, #14]
 8008e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	78db      	ldrb	r3, [r3, #3]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d06c      	beq.n	8008f6a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ea6:	81bb      	strh	r3, [r7, #12]
 8008ea8:	89bb      	ldrh	r3, [r7, #12]
 8008eaa:	f083 0320 	eor.w	r3, r3, #32
 8008eae:	81bb      	strh	r3, [r7, #12]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	441a      	add	r2, r3
 8008eba:	89bb      	ldrh	r3, [r7, #12]
 8008ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	8013      	strh	r3, [r2, #0]
 8008ed0:	e04b      	b.n	8008f6a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	82fb      	strh	r3, [r7, #22]
 8008ee0:	8afb      	ldrh	r3, [r7, #22]
 8008ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01b      	beq.n	8008f22 <USB_EPClearStall+0x106>
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4413      	add	r3, r2
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	82bb      	strh	r3, [r7, #20]
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	441a      	add	r2, r3
 8008f0c:	8abb      	ldrh	r3, [r7, #20]
 8008f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f38:	827b      	strh	r3, [r7, #18]
 8008f3a:	8a7b      	ldrh	r3, [r7, #18]
 8008f3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f40:	827b      	strh	r3, [r7, #18]
 8008f42:	8a7b      	ldrh	r3, [r7, #18]
 8008f44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f48:	827b      	strh	r3, [r7, #18]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	441a      	add	r2, r3
 8008f54:	8a7b      	ldrh	r3, [r7, #18]
 8008f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	371c      	adds	r7, #28
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr

08008f76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2280      	movs	r2, #128	; 0x80
 8008f8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr

08008f9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr

08008fb0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bc80      	pop	{r7}
 8008fe0:	4770      	bx	lr

08008fe2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008fe2:	b480      	push	{r7}
 8008fe4:	b083      	sub	sp, #12
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr

08008ff8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b08d      	sub	sp, #52	; 0x34
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4611      	mov	r1, r2
 8009004:	461a      	mov	r2, r3
 8009006:	460b      	mov	r3, r1
 8009008:	80fb      	strh	r3, [r7, #6]
 800900a:	4613      	mov	r3, r2
 800900c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800900e:	88bb      	ldrh	r3, [r7, #4]
 8009010:	3301      	adds	r3, #1
 8009012:	085b      	lsrs	r3, r3, #1
 8009014:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800901e:	88fb      	ldrh	r3, [r7, #6]
 8009020:	005a      	lsls	r2, r3, #1
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009030:	e01e      	b.n	8009070 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	3301      	adds	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	021b      	lsls	r3, r3, #8
 8009046:	b29b      	uxth	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	b29a      	uxth	r2, r3
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905a:	3302      	adds	r3, #2
 800905c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	3302      	adds	r3, #2
 8009062:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	3301      	adds	r3, #1
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	3b01      	subs	r3, #1
 800906e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1dd      	bne.n	8009032 <USB_WritePMA+0x3a>
  }
}
 8009076:	bf00      	nop
 8009078:	bf00      	nop
 800907a:	3734      	adds	r7, #52	; 0x34
 800907c:	46bd      	mov	sp, r7
 800907e:	bc80      	pop	{r7}
 8009080:	4770      	bx	lr

08009082 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009082:	b480      	push	{r7}
 8009084:	b08b      	sub	sp, #44	; 0x2c
 8009086:	af00      	add	r7, sp, #0
 8009088:	60f8      	str	r0, [r7, #12]
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	4611      	mov	r1, r2
 800908e:	461a      	mov	r2, r3
 8009090:	460b      	mov	r3, r1
 8009092:	80fb      	strh	r3, [r7, #6]
 8009094:	4613      	mov	r3, r2
 8009096:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009098:	88bb      	ldrh	r3, [r7, #4]
 800909a:	085b      	lsrs	r3, r3, #1
 800909c:	b29b      	uxth	r3, r3
 800909e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090a8:	88fb      	ldrh	r3, [r7, #6]
 80090aa:	005a      	lsls	r2, r3, #1
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090b4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ba:	e01b      	b.n	80090f4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	3302      	adds	r3, #2
 80090c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	3301      	adds	r3, #1
 80090d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	0a1b      	lsrs	r3, r3, #8
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3301      	adds	r3, #1
 80090e6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	3302      	adds	r3, #2
 80090ec:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	3b01      	subs	r3, #1
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
 80090f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e0      	bne.n	80090bc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80090fa:	88bb      	ldrh	r3, [r7, #4]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d007      	beq.n	8009116 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	b2da      	uxtb	r2, r3
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	701a      	strb	r2, [r3, #0]
  }
}
 8009116:	bf00      	nop
 8009118:	372c      	adds	r7, #44	; 0x2c
 800911a:	46bd      	mov	sp, r7
 800911c:	bc80      	pop	{r7}
 800911e:	4770      	bx	lr

08009120 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7c1b      	ldrb	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d115      	bne.n	8009164 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800913c:	2202      	movs	r2, #2
 800913e:	2181      	movs	r1, #129	; 0x81
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fe8a 	bl	800ae5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800914c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009150:	2202      	movs	r2, #2
 8009152:	2101      	movs	r1, #1
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 fe80 	bl	800ae5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009162:	e012      	b.n	800918a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009164:	2340      	movs	r3, #64	; 0x40
 8009166:	2202      	movs	r2, #2
 8009168:	2181      	movs	r1, #129	; 0x81
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fe75 	bl	800ae5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	2202      	movs	r2, #2
 800917a:	2101      	movs	r1, #1
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fe6c 	bl	800ae5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800918a:	2308      	movs	r3, #8
 800918c:	2203      	movs	r2, #3
 800918e:	2182      	movs	r1, #130	; 0x82
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 fe62 	bl	800ae5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800919c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091a0:	f001 ff82 	bl	800b0a8 <USBD_static_malloc>
 80091a4:	4602      	mov	r2, r0
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
 80091ba:	e026      	b.n	800920a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7c1b      	ldrb	r3, [r3, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091f0:	2101      	movs	r1, #1
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 ff22 	bl	800b03c <USBD_LL_PrepareReceive>
 80091f8:	e007      	b.n	800920a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009200:	2340      	movs	r3, #64	; 0x40
 8009202:	2101      	movs	r1, #1
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f001 ff19 	bl	800b03c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800920a:	7bfb      	ldrb	r3, [r7, #15]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009224:	2181      	movs	r1, #129	; 0x81
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fe3d 	bl	800aea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009232:	2101      	movs	r1, #1
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fe36 	bl	800aea6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009242:	2182      	movs	r1, #130	; 0x82
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fe2e 	bl	800aea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00e      	beq.n	8009278 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926a:	4618      	mov	r0, r3
 800926c:	f001 ff28 	bl	800b0c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009278:	7bfb      	ldrb	r3, [r7, #15]
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009292:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d039      	beq.n	8009320 <USBD_CDC_Setup+0x9e>
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	d17f      	bne.n	80093b0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	88db      	ldrh	r3, [r3, #6]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d029      	beq.n	800930c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b25b      	sxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	da11      	bge.n	80092e6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80092ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	88d2      	ldrh	r2, [r2, #6]
 80092d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092d6:	6939      	ldr	r1, [r7, #16]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	461a      	mov	r2, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f001 fa09 	bl	800a6f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80092e4:	e06b      	b.n	80093be <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	785a      	ldrb	r2, [r3, #1]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	88db      	ldrh	r3, [r3, #6]
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092fc:	6939      	ldr	r1, [r7, #16]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	88db      	ldrh	r3, [r3, #6]
 8009302:	461a      	mov	r2, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f001 fa24 	bl	800a752 <USBD_CtlPrepareRx>
      break;
 800930a:	e058      	b.n	80093be <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	7850      	ldrb	r0, [r2, #1]
 8009318:	2200      	movs	r2, #0
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	4798      	blx	r3
      break;
 800931e:	e04e      	b.n	80093be <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	2b0b      	cmp	r3, #11
 8009326:	d02e      	beq.n	8009386 <USBD_CDC_Setup+0x104>
 8009328:	2b0b      	cmp	r3, #11
 800932a:	dc38      	bgt.n	800939e <USBD_CDC_Setup+0x11c>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <USBD_CDC_Setup+0xb4>
 8009330:	2b0a      	cmp	r3, #10
 8009332:	d014      	beq.n	800935e <USBD_CDC_Setup+0xdc>
 8009334:	e033      	b.n	800939e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800933c:	2b03      	cmp	r3, #3
 800933e:	d107      	bne.n	8009350 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009340:	f107 030c 	add.w	r3, r7, #12
 8009344:	2202      	movs	r2, #2
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f001 f9d4 	bl	800a6f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800934e:	e02e      	b.n	80093ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f965 	bl	800a622 <USBD_CtlError>
            ret = USBD_FAIL;
 8009358:	2302      	movs	r3, #2
 800935a:	75fb      	strb	r3, [r7, #23]
          break;
 800935c:	e027      	b.n	80093ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	2b03      	cmp	r3, #3
 8009366:	d107      	bne.n	8009378 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009368:	f107 030f 	add.w	r3, r7, #15
 800936c:	2201      	movs	r2, #1
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f9c0 	bl	800a6f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009376:	e01a      	b.n	80093ae <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f951 	bl	800a622 <USBD_CtlError>
            ret = USBD_FAIL;
 8009380:	2302      	movs	r3, #2
 8009382:	75fb      	strb	r3, [r7, #23]
          break;
 8009384:	e013      	b.n	80093ae <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	2b03      	cmp	r3, #3
 800938e:	d00d      	beq.n	80093ac <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 f945 	bl	800a622 <USBD_CtlError>
            ret = USBD_FAIL;
 8009398:	2302      	movs	r3, #2
 800939a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800939c:	e006      	b.n	80093ac <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f93e 	bl	800a622 <USBD_CtlError>
          ret = USBD_FAIL;
 80093a6:	2302      	movs	r3, #2
 80093a8:	75fb      	strb	r3, [r7, #23]
          break;
 80093aa:	e000      	b.n	80093ae <USBD_CDC_Setup+0x12c>
          break;
 80093ac:	bf00      	nop
      }
      break;
 80093ae:	e006      	b.n	80093be <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 f935 	bl	800a622 <USBD_CtlError>
      ret = USBD_FAIL;
 80093b8:	2302      	movs	r3, #2
 80093ba:	75fb      	strb	r3, [r7, #23]
      break;
 80093bc:	bf00      	nop
  }

  return ret;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093da:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093e2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d03a      	beq.n	8009464 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	440b      	add	r3, r1
 80093fc:	331c      	adds	r3, #28
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d029      	beq.n	8009458 <USBD_CDC_DataIn+0x90>
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	331c      	adds	r3, #28
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	78f9      	ldrb	r1, [r7, #3]
 8009418:	68b8      	ldr	r0, [r7, #8]
 800941a:	460b      	mov	r3, r1
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	440b      	add	r3, r1
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	4403      	add	r3, r0
 8009424:	3338      	adds	r3, #56	; 0x38
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	fbb2 f1f3 	udiv	r1, r2, r3
 800942c:	fb03 f301 	mul.w	r3, r3, r1
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d110      	bne.n	8009458 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	6879      	ldr	r1, [r7, #4]
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	440b      	add	r3, r1
 8009444:	331c      	adds	r3, #28
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800944a:	78f9      	ldrb	r1, [r7, #3]
 800944c:	2300      	movs	r3, #0
 800944e:	2200      	movs	r2, #0
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fdd0 	bl	800aff6 <USBD_LL_Transmit>
 8009456:	e003      	b.n	8009460 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e000      	b.n	8009466 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009464:	2302      	movs	r3, #2
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
 8009476:	460b      	mov	r3, r1
 8009478:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009480:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fdfb 	bl	800b082 <USBD_LL_GetRxDataSize>
 800948c:	4602      	mov	r2, r0
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00d      	beq.n	80094ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094b2:	4611      	mov	r1, r2
 80094b4:	4798      	blx	r3

    return USBD_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	e000      	b.n	80094bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80094ba:	2302      	movs	r3, #2
  }
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d015      	beq.n	800950a <USBD_CDC_EP0_RxReady+0x46>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80094e4:	2bff      	cmp	r3, #255	; 0xff
 80094e6:	d010      	beq.n	800950a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80094f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80094fe:	b292      	uxth	r2, r2
 8009500:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	22ff      	movs	r2, #255	; 0xff
 8009506:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2243      	movs	r2, #67	; 0x43
 8009520:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009522:	4b03      	ldr	r3, [pc, #12]	; (8009530 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	bc80      	pop	{r7}
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	200000a8 	.word	0x200000a8

08009534 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2243      	movs	r2, #67	; 0x43
 8009540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009542:	4b03      	ldr	r3, [pc, #12]	; (8009550 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	20000064 	.word	0x20000064

08009554 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2243      	movs	r2, #67	; 0x43
 8009560:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009562:	4b03      	ldr	r3, [pc, #12]	; (8009570 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	bc80      	pop	{r7}
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	200000ec 	.word	0x200000ec

08009574 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	220a      	movs	r2, #10
 8009580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	; (8009590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20000020 	.word	0x20000020

08009594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800959e:	2302      	movs	r3, #2
 80095a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d005      	beq.n	80095b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr

080095c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr

080095f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b085      	sub	sp, #20
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009602:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	bc80      	pop	{r7}
 8009616:	4770      	bx	lr

08009618 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009626:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01c      	beq.n	800966c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009638:	2b00      	cmp	r3, #0
 800963a:	d115      	bne.n	8009668 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800965a:	b29b      	uxth	r3, r3
 800965c:	2181      	movs	r1, #129	; 0x81
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fcc9 	bl	800aff6 <USBD_LL_Transmit>

      return USBD_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e002      	b.n	800966e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800966c:	2302      	movs	r3, #2
  }
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	2b00      	cmp	r3, #0
 800968e:	d017      	beq.n	80096c0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7c1b      	ldrb	r3, [r3, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d109      	bne.n	80096ac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800969e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096a2:	2101      	movs	r1, #1
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fcc9 	bl	800b03c <USBD_LL_PrepareReceive>
 80096aa:	e007      	b.n	80096bc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	2101      	movs	r1, #1
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fcc0 	bl	800b03c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80096bc:	2300      	movs	r3, #0
 80096be:	e000      	b.n	80096c2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80096c0:	2302      	movs	r3, #2
  }
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096de:	2302      	movs	r3, #2
 80096e0:	e01a      	b.n	8009718 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	79fa      	ldrb	r2, [r7, #7]
 800970e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f001 fb2d 	bl	800ad70 <USBD_LL_Init>

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d006      	beq.n	8009742 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]
 8009740:	e001      	b.n	8009746 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009742:	2302      	movs	r3, #2
 8009744:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	bc80      	pop	{r7}
 8009750:	4770      	bx	lr

08009752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b082      	sub	sp, #8
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 fb62 	bl	800ae24 <USBD_LL_Start>

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009772:	2300      	movs	r3, #0
}
 8009774:	4618      	mov	r0, r3
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr

0800977e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800978a:	2302      	movs	r3, #2
 800978c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00c      	beq.n	80097b2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	4611      	mov	r1, r2
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	460b      	mov	r3, r1
 80097c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	4611      	mov	r1, r2
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	4798      	blx	r3

  return USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 fed8 	bl	800a5aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009808:	461a      	mov	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009816:	f003 031f 	and.w	r3, r3, #31
 800981a:	2b02      	cmp	r3, #2
 800981c:	d016      	beq.n	800984c <USBD_LL_SetupStage+0x6a>
 800981e:	2b02      	cmp	r3, #2
 8009820:	d81c      	bhi.n	800985c <USBD_LL_SetupStage+0x7a>
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <USBD_LL_SetupStage+0x4a>
 8009826:	2b01      	cmp	r3, #1
 8009828:	d008      	beq.n	800983c <USBD_LL_SetupStage+0x5a>
 800982a:	e017      	b.n	800985c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f9cb 	bl	8009bd0 <USBD_StdDevReq>
      break;
 800983a:	e01a      	b.n	8009872 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fa2d 	bl	8009ca4 <USBD_StdItfReq>
      break;
 800984a:	e012      	b.n	8009872 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa6d 	bl	8009d34 <USBD_StdEPReq>
      break;
 800985a:	e00a      	b.n	8009872 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009862:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fb3a 	bl	800aee4 <USBD_LL_StallEP>
      break;
 8009870:	bf00      	nop
  }

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3708      	adds	r7, #8
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	460b      	mov	r3, r1
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800988a:	7afb      	ldrb	r3, [r7, #11]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d14b      	bne.n	8009928 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009896:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d134      	bne.n	800990c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d919      	bls.n	80098e2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	68da      	ldr	r2, [r3, #12]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d203      	bcs.n	80098d0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	e002      	b.n	80098d6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 ff57 	bl	800a78e <USBD_CtlContinueRx>
 80098e0:	e038      	b.n	8009954 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00a      	beq.n	8009904 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d105      	bne.n	8009904 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 ff54 	bl	800a7b2 <USBD_CtlSendStatus>
 800990a:	e023      	b.n	8009954 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009912:	2b05      	cmp	r3, #5
 8009914:	d11e      	bne.n	8009954 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800991e:	2100      	movs	r1, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f001 fadf 	bl	800aee4 <USBD_LL_StallEP>
 8009926:	e015      	b.n	8009954 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d00d      	beq.n	8009950 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800993a:	2b03      	cmp	r3, #3
 800993c:	d108      	bne.n	8009950 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	7afa      	ldrb	r2, [r7, #11]
 8009948:	4611      	mov	r1, r2
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	4798      	blx	r3
 800994e:	e001      	b.n	8009954 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009950:	2302      	movs	r3, #2
 8009952:	e000      	b.n	8009956 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	460b      	mov	r3, r1
 8009968:	607a      	str	r2, [r7, #4]
 800996a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d17f      	bne.n	8009a72 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3314      	adds	r3, #20
 8009976:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800997e:	2b02      	cmp	r3, #2
 8009980:	d15c      	bne.n	8009a3c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	d915      	bls.n	80099ba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	1ad2      	subs	r2, r2, r3
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	461a      	mov	r2, r3
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fec1 	bl	800a72e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ac:	2300      	movs	r3, #0
 80099ae:	2200      	movs	r2, #0
 80099b0:	2100      	movs	r1, #0
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f001 fb42 	bl	800b03c <USBD_LL_PrepareReceive>
 80099b8:	e04e      	b.n	8009a58 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	6912      	ldr	r2, [r2, #16]
 80099c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c6:	fb02 f201 	mul.w	r2, r2, r1
 80099ca:	1a9b      	subs	r3, r3, r2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d11c      	bne.n	8009a0a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099d8:	429a      	cmp	r2, r3
 80099da:	d316      	bcc.n	8009a0a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d20f      	bcs.n	8009a0a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099ea:	2200      	movs	r2, #0
 80099ec:	2100      	movs	r1, #0
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 fe9d 	bl	800a72e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099fc:	2300      	movs	r3, #0
 80099fe:	2200      	movs	r2, #0
 8009a00:	2100      	movs	r1, #0
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f001 fb1a 	bl	800b03c <USBD_LL_PrepareReceive>
 8009a08:	e026      	b.n	8009a58 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	d105      	bne.n	8009a2c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f001 fa58 	bl	800aee4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 fecf 	bl	800a7d8 <USBD_CtlReceiveStatus>
 8009a3a:	e00d      	b.n	8009a58 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d004      	beq.n	8009a50 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d103      	bne.n	8009a58 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a50:	2180      	movs	r1, #128	; 0x80
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f001 fa46 	bl	800aee4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d11d      	bne.n	8009a9e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fe81 	bl	800976a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a70:	e015      	b.n	8009a9e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00d      	beq.n	8009a9a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d108      	bne.n	8009a9a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8e:	695b      	ldr	r3, [r3, #20]
 8009a90:	7afa      	ldrb	r2, [r7, #11]
 8009a92:	4611      	mov	r1, r2
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	4798      	blx	r3
 8009a98:	e001      	b.n	8009a9e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e000      	b.n	8009aa0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 f9cf 	bl	800ae5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2240      	movs	r2, #64	; 0x40
 8009ac8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	2200      	movs	r2, #0
 8009ad0:	2180      	movs	r1, #128	; 0x80
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f001 f9c1 	bl	800ae5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2240      	movs	r2, #64	; 0x40
 8009ae2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6852      	ldr	r2, [r2, #4]
 8009b18:	b2d2      	uxtb	r2, r2
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
  }

  return USBD_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	78fa      	ldrb	r2, [r7, #3]
 8009b3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bc80      	pop	{r7}
 8009b46:	4770      	bx	lr

08009b48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2204      	movs	r2, #4
 8009b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr

08009b70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7e:	2b04      	cmp	r3, #4
 8009b80:	d105      	bne.n	8009b8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr

08009b9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d10b      	bne.n	8009bc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	69db      	ldr	r3, [r3, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009be6:	2b40      	cmp	r3, #64	; 0x40
 8009be8:	d005      	beq.n	8009bf6 <USBD_StdDevReq+0x26>
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d84f      	bhi.n	8009c8e <USBD_StdDevReq+0xbe>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d009      	beq.n	8009c06 <USBD_StdDevReq+0x36>
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d14b      	bne.n	8009c8e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	4798      	blx	r3
      break;
 8009c04:	e048      	b.n	8009c98 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b09      	cmp	r3, #9
 8009c0c:	d839      	bhi.n	8009c82 <USBD_StdDevReq+0xb2>
 8009c0e:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <USBD_StdDevReq+0x44>)
 8009c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c14:	08009c65 	.word	0x08009c65
 8009c18:	08009c79 	.word	0x08009c79
 8009c1c:	08009c83 	.word	0x08009c83
 8009c20:	08009c6f 	.word	0x08009c6f
 8009c24:	08009c83 	.word	0x08009c83
 8009c28:	08009c47 	.word	0x08009c47
 8009c2c:	08009c3d 	.word	0x08009c3d
 8009c30:	08009c83 	.word	0x08009c83
 8009c34:	08009c5b 	.word	0x08009c5b
 8009c38:	08009c51 	.word	0x08009c51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f9dc 	bl	8009ffc <USBD_GetDescriptor>
          break;
 8009c44:	e022      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fb3f 	bl	800a2cc <USBD_SetAddress>
          break;
 8009c4e:	e01d      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fb7e 	bl	800a354 <USBD_SetConfig>
          break;
 8009c58:	e018      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fc07 	bl	800a470 <USBD_GetConfig>
          break;
 8009c62:	e013      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fc37 	bl	800a4da <USBD_GetStatus>
          break;
 8009c6c:	e00e      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc65 	bl	800a540 <USBD_SetFeature>
          break;
 8009c76:	e009      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fc74 	bl	800a568 <USBD_ClrFeature>
          break;
 8009c80:	e004      	b.n	8009c8c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fccc 	bl	800a622 <USBD_CtlError>
          break;
 8009c8a:	bf00      	nop
      }
      break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fcc6 	bl	800a622 <USBD_CtlError>
      break;
 8009c96:	bf00      	nop
  }

  return ret;
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop

08009ca4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cba:	2b40      	cmp	r3, #64	; 0x40
 8009cbc:	d005      	beq.n	8009cca <USBD_StdItfReq+0x26>
 8009cbe:	2b40      	cmp	r3, #64	; 0x40
 8009cc0:	d82e      	bhi.n	8009d20 <USBD_StdItfReq+0x7c>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d001      	beq.n	8009cca <USBD_StdItfReq+0x26>
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d12a      	bne.n	8009d20 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d81d      	bhi.n	8009d12 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	889b      	ldrh	r3, [r3, #4]
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d813      	bhi.n	8009d08 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	88db      	ldrh	r3, [r3, #6]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d110      	bne.n	8009d1c <USBD_StdItfReq+0x78>
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10d      	bne.n	8009d1c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fd56 	bl	800a7b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d06:	e009      	b.n	8009d1c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fc89 	bl	800a622 <USBD_CtlError>
          break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc84 	bl	800a622 <USBD_CtlError>
          break;
 8009d1a:	e000      	b.n	8009d1e <USBD_StdItfReq+0x7a>
          break;
 8009d1c:	bf00      	nop
      }
      break;
 8009d1e:	e004      	b.n	8009d2a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fc7d 	bl	800a622 <USBD_CtlError>
      break;
 8009d28:	bf00      	nop
  }

  return USBD_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	889b      	ldrh	r3, [r3, #4]
 8009d46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d50:	2b40      	cmp	r3, #64	; 0x40
 8009d52:	d007      	beq.n	8009d64 <USBD_StdEPReq+0x30>
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	f200 8146 	bhi.w	8009fe6 <USBD_StdEPReq+0x2b2>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00a      	beq.n	8009d74 <USBD_StdEPReq+0x40>
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	f040 8141 	bne.w	8009fe6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
      break;
 8009d72:	e13d      	b.n	8009ff0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d10a      	bne.n	8009d96 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d92:	7bfb      	ldrb	r3, [r7, #15]
 8009d94:	e12d      	b.n	8009ff2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	2b03      	cmp	r3, #3
 8009d9c:	d007      	beq.n	8009dae <USBD_StdEPReq+0x7a>
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	f300 811b 	bgt.w	8009fda <USBD_StdEPReq+0x2a6>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d072      	beq.n	8009e8e <USBD_StdEPReq+0x15a>
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d03a      	beq.n	8009e22 <USBD_StdEPReq+0xee>
 8009dac:	e115      	b.n	8009fda <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d002      	beq.n	8009dbe <USBD_StdEPReq+0x8a>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d015      	beq.n	8009de8 <USBD_StdEPReq+0xb4>
 8009dbc:	e02b      	b.n	8009e16 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00c      	beq.n	8009dde <USBD_StdEPReq+0xaa>
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b80      	cmp	r3, #128	; 0x80
 8009dc8:	d009      	beq.n	8009dde <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 f888 	bl	800aee4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dd4:	2180      	movs	r1, #128	; 0x80
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 f884 	bl	800aee4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ddc:	e020      	b.n	8009e20 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc1e 	bl	800a622 <USBD_CtlError>
              break;
 8009de6:	e01b      	b.n	8009e20 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	885b      	ldrh	r3, [r3, #2]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10e      	bne.n	8009e0e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00b      	beq.n	8009e0e <USBD_StdEPReq+0xda>
 8009df6:	7bbb      	ldrb	r3, [r7, #14]
 8009df8:	2b80      	cmp	r3, #128	; 0x80
 8009dfa:	d008      	beq.n	8009e0e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	88db      	ldrh	r3, [r3, #6]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d104      	bne.n	8009e0e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 f86b 	bl	800aee4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fccf 	bl	800a7b2 <USBD_CtlSendStatus>

              break;
 8009e14:	e004      	b.n	8009e20 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fc02 	bl	800a622 <USBD_CtlError>
              break;
 8009e1e:	bf00      	nop
          }
          break;
 8009e20:	e0e0      	b.n	8009fe4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d002      	beq.n	8009e32 <USBD_StdEPReq+0xfe>
 8009e2c:	2b03      	cmp	r3, #3
 8009e2e:	d015      	beq.n	8009e5c <USBD_StdEPReq+0x128>
 8009e30:	e026      	b.n	8009e80 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e32:	7bbb      	ldrb	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00c      	beq.n	8009e52 <USBD_StdEPReq+0x11e>
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b80      	cmp	r3, #128	; 0x80
 8009e3c:	d009      	beq.n	8009e52 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 f84e 	bl	800aee4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 f84a 	bl	800aee4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e50:	e01c      	b.n	8009e8c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fbe4 	bl	800a622 <USBD_CtlError>
              break;
 8009e5a:	e017      	b.n	8009e8c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	885b      	ldrh	r3, [r3, #2]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d112      	bne.n	8009e8a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 f855 	bl	800af22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc9a 	bl	800a7b2 <USBD_CtlSendStatus>
              }
              break;
 8009e7e:	e004      	b.n	8009e8a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fbcd 	bl	800a622 <USBD_CtlError>
              break;
 8009e88:	e000      	b.n	8009e8c <USBD_StdEPReq+0x158>
              break;
 8009e8a:	bf00      	nop
          }
          break;
 8009e8c:	e0aa      	b.n	8009fe4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d002      	beq.n	8009e9e <USBD_StdEPReq+0x16a>
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d032      	beq.n	8009f02 <USBD_StdEPReq+0x1ce>
 8009e9c:	e097      	b.n	8009fce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <USBD_StdEPReq+0x180>
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	2b80      	cmp	r3, #128	; 0x80
 8009ea8:	d004      	beq.n	8009eb4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009eaa:	6839      	ldr	r1, [r7, #0]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fbb8 	bl	800a622 <USBD_CtlError>
                break;
 8009eb2:	e091      	b.n	8009fd8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	da0b      	bge.n	8009ed4 <USBD_StdEPReq+0x1a0>
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	3310      	adds	r3, #16
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	4413      	add	r3, r2
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	e00b      	b.n	8009eec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eda:	4613      	mov	r3, r2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	4413      	add	r3, r2
 8009eea:	3304      	adds	r3, #4
 8009eec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fbfb 	bl	800a6f6 <USBD_CtlSendData>
              break;
 8009f00:	e06a      	b.n	8009fd8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	da11      	bge.n	8009f2e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	f003 020f 	and.w	r2, r3, #15
 8009f10:	6879      	ldr	r1, [r7, #4]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	440b      	add	r3, r1
 8009f1c:	3318      	adds	r3, #24
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d117      	bne.n	8009f54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f24:	6839      	ldr	r1, [r7, #0]
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fb7b 	bl	800a622 <USBD_CtlError>
                  break;
 8009f2c:	e054      	b.n	8009fd8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f2e:	7bbb      	ldrb	r3, [r7, #14]
 8009f30:	f003 020f 	and.w	r2, r3, #15
 8009f34:	6879      	ldr	r1, [r7, #4]
 8009f36:	4613      	mov	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	440b      	add	r3, r1
 8009f40:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fb68 	bl	800a622 <USBD_CtlError>
                  break;
 8009f52:	e041      	b.n	8009fd8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	da0b      	bge.n	8009f74 <USBD_StdEPReq+0x240>
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	3310      	adds	r3, #16
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4413      	add	r3, r2
 8009f70:	3304      	adds	r3, #4
 8009f72:	e00b      	b.n	8009f8c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
 8009f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4413      	add	r3, r2
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <USBD_StdEPReq+0x266>
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b80      	cmp	r3, #128	; 0x80
 8009f98:	d103      	bne.n	8009fa2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	e00e      	b.n	8009fc0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 ffda 	bl	800af60 <USBD_LL_IsStallEP>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	e002      	b.n	8009fc0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fb95 	bl	800a6f6 <USBD_CtlSendData>
              break;
 8009fcc:	e004      	b.n	8009fd8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009fce:	6839      	ldr	r1, [r7, #0]
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fb26 	bl	800a622 <USBD_CtlError>
              break;
 8009fd6:	bf00      	nop
          }
          break;
 8009fd8:	e004      	b.n	8009fe4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fb20 	bl	800a622 <USBD_CtlError>
          break;
 8009fe2:	bf00      	nop
      }
      break;
 8009fe4:	e004      	b.n	8009ff0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fb1a 	bl	800a622 <USBD_CtlError>
      break;
 8009fee:	bf00      	nop
  }

  return ret;
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a006:	2300      	movs	r3, #0
 800a008:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	885b      	ldrh	r3, [r3, #2]
 800a016:	0a1b      	lsrs	r3, r3, #8
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	2b06      	cmp	r3, #6
 800a01e:	f200 8128 	bhi.w	800a272 <USBD_GetDescriptor+0x276>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <USBD_GetDescriptor+0x2c>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a045 	.word	0x0800a045
 800a02c:	0800a05d 	.word	0x0800a05d
 800a030:	0800a09d 	.word	0x0800a09d
 800a034:	0800a273 	.word	0x0800a273
 800a038:	0800a273 	.word	0x0800a273
 800a03c:	0800a213 	.word	0x0800a213
 800a040:	0800a23f 	.word	0x0800a23f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	7c12      	ldrb	r2, [r2, #16]
 800a050:	f107 0108 	add.w	r1, r7, #8
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
 800a058:	60f8      	str	r0, [r7, #12]
      break;
 800a05a:	e112      	b.n	800a282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7c1b      	ldrb	r3, [r3, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10d      	bne.n	800a080 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06c:	f107 0208 	add.w	r2, r7, #8
 800a070:	4610      	mov	r0, r2
 800a072:	4798      	blx	r3
 800a074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	2202      	movs	r2, #2
 800a07c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a07e:	e100      	b.n	800a282 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	f107 0208 	add.w	r2, r7, #8
 800a08c:	4610      	mov	r0, r2
 800a08e:	4798      	blx	r3
 800a090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	3301      	adds	r3, #1
 800a096:	2202      	movs	r2, #2
 800a098:	701a      	strb	r2, [r3, #0]
      break;
 800a09a:	e0f2      	b.n	800a282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	885b      	ldrh	r3, [r3, #2]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b05      	cmp	r3, #5
 800a0a4:	f200 80ac 	bhi.w	800a200 <USBD_GetDescriptor+0x204>
 800a0a8:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <USBD_GetDescriptor+0xb4>)
 800a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a0c9 	.word	0x0800a0c9
 800a0b4:	0800a0fd 	.word	0x0800a0fd
 800a0b8:	0800a131 	.word	0x0800a131
 800a0bc:	0800a165 	.word	0x0800a165
 800a0c0:	0800a199 	.word	0x0800a199
 800a0c4:	0800a1cd 	.word	0x0800a1cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	7c12      	ldrb	r2, [r2, #16]
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ea:	e091      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa97 	bl	800a622 <USBD_CtlError>
            err++;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fa:	e089      	b.n	800a210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7c12      	ldrb	r2, [r2, #16]
 800a114:	f107 0108 	add.w	r1, r7, #8
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
 800a11c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11e:	e077      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa7d 	bl	800a622 <USBD_CtlError>
            err++;
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	3301      	adds	r3, #1
 800a12c:	72fb      	strb	r3, [r7, #11]
          break;
 800a12e:	e06f      	b.n	800a210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00b      	beq.n	800a154 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	f107 0108 	add.w	r1, r7, #8
 800a14c:	4610      	mov	r0, r2
 800a14e:	4798      	blx	r3
 800a150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a152:	e05d      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a154:	6839      	ldr	r1, [r7, #0]
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa63 	bl	800a622 <USBD_CtlError>
            err++;
 800a15c:	7afb      	ldrb	r3, [r7, #11]
 800a15e:	3301      	adds	r3, #1
 800a160:	72fb      	strb	r3, [r7, #11]
          break;
 800a162:	e055      	b.n	800a210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00b      	beq.n	800a188 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	7c12      	ldrb	r2, [r2, #16]
 800a17c:	f107 0108 	add.w	r1, r7, #8
 800a180:	4610      	mov	r0, r2
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a186:	e043      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fa49 	bl	800a622 <USBD_CtlError>
            err++;
 800a190:	7afb      	ldrb	r3, [r7, #11]
 800a192:	3301      	adds	r3, #1
 800a194:	72fb      	strb	r3, [r7, #11]
          break;
 800a196:	e03b      	b.n	800a210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a19e:	695b      	ldr	r3, [r3, #20]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00b      	beq.n	800a1bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	7c12      	ldrb	r2, [r2, #16]
 800a1b0:	f107 0108 	add.w	r1, r7, #8
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	4798      	blx	r3
 800a1b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ba:	e029      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa2f 	bl	800a622 <USBD_CtlError>
            err++;
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ca:	e021      	b.n	800a210 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00b      	beq.n	800a1f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	7c12      	ldrb	r2, [r2, #16]
 800a1e4:	f107 0108 	add.w	r1, r7, #8
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	4798      	blx	r3
 800a1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ee:	e00f      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fa15 	bl	800a622 <USBD_CtlError>
            err++;
 800a1f8:	7afb      	ldrb	r3, [r7, #11]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fe:	e007      	b.n	800a210 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fa0d 	bl	800a622 <USBD_CtlError>
          err++;
 800a208:	7afb      	ldrb	r3, [r7, #11]
 800a20a:	3301      	adds	r3, #1
 800a20c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a20e:	e038      	b.n	800a282 <USBD_GetDescriptor+0x286>
 800a210:	e037      	b.n	800a282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	7c1b      	ldrb	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a222:	f107 0208 	add.w	r2, r7, #8
 800a226:	4610      	mov	r0, r2
 800a228:	4798      	blx	r3
 800a22a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a22c:	e029      	b.n	800a282 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f9f6 	bl	800a622 <USBD_CtlError>
        err++;
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	3301      	adds	r3, #1
 800a23a:	72fb      	strb	r3, [r7, #11]
      break;
 800a23c:	e021      	b.n	800a282 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	7c1b      	ldrb	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10d      	bne.n	800a262 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24e:	f107 0208 	add.w	r2, r7, #8
 800a252:	4610      	mov	r0, r2
 800a254:	4798      	blx	r3
 800a256:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3301      	adds	r3, #1
 800a25c:	2207      	movs	r2, #7
 800a25e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a260:	e00f      	b.n	800a282 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f9dc 	bl	800a622 <USBD_CtlError>
        err++;
 800a26a:	7afb      	ldrb	r3, [r7, #11]
 800a26c:	3301      	adds	r3, #1
 800a26e:	72fb      	strb	r3, [r7, #11]
      break;
 800a270:	e007      	b.n	800a282 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f9d4 	bl	800a622 <USBD_CtlError>
      err++;
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	3301      	adds	r3, #1
 800a27e:	72fb      	strb	r3, [r7, #11]
      break;
 800a280:	bf00      	nop
  }

  if (err != 0U)
 800a282:	7afb      	ldrb	r3, [r7, #11]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11c      	bne.n	800a2c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a288:	893b      	ldrh	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d011      	beq.n	800a2b2 <USBD_GetDescriptor+0x2b6>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	88db      	ldrh	r3, [r3, #6]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00d      	beq.n	800a2b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	88da      	ldrh	r2, [r3, #6]
 800a29a:	893b      	ldrh	r3, [r7, #8]
 800a29c:	4293      	cmp	r3, r2
 800a29e:	bf28      	it	cs
 800a2a0:	4613      	movcs	r3, r2
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2a6:	893b      	ldrh	r3, [r7, #8]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68f9      	ldr	r1, [r7, #12]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fa22 	bl	800a6f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	88db      	ldrh	r3, [r3, #6]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d104      	bne.n	800a2c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa79 	bl	800a7b2 <USBD_CtlSendStatus>
 800a2c0:	e000      	b.n	800a2c4 <USBD_GetDescriptor+0x2c8>
    return;
 800a2c2:	bf00      	nop
    }
  }
}
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop

0800a2cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	889b      	ldrh	r3, [r3, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d130      	bne.n	800a340 <USBD_SetAddress+0x74>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	88db      	ldrh	r3, [r3, #6]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d12c      	bne.n	800a340 <USBD_SetAddress+0x74>
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a2ec:	d828      	bhi.n	800a340 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a300:	2b03      	cmp	r3, #3
 800a302:	d104      	bne.n	800a30e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f98b 	bl	800a622 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30c:	e01d      	b.n	800a34a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7bfa      	ldrb	r2, [r7, #15]
 800a312:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	4619      	mov	r1, r3
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fe4c 	bl	800afb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fa46 	bl	800a7b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d004      	beq.n	800a336 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a334:	e009      	b.n	800a34a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33e:	e004      	b.n	800a34a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 f96d 	bl	800a622 <USBD_CtlError>
  }
}
 800a348:	bf00      	nop
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	885b      	ldrh	r3, [r3, #2]
 800a362:	b2da      	uxtb	r2, r3
 800a364:	4b41      	ldr	r3, [pc, #260]	; (800a46c <USBD_SetConfig+0x118>)
 800a366:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a368:	4b40      	ldr	r3, [pc, #256]	; (800a46c <USBD_SetConfig+0x118>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d904      	bls.n	800a37a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f955 	bl	800a622 <USBD_CtlError>
 800a378:	e075      	b.n	800a466 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a380:	2b02      	cmp	r3, #2
 800a382:	d002      	beq.n	800a38a <USBD_SetConfig+0x36>
 800a384:	2b03      	cmp	r3, #3
 800a386:	d023      	beq.n	800a3d0 <USBD_SetConfig+0x7c>
 800a388:	e062      	b.n	800a450 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a38a:	4b38      	ldr	r3, [pc, #224]	; (800a46c <USBD_SetConfig+0x118>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d01a      	beq.n	800a3c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a392:	4b36      	ldr	r3, [pc, #216]	; (800a46c <USBD_SetConfig+0x118>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2203      	movs	r2, #3
 800a3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3a4:	4b31      	ldr	r3, [pc, #196]	; (800a46c <USBD_SetConfig+0x118>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7ff f9e7 	bl	800977e <USBD_SetClassConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d104      	bne.n	800a3c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f932 	bl	800a622 <USBD_CtlError>
            return;
 800a3be:	e052      	b.n	800a466 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f9f6 	bl	800a7b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3c6:	e04e      	b.n	800a466 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 f9f2 	bl	800a7b2 <USBD_CtlSendStatus>
        break;
 800a3ce:	e04a      	b.n	800a466 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3d0:	4b26      	ldr	r3, [pc, #152]	; (800a46c <USBD_SetConfig+0x118>)
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d112      	bne.n	800a3fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a3e0:	4b22      	ldr	r3, [pc, #136]	; (800a46c <USBD_SetConfig+0x118>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a3ea:	4b20      	ldr	r3, [pc, #128]	; (800a46c <USBD_SetConfig+0x118>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff f9e3 	bl	80097bc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f9db 	bl	800a7b2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3fc:	e033      	b.n	800a466 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <USBD_SetConfig+0x118>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d01d      	beq.n	800a448 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	b2db      	uxtb	r3, r3
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff f9d1 	bl	80097bc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a41a:	4b14      	ldr	r3, [pc, #80]	; (800a46c <USBD_SetConfig+0x118>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a424:	4b11      	ldr	r3, [pc, #68]	; (800a46c <USBD_SetConfig+0x118>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f7ff f9a7 	bl	800977e <USBD_SetClassConfig>
 800a430:	4603      	mov	r3, r0
 800a432:	2b02      	cmp	r3, #2
 800a434:	d104      	bne.n	800a440 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a436:	6839      	ldr	r1, [r7, #0]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f8f2 	bl	800a622 <USBD_CtlError>
            return;
 800a43e:	e012      	b.n	800a466 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f9b6 	bl	800a7b2 <USBD_CtlSendStatus>
        break;
 800a446:	e00e      	b.n	800a466 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9b2 	bl	800a7b2 <USBD_CtlSendStatus>
        break;
 800a44e:	e00a      	b.n	800a466 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f8e5 	bl	800a622 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <USBD_SetConfig+0x118>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff f9ac 	bl	80097bc <USBD_ClrClassConfig>
        break;
 800a464:	bf00      	nop
    }
  }
}
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20000280 	.word	0x20000280

0800a470 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	88db      	ldrh	r3, [r3, #6]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d004      	beq.n	800a48c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f8cc 	bl	800a622 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a48a:	e022      	b.n	800a4d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a492:	2b02      	cmp	r3, #2
 800a494:	dc02      	bgt.n	800a49c <USBD_GetConfig+0x2c>
 800a496:	2b00      	cmp	r3, #0
 800a498:	dc03      	bgt.n	800a4a2 <USBD_GetConfig+0x32>
 800a49a:	e015      	b.n	800a4c8 <USBD_GetConfig+0x58>
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	d00b      	beq.n	800a4b8 <USBD_GetConfig+0x48>
 800a4a0:	e012      	b.n	800a4c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 f920 	bl	800a6f6 <USBD_CtlSendData>
        break;
 800a4b6:	e00c      	b.n	800a4d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	2201      	movs	r2, #1
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f918 	bl	800a6f6 <USBD_CtlSendData>
        break;
 800a4c6:	e004      	b.n	800a4d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f8a9 	bl	800a622 <USBD_CtlError>
        break;
 800a4d0:	bf00      	nop
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d81e      	bhi.n	800a52e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	88db      	ldrh	r3, [r3, #6]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d004      	beq.n	800a502 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f891 	bl	800a622 <USBD_CtlError>
        break;
 800a500:	e01a      	b.n	800a538 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d005      	beq.n	800a51e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	f043 0202 	orr.w	r2, r3, #2
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	330c      	adds	r3, #12
 800a522:	2202      	movs	r2, #2
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f8e5 	bl	800a6f6 <USBD_CtlSendData>
      break;
 800a52c:	e004      	b.n	800a538 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f876 	bl	800a622 <USBD_CtlError>
      break;
 800a536:	bf00      	nop
  }
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	885b      	ldrh	r3, [r3, #2]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d106      	bne.n	800a560 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f929 	bl	800a7b2 <USBD_CtlSendStatus>
  }
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a578:	3b01      	subs	r3, #1
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d80b      	bhi.n	800a596 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	885b      	ldrh	r3, [r3, #2]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d10c      	bne.n	800a5a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f90f 	bl	800a7b2 <USBD_CtlSendStatus>
      }
      break;
 800a594:	e004      	b.n	800a5a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f842 	bl	800a622 <USBD_CtlError>
      break;
 800a59e:	e000      	b.n	800a5a2 <USBD_ClrFeature+0x3a>
      break;
 800a5a0:	bf00      	nop
  }
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	785a      	ldrb	r2, [r3, #1]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	3302      	adds	r3, #2
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	021b      	lsls	r3, r3, #8
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4413      	add	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	3305      	adds	r3, #5
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	021b      	lsls	r3, r3, #8
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	3306      	adds	r3, #6
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	b29a      	uxth	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	3307      	adds	r3, #7
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	021b      	lsls	r3, r3, #8
 800a60e:	b29b      	uxth	r3, r3
 800a610:	4413      	add	r3, r2
 800a612:	b29a      	uxth	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	80da      	strh	r2, [r3, #6]

}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bc80      	pop	{r7}
 800a620:	4770      	bx	lr

0800a622 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b082      	sub	sp, #8
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
 800a62a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a62c:	2180      	movs	r1, #128	; 0x80
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fc58 	bl	800aee4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a634:	2100      	movs	r1, #0
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fc54 	bl	800aee4 <USBD_LL_StallEP>
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d032      	beq.n	800a6c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 f834 	bl	800a6c8 <USBD_GetLen>
 800a660:	4603      	mov	r3, r0
 800a662:	3301      	adds	r3, #1
 800a664:	b29b      	uxth	r3, r3
 800a666:	005b      	lsls	r3, r3, #1
 800a668:	b29a      	uxth	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	75fa      	strb	r2, [r7, #23]
 800a674:	461a      	mov	r2, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	7812      	ldrb	r2, [r2, #0]
 800a67e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a680:	7dfb      	ldrb	r3, [r7, #23]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	75fa      	strb	r2, [r7, #23]
 800a686:	461a      	mov	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4413      	add	r3, r2
 800a68c:	2203      	movs	r2, #3
 800a68e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a690:	e012      	b.n	800a6b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	60fa      	str	r2, [r7, #12]
 800a698:	7dfa      	ldrb	r2, [r7, #23]
 800a69a:	1c51      	adds	r1, r2, #1
 800a69c:	75f9      	strb	r1, [r7, #23]
 800a69e:	4611      	mov	r1, r2
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	75fa      	strb	r2, [r7, #23]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1e8      	bne.n	800a692 <USBD_GetString+0x4e>
    }
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3718      	adds	r7, #24
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6d4:	e005      	b.n	800a6e2 <USBD_GetLen+0x1a>
  {
    len++;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1f5      	bne.n	800a6d6 <USBD_GetLen+0xe>
  }

  return len;
 800a6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bc80      	pop	{r7}
 800a6f4:	4770      	bx	lr

0800a6f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	60f8      	str	r0, [r7, #12]
 800a6fe:	60b9      	str	r1, [r7, #8]
 800a700:	4613      	mov	r3, r2
 800a702:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2202      	movs	r2, #2
 800a708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a70c:	88fa      	ldrh	r2, [r7, #6]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	2100      	movs	r1, #0
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fc69 	bl	800aff6 <USBD_LL_Transmit>

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	60f8      	str	r0, [r7, #12]
 800a736:	60b9      	str	r1, [r7, #8]
 800a738:	4613      	mov	r3, r2
 800a73a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a73c:	88fb      	ldrh	r3, [r7, #6]
 800a73e:	68ba      	ldr	r2, [r7, #8]
 800a740:	2100      	movs	r1, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 fc57 	bl	800aff6 <USBD_LL_Transmit>

  return USBD_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	4613      	mov	r3, r2
 800a75e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2203      	movs	r2, #3
 800a764:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a768:	88fa      	ldrh	r2, [r7, #6]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a778:	88fb      	ldrh	r3, [r7, #6]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	2100      	movs	r1, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fc5c 	bl	800b03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	4613      	mov	r3, r2
 800a79a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a79c:	88fb      	ldrh	r3, [r7, #6]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 fc4a 	bl	800b03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2204      	movs	r2, #4
 800a7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fc14 	bl	800aff6 <USBD_LL_Transmit>

  return USBD_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2205      	movs	r2, #5
 800a7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fc24 	bl	800b03c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a804:	2200      	movs	r2, #0
 800a806:	4912      	ldr	r1, [pc, #72]	; (800a850 <MX_USB_DEVICE_Init+0x50>)
 800a808:	4812      	ldr	r0, [pc, #72]	; (800a854 <MX_USB_DEVICE_Init+0x54>)
 800a80a:	f7fe ff5e 	bl	80096ca <USBD_Init>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a814:	f7f7 fe42 	bl	800249c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a818:	490f      	ldr	r1, [pc, #60]	; (800a858 <MX_USB_DEVICE_Init+0x58>)
 800a81a:	480e      	ldr	r0, [pc, #56]	; (800a854 <MX_USB_DEVICE_Init+0x54>)
 800a81c:	f7fe ff80 	bl	8009720 <USBD_RegisterClass>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a826:	f7f7 fe39 	bl	800249c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a82a:	490c      	ldr	r1, [pc, #48]	; (800a85c <MX_USB_DEVICE_Init+0x5c>)
 800a82c:	4809      	ldr	r0, [pc, #36]	; (800a854 <MX_USB_DEVICE_Init+0x54>)
 800a82e:	f7fe feb1 	bl	8009594 <USBD_CDC_RegisterInterface>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d001      	beq.n	800a83c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a838:	f7f7 fe30 	bl	800249c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a83c:	4805      	ldr	r0, [pc, #20]	; (800a854 <MX_USB_DEVICE_Init+0x54>)
 800a83e:	f7fe ff88 	bl	8009752 <USBD_Start>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a848:	f7f7 fe28 	bl	800249c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a84c:	bf00      	nop
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000140 	.word	0x20000140
 800a854:	200009f0 	.word	0x200009f0
 800a858:	2000002c 	.word	0x2000002c
 800a85c:	20000130 	.word	0x20000130

0800a860 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a864:	2200      	movs	r2, #0
 800a866:	4905      	ldr	r1, [pc, #20]	; (800a87c <CDC_Init_FS+0x1c>)
 800a868:	4805      	ldr	r0, [pc, #20]	; (800a880 <CDC_Init_FS+0x20>)
 800a86a:	f7fe fea9 	bl	80095c0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a86e:	4905      	ldr	r1, [pc, #20]	; (800a884 <CDC_Init_FS+0x24>)
 800a870:	4803      	ldr	r0, [pc, #12]	; (800a880 <CDC_Init_FS+0x20>)
 800a872:	f7fe febe 	bl	80095f2 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a876:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a878:	4618      	mov	r0, r3
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	20000eb4 	.word	0x20000eb4
 800a880:	200009f0 	.word	0x200009f0
 800a884:	20000cb4 	.word	0x20000cb4

0800a888 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a88c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a88e:	4618      	mov	r0, r3
 800a890:	46bd      	mov	sp, r7
 800a892:	bc80      	pop	{r7}
 800a894:	4770      	bx	lr
	...

0800a898 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	2b23      	cmp	r3, #35	; 0x23
 800a8ac:	d84a      	bhi.n	800a944 <CDC_Control_FS+0xac>
 800a8ae:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <CDC_Control_FS+0x1c>)
 800a8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b4:	0800a945 	.word	0x0800a945
 800a8b8:	0800a945 	.word	0x0800a945
 800a8bc:	0800a945 	.word	0x0800a945
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800a945 	.word	0x0800a945
 800a8c8:	0800a945 	.word	0x0800a945
 800a8cc:	0800a945 	.word	0x0800a945
 800a8d0:	0800a945 	.word	0x0800a945
 800a8d4:	0800a945 	.word	0x0800a945
 800a8d8:	0800a945 	.word	0x0800a945
 800a8dc:	0800a945 	.word	0x0800a945
 800a8e0:	0800a945 	.word	0x0800a945
 800a8e4:	0800a945 	.word	0x0800a945
 800a8e8:	0800a945 	.word	0x0800a945
 800a8ec:	0800a945 	.word	0x0800a945
 800a8f0:	0800a945 	.word	0x0800a945
 800a8f4:	0800a945 	.word	0x0800a945
 800a8f8:	0800a945 	.word	0x0800a945
 800a8fc:	0800a945 	.word	0x0800a945
 800a900:	0800a945 	.word	0x0800a945
 800a904:	0800a945 	.word	0x0800a945
 800a908:	0800a945 	.word	0x0800a945
 800a90c:	0800a945 	.word	0x0800a945
 800a910:	0800a945 	.word	0x0800a945
 800a914:	0800a945 	.word	0x0800a945
 800a918:	0800a945 	.word	0x0800a945
 800a91c:	0800a945 	.word	0x0800a945
 800a920:	0800a945 	.word	0x0800a945
 800a924:	0800a945 	.word	0x0800a945
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a945 	.word	0x0800a945
 800a930:	0800a945 	.word	0x0800a945
 800a934:	0800a945 	.word	0x0800a945
 800a938:	0800a945 	.word	0x0800a945
 800a93c:	0800a945 	.word	0x0800a945
 800a940:	0800a945 	.word	0x0800a945
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a944:	bf00      	nop
	}

	return (USBD_OK);
 800a946:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a948:	4618      	mov	r0, r3
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop

0800a954 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	4807      	ldr	r0, [pc, #28]	; (800a980 <CDC_Receive_FS+0x2c>)
 800a962:	f7fe fe46 	bl	80095f2 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a966:	4806      	ldr	r0, [pc, #24]	; (800a980 <CDC_Receive_FS+0x2c>)
 800a968:	f7fe fe85 	bl	8009676 <USBD_CDC_ReceivePacket>

	runCommands(Buf, Len);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f6 fd98 	bl	80014a4 <runCommands>
	return (USBD_OK);
 800a974:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	200009f0 	.word	0x200009f0

0800a984 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800a994:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a99a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e00b      	b.n	800a9c2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9aa:	887b      	ldrh	r3, [r7, #2]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4806      	ldr	r0, [pc, #24]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b2:	f7fe fe05 	bl	80095c0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <CDC_Transmit_FS+0x48>)
 800a9b8:	f7fe fe2e 	bl	8009618 <USBD_CDC_TransmitPacket>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200009f0 	.word	0x200009f0

0800a9d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	2212      	movs	r2, #18
 800a9e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9e2:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	2000015c 	.word	0x2000015c

0800a9f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	6039      	str	r1, [r7, #0]
 800a9fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2204      	movs	r2, #4
 800aa04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa06:	4b03      	ldr	r3, [pc, #12]	; (800aa14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000170 	.word	0x20000170

0800aa18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	4603      	mov	r3, r0
 800aa20:	6039      	str	r1, [r7, #0]
 800aa22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d105      	bne.n	800aa36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4907      	ldr	r1, [pc, #28]	; (800aa4c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa2e:	4808      	ldr	r0, [pc, #32]	; (800aa50 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa30:	f7ff fe08 	bl	800a644 <USBD_GetString>
 800aa34:	e004      	b.n	800aa40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa36:	683a      	ldr	r2, [r7, #0]
 800aa38:	4904      	ldr	r1, [pc, #16]	; (800aa4c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa3a:	4805      	ldr	r0, [pc, #20]	; (800aa50 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa3c:	f7ff fe02 	bl	800a644 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa40:	4b02      	ldr	r3, [pc, #8]	; (800aa4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	200010b4 	.word	0x200010b4
 800aa50:	0800c680 	.word	0x0800c680

0800aa54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	6039      	str	r1, [r7, #0]
 800aa5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	4904      	ldr	r1, [pc, #16]	; (800aa74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa64:	4804      	ldr	r0, [pc, #16]	; (800aa78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa66:	f7ff fded 	bl	800a644 <USBD_GetString>
  return USBD_StrDesc;
 800aa6a:	4b02      	ldr	r3, [pc, #8]	; (800aa74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	200010b4 	.word	0x200010b4
 800aa78:	0800c698 	.word	0x0800c698

0800aa7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	6039      	str	r1, [r7, #0]
 800aa86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	221a      	movs	r2, #26
 800aa8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa8e:	f000 f843 	bl	800ab18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa92:	4b02      	ldr	r3, [pc, #8]	; (800aa9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	20000174 	.word	0x20000174

0800aaa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	6039      	str	r1, [r7, #0]
 800aaaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d105      	bne.n	800aabe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	4907      	ldr	r1, [pc, #28]	; (800aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aab6:	4808      	ldr	r0, [pc, #32]	; (800aad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aab8:	f7ff fdc4 	bl	800a644 <USBD_GetString>
 800aabc:	e004      	b.n	800aac8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	4904      	ldr	r1, [pc, #16]	; (800aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aac2:	4805      	ldr	r0, [pc, #20]	; (800aad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac4:	f7ff fdbe 	bl	800a644 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200010b4 	.word	0x200010b4
 800aad8:	0800c6ac 	.word	0x0800c6ac

0800aadc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	4907      	ldr	r1, [pc, #28]	; (800ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaf2:	4808      	ldr	r0, [pc, #32]	; (800ab14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf4:	f7ff fda6 	bl	800a644 <USBD_GetString>
 800aaf8:	e004      	b.n	800ab04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4904      	ldr	r1, [pc, #16]	; (800ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aafe:	4805      	ldr	r0, [pc, #20]	; (800ab14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab00:	f7ff fda0 	bl	800a644 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab04:	4b02      	ldr	r3, [pc, #8]	; (800ab10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	200010b4 	.word	0x200010b4
 800ab14:	0800c6b8 	.word	0x0800c6b8

0800ab18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <Get_SerialNum+0x44>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab24:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <Get_SerialNum+0x48>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab2a:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <Get_SerialNum+0x4c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4413      	add	r3, r2
 800ab36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d009      	beq.n	800ab52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab3e:	2208      	movs	r2, #8
 800ab40:	4909      	ldr	r1, [pc, #36]	; (800ab68 <Get_SerialNum+0x50>)
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 f814 	bl	800ab70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab48:	2204      	movs	r2, #4
 800ab4a:	4908      	ldr	r1, [pc, #32]	; (800ab6c <Get_SerialNum+0x54>)
 800ab4c:	68b8      	ldr	r0, [r7, #8]
 800ab4e:	f000 f80f 	bl	800ab70 <IntToUnicode>
  }
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	1ffff7e8 	.word	0x1ffff7e8
 800ab60:	1ffff7ec 	.word	0x1ffff7ec
 800ab64:	1ffff7f0 	.word	0x1ffff7f0
 800ab68:	20000176 	.word	0x20000176
 800ab6c:	20000186 	.word	0x20000186

0800ab70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab82:	2300      	movs	r3, #0
 800ab84:	75fb      	strb	r3, [r7, #23]
 800ab86:	e027      	b.n	800abd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	0f1b      	lsrs	r3, r3, #28
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	d80b      	bhi.n	800aba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	0f1b      	lsrs	r3, r3, #28
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	440b      	add	r3, r1
 800aba0:	3230      	adds	r2, #48	; 0x30
 800aba2:	b2d2      	uxtb	r2, r2
 800aba4:	701a      	strb	r2, [r3, #0]
 800aba6:	e00a      	b.n	800abbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	0f1b      	lsrs	r3, r3, #28
 800abac:	b2da      	uxtb	r2, r3
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	4619      	mov	r1, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	440b      	add	r3, r1
 800abb8:	3237      	adds	r2, #55	; 0x37
 800abba:	b2d2      	uxtb	r2, r2
 800abbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	011b      	lsls	r3, r3, #4
 800abc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	3301      	adds	r3, #1
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	3301      	adds	r3, #1
 800abd6:	75fb      	strb	r3, [r7, #23]
 800abd8:	7dfa      	ldrb	r2, [r7, #23]
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d3d3      	bcc.n	800ab88 <IntToUnicode+0x18>
  }
}
 800abe0:	bf00      	nop
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr

0800abec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a0d      	ldr	r2, [pc, #52]	; (800ac30 <HAL_PCD_MspInit+0x44>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d113      	bne.n	800ac26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800abfe:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <HAL_PCD_MspInit+0x48>)
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	4a0c      	ldr	r2, [pc, #48]	; (800ac34 <HAL_PCD_MspInit+0x48>)
 800ac04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac08:	61d3      	str	r3, [r2, #28]
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <HAL_PCD_MspInit+0x48>)
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2014      	movs	r0, #20
 800ac1c:	f7f8 fca5 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ac20:	2014      	movs	r0, #20
 800ac22:	f7f8 fcbe 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	40005c00 	.word	0x40005c00
 800ac34:	40021000 	.word	0x40021000

0800ac38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	4610      	mov	r0, r2
 800ac50:	f7fe fdc7 	bl	80097e2 <USBD_LL_SetupStage>
}
 800ac54:	bf00      	nop
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	4413      	add	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	440b      	add	r3, r1
 800ac7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	4619      	mov	r1, r3
 800ac86:	f7fe fdf9 	bl	800987c <USBD_LL_DataOutStage>
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aca4:	78fa      	ldrb	r2, [r7, #3]
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	440b      	add	r3, r1
 800acb2:	333c      	adds	r3, #60	; 0x3c
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	78fb      	ldrb	r3, [r7, #3]
 800acb8:	4619      	mov	r1, r3
 800acba:	f7fe fe50 	bl	800995e <USBD_LL_DataInStage>
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe ff60 	bl	8009b9a <USBD_LL_SOF>
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acea:	2301      	movs	r3, #1
 800acec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d001      	beq.n	800acfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acf6:	f7f7 fbd1 	bl	800249c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad00:	7bfa      	ldrb	r2, [r7, #15]
 800ad02:	4611      	mov	r1, r2
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7fe ff10 	bl	8009b2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fec9 	bl	8009aa8 <USBD_LL_Reset>
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fe ff0a 	bl	8009b48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad3c:	4b04      	ldr	r3, [pc, #16]	; (800ad50 <HAL_PCD_SuspendCallback+0x30>)
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	4a03      	ldr	r2, [pc, #12]	; (800ad50 <HAL_PCD_SuspendCallback+0x30>)
 800ad42:	f043 0306 	orr.w	r3, r3, #6
 800ad46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	e000ed00 	.word	0xe000ed00

0800ad54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe ff04 	bl	8009b70 <USBD_LL_Resume>
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad78:	4a28      	ldr	r2, [pc, #160]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a26      	ldr	r2, [pc, #152]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad88:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad8a:	4a25      	ldr	r2, [pc, #148]	; (800ae20 <USBD_LL_Init+0xb0>)
 800ad8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad8e:	4b23      	ldr	r3, [pc, #140]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad90:	2208      	movs	r2, #8
 800ad92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad94:	4b21      	ldr	r3, [pc, #132]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad96:	2202      	movs	r2, #2
 800ad98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad9a:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <USBD_LL_Init+0xac>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ada0:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <USBD_LL_Init+0xac>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <USBD_LL_Init+0xac>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800adac:	481b      	ldr	r0, [pc, #108]	; (800ae1c <USBD_LL_Init+0xac>)
 800adae:	f7f9 f82d 	bl	8003e0c <HAL_PCD_Init>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800adb8:	f7f7 fb70 	bl	800249c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adc2:	2318      	movs	r3, #24
 800adc4:	2200      	movs	r2, #0
 800adc6:	2100      	movs	r1, #0
 800adc8:	f7fa fb6f 	bl	80054aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800add2:	2358      	movs	r3, #88	; 0x58
 800add4:	2200      	movs	r2, #0
 800add6:	2180      	movs	r1, #128	; 0x80
 800add8:	f7fa fb67 	bl	80054aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ade2:	23c0      	movs	r3, #192	; 0xc0
 800ade4:	2200      	movs	r2, #0
 800ade6:	2181      	movs	r1, #129	; 0x81
 800ade8:	f7fa fb5f 	bl	80054aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adf2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800adf6:	2200      	movs	r2, #0
 800adf8:	2101      	movs	r1, #1
 800adfa:	f7fa fb56 	bl	80054aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae04:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2182      	movs	r1, #130	; 0x82
 800ae0c:	f7fa fb4d 	bl	80054aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200012b4 	.word	0x200012b4
 800ae20:	40005c00 	.word	0x40005c00

0800ae24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f9 f8f1 	bl	8004022 <HAL_PCD_Start>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f94e 	bl	800b0e8 <USBD_Get_USB_Status>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b084      	sub	sp, #16
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	4608      	mov	r0, r1
 800ae64:	4611      	mov	r1, r2
 800ae66:	461a      	mov	r2, r3
 800ae68:	4603      	mov	r3, r0
 800ae6a:	70fb      	strb	r3, [r7, #3]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70bb      	strb	r3, [r7, #2]
 800ae70:	4613      	mov	r3, r2
 800ae72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae82:	78bb      	ldrb	r3, [r7, #2]
 800ae84:	883a      	ldrh	r2, [r7, #0]
 800ae86:	78f9      	ldrb	r1, [r7, #3]
 800ae88:	f7f9 fa6b 	bl	8004362 <HAL_PCD_EP_Open>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f928 	bl	800b0e8 <USBD_Get_USB_Status>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3710      	adds	r7, #16
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aec0:	78fa      	ldrb	r2, [r7, #3]
 800aec2:	4611      	mov	r1, r2
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7f9 fab2 	bl	800442e <HAL_PCD_EP_Close>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f909 	bl	800b0e8 <USBD_Get_USB_Status>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aefe:	78fa      	ldrb	r2, [r7, #3]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f7f9 fb72 	bl	80045ec <HAL_PCD_EP_SetStall>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f8ea 	bl	800b0e8 <USBD_Get_USB_Status>
 800af14:	4603      	mov	r3, r0
 800af16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b084      	sub	sp, #16
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af3c:	78fa      	ldrb	r2, [r7, #3]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f9 fbb3 	bl	80046ac <HAL_PCD_EP_ClrStall>
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4a:	7bfb      	ldrb	r3, [r7, #15]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 f8cb 	bl	800b0e8 <USBD_Get_USB_Status>
 800af52:	4603      	mov	r3, r0
 800af54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af56:	7bbb      	ldrb	r3, [r7, #14]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	da0c      	bge.n	800af96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af82:	68f9      	ldr	r1, [r7, #12]
 800af84:	1c5a      	adds	r2, r3, #1
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	440b      	add	r3, r1
 800af90:	3302      	adds	r3, #2
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	e00b      	b.n	800afae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af9c:	68f9      	ldr	r1, [r7, #12]
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	00db      	lsls	r3, r3, #3
 800afa6:	440b      	add	r3, r1
 800afa8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800afac:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bc80      	pop	{r7}
 800afb6:	4770      	bx	lr

0800afb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afd2:	78fa      	ldrb	r2, [r7, #3]
 800afd4:	4611      	mov	r1, r2
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f9 f99e 	bl	8004318 <HAL_PCD_SetAddress>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 f880 	bl	800b0e8 <USBD_Get_USB_Status>
 800afe8:	4603      	mov	r3, r0
 800afea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afec:	7bbb      	ldrb	r3, [r7, #14]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b086      	sub	sp, #24
 800affa:	af00      	add	r7, sp, #0
 800affc:	60f8      	str	r0, [r7, #12]
 800affe:	607a      	str	r2, [r7, #4]
 800b000:	461a      	mov	r2, r3
 800b002:	460b      	mov	r3, r1
 800b004:	72fb      	strb	r3, [r7, #11]
 800b006:	4613      	mov	r3, r2
 800b008:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b018:	893b      	ldrh	r3, [r7, #8]
 800b01a:	7af9      	ldrb	r1, [r7, #11]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	f7f9 faa2 	bl	8004566 <HAL_PCD_EP_Transmit>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b026:	7dfb      	ldrb	r3, [r7, #23]
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 f85d 	bl	800b0e8 <USBD_Get_USB_Status>
 800b02e:	4603      	mov	r3, r0
 800b030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b032:	7dbb      	ldrb	r3, [r7, #22]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	607a      	str	r2, [r7, #4]
 800b046:	461a      	mov	r2, r3
 800b048:	460b      	mov	r3, r1
 800b04a:	72fb      	strb	r3, [r7, #11]
 800b04c:	4613      	mov	r3, r2
 800b04e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b05e:	893b      	ldrh	r3, [r7, #8]
 800b060:	7af9      	ldrb	r1, [r7, #11]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	f7f9 fa2b 	bl	80044be <HAL_PCD_EP_Receive>
 800b068:	4603      	mov	r3, r0
 800b06a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 f83a 	bl	800b0e8 <USBD_Get_USB_Status>
 800b074:	4603      	mov	r3, r0
 800b076:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b078:	7dbb      	ldrb	r3, [r7, #22]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b082      	sub	sp, #8
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	460b      	mov	r3, r1
 800b08c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b094:	78fa      	ldrb	r2, [r7, #3]
 800b096:	4611      	mov	r1, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7f9 fa4d 	bl	8004538 <HAL_PCD_EP_GetRxCount>
 800b09e:	4603      	mov	r3, r0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0b0:	4b02      	ldr	r3, [pc, #8]	; (800b0bc <USBD_static_malloc+0x14>)
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	370c      	adds	r7, #12
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bc80      	pop	{r7}
 800b0ba:	4770      	bx	lr
 800b0bc:	20000284 	.word	0x20000284

0800b0c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

}
 800b0c8:	bf00      	nop
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bc80      	pop	{r7}
 800b0d0:	4770      	bx	lr

0800b0d2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bc80      	pop	{r7}
 800b0e6:	4770      	bx	lr

0800b0e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d817      	bhi.n	800b12c <USBD_Get_USB_Status+0x44>
 800b0fc:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <USBD_Get_USB_Status+0x1c>)
 800b0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b102:	bf00      	nop
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b11b 	.word	0x0800b11b
 800b10c:	0800b121 	.word	0x0800b121
 800b110:	0800b127 	.word	0x0800b127
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b114:	2300      	movs	r3, #0
 800b116:	73fb      	strb	r3, [r7, #15]
    break;
 800b118:	e00b      	b.n	800b132 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b11a:	2302      	movs	r3, #2
 800b11c:	73fb      	strb	r3, [r7, #15]
    break;
 800b11e:	e008      	b.n	800b132 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
    break;
 800b124:	e005      	b.n	800b132 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b126:	2302      	movs	r3, #2
 800b128:	73fb      	strb	r3, [r7, #15]
    break;
 800b12a:	e002      	b.n	800b132 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b12c:	2302      	movs	r3, #2
 800b12e:	73fb      	strb	r3, [r7, #15]
    break;
 800b130:	bf00      	nop
  }
  return usb_status;
 800b132:	7bfb      	ldrb	r3, [r7, #15]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop

0800b140 <__errno>:
 800b140:	4b01      	ldr	r3, [pc, #4]	; (800b148 <__errno+0x8>)
 800b142:	6818      	ldr	r0, [r3, #0]
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000190 	.word	0x20000190

0800b14c <__libc_init_array>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	2600      	movs	r6, #0
 800b150:	4d0c      	ldr	r5, [pc, #48]	; (800b184 <__libc_init_array+0x38>)
 800b152:	4c0d      	ldr	r4, [pc, #52]	; (800b188 <__libc_init_array+0x3c>)
 800b154:	1b64      	subs	r4, r4, r5
 800b156:	10a4      	asrs	r4, r4, #2
 800b158:	42a6      	cmp	r6, r4
 800b15a:	d109      	bne.n	800b170 <__libc_init_array+0x24>
 800b15c:	f001 fa30 	bl	800c5c0 <_init>
 800b160:	2600      	movs	r6, #0
 800b162:	4d0a      	ldr	r5, [pc, #40]	; (800b18c <__libc_init_array+0x40>)
 800b164:	4c0a      	ldr	r4, [pc, #40]	; (800b190 <__libc_init_array+0x44>)
 800b166:	1b64      	subs	r4, r4, r5
 800b168:	10a4      	asrs	r4, r4, #2
 800b16a:	42a6      	cmp	r6, r4
 800b16c:	d105      	bne.n	800b17a <__libc_init_array+0x2e>
 800b16e:	bd70      	pop	{r4, r5, r6, pc}
 800b170:	f855 3b04 	ldr.w	r3, [r5], #4
 800b174:	4798      	blx	r3
 800b176:	3601      	adds	r6, #1
 800b178:	e7ee      	b.n	800b158 <__libc_init_array+0xc>
 800b17a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17e:	4798      	blx	r3
 800b180:	3601      	adds	r6, #1
 800b182:	e7f2      	b.n	800b16a <__libc_init_array+0x1e>
 800b184:	0800c7a0 	.word	0x0800c7a0
 800b188:	0800c7a0 	.word	0x0800c7a0
 800b18c:	0800c7a0 	.word	0x0800c7a0
 800b190:	0800c7a4 	.word	0x0800c7a4

0800b194 <__itoa>:
 800b194:	1e93      	subs	r3, r2, #2
 800b196:	2b22      	cmp	r3, #34	; 0x22
 800b198:	b510      	push	{r4, lr}
 800b19a:	460c      	mov	r4, r1
 800b19c:	d904      	bls.n	800b1a8 <__itoa+0x14>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	700b      	strb	r3, [r1, #0]
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	bd10      	pop	{r4, pc}
 800b1a8:	2a0a      	cmp	r2, #10
 800b1aa:	d109      	bne.n	800b1c0 <__itoa+0x2c>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	da07      	bge.n	800b1c0 <__itoa+0x2c>
 800b1b0:	232d      	movs	r3, #45	; 0x2d
 800b1b2:	700b      	strb	r3, [r1, #0]
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	4240      	negs	r0, r0
 800b1b8:	4421      	add	r1, r4
 800b1ba:	f000 f853 	bl	800b264 <__utoa>
 800b1be:	e7f1      	b.n	800b1a4 <__itoa+0x10>
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	e7f9      	b.n	800b1b8 <__itoa+0x24>

0800b1c4 <itoa>:
 800b1c4:	f7ff bfe6 	b.w	800b194 <__itoa>

0800b1c8 <memcpy>:
 800b1c8:	440a      	add	r2, r1
 800b1ca:	4291      	cmp	r1, r2
 800b1cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1d0:	d100      	bne.n	800b1d4 <memcpy+0xc>
 800b1d2:	4770      	bx	lr
 800b1d4:	b510      	push	{r4, lr}
 800b1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1da:	4291      	cmp	r1, r2
 800b1dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1e0:	d1f9      	bne.n	800b1d6 <memcpy+0xe>
 800b1e2:	bd10      	pop	{r4, pc}

0800b1e4 <memset>:
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4402      	add	r2, r0
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d100      	bne.n	800b1ee <memset+0xa>
 800b1ec:	4770      	bx	lr
 800b1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f2:	e7f9      	b.n	800b1e8 <memset+0x4>

0800b1f4 <iprintf>:
 800b1f4:	b40f      	push	{r0, r1, r2, r3}
 800b1f6:	4b0a      	ldr	r3, [pc, #40]	; (800b220 <iprintf+0x2c>)
 800b1f8:	b513      	push	{r0, r1, r4, lr}
 800b1fa:	681c      	ldr	r4, [r3, #0]
 800b1fc:	b124      	cbz	r4, 800b208 <iprintf+0x14>
 800b1fe:	69a3      	ldr	r3, [r4, #24]
 800b200:	b913      	cbnz	r3, 800b208 <iprintf+0x14>
 800b202:	4620      	mov	r0, r4
 800b204:	f000 f8c8 	bl	800b398 <__sinit>
 800b208:	ab05      	add	r3, sp, #20
 800b20a:	4620      	mov	r0, r4
 800b20c:	9a04      	ldr	r2, [sp, #16]
 800b20e:	68a1      	ldr	r1, [r4, #8]
 800b210:	9301      	str	r3, [sp, #4]
 800b212:	f000 fb3f 	bl	800b894 <_vfiprintf_r>
 800b216:	b002      	add	sp, #8
 800b218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b21c:	b004      	add	sp, #16
 800b21e:	4770      	bx	lr
 800b220:	20000190 	.word	0x20000190

0800b224 <siprintf>:
 800b224:	b40e      	push	{r1, r2, r3}
 800b226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b22a:	b500      	push	{lr}
 800b22c:	b09c      	sub	sp, #112	; 0x70
 800b22e:	ab1d      	add	r3, sp, #116	; 0x74
 800b230:	9002      	str	r0, [sp, #8]
 800b232:	9006      	str	r0, [sp, #24]
 800b234:	9107      	str	r1, [sp, #28]
 800b236:	9104      	str	r1, [sp, #16]
 800b238:	4808      	ldr	r0, [pc, #32]	; (800b25c <siprintf+0x38>)
 800b23a:	4909      	ldr	r1, [pc, #36]	; (800b260 <siprintf+0x3c>)
 800b23c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b240:	9105      	str	r1, [sp, #20]
 800b242:	6800      	ldr	r0, [r0, #0]
 800b244:	a902      	add	r1, sp, #8
 800b246:	9301      	str	r3, [sp, #4]
 800b248:	f000 f9fc 	bl	800b644 <_svfiprintf_r>
 800b24c:	2200      	movs	r2, #0
 800b24e:	9b02      	ldr	r3, [sp, #8]
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	b01c      	add	sp, #112	; 0x70
 800b254:	f85d eb04 	ldr.w	lr, [sp], #4
 800b258:	b003      	add	sp, #12
 800b25a:	4770      	bx	lr
 800b25c:	20000190 	.word	0x20000190
 800b260:	ffff0208 	.word	0xffff0208

0800b264 <__utoa>:
 800b264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b266:	b08b      	sub	sp, #44	; 0x2c
 800b268:	4605      	mov	r5, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	466e      	mov	r6, sp
 800b26e:	4c1d      	ldr	r4, [pc, #116]	; (800b2e4 <__utoa+0x80>)
 800b270:	f104 0c20 	add.w	ip, r4, #32
 800b274:	4637      	mov	r7, r6
 800b276:	6820      	ldr	r0, [r4, #0]
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	3408      	adds	r4, #8
 800b27c:	c703      	stmia	r7!, {r0, r1}
 800b27e:	4564      	cmp	r4, ip
 800b280:	463e      	mov	r6, r7
 800b282:	d1f7      	bne.n	800b274 <__utoa+0x10>
 800b284:	7921      	ldrb	r1, [r4, #4]
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	7139      	strb	r1, [r7, #4]
 800b28a:	1e91      	subs	r1, r2, #2
 800b28c:	2922      	cmp	r1, #34	; 0x22
 800b28e:	6038      	str	r0, [r7, #0]
 800b290:	f04f 0100 	mov.w	r1, #0
 800b294:	d904      	bls.n	800b2a0 <__utoa+0x3c>
 800b296:	7019      	strb	r1, [r3, #0]
 800b298:	460b      	mov	r3, r1
 800b29a:	4618      	mov	r0, r3
 800b29c:	b00b      	add	sp, #44	; 0x2c
 800b29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a0:	1e58      	subs	r0, r3, #1
 800b2a2:	4684      	mov	ip, r0
 800b2a4:	fbb5 f7f2 	udiv	r7, r5, r2
 800b2a8:	fb02 5617 	mls	r6, r2, r7, r5
 800b2ac:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800b2b0:	4476      	add	r6, lr
 800b2b2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b2bc:	462e      	mov	r6, r5
 800b2be:	42b2      	cmp	r2, r6
 800b2c0:	463d      	mov	r5, r7
 800b2c2:	f101 0101 	add.w	r1, r1, #1
 800b2c6:	d9ed      	bls.n	800b2a4 <__utoa+0x40>
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	545a      	strb	r2, [r3, r1]
 800b2cc:	1919      	adds	r1, r3, r4
 800b2ce:	1aa5      	subs	r5, r4, r2
 800b2d0:	42aa      	cmp	r2, r5
 800b2d2:	dae2      	bge.n	800b29a <__utoa+0x36>
 800b2d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b2d8:	780e      	ldrb	r6, [r1, #0]
 800b2da:	3201      	adds	r2, #1
 800b2dc:	7006      	strb	r6, [r0, #0]
 800b2de:	f801 5901 	strb.w	r5, [r1], #-1
 800b2e2:	e7f4      	b.n	800b2ce <__utoa+0x6a>
 800b2e4:	0800c6e4 	.word	0x0800c6e4

0800b2e8 <std>:
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	b510      	push	{r4, lr}
 800b2ec:	4604      	mov	r4, r0
 800b2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2f6:	6083      	str	r3, [r0, #8]
 800b2f8:	8181      	strh	r1, [r0, #12]
 800b2fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b2fc:	81c2      	strh	r2, [r0, #14]
 800b2fe:	6183      	str	r3, [r0, #24]
 800b300:	4619      	mov	r1, r3
 800b302:	2208      	movs	r2, #8
 800b304:	305c      	adds	r0, #92	; 0x5c
 800b306:	f7ff ff6d 	bl	800b1e4 <memset>
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <std+0x38>)
 800b30c:	6224      	str	r4, [r4, #32]
 800b30e:	6263      	str	r3, [r4, #36]	; 0x24
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <std+0x3c>)
 800b312:	62a3      	str	r3, [r4, #40]	; 0x28
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <std+0x40>)
 800b316:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b318:	4b04      	ldr	r3, [pc, #16]	; (800b32c <std+0x44>)
 800b31a:	6323      	str	r3, [r4, #48]	; 0x30
 800b31c:	bd10      	pop	{r4, pc}
 800b31e:	bf00      	nop
 800b320:	0800be41 	.word	0x0800be41
 800b324:	0800be63 	.word	0x0800be63
 800b328:	0800be9b 	.word	0x0800be9b
 800b32c:	0800bebf 	.word	0x0800bebf

0800b330 <_cleanup_r>:
 800b330:	4901      	ldr	r1, [pc, #4]	; (800b338 <_cleanup_r+0x8>)
 800b332:	f000 b8af 	b.w	800b494 <_fwalk_reent>
 800b336:	bf00      	nop
 800b338:	0800c199 	.word	0x0800c199

0800b33c <__sfmoreglue>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	2568      	movs	r5, #104	; 0x68
 800b340:	1e4a      	subs	r2, r1, #1
 800b342:	4355      	muls	r5, r2
 800b344:	460e      	mov	r6, r1
 800b346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b34a:	f000 f8c5 	bl	800b4d8 <_malloc_r>
 800b34e:	4604      	mov	r4, r0
 800b350:	b140      	cbz	r0, 800b364 <__sfmoreglue+0x28>
 800b352:	2100      	movs	r1, #0
 800b354:	e9c0 1600 	strd	r1, r6, [r0]
 800b358:	300c      	adds	r0, #12
 800b35a:	60a0      	str	r0, [r4, #8]
 800b35c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b360:	f7ff ff40 	bl	800b1e4 <memset>
 800b364:	4620      	mov	r0, r4
 800b366:	bd70      	pop	{r4, r5, r6, pc}

0800b368 <__sfp_lock_acquire>:
 800b368:	4801      	ldr	r0, [pc, #4]	; (800b370 <__sfp_lock_acquire+0x8>)
 800b36a:	f000 b8b3 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800b36e:	bf00      	nop
 800b370:	200015a8 	.word	0x200015a8

0800b374 <__sfp_lock_release>:
 800b374:	4801      	ldr	r0, [pc, #4]	; (800b37c <__sfp_lock_release+0x8>)
 800b376:	f000 b8ae 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800b37a:	bf00      	nop
 800b37c:	200015a8 	.word	0x200015a8

0800b380 <__sinit_lock_acquire>:
 800b380:	4801      	ldr	r0, [pc, #4]	; (800b388 <__sinit_lock_acquire+0x8>)
 800b382:	f000 b8a7 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800b386:	bf00      	nop
 800b388:	200015a3 	.word	0x200015a3

0800b38c <__sinit_lock_release>:
 800b38c:	4801      	ldr	r0, [pc, #4]	; (800b394 <__sinit_lock_release+0x8>)
 800b38e:	f000 b8a2 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800b392:	bf00      	nop
 800b394:	200015a3 	.word	0x200015a3

0800b398 <__sinit>:
 800b398:	b510      	push	{r4, lr}
 800b39a:	4604      	mov	r4, r0
 800b39c:	f7ff fff0 	bl	800b380 <__sinit_lock_acquire>
 800b3a0:	69a3      	ldr	r3, [r4, #24]
 800b3a2:	b11b      	cbz	r3, 800b3ac <__sinit+0x14>
 800b3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a8:	f7ff bff0 	b.w	800b38c <__sinit_lock_release>
 800b3ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b3b2:	4b13      	ldr	r3, [pc, #76]	; (800b400 <__sinit+0x68>)
 800b3b4:	4a13      	ldr	r2, [pc, #76]	; (800b404 <__sinit+0x6c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	bf08      	it	eq
 800b3be:	2301      	moveq	r3, #1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	bf08      	it	eq
 800b3c4:	61a3      	streq	r3, [r4, #24]
 800b3c6:	f000 f81f 	bl	800b408 <__sfp>
 800b3ca:	6060      	str	r0, [r4, #4]
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 f81b 	bl	800b408 <__sfp>
 800b3d2:	60a0      	str	r0, [r4, #8]
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 f817 	bl	800b408 <__sfp>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2104      	movs	r1, #4
 800b3de:	60e0      	str	r0, [r4, #12]
 800b3e0:	6860      	ldr	r0, [r4, #4]
 800b3e2:	f7ff ff81 	bl	800b2e8 <std>
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	2109      	movs	r1, #9
 800b3ea:	68a0      	ldr	r0, [r4, #8]
 800b3ec:	f7ff ff7c 	bl	800b2e8 <std>
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	2112      	movs	r1, #18
 800b3f4:	68e0      	ldr	r0, [r4, #12]
 800b3f6:	f7ff ff77 	bl	800b2e8 <std>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	61a3      	str	r3, [r4, #24]
 800b3fe:	e7d1      	b.n	800b3a4 <__sinit+0xc>
 800b400:	0800c6e0 	.word	0x0800c6e0
 800b404:	0800b331 	.word	0x0800b331

0800b408 <__sfp>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	4607      	mov	r7, r0
 800b40c:	f7ff ffac 	bl	800b368 <__sfp_lock_acquire>
 800b410:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <__sfp+0x84>)
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	69b3      	ldr	r3, [r6, #24]
 800b416:	b913      	cbnz	r3, 800b41e <__sfp+0x16>
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff ffbd 	bl	800b398 <__sinit>
 800b41e:	3648      	adds	r6, #72	; 0x48
 800b420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b424:	3b01      	subs	r3, #1
 800b426:	d503      	bpl.n	800b430 <__sfp+0x28>
 800b428:	6833      	ldr	r3, [r6, #0]
 800b42a:	b30b      	cbz	r3, 800b470 <__sfp+0x68>
 800b42c:	6836      	ldr	r6, [r6, #0]
 800b42e:	e7f7      	b.n	800b420 <__sfp+0x18>
 800b430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b434:	b9d5      	cbnz	r5, 800b46c <__sfp+0x64>
 800b436:	4b16      	ldr	r3, [pc, #88]	; (800b490 <__sfp+0x88>)
 800b438:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b43c:	60e3      	str	r3, [r4, #12]
 800b43e:	6665      	str	r5, [r4, #100]	; 0x64
 800b440:	f000 f847 	bl	800b4d2 <__retarget_lock_init_recursive>
 800b444:	f7ff ff96 	bl	800b374 <__sfp_lock_release>
 800b448:	2208      	movs	r2, #8
 800b44a:	4629      	mov	r1, r5
 800b44c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b454:	6025      	str	r5, [r4, #0]
 800b456:	61a5      	str	r5, [r4, #24]
 800b458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b45c:	f7ff fec2 	bl	800b1e4 <memset>
 800b460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b468:	4620      	mov	r0, r4
 800b46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b46c:	3468      	adds	r4, #104	; 0x68
 800b46e:	e7d9      	b.n	800b424 <__sfp+0x1c>
 800b470:	2104      	movs	r1, #4
 800b472:	4638      	mov	r0, r7
 800b474:	f7ff ff62 	bl	800b33c <__sfmoreglue>
 800b478:	4604      	mov	r4, r0
 800b47a:	6030      	str	r0, [r6, #0]
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d1d5      	bne.n	800b42c <__sfp+0x24>
 800b480:	f7ff ff78 	bl	800b374 <__sfp_lock_release>
 800b484:	230c      	movs	r3, #12
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	e7ee      	b.n	800b468 <__sfp+0x60>
 800b48a:	bf00      	nop
 800b48c:	0800c6e0 	.word	0x0800c6e0
 800b490:	ffff0001 	.word	0xffff0001

0800b494 <_fwalk_reent>:
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	4606      	mov	r6, r0
 800b49a:	4688      	mov	r8, r1
 800b49c:	2700      	movs	r7, #0
 800b49e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b4aa:	d505      	bpl.n	800b4b8 <_fwalk_reent+0x24>
 800b4ac:	6824      	ldr	r4, [r4, #0]
 800b4ae:	2c00      	cmp	r4, #0
 800b4b0:	d1f7      	bne.n	800b4a2 <_fwalk_reent+0xe>
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4b8:	89ab      	ldrh	r3, [r5, #12]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d907      	bls.n	800b4ce <_fwalk_reent+0x3a>
 800b4be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	d003      	beq.n	800b4ce <_fwalk_reent+0x3a>
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	47c0      	blx	r8
 800b4cc:	4307      	orrs	r7, r0
 800b4ce:	3568      	adds	r5, #104	; 0x68
 800b4d0:	e7e9      	b.n	800b4a6 <_fwalk_reent+0x12>

0800b4d2 <__retarget_lock_init_recursive>:
 800b4d2:	4770      	bx	lr

0800b4d4 <__retarget_lock_acquire_recursive>:
 800b4d4:	4770      	bx	lr

0800b4d6 <__retarget_lock_release_recursive>:
 800b4d6:	4770      	bx	lr

0800b4d8 <_malloc_r>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	1ccd      	adds	r5, r1, #3
 800b4dc:	f025 0503 	bic.w	r5, r5, #3
 800b4e0:	3508      	adds	r5, #8
 800b4e2:	2d0c      	cmp	r5, #12
 800b4e4:	bf38      	it	cc
 800b4e6:	250c      	movcc	r5, #12
 800b4e8:	2d00      	cmp	r5, #0
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	db01      	blt.n	800b4f2 <_malloc_r+0x1a>
 800b4ee:	42a9      	cmp	r1, r5
 800b4f0:	d903      	bls.n	800b4fa <_malloc_r+0x22>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	6033      	str	r3, [r6, #0]
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4fa:	f000 ff27 	bl	800c34c <__malloc_lock>
 800b4fe:	4921      	ldr	r1, [pc, #132]	; (800b584 <_malloc_r+0xac>)
 800b500:	680a      	ldr	r2, [r1, #0]
 800b502:	4614      	mov	r4, r2
 800b504:	b99c      	cbnz	r4, 800b52e <_malloc_r+0x56>
 800b506:	4f20      	ldr	r7, [pc, #128]	; (800b588 <_malloc_r+0xb0>)
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	b923      	cbnz	r3, 800b516 <_malloc_r+0x3e>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4630      	mov	r0, r6
 800b510:	f000 fc86 	bl	800be20 <_sbrk_r>
 800b514:	6038      	str	r0, [r7, #0]
 800b516:	4629      	mov	r1, r5
 800b518:	4630      	mov	r0, r6
 800b51a:	f000 fc81 	bl	800be20 <_sbrk_r>
 800b51e:	1c43      	adds	r3, r0, #1
 800b520:	d123      	bne.n	800b56a <_malloc_r+0x92>
 800b522:	230c      	movs	r3, #12
 800b524:	4630      	mov	r0, r6
 800b526:	6033      	str	r3, [r6, #0]
 800b528:	f000 ff16 	bl	800c358 <__malloc_unlock>
 800b52c:	e7e3      	b.n	800b4f6 <_malloc_r+0x1e>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	1b5b      	subs	r3, r3, r5
 800b532:	d417      	bmi.n	800b564 <_malloc_r+0x8c>
 800b534:	2b0b      	cmp	r3, #11
 800b536:	d903      	bls.n	800b540 <_malloc_r+0x68>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	441c      	add	r4, r3
 800b53c:	6025      	str	r5, [r4, #0]
 800b53e:	e004      	b.n	800b54a <_malloc_r+0x72>
 800b540:	6863      	ldr	r3, [r4, #4]
 800b542:	42a2      	cmp	r2, r4
 800b544:	bf0c      	ite	eq
 800b546:	600b      	streq	r3, [r1, #0]
 800b548:	6053      	strne	r3, [r2, #4]
 800b54a:	4630      	mov	r0, r6
 800b54c:	f000 ff04 	bl	800c358 <__malloc_unlock>
 800b550:	f104 000b 	add.w	r0, r4, #11
 800b554:	1d23      	adds	r3, r4, #4
 800b556:	f020 0007 	bic.w	r0, r0, #7
 800b55a:	1ac2      	subs	r2, r0, r3
 800b55c:	d0cc      	beq.n	800b4f8 <_malloc_r+0x20>
 800b55e:	1a1b      	subs	r3, r3, r0
 800b560:	50a3      	str	r3, [r4, r2]
 800b562:	e7c9      	b.n	800b4f8 <_malloc_r+0x20>
 800b564:	4622      	mov	r2, r4
 800b566:	6864      	ldr	r4, [r4, #4]
 800b568:	e7cc      	b.n	800b504 <_malloc_r+0x2c>
 800b56a:	1cc4      	adds	r4, r0, #3
 800b56c:	f024 0403 	bic.w	r4, r4, #3
 800b570:	42a0      	cmp	r0, r4
 800b572:	d0e3      	beq.n	800b53c <_malloc_r+0x64>
 800b574:	1a21      	subs	r1, r4, r0
 800b576:	4630      	mov	r0, r6
 800b578:	f000 fc52 	bl	800be20 <_sbrk_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	d1dd      	bne.n	800b53c <_malloc_r+0x64>
 800b580:	e7cf      	b.n	800b522 <_malloc_r+0x4a>
 800b582:	bf00      	nop
 800b584:	200004a4 	.word	0x200004a4
 800b588:	200004a8 	.word	0x200004a8

0800b58c <__ssputs_r>:
 800b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	688e      	ldr	r6, [r1, #8]
 800b592:	4682      	mov	sl, r0
 800b594:	429e      	cmp	r6, r3
 800b596:	460c      	mov	r4, r1
 800b598:	4690      	mov	r8, r2
 800b59a:	461f      	mov	r7, r3
 800b59c:	d838      	bhi.n	800b610 <__ssputs_r+0x84>
 800b59e:	898a      	ldrh	r2, [r1, #12]
 800b5a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5a4:	d032      	beq.n	800b60c <__ssputs_r+0x80>
 800b5a6:	6825      	ldr	r5, [r4, #0]
 800b5a8:	6909      	ldr	r1, [r1, #16]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	eba5 0901 	sub.w	r9, r5, r1
 800b5b0:	6965      	ldr	r5, [r4, #20]
 800b5b2:	444b      	add	r3, r9
 800b5b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5bc:	106d      	asrs	r5, r5, #1
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	bf38      	it	cc
 800b5c2:	461d      	movcc	r5, r3
 800b5c4:	0553      	lsls	r3, r2, #21
 800b5c6:	d531      	bpl.n	800b62c <__ssputs_r+0xa0>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7ff ff85 	bl	800b4d8 <_malloc_r>
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	b950      	cbnz	r0, 800b5e8 <__ssputs_r+0x5c>
 800b5d2:	230c      	movs	r3, #12
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	f8ca 3000 	str.w	r3, [sl]
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e8:	464a      	mov	r2, r9
 800b5ea:	6921      	ldr	r1, [r4, #16]
 800b5ec:	f7ff fdec 	bl	800b1c8 <memcpy>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	6126      	str	r6, [r4, #16]
 800b5fe:	444e      	add	r6, r9
 800b600:	6026      	str	r6, [r4, #0]
 800b602:	463e      	mov	r6, r7
 800b604:	6165      	str	r5, [r4, #20]
 800b606:	eba5 0509 	sub.w	r5, r5, r9
 800b60a:	60a5      	str	r5, [r4, #8]
 800b60c:	42be      	cmp	r6, r7
 800b60e:	d900      	bls.n	800b612 <__ssputs_r+0x86>
 800b610:	463e      	mov	r6, r7
 800b612:	4632      	mov	r2, r6
 800b614:	4641      	mov	r1, r8
 800b616:	6820      	ldr	r0, [r4, #0]
 800b618:	f000 fe7e 	bl	800c318 <memmove>
 800b61c:	68a3      	ldr	r3, [r4, #8]
 800b61e:	6822      	ldr	r2, [r4, #0]
 800b620:	1b9b      	subs	r3, r3, r6
 800b622:	4432      	add	r2, r6
 800b624:	2000      	movs	r0, #0
 800b626:	60a3      	str	r3, [r4, #8]
 800b628:	6022      	str	r2, [r4, #0]
 800b62a:	e7db      	b.n	800b5e4 <__ssputs_r+0x58>
 800b62c:	462a      	mov	r2, r5
 800b62e:	f000 fee5 	bl	800c3fc <_realloc_r>
 800b632:	4606      	mov	r6, r0
 800b634:	2800      	cmp	r0, #0
 800b636:	d1e1      	bne.n	800b5fc <__ssputs_r+0x70>
 800b638:	4650      	mov	r0, sl
 800b63a:	6921      	ldr	r1, [r4, #16]
 800b63c:	f000 fe92 	bl	800c364 <_free_r>
 800b640:	e7c7      	b.n	800b5d2 <__ssputs_r+0x46>
	...

0800b644 <_svfiprintf_r>:
 800b644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b648:	4698      	mov	r8, r3
 800b64a:	898b      	ldrh	r3, [r1, #12]
 800b64c:	4607      	mov	r7, r0
 800b64e:	061b      	lsls	r3, r3, #24
 800b650:	460d      	mov	r5, r1
 800b652:	4614      	mov	r4, r2
 800b654:	b09d      	sub	sp, #116	; 0x74
 800b656:	d50e      	bpl.n	800b676 <_svfiprintf_r+0x32>
 800b658:	690b      	ldr	r3, [r1, #16]
 800b65a:	b963      	cbnz	r3, 800b676 <_svfiprintf_r+0x32>
 800b65c:	2140      	movs	r1, #64	; 0x40
 800b65e:	f7ff ff3b 	bl	800b4d8 <_malloc_r>
 800b662:	6028      	str	r0, [r5, #0]
 800b664:	6128      	str	r0, [r5, #16]
 800b666:	b920      	cbnz	r0, 800b672 <_svfiprintf_r+0x2e>
 800b668:	230c      	movs	r3, #12
 800b66a:	603b      	str	r3, [r7, #0]
 800b66c:	f04f 30ff 	mov.w	r0, #4294967295
 800b670:	e0d1      	b.n	800b816 <_svfiprintf_r+0x1d2>
 800b672:	2340      	movs	r3, #64	; 0x40
 800b674:	616b      	str	r3, [r5, #20]
 800b676:	2300      	movs	r3, #0
 800b678:	9309      	str	r3, [sp, #36]	; 0x24
 800b67a:	2320      	movs	r3, #32
 800b67c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b680:	2330      	movs	r3, #48	; 0x30
 800b682:	f04f 0901 	mov.w	r9, #1
 800b686:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b830 <_svfiprintf_r+0x1ec>
 800b68e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b692:	4623      	mov	r3, r4
 800b694:	469a      	mov	sl, r3
 800b696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b69a:	b10a      	cbz	r2, 800b6a0 <_svfiprintf_r+0x5c>
 800b69c:	2a25      	cmp	r2, #37	; 0x25
 800b69e:	d1f9      	bne.n	800b694 <_svfiprintf_r+0x50>
 800b6a0:	ebba 0b04 	subs.w	fp, sl, r4
 800b6a4:	d00b      	beq.n	800b6be <_svfiprintf_r+0x7a>
 800b6a6:	465b      	mov	r3, fp
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f7ff ff6d 	bl	800b58c <__ssputs_r>
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	f000 80aa 	beq.w	800b80c <_svfiprintf_r+0x1c8>
 800b6b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ba:	445a      	add	r2, fp
 800b6bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6be:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 80a2 	beq.w	800b80c <_svfiprintf_r+0x1c8>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6d2:	f10a 0a01 	add.w	sl, sl, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	9307      	str	r3, [sp, #28]
 800b6da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6de:	931a      	str	r3, [sp, #104]	; 0x68
 800b6e0:	4654      	mov	r4, sl
 800b6e2:	2205      	movs	r2, #5
 800b6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e8:	4851      	ldr	r0, [pc, #324]	; (800b830 <_svfiprintf_r+0x1ec>)
 800b6ea:	f000 fe07 	bl	800c2fc <memchr>
 800b6ee:	9a04      	ldr	r2, [sp, #16]
 800b6f0:	b9d8      	cbnz	r0, 800b72a <_svfiprintf_r+0xe6>
 800b6f2:	06d0      	lsls	r0, r2, #27
 800b6f4:	bf44      	itt	mi
 800b6f6:	2320      	movmi	r3, #32
 800b6f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6fc:	0711      	lsls	r1, r2, #28
 800b6fe:	bf44      	itt	mi
 800b700:	232b      	movmi	r3, #43	; 0x2b
 800b702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b706:	f89a 3000 	ldrb.w	r3, [sl]
 800b70a:	2b2a      	cmp	r3, #42	; 0x2a
 800b70c:	d015      	beq.n	800b73a <_svfiprintf_r+0xf6>
 800b70e:	4654      	mov	r4, sl
 800b710:	2000      	movs	r0, #0
 800b712:	f04f 0c0a 	mov.w	ip, #10
 800b716:	9a07      	ldr	r2, [sp, #28]
 800b718:	4621      	mov	r1, r4
 800b71a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b71e:	3b30      	subs	r3, #48	; 0x30
 800b720:	2b09      	cmp	r3, #9
 800b722:	d94e      	bls.n	800b7c2 <_svfiprintf_r+0x17e>
 800b724:	b1b0      	cbz	r0, 800b754 <_svfiprintf_r+0x110>
 800b726:	9207      	str	r2, [sp, #28]
 800b728:	e014      	b.n	800b754 <_svfiprintf_r+0x110>
 800b72a:	eba0 0308 	sub.w	r3, r0, r8
 800b72e:	fa09 f303 	lsl.w	r3, r9, r3
 800b732:	4313      	orrs	r3, r2
 800b734:	46a2      	mov	sl, r4
 800b736:	9304      	str	r3, [sp, #16]
 800b738:	e7d2      	b.n	800b6e0 <_svfiprintf_r+0x9c>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	1d19      	adds	r1, r3, #4
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	9103      	str	r1, [sp, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	bfbb      	ittet	lt
 800b746:	425b      	neglt	r3, r3
 800b748:	f042 0202 	orrlt.w	r2, r2, #2
 800b74c:	9307      	strge	r3, [sp, #28]
 800b74e:	9307      	strlt	r3, [sp, #28]
 800b750:	bfb8      	it	lt
 800b752:	9204      	strlt	r2, [sp, #16]
 800b754:	7823      	ldrb	r3, [r4, #0]
 800b756:	2b2e      	cmp	r3, #46	; 0x2e
 800b758:	d10c      	bne.n	800b774 <_svfiprintf_r+0x130>
 800b75a:	7863      	ldrb	r3, [r4, #1]
 800b75c:	2b2a      	cmp	r3, #42	; 0x2a
 800b75e:	d135      	bne.n	800b7cc <_svfiprintf_r+0x188>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	3402      	adds	r4, #2
 800b764:	1d1a      	adds	r2, r3, #4
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	9203      	str	r2, [sp, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	bfb8      	it	lt
 800b76e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b772:	9305      	str	r3, [sp, #20]
 800b774:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b840 <_svfiprintf_r+0x1fc>
 800b778:	2203      	movs	r2, #3
 800b77a:	4650      	mov	r0, sl
 800b77c:	7821      	ldrb	r1, [r4, #0]
 800b77e:	f000 fdbd 	bl	800c2fc <memchr>
 800b782:	b140      	cbz	r0, 800b796 <_svfiprintf_r+0x152>
 800b784:	2340      	movs	r3, #64	; 0x40
 800b786:	eba0 000a 	sub.w	r0, r0, sl
 800b78a:	fa03 f000 	lsl.w	r0, r3, r0
 800b78e:	9b04      	ldr	r3, [sp, #16]
 800b790:	3401      	adds	r4, #1
 800b792:	4303      	orrs	r3, r0
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b79a:	2206      	movs	r2, #6
 800b79c:	4825      	ldr	r0, [pc, #148]	; (800b834 <_svfiprintf_r+0x1f0>)
 800b79e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7a2:	f000 fdab 	bl	800c2fc <memchr>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d038      	beq.n	800b81c <_svfiprintf_r+0x1d8>
 800b7aa:	4b23      	ldr	r3, [pc, #140]	; (800b838 <_svfiprintf_r+0x1f4>)
 800b7ac:	bb1b      	cbnz	r3, 800b7f6 <_svfiprintf_r+0x1b2>
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	3307      	adds	r3, #7
 800b7b2:	f023 0307 	bic.w	r3, r3, #7
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	9303      	str	r3, [sp, #12]
 800b7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7bc:	4433      	add	r3, r6
 800b7be:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c0:	e767      	b.n	800b692 <_svfiprintf_r+0x4e>
 800b7c2:	460c      	mov	r4, r1
 800b7c4:	2001      	movs	r0, #1
 800b7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7ca:	e7a5      	b.n	800b718 <_svfiprintf_r+0xd4>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f04f 0c0a 	mov.w	ip, #10
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	3401      	adds	r4, #1
 800b7d6:	9305      	str	r3, [sp, #20]
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7de:	3a30      	subs	r2, #48	; 0x30
 800b7e0:	2a09      	cmp	r2, #9
 800b7e2:	d903      	bls.n	800b7ec <_svfiprintf_r+0x1a8>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0c5      	beq.n	800b774 <_svfiprintf_r+0x130>
 800b7e8:	9105      	str	r1, [sp, #20]
 800b7ea:	e7c3      	b.n	800b774 <_svfiprintf_r+0x130>
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f4:	e7f0      	b.n	800b7d8 <_svfiprintf_r+0x194>
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <_svfiprintf_r+0x1f8>)
 800b800:	a904      	add	r1, sp, #16
 800b802:	f3af 8000 	nop.w
 800b806:	1c42      	adds	r2, r0, #1
 800b808:	4606      	mov	r6, r0
 800b80a:	d1d6      	bne.n	800b7ba <_svfiprintf_r+0x176>
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	065b      	lsls	r3, r3, #25
 800b810:	f53f af2c 	bmi.w	800b66c <_svfiprintf_r+0x28>
 800b814:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b816:	b01d      	add	sp, #116	; 0x74
 800b818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b81c:	ab03      	add	r3, sp, #12
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	462a      	mov	r2, r5
 800b822:	4638      	mov	r0, r7
 800b824:	4b05      	ldr	r3, [pc, #20]	; (800b83c <_svfiprintf_r+0x1f8>)
 800b826:	a904      	add	r1, sp, #16
 800b828:	f000 f9d4 	bl	800bbd4 <_printf_i>
 800b82c:	e7eb      	b.n	800b806 <_svfiprintf_r+0x1c2>
 800b82e:	bf00      	nop
 800b830:	0800c76c 	.word	0x0800c76c
 800b834:	0800c776 	.word	0x0800c776
 800b838:	00000000 	.word	0x00000000
 800b83c:	0800b58d 	.word	0x0800b58d
 800b840:	0800c772 	.word	0x0800c772

0800b844 <__sfputc_r>:
 800b844:	6893      	ldr	r3, [r2, #8]
 800b846:	b410      	push	{r4}
 800b848:	3b01      	subs	r3, #1
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	6093      	str	r3, [r2, #8]
 800b84e:	da07      	bge.n	800b860 <__sfputc_r+0x1c>
 800b850:	6994      	ldr	r4, [r2, #24]
 800b852:	42a3      	cmp	r3, r4
 800b854:	db01      	blt.n	800b85a <__sfputc_r+0x16>
 800b856:	290a      	cmp	r1, #10
 800b858:	d102      	bne.n	800b860 <__sfputc_r+0x1c>
 800b85a:	bc10      	pop	{r4}
 800b85c:	f000 bb34 	b.w	800bec8 <__swbuf_r>
 800b860:	6813      	ldr	r3, [r2, #0]
 800b862:	1c58      	adds	r0, r3, #1
 800b864:	6010      	str	r0, [r2, #0]
 800b866:	7019      	strb	r1, [r3, #0]
 800b868:	4608      	mov	r0, r1
 800b86a:	bc10      	pop	{r4}
 800b86c:	4770      	bx	lr

0800b86e <__sfputs_r>:
 800b86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	4614      	mov	r4, r2
 800b876:	18d5      	adds	r5, r2, r3
 800b878:	42ac      	cmp	r4, r5
 800b87a:	d101      	bne.n	800b880 <__sfputs_r+0x12>
 800b87c:	2000      	movs	r0, #0
 800b87e:	e007      	b.n	800b890 <__sfputs_r+0x22>
 800b880:	463a      	mov	r2, r7
 800b882:	4630      	mov	r0, r6
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	f7ff ffdc 	bl	800b844 <__sfputc_r>
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d1f3      	bne.n	800b878 <__sfputs_r+0xa>
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b894 <_vfiprintf_r>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	460d      	mov	r5, r1
 800b89a:	4614      	mov	r4, r2
 800b89c:	4698      	mov	r8, r3
 800b89e:	4606      	mov	r6, r0
 800b8a0:	b09d      	sub	sp, #116	; 0x74
 800b8a2:	b118      	cbz	r0, 800b8ac <_vfiprintf_r+0x18>
 800b8a4:	6983      	ldr	r3, [r0, #24]
 800b8a6:	b90b      	cbnz	r3, 800b8ac <_vfiprintf_r+0x18>
 800b8a8:	f7ff fd76 	bl	800b398 <__sinit>
 800b8ac:	4b89      	ldr	r3, [pc, #548]	; (800bad4 <_vfiprintf_r+0x240>)
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	d11b      	bne.n	800b8ea <_vfiprintf_r+0x56>
 800b8b2:	6875      	ldr	r5, [r6, #4]
 800b8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b6:	07d9      	lsls	r1, r3, #31
 800b8b8:	d405      	bmi.n	800b8c6 <_vfiprintf_r+0x32>
 800b8ba:	89ab      	ldrh	r3, [r5, #12]
 800b8bc:	059a      	lsls	r2, r3, #22
 800b8be:	d402      	bmi.n	800b8c6 <_vfiprintf_r+0x32>
 800b8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8c2:	f7ff fe07 	bl	800b4d4 <__retarget_lock_acquire_recursive>
 800b8c6:	89ab      	ldrh	r3, [r5, #12]
 800b8c8:	071b      	lsls	r3, r3, #28
 800b8ca:	d501      	bpl.n	800b8d0 <_vfiprintf_r+0x3c>
 800b8cc:	692b      	ldr	r3, [r5, #16]
 800b8ce:	b9eb      	cbnz	r3, 800b90c <_vfiprintf_r+0x78>
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f000 fb5c 	bl	800bf90 <__swsetup_r>
 800b8d8:	b1c0      	cbz	r0, 800b90c <_vfiprintf_r+0x78>
 800b8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8dc:	07dc      	lsls	r4, r3, #31
 800b8de:	d50e      	bpl.n	800b8fe <_vfiprintf_r+0x6a>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	b01d      	add	sp, #116	; 0x74
 800b8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ea:	4b7b      	ldr	r3, [pc, #492]	; (800bad8 <_vfiprintf_r+0x244>)
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	d101      	bne.n	800b8f4 <_vfiprintf_r+0x60>
 800b8f0:	68b5      	ldr	r5, [r6, #8]
 800b8f2:	e7df      	b.n	800b8b4 <_vfiprintf_r+0x20>
 800b8f4:	4b79      	ldr	r3, [pc, #484]	; (800badc <_vfiprintf_r+0x248>)
 800b8f6:	429d      	cmp	r5, r3
 800b8f8:	bf08      	it	eq
 800b8fa:	68f5      	ldreq	r5, [r6, #12]
 800b8fc:	e7da      	b.n	800b8b4 <_vfiprintf_r+0x20>
 800b8fe:	89ab      	ldrh	r3, [r5, #12]
 800b900:	0598      	lsls	r0, r3, #22
 800b902:	d4ed      	bmi.n	800b8e0 <_vfiprintf_r+0x4c>
 800b904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b906:	f7ff fde6 	bl	800b4d6 <__retarget_lock_release_recursive>
 800b90a:	e7e9      	b.n	800b8e0 <_vfiprintf_r+0x4c>
 800b90c:	2300      	movs	r3, #0
 800b90e:	9309      	str	r3, [sp, #36]	; 0x24
 800b910:	2320      	movs	r3, #32
 800b912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b916:	2330      	movs	r3, #48	; 0x30
 800b918:	f04f 0901 	mov.w	r9, #1
 800b91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b920:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bae0 <_vfiprintf_r+0x24c>
 800b924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b928:	4623      	mov	r3, r4
 800b92a:	469a      	mov	sl, r3
 800b92c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b930:	b10a      	cbz	r2, 800b936 <_vfiprintf_r+0xa2>
 800b932:	2a25      	cmp	r2, #37	; 0x25
 800b934:	d1f9      	bne.n	800b92a <_vfiprintf_r+0x96>
 800b936:	ebba 0b04 	subs.w	fp, sl, r4
 800b93a:	d00b      	beq.n	800b954 <_vfiprintf_r+0xc0>
 800b93c:	465b      	mov	r3, fp
 800b93e:	4622      	mov	r2, r4
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff ff93 	bl	800b86e <__sfputs_r>
 800b948:	3001      	adds	r0, #1
 800b94a:	f000 80aa 	beq.w	800baa2 <_vfiprintf_r+0x20e>
 800b94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b950:	445a      	add	r2, fp
 800b952:	9209      	str	r2, [sp, #36]	; 0x24
 800b954:	f89a 3000 	ldrb.w	r3, [sl]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	f000 80a2 	beq.w	800baa2 <_vfiprintf_r+0x20e>
 800b95e:	2300      	movs	r3, #0
 800b960:	f04f 32ff 	mov.w	r2, #4294967295
 800b964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b968:	f10a 0a01 	add.w	sl, sl, #1
 800b96c:	9304      	str	r3, [sp, #16]
 800b96e:	9307      	str	r3, [sp, #28]
 800b970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b974:	931a      	str	r3, [sp, #104]	; 0x68
 800b976:	4654      	mov	r4, sl
 800b978:	2205      	movs	r2, #5
 800b97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97e:	4858      	ldr	r0, [pc, #352]	; (800bae0 <_vfiprintf_r+0x24c>)
 800b980:	f000 fcbc 	bl	800c2fc <memchr>
 800b984:	9a04      	ldr	r2, [sp, #16]
 800b986:	b9d8      	cbnz	r0, 800b9c0 <_vfiprintf_r+0x12c>
 800b988:	06d1      	lsls	r1, r2, #27
 800b98a:	bf44      	itt	mi
 800b98c:	2320      	movmi	r3, #32
 800b98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b992:	0713      	lsls	r3, r2, #28
 800b994:	bf44      	itt	mi
 800b996:	232b      	movmi	r3, #43	; 0x2b
 800b998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b99c:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a2:	d015      	beq.n	800b9d0 <_vfiprintf_r+0x13c>
 800b9a4:	4654      	mov	r4, sl
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	f04f 0c0a 	mov.w	ip, #10
 800b9ac:	9a07      	ldr	r2, [sp, #28]
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b4:	3b30      	subs	r3, #48	; 0x30
 800b9b6:	2b09      	cmp	r3, #9
 800b9b8:	d94e      	bls.n	800ba58 <_vfiprintf_r+0x1c4>
 800b9ba:	b1b0      	cbz	r0, 800b9ea <_vfiprintf_r+0x156>
 800b9bc:	9207      	str	r2, [sp, #28]
 800b9be:	e014      	b.n	800b9ea <_vfiprintf_r+0x156>
 800b9c0:	eba0 0308 	sub.w	r3, r0, r8
 800b9c4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	46a2      	mov	sl, r4
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	e7d2      	b.n	800b976 <_vfiprintf_r+0xe2>
 800b9d0:	9b03      	ldr	r3, [sp, #12]
 800b9d2:	1d19      	adds	r1, r3, #4
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	9103      	str	r1, [sp, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	bfbb      	ittet	lt
 800b9dc:	425b      	neglt	r3, r3
 800b9de:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e2:	9307      	strge	r3, [sp, #28]
 800b9e4:	9307      	strlt	r3, [sp, #28]
 800b9e6:	bfb8      	it	lt
 800b9e8:	9204      	strlt	r2, [sp, #16]
 800b9ea:	7823      	ldrb	r3, [r4, #0]
 800b9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ee:	d10c      	bne.n	800ba0a <_vfiprintf_r+0x176>
 800b9f0:	7863      	ldrb	r3, [r4, #1]
 800b9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f4:	d135      	bne.n	800ba62 <_vfiprintf_r+0x1ce>
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	3402      	adds	r4, #2
 800b9fa:	1d1a      	adds	r2, r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9203      	str	r2, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bfb8      	it	lt
 800ba04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba08:	9305      	str	r3, [sp, #20]
 800ba0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800baf0 <_vfiprintf_r+0x25c>
 800ba0e:	2203      	movs	r2, #3
 800ba10:	4650      	mov	r0, sl
 800ba12:	7821      	ldrb	r1, [r4, #0]
 800ba14:	f000 fc72 	bl	800c2fc <memchr>
 800ba18:	b140      	cbz	r0, 800ba2c <_vfiprintf_r+0x198>
 800ba1a:	2340      	movs	r3, #64	; 0x40
 800ba1c:	eba0 000a 	sub.w	r0, r0, sl
 800ba20:	fa03 f000 	lsl.w	r0, r3, r0
 800ba24:	9b04      	ldr	r3, [sp, #16]
 800ba26:	3401      	adds	r4, #1
 800ba28:	4303      	orrs	r3, r0
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba30:	2206      	movs	r2, #6
 800ba32:	482c      	ldr	r0, [pc, #176]	; (800bae4 <_vfiprintf_r+0x250>)
 800ba34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba38:	f000 fc60 	bl	800c2fc <memchr>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d03f      	beq.n	800bac0 <_vfiprintf_r+0x22c>
 800ba40:	4b29      	ldr	r3, [pc, #164]	; (800bae8 <_vfiprintf_r+0x254>)
 800ba42:	bb1b      	cbnz	r3, 800ba8c <_vfiprintf_r+0x1f8>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	3307      	adds	r3, #7
 800ba48:	f023 0307 	bic.w	r3, r3, #7
 800ba4c:	3308      	adds	r3, #8
 800ba4e:	9303      	str	r3, [sp, #12]
 800ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba52:	443b      	add	r3, r7
 800ba54:	9309      	str	r3, [sp, #36]	; 0x24
 800ba56:	e767      	b.n	800b928 <_vfiprintf_r+0x94>
 800ba58:	460c      	mov	r4, r1
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba60:	e7a5      	b.n	800b9ae <_vfiprintf_r+0x11a>
 800ba62:	2300      	movs	r3, #0
 800ba64:	f04f 0c0a 	mov.w	ip, #10
 800ba68:	4619      	mov	r1, r3
 800ba6a:	3401      	adds	r4, #1
 800ba6c:	9305      	str	r3, [sp, #20]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba74:	3a30      	subs	r2, #48	; 0x30
 800ba76:	2a09      	cmp	r2, #9
 800ba78:	d903      	bls.n	800ba82 <_vfiprintf_r+0x1ee>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0c5      	beq.n	800ba0a <_vfiprintf_r+0x176>
 800ba7e:	9105      	str	r1, [sp, #20]
 800ba80:	e7c3      	b.n	800ba0a <_vfiprintf_r+0x176>
 800ba82:	4604      	mov	r4, r0
 800ba84:	2301      	movs	r3, #1
 800ba86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba8a:	e7f0      	b.n	800ba6e <_vfiprintf_r+0x1da>
 800ba8c:	ab03      	add	r3, sp, #12
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	462a      	mov	r2, r5
 800ba92:	4630      	mov	r0, r6
 800ba94:	4b15      	ldr	r3, [pc, #84]	; (800baec <_vfiprintf_r+0x258>)
 800ba96:	a904      	add	r1, sp, #16
 800ba98:	f3af 8000 	nop.w
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	1c78      	adds	r0, r7, #1
 800baa0:	d1d6      	bne.n	800ba50 <_vfiprintf_r+0x1bc>
 800baa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baa4:	07d9      	lsls	r1, r3, #31
 800baa6:	d405      	bmi.n	800bab4 <_vfiprintf_r+0x220>
 800baa8:	89ab      	ldrh	r3, [r5, #12]
 800baaa:	059a      	lsls	r2, r3, #22
 800baac:	d402      	bmi.n	800bab4 <_vfiprintf_r+0x220>
 800baae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bab0:	f7ff fd11 	bl	800b4d6 <__retarget_lock_release_recursive>
 800bab4:	89ab      	ldrh	r3, [r5, #12]
 800bab6:	065b      	lsls	r3, r3, #25
 800bab8:	f53f af12 	bmi.w	800b8e0 <_vfiprintf_r+0x4c>
 800babc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800babe:	e711      	b.n	800b8e4 <_vfiprintf_r+0x50>
 800bac0:	ab03      	add	r3, sp, #12
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	462a      	mov	r2, r5
 800bac6:	4630      	mov	r0, r6
 800bac8:	4b08      	ldr	r3, [pc, #32]	; (800baec <_vfiprintf_r+0x258>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	f000 f882 	bl	800bbd4 <_printf_i>
 800bad0:	e7e4      	b.n	800ba9c <_vfiprintf_r+0x208>
 800bad2:	bf00      	nop
 800bad4:	0800c72c 	.word	0x0800c72c
 800bad8:	0800c74c 	.word	0x0800c74c
 800badc:	0800c70c 	.word	0x0800c70c
 800bae0:	0800c76c 	.word	0x0800c76c
 800bae4:	0800c776 	.word	0x0800c776
 800bae8:	00000000 	.word	0x00000000
 800baec:	0800b86f 	.word	0x0800b86f
 800baf0:	0800c772 	.word	0x0800c772

0800baf4 <_printf_common>:
 800baf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf8:	4616      	mov	r6, r2
 800bafa:	4699      	mov	r9, r3
 800bafc:	688a      	ldr	r2, [r1, #8]
 800bafe:	690b      	ldr	r3, [r1, #16]
 800bb00:	4607      	mov	r7, r0
 800bb02:	4293      	cmp	r3, r2
 800bb04:	bfb8      	it	lt
 800bb06:	4613      	movlt	r3, r2
 800bb08:	6033      	str	r3, [r6, #0]
 800bb0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb0e:	460c      	mov	r4, r1
 800bb10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb14:	b10a      	cbz	r2, 800bb1a <_printf_common+0x26>
 800bb16:	3301      	adds	r3, #1
 800bb18:	6033      	str	r3, [r6, #0]
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	0699      	lsls	r1, r3, #26
 800bb1e:	bf42      	ittt	mi
 800bb20:	6833      	ldrmi	r3, [r6, #0]
 800bb22:	3302      	addmi	r3, #2
 800bb24:	6033      	strmi	r3, [r6, #0]
 800bb26:	6825      	ldr	r5, [r4, #0]
 800bb28:	f015 0506 	ands.w	r5, r5, #6
 800bb2c:	d106      	bne.n	800bb3c <_printf_common+0x48>
 800bb2e:	f104 0a19 	add.w	sl, r4, #25
 800bb32:	68e3      	ldr	r3, [r4, #12]
 800bb34:	6832      	ldr	r2, [r6, #0]
 800bb36:	1a9b      	subs	r3, r3, r2
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	dc28      	bgt.n	800bb8e <_printf_common+0x9a>
 800bb3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb40:	1e13      	subs	r3, r2, #0
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	bf18      	it	ne
 800bb46:	2301      	movne	r3, #1
 800bb48:	0692      	lsls	r2, r2, #26
 800bb4a:	d42d      	bmi.n	800bba8 <_printf_common+0xb4>
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	4638      	mov	r0, r7
 800bb50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb54:	47c0      	blx	r8
 800bb56:	3001      	adds	r0, #1
 800bb58:	d020      	beq.n	800bb9c <_printf_common+0xa8>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	68e5      	ldr	r5, [r4, #12]
 800bb5e:	f003 0306 	and.w	r3, r3, #6
 800bb62:	2b04      	cmp	r3, #4
 800bb64:	bf18      	it	ne
 800bb66:	2500      	movne	r5, #0
 800bb68:	6832      	ldr	r2, [r6, #0]
 800bb6a:	f04f 0600 	mov.w	r6, #0
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	bf08      	it	eq
 800bb72:	1aad      	subeq	r5, r5, r2
 800bb74:	6922      	ldr	r2, [r4, #16]
 800bb76:	bf08      	it	eq
 800bb78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	bfc4      	itt	gt
 800bb80:	1a9b      	subgt	r3, r3, r2
 800bb82:	18ed      	addgt	r5, r5, r3
 800bb84:	341a      	adds	r4, #26
 800bb86:	42b5      	cmp	r5, r6
 800bb88:	d11a      	bne.n	800bbc0 <_printf_common+0xcc>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	e008      	b.n	800bba0 <_printf_common+0xac>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	4652      	mov	r2, sl
 800bb92:	4649      	mov	r1, r9
 800bb94:	4638      	mov	r0, r7
 800bb96:	47c0      	blx	r8
 800bb98:	3001      	adds	r0, #1
 800bb9a:	d103      	bne.n	800bba4 <_printf_common+0xb0>
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba4:	3501      	adds	r5, #1
 800bba6:	e7c4      	b.n	800bb32 <_printf_common+0x3e>
 800bba8:	2030      	movs	r0, #48	; 0x30
 800bbaa:	18e1      	adds	r1, r4, r3
 800bbac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbb6:	4422      	add	r2, r4
 800bbb8:	3302      	adds	r3, #2
 800bbba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbbe:	e7c5      	b.n	800bb4c <_printf_common+0x58>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	47c0      	blx	r8
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d0e6      	beq.n	800bb9c <_printf_common+0xa8>
 800bbce:	3601      	adds	r6, #1
 800bbd0:	e7d9      	b.n	800bb86 <_printf_common+0x92>
	...

0800bbd4 <_printf_i>:
 800bbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd8:	460c      	mov	r4, r1
 800bbda:	7e27      	ldrb	r7, [r4, #24]
 800bbdc:	4691      	mov	r9, r2
 800bbde:	2f78      	cmp	r7, #120	; 0x78
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	469a      	mov	sl, r3
 800bbe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbea:	d807      	bhi.n	800bbfc <_printf_i+0x28>
 800bbec:	2f62      	cmp	r7, #98	; 0x62
 800bbee:	d80a      	bhi.n	800bc06 <_printf_i+0x32>
 800bbf0:	2f00      	cmp	r7, #0
 800bbf2:	f000 80d9 	beq.w	800bda8 <_printf_i+0x1d4>
 800bbf6:	2f58      	cmp	r7, #88	; 0x58
 800bbf8:	f000 80a4 	beq.w	800bd44 <_printf_i+0x170>
 800bbfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc04:	e03a      	b.n	800bc7c <_printf_i+0xa8>
 800bc06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc0a:	2b15      	cmp	r3, #21
 800bc0c:	d8f6      	bhi.n	800bbfc <_printf_i+0x28>
 800bc0e:	a001      	add	r0, pc, #4	; (adr r0, 800bc14 <_printf_i+0x40>)
 800bc10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc14:	0800bc6d 	.word	0x0800bc6d
 800bc18:	0800bc81 	.word	0x0800bc81
 800bc1c:	0800bbfd 	.word	0x0800bbfd
 800bc20:	0800bbfd 	.word	0x0800bbfd
 800bc24:	0800bbfd 	.word	0x0800bbfd
 800bc28:	0800bbfd 	.word	0x0800bbfd
 800bc2c:	0800bc81 	.word	0x0800bc81
 800bc30:	0800bbfd 	.word	0x0800bbfd
 800bc34:	0800bbfd 	.word	0x0800bbfd
 800bc38:	0800bbfd 	.word	0x0800bbfd
 800bc3c:	0800bbfd 	.word	0x0800bbfd
 800bc40:	0800bd8f 	.word	0x0800bd8f
 800bc44:	0800bcb1 	.word	0x0800bcb1
 800bc48:	0800bd71 	.word	0x0800bd71
 800bc4c:	0800bbfd 	.word	0x0800bbfd
 800bc50:	0800bbfd 	.word	0x0800bbfd
 800bc54:	0800bdb1 	.word	0x0800bdb1
 800bc58:	0800bbfd 	.word	0x0800bbfd
 800bc5c:	0800bcb1 	.word	0x0800bcb1
 800bc60:	0800bbfd 	.word	0x0800bbfd
 800bc64:	0800bbfd 	.word	0x0800bbfd
 800bc68:	0800bd79 	.word	0x0800bd79
 800bc6c:	680b      	ldr	r3, [r1, #0]
 800bc6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc72:	1d1a      	adds	r2, r3, #4
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	600a      	str	r2, [r1, #0]
 800bc78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e0a4      	b.n	800bdca <_printf_i+0x1f6>
 800bc80:	6825      	ldr	r5, [r4, #0]
 800bc82:	6808      	ldr	r0, [r1, #0]
 800bc84:	062e      	lsls	r6, r5, #24
 800bc86:	f100 0304 	add.w	r3, r0, #4
 800bc8a:	d50a      	bpl.n	800bca2 <_printf_i+0xce>
 800bc8c:	6805      	ldr	r5, [r0, #0]
 800bc8e:	600b      	str	r3, [r1, #0]
 800bc90:	2d00      	cmp	r5, #0
 800bc92:	da03      	bge.n	800bc9c <_printf_i+0xc8>
 800bc94:	232d      	movs	r3, #45	; 0x2d
 800bc96:	426d      	negs	r5, r5
 800bc98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc9c:	230a      	movs	r3, #10
 800bc9e:	485e      	ldr	r0, [pc, #376]	; (800be18 <_printf_i+0x244>)
 800bca0:	e019      	b.n	800bcd6 <_printf_i+0x102>
 800bca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bca6:	6805      	ldr	r5, [r0, #0]
 800bca8:	600b      	str	r3, [r1, #0]
 800bcaa:	bf18      	it	ne
 800bcac:	b22d      	sxthne	r5, r5
 800bcae:	e7ef      	b.n	800bc90 <_printf_i+0xbc>
 800bcb0:	680b      	ldr	r3, [r1, #0]
 800bcb2:	6825      	ldr	r5, [r4, #0]
 800bcb4:	1d18      	adds	r0, r3, #4
 800bcb6:	6008      	str	r0, [r1, #0]
 800bcb8:	0628      	lsls	r0, r5, #24
 800bcba:	d501      	bpl.n	800bcc0 <_printf_i+0xec>
 800bcbc:	681d      	ldr	r5, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <_printf_i+0xf2>
 800bcc0:	0669      	lsls	r1, r5, #25
 800bcc2:	d5fb      	bpl.n	800bcbc <_printf_i+0xe8>
 800bcc4:	881d      	ldrh	r5, [r3, #0]
 800bcc6:	2f6f      	cmp	r7, #111	; 0x6f
 800bcc8:	bf0c      	ite	eq
 800bcca:	2308      	moveq	r3, #8
 800bccc:	230a      	movne	r3, #10
 800bcce:	4852      	ldr	r0, [pc, #328]	; (800be18 <_printf_i+0x244>)
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcd6:	6866      	ldr	r6, [r4, #4]
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	bfa8      	it	ge
 800bcdc:	6821      	ldrge	r1, [r4, #0]
 800bcde:	60a6      	str	r6, [r4, #8]
 800bce0:	bfa4      	itt	ge
 800bce2:	f021 0104 	bicge.w	r1, r1, #4
 800bce6:	6021      	strge	r1, [r4, #0]
 800bce8:	b90d      	cbnz	r5, 800bcee <_printf_i+0x11a>
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	d04d      	beq.n	800bd8a <_printf_i+0x1b6>
 800bcee:	4616      	mov	r6, r2
 800bcf0:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcf4:	fb03 5711 	mls	r7, r3, r1, r5
 800bcf8:	5dc7      	ldrb	r7, [r0, r7]
 800bcfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcfe:	462f      	mov	r7, r5
 800bd00:	42bb      	cmp	r3, r7
 800bd02:	460d      	mov	r5, r1
 800bd04:	d9f4      	bls.n	800bcf0 <_printf_i+0x11c>
 800bd06:	2b08      	cmp	r3, #8
 800bd08:	d10b      	bne.n	800bd22 <_printf_i+0x14e>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	07df      	lsls	r7, r3, #31
 800bd0e:	d508      	bpl.n	800bd22 <_printf_i+0x14e>
 800bd10:	6923      	ldr	r3, [r4, #16]
 800bd12:	6861      	ldr	r1, [r4, #4]
 800bd14:	4299      	cmp	r1, r3
 800bd16:	bfde      	ittt	le
 800bd18:	2330      	movle	r3, #48	; 0x30
 800bd1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd22:	1b92      	subs	r2, r2, r6
 800bd24:	6122      	str	r2, [r4, #16]
 800bd26:	464b      	mov	r3, r9
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	f8cd a000 	str.w	sl, [sp]
 800bd30:	aa03      	add	r2, sp, #12
 800bd32:	f7ff fedf 	bl	800baf4 <_printf_common>
 800bd36:	3001      	adds	r0, #1
 800bd38:	d14c      	bne.n	800bdd4 <_printf_i+0x200>
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	b004      	add	sp, #16
 800bd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd44:	4834      	ldr	r0, [pc, #208]	; (800be18 <_printf_i+0x244>)
 800bd46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd4a:	680e      	ldr	r6, [r1, #0]
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd52:	061f      	lsls	r7, r3, #24
 800bd54:	600e      	str	r6, [r1, #0]
 800bd56:	d514      	bpl.n	800bd82 <_printf_i+0x1ae>
 800bd58:	07d9      	lsls	r1, r3, #31
 800bd5a:	bf44      	itt	mi
 800bd5c:	f043 0320 	orrmi.w	r3, r3, #32
 800bd60:	6023      	strmi	r3, [r4, #0]
 800bd62:	b91d      	cbnz	r5, 800bd6c <_printf_i+0x198>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	f023 0320 	bic.w	r3, r3, #32
 800bd6a:	6023      	str	r3, [r4, #0]
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	e7af      	b.n	800bcd0 <_printf_i+0xfc>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	f043 0320 	orr.w	r3, r3, #32
 800bd76:	6023      	str	r3, [r4, #0]
 800bd78:	2378      	movs	r3, #120	; 0x78
 800bd7a:	4828      	ldr	r0, [pc, #160]	; (800be1c <_printf_i+0x248>)
 800bd7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd80:	e7e3      	b.n	800bd4a <_printf_i+0x176>
 800bd82:	065e      	lsls	r6, r3, #25
 800bd84:	bf48      	it	mi
 800bd86:	b2ad      	uxthmi	r5, r5
 800bd88:	e7e6      	b.n	800bd58 <_printf_i+0x184>
 800bd8a:	4616      	mov	r6, r2
 800bd8c:	e7bb      	b.n	800bd06 <_printf_i+0x132>
 800bd8e:	680b      	ldr	r3, [r1, #0]
 800bd90:	6826      	ldr	r6, [r4, #0]
 800bd92:	1d1d      	adds	r5, r3, #4
 800bd94:	6960      	ldr	r0, [r4, #20]
 800bd96:	600d      	str	r5, [r1, #0]
 800bd98:	0635      	lsls	r5, r6, #24
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	d501      	bpl.n	800bda2 <_printf_i+0x1ce>
 800bd9e:	6018      	str	r0, [r3, #0]
 800bda0:	e002      	b.n	800bda8 <_printf_i+0x1d4>
 800bda2:	0671      	lsls	r1, r6, #25
 800bda4:	d5fb      	bpl.n	800bd9e <_printf_i+0x1ca>
 800bda6:	8018      	strh	r0, [r3, #0]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	4616      	mov	r6, r2
 800bdac:	6123      	str	r3, [r4, #16]
 800bdae:	e7ba      	b.n	800bd26 <_printf_i+0x152>
 800bdb0:	680b      	ldr	r3, [r1, #0]
 800bdb2:	1d1a      	adds	r2, r3, #4
 800bdb4:	600a      	str	r2, [r1, #0]
 800bdb6:	681e      	ldr	r6, [r3, #0]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4630      	mov	r0, r6
 800bdbc:	6862      	ldr	r2, [r4, #4]
 800bdbe:	f000 fa9d 	bl	800c2fc <memchr>
 800bdc2:	b108      	cbz	r0, 800bdc8 <_printf_i+0x1f4>
 800bdc4:	1b80      	subs	r0, r0, r6
 800bdc6:	6060      	str	r0, [r4, #4]
 800bdc8:	6863      	ldr	r3, [r4, #4]
 800bdca:	6123      	str	r3, [r4, #16]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd2:	e7a8      	b.n	800bd26 <_printf_i+0x152>
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	4640      	mov	r0, r8
 800bdda:	6923      	ldr	r3, [r4, #16]
 800bddc:	47d0      	blx	sl
 800bdde:	3001      	adds	r0, #1
 800bde0:	d0ab      	beq.n	800bd3a <_printf_i+0x166>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	079b      	lsls	r3, r3, #30
 800bde6:	d413      	bmi.n	800be10 <_printf_i+0x23c>
 800bde8:	68e0      	ldr	r0, [r4, #12]
 800bdea:	9b03      	ldr	r3, [sp, #12]
 800bdec:	4298      	cmp	r0, r3
 800bdee:	bfb8      	it	lt
 800bdf0:	4618      	movlt	r0, r3
 800bdf2:	e7a4      	b.n	800bd3e <_printf_i+0x16a>
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	4632      	mov	r2, r6
 800bdf8:	4649      	mov	r1, r9
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	47d0      	blx	sl
 800bdfe:	3001      	adds	r0, #1
 800be00:	d09b      	beq.n	800bd3a <_printf_i+0x166>
 800be02:	3501      	adds	r5, #1
 800be04:	68e3      	ldr	r3, [r4, #12]
 800be06:	9903      	ldr	r1, [sp, #12]
 800be08:	1a5b      	subs	r3, r3, r1
 800be0a:	42ab      	cmp	r3, r5
 800be0c:	dcf2      	bgt.n	800bdf4 <_printf_i+0x220>
 800be0e:	e7eb      	b.n	800bde8 <_printf_i+0x214>
 800be10:	2500      	movs	r5, #0
 800be12:	f104 0619 	add.w	r6, r4, #25
 800be16:	e7f5      	b.n	800be04 <_printf_i+0x230>
 800be18:	0800c77d 	.word	0x0800c77d
 800be1c:	0800c78e 	.word	0x0800c78e

0800be20 <_sbrk_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	2300      	movs	r3, #0
 800be24:	4d05      	ldr	r5, [pc, #20]	; (800be3c <_sbrk_r+0x1c>)
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7f6 fd4e 	bl	80028cc <_sbrk>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_sbrk_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_sbrk_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	200015ac 	.word	0x200015ac

0800be40 <__sread>:
 800be40:	b510      	push	{r4, lr}
 800be42:	460c      	mov	r4, r1
 800be44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be48:	f000 fafe 	bl	800c448 <_read_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	bfab      	itete	ge
 800be50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be52:	89a3      	ldrhlt	r3, [r4, #12]
 800be54:	181b      	addge	r3, r3, r0
 800be56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be5a:	bfac      	ite	ge
 800be5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be5e:	81a3      	strhlt	r3, [r4, #12]
 800be60:	bd10      	pop	{r4, pc}

0800be62 <__swrite>:
 800be62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be66:	461f      	mov	r7, r3
 800be68:	898b      	ldrh	r3, [r1, #12]
 800be6a:	4605      	mov	r5, r0
 800be6c:	05db      	lsls	r3, r3, #23
 800be6e:	460c      	mov	r4, r1
 800be70:	4616      	mov	r6, r2
 800be72:	d505      	bpl.n	800be80 <__swrite+0x1e>
 800be74:	2302      	movs	r3, #2
 800be76:	2200      	movs	r2, #0
 800be78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be7c:	f000 f9c8 	bl	800c210 <_lseek_r>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	4632      	mov	r2, r6
 800be84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	4628      	mov	r0, r5
 800be8c:	463b      	mov	r3, r7
 800be8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	f000 b869 	b.w	800bf6c <_write_r>

0800be9a <__sseek>:
 800be9a:	b510      	push	{r4, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea2:	f000 f9b5 	bl	800c210 <_lseek_r>
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	bf15      	itete	ne
 800beac:	6560      	strne	r0, [r4, #84]	; 0x54
 800beae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800beb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800beb6:	81a3      	strheq	r3, [r4, #12]
 800beb8:	bf18      	it	ne
 800beba:	81a3      	strhne	r3, [r4, #12]
 800bebc:	bd10      	pop	{r4, pc}

0800bebe <__sclose>:
 800bebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bec2:	f000 b8d3 	b.w	800c06c <_close_r>
	...

0800bec8 <__swbuf_r>:
 800bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beca:	460e      	mov	r6, r1
 800becc:	4614      	mov	r4, r2
 800bece:	4605      	mov	r5, r0
 800bed0:	b118      	cbz	r0, 800beda <__swbuf_r+0x12>
 800bed2:	6983      	ldr	r3, [r0, #24]
 800bed4:	b90b      	cbnz	r3, 800beda <__swbuf_r+0x12>
 800bed6:	f7ff fa5f 	bl	800b398 <__sinit>
 800beda:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <__swbuf_r+0x98>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	d12b      	bne.n	800bf38 <__swbuf_r+0x70>
 800bee0:	686c      	ldr	r4, [r5, #4]
 800bee2:	69a3      	ldr	r3, [r4, #24]
 800bee4:	60a3      	str	r3, [r4, #8]
 800bee6:	89a3      	ldrh	r3, [r4, #12]
 800bee8:	071a      	lsls	r2, r3, #28
 800beea:	d52f      	bpl.n	800bf4c <__swbuf_r+0x84>
 800beec:	6923      	ldr	r3, [r4, #16]
 800beee:	b36b      	cbz	r3, 800bf4c <__swbuf_r+0x84>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	6820      	ldr	r0, [r4, #0]
 800bef4:	b2f6      	uxtb	r6, r6
 800bef6:	1ac0      	subs	r0, r0, r3
 800bef8:	6963      	ldr	r3, [r4, #20]
 800befa:	4637      	mov	r7, r6
 800befc:	4283      	cmp	r3, r0
 800befe:	dc04      	bgt.n	800bf0a <__swbuf_r+0x42>
 800bf00:	4621      	mov	r1, r4
 800bf02:	4628      	mov	r0, r5
 800bf04:	f000 f948 	bl	800c198 <_fflush_r>
 800bf08:	bb30      	cbnz	r0, 800bf58 <__swbuf_r+0x90>
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	60a3      	str	r3, [r4, #8]
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	6022      	str	r2, [r4, #0]
 800bf18:	701e      	strb	r6, [r3, #0]
 800bf1a:	6963      	ldr	r3, [r4, #20]
 800bf1c:	4283      	cmp	r3, r0
 800bf1e:	d004      	beq.n	800bf2a <__swbuf_r+0x62>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	07db      	lsls	r3, r3, #31
 800bf24:	d506      	bpl.n	800bf34 <__swbuf_r+0x6c>
 800bf26:	2e0a      	cmp	r6, #10
 800bf28:	d104      	bne.n	800bf34 <__swbuf_r+0x6c>
 800bf2a:	4621      	mov	r1, r4
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	f000 f933 	bl	800c198 <_fflush_r>
 800bf32:	b988      	cbnz	r0, 800bf58 <__swbuf_r+0x90>
 800bf34:	4638      	mov	r0, r7
 800bf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf38:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <__swbuf_r+0x9c>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d101      	bne.n	800bf42 <__swbuf_r+0x7a>
 800bf3e:	68ac      	ldr	r4, [r5, #8]
 800bf40:	e7cf      	b.n	800bee2 <__swbuf_r+0x1a>
 800bf42:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <__swbuf_r+0xa0>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	bf08      	it	eq
 800bf48:	68ec      	ldreq	r4, [r5, #12]
 800bf4a:	e7ca      	b.n	800bee2 <__swbuf_r+0x1a>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f000 f81e 	bl	800bf90 <__swsetup_r>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0cb      	beq.n	800bef0 <__swbuf_r+0x28>
 800bf58:	f04f 37ff 	mov.w	r7, #4294967295
 800bf5c:	e7ea      	b.n	800bf34 <__swbuf_r+0x6c>
 800bf5e:	bf00      	nop
 800bf60:	0800c72c 	.word	0x0800c72c
 800bf64:	0800c74c 	.word	0x0800c74c
 800bf68:	0800c70c 	.word	0x0800c70c

0800bf6c <_write_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4604      	mov	r4, r0
 800bf70:	4608      	mov	r0, r1
 800bf72:	4611      	mov	r1, r2
 800bf74:	2200      	movs	r2, #0
 800bf76:	4d05      	ldr	r5, [pc, #20]	; (800bf8c <_write_r+0x20>)
 800bf78:	602a      	str	r2, [r5, #0]
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f7f5 f872 	bl	8001064 <_write>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d102      	bne.n	800bf8a <_write_r+0x1e>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	b103      	cbz	r3, 800bf8a <_write_r+0x1e>
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	bd38      	pop	{r3, r4, r5, pc}
 800bf8c:	200015ac 	.word	0x200015ac

0800bf90 <__swsetup_r>:
 800bf90:	4b32      	ldr	r3, [pc, #200]	; (800c05c <__swsetup_r+0xcc>)
 800bf92:	b570      	push	{r4, r5, r6, lr}
 800bf94:	681d      	ldr	r5, [r3, #0]
 800bf96:	4606      	mov	r6, r0
 800bf98:	460c      	mov	r4, r1
 800bf9a:	b125      	cbz	r5, 800bfa6 <__swsetup_r+0x16>
 800bf9c:	69ab      	ldr	r3, [r5, #24]
 800bf9e:	b913      	cbnz	r3, 800bfa6 <__swsetup_r+0x16>
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7ff f9f9 	bl	800b398 <__sinit>
 800bfa6:	4b2e      	ldr	r3, [pc, #184]	; (800c060 <__swsetup_r+0xd0>)
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	d10f      	bne.n	800bfcc <__swsetup_r+0x3c>
 800bfac:	686c      	ldr	r4, [r5, #4]
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb4:	0719      	lsls	r1, r3, #28
 800bfb6:	d42c      	bmi.n	800c012 <__swsetup_r+0x82>
 800bfb8:	06dd      	lsls	r5, r3, #27
 800bfba:	d411      	bmi.n	800bfe0 <__swsetup_r+0x50>
 800bfbc:	2309      	movs	r3, #9
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	81a3      	strh	r3, [r4, #12]
 800bfca:	e03e      	b.n	800c04a <__swsetup_r+0xba>
 800bfcc:	4b25      	ldr	r3, [pc, #148]	; (800c064 <__swsetup_r+0xd4>)
 800bfce:	429c      	cmp	r4, r3
 800bfd0:	d101      	bne.n	800bfd6 <__swsetup_r+0x46>
 800bfd2:	68ac      	ldr	r4, [r5, #8]
 800bfd4:	e7eb      	b.n	800bfae <__swsetup_r+0x1e>
 800bfd6:	4b24      	ldr	r3, [pc, #144]	; (800c068 <__swsetup_r+0xd8>)
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	bf08      	it	eq
 800bfdc:	68ec      	ldreq	r4, [r5, #12]
 800bfde:	e7e6      	b.n	800bfae <__swsetup_r+0x1e>
 800bfe0:	0758      	lsls	r0, r3, #29
 800bfe2:	d512      	bpl.n	800c00a <__swsetup_r+0x7a>
 800bfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfe6:	b141      	cbz	r1, 800bffa <__swsetup_r+0x6a>
 800bfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfec:	4299      	cmp	r1, r3
 800bfee:	d002      	beq.n	800bff6 <__swsetup_r+0x66>
 800bff0:	4630      	mov	r0, r6
 800bff2:	f000 f9b7 	bl	800c364 <_free_r>
 800bff6:	2300      	movs	r3, #0
 800bff8:	6363      	str	r3, [r4, #52]	; 0x34
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	2300      	movs	r3, #0
 800c004:	6063      	str	r3, [r4, #4]
 800c006:	6923      	ldr	r3, [r4, #16]
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f043 0308 	orr.w	r3, r3, #8
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	b94b      	cbnz	r3, 800c02a <__swsetup_r+0x9a>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c020:	d003      	beq.n	800c02a <__swsetup_r+0x9a>
 800c022:	4621      	mov	r1, r4
 800c024:	4630      	mov	r0, r6
 800c026:	f000 f929 	bl	800c27c <__smakebuf_r>
 800c02a:	89a0      	ldrh	r0, [r4, #12]
 800c02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c030:	f010 0301 	ands.w	r3, r0, #1
 800c034:	d00a      	beq.n	800c04c <__swsetup_r+0xbc>
 800c036:	2300      	movs	r3, #0
 800c038:	60a3      	str	r3, [r4, #8]
 800c03a:	6963      	ldr	r3, [r4, #20]
 800c03c:	425b      	negs	r3, r3
 800c03e:	61a3      	str	r3, [r4, #24]
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	b943      	cbnz	r3, 800c056 <__swsetup_r+0xc6>
 800c044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c048:	d1ba      	bne.n	800bfc0 <__swsetup_r+0x30>
 800c04a:	bd70      	pop	{r4, r5, r6, pc}
 800c04c:	0781      	lsls	r1, r0, #30
 800c04e:	bf58      	it	pl
 800c050:	6963      	ldrpl	r3, [r4, #20]
 800c052:	60a3      	str	r3, [r4, #8]
 800c054:	e7f4      	b.n	800c040 <__swsetup_r+0xb0>
 800c056:	2000      	movs	r0, #0
 800c058:	e7f7      	b.n	800c04a <__swsetup_r+0xba>
 800c05a:	bf00      	nop
 800c05c:	20000190 	.word	0x20000190
 800c060:	0800c72c 	.word	0x0800c72c
 800c064:	0800c74c 	.word	0x0800c74c
 800c068:	0800c70c 	.word	0x0800c70c

0800c06c <_close_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	2300      	movs	r3, #0
 800c070:	4d05      	ldr	r5, [pc, #20]	; (800c088 <_close_r+0x1c>)
 800c072:	4604      	mov	r4, r0
 800c074:	4608      	mov	r0, r1
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	f7f6 fbf7 	bl	800286a <_close>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d102      	bne.n	800c086 <_close_r+0x1a>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	b103      	cbz	r3, 800c086 <_close_r+0x1a>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	200015ac 	.word	0x200015ac

0800c08c <__sflush_r>:
 800c08c:	898a      	ldrh	r2, [r1, #12]
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	0710      	lsls	r0, r2, #28
 800c096:	460c      	mov	r4, r1
 800c098:	d458      	bmi.n	800c14c <__sflush_r+0xc0>
 800c09a:	684b      	ldr	r3, [r1, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc05      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc02      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d0f9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	d032      	beq.n	800c124 <__sflush_r+0x98>
 800c0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	075a      	lsls	r2, r3, #29
 800c0c4:	d505      	bpl.n	800c0d2 <__sflush_r+0x46>
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	1ac0      	subs	r0, r0, r3
 800c0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0cc:	b10b      	cbz	r3, 800c0d2 <__sflush_r+0x46>
 800c0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0d0:	1ac0      	subs	r0, r0, r3
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0d8:	4628      	mov	r0, r5
 800c0da:	6a21      	ldr	r1, [r4, #32]
 800c0dc:	47b0      	blx	r6
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	d106      	bne.n	800c0f2 <__sflush_r+0x66>
 800c0e4:	6829      	ldr	r1, [r5, #0]
 800c0e6:	291d      	cmp	r1, #29
 800c0e8:	d82c      	bhi.n	800c144 <__sflush_r+0xb8>
 800c0ea:	4a2a      	ldr	r2, [pc, #168]	; (800c194 <__sflush_r+0x108>)
 800c0ec:	40ca      	lsrs	r2, r1
 800c0ee:	07d6      	lsls	r6, r2, #31
 800c0f0:	d528      	bpl.n	800c144 <__sflush_r+0xb8>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	6922      	ldr	r2, [r4, #16]
 800c0f8:	04d9      	lsls	r1, r3, #19
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	d504      	bpl.n	800c108 <__sflush_r+0x7c>
 800c0fe:	1c42      	adds	r2, r0, #1
 800c100:	d101      	bne.n	800c106 <__sflush_r+0x7a>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b903      	cbnz	r3, 800c108 <__sflush_r+0x7c>
 800c106:	6560      	str	r0, [r4, #84]	; 0x54
 800c108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10a:	602f      	str	r7, [r5, #0]
 800c10c:	2900      	cmp	r1, #0
 800c10e:	d0ca      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c114:	4299      	cmp	r1, r3
 800c116:	d002      	beq.n	800c11e <__sflush_r+0x92>
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 f923 	bl	800c364 <_free_r>
 800c11e:	2000      	movs	r0, #0
 800c120:	6360      	str	r0, [r4, #52]	; 0x34
 800c122:	e7c1      	b.n	800c0a8 <__sflush_r+0x1c>
 800c124:	6a21      	ldr	r1, [r4, #32]
 800c126:	2301      	movs	r3, #1
 800c128:	4628      	mov	r0, r5
 800c12a:	47b0      	blx	r6
 800c12c:	1c41      	adds	r1, r0, #1
 800c12e:	d1c7      	bne.n	800c0c0 <__sflush_r+0x34>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0c4      	beq.n	800c0c0 <__sflush_r+0x34>
 800c136:	2b1d      	cmp	r3, #29
 800c138:	d001      	beq.n	800c13e <__sflush_r+0xb2>
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	d101      	bne.n	800c142 <__sflush_r+0xb6>
 800c13e:	602f      	str	r7, [r5, #0]
 800c140:	e7b1      	b.n	800c0a6 <__sflush_r+0x1a>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7ad      	b.n	800c0a8 <__sflush_r+0x1c>
 800c14c:	690f      	ldr	r7, [r1, #16]
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d0a9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c152:	0793      	lsls	r3, r2, #30
 800c154:	bf18      	it	ne
 800c156:	2300      	movne	r3, #0
 800c158:	680e      	ldr	r6, [r1, #0]
 800c15a:	bf08      	it	eq
 800c15c:	694b      	ldreq	r3, [r1, #20]
 800c15e:	eba6 0807 	sub.w	r8, r6, r7
 800c162:	600f      	str	r7, [r1, #0]
 800c164:	608b      	str	r3, [r1, #8]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	dd9c      	ble.n	800c0a6 <__sflush_r+0x1a>
 800c16c:	4643      	mov	r3, r8
 800c16e:	463a      	mov	r2, r7
 800c170:	4628      	mov	r0, r5
 800c172:	6a21      	ldr	r1, [r4, #32]
 800c174:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c176:	47b0      	blx	r6
 800c178:	2800      	cmp	r0, #0
 800c17a:	dc06      	bgt.n	800c18a <__sflush_r+0xfe>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f04f 30ff 	mov.w	r0, #4294967295
 800c182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c186:	81a3      	strh	r3, [r4, #12]
 800c188:	e78e      	b.n	800c0a8 <__sflush_r+0x1c>
 800c18a:	4407      	add	r7, r0
 800c18c:	eba8 0800 	sub.w	r8, r8, r0
 800c190:	e7e9      	b.n	800c166 <__sflush_r+0xda>
 800c192:	bf00      	nop
 800c194:	20400001 	.word	0x20400001

0800c198 <_fflush_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b913      	cbnz	r3, 800c1a8 <_fflush_r+0x10>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	b118      	cbz	r0, 800c1b2 <_fflush_r+0x1a>
 800c1aa:	6983      	ldr	r3, [r0, #24]
 800c1ac:	b90b      	cbnz	r3, 800c1b2 <_fflush_r+0x1a>
 800c1ae:	f7ff f8f3 	bl	800b398 <__sinit>
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <_fflush_r+0x6c>)
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	d11b      	bne.n	800c1f0 <_fflush_r+0x58>
 800c1b8:	686c      	ldr	r4, [r5, #4]
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0ef      	beq.n	800c1a2 <_fflush_r+0xa>
 800c1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1c4:	07d0      	lsls	r0, r2, #31
 800c1c6:	d404      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1c8:	0599      	lsls	r1, r3, #22
 800c1ca:	d402      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ce:	f7ff f981 	bl	800b4d4 <__retarget_lock_acquire_recursive>
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	f7ff ff59 	bl	800c08c <__sflush_r>
 800c1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1dc:	4605      	mov	r5, r0
 800c1de:	07da      	lsls	r2, r3, #31
 800c1e0:	d4e0      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	059b      	lsls	r3, r3, #22
 800c1e6:	d4dd      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ea:	f7ff f974 	bl	800b4d6 <__retarget_lock_release_recursive>
 800c1ee:	e7d9      	b.n	800c1a4 <_fflush_r+0xc>
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <_fflush_r+0x70>)
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d101      	bne.n	800c1fa <_fflush_r+0x62>
 800c1f6:	68ac      	ldr	r4, [r5, #8]
 800c1f8:	e7df      	b.n	800c1ba <_fflush_r+0x22>
 800c1fa:	4b04      	ldr	r3, [pc, #16]	; (800c20c <_fflush_r+0x74>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	bf08      	it	eq
 800c200:	68ec      	ldreq	r4, [r5, #12]
 800c202:	e7da      	b.n	800c1ba <_fflush_r+0x22>
 800c204:	0800c72c 	.word	0x0800c72c
 800c208:	0800c74c 	.word	0x0800c74c
 800c20c:	0800c70c 	.word	0x0800c70c

0800c210 <_lseek_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	4611      	mov	r1, r2
 800c218:	2200      	movs	r2, #0
 800c21a:	4d05      	ldr	r5, [pc, #20]	; (800c230 <_lseek_r+0x20>)
 800c21c:	602a      	str	r2, [r5, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	f7f6 fb47 	bl	80028b2 <_lseek>
 800c224:	1c43      	adds	r3, r0, #1
 800c226:	d102      	bne.n	800c22e <_lseek_r+0x1e>
 800c228:	682b      	ldr	r3, [r5, #0]
 800c22a:	b103      	cbz	r3, 800c22e <_lseek_r+0x1e>
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	200015ac 	.word	0x200015ac

0800c234 <__swhatbuf_r>:
 800c234:	b570      	push	{r4, r5, r6, lr}
 800c236:	460e      	mov	r6, r1
 800c238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23c:	4614      	mov	r4, r2
 800c23e:	2900      	cmp	r1, #0
 800c240:	461d      	mov	r5, r3
 800c242:	b096      	sub	sp, #88	; 0x58
 800c244:	da07      	bge.n	800c256 <__swhatbuf_r+0x22>
 800c246:	2300      	movs	r3, #0
 800c248:	602b      	str	r3, [r5, #0]
 800c24a:	89b3      	ldrh	r3, [r6, #12]
 800c24c:	061a      	lsls	r2, r3, #24
 800c24e:	d410      	bmi.n	800c272 <__swhatbuf_r+0x3e>
 800c250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c254:	e00e      	b.n	800c274 <__swhatbuf_r+0x40>
 800c256:	466a      	mov	r2, sp
 800c258:	f000 f908 	bl	800c46c <_fstat_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	dbf2      	blt.n	800c246 <__swhatbuf_r+0x12>
 800c260:	9a01      	ldr	r2, [sp, #4]
 800c262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c26a:	425a      	negs	r2, r3
 800c26c:	415a      	adcs	r2, r3
 800c26e:	602a      	str	r2, [r5, #0]
 800c270:	e7ee      	b.n	800c250 <__swhatbuf_r+0x1c>
 800c272:	2340      	movs	r3, #64	; 0x40
 800c274:	2000      	movs	r0, #0
 800c276:	6023      	str	r3, [r4, #0]
 800c278:	b016      	add	sp, #88	; 0x58
 800c27a:	bd70      	pop	{r4, r5, r6, pc}

0800c27c <__smakebuf_r>:
 800c27c:	898b      	ldrh	r3, [r1, #12]
 800c27e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c280:	079d      	lsls	r5, r3, #30
 800c282:	4606      	mov	r6, r0
 800c284:	460c      	mov	r4, r1
 800c286:	d507      	bpl.n	800c298 <__smakebuf_r+0x1c>
 800c288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	6123      	str	r3, [r4, #16]
 800c290:	2301      	movs	r3, #1
 800c292:	6163      	str	r3, [r4, #20]
 800c294:	b002      	add	sp, #8
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	466a      	mov	r2, sp
 800c29a:	ab01      	add	r3, sp, #4
 800c29c:	f7ff ffca 	bl	800c234 <__swhatbuf_r>
 800c2a0:	9900      	ldr	r1, [sp, #0]
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff f917 	bl	800b4d8 <_malloc_r>
 800c2aa:	b948      	cbnz	r0, 800c2c0 <__smakebuf_r+0x44>
 800c2ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d4ef      	bmi.n	800c294 <__smakebuf_r+0x18>
 800c2b4:	f023 0303 	bic.w	r3, r3, #3
 800c2b8:	f043 0302 	orr.w	r3, r3, #2
 800c2bc:	81a3      	strh	r3, [r4, #12]
 800c2be:	e7e3      	b.n	800c288 <__smakebuf_r+0xc>
 800c2c0:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <__smakebuf_r+0x7c>)
 800c2c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	6020      	str	r0, [r4, #0]
 800c2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2cc:	81a3      	strh	r3, [r4, #12]
 800c2ce:	9b00      	ldr	r3, [sp, #0]
 800c2d0:	6120      	str	r0, [r4, #16]
 800c2d2:	6163      	str	r3, [r4, #20]
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	b15b      	cbz	r3, 800c2f0 <__smakebuf_r+0x74>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2de:	f000 f8d7 	bl	800c490 <_isatty_r>
 800c2e2:	b128      	cbz	r0, 800c2f0 <__smakebuf_r+0x74>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f023 0303 	bic.w	r3, r3, #3
 800c2ea:	f043 0301 	orr.w	r3, r3, #1
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	89a0      	ldrh	r0, [r4, #12]
 800c2f2:	4305      	orrs	r5, r0
 800c2f4:	81a5      	strh	r5, [r4, #12]
 800c2f6:	e7cd      	b.n	800c294 <__smakebuf_r+0x18>
 800c2f8:	0800b331 	.word	0x0800b331

0800c2fc <memchr>:
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	b510      	push	{r4, lr}
 800c300:	b2c9      	uxtb	r1, r1
 800c302:	4402      	add	r2, r0
 800c304:	4293      	cmp	r3, r2
 800c306:	4618      	mov	r0, r3
 800c308:	d101      	bne.n	800c30e <memchr+0x12>
 800c30a:	2000      	movs	r0, #0
 800c30c:	e003      	b.n	800c316 <memchr+0x1a>
 800c30e:	7804      	ldrb	r4, [r0, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	428c      	cmp	r4, r1
 800c314:	d1f6      	bne.n	800c304 <memchr+0x8>
 800c316:	bd10      	pop	{r4, pc}

0800c318 <memmove>:
 800c318:	4288      	cmp	r0, r1
 800c31a:	b510      	push	{r4, lr}
 800c31c:	eb01 0402 	add.w	r4, r1, r2
 800c320:	d902      	bls.n	800c328 <memmove+0x10>
 800c322:	4284      	cmp	r4, r0
 800c324:	4623      	mov	r3, r4
 800c326:	d807      	bhi.n	800c338 <memmove+0x20>
 800c328:	1e43      	subs	r3, r0, #1
 800c32a:	42a1      	cmp	r1, r4
 800c32c:	d008      	beq.n	800c340 <memmove+0x28>
 800c32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c336:	e7f8      	b.n	800c32a <memmove+0x12>
 800c338:	4601      	mov	r1, r0
 800c33a:	4402      	add	r2, r0
 800c33c:	428a      	cmp	r2, r1
 800c33e:	d100      	bne.n	800c342 <memmove+0x2a>
 800c340:	bd10      	pop	{r4, pc}
 800c342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c34a:	e7f7      	b.n	800c33c <memmove+0x24>

0800c34c <__malloc_lock>:
 800c34c:	4801      	ldr	r0, [pc, #4]	; (800c354 <__malloc_lock+0x8>)
 800c34e:	f7ff b8c1 	b.w	800b4d4 <__retarget_lock_acquire_recursive>
 800c352:	bf00      	nop
 800c354:	200015a4 	.word	0x200015a4

0800c358 <__malloc_unlock>:
 800c358:	4801      	ldr	r0, [pc, #4]	; (800c360 <__malloc_unlock+0x8>)
 800c35a:	f7ff b8bc 	b.w	800b4d6 <__retarget_lock_release_recursive>
 800c35e:	bf00      	nop
 800c360:	200015a4 	.word	0x200015a4

0800c364 <_free_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	4605      	mov	r5, r0
 800c368:	2900      	cmp	r1, #0
 800c36a:	d043      	beq.n	800c3f4 <_free_r+0x90>
 800c36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c370:	1f0c      	subs	r4, r1, #4
 800c372:	2b00      	cmp	r3, #0
 800c374:	bfb8      	it	lt
 800c376:	18e4      	addlt	r4, r4, r3
 800c378:	f7ff ffe8 	bl	800c34c <__malloc_lock>
 800c37c:	4a1e      	ldr	r2, [pc, #120]	; (800c3f8 <_free_r+0x94>)
 800c37e:	6813      	ldr	r3, [r2, #0]
 800c380:	4610      	mov	r0, r2
 800c382:	b933      	cbnz	r3, 800c392 <_free_r+0x2e>
 800c384:	6063      	str	r3, [r4, #4]
 800c386:	6014      	str	r4, [r2, #0]
 800c388:	4628      	mov	r0, r5
 800c38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38e:	f7ff bfe3 	b.w	800c358 <__malloc_unlock>
 800c392:	42a3      	cmp	r3, r4
 800c394:	d90a      	bls.n	800c3ac <_free_r+0x48>
 800c396:	6821      	ldr	r1, [r4, #0]
 800c398:	1862      	adds	r2, r4, r1
 800c39a:	4293      	cmp	r3, r2
 800c39c:	bf01      	itttt	eq
 800c39e:	681a      	ldreq	r2, [r3, #0]
 800c3a0:	685b      	ldreq	r3, [r3, #4]
 800c3a2:	1852      	addeq	r2, r2, r1
 800c3a4:	6022      	streq	r2, [r4, #0]
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	6004      	str	r4, [r0, #0]
 800c3aa:	e7ed      	b.n	800c388 <_free_r+0x24>
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	b10b      	cbz	r3, 800c3b6 <_free_r+0x52>
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	d9fa      	bls.n	800c3ac <_free_r+0x48>
 800c3b6:	6811      	ldr	r1, [r2, #0]
 800c3b8:	1850      	adds	r0, r2, r1
 800c3ba:	42a0      	cmp	r0, r4
 800c3bc:	d10b      	bne.n	800c3d6 <_free_r+0x72>
 800c3be:	6820      	ldr	r0, [r4, #0]
 800c3c0:	4401      	add	r1, r0
 800c3c2:	1850      	adds	r0, r2, r1
 800c3c4:	4283      	cmp	r3, r0
 800c3c6:	6011      	str	r1, [r2, #0]
 800c3c8:	d1de      	bne.n	800c388 <_free_r+0x24>
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	4401      	add	r1, r0
 800c3d0:	6011      	str	r1, [r2, #0]
 800c3d2:	6053      	str	r3, [r2, #4]
 800c3d4:	e7d8      	b.n	800c388 <_free_r+0x24>
 800c3d6:	d902      	bls.n	800c3de <_free_r+0x7a>
 800c3d8:	230c      	movs	r3, #12
 800c3da:	602b      	str	r3, [r5, #0]
 800c3dc:	e7d4      	b.n	800c388 <_free_r+0x24>
 800c3de:	6820      	ldr	r0, [r4, #0]
 800c3e0:	1821      	adds	r1, r4, r0
 800c3e2:	428b      	cmp	r3, r1
 800c3e4:	bf01      	itttt	eq
 800c3e6:	6819      	ldreq	r1, [r3, #0]
 800c3e8:	685b      	ldreq	r3, [r3, #4]
 800c3ea:	1809      	addeq	r1, r1, r0
 800c3ec:	6021      	streq	r1, [r4, #0]
 800c3ee:	6063      	str	r3, [r4, #4]
 800c3f0:	6054      	str	r4, [r2, #4]
 800c3f2:	e7c9      	b.n	800c388 <_free_r+0x24>
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200004a4 	.word	0x200004a4

0800c3fc <_realloc_r>:
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fe:	4607      	mov	r7, r0
 800c400:	4614      	mov	r4, r2
 800c402:	460e      	mov	r6, r1
 800c404:	b921      	cbnz	r1, 800c410 <_realloc_r+0x14>
 800c406:	4611      	mov	r1, r2
 800c408:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c40c:	f7ff b864 	b.w	800b4d8 <_malloc_r>
 800c410:	b922      	cbnz	r2, 800c41c <_realloc_r+0x20>
 800c412:	f7ff ffa7 	bl	800c364 <_free_r>
 800c416:	4625      	mov	r5, r4
 800c418:	4628      	mov	r0, r5
 800c41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c41c:	f000 f848 	bl	800c4b0 <_malloc_usable_size_r>
 800c420:	42a0      	cmp	r0, r4
 800c422:	d20f      	bcs.n	800c444 <_realloc_r+0x48>
 800c424:	4621      	mov	r1, r4
 800c426:	4638      	mov	r0, r7
 800c428:	f7ff f856 	bl	800b4d8 <_malloc_r>
 800c42c:	4605      	mov	r5, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	d0f2      	beq.n	800c418 <_realloc_r+0x1c>
 800c432:	4631      	mov	r1, r6
 800c434:	4622      	mov	r2, r4
 800c436:	f7fe fec7 	bl	800b1c8 <memcpy>
 800c43a:	4631      	mov	r1, r6
 800c43c:	4638      	mov	r0, r7
 800c43e:	f7ff ff91 	bl	800c364 <_free_r>
 800c442:	e7e9      	b.n	800c418 <_realloc_r+0x1c>
 800c444:	4635      	mov	r5, r6
 800c446:	e7e7      	b.n	800c418 <_realloc_r+0x1c>

0800c448 <_read_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	2200      	movs	r2, #0
 800c452:	4d05      	ldr	r5, [pc, #20]	; (800c468 <_read_r+0x20>)
 800c454:	602a      	str	r2, [r5, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f7f6 f9ea 	bl	8002830 <_read>
 800c45c:	1c43      	adds	r3, r0, #1
 800c45e:	d102      	bne.n	800c466 <_read_r+0x1e>
 800c460:	682b      	ldr	r3, [r5, #0]
 800c462:	b103      	cbz	r3, 800c466 <_read_r+0x1e>
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	bd38      	pop	{r3, r4, r5, pc}
 800c468:	200015ac 	.word	0x200015ac

0800c46c <_fstat_r>:
 800c46c:	b538      	push	{r3, r4, r5, lr}
 800c46e:	2300      	movs	r3, #0
 800c470:	4d06      	ldr	r5, [pc, #24]	; (800c48c <_fstat_r+0x20>)
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	f7f6 fa01 	bl	8002880 <_fstat>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d102      	bne.n	800c488 <_fstat_r+0x1c>
 800c482:	682b      	ldr	r3, [r5, #0]
 800c484:	b103      	cbz	r3, 800c488 <_fstat_r+0x1c>
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	bd38      	pop	{r3, r4, r5, pc}
 800c48a:	bf00      	nop
 800c48c:	200015ac 	.word	0x200015ac

0800c490 <_isatty_r>:
 800c490:	b538      	push	{r3, r4, r5, lr}
 800c492:	2300      	movs	r3, #0
 800c494:	4d05      	ldr	r5, [pc, #20]	; (800c4ac <_isatty_r+0x1c>)
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	602b      	str	r3, [r5, #0]
 800c49c:	f7f6 f9ff 	bl	800289e <_isatty>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_isatty_r+0x1a>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_isatty_r+0x1a>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	200015ac 	.word	0x200015ac

0800c4b0 <_malloc_usable_size_r>:
 800c4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b4:	1f18      	subs	r0, r3, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfbc      	itt	lt
 800c4ba:	580b      	ldrlt	r3, [r1, r0]
 800c4bc:	18c0      	addlt	r0, r0, r3
 800c4be:	4770      	bx	lr

0800c4c0 <floor>:
 800c4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c4c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c4cc:	2e13      	cmp	r6, #19
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4607      	mov	r7, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	dc34      	bgt.n	800c544 <floor+0x84>
 800c4da:	2e00      	cmp	r6, #0
 800c4dc:	da15      	bge.n	800c50a <floor+0x4a>
 800c4de:	a334      	add	r3, pc, #208	; (adr r3, 800c5b0 <floor+0xf0>)
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	f7f3 fe42 	bl	800016c <__adddf3>
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f7f4 f872 	bl	80005d4 <__aeabi_dcmpgt>
 800c4f0:	b140      	cbz	r0, 800c504 <floor+0x44>
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	da59      	bge.n	800c5aa <floor+0xea>
 800c4f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c4fa:	ea57 0503 	orrs.w	r5, r7, r3
 800c4fe:	d001      	beq.n	800c504 <floor+0x44>
 800c500:	2500      	movs	r5, #0
 800c502:	4c2d      	ldr	r4, [pc, #180]	; (800c5b8 <floor+0xf8>)
 800c504:	4623      	mov	r3, r4
 800c506:	462f      	mov	r7, r5
 800c508:	e025      	b.n	800c556 <floor+0x96>
 800c50a:	4a2c      	ldr	r2, [pc, #176]	; (800c5bc <floor+0xfc>)
 800c50c:	fa42 f806 	asr.w	r8, r2, r6
 800c510:	ea01 0208 	and.w	r2, r1, r8
 800c514:	4302      	orrs	r2, r0
 800c516:	d01e      	beq.n	800c556 <floor+0x96>
 800c518:	a325      	add	r3, pc, #148	; (adr r3, 800c5b0 <floor+0xf0>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fe25 	bl	800016c <__adddf3>
 800c522:	2200      	movs	r2, #0
 800c524:	2300      	movs	r3, #0
 800c526:	f7f4 f855 	bl	80005d4 <__aeabi_dcmpgt>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d0ea      	beq.n	800c504 <floor+0x44>
 800c52e:	2c00      	cmp	r4, #0
 800c530:	bfbe      	ittt	lt
 800c532:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c536:	fa43 f606 	asrlt.w	r6, r3, r6
 800c53a:	19a4      	addlt	r4, r4, r6
 800c53c:	2500      	movs	r5, #0
 800c53e:	ea24 0408 	bic.w	r4, r4, r8
 800c542:	e7df      	b.n	800c504 <floor+0x44>
 800c544:	2e33      	cmp	r6, #51	; 0x33
 800c546:	dd0a      	ble.n	800c55e <floor+0x9e>
 800c548:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c54c:	d103      	bne.n	800c556 <floor+0x96>
 800c54e:	f7f3 fe0d 	bl	800016c <__adddf3>
 800c552:	4607      	mov	r7, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4638      	mov	r0, r7
 800c558:	4619      	mov	r1, r3
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c566:	fa22 f808 	lsr.w	r8, r2, r8
 800c56a:	ea18 0f00 	tst.w	r8, r0
 800c56e:	d0f2      	beq.n	800c556 <floor+0x96>
 800c570:	a30f      	add	r3, pc, #60	; (adr r3, 800c5b0 <floor+0xf0>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f3 fdf9 	bl	800016c <__adddf3>
 800c57a:	2200      	movs	r2, #0
 800c57c:	2300      	movs	r3, #0
 800c57e:	f7f4 f829 	bl	80005d4 <__aeabi_dcmpgt>
 800c582:	2800      	cmp	r0, #0
 800c584:	d0be      	beq.n	800c504 <floor+0x44>
 800c586:	2c00      	cmp	r4, #0
 800c588:	da02      	bge.n	800c590 <floor+0xd0>
 800c58a:	2e14      	cmp	r6, #20
 800c58c:	d103      	bne.n	800c596 <floor+0xd6>
 800c58e:	3401      	adds	r4, #1
 800c590:	ea25 0508 	bic.w	r5, r5, r8
 800c594:	e7b6      	b.n	800c504 <floor+0x44>
 800c596:	2301      	movs	r3, #1
 800c598:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c59c:	fa03 f606 	lsl.w	r6, r3, r6
 800c5a0:	4435      	add	r5, r6
 800c5a2:	42bd      	cmp	r5, r7
 800c5a4:	bf38      	it	cc
 800c5a6:	18e4      	addcc	r4, r4, r3
 800c5a8:	e7f2      	b.n	800c590 <floor+0xd0>
 800c5aa:	2500      	movs	r5, #0
 800c5ac:	462c      	mov	r4, r5
 800c5ae:	e7a9      	b.n	800c504 <floor+0x44>
 800c5b0:	8800759c 	.word	0x8800759c
 800c5b4:	7e37e43c 	.word	0x7e37e43c
 800c5b8:	bff00000 	.word	0xbff00000
 800c5bc:	000fffff 	.word	0x000fffff

0800c5c0 <_init>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr

0800c5cc <_fini>:
 800c5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ce:	bf00      	nop
 800c5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d2:	bc08      	pop	{r3}
 800c5d4:	469e      	mov	lr, r3
 800c5d6:	4770      	bx	lr
