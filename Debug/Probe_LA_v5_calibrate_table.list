
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c918  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc14  0800cc14  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc14  0800cc14  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc14  0800cc14  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc14  0800cc14  0001cc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cc1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc8  200001f8  0800ce10  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011c0  0800ce10  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eec6  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004841  00000000  00000000  0003f0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00043928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  00044fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d46a  00000000  00000000  00046430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2fd  00000000  00000000  0006389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009755f  00000000  00000000  0007eb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001160f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006594  00000000  00000000  0011614c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f8 	.word	0x200001f8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ca0c 	.word	0x0800ca0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001fc 	.word	0x200001fc
 8000148:	0800ca0c 	.word	0x0800ca0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f003 ffb0 	bl	80040ca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f003 ffab 	bl	80040ca <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <SendSPI+0x34>)
 800018e:	f003 ff9c 	bl	80040ca <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000192:	1cb9      	adds	r1, r7, #2
 8000194:	2301      	movs	r3, #1
 8000196:	2201      	movs	r2, #1
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f006 f943 	bl	8006424 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <SendSPI+0x34>)
 80001a4:	f003 ff91 	bl	80040ca <HAL_GPIO_WritePin>

}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001c0:	887b      	ldrh	r3, [r7, #2]
 80001c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001c6:	d302      	bcc.n	80001ce <DAC_AD5322_Ch1+0x1a>
 80001c8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001cc:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001ce:	2300      	movs	r3, #0
 80001d0:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001d2:	2301      	movs	r3, #1
 80001d4:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001d6:	2300      	movs	r3, #0
 80001d8:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 80001da:	2300      	movs	r3, #0
 80001dc:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001de:	8afb      	ldrh	r3, [r7, #22]
 80001e0:	03db      	lsls	r3, r3, #15
 80001e2:	b21a      	sxth	r2, r3
 80001e4:	8abb      	ldrh	r3, [r7, #20]
 80001e6:	039b      	lsls	r3, r3, #14
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	8a7b      	ldrh	r3, [r7, #18]
 80001f0:	035b      	lsls	r3, r3, #13
 80001f2:	b21b      	sxth	r3, r3
 80001f4:	4313      	orrs	r3, r2
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	8a3b      	ldrh	r3, [r7, #16]
 80001fa:	031b      	lsls	r3, r3, #12
 80001fc:	b21b      	sxth	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b21b      	sxth	r3, r3
 8000202:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800020c:	f023 030f 	bic.w	r3, r3, #15
 8000210:	b21a      	sxth	r2, r3
 8000212:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800021a:	b21b      	sxth	r3, r3
 800021c:	4313      	orrs	r3, r2
 800021e:	b21b      	sxth	r3, r3
 8000220:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000222:	89bb      	ldrh	r3, [r7, #12]
 8000224:	4619      	mov	r1, r3
 8000226:	6878      	ldr	r0, [r7, #4]
 8000228:	f7ff ffa8 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800022c:	89bb      	ldrh	r3, [r7, #12]
 800022e:	4619      	mov	r1, r3
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffa3 	bl	800017c <SendSPI>
  	ToggleLDAC();
 8000236:	f7ff ff91 	bl	800015c <ToggleLDAC>
}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}

08000242 <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000242:	b580      	push	{r7, lr}
 8000244:	b086      	sub	sp, #24
 8000246:	af00      	add	r7, sp, #0
 8000248:	6078      	str	r0, [r7, #4]
 800024a:	460b      	mov	r3, r1
 800024c:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 800024e:	887b      	ldrh	r3, [r7, #2]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000254:	d302      	bcc.n	800025c <DAC_AD5322_Ch2+0x1a>
 8000256:	f640 73ff 	movw	r3, #4095	; 0xfff
 800025a:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 800025c:	2301      	movs	r3, #1
 800025e:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000260:	2301      	movs	r3, #1
 8000262:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000264:	2300      	movs	r3, #0
 8000266:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000268:	2300      	movs	r3, #0
 800026a:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800026c:	8afb      	ldrh	r3, [r7, #22]
 800026e:	03db      	lsls	r3, r3, #15
 8000270:	b21a      	sxth	r2, r3
 8000272:	8abb      	ldrh	r3, [r7, #20]
 8000274:	039b      	lsls	r3, r3, #14
 8000276:	b21b      	sxth	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	b21a      	sxth	r2, r3
 800027c:	8a7b      	ldrh	r3, [r7, #18]
 800027e:	035b      	lsls	r3, r3, #13
 8000280:	b21b      	sxth	r3, r3
 8000282:	4313      	orrs	r3, r2
 8000284:	b21a      	sxth	r2, r3
 8000286:	8a3b      	ldrh	r3, [r7, #16]
 8000288:	031b      	lsls	r3, r3, #12
 800028a:	b21b      	sxth	r3, r3
 800028c:	4313      	orrs	r3, r2
 800028e:	b21b      	sxth	r3, r3
 8000290:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000296:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800029a:	f023 030f 	bic.w	r3, r3, #15
 800029e:	b21a      	sxth	r2, r3
 80002a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80002a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002a8:	b21b      	sxth	r3, r3
 80002aa:	4313      	orrs	r3, r2
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 80002b0:	89bb      	ldrh	r3, [r7, #12]
 80002b2:	4619      	mov	r1, r3
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f7ff ff61 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80002ba:	89bb      	ldrh	r3, [r7, #12]
 80002bc:	4619      	mov	r1, r3
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f7ff ff5c 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80002c4:	f7ff ff4a 	bl	800015c <ToggleLDAC>
}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	807b      	strh	r3, [r7, #2]
 80002dc:	4613      	mov	r3, r2
 80002de:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80002e0:	887b      	ldrh	r3, [r7, #2]
 80002e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002e6:	d302      	bcc.n	80002ee <DAC_AD5322_Ch1Ch2+0x1e>
 80002e8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002ec:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80002ee:	883b      	ldrh	r3, [r7, #0]
 80002f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002f4:	d302      	bcc.n	80002fc <DAC_AD5322_Ch1Ch2+0x2c>
 80002f6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80002fa:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80002fc:	2300      	movs	r3, #0
 80002fe:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000300:	2301      	movs	r3, #1
 8000302:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000304:	2300      	movs	r3, #0
 8000306:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000308:	2300      	movs	r3, #0
 800030a:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 800030c:	8afb      	ldrh	r3, [r7, #22]
 800030e:	03db      	lsls	r3, r3, #15
 8000310:	b21a      	sxth	r2, r3
 8000312:	8abb      	ldrh	r3, [r7, #20]
 8000314:	039b      	lsls	r3, r3, #14
 8000316:	b21b      	sxth	r3, r3
 8000318:	4313      	orrs	r3, r2
 800031a:	b21a      	sxth	r2, r3
 800031c:	8a7b      	ldrh	r3, [r7, #18]
 800031e:	035b      	lsls	r3, r3, #13
 8000320:	b21b      	sxth	r3, r3
 8000322:	4313      	orrs	r3, r2
 8000324:	b21a      	sxth	r2, r3
 8000326:	8a3b      	ldrh	r3, [r7, #16]
 8000328:	031b      	lsls	r3, r3, #12
 800032a:	b21b      	sxth	r3, r3
 800032c:	4313      	orrs	r3, r2
 800032e:	b21b      	sxth	r3, r3
 8000330:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000336:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800033a:	f023 030f 	bic.w	r3, r3, #15
 800033e:	b21a      	sxth	r2, r3
 8000340:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000348:	b21b      	sxth	r3, r3
 800034a:	4313      	orrs	r3, r2
 800034c:	b21b      	sxth	r3, r3
 800034e:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000350:	89bb      	ldrh	r3, [r7, #12]
 8000352:	4619      	mov	r1, r3
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f7ff ff11 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800035a:	89bb      	ldrh	r3, [r7, #12]
 800035c:	4619      	mov	r1, r3
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff0c 	bl	800017c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000364:	2301      	movs	r3, #1
 8000366:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000368:	2301      	movs	r3, #1
 800036a:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 800036c:	2300      	movs	r3, #0
 800036e:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000370:	2300      	movs	r3, #0
 8000372:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000374:	8afb      	ldrh	r3, [r7, #22]
 8000376:	03db      	lsls	r3, r3, #15
 8000378:	b21a      	sxth	r2, r3
 800037a:	8abb      	ldrh	r3, [r7, #20]
 800037c:	039b      	lsls	r3, r3, #14
 800037e:	b21b      	sxth	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b21a      	sxth	r2, r3
 8000384:	8a7b      	ldrh	r3, [r7, #18]
 8000386:	035b      	lsls	r3, r3, #13
 8000388:	b21b      	sxth	r3, r3
 800038a:	4313      	orrs	r3, r2
 800038c:	b21a      	sxth	r2, r3
 800038e:	8a3b      	ldrh	r3, [r7, #16]
 8000390:	031b      	lsls	r3, r3, #12
 8000392:	b21b      	sxth	r3, r3
 8000394:	4313      	orrs	r3, r2
 8000396:	b21b      	sxth	r3, r3
 8000398:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800039a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800039e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80003a2:	f023 030f 	bic.w	r3, r3, #15
 80003a6:	b21a      	sxth	r2, r3
 80003a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80003ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80003b0:	b21b      	sxth	r3, r3
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b21b      	sxth	r3, r3
 80003b6:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 80003b8:	89bb      	ldrh	r3, [r7, #12]
 80003ba:	4619      	mov	r1, r3
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff fedd 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80003c2:	89bb      	ldrh	r3, [r7, #12]
 80003c4:	4619      	mov	r1, r3
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff fed8 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80003cc:	f7ff fec6 	bl	800015c <ToggleLDAC>
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d013      	beq.n	8000418 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80003f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d00b      	beq.n	8000418 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000400:	e000      	b.n	8000404 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000402:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000404:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f9      	beq.n	8000402 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800040e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000418:	687b      	ldr	r3, [r7, #4]
}
 800041a:	4618      	mov	r0, r3
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <DWT_Init+0x24>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <DWT_Init+0x24>)
 800042e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000432:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <DWT_Init+0x28>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <DWT_Init+0x28>)
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	e000edf0 	.word	0xe000edf0
 800044c:	e0001000 	.word	0xe0001000

08000450 <_write>:
static void MX_TIM4_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
//**************************************************************************
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++) {
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
 8000460:	e009      	b.n	8000476 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	60ba      	str	r2, [r7, #8]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ffb4 	bl	80003d8 <ITM_SendChar>
	for (int i = 0; i < len; i++) {
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3301      	adds	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697a      	ldr	r2, [r7, #20]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	dbf1      	blt.n	8000462 <_write+0x12>
	}
	return len;
 800047e:	687b      	ldr	r3, [r7, #4]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3718      	adds	r7, #24
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <SetDacA>:
#if  TEST_DAC

uint16_t VDAC_A = 2154;
uint16_t VDAC_B = 2154;

void SetDacA(uint16_t da) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	80fb      	strh	r3, [r7, #6]
	VDAC_A = da;
 8000492:	4a06      	ldr	r2, [pc, #24]	; (80004ac <SetDacA+0x24>)
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <SetDacA+0x24>)
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	4804      	ldr	r0, [pc, #16]	; (80004b0 <SetDacA+0x28>)
 80004a0:	f7ff fe88 	bl	80001b4 <DAC_AD5322_Ch1>
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000010 	.word	0x20000010
 80004b0:	20000580 	.word	0x20000580

080004b4 <SetDacB>:
void SetDacB(uint16_t db) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	VDAC_B = db;
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <SetDacB+0x24>)
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	8013      	strh	r3, [r2, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80004c4:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SetDacB+0x24>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	4804      	ldr	r0, [pc, #16]	; (80004dc <SetDacB+0x28>)
 80004cc:	f7ff feb9 	bl	8000242 <DAC_AD5322_Ch2>
}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20000012 	.word	0x20000012
 80004dc:	20000580 	.word	0x20000580

080004e0 <SetAllDAC>:
void SetAllDAC() {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1,VDAC_A,VDAC_B);
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <SetAllDAC+0x18>)
 80004e6:	881b      	ldrh	r3, [r3, #0]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <SetAllDAC+0x1c>)
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	4804      	ldr	r0, [pc, #16]	; (8000500 <SetAllDAC+0x20>)
 80004f0:	f7ff feee 	bl	80002d0 <DAC_AD5322_Ch1Ch2>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000010 	.word	0x20000010
 80004fc:	20000012 	.word	0x20000012
 8000500:	20000580 	.word	0x20000580

08000504 <GetDacA>:
uint16_t GetDacA() {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	return VDAC_A;
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <GetDacA+0x10>)
 800050a:	881b      	ldrh	r3, [r3, #0]
}
 800050c:	4618      	mov	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	20000010 	.word	0x20000010

08000518 <GetDacB>:
uint16_t GetDacB() {
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	return VDAC_B;
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <GetDacB+0x10>)
 800051e:	881b      	ldrh	r3, [r3, #0]
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	20000012 	.word	0x20000012

0800052c <GetBtnRunState>:
uint32_t time_key3 = 0;

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState() {
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00) {
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <GetBtnRunState+0x7c>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10b      	bne.n	8000550 <GetBtnRunState+0x24>
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <GetBtnRunState+0x80>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d107      	bne.n	8000550 <GetBtnRunState+0x24>
		btn1_long_rd	 = 0;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <GetBtnRunState+0x80>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
		btn1_short_rd	 = 0;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <GetBtnRunState+0x7c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	e026      	b.n	800059e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00) {
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <GetBtnRunState+0x7c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d10b      	bne.n	8000570 <GetBtnRunState+0x44>
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <GetBtnRunState+0x80>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d107      	bne.n	8000570 <GetBtnRunState+0x44>
		btn1_long_rd 	= 0;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <GetBtnRunState+0x80>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <GetBtnRunState+0x7c>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800056c:	2301      	movs	r3, #1
 800056e:	e016      	b.n	800059e <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01) {
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <GetBtnRunState+0x7c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10b      	bne.n	8000590 <GetBtnRunState+0x64>
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <GetBtnRunState+0x80>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d107      	bne.n	8000590 <GetBtnRunState+0x64>
		btn1_long_rd 	= 0;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <GetBtnRunState+0x80>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
		btn1_short_rd 	= 0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <GetBtnRunState+0x7c>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800058c:	2302      	movs	r3, #2
 800058e:	e006      	b.n	800059e <GetBtnRunState+0x72>
	}

	btn1_long_rd 		= 0;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <GetBtnRunState+0x80>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
	btn1_short_rd	 	= 0;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <GetBtnRunState+0x7c>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]

//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000025d 	.word	0x2000025d
 80005ac:	2000025c 	.word	0x2000025c

080005b0 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState() {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00) {
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <GetBtnUpState+0x7c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <GetBtnUpState+0x24>
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <GetBtnUpState+0x80>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d107      	bne.n	80005d4 <GetBtnUpState+0x24>
		btn2_long_rd	 = 0;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <GetBtnUpState+0x80>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		btn2_short_rd	 = 0;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <GetBtnUpState+0x7c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80005d0:	2300      	movs	r3, #0
 80005d2:	e026      	b.n	8000622 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00) {
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <GetBtnUpState+0x7c>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d10b      	bne.n	80005f4 <GetBtnUpState+0x44>
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <GetBtnUpState+0x80>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d107      	bne.n	80005f4 <GetBtnUpState+0x44>
		btn2_long_rd 	= 0;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <GetBtnUpState+0x80>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <GetBtnUpState+0x7c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80005f0:	2301      	movs	r3, #1
 80005f2:	e016      	b.n	8000622 <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01) {
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <GetBtnUpState+0x7c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10b      	bne.n	8000614 <GetBtnUpState+0x64>
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <GetBtnUpState+0x80>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d107      	bne.n	8000614 <GetBtnUpState+0x64>
		btn2_long_rd 	= 0;
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <GetBtnUpState+0x80>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
		btn2_short_rd 	= 0;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <GetBtnUpState+0x7c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000610:	2302      	movs	r3, #2
 8000612:	e006      	b.n	8000622 <GetBtnUpState+0x72>
	}

	btn2_long_rd 		= 0;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <GetBtnUpState+0x80>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	btn2_short_rd	 	= 0;
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <GetBtnUpState+0x7c>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000265 	.word	0x20000265
 8000630:	20000264 	.word	0x20000264

08000634 <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState() {
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00) {
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <GetBtnDownState+0x7c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d10b      	bne.n	8000658 <GetBtnDownState+0x24>
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <GetBtnDownState+0x80>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d107      	bne.n	8000658 <GetBtnDownState+0x24>
		btn3_long_rd	 = 0;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <GetBtnDownState+0x80>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd	 = 0;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <GetBtnDownState+0x7c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8000654:	2300      	movs	r3, #0
 8000656:	e026      	b.n	80006a6 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00) {
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <GetBtnDownState+0x7c>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10b      	bne.n	8000678 <GetBtnDownState+0x44>
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <GetBtnDownState+0x80>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d107      	bne.n	8000678 <GetBtnDownState+0x44>
		btn3_long_rd 	= 0;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <GetBtnDownState+0x80>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <GetBtnDownState+0x7c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8000674:	2301      	movs	r3, #1
 8000676:	e016      	b.n	80006a6 <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01) {
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <GetBtnDownState+0x7c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d10b      	bne.n	8000698 <GetBtnDownState+0x64>
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <GetBtnDownState+0x80>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d107      	bne.n	8000698 <GetBtnDownState+0x64>
		btn3_long_rd 	= 0;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <GetBtnDownState+0x80>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		btn3_short_rd 	= 0;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <GetBtnDownState+0x7c>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8000694:	2302      	movs	r3, #2
 8000696:	e006      	b.n	80006a6 <GetBtnDownState+0x72>
	}

	btn3_long_rd 		= 0;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <GetBtnDownState+0x80>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	btn3_short_rd	 	= 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <GetBtnDownState+0x7c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000026d 	.word	0x2000026d
 80006b4:	2000026c 	.word	0x2000026c

080006b8 <EnableTIM3_PB4>:
volatile uint16_t g_vTIM3_PB4 = 0;
volatile uint16_t g_vTIM4_PB6 = 0;

char trans2_str[64] = {0,};
//--------------------------------------------------------------------------
void EnableTIM3_PB4(){
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	 timWork = 1 ;
 80006bc:	4b03      	ldr	r3, [pc, #12]	; (80006cc <EnableTIM3_PB4+0x14>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	2000026e 	.word	0x2000026e

080006d0 <GetTIM3>:
uint16_t GetTIM3(){
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <GetTIM3+0x14>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	b29b      	uxth	r3, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000270 	.word	0x20000270

080006e8 <resValTIM3_PB4>:
void resValTIM3_PB4(){
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <resValTIM3_PB4+0x14>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	801a      	strh	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000270 	.word	0x20000270

08000700 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6(){
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
	 timWork = 0 ;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <EnableTIM4_PB6+0x14>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000026e 	.word	0x2000026e

08000718 <GetTIM4>:
uint16_t GetTIM4(){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <GetTIM4+0x14>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	b29b      	uxth	r3, r3
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000272 	.word	0x20000272

08000730 <resValTIM4_PB6>:
void resValTIM4_PB6(){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <resValTIM4_PB6+0x14>)
 8000736:	2200      	movs	r2, #0
 8000738:	801a      	strh	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000272 	.word	0x20000272

08000748 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork) {
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b00      	cmp	r3, #0
 8000758:	d027      	beq.n	80007aa <HAL_TIM_IC_CaptureCallback+0x62>
		if (htim->Instance == TIM3) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a29      	ldr	r2, [pc, #164]	; (8000804 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d149      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	7f1b      	ldrb	r3, [r3, #28]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d145      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 800076c:	2100      	movs	r1, #0
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000770:	f006 fb2c 	bl	8006dcc <HAL_TIM_ReadCapturedValue>
 8000774:	4603      	mov	r3, r0
 8000776:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8000778:	2104      	movs	r1, #4
 800077a:	4823      	ldr	r0, [pc, #140]	; (8000808 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800077c:	f006 fb26 	bl	8006dcc <HAL_TIM_ReadCapturedValue>
 8000780:	4603      	mov	r3, r0
 8000782:	81fb      	strh	r3, [r7, #14]
						TIM_CHANNEL_2);

				TIM3->CNT = 0;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000786:	2200      	movs	r2, #0
 8000788:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t) periodTIM3
						- (int16_t) pulseWidthTIM3;
 800078a:	8a3a      	ldrh	r2, [r7, #16]
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29b      	uxth	r3, r3
				int16_t deltaTIM3 = (int16_t) periodTIM3
 8000792:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 8000794:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	bfb8      	it	lt
 800079c:	425b      	neglt	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 80007a2:	89ba      	ldrh	r2, [r7, #12]
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <HAL_TIM_IC_CaptureCallback+0xc4>)
 80007a6:	801a      	strh	r2, [r3, #0]

			}
		}
	}

}
 80007a8:	e026      	b.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d121      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7f1b      	ldrb	r3, [r3, #28]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d11d      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80007bc:	2100      	movs	r1, #0
 80007be:	4815      	ldr	r0, [pc, #84]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007c0:	f006 fb04 	bl	8006dcc <HAL_TIM_ReadCapturedValue>
 80007c4:	4603      	mov	r3, r0
 80007c6:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80007c8:	2104      	movs	r1, #4
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007cc:	f006 fafe 	bl	8006dcc <HAL_TIM_ReadCapturedValue>
 80007d0:	4603      	mov	r3, r0
 80007d2:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
						- (int16_t) pulseWidthTIM4;
 80007da:	8afa      	ldrh	r2, [r7, #22]
 80007dc:	8abb      	ldrh	r3, [r7, #20]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	b29b      	uxth	r3, r3
				int16_t deltaTIM4 = (int16_t) periodTIM4
 80007e2:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80007e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bfb8      	it	lt
 80007ec:	425b      	neglt	r3, r3
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80007f2:	8a7a      	ldrh	r2, [r7, #18]
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007f6:	801a      	strh	r2, [r3, #0]
}
 80007f8:	bf00      	nop
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000026e 	.word	0x2000026e
 8000804:	40000400 	.word	0x40000400
 8000808:	20000508 	.word	0x20000508
 800080c:	20000270 	.word	0x20000270
 8000810:	40000800 	.word	0x40000800
 8000814:	200004b8 	.word	0x200004b8
 8000818:	20000272 	.word	0x20000272

0800081c <GetADC>:
/* USER CODE BEGIN 0 */
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC(){
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	return g_VADC;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <GetADC+0x14>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	b29b      	uxth	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000274 	.word	0x20000274

08000834 <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1) 				//check if the interrupt comes from ACD1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a06      	ldr	r2, [pc, #24]	; (800085c <HAL_ADC_ConvCpltCallback+0x28>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <HAL_ADC_ConvCpltCallback+0x20>
    {
    	g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000848:	f002 fc78 	bl	800313c <HAL_ADC_GetValue>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <HAL_ADC_ConvCpltCallback+0x30>)
 8000852:	801a      	strh	r2, [r3, #0]
    }
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40012400 	.word	0x40012400
 8000860:	20000550 	.word	0x20000550
 8000864:	20000274 	.word	0x20000274

08000868 <crete_calibration_table.8625>:
	//										1024 байт

//--------------------------------------------------------------------------
	union NVRAM DevNVRAM;
//--------------------------------------------------------------------------
void crete_calibration_table(union NVRAM *DevNVRAM) {
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	f8c7 c000 	str.w	ip, [r7]
    DevNVRAM->calibration_table.dacValA_m12[0] = 0x0;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	819a      	strh	r2, [r3, #12]
    DevNVRAM->calibration_table.dacValA_m12[1] = 0x189;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f240 1289 	movw	r2, #393	; 0x189
 8000880:	81da      	strh	r2, [r3, #14]
    DevNVRAM->calibration_table.dacValA_m12[2] = 0x31d;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f240 321d 	movw	r2, #797	; 0x31d
 8000888:	821a      	strh	r2, [r3, #16]
    DevNVRAM->calibration_table.dacValA_m12[3] = 0x223;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f240 2223 	movw	r2, #547	; 0x223
 8000890:	825a      	strh	r2, [r3, #18]
    DevNVRAM->calibration_table.dacValA_m12[4] = 0x21f;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f240 221f 	movw	r2, #543	; 0x21f
 8000898:	829a      	strh	r2, [r3, #20]
    DevNVRAM->calibration_table.dacValA_m12[5] = 0x19d;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f240 129d 	movw	r2, #413	; 0x19d
 80008a0:	82da      	strh	r2, [r3, #22]
    DevNVRAM->calibration_table.dacValA_m12[6] = 0x27e;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f240 227e 	movw	r2, #638	; 0x27e
 80008a8:	831a      	strh	r2, [r3, #24]
    DevNVRAM->calibration_table.dacValA_m12[7] = 0x297;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f240 2297 	movw	r2, #663	; 0x297
 80008b0:	835a      	strh	r2, [r3, #26]
    DevNVRAM->calibration_table.dacValA_m12[8] = 0x27e;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f240 227e 	movw	r2, #638	; 0x27e
 80008b8:	839a      	strh	r2, [r3, #28]
    DevNVRAM->calibration_table.dacValA_m12[9] = 0x297;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f240 2297 	movw	r2, #663	; 0x297
 80008c0:	83da      	strh	r2, [r3, #30]
    DevNVRAM->calibration_table.dacValA_m12[10] = 0x1a1;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f240 12a1 	movw	r2, #417	; 0x1a1
 80008c8:	841a      	strh	r2, [r3, #32]
    DevNVRAM->calibration_table.dacValA_m12[11] = 0x223;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f240 2223 	movw	r2, #547	; 0x223
 80008d0:	845a      	strh	r2, [r3, #34]	; 0x22
    DevNVRAM->calibration_table.dacValA_m12[12] = 0x21e;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f240 221e 	movw	r2, #542	; 0x21e
 80008d8:	849a      	strh	r2, [r3, #36]	; 0x24
    DevNVRAM->calibration_table.dacValA_m12[13] = 0x1b6;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80008e0:	84da      	strh	r2, [r3, #38]	; 0x26
    DevNVRAM->calibration_table.dacValA_m12[14] = 0x297;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f240 2297 	movw	r2, #663	; 0x297
 80008e8:	851a      	strh	r2, [r3, #40]	; 0x28
    DevNVRAM->calibration_table.dacValA_m12[15] = 0x188;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80008f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    DevNVRAM->calibration_table.dacValA_m12[16] = 0x223;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f240 2223 	movw	r2, #547	; 0x223
 80008f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    DevNVRAM->calibration_table.dacValA_m12[17] = 0x1a6;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000900:	85da      	strh	r2, [r3, #46]	; 0x2e
    DevNVRAM->calibration_table.dacValA_m12[18] = 0x233;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f240 2233 	movw	r2, #563	; 0x233
 8000908:	861a      	strh	r2, [r3, #48]	; 0x30
    DevNVRAM->calibration_table.dacValA_m12[19] = 0x29b;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f240 229b 	movw	r2, #667	; 0x29b
 8000910:	865a      	strh	r2, [r3, #50]	; 0x32
    DevNVRAM->calibration_table.dacValA_m12[20] = 0x21e;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f240 221e 	movw	r2, #542	; 0x21e
 8000918:	869a      	strh	r2, [r3, #52]	; 0x34
    DevNVRAM->calibration_table.dacValA_m12[21] = 0x1b6;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8000920:	86da      	strh	r2, [r3, #54]	; 0x36
    DevNVRAM->calibration_table.dacValA_m12[22] = 0x2e6;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f240 22e6 	movw	r2, #742	; 0x2e6
 8000928:	871a      	strh	r2, [r3, #56]	; 0x38
    DevNVRAM->calibration_table.dacValA_m12[23] = 0x233;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f240 2233 	movw	r2, #563	; 0x233
 8000930:	875a      	strh	r2, [r3, #58]	; 0x3a
    DevNVRAM->calibration_table.dacValA_m12[24] = 0x184;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8000938:	879a      	strh	r2, [r3, #60]	; 0x3c
    DevNVRAM->calibration_table.dacValA_m12[25] = 0x27e;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f240 227e 	movw	r2, #638	; 0x27e
 8000940:	87da      	strh	r2, [r3, #62]	; 0x3e
    DevNVRAM->calibration_table.dacValA_m12[26] = 0x855;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f640 0255 	movw	r2, #2133	; 0x855
 8000948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    DevNVRAM->calibration_table.dacValA_m12[27] = 0x877;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f640 0277 	movw	r2, #2167	; 0x877
 8000952:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    DevNVRAM->calibration_table.dacValA_m12[28] = 0x8b1;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f640 02b1 	movw	r2, #2225	; 0x8b1
 800095c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    DevNVRAM->calibration_table.dacValA_m12[29] = 0x8cb;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f640 02cb 	movw	r2, #2251	; 0x8cb
 8000966:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    DevNVRAM->calibration_table.dacValA_m12[30] = 0x8fc;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8000970:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    DevNVRAM->calibration_table.dacValA_m12[31] = 0x960;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f44f 6216 	mov.w	r2, #2400	; 0x960
 800097a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    DevNVRAM->calibration_table.dacValA_m12[32] = 0x953;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f640 1253 	movw	r2, #2387	; 0x953
 8000984:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    DevNVRAM->calibration_table.dacValA_m12[33] = 0x992;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f640 1292 	movw	r2, #2450	; 0x992
 800098e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    DevNVRAM->calibration_table.dacValA_m12[34] = 0x9c4;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000998:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    DevNVRAM->calibration_table.dacValA_m12[35] = 0x9d6;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f640 12d6 	movw	r2, #2518	; 0x9d6
 80009a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    DevNVRAM->calibration_table.dacValA_m12[36] = 0xa02;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f640 2202 	movw	r2, #2562	; 0xa02
 80009ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    DevNVRAM->calibration_table.dacValA_m12[37] = 0xa2f;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f640 222f 	movw	r2, #2607	; 0xa2f
 80009b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    DevNVRAM->calibration_table.dacValA_m12[38] = 0x9dd;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f640 12dd 	movw	r2, #2525	; 0x9dd
 80009c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    DevNVRAM->calibration_table.dacValA_m12[39] = 0xa89;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f640 2289 	movw	r2, #2697	; 0xa89
 80009ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    DevNVRAM->calibration_table.dacValA_m12[40] = 0xab4;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f640 22b4 	movw	r2, #2740	; 0xab4
 80009d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    DevNVRAM->calibration_table.dacValA_m12[41] = 0xae1;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f640 22e1 	movw	r2, #2785	; 0xae1
 80009de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    DevNVRAM->calibration_table.dacValA_m12[42] = 0xb0b;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f640 320b 	movw	r2, #2827	; 0xb0b
 80009e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    DevNVRAM->calibration_table.dacValA_m12[43] = 0xb36;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f640 3236 	movw	r2, #2870	; 0xb36
 80009f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    DevNVRAM->calibration_table.dacValA_m12[44] = 0xb8b;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	f640 328b 	movw	r2, #2955	; 0xb8b
 80009fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    DevNVRAM->calibration_table.dacValA_m12[45] = 0xb8f;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f640 328f 	movw	r2, #2959	; 0xb8f
 8000a06:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    DevNVRAM->calibration_table.dacValA_m12[46] = 0xbd1;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    DevNVRAM->calibration_table.dacValA_m12[47] = 0xbe6;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f640 32e6 	movw	r2, #3046	; 0xbe6
 8000a1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    DevNVRAM->calibration_table.dacValA_m12[48] = 0xc12;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f640 4212 	movw	r2, #3090	; 0xc12
 8000a24:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    DevNVRAM->calibration_table.dacValA_m12[49] = 0xc4e;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f640 424e 	movw	r2, #3150	; 0xc4e
 8000a2e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    DevNVRAM->calibration_table.dacValA_m12[50] = 0xc69;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f640 4269 	movw	r2, #3177	; 0xc69
 8000a38:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
    DevNVRAM->calibration_table.dacValA_m12[51] = 0xc96;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f640 4296 	movw	r2, #3222	; 0xc96
 8000a42:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
    DevNVRAM->calibration_table.dacValA_m12[52] = 0xcd5;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f640 42d5 	movw	r2, #3285	; 0xcd5
 8000a4c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
    DevNVRAM->calibration_table.dacValA_m12[53] = 0xcee;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f640 42ee 	movw	r2, #3310	; 0xcee
 8000a56:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    DevNVRAM->calibration_table.dacValA_m12[54] = 0xd19;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f640 5219 	movw	r2, #3353	; 0xd19
 8000a60:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    DevNVRAM->calibration_table.dacValA_m12[55] = 0xc98;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f640 4298 	movw	r2, #3224	; 0xc98
 8000a6a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
    DevNVRAM->calibration_table.dacValA_m12[56] = 0xd70;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 8000a74:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    DevNVRAM->calibration_table.dacValA_m12[57] = 0xd99;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f640 5299 	movw	r2, #3481	; 0xd99
 8000a7e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    DevNVRAM->calibration_table.dacValA_m12[58] = 0xdb7;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f640 52b7 	movw	r2, #3511	; 0xdb7
 8000a88:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
    DevNVRAM->calibration_table.dacValA_m12[59] = 0xdca;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f640 52ca 	movw	r2, #3530	; 0xdca
 8000a92:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    DevNVRAM->calibration_table.dacValA_m12[60] = 0xdd8;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f640 52d8 	movw	r2, #3544	; 0xdd8
 8000a9c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    DevNVRAM->calibration_table.dacValA_m12[61] = 0xddc;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f640 52dc 	movw	r2, #3548	; 0xddc
 8000aa6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    DevNVRAM->calibration_table.dacValA_m12[62] = 0xde9;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f640 52e9 	movw	r2, #3561	; 0xde9
 8000ab0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    DevNVRAM->calibration_table.dacValA_m12[63] = 0xded;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f640 52ed 	movw	r2, #3565	; 0xded
 8000aba:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    DevNVRAM->calibration_table.dacValA_m12[64] = 0xdf4;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f640 52f4 	movw	r2, #3572	; 0xdf4
 8000ac4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
    DevNVRAM->calibration_table.dacValA_m12[65] = 0xdf9;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f640 52f9 	movw	r2, #3577	; 0xdf9
 8000ace:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
    DevNVRAM->calibration_table.dacValA_m12[66] = 0xdfc;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000ad8:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    DevNVRAM->calibration_table.dacValA_m12[67] = 0xdf7;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f640 52f7 	movw	r2, #3575	; 0xdf7
 8000ae2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
    DevNVRAM->calibration_table.dacValA_m12[68] = 0xdf8;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f640 52f8 	movw	r2, #3576	; 0xdf8
 8000aec:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
    DevNVRAM->calibration_table.dacValA_m12[69] = 0xdfa;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f640 52fa 	movw	r2, #3578	; 0xdfa
 8000af6:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
    DevNVRAM->calibration_table.dacValA_m12[70] = 0xdfc;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8000b00:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
    DevNVRAM->calibration_table.dacValA_m12[71] = 0xdfe;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8000b0a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    DevNVRAM->calibration_table.dacValA_m12[72] = 0xe01;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f640 6201 	movw	r2, #3585	; 0xe01
 8000b14:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    DevNVRAM->calibration_table.dacValA_m12[73] = 0xe01;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f640 6201 	movw	r2, #3585	; 0xe01
 8000b1e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
    DevNVRAM->calibration_table.dacValA_m12[74] = 0xe06;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f640 6206 	movw	r2, #3590	; 0xe06
 8000b28:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    DevNVRAM->calibration_table.dacValA_m12[75] = 0xe06;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f640 6206 	movw	r2, #3590	; 0xe06
 8000b32:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    DevNVRAM->calibration_table.dacValA_m12[76] = 0xe0a;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f640 620a 	movw	r2, #3594	; 0xe0a
 8000b3c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    DevNVRAM->calibration_table.dacValA_m12[77] = 0xe0e;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f640 620e 	movw	r2, #3598	; 0xe0e
 8000b46:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
    DevNVRAM->calibration_table.dacValA_m12[78] = 0xe05;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f640 6205 	movw	r2, #3589	; 0xe05
 8000b50:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    DevNVRAM->calibration_table.dacValA_m12[79] = 0xe01;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f640 6201 	movw	r2, #3585	; 0xe01
 8000b5a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
    DevNVRAM->calibration_table.dacValA_m12[80] = 0xe09;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f640 6209 	movw	r2, #3593	; 0xe09
 8000b64:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
    DevNVRAM->calibration_table.dacValA_m12[81] = 0x7d0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b6e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
    DevNVRAM->calibration_table.dacValA_m12[82] = 0xe06;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f640 6206 	movw	r2, #3590	; 0xe06
 8000b78:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    DevNVRAM->calibration_table.dacValA_m12[83] = 0x7d0;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b82:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
    DevNVRAM->calibration_table.dacValA_m12[84] = 0xe06;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f640 6206 	movw	r2, #3590	; 0xe06
 8000b8c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
    DevNVRAM->calibration_table.dacValA_m12[85] = 0xe00;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8000b96:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
    DevNVRAM->calibration_table.dacValA_m12[86] = 0xdfe;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f640 52fe 	movw	r2, #3582	; 0xdfe
 8000ba0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
    DevNVRAM->calibration_table.dacValA_m12[87] = 0x1000;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000baa:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

    DevNVRAM->calibration_table.dacValB_m12[0] = 0x0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
    DevNVRAM->calibration_table.dacValB_m12[1] = 0x1bb;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000bbc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
    DevNVRAM->calibration_table.dacValB_m12[2] = 0x1ed;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f240 12ed 	movw	r2, #493	; 0x1ed
 8000bc6:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
    DevNVRAM->calibration_table.dacValB_m12[3] = 0x251;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f240 2251 	movw	r2, #593	; 0x251
 8000bd0:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
    DevNVRAM->calibration_table.dacValB_m12[4] = 0x1bb;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000bda:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    DevNVRAM->calibration_table.dacValB_m12[5] = 0x1ed;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f240 12ed 	movw	r2, #493	; 0x1ed
 8000be4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    DevNVRAM->calibration_table.dacValB_m12[6] = 0x2ce;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f240 22ce 	movw	r2, #718	; 0x2ce
 8000bee:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    DevNVRAM->calibration_table.dacValB_m12[7] = 0x1d4;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000bf8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    DevNVRAM->calibration_table.dacValB_m12[8] = 0x1f2;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8000c02:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    DevNVRAM->calibration_table.dacValB_m12[9] = 0x1d9;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f240 12d9 	movw	r2, #473	; 0x1d9
 8000c0c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    DevNVRAM->calibration_table.dacValB_m12[10] = 0x1bc;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8000c16:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    DevNVRAM->calibration_table.dacValB_m12[11] = 0x1bb;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000c20:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    DevNVRAM->calibration_table.dacValB_m12[12] = 0x1f3;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c2a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    DevNVRAM->calibration_table.dacValB_m12[13] = 0x1d9;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f240 12d9 	movw	r2, #473	; 0x1d9
 8000c34:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
    DevNVRAM->calibration_table.dacValB_m12[14] = 0x1ed;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f240 12ed 	movw	r2, #493	; 0x1ed
 8000c3e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
    DevNVRAM->calibration_table.dacValB_m12[15] = 0x1f3;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c48:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
    DevNVRAM->calibration_table.dacValB_m12[16] = 0x1c0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000c52:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    DevNVRAM->calibration_table.dacValB_m12[17] = 0x1c1;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f240 12c1 	movw	r2, #449	; 0x1c1
 8000c5c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    DevNVRAM->calibration_table.dacValB_m12[18] = 0x1c0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000c66:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    DevNVRAM->calibration_table.dacValB_m12[19] = 0x2ec;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8000c70:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
    DevNVRAM->calibration_table.dacValB_m12[20] = 0x1d4;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000c7a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    DevNVRAM->calibration_table.dacValB_m12[21] = 0x251;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f240 2251 	movw	r2, #593	; 0x251
 8000c84:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
    DevNVRAM->calibration_table.dacValB_m12[22] = 0x1d4;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000c8e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
    DevNVRAM->calibration_table.dacValB_m12[23] = 0x1d4;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8000c98:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
    DevNVRAM->calibration_table.dacValB_m12[24] = 0x2ce;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f240 22ce 	movw	r2, #718	; 0x2ce
 8000ca2:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    DevNVRAM->calibration_table.dacValB_m12[25] = 0x1cb;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8000cac:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
    DevNVRAM->calibration_table.dacValB_m12[26] = 0x857;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f640 0257 	movw	r2, #2135	; 0x857
 8000cb6:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
    DevNVRAM->calibration_table.dacValB_m12[27] = 0x877;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f640 0277 	movw	r2, #2167	; 0x877
 8000cc0:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
    DevNVRAM->calibration_table.dacValB_m12[28] = 0x8a4;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f640 02a4 	movw	r2, #2212	; 0x8a4
 8000cca:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    DevNVRAM->calibration_table.dacValB_m12[29] = 0x8cf;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8000cd4:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
    DevNVRAM->calibration_table.dacValB_m12[30] = 0x8fb;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8000cde:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    DevNVRAM->calibration_table.dacValB_m12[31] = 0x926;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f640 1226 	movw	r2, #2342	; 0x926
 8000ce8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    DevNVRAM->calibration_table.dacValB_m12[32] = 0x954;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f640 1254 	movw	r2, #2388	; 0x954
 8000cf2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
    DevNVRAM->calibration_table.dacValB_m12[33] = 0x980;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f44f 6218 	mov.w	r2, #2432	; 0x980
 8000cfc:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    DevNVRAM->calibration_table.dacValB_m12[34] = 0x9ac;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f640 12ac 	movw	r2, #2476	; 0x9ac
 8000d06:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    DevNVRAM->calibration_table.dacValB_m12[35] = 0x9d8;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8000d10:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    DevNVRAM->calibration_table.dacValB_m12[36] = 0xa04;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f640 2204 	movw	r2, #2564	; 0xa04
 8000d1a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    DevNVRAM->calibration_table.dacValB_m12[37] = 0xa30;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8000d24:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
    DevNVRAM->calibration_table.dacValB_m12[38] = 0xa5b;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f640 225b 	movw	r2, #2651	; 0xa5b
 8000d2e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    DevNVRAM->calibration_table.dacValB_m12[39] = 0xa86;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f640 2286 	movw	r2, #2694	; 0xa86
 8000d38:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    DevNVRAM->calibration_table.dacValB_m12[40] = 0xab2;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8000d42:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
    DevNVRAM->calibration_table.dacValB_m12[41] = 0xadf;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f640 22df 	movw	r2, #2783	; 0xadf
 8000d4c:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
    DevNVRAM->calibration_table.dacValB_m12[42] = 0xb0b;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f640 320b 	movw	r2, #2827	; 0xb0b
 8000d56:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110
    DevNVRAM->calibration_table.dacValB_m12[43] = 0xb36;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f640 3236 	movw	r2, #2870	; 0xb36
 8000d60:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
    DevNVRAM->calibration_table.dacValB_m12[44] = 0xb63;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f640 3263 	movw	r2, #2915	; 0xb63
 8000d6a:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
    DevNVRAM->calibration_table.dacValB_m12[45] = 0xb8e;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f640 328e 	movw	r2, #2958	; 0xb8e
 8000d74:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
    DevNVRAM->calibration_table.dacValB_m12[46] = 0xbea;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f640 32ea 	movw	r2, #3050	; 0xbea
 8000d7e:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
    DevNVRAM->calibration_table.dacValB_m12[47] = 0xafd;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f640 22fd 	movw	r2, #2813	; 0xafd
 8000d88:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
    DevNVRAM->calibration_table.dacValB_m12[48] = 0xb91;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f640 3291 	movw	r2, #2961	; 0xb91
 8000d92:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
    DevNVRAM->calibration_table.dacValB_m12[49] = 0xc3d;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f640 423d 	movw	r2, #3133	; 0xc3d
 8000d9c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
    DevNVRAM->calibration_table.dacValB_m12[50] = 0xc69;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f640 4269 	movw	r2, #3177	; 0xc69
 8000da6:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    DevNVRAM->calibration_table.dacValB_m12[51] = 0xbbe;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f640 32be 	movw	r2, #3006	; 0xbbe
 8000db0:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    DevNVRAM->calibration_table.dacValB_m12[52] = 0xcc2;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f640 42c2 	movw	r2, #3266	; 0xcc2
 8000dba:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    DevNVRAM->calibration_table.dacValB_m12[53] = 0xd20;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f44f 6252 	mov.w	r2, #3360	; 0xd20
 8000dc4:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
    DevNVRAM->calibration_table.dacValB_m12[54] = 0xd19;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f640 5219 	movw	r2, #3353	; 0xd19
 8000dce:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
    DevNVRAM->calibration_table.dacValB_m12[55] = 0xd44;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f640 5244 	movw	r2, #3396	; 0xd44
 8000dd8:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
    DevNVRAM->calibration_table.dacValB_m12[56] = 0xd6e;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f640 526e 	movw	r2, #3438	; 0xd6e
 8000de2:	f8a3 212c 	strh.w	r2, [r3, #300]	; 0x12c
    DevNVRAM->calibration_table.dacValB_m12[57] = 0xd92;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f640 5292 	movw	r2, #3474	; 0xd92
 8000dec:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
    DevNVRAM->calibration_table.dacValB_m12[58] = 0xd17;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f640 5217 	movw	r2, #3351	; 0xd17
 8000df6:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
    DevNVRAM->calibration_table.dacValB_m12[59] = 0xdc5;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8000e00:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132
    DevNVRAM->calibration_table.dacValB_m12[60] = 0xdc2;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f640 52c2 	movw	r2, #3522	; 0xdc2
 8000e0a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
    DevNVRAM->calibration_table.dacValB_m12[61] = 0xdcb;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f640 52cb 	movw	r2, #3531	; 0xdcb
 8000e14:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
    DevNVRAM->calibration_table.dacValB_m12[62] = 0xdd4;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f640 52d4 	movw	r2, #3540	; 0xdd4
 8000e1e:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
    DevNVRAM->calibration_table.dacValB_m12[63] = 0xdd9;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f640 52d9 	movw	r2, #3545	; 0xdd9
 8000e28:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
    DevNVRAM->calibration_table.dacValB_m12[64] = 0xe09;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f640 6209 	movw	r2, #3593	; 0xe09
 8000e32:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
    DevNVRAM->calibration_table.dacValB_m12[65] = 0xc6a;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f640 426a 	movw	r2, #3178	; 0xc6a
 8000e3c:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
    DevNVRAM->calibration_table.dacValB_m12[66] = 0xbbc;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8000e46:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    DevNVRAM->calibration_table.dacValB_m12[67] = 0xc5d;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f640 425d 	movw	r2, #3165	; 0xc5d
 8000e50:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    DevNVRAM->calibration_table.dacValB_m12[68] = 0xc4f;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f640 424f 	movw	r2, #3151	; 0xc4f
 8000e5a:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    DevNVRAM->calibration_table.dacValB_m12[69] = 0xcde;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f640 42de 	movw	r2, #3294	; 0xcde
 8000e64:	f8a3 2146 	strh.w	r2, [r3, #326]	; 0x146
    DevNVRAM->calibration_table.dacValB_m12[70] = 0xc52;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f640 4252 	movw	r2, #3154	; 0xc52
 8000e6e:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
    DevNVRAM->calibration_table.dacValB_m12[71] = 0xdde;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f640 52de 	movw	r2, #3550	; 0xdde
 8000e78:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
    DevNVRAM->calibration_table.dacValB_m12[72] = 0xdff;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f640 52ff 	movw	r2, #3583	; 0xdff
 8000e82:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
    DevNVRAM->calibration_table.dacValB_m12[73] = 0xe05;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f640 6205 	movw	r2, #3589	; 0xe05
 8000e8c:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
    DevNVRAM->calibration_table.dacValB_m12[74] = 0xe0b;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f640 620b 	movw	r2, #3595	; 0xe0b
 8000e96:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
    DevNVRAM->calibration_table.dacValB_m12[75] = 0xc80;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000ea0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
    DevNVRAM->calibration_table.dacValB_m12[76] = 0xc1f;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f640 421f 	movw	r2, #3103	; 0xc1f
 8000eaa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
    DevNVRAM->calibration_table.dacValB_m12[77] = 0xe0d;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f640 620d 	movw	r2, #3597	; 0xe0d
 8000eb4:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
    DevNVRAM->calibration_table.dacValB_m12[78] = 0xc77;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f640 4277 	movw	r2, #3191	; 0xc77
 8000ebe:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
    DevNVRAM->calibration_table.dacValB_m12[79] = 0xd49;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f640 5249 	movw	r2, #3401	; 0xd49
 8000ec8:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
    DevNVRAM->calibration_table.dacValB_m12[80] = 0xd55;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f640 5255 	movw	r2, #3413	; 0xd55
 8000ed2:	f8a3 215c 	strh.w	r2, [r3, #348]	; 0x15c
    DevNVRAM->calibration_table.dacValB_m12[81] = 0xcf5;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f640 42f5 	movw	r2, #3317	; 0xcf5
 8000edc:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
    DevNVRAM->calibration_table.dacValB_m12[82] = 0xe14;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f640 6214 	movw	r2, #3604	; 0xe14
 8000ee6:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    DevNVRAM->calibration_table.dacValB_m12[83] = 0xd7f;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f640 527f 	movw	r2, #3455	; 0xd7f
 8000ef0:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
    DevNVRAM->calibration_table.dacValB_m12[84] = 0xd2a;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f640 522a 	movw	r2, #3370	; 0xd2a
 8000efa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
    DevNVRAM->calibration_table.dacValB_m12[85] = 0xd51;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f640 5251 	movw	r2, #3409	; 0xd51
 8000f04:	f8a3 2166 	strh.w	r2, [r3, #358]	; 0x166
    DevNVRAM->calibration_table.dacValB_m12[86] = 0xde0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f44f 625e 	mov.w	r2, #3552	; 0xde0
 8000f0e:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
    DevNVRAM->calibration_table.dacValB_m12[87] = 0x1000;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f18:	f8a3 216a 	strh.w	r2, [r3, #362]	; 0x16a

    DevNVRAM->calibration_table.dacValA_m27[0] = 0x0;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f8a3 216c 	strh.w	r2, [r3, #364]	; 0x16c
    DevNVRAM->calibration_table.dacValA_m27[1] = 0x1f1;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f240 12f1 	movw	r2, #497	; 0x1f1
 8000f2a:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
    DevNVRAM->calibration_table.dacValA_m27[2] = 0x1a6;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8000f34:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
    DevNVRAM->calibration_table.dacValA_m27[3] = 0x21e;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f240 221e 	movw	r2, #542	; 0x21e
 8000f3e:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
    DevNVRAM->calibration_table.dacValA_m27[4] = 0x233;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f240 2233 	movw	r2, #563	; 0x233
 8000f48:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
    DevNVRAM->calibration_table.dacValA_m27[5] = 0x27e;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f240 227e 	movw	r2, #638	; 0x27e
 8000f52:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
    DevNVRAM->calibration_table.dacValA_m27[6] = 0x27e;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f240 227e 	movw	r2, #638	; 0x27e
 8000f5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
    DevNVRAM->calibration_table.dacValA_m27[7] = 0x1bb;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000f66:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
    DevNVRAM->calibration_table.dacValA_m27[8] = 0x1bb;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000f70:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
    DevNVRAM->calibration_table.dacValA_m27[9] = 0x1bb;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000f7a:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e
    DevNVRAM->calibration_table.dacValA_m27[10] = 0x477;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f240 4277 	movw	r2, #1143	; 0x477
 8000f84:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
    DevNVRAM->calibration_table.dacValA_m27[11] = 0x5a3;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f240 52a3 	movw	r2, #1443	; 0x5a3
 8000f8e:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
    DevNVRAM->calibration_table.dacValA_m27[12] = 0x1c4;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8000f98:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
    DevNVRAM->calibration_table.dacValA_m27[13] = 0x1bb;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000fa2:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
    DevNVRAM->calibration_table.dacValA_m27[14] = 0x1bb;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000fac:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
    DevNVRAM->calibration_table.dacValA_m27[15] = 0x29c;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f44f 7227 	mov.w	r2, #668	; 0x29c
 8000fb6:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
    DevNVRAM->calibration_table.dacValA_m27[16] = 0x1bf;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f240 12bf 	movw	r2, #447	; 0x1bf
 8000fc0:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c
    DevNVRAM->calibration_table.dacValA_m27[17] = 0x1bb;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000fca:	f8a3 218e 	strh.w	r2, [r3, #398]	; 0x18e
    DevNVRAM->calibration_table.dacValA_m27[18] = 0x386;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f240 3286 	movw	r2, #902	; 0x386
 8000fd4:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
    DevNVRAM->calibration_table.dacValA_m27[19] = 0x1bf;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f240 12bf 	movw	r2, #447	; 0x1bf
 8000fde:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192
    DevNVRAM->calibration_table.dacValA_m27[20] = 0x1bb;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8000fe8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
    DevNVRAM->calibration_table.dacValA_m27[21] = 0x283;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f240 2283 	movw	r2, #643	; 0x283
 8000ff2:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
    DevNVRAM->calibration_table.dacValA_m27[22] = 0x37d;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f240 327d 	movw	r2, #893	; 0x37d
 8000ffc:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
    DevNVRAM->calibration_table.dacValA_m27[23] = 0x283;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f240 2283 	movw	r2, #643	; 0x283
 8001006:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a
    DevNVRAM->calibration_table.dacValA_m27[24] = 0x37d;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f240 327d 	movw	r2, #893	; 0x37d
 8001010:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
    DevNVRAM->calibration_table.dacValA_m27[25] = 0x37d;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f240 327d 	movw	r2, #893	; 0x37d
 800101a:	f8a3 219e 	strh.w	r2, [r3, #414]	; 0x19e
    DevNVRAM->calibration_table.dacValA_m27[26] = 0x843;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f640 0243 	movw	r2, #2115	; 0x843
 8001024:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
    DevNVRAM->calibration_table.dacValA_m27[27] = 0x843;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f640 0243 	movw	r2, #2115	; 0x843
 800102e:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
    DevNVRAM->calibration_table.dacValA_m27[28] = 0x83e;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f640 023e 	movw	r2, #2110	; 0x83e
 8001038:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
    DevNVRAM->calibration_table.dacValA_m27[29] = 0x869;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f640 0269 	movw	r2, #2153	; 0x869
 8001042:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6
    DevNVRAM->calibration_table.dacValA_m27[30] = 0x870;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f44f 6207 	mov.w	r2, #2160	; 0x870
 800104c:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
    DevNVRAM->calibration_table.dacValA_m27[31] = 0x877;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f640 0277 	movw	r2, #2167	; 0x877
 8001056:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
    DevNVRAM->calibration_table.dacValA_m27[32] = 0x7d9;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8001060:	f8a3 21ac 	strh.w	r2, [r3, #428]	; 0x1ac
    DevNVRAM->calibration_table.dacValA_m27[33] = 0x7e3;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800106a:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
    DevNVRAM->calibration_table.dacValA_m27[34] = 0x864;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f640 0264 	movw	r2, #2148	; 0x864
 8001074:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
    DevNVRAM->calibration_table.dacValA_m27[35] = 0x800;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107e:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
    DevNVRAM->calibration_table.dacValA_m27[36] = 0x864;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f640 0264 	movw	r2, #2148	; 0x864
 8001088:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
    DevNVRAM->calibration_table.dacValA_m27[37] = 0x828;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f640 0228 	movw	r2, #2088	; 0x828
 8001092:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
    DevNVRAM->calibration_table.dacValA_m27[38] = 0x8cc;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f640 02cc 	movw	r2, #2252	; 0x8cc
 800109c:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
    DevNVRAM->calibration_table.dacValA_m27[39] = 0x8d2;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f640 02d2 	movw	r2, #2258	; 0x8d2
 80010a6:	f8a3 21ba 	strh.w	r2, [r3, #442]	; 0x1ba
    DevNVRAM->calibration_table.dacValA_m27[40] = 0x7fc;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80010b0:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    DevNVRAM->calibration_table.dacValA_m27[41] = 0x864;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f640 0264 	movw	r2, #2148	; 0x864
 80010ba:	f8a3 21be 	strh.w	r2, [r3, #446]	; 0x1be
    DevNVRAM->calibration_table.dacValA_m27[42] = 0x7fc;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80010c4:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
    DevNVRAM->calibration_table.dacValA_m27[43] = 0x8ff;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f640 02ff 	movw	r2, #2303	; 0x8ff
 80010ce:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
    DevNVRAM->calibration_table.dacValA_m27[44] = 0x87e;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f640 027e 	movw	r2, #2174	; 0x87e
 80010d8:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
    DevNVRAM->calibration_table.dacValA_m27[45] = 0x834;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f640 0234 	movw	r2, #2100	; 0x834
 80010e2:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
    DevNVRAM->calibration_table.dacValA_m27[46] = 0x828;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f640 0228 	movw	r2, #2088	; 0x828
 80010ec:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
    DevNVRAM->calibration_table.dacValA_m27[47] = 0x847;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f640 0247 	movw	r2, #2119	; 0x847
 80010f6:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca
    DevNVRAM->calibration_table.dacValA_m27[48] = 0x800;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	f8a3 21cc 	strh.w	r2, [r3, #460]	; 0x1cc
    DevNVRAM->calibration_table.dacValA_m27[49] = 0x87d;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f640 027d 	movw	r2, #2173	; 0x87d
 800110a:	f8a3 21ce 	strh.w	r2, [r3, #462]	; 0x1ce
    DevNVRAM->calibration_table.dacValA_m27[50] = 0x94a;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f640 124a 	movw	r2, #2378	; 0x94a
 8001114:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
    DevNVRAM->calibration_table.dacValA_m27[51] = 0x977;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f640 1277 	movw	r2, #2423	; 0x977
 800111e:	f8a3 21d2 	strh.w	r2, [r3, #466]	; 0x1d2
    DevNVRAM->calibration_table.dacValA_m27[52] = 0x7de;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f240 72de 	movw	r2, #2014	; 0x7de
 8001128:	f8a3 21d4 	strh.w	r2, [r3, #468]	; 0x1d4
    DevNVRAM->calibration_table.dacValA_m27[53] = 0x864;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f640 0264 	movw	r2, #2148	; 0x864
 8001132:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
    DevNVRAM->calibration_table.dacValA_m27[54] = 0x974;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f640 1274 	movw	r2, #2420	; 0x974
 800113c:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
    DevNVRAM->calibration_table.dacValA_m27[55] = 0x90f;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f640 120f 	movw	r2, #2319	; 0x90f
 8001146:	f8a3 21da 	strh.w	r2, [r3, #474]	; 0x1da
    DevNVRAM->calibration_table.dacValA_m27[56] = 0x8dd;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f640 02dd 	movw	r2, #2269	; 0x8dd
 8001150:	f8a3 21dc 	strh.w	r2, [r3, #476]	; 0x1dc
    DevNVRAM->calibration_table.dacValA_m27[57] = 0x874;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f640 0274 	movw	r2, #2164	; 0x874
 800115a:	f8a3 21de 	strh.w	r2, [r3, #478]	; 0x1de
    DevNVRAM->calibration_table.dacValA_m27[58] = 0x7d4;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001164:	f8a3 21e0 	strh.w	r2, [r3, #480]	; 0x1e0
    DevNVRAM->calibration_table.dacValA_m27[59] = 0x7e3;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f240 72e3 	movw	r2, #2019	; 0x7e3
 800116e:	f8a3 21e2 	strh.w	r2, [r3, #482]	; 0x1e2
    DevNVRAM->calibration_table.dacValA_m27[60] = 0x7e8;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8001178:	f8a3 21e4 	strh.w	r2, [r3, #484]	; 0x1e4
    DevNVRAM->calibration_table.dacValA_m27[61] = 0x914;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f640 1214 	movw	r2, #2324	; 0x914
 8001182:	f8a3 21e6 	strh.w	r2, [r3, #486]	; 0x1e6
    DevNVRAM->calibration_table.dacValA_m27[62] = 0x9d3;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f640 12d3 	movw	r2, #2515	; 0x9d3
 800118c:	f8a3 21e8 	strh.w	r2, [r3, #488]	; 0x1e8
    DevNVRAM->calibration_table.dacValA_m27[63] = 0x919;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f640 1219 	movw	r2, #2329	; 0x919
 8001196:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
    DevNVRAM->calibration_table.dacValA_m27[64] = 0x8fb;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80011a0:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
    DevNVRAM->calibration_table.dacValA_m27[65] = 0x7e4;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f240 72e4 	movw	r2, #2020	; 0x7e4
 80011aa:	f8a3 21ee 	strh.w	r2, [r3, #494]	; 0x1ee
    DevNVRAM->calibration_table.dacValA_m27[66] = 0x86b;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f640 026b 	movw	r2, #2155	; 0x86b
 80011b4:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
    DevNVRAM->calibration_table.dacValA_m27[67] = 0x814;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f640 0214 	movw	r2, #2068	; 0x814
 80011be:	f8a3 21f2 	strh.w	r2, [r3, #498]	; 0x1f2
    DevNVRAM->calibration_table.dacValA_m27[68] = 0x823;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f640 0223 	movw	r2, #2083	; 0x823
 80011c8:	f8a3 21f4 	strh.w	r2, [r3, #500]	; 0x1f4
    DevNVRAM->calibration_table.dacValA_m27[69] = 0x826;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f640 0226 	movw	r2, #2086	; 0x826
 80011d2:	f8a3 21f6 	strh.w	r2, [r3, #502]	; 0x1f6
    DevNVRAM->calibration_table.dacValA_m27[70] = 0x8af;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f640 02af 	movw	r2, #2223	; 0x8af
 80011dc:	f8a3 21f8 	strh.w	r2, [r3, #504]	; 0x1f8
    DevNVRAM->calibration_table.dacValA_m27[71] = 0x804;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f640 0204 	movw	r2, #2052	; 0x804
 80011e6:	f8a3 21fa 	strh.w	r2, [r3, #506]	; 0x1fa
    DevNVRAM->calibration_table.dacValA_m27[72] = 0xa44;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f640 2244 	movw	r2, #2628	; 0xa44
 80011f0:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
    DevNVRAM->calibration_table.dacValA_m27[73] = 0x7ef;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f240 72ef 	movw	r2, #2031	; 0x7ef
 80011fa:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
    DevNVRAM->calibration_table.dacValA_m27[74] = 0x8f0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f44f 620f 	mov.w	r2, #2288	; 0x8f0
 8001204:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
    DevNVRAM->calibration_table.dacValA_m27[75] = 0x853;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f640 0253 	movw	r2, #2131	; 0x853
 800120e:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
    DevNVRAM->calibration_table.dacValA_m27[76] = 0x7d4;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001218:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
    DevNVRAM->calibration_table.dacValA_m27[77] = 0x900;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8001222:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    DevNVRAM->calibration_table.dacValA_m27[78] = 0x949;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f640 1249 	movw	r2, #2377	; 0x949
 800122c:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
    DevNVRAM->calibration_table.dacValA_m27[79] = 0x951;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f640 1251 	movw	r2, #2385	; 0x951
 8001236:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
    DevNVRAM->calibration_table.dacValA_m27[80] = 0xa80;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f44f 6228 	mov.w	r2, #2688	; 0xa80
 8001240:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
    DevNVRAM->calibration_table.dacValA_m27[81] = 0x832;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f640 0232 	movw	r2, #2098	; 0x832
 800124a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    DevNVRAM->calibration_table.dacValA_m27[82] = 0x899;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f640 0299 	movw	r2, #2201	; 0x899
 8001254:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
    DevNVRAM->calibration_table.dacValA_m27[83] = 0x879;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f640 0279 	movw	r2, #2169	; 0x879
 800125e:	f8a3 2212 	strh.w	r2, [r3, #530]	; 0x212
    DevNVRAM->calibration_table.dacValA_m27[84] = 0xac1;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f640 22c1 	movw	r2, #2753	; 0xac1
 8001268:	f8a3 2214 	strh.w	r2, [r3, #532]	; 0x214
    DevNVRAM->calibration_table.dacValA_m27[85] = 0x8b7;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f640 02b7 	movw	r2, #2231	; 0x8b7
 8001272:	f8a3 2216 	strh.w	r2, [r3, #534]	; 0x216
    DevNVRAM->calibration_table.dacValA_m27[86] = 0x8dd;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f640 02dd 	movw	r2, #2269	; 0x8dd
 800127c:	f8a3 2218 	strh.w	r2, [r3, #536]	; 0x218
    DevNVRAM->calibration_table.dacValA_m27[87] = 0x7d0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001286:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
    DevNVRAM->calibration_table.dacValA_m27[88] = 0x897;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f640 0297 	movw	r2, #2199	; 0x897
 8001290:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
    DevNVRAM->calibration_table.dacValA_m27[89] = 0x7d3;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f240 72d3 	movw	r2, #2003	; 0x7d3
 800129a:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
    DevNVRAM->calibration_table.dacValA_m27[90] = 0x94b;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f640 124b 	movw	r2, #2379	; 0x94b
 80012a4:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
    DevNVRAM->calibration_table.dacValA_m27[91] = 0x8e9;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80012ae:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
    DevNVRAM->calibration_table.dacValA_m27[92] = 0x8e9;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f640 02e9 	movw	r2, #2281	; 0x8e9
 80012b8:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
    DevNVRAM->calibration_table.dacValA_m27[93] = 0x7da;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f240 72da 	movw	r2, #2010	; 0x7da
 80012c2:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226
    DevNVRAM->calibration_table.dacValA_m27[94] = 0x836;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f640 0236 	movw	r2, #2102	; 0x836
 80012cc:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
    DevNVRAM->calibration_table.dacValA_m27[95] = 0x802;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f640 0202 	movw	r2, #2050	; 0x802
 80012d6:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
    DevNVRAM->calibration_table.dacValA_m27[96] = 0x836;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f640 0236 	movw	r2, #2102	; 0x836
 80012e0:	f8a3 222c 	strh.w	r2, [r3, #556]	; 0x22c
    DevNVRAM->calibration_table.dacValA_m27[97] = 0x802;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 0202 	movw	r2, #2050	; 0x802
 80012ea:	f8a3 222e 	strh.w	r2, [r3, #558]	; 0x22e
    DevNVRAM->calibration_table.dacValA_m27[98] = 0x8cc;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f640 02cc 	movw	r2, #2252	; 0x8cc
 80012f4:	f8a3 2230 	strh.w	r2, [r3, #560]	; 0x230
    DevNVRAM->calibration_table.dacValA_m27[99] = 0x8e3;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f640 02e3 	movw	r2, #2275	; 0x8e3
 80012fe:	f8a3 2232 	strh.w	r2, [r3, #562]	; 0x232
    DevNVRAM->calibration_table.dacValA_m27[100] = 0x8cc;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f640 02cc 	movw	r2, #2252	; 0x8cc
 8001308:	f8a3 2234 	strh.w	r2, [r3, #564]	; 0x234
    DevNVRAM->calibration_table.dacValA_m27[101] = 0x917;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f640 1217 	movw	r2, #2327	; 0x917
 8001312:	f8a3 2236 	strh.w	r2, [r3, #566]	; 0x236
    DevNVRAM->calibration_table.dacValA_m27[102] = 0x917;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f640 1217 	movw	r2, #2327	; 0x917
 800131c:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
    DevNVRAM->calibration_table.dacValA_m27[103] = 0x931;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f640 1231 	movw	r2, #2353	; 0x931
 8001326:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
    DevNVRAM->calibration_table.dacValA_m27[104] = 0x930;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001330:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
    DevNVRAM->calibration_table.dacValA_m27[105] = 0xb95;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f640 3295 	movw	r2, #2965	; 0xb95
 800133a:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
    DevNVRAM->calibration_table.dacValA_m27[106] = 0xb90;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f44f 6239 	mov.w	r2, #2960	; 0xb90
 8001344:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
    DevNVRAM->calibration_table.dacValA_m27[107] = 0xbc2;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f640 32c2 	movw	r2, #3010	; 0xbc2
 800134e:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    DevNVRAM->calibration_table.dacValA_m27[108] = 0x962;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f640 1262 	movw	r2, #2402	; 0x962
 8001358:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
    DevNVRAM->calibration_table.dacValA_m27[109] = 0x992;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f640 1292 	movw	r2, #2450	; 0x992
 8001362:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
    DevNVRAM->calibration_table.dacValA_m27[110] = 0x992;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f640 1292 	movw	r2, #2450	; 0x992
 800136c:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
    DevNVRAM->calibration_table.dacValA_m27[111] = 0x9ab;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f640 12ab 	movw	r2, #2475	; 0x9ab
 8001376:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    DevNVRAM->calibration_table.dacValA_m27[112] = 0x994;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f640 1294 	movw	r2, #2452	; 0x994
 8001380:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
    DevNVRAM->calibration_table.dacValA_m27[113] = 0xa9f;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f640 229f 	movw	r2, #2719	; 0xa9f
 800138a:	f8a3 224e 	strh.w	r2, [r3, #590]	; 0x24e
    DevNVRAM->calibration_table.dacValA_m27[114] = 0xbd0;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 8001394:	f8a3 2250 	strh.w	r2, [r3, #592]	; 0x250
    DevNVRAM->calibration_table.dacValA_m27[115] = 0xbea;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f640 32ea 	movw	r2, #3050	; 0xbea
 800139e:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
    DevNVRAM->calibration_table.dacValA_m27[116] = 0x9c6;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f640 12c6 	movw	r2, #2502	; 0x9c6
 80013a8:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
    DevNVRAM->calibration_table.dacValA_m27[117] = 0xb31;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f640 3231 	movw	r2, #2865	; 0xb31
 80013b2:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
    DevNVRAM->calibration_table.dacValA_m27[118] = 0xc1c;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80013bc:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    DevNVRAM->calibration_table.dacValA_m27[119] = 0x9ec;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f640 12ec 	movw	r2, #2540	; 0x9ec
 80013c6:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
    DevNVRAM->calibration_table.dacValA_m27[120] = 0x9f8;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f640 12f8 	movw	r2, #2552	; 0x9f8
 80013d0:	f8a3 225c 	strh.w	r2, [r3, #604]	; 0x25c
    DevNVRAM->calibration_table.dacValA_m27[121] = 0xa0f;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f640 220f 	movw	r2, #2575	; 0xa0f
 80013da:	f8a3 225e 	strh.w	r2, [r3, #606]	; 0x25e
    DevNVRAM->calibration_table.dacValA_m27[122] = 0x9fa;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f640 12fa 	movw	r2, #2554	; 0x9fa
 80013e4:	f8a3 2260 	strh.w	r2, [r3, #608]	; 0x260
    DevNVRAM->calibration_table.dacValA_m27[123] = 0xc46;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f640 4246 	movw	r2, #3142	; 0xc46
 80013ee:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
    DevNVRAM->calibration_table.dacValA_m27[124] = 0xc43;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f640 4243 	movw	r2, #3139	; 0xc43
 80013f8:	f8a3 2264 	strh.w	r2, [r3, #612]	; 0x264
    DevNVRAM->calibration_table.dacValA_m27[125] = 0xa1e;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f640 221e 	movw	r2, #2590	; 0xa1e
 8001402:	f8a3 2266 	strh.w	r2, [r3, #614]	; 0x266
    DevNVRAM->calibration_table.dacValA_m27[126] = 0xa32;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f640 2232 	movw	r2, #2610	; 0xa32
 800140c:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
    DevNVRAM->calibration_table.dacValA_m27[127] = 0xa32;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f640 2232 	movw	r2, #2610	; 0xa32
 8001416:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
    DevNVRAM->calibration_table.dacValA_m27[128] = 0xa39;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f640 2239 	movw	r2, #2617	; 0xa39
 8001420:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
    DevNVRAM->calibration_table.dacValA_m27[129] = 0xa50;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f44f 6225 	mov.w	r2, #2640	; 0xa50
 800142a:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
    DevNVRAM->calibration_table.dacValA_m27[130] = 0xcb0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001434:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
    DevNVRAM->calibration_table.dacValA_m27[131] = 0xa5a;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f640 225a 	movw	r2, #2650	; 0xa5a
 800143e:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
    DevNVRAM->calibration_table.dacValA_m27[132] = 0xa64;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f640 2264 	movw	r2, #2660	; 0xa64
 8001448:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
    DevNVRAM->calibration_table.dacValA_m27[133] = 0xcb0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f44f 624b 	mov.w	r2, #3248	; 0xcb0
 8001452:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
    DevNVRAM->calibration_table.dacValA_m27[134] = 0xa76;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f640 2276 	movw	r2, #2678	; 0xa76
 800145c:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
    DevNVRAM->calibration_table.dacValA_m27[135] = 0xcbf;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f640 42bf 	movw	r2, #3263	; 0xcbf
 8001466:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
    DevNVRAM->calibration_table.dacValA_m27[136] = 0xa8c;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001470:	f8a3 227c 	strh.w	r2, [r3, #636]	; 0x27c
    DevNVRAM->calibration_table.dacValA_m27[137] = 0xa95;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f640 2295 	movw	r2, #2709	; 0xa95
 800147a:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
    DevNVRAM->calibration_table.dacValA_m27[138] = 0xcd9;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f640 42d9 	movw	r2, #3289	; 0xcd9
 8001484:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
    DevNVRAM->calibration_table.dacValA_m27[139] = 0xaaa;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f640 22aa 	movw	r2, #2730	; 0xaaa
 800148e:	f8a3 2282 	strh.w	r2, [r3, #642]	; 0x282
    DevNVRAM->calibration_table.dacValA_m27[140] = 0xbcb;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f640 32cb 	movw	r2, #3019	; 0xbcb
 8001498:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
    DevNVRAM->calibration_table.dacValA_m27[141] = 0xbcf;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f640 32cf 	movw	r2, #3023	; 0xbcf
 80014a2:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
    DevNVRAM->calibration_table.dacValA_m27[142] = 0xacb;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f640 22cb 	movw	r2, #2763	; 0xacb
 80014ac:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
    DevNVRAM->calibration_table.dacValA_m27[143] = 0xae1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f640 22e1 	movw	r2, #2785	; 0xae1
 80014b6:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
    DevNVRAM->calibration_table.dacValA_m27[144] = 0xaeb;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80014c0:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
    DevNVRAM->calibration_table.dacValA_m27[145] = 0xaeb;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f640 22eb 	movw	r2, #2795	; 0xaeb
 80014ca:	f8a3 228e 	strh.w	r2, [r3, #654]	; 0x28e
    DevNVRAM->calibration_table.dacValA_m27[146] = 0xaec;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f640 22ec 	movw	r2, #2796	; 0xaec
 80014d4:	f8a3 2290 	strh.w	r2, [r3, #656]	; 0x290
    DevNVRAM->calibration_table.dacValA_m27[147] = 0xaf4;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f640 22f4 	movw	r2, #2804	; 0xaf4
 80014de:	f8a3 2292 	strh.w	r2, [r3, #658]	; 0x292
    DevNVRAM->calibration_table.dacValA_m27[148] = 0xafc;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f640 22fc 	movw	r2, #2812	; 0xafc
 80014e8:	f8a3 2294 	strh.w	r2, [r3, #660]	; 0x294
    DevNVRAM->calibration_table.dacValA_m27[149] = 0xc38;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f640 4238 	movw	r2, #3128	; 0xc38
 80014f2:	f8a3 2296 	strh.w	r2, [r3, #662]	; 0x296
    DevNVRAM->calibration_table.dacValA_m27[150] = 0xb18;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f640 3218 	movw	r2, #2840	; 0xb18
 80014fc:	f8a3 2298 	strh.w	r2, [r3, #664]	; 0x298
    DevNVRAM->calibration_table.dacValA_m27[151] = 0xb11;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f640 3211 	movw	r2, #2833	; 0xb11
 8001506:	f8a3 229a 	strh.w	r2, [r3, #666]	; 0x29a
    DevNVRAM->calibration_table.dacValA_m27[152] = 0xb27;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f640 3227 	movw	r2, #2855	; 0xb27
 8001510:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
    DevNVRAM->calibration_table.dacValA_m27[153] = 0xb25;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f640 3225 	movw	r2, #2853	; 0xb25
 800151a:	f8a3 229e 	strh.w	r2, [r3, #670]	; 0x29e
    DevNVRAM->calibration_table.dacValA_m27[154] = 0xb2c;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f640 322c 	movw	r2, #2860	; 0xb2c
 8001524:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
    DevNVRAM->calibration_table.dacValA_m27[155] = 0xb31;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f640 3231 	movw	r2, #2865	; 0xb31
 800152e:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
    DevNVRAM->calibration_table.dacValA_m27[156] = 0xb45;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f640 3245 	movw	r2, #2885	; 0xb45
 8001538:	f8a3 22a4 	strh.w	r2, [r3, #676]	; 0x2a4
    DevNVRAM->calibration_table.dacValA_m27[157] = 0xb56;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f640 3256 	movw	r2, #2902	; 0xb56
 8001542:	f8a3 22a6 	strh.w	r2, [r3, #678]	; 0x2a6
    DevNVRAM->calibration_table.dacValA_m27[158] = 0xb54;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f640 3254 	movw	r2, #2900	; 0xb54
 800154c:	f8a3 22a8 	strh.w	r2, [r3, #680]	; 0x2a8
    DevNVRAM->calibration_table.dacValA_m27[159] = 0xb56;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f640 3256 	movw	r2, #2902	; 0xb56
 8001556:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
    DevNVRAM->calibration_table.dacValA_m27[160] = 0xb63;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f640 3263 	movw	r2, #2915	; 0xb63
 8001560:	f8a3 22ac 	strh.w	r2, [r3, #684]	; 0x2ac
    DevNVRAM->calibration_table.dacValA_m27[161] = 0xb62;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f640 3262 	movw	r2, #2914	; 0xb62
 800156a:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
    DevNVRAM->calibration_table.dacValA_m27[162] = 0x1000;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001574:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0

    DevNVRAM->calibration_table.dacValB_m27[0] = 0x0;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f8a3 22b2 	strh.w	r2, [r3, #690]	; 0x2b2
    DevNVRAM->calibration_table.dacValB_m27[1] = 0x1c1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001586:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
    DevNVRAM->calibration_table.dacValB_m27[2] = 0x1d5;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f240 12d5 	movw	r2, #469	; 0x1d5
 8001590:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
    DevNVRAM->calibration_table.dacValB_m27[3] = 0x1d5;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f240 12d5 	movw	r2, #469	; 0x1d5
 800159a:	f8a3 22b8 	strh.w	r2, [r3, #696]	; 0x2b8
    DevNVRAM->calibration_table.dacValB_m27[4] = 0x1d5;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f240 12d5 	movw	r2, #469	; 0x1d5
 80015a4:	f8a3 22ba 	strh.w	r2, [r3, #698]	; 0x2ba
    DevNVRAM->calibration_table.dacValB_m27[5] = 0x1d5;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f240 12d5 	movw	r2, #469	; 0x1d5
 80015ae:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
    DevNVRAM->calibration_table.dacValB_m27[6] = 0x1d5;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f240 12d5 	movw	r2, #469	; 0x1d5
 80015b8:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
    DevNVRAM->calibration_table.dacValB_m27[7] = 0x1d5;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f240 12d5 	movw	r2, #469	; 0x1d5
 80015c2:	f8a3 22c0 	strh.w	r2, [r3, #704]	; 0x2c0
    DevNVRAM->calibration_table.dacValB_m27[8] = 0x1d9;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80015cc:	f8a3 22c2 	strh.w	r2, [r3, #706]	; 0x2c2
    DevNVRAM->calibration_table.dacValB_m27[9] = 0x1f8;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80015d6:	f8a3 22c4 	strh.w	r2, [r3, #708]	; 0x2c4
    DevNVRAM->calibration_table.dacValB_m27[10] = 0x1bb;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f240 12bb 	movw	r2, #443	; 0x1bb
 80015e0:	f8a3 22c6 	strh.w	r2, [r3, #710]	; 0x2c6
    DevNVRAM->calibration_table.dacValB_m27[11] = 0x1bb;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f240 12bb 	movw	r2, #443	; 0x1bb
 80015ea:	f8a3 22c8 	strh.w	r2, [r3, #712]	; 0x2c8
    DevNVRAM->calibration_table.dacValB_m27[12] = 0x1bb;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80015f4:	f8a3 22ca 	strh.w	r2, [r3, #714]	; 0x2ca
    DevNVRAM->calibration_table.dacValB_m27[13] = 0x571;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f240 5271 	movw	r2, #1393	; 0x571
 80015fe:	f8a3 22cc 	strh.w	r2, [r3, #716]	; 0x2cc
    DevNVRAM->calibration_table.dacValB_m27[14] = 0x1bb;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f240 12bb 	movw	r2, #443	; 0x1bb
 8001608:	f8a3 22ce 	strh.w	r2, [r3, #718]	; 0x2ce
    DevNVRAM->calibration_table.dacValB_m27[15] = 0x283;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f240 2283 	movw	r2, #643	; 0x283
 8001612:	f8a3 22d0 	strh.w	r2, [r3, #720]	; 0x2d0
    DevNVRAM->calibration_table.dacValB_m27[16] = 0x1cf;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f240 12cf 	movw	r2, #463	; 0x1cf
 800161c:	f8a3 22d2 	strh.w	r2, [r3, #722]	; 0x2d2
    DevNVRAM->calibration_table.dacValB_m27[17] = 0x1c9;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f240 12c9 	movw	r2, #457	; 0x1c9
 8001626:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
    DevNVRAM->calibration_table.dacValB_m27[18] = 0x1bf;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f240 12bf 	movw	r2, #447	; 0x1bf
 8001630:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
    DevNVRAM->calibration_table.dacValB_m27[19] = 0x1bb;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f240 12bb 	movw	r2, #443	; 0x1bb
 800163a:	f8a3 22d8 	strh.w	r2, [r3, #728]	; 0x2d8
    DevNVRAM->calibration_table.dacValB_m27[20] = 0x21f;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f240 221f 	movw	r2, #543	; 0x21f
 8001644:	f8a3 22da 	strh.w	r2, [r3, #730]	; 0x2da
    DevNVRAM->calibration_table.dacValB_m27[21] = 0x1cf;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f240 12cf 	movw	r2, #463	; 0x1cf
 800164e:	f8a3 22dc 	strh.w	r2, [r3, #732]	; 0x2dc
    DevNVRAM->calibration_table.dacValB_m27[22] = 0x1e8;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001658:	f8a3 22de 	strh.w	r2, [r3, #734]	; 0x2de
    DevNVRAM->calibration_table.dacValB_m27[23] = 0x1e8;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001662:	f8a3 22e0 	strh.w	r2, [r3, #736]	; 0x2e0
    DevNVRAM->calibration_table.dacValB_m27[24] = 0x1cf;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f240 12cf 	movw	r2, #463	; 0x1cf
 800166c:	f8a3 22e2 	strh.w	r2, [r3, #738]	; 0x2e2
    DevNVRAM->calibration_table.dacValB_m27[25] = 0x1e8;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001676:	f8a3 22e4 	strh.w	r2, [r3, #740]	; 0x2e4
    DevNVRAM->calibration_table.dacValB_m27[26] = 0x7d3;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f240 72d3 	movw	r2, #2003	; 0x7d3
 8001680:	f8a3 22e6 	strh.w	r2, [r3, #742]	; 0x2e6
    DevNVRAM->calibration_table.dacValB_m27[27] = 0x80b;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f640 020b 	movw	r2, #2059	; 0x80b
 800168a:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8
    DevNVRAM->calibration_table.dacValB_m27[28] = 0x857;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f640 0257 	movw	r2, #2135	; 0x857
 8001694:	f8a3 22ea 	strh.w	r2, [r3, #746]	; 0x2ea
    DevNVRAM->calibration_table.dacValB_m27[29] = 0x875;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f640 0275 	movw	r2, #2165	; 0x875
 800169e:	f8a3 22ec 	strh.w	r2, [r3, #748]	; 0x2ec
    DevNVRAM->calibration_table.dacValB_m27[30] = 0x866;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f640 0266 	movw	r2, #2150	; 0x866
 80016a8:	f8a3 22ee 	strh.w	r2, [r3, #750]	; 0x2ee
    DevNVRAM->calibration_table.dacValB_m27[31] = 0x7d0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80016b2:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0
    DevNVRAM->calibration_table.dacValB_m27[32] = 0x877;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f640 0277 	movw	r2, #2167	; 0x877
 80016bc:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
    DevNVRAM->calibration_table.dacValB_m27[33] = 0x8a7;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f640 02a7 	movw	r2, #2215	; 0x8a7
 80016c6:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
    DevNVRAM->calibration_table.dacValB_m27[34] = 0x8a2;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f640 02a2 	movw	r2, #2210	; 0x8a2
 80016d0:	f8a3 22f6 	strh.w	r2, [r3, #758]	; 0x2f6
    DevNVRAM->calibration_table.dacValB_m27[35] = 0x7f7;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f240 72f7 	movw	r2, #2039	; 0x7f7
 80016da:	f8a3 22f8 	strh.w	r2, [r3, #760]	; 0x2f8
    DevNVRAM->calibration_table.dacValB_m27[36] = 0x857;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f640 0257 	movw	r2, #2135	; 0x857
 80016e4:	f8a3 22fa 	strh.w	r2, [r3, #762]	; 0x2fa
    DevNVRAM->calibration_table.dacValB_m27[37] = 0x829;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f640 0229 	movw	r2, #2089	; 0x829
 80016ee:	f8a3 22fc 	strh.w	r2, [r3, #764]	; 0x2fc
    DevNVRAM->calibration_table.dacValB_m27[38] = 0x8f2;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f640 02f2 	movw	r2, #2290	; 0x8f2
 80016f8:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
    DevNVRAM->calibration_table.dacValB_m27[39] = 0x897;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f640 0297 	movw	r2, #2199	; 0x897
 8001702:	f8a3 2300 	strh.w	r2, [r3, #768]	; 0x300
    DevNVRAM->calibration_table.dacValB_m27[40] = 0x8cc;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f640 02cc 	movw	r2, #2252	; 0x8cc
 800170c:	f8a3 2302 	strh.w	r2, [r3, #770]	; 0x302
    DevNVRAM->calibration_table.dacValB_m27[41] = 0x8ca;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001716:	f8a3 2304 	strh.w	r2, [r3, #772]	; 0x304
    DevNVRAM->calibration_table.dacValB_m27[42] = 0x81f;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f640 021f 	movw	r2, #2079	; 0x81f
 8001720:	f8a3 2306 	strh.w	r2, [r3, #774]	; 0x306
    DevNVRAM->calibration_table.dacValB_m27[43] = 0x7de;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f240 72de 	movw	r2, #2014	; 0x7de
 800172a:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
    DevNVRAM->calibration_table.dacValB_m27[44] = 0x864;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f640 0264 	movw	r2, #2148	; 0x864
 8001734:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
    DevNVRAM->calibration_table.dacValB_m27[45] = 0x8ce;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f640 02ce 	movw	r2, #2254	; 0x8ce
 800173e:	f8a3 230c 	strh.w	r2, [r3, #780]	; 0x30c
    DevNVRAM->calibration_table.dacValB_m27[46] = 0x8d9;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f640 02d9 	movw	r2, #2265	; 0x8d9
 8001748:	f8a3 230e 	strh.w	r2, [r3, #782]	; 0x30e
    DevNVRAM->calibration_table.dacValB_m27[47] = 0x870;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f44f 6207 	mov.w	r2, #2160	; 0x870
 8001752:	f8a3 2310 	strh.w	r2, [r3, #784]	; 0x310
    DevNVRAM->calibration_table.dacValB_m27[48] = 0x7de;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f240 72de 	movw	r2, #2014	; 0x7de
 800175c:	f8a3 2312 	strh.w	r2, [r3, #786]	; 0x312
    DevNVRAM->calibration_table.dacValB_m27[49] = 0x80b;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f640 020b 	movw	r2, #2059	; 0x80b
 8001766:	f8a3 2314 	strh.w	r2, [r3, #788]	; 0x314
    DevNVRAM->calibration_table.dacValB_m27[50] = 0x95b;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f640 125b 	movw	r2, #2395	; 0x95b
 8001770:	f8a3 2316 	strh.w	r2, [r3, #790]	; 0x316
    DevNVRAM->calibration_table.dacValB_m27[51] = 0x89c;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f640 029c 	movw	r2, #2204	; 0x89c
 800177a:	f8a3 2318 	strh.w	r2, [r3, #792]	; 0x318
    DevNVRAM->calibration_table.dacValB_m27[52] = 0x95b;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f640 125b 	movw	r2, #2395	; 0x95b
 8001784:	f8a3 231a 	strh.w	r2, [r3, #794]	; 0x31a
    DevNVRAM->calibration_table.dacValB_m27[53] = 0x7e2;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f240 72e2 	movw	r2, #2018	; 0x7e2
 800178e:	f8a3 231c 	strh.w	r2, [r3, #796]	; 0x31c
    DevNVRAM->calibration_table.dacValB_m27[54] = 0x8ce;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f640 02ce 	movw	r2, #2254	; 0x8ce
 8001798:	f8a3 231e 	strh.w	r2, [r3, #798]	; 0x31e
    DevNVRAM->calibration_table.dacValB_m27[55] = 0x974;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f640 1274 	movw	r2, #2420	; 0x974
 80017a2:	f8a3 2320 	strh.w	r2, [r3, #800]	; 0x320
    DevNVRAM->calibration_table.dacValB_m27[56] = 0x7e7;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f240 72e7 	movw	r2, #2023	; 0x7e7
 80017ac:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
    DevNVRAM->calibration_table.dacValB_m27[57] = 0x801;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f640 0201 	movw	r2, #2049	; 0x801
 80017b6:	f8a3 2324 	strh.w	r2, [r3, #804]	; 0x324
    DevNVRAM->calibration_table.dacValB_m27[58] = 0x864;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f640 0264 	movw	r2, #2148	; 0x864
 80017c0:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
    DevNVRAM->calibration_table.dacValB_m27[59] = 0x8a1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f640 02a1 	movw	r2, #2209	; 0x8a1
 80017ca:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
    DevNVRAM->calibration_table.dacValB_m27[60] = 0x988;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f640 1288 	movw	r2, #2440	; 0x988
 80017d4:	f8a3 232a 	strh.w	r2, [r3, #810]	; 0x32a
    DevNVRAM->calibration_table.dacValB_m27[61] = 0x7e3;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f240 72e3 	movw	r2, #2019	; 0x7e3
 80017de:	f8a3 232c 	strh.w	r2, [r3, #812]	; 0x32c
    DevNVRAM->calibration_table.dacValB_m27[62] = 0x864;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f640 0264 	movw	r2, #2148	; 0x864
 80017e8:	f8a3 232e 	strh.w	r2, [r3, #814]	; 0x32e
    DevNVRAM->calibration_table.dacValB_m27[63] = 0x92a;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f640 122a 	movw	r2, #2346	; 0x92a
 80017f2:	f8a3 2330 	strh.w	r2, [r3, #816]	; 0x330
    DevNVRAM->calibration_table.dacValB_m27[64] = 0x7fc;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80017fc:	f8a3 2332 	strh.w	r2, [r3, #818]	; 0x332
    DevNVRAM->calibration_table.dacValB_m27[65] = 0x897;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f640 0297 	movw	r2, #2199	; 0x897
 8001806:	f8a3 2334 	strh.w	r2, [r3, #820]	; 0x334
    DevNVRAM->calibration_table.dacValB_m27[66] = 0x892;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f640 0292 	movw	r2, #2194	; 0x892
 8001810:	f8a3 2336 	strh.w	r2, [r3, #822]	; 0x336
    DevNVRAM->calibration_table.dacValB_m27[67] = 0x8af;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f640 02af 	movw	r2, #2223	; 0x8af
 800181a:	f8a3 2338 	strh.w	r2, [r3, #824]	; 0x338
    DevNVRAM->calibration_table.dacValB_m27[68] = 0x83a;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f640 023a 	movw	r2, #2106	; 0x83a
 8001824:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
    DevNVRAM->calibration_table.dacValB_m27[69] = 0x810;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f44f 6201 	mov.w	r2, #2064	; 0x810
 800182e:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
    DevNVRAM->calibration_table.dacValB_m27[70] = 0x83a;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f640 023a 	movw	r2, #2106	; 0x83a
 8001838:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
    DevNVRAM->calibration_table.dacValB_m27[71] = 0x7d4;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f240 72d4 	movw	r2, #2004	; 0x7d4
 8001842:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
    DevNVRAM->calibration_table.dacValB_m27[72] = 0x914;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f640 1214 	movw	r2, #2324	; 0x914
 800184c:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
    DevNVRAM->calibration_table.dacValB_m27[73] = 0x7d6;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f240 72d6 	movw	r2, #2006	; 0x7d6
 8001856:	f8a3 2344 	strh.w	r2, [r3, #836]	; 0x344
    DevNVRAM->calibration_table.dacValB_m27[74] = 0x8e8;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f640 02e8 	movw	r2, #2280	; 0x8e8
 8001860:	f8a3 2346 	strh.w	r2, [r3, #838]	; 0x346
    DevNVRAM->calibration_table.dacValB_m27[75] = 0x7e8;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 800186a:	f8a3 2348 	strh.w	r2, [r3, #840]	; 0x348
    DevNVRAM->calibration_table.dacValB_m27[76] = 0x8e7;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f640 02e7 	movw	r2, #2279	; 0x8e7
 8001874:	f8a3 234a 	strh.w	r2, [r3, #842]	; 0x34a
    DevNVRAM->calibration_table.dacValB_m27[77] = 0x8fa;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f640 02fa 	movw	r2, #2298	; 0x8fa
 800187e:	f8a3 234c 	strh.w	r2, [r3, #844]	; 0x34c
    DevNVRAM->calibration_table.dacValB_m27[78] = 0xa82;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f640 2282 	movw	r2, #2690	; 0xa82
 8001888:	f8a3 234e 	strh.w	r2, [r3, #846]	; 0x34e
    DevNVRAM->calibration_table.dacValB_m27[79] = 0x86c;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f640 026c 	movw	r2, #2156	; 0x86c
 8001892:	f8a3 2350 	strh.w	r2, [r3, #848]	; 0x350
    DevNVRAM->calibration_table.dacValB_m27[80] = 0x906;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f640 1206 	movw	r2, #2310	; 0x906
 800189c:	f8a3 2352 	strh.w	r2, [r3, #850]	; 0x352
    DevNVRAM->calibration_table.dacValB_m27[81] = 0x8f8;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f640 02f8 	movw	r2, #2296	; 0x8f8
 80018a6:	f8a3 2354 	strh.w	r2, [r3, #852]	; 0x354
    DevNVRAM->calibration_table.dacValB_m27[82] = 0x885;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f640 0285 	movw	r2, #2181	; 0x885
 80018b0:	f8a3 2356 	strh.w	r2, [r3, #854]	; 0x356
    DevNVRAM->calibration_table.dacValB_m27[83] = 0x884;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f640 0284 	movw	r2, #2180	; 0x884
 80018ba:	f8a3 2358 	strh.w	r2, [r3, #856]	; 0x358
    DevNVRAM->calibration_table.dacValB_m27[84] = 0x930;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f44f 6213 	mov.w	r2, #2352	; 0x930
 80018c4:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
    DevNVRAM->calibration_table.dacValB_m27[85] = 0x865;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f640 0265 	movw	r2, #2149	; 0x865
 80018ce:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
    DevNVRAM->calibration_table.dacValB_m27[86] = 0x8d0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f44f 620d 	mov.w	r2, #2256	; 0x8d0
 80018d8:	f8a3 235e 	strh.w	r2, [r3, #862]	; 0x35e
    DevNVRAM->calibration_table.dacValB_m27[87] = 0x7e7;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f240 72e7 	movw	r2, #2023	; 0x7e7
 80018e2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    DevNVRAM->calibration_table.dacValB_m27[88] = 0x8b9;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f640 02b9 	movw	r2, #2233	; 0x8b9
 80018ec:	f8a3 2362 	strh.w	r2, [r3, #866]	; 0x362
    DevNVRAM->calibration_table.dacValB_m27[89] = 0xab4;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f640 22b4 	movw	r2, #2740	; 0xab4
 80018f6:	f8a3 2364 	strh.w	r2, [r3, #868]	; 0x364
    DevNVRAM->calibration_table.dacValB_m27[90] = 0x8c8;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f640 02c8 	movw	r2, #2248	; 0x8c8
 8001900:	f8a3 2366 	strh.w	r2, [r3, #870]	; 0x366
    DevNVRAM->calibration_table.dacValB_m27[91] = 0x8e9;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f640 02e9 	movw	r2, #2281	; 0x8e9
 800190a:	f8a3 2368 	strh.w	r2, [r3, #872]	; 0x368
    DevNVRAM->calibration_table.dacValB_m27[92] = 0xaff;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f640 22ff 	movw	r2, #2815	; 0xaff
 8001914:	f8a3 236a 	strh.w	r2, [r3, #874]	; 0x36a
    DevNVRAM->calibration_table.dacValB_m27[93] = 0x7da;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f240 72da 	movw	r2, #2010	; 0x7da
 800191e:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
    DevNVRAM->calibration_table.dacValB_m27[94] = 0x804;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f640 0204 	movw	r2, #2052	; 0x804
 8001928:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
    DevNVRAM->calibration_table.dacValB_m27[95] = 0x7da;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f240 72da 	movw	r2, #2010	; 0x7da
 8001932:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
    DevNVRAM->calibration_table.dacValB_m27[96] = 0x804;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f640 0204 	movw	r2, #2052	; 0x804
 800193c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
    DevNVRAM->calibration_table.dacValB_m27[97] = 0x7da;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f240 72da 	movw	r2, #2010	; 0x7da
 8001946:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
    DevNVRAM->calibration_table.dacValB_m27[98] = 0x8ca;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f640 02ca 	movw	r2, #2250	; 0x8ca
 8001950:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
    DevNVRAM->calibration_table.dacValB_m27[99] = 0x947;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f640 1247 	movw	r2, #2375	; 0x947
 800195a:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    DevNVRAM->calibration_table.dacValB_m27[100] = 0x8fe;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f640 02fe 	movw	r2, #2302	; 0x8fe
 8001964:	f8a3 237a 	strh.w	r2, [r3, #890]	; 0x37a
    DevNVRAM->calibration_table.dacValB_m27[101] = 0x8fc;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800196e:	f8a3 237c 	strh.w	r2, [r3, #892]	; 0x37c
    DevNVRAM->calibration_table.dacValB_m27[102] = 0x8ed;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f640 02ed 	movw	r2, #2285	; 0x8ed
 8001978:	f8a3 237e 	strh.w	r2, [r3, #894]	; 0x37e
    DevNVRAM->calibration_table.dacValB_m27[103] = 0x989;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f640 1289 	movw	r2, #2441	; 0x989
 8001982:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
    DevNVRAM->calibration_table.dacValB_m27[104] = 0x92e;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f640 122e 	movw	r2, #2350	; 0x92e
 800198c:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
    DevNVRAM->calibration_table.dacValB_m27[105] = 0x930;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f44f 6213 	mov.w	r2, #2352	; 0x930
 8001996:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
    DevNVRAM->calibration_table.dacValB_m27[106] = 0x9cf;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f640 12cf 	movw	r2, #2511	; 0x9cf
 80019a0:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
    DevNVRAM->calibration_table.dacValB_m27[107] = 0x979;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f640 1279 	movw	r2, #2425	; 0x979
 80019aa:	f8a3 2388 	strh.w	r2, [r3, #904]	; 0x388
    DevNVRAM->calibration_table.dacValB_m27[108] = 0x9cf;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f640 12cf 	movw	r2, #2511	; 0x9cf
 80019b4:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
    DevNVRAM->calibration_table.dacValB_m27[109] = 0x979;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f640 1279 	movw	r2, #2425	; 0x979
 80019be:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
    DevNVRAM->calibration_table.dacValB_m27[110] = 0x9e6;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f640 12e6 	movw	r2, #2534	; 0x9e6
 80019c8:	f8a3 238e 	strh.w	r2, [r3, #910]	; 0x38e
    DevNVRAM->calibration_table.dacValB_m27[111] = 0x9fc;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f640 12fc 	movw	r2, #2556	; 0x9fc
 80019d2:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
    DevNVRAM->calibration_table.dacValB_m27[112] = 0x992;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f640 1292 	movw	r2, #2450	; 0x992
 80019dc:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
    DevNVRAM->calibration_table.dacValB_m27[113] = 0xaa9;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f640 22a9 	movw	r2, #2729	; 0xaa9
 80019e6:	f8a3 2394 	strh.w	r2, [r3, #916]	; 0x394
    DevNVRAM->calibration_table.dacValB_m27[114] = 0xbd0;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
 80019f0:	f8a3 2396 	strh.w	r2, [r3, #918]	; 0x396
    DevNVRAM->calibration_table.dacValB_m27[115] = 0xc1c;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f640 421c 	movw	r2, #3100	; 0xc1c
 80019fa:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
    DevNVRAM->calibration_table.dacValB_m27[116] = 0x9c6;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001a04:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
    DevNVRAM->calibration_table.dacValB_m27[117] = 0xb2b;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f640 322b 	movw	r2, #2859	; 0xb2b
 8001a0e:	f8a3 239c 	strh.w	r2, [r3, #924]	; 0x39c
    DevNVRAM->calibration_table.dacValB_m27[118] = 0x9d8;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f640 12d8 	movw	r2, #2520	; 0x9d8
 8001a18:	f8a3 239e 	strh.w	r2, [r3, #926]	; 0x39e
    DevNVRAM->calibration_table.dacValB_m27[119] = 0xc1f;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f640 421f 	movw	r2, #3103	; 0xc1f
 8001a22:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
    DevNVRAM->calibration_table.dacValB_m27[120] = 0xb5d;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f640 325d 	movw	r2, #2909	; 0xb5d
 8001a2c:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
    DevNVRAM->calibration_table.dacValB_m27[121] = 0xc50;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f44f 6245 	mov.w	r2, #3152	; 0xc50
 8001a36:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
    DevNVRAM->calibration_table.dacValB_m27[122] = 0xc4e;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f640 424e 	movw	r2, #3150	; 0xc4e
 8001a40:	f8a3 23a6 	strh.w	r2, [r3, #934]	; 0x3a6
    DevNVRAM->calibration_table.dacValB_m27[123] = 0xc4c;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f640 424c 	movw	r2, #3148	; 0xc4c
 8001a4a:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8
    DevNVRAM->calibration_table.dacValB_m27[124] = 0xa0e;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f640 220e 	movw	r2, #2574	; 0xa0e
 8001a54:	f8a3 23aa 	strh.w	r2, [r3, #938]	; 0x3aa
    DevNVRAM->calibration_table.dacValB_m27[125] = 0xc76;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f640 4276 	movw	r2, #3190	; 0xc76
 8001a5e:	f8a3 23ac 	strh.w	r2, [r3, #940]	; 0x3ac
    DevNVRAM->calibration_table.dacValB_m27[126] = 0xbed;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f640 32ed 	movw	r2, #3053	; 0xbed
 8001a68:	f8a3 23ae 	strh.w	r2, [r3, #942]	; 0x3ae
    DevNVRAM->calibration_table.dacValB_m27[127] = 0xa2f;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f640 222f 	movw	r2, #2607	; 0xa2f
 8001a72:	f8a3 23b0 	strh.w	r2, [r3, #944]	; 0x3b0
    DevNVRAM->calibration_table.dacValB_m27[128] = 0xa36;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f640 2236 	movw	r2, #2614	; 0xa36
 8001a7c:	f8a3 23b2 	strh.w	r2, [r3, #946]	; 0x3b2
    DevNVRAM->calibration_table.dacValB_m27[129] = 0xc80;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8001a86:	f8a3 23b4 	strh.w	r2, [r3, #948]	; 0x3b4
    DevNVRAM->calibration_table.dacValB_m27[130] = 0xc71;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f640 4271 	movw	r2, #3185	; 0xc71
 8001a90:	f8a3 23b6 	strh.w	r2, [r3, #950]	; 0x3b6
    DevNVRAM->calibration_table.dacValB_m27[131] = 0xa55;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f640 2255 	movw	r2, #2645	; 0xa55
 8001a9a:	f8a3 23b8 	strh.w	r2, [r3, #952]	; 0x3b8
    DevNVRAM->calibration_table.dacValB_m27[132] = 0xcac;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f640 42ac 	movw	r2, #3244	; 0xcac
 8001aa4:	f8a3 23ba 	strh.w	r2, [r3, #954]	; 0x3ba
    DevNVRAM->calibration_table.dacValB_m27[133] = 0xa6b;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001aae:	f8a3 23bc 	strh.w	r2, [r3, #956]	; 0x3bc
    DevNVRAM->calibration_table.dacValB_m27[134] = 0xcbb;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f640 42bb 	movw	r2, #3259	; 0xcbb
 8001ab8:	f8a3 23be 	strh.w	r2, [r3, #958]	; 0x3be
    DevNVRAM->calibration_table.dacValB_m27[135] = 0xa7d;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f640 227d 	movw	r2, #2685	; 0xa7d
 8001ac2:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
    DevNVRAM->calibration_table.dacValB_m27[136] = 0xb9a;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f640 329a 	movw	r2, #2970	; 0xb9a
 8001acc:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
    DevNVRAM->calibration_table.dacValB_m27[137] = 0xba7;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f640 32a7 	movw	r2, #2983	; 0xba7
 8001ad6:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
    DevNVRAM->calibration_table.dacValB_m27[138] = 0xab4;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001ae0:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
    DevNVRAM->calibration_table.dacValB_m27[139] = 0xbe4;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f640 32e4 	movw	r2, #3044	; 0xbe4
 8001aea:	f8a3 23c8 	strh.w	r2, [r3, #968]	; 0x3c8
    DevNVRAM->calibration_table.dacValB_m27[140] = 0xab4;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f640 22b4 	movw	r2, #2740	; 0xab4
 8001af4:	f8a3 23ca 	strh.w	r2, [r3, #970]	; 0x3ca
    DevNVRAM->calibration_table.dacValB_m27[141] = 0xbbc;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f640 32bc 	movw	r2, #3004	; 0xbbc
 8001afe:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
    DevNVRAM->calibration_table.dacValB_m27[142] = 0xbba;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f640 32ba 	movw	r2, #3002	; 0xbba
 8001b08:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
    DevNVRAM->calibration_table.dacValB_m27[143] = 0xd02;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f640 5202 	movw	r2, #3330	; 0xd02
 8001b12:	f8a3 23d0 	strh.w	r2, [r3, #976]	; 0x3d0
    DevNVRAM->calibration_table.dacValB_m27[144] = 0xbf3;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f640 32f3 	movw	r2, #3059	; 0xbf3
 8001b1c:	f8a3 23d2 	strh.w	r2, [r3, #978]	; 0x3d2
    DevNVRAM->calibration_table.dacValB_m27[145] = 0xaf0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001b26:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
    DevNVRAM->calibration_table.dacValB_m27[146] = 0xaed;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f640 22ed 	movw	r2, #2797	; 0xaed
 8001b30:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
    DevNVRAM->calibration_table.dacValB_m27[147] = 0xaf8;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f640 22f8 	movw	r2, #2808	; 0xaf8
 8001b3a:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    DevNVRAM->calibration_table.dacValB_m27[148] = 0xcfc;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8001b44:	f8a3 23da 	strh.w	r2, [r3, #986]	; 0x3da
    DevNVRAM->calibration_table.dacValB_m27[149] = 0xc18;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f640 4218 	movw	r2, #3096	; 0xc18
 8001b4e:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
    DevNVRAM->calibration_table.dacValB_m27[150] = 0xb0b;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f640 320b 	movw	r2, #2827	; 0xb0b
 8001b58:	f8a3 23de 	strh.w	r2, [r3, #990]	; 0x3de
    DevNVRAM->calibration_table.dacValB_m27[151] = 0xb18;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f640 3218 	movw	r2, #2840	; 0xb18
 8001b62:	f8a3 23e0 	strh.w	r2, [r3, #992]	; 0x3e0
    DevNVRAM->calibration_table.dacValB_m27[152] = 0xb1b;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f640 321b 	movw	r2, #2843	; 0xb1b
 8001b6c:	f8a3 23e2 	strh.w	r2, [r3, #994]	; 0x3e2
    DevNVRAM->calibration_table.dacValB_m27[153] = 0xc08;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f640 4208 	movw	r2, #3080	; 0xc08
 8001b76:	f8a3 23e4 	strh.w	r2, [r3, #996]	; 0x3e4
    DevNVRAM->calibration_table.dacValB_m27[154] = 0xb2a;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f640 322a 	movw	r2, #2858	; 0xb2a
 8001b80:	f8a3 23e6 	strh.w	r2, [r3, #998]	; 0x3e6
    DevNVRAM->calibration_table.dacValB_m27[155] = 0xb2f;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f640 322f 	movw	r2, #2863	; 0xb2f
 8001b8a:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
    DevNVRAM->calibration_table.dacValB_m27[156] = 0xd09;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f640 5209 	movw	r2, #3337	; 0xd09
 8001b94:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
    DevNVRAM->calibration_table.dacValB_m27[157] = 0xc0a;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f640 420a 	movw	r2, #3082	; 0xc0a
 8001b9e:	f8a3 23ec 	strh.w	r2, [r3, #1004]	; 0x3ec
    DevNVRAM->calibration_table.dacValB_m27[158] = 0xb4f;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f640 324f 	movw	r2, #2895	; 0xb4f
 8001ba8:	f8a3 23ee 	strh.w	r2, [r3, #1006]	; 0x3ee
    DevNVRAM->calibration_table.dacValB_m27[159] = 0xb56;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f640 3256 	movw	r2, #2902	; 0xb56
 8001bb2:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
    DevNVRAM->calibration_table.dacValB_m27[160] = 0xb6d;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f640 326d 	movw	r2, #2925	; 0xb6d
 8001bbc:	f8a3 23f2 	strh.w	r2, [r3, #1010]	; 0x3f2
    DevNVRAM->calibration_table.dacValB_m27[161] = 0xb44;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f640 3244 	movw	r2, #2884	; 0xb44
 8001bc6:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4
    DevNVRAM->calibration_table.dacValB_m27[162] = 0x1000;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd0:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <main>:
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 8001be6:	af02      	add	r7, sp, #8
int main(void)
 8001be8:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001bec:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  HAL_Init();
 8001bf0:	f001 f890 	bl	8002d14 <HAL_Init>
	DWT_Init();
 8001bf4:	f7fe fc16 	bl	8000424 <DWT_Init>
  SystemClock_Config();
 8001bf8:	f000 fbba 	bl	8002370 <SystemClock_Config>
  MX_GPIO_Init();
 8001bfc:	f000 fd64 	bl	80026c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001c00:	f000 fc66 	bl	80024d0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001c04:	f008 ff72 	bl	800aaec <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001c08:	f000 fc10 	bl	800242c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001c0c:	f000 fc98 	bl	8002540 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c10:	f000 fcf8 	bl	8002604 <MX_TIM4_Init>
  MX_CRC_Init();
 8001c14:	f000 fc48 	bl	80024a8 <MX_CRC_Init>
	sprintf(buffer, "UID %x-%x-%lx-%lx\n", *idBase0, *idBase1, *idBase2, *idBase3);
 8001c18:	4bce      	ldr	r3, [pc, #824]	; (8001f54 <main+0x374>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4bcd      	ldr	r3, [pc, #820]	; (8001f58 <main+0x378>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	4bcc      	ldr	r3, [pc, #816]	; (8001f5c <main+0x37c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4acc      	ldr	r2, [pc, #816]	; (8001f60 <main+0x380>)
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	49c9      	ldr	r1, [pc, #804]	; (8001f64 <main+0x384>)
 8001c3e:	48ca      	ldr	r0, [pc, #808]	; (8001f68 <main+0x388>)
 8001c40:	f009 fdd8 	bl	800b7f4 <siprintf>
	printf((uint8_t*)buffer);
 8001c44:	48c8      	ldr	r0, [pc, #800]	; (8001f68 <main+0x388>)
 8001c46:	f009 fdbd 	bl	800b7c4 <iprintf>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	48c7      	ldr	r0, [pc, #796]	; (8001f6c <main+0x38c>)
 8001c4e:	f004 fe1b 	bl	8006888 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001c52:	2104      	movs	r1, #4
 8001c54:	48c5      	ldr	r0, [pc, #788]	; (8001f6c <main+0x38c>)
 8001c56:	f004 fe17 	bl	8006888 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	48c4      	ldr	r0, [pc, #784]	; (8001f70 <main+0x390>)
 8001c5e:	f004 fe13 	bl	8006888 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001c62:	2104      	movs	r1, #4
 8001c64:	48c2      	ldr	r0, [pc, #776]	; (8001f70 <main+0x390>)
 8001c66:	f004 fe0f 	bl	8006888 <HAL_TIM_IC_Start_IT>
	SetAllDAC();
 8001c6a:	f7fe fc39 	bl	80004e0 <SetAllDAC>
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001c6e:	48c1      	ldr	r0, [pc, #772]	; (8001f74 <main+0x394>)
 8001c70:	f001 fcc0 	bl	80035f4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001c74:	48bf      	ldr	r0, [pc, #764]	; (8001f74 <main+0x394>)
 8001c76:	f001 f9ab 	bl	8002fd0 <HAL_ADC_Start_IT>

	static FLASH_EraseInitTypeDef EraseInitStruct; // структура для очистки флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // постраничная очистка, FLASH_TYPEERASE_MASSERASE - очистка всего флеша
 8001c7a:	4bbf      	ldr	r3, [pc, #764]	; (8001f78 <main+0x398>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_TABLE_START_ADDR; // адрес 127-ой страницы
 8001c80:	4bbd      	ldr	r3, [pc, #756]	; (8001f78 <main+0x398>)
 8001c82:	4abe      	ldr	r2, [pc, #760]	; (8001f7c <main+0x39c>)
 8001c84:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 0x01;               // кол-во страниц для стирания
 8001c86:	4bbc      	ldr	r3, [pc, #752]	; (8001f78 <main+0x398>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	60da      	str	r2, [r3, #12]
	uint32_t l_Address;
	uint32_t l_Error;
	uint32_t l_Index;
//--------------------------------------------------------------------------
// Чтение DevNVRAM
	l_Address = FLASH_TABLE_START_ADDR;
 8001c8c:	4bbb      	ldr	r3, [pc, #748]	; (8001f7c <main+0x39c>)
 8001c8e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	l_Error = 0;
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001c9e:	e012      	b.n	8001cc6 <main+0xe6>
		DevNVRAM.data32[l_Index] = *(__IO uint32_t*) l_Address;
 8001ca0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		l_Index = l_Index + 1;
 8001cb2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		l_Address = l_Address + 4;
 8001cbc:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001cc6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001cca:	4aad      	ldr	r2, [pc, #692]	; (8001f80 <main+0x3a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d9e7      	bls.n	8001ca0 <main+0xc0>
	}

//--------------------------------------------------------------------------
// если после чтения майджик кей не найден, то это первый запуск

	if (DevNVRAM.calibration_table.MagicNum != MAGIC_KEY_DEFINE) {
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4aab      	ldr	r2, [pc, #684]	; (8001f84 <main+0x3a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	f000 80ee 	beq.w	8001eba <main+0x2da>
		// Подготовка
		// Заносим типовые значения
		memset(DevNVRAM.data32, 0, sizeof(DevNVRAM.data32));
 8001cde:	f107 0308 	add.w	r3, r7, #8
 8001ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f009 fd63 	bl	800b7b4 <memset>

		// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!

		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8001cf4:	e010      	b.n	8001d18 <main+0x138>
			DevNVRAM.calibration_table.dacValA_m12[i] = i;
 8001cf6:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001cfa:	f897 2417 	ldrb.w	r2, [r7, #1047]	; 0x417
 8001cfe:	b291      	uxth	r1, r2
 8001d00:	f107 0208 	add.w	r2, r7, #8
 8001d04:	3304      	adds	r3, #4
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	460a      	mov	r2, r1
 8001d0c:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001d0e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8001d18:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8001d1c:	2b57      	cmp	r3, #87	; 0x57
 8001d1e:	d9ea      	bls.n	8001cf6 <main+0x116>
		}
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
 8001d26:	e010      	b.n	8001d4a <main+0x16a>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001d28:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8001d2c:	f897 2416 	ldrb.w	r2, [r7, #1046]	; 0x416
 8001d30:	b291      	uxth	r1, r2
 8001d32:	f107 0208 	add.w	r2, r7, #8
 8001d36:	335c      	adds	r3, #92	; 0x5c
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	460a      	mov	r2, r1
 8001d3e:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M12; i++) {
 8001d40:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 3416 	strb.w	r3, [r7, #1046]	; 0x416
 8001d4a:	f897 3416 	ldrb.w	r3, [r7, #1046]	; 0x416
 8001d4e:	2b57      	cmp	r3, #87	; 0x57
 8001d50:	d9ea      	bls.n	8001d28 <main+0x148>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 8001d58:	e010      	b.n	8001d7c <main+0x19c>
			DevNVRAM.calibration_table.dacValA_m27[i] = i;
 8001d5a:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 8001d5e:	f897 2415 	ldrb.w	r2, [r7, #1045]	; 0x415
 8001d62:	b291      	uxth	r1, r2
 8001d64:	f107 0208 	add.w	r2, r7, #8
 8001d68:	33b4      	adds	r3, #180	; 0xb4
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	460a      	mov	r2, r1
 8001d70:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001d72:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 8001d76:	3301      	adds	r3, #1
 8001d78:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
 8001d7c:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 8001d80:	2ba2      	cmp	r3, #162	; 0xa2
 8001d82:	d9ea      	bls.n	8001d5a <main+0x17a>
		}
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
 8001d8a:	e010      	b.n	8001dae <main+0x1ce>
			DevNVRAM.calibration_table.dacValB_m12[i] = i;
 8001d8c:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 8001d90:	f897 2414 	ldrb.w	r2, [r7, #1044]	; 0x414
 8001d94:	b291      	uxth	r1, r2
 8001d96:	f107 0208 	add.w	r2, r7, #8
 8001d9a:	335c      	adds	r3, #92	; 0x5c
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	460a      	mov	r2, r1
 8001da2:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < MAX_VAL_M27; i++) {
 8001da4:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 8001da8:	3301      	adds	r3, #1
 8001daa:	f887 3414 	strb.w	r3, [r7, #1044]	; 0x414
 8001dae:	f897 3414 	ldrb.w	r3, [r7, #1044]	; 0x414
 8001db2:	2ba2      	cmp	r3, #162	; 0xa2
 8001db4:	d9ea      	bls.n	8001d8c <main+0x1ac>
		}
		DevNVRAM.calibration_table.Hardwire = 0x06;
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2206      	movs	r2, #6
 8001dbc:	801a      	strh	r2, [r3, #0]
		DevNVRAM.calibration_table.Firmware = 0x05;
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	2205      	movs	r2, #5
 8001dc4:	805a      	strh	r2, [r3, #2]
		DevNVRAM.calibration_table.SN 		= 0x1121001; //11 неделя + год + порядковый номер изготовления
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <main+0x3a8>)
 8001dcc:	605a      	str	r2, [r3, #4]
		DevNVRAM.calibration_table.MagicNum = MAGIC_KEY_DEFINE;
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	4a6c      	ldr	r2, [pc, #432]	; (8001f84 <main+0x3a4>)
 8001dd4:	609a      	str	r2, [r3, #8]

		DevNVRAM.sector.NWrite = 0;
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;//TODO: по какой то причине в этом проекте не работает CRC!!! у
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	2200      	movs	r2, #0
 8001de6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc


//--------------------------------------------------------------------------
		//если после чтения майджик кей не найден, то это первый запуск записываем дефолтную таблицу
		l_Address = FLASH_TABLE_START_ADDR;
 8001dea:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <main+0x39c>)
 8001dec:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0;
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
		l_Index = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001dfc:	e019      	b.n	8001e32 <main+0x252>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001e06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e0a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d004      	beq.n	8001e1e <main+0x23e>
				l_Error++;
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	601a      	str	r2, [r3, #0]
			}
			l_Index = l_Index + 1;
 8001e1e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001e22:	3301      	adds	r3, #1
 8001e24:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			l_Address = l_Address + 4;
 8001e28:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001e32:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001e36:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <main+0x3a0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d9e0      	bls.n	8001dfe <main+0x21e>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d03a      	beq.n	8001eba <main+0x2da>
			// Готовим к записи в память
			HAL_FLASH_Unlock();
 8001e44:	f001 fe16 	bl	8003a74 <HAL_FLASH_Unlock>
			// Очищаем страницу памяти
			HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	484a      	ldr	r0, [pc, #296]	; (8001f78 <main+0x398>)
 8001e4e:	f001 fef9 	bl	8003c44 <HAL_FLASHEx_Erase>
			//Пишем данные в память
			l_Address = FLASH_TABLE_START_ADDR;
 8001e52:	4b4a      	ldr	r3, [pc, #296]	; (8001f7c <main+0x39c>)
 8001e54:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			l_Error = 0x00;
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
			l_Index = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001e64:	e022      	b.n	8001eac <main+0x2cc>
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
						DevNVRAM.data32[l_Index]) != HAL_OK) {
 8001e66:	f107 0308 	add.w	r3, r7, #8
 8001e6a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001e72:	461a      	mov	r2, r3
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f001 fd89 	bl	8003994 <HAL_FLASH_Program>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <main+0x2b2>
					l_Error++;
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	601a      	str	r2, [r3, #0]
				}

				l_Address = l_Address + 4;
 8001e92:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001e96:	3304      	adds	r3, #4
 8001e98:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
				l_Index = l_Index + 1;
 8001e9c:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
				HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f000 ff96 	bl	8002dd8 <HAL_Delay>
			while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001eac:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001eb0:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <main+0x3a0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d9d7      	bls.n	8001e66 <main+0x286>
			}
			HAL_FLASH_Lock();
 8001eb6:	f001 fe03 	bl	8003ac0 <HAL_FLASH_Lock>
	// TODO: !!!!!Добавить математику расчета калибровочной таблицы!!!!!!!


// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

	l_Address = FLASH_TABLE_START_ADDR;
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <main+0x39c>)
 8001ebc:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	l_Error = 0;
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
	l_Index = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	//Читаем и сравниваем
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001ecc:	e019      	b.n	8001f02 <main+0x322>
		if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001ed6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001eda:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d004      	beq.n	8001eee <main+0x30e>
			l_Error++;
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	601a      	str	r2, [r3, #0]
		}
		l_Index = l_Index + 1;
 8001eee:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		l_Address = l_Address + 4;
 8001ef8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001efc:	3304      	adds	r3, #4
 8001efe:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001f02:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <main+0x3a0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d9e0      	bls.n	8001ece <main+0x2ee>
	}

	if (l_Error > 0) { // конфигурация изменилась сохраняем
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d065      	beq.n	8001fe0 <main+0x400>
		// Готовим к записи в память
		HAL_FLASH_Unlock();
 8001f14:	f001 fdae 	bl	8003a74 <HAL_FLASH_Unlock>
		// Очищаем страницу памяти
		HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4816      	ldr	r0, [pc, #88]	; (8001f78 <main+0x398>)
 8001f1e:	f001 fe91 	bl	8003c44 <HAL_FLASHEx_Erase>
		//Пишем данные в память
		l_Address = FLASH_TABLE_START_ADDR;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <main+0x39c>)
 8001f24:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0x00;
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
		l_Index = 0x00;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

		DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8001f34:	f107 0308 	add.w	r3, r7, #8
 8001f38:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
		DevNVRAM.sector.CheckSum = 0;
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001f50:	e03f      	b.n	8001fd2 <main+0x3f2>
 8001f52:	bf00      	nop
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	0800ca24 	.word	0x0800ca24
 8001f68:	20000214 	.word	0x20000214
 8001f6c:	20000508 	.word	0x20000508
 8001f70:	200004b8 	.word	0x200004b8
 8001f74:	20000550 	.word	0x20000550
 8001f78:	20000278 	.word	0x20000278
 8001f7c:	0801fc00 	.word	0x0801fc00
 8001f80:	0801ffff 	.word	0x0801ffff
 8001f84:	48151623 	.word	0x48151623
 8001f88:	01121001 	.word	0x01121001
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
					DevNVRAM.data32[l_Index]) != HAL_OK) {
 8001f8c:	f107 0308 	add.w	r3, r7, #8
 8001f90:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8001f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f001 fcf6 	bl	8003994 <HAL_FLASH_Program>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <main+0x3d8>
				l_Error++;
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	601a      	str	r2, [r3, #0]
			}

			l_Address = l_Address + 4;
 8001fb8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			l_Index = l_Index + 1;
 8001fc2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			HAL_Delay(10);
 8001fcc:	200a      	movs	r0, #10
 8001fce:	f000 ff03 	bl	8002dd8 <HAL_Delay>
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8001fd2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001fd6:	4abe      	ldr	r2, [pc, #760]	; (80022d0 <main+0x6f0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d9d7      	bls.n	8001f8c <main+0x3ac>
		}
		HAL_FLASH_Lock();
 8001fdc:	f001 fd70 	bl	8003ac0 <HAL_FLASH_Lock>
	}
	HAL_Delay(100);
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f000 fef9 	bl	8002dd8 <HAL_Delay>
//--------------------------------------------------------------------------
	crete_calibration_table(&DevNVRAM);
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fc39 	bl	8000868 <crete_calibration_table.8625>
	while (1) {

//**************************************************************************
// Циклически проверяем соотвествует ли информация в памяти массиву настроек?

		l_Address = FLASH_TABLE_START_ADDR;
 8001ff6:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <main+0x6f4>)
 8001ff8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		l_Error = 0;
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
		l_Index = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
		//Читаем и сравниваем
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 8002008:	e019      	b.n	800203e <main+0x45e>
			if (DevNVRAM.data32[l_Index] != *(__IO uint32_t*) l_Address) {
 800200a:	f107 0308 	add.w	r3, r7, #8
 800200e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 8002012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002016:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d004      	beq.n	800202a <main+0x44a>
				l_Error++;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	601a      	str	r2, [r3, #0]
			}
			l_Index = l_Index + 1;
 800202a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800202e:	3301      	adds	r3, #1
 8002030:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
			l_Address = l_Address + 4;
 8002034:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002038:	3304      	adds	r3, #4
 800203a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
		while (l_Address < FLASH_TABLE_STOP_ADDR) {
 800203e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8002042:	4aa3      	ldr	r2, [pc, #652]	; (80022d0 <main+0x6f0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d9e0      	bls.n	800200a <main+0x42a>
		}

		if (l_Error > 0) { // конфигурация изменилась сохраняем
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d055      	beq.n	80020fc <main+0x51c>
			printf("Ошибка чтения таблицы :%i", l_Error);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	48a0      	ldr	r0, [pc, #640]	; (80022d8 <main+0x6f8>)
 8002058:	f009 fbb4 	bl	800b7c4 <iprintf>
			if (l_Error > 0) { // конфигурация изменилась сохраняем
 800205c:	1d3b      	adds	r3, r7, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d048      	beq.n	80020f6 <main+0x516>
					// Готовим к записи в память
					HAL_FLASH_Unlock();
 8002064:	f001 fd06 	bl	8003a74 <HAL_FLASH_Unlock>
					// Очищаем страницу памяти
					HAL_FLASHEx_Erase(&EraseInitStruct, &l_Error);
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	4619      	mov	r1, r3
 800206c:	489b      	ldr	r0, [pc, #620]	; (80022dc <main+0x6fc>)
 800206e:	f001 fde9 	bl	8003c44 <HAL_FLASHEx_Erase>
					//Пишем данные в память
					l_Address = FLASH_TABLE_START_ADDR;
 8002072:	4b98      	ldr	r3, [pc, #608]	; (80022d4 <main+0x6f4>)
 8002074:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
					l_Error = 0x00;
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
					l_Index = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

					DevNVRAM.sector.NWrite = DevNVRAM.sector.NWrite + 1;
 8002084:	f107 0308 	add.w	r3, r7, #8
 8002088:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	f107 0308 	add.w	r3, r7, #8
 8002092:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
					DevNVRAM.sector.CheckSum = 0;
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2200      	movs	r2, #0
 800209c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc

					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80020a0:	e022      	b.n	80020e8 <main+0x508>
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
								DevNVRAM.data32[l_Index]) != HAL_OK) {
 80020a2:	f107 0308 	add.w	r3, r7, #8
 80020a6:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
						if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, l_Address,
 80020ae:	461a      	mov	r2, r3
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f8d7 141c 	ldr.w	r1, [r7, #1052]	; 0x41c
 80020b8:	2002      	movs	r0, #2
 80020ba:	f001 fc6b 	bl	8003994 <HAL_FLASH_Program>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d004      	beq.n	80020ce <main+0x4ee>
							l_Error++;
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	601a      	str	r2, [r3, #0]
						}

						l_Address = l_Address + 4;
 80020ce:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80020d2:	3304      	adds	r3, #4
 80020d4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
						l_Index = l_Index + 1;
 80020d8:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
						HAL_Delay(10);
 80020e2:	200a      	movs	r0, #10
 80020e4:	f000 fe78 	bl	8002dd8 <HAL_Delay>
					while (l_Address < FLASH_TABLE_STOP_ADDR) {
 80020e8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80020ec:	4a78      	ldr	r2, [pc, #480]	; (80022d0 <main+0x6f0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d9d7      	bls.n	80020a2 <main+0x4c2>
					}
					HAL_FLASH_Lock();
 80020f2:	f001 fce5 	bl	8003ac0 <HAL_FLASH_Lock>
				}
				HAL_Delay(100);
 80020f6:	2064      	movs	r0, #100	; 0x64
 80020f8:	f000 fe6e 	bl	8002dd8 <HAL_Delay>
		}

//**************************************************************************
#if  TEST_READ_BTN

		uint32_t ms = HAL_GetTick();
 80020fc:	f000 fe62 	bl	8002dc4 <HAL_GetTick>
 8002100:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
		uint8_t key1_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12); // подставить свой пин //TODO: Проверить работу BACK key!
 8002104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002108:	4875      	ldr	r0, [pc, #468]	; (80022e0 <main+0x700>)
 800210a:	f001 ffc7 	bl	800409c <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

		if (key1_state == 0 && !short_state1 && (ms - time_key1) > 50) {
 8002114:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8002118:	2b00      	cmp	r3, #0
 800211a:	d115      	bne.n	8002148 <main+0x568>
 800211c:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <main+0x704>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <main+0x568>
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <main+0x708>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b32      	cmp	r3, #50	; 0x32
 8002130:	d90a      	bls.n	8002148 <main+0x568>
			short_state1 = 1;
 8002132:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <main+0x704>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
			long_state1 = 0;
 8002138:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <main+0x70c>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800213e:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <main+0x708>)
 8002140:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e033      	b.n	80021b0 <main+0x5d0>
		} else if (key1_state
 8002148:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800214c:	2b00      	cmp	r3, #0
 800214e:	d112      	bne.n	8002176 <main+0x596>
				== 0&& !long_state1 && (ms - time_key1) > KEY_LONG_DELAY) {
 8002150:	4b66      	ldr	r3, [pc, #408]	; (80022ec <main+0x70c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10e      	bne.n	8002176 <main+0x596>
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <main+0x708>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002166:	d906      	bls.n	8002176 <main+0x596>
			long_state1 = 1;
 8002168:	4b60      	ldr	r3, [pc, #384]	; (80022ec <main+0x70c>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn1_long_rd = 1;
 800216e:	4b60      	ldr	r3, [pc, #384]	; (80022f0 <main+0x710>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e01c      	b.n	80021b0 <main+0x5d0>

		} else if (key1_state == 1 && short_state1 && (ms - time_key1) > 50) {
 8002176:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 800217a:	2b01      	cmp	r3, #1
 800217c:	d118      	bne.n	80021b0 <main+0x5d0>
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <main+0x704>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d014      	beq.n	80021b0 <main+0x5d0>
 8002186:	4b58      	ldr	r3, [pc, #352]	; (80022e8 <main+0x708>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b32      	cmp	r3, #50	; 0x32
 8002192:	d90d      	bls.n	80021b0 <main+0x5d0>
			short_state1 = 0;
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <main+0x704>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
			time_key1 = ms;
 800219a:	4a53      	ldr	r2, [pc, #332]	; (80022e8 <main+0x708>)
 800219c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80021a0:	6013      	str	r3, [r2, #0]

			if (!long_state1) {
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <main+0x70c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <main+0x5d0>
				// действие на короткое нажатие
				btn1_short_rd = 1;
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <main+0x714>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
			}
		}
		uint8_t key2_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13); // подставить свой пин
 80021b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b4:	484a      	ldr	r0, [pc, #296]	; (80022e0 <main+0x700>)
 80021b6:	f001 ff71 	bl	800409c <HAL_GPIO_ReadPin>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e

		if (key2_state == 0 && !short_state2 && (ms - time_key2) > 50) {
 80021c0:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d115      	bne.n	80021f4 <main+0x614>
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <main+0x718>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <main+0x614>
 80021d0:	4b4a      	ldr	r3, [pc, #296]	; (80022fc <main+0x71c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b32      	cmp	r3, #50	; 0x32
 80021dc:	d90a      	bls.n	80021f4 <main+0x614>
			short_state2 = 1;
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <main+0x718>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
			long_state2 = 0;
 80021e4:	4b46      	ldr	r3, [pc, #280]	; (8002300 <main+0x720>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 80021ea:	4a44      	ldr	r2, [pc, #272]	; (80022fc <main+0x71c>)
 80021ec:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	e033      	b.n	800225c <main+0x67c>
		} else if (key2_state
 80021f4:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d112      	bne.n	8002222 <main+0x642>
				== 0&& !long_state2 && (ms - time_key2) > KEY_LONG_DELAY) {
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <main+0x720>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10e      	bne.n	8002222 <main+0x642>
 8002204:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <main+0x71c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002212:	d906      	bls.n	8002222 <main+0x642>
			long_state2 = 1;
 8002214:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <main+0x720>)
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]

			// действие на длинное нажатие
			btn2_long_rd = 1;
 800221a:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <main+0x724>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e01c      	b.n	800225c <main+0x67c>
		} else if (key2_state == 1 && short_state2 && (ms - time_key2) > 50) {
 8002222:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002226:	2b01      	cmp	r3, #1
 8002228:	d118      	bne.n	800225c <main+0x67c>
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <main+0x718>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d014      	beq.n	800225c <main+0x67c>
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <main+0x71c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b32      	cmp	r3, #50	; 0x32
 800223e:	d90d      	bls.n	800225c <main+0x67c>
			short_state2 = 0;
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <main+0x718>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
			time_key2 = ms;
 8002246:	4a2d      	ldr	r2, [pc, #180]	; (80022fc <main+0x71c>)
 8002248:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800224c:	6013      	str	r3, [r2, #0]

			if (!long_state2) {
 800224e:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <main+0x720>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <main+0x67c>
				// действие на короткое нажатие
				btn2_short_rd = 1;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <main+0x728>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
			}
		}

		uint8_t key3_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14); // подставить свой пин
 800225c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002260:	481f      	ldr	r0, [pc, #124]	; (80022e0 <main+0x700>)
 8002262:	f001 ff1b 	bl	800409c <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
		if (key3_state == 0 && !short_state3 && (ms - time_key3) > 50) {
 800226c:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8002270:	2b00      	cmp	r3, #0
 8002272:	d115      	bne.n	80022a0 <main+0x6c0>
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <main+0x72c>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d111      	bne.n	80022a0 <main+0x6c0>
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <main+0x730>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b32      	cmp	r3, #50	; 0x32
 8002288:	d90a      	bls.n	80022a0 <main+0x6c0>
			short_state3 = 1;
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <main+0x72c>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
			long_state3 = 0;
 8002290:	4b20      	ldr	r3, [pc, #128]	; (8002314 <main+0x734>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <main+0x730>)
 8002298:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e05e      	b.n	800235e <main+0x77e>
		} else if (key3_state
 80022a0:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d139      	bne.n	800231c <main+0x73c>
				== 0&& !long_state3 && (ms - time_key3) > KEY_LONG_DELAY) {
 80022a8:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <main+0x734>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d135      	bne.n	800231c <main+0x73c>
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <main+0x730>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022be:	d92d      	bls.n	800231c <main+0x73c>
			long_state3 = 1;
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <main+0x734>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
			// действие на длинное нажатие
			btn3_long_rd = 1;
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <main+0x738>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e047      	b.n	800235e <main+0x77e>
 80022ce:	bf00      	nop
 80022d0:	0801ffff 	.word	0x0801ffff
 80022d4:	0801fc00 	.word	0x0801fc00
 80022d8:	0800ca38 	.word	0x0800ca38
 80022dc:	20000278 	.word	0x20000278
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	20000254 	.word	0x20000254
 80022e8:	20000258 	.word	0x20000258
 80022ec:	20000255 	.word	0x20000255
 80022f0:	2000025c 	.word	0x2000025c
 80022f4:	2000025d 	.word	0x2000025d
 80022f8:	2000025e 	.word	0x2000025e
 80022fc:	20000260 	.word	0x20000260
 8002300:	2000025f 	.word	0x2000025f
 8002304:	20000264 	.word	0x20000264
 8002308:	20000265 	.word	0x20000265
 800230c:	20000266 	.word	0x20000266
 8002310:	20000268 	.word	0x20000268
 8002314:	20000267 	.word	0x20000267
 8002318:	2000026c 	.word	0x2000026c
		} else if (key3_state == 1 && short_state3 && (ms - time_key3) > 50) {
 800231c:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8002320:	2b01      	cmp	r3, #1
 8002322:	f47f ae68 	bne.w	8001ff6 <main+0x416>
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <main+0x780>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f43f ae63 	beq.w	8001ff6 <main+0x416>
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <main+0x784>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b32      	cmp	r3, #50	; 0x32
 800233c:	f67f ae5b 	bls.w	8001ff6 <main+0x416>
			short_state3 = 0;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <main+0x780>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
			time_key3 = ms;
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <main+0x784>)
 8002348:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 800234c:	6013      	str	r3, [r2, #0]

			if (!long_state3) {
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <main+0x788>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f47f ae4f 	bne.w	8001ff6 <main+0x416>
				// действие на короткое нажатие
				btn3_short_rd = 1;
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <main+0x78c>)
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
	while (1) {
 800235e:	e64a      	b.n	8001ff6 <main+0x416>
 8002360:	20000266 	.word	0x20000266
 8002364:	20000268 	.word	0x20000268
 8002368:	20000267 	.word	0x20000267
 800236c:	2000026d 	.word	0x2000026d

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800237a:	2228      	movs	r2, #40	; 0x28
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f009 fa18 	bl	800b7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023ae:	2301      	movs	r3, #1
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b2:	2302      	movs	r3, #2
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fa28 	bl	800581c <HAL_RCC_OscConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023d2:	f000 fa09 	bl	80027e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d6:	230f      	movs	r3, #15
 80023d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023da:	2302      	movs	r3, #2
 80023dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2102      	movs	r1, #2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fc92 	bl	8005d1c <HAL_RCC_ClockConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80023fe:	f000 f9f3 	bl	80027e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002402:	2312      	movs	r3, #18
 8002404:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800240a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800240c:	2300      	movs	r3, #0
 800240e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fe08 	bl	8006028 <HAL_RCCEx_PeriphCLKConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800241e:	f000 f9e3 	bl	80027e8 <Error_Handler>
  }
}
 8002422:	bf00      	nop
 8002424:	3750      	adds	r7, #80	; 0x50
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800243c:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_ADC1_Init+0x74>)
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <MX_ADC1_Init+0x78>)
 8002440:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <MX_ADC1_Init+0x74>)
 800244a:	2201      	movs	r2, #1
 800244c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002450:	2200      	movs	r2, #0
 8002452:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002456:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800245a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_ADC1_Init+0x74>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_ADC1_Init+0x74>)
 8002464:	2201      	movs	r2, #1
 8002466:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002468:	480d      	ldr	r0, [pc, #52]	; (80024a0 <MX_ADC1_Init+0x74>)
 800246a:	f000 fcd9 	bl	8002e20 <HAL_ADC_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002474:	f000 f9b8 	bl	80027e8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002478:	2303      	movs	r3, #3
 800247a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800247c:	2301      	movs	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002480:	2302      	movs	r3, #2
 8002482:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_ADC1_Init+0x74>)
 800248a:	f000 ff2f 	bl	80032ec <HAL_ADC_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002494:	f000 f9a8 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000550 	.word	0x20000550
 80024a4:	40012400 	.word	0x40012400

080024a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_CRC_Init+0x20>)
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <MX_CRC_Init+0x24>)
 80024b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_CRC_Init+0x20>)
 80024b4:	f001 fa51 	bl	800395a <HAL_CRC_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80024be:	f000 f993 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000500 	.word	0x20000500
 80024cc:	40023000 	.word	0x40023000

080024d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_SPI1_Init+0x68>)
 80024d6:	4a19      	ldr	r2, [pc, #100]	; (800253c <MX_SPI1_Init+0x6c>)
 80024d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_SPI1_Init+0x68>)
 80024dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_SPI1_Init+0x68>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <MX_SPI1_Init+0x68>)
 80024ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_SPI1_Init+0x68>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <MX_SPI1_Init+0x68>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024fc:	4b0e      	ldr	r3, [pc, #56]	; (8002538 <MX_SPI1_Init+0x68>)
 80024fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002502:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <MX_SPI1_Init+0x68>)
 8002506:	2208      	movs	r2, #8
 8002508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <MX_SPI1_Init+0x68>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <MX_SPI1_Init+0x68>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <MX_SPI1_Init+0x68>)
 8002518:	2200      	movs	r2, #0
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <MX_SPI1_Init+0x68>)
 800251e:	220a      	movs	r2, #10
 8002520:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_SPI1_Init+0x68>)
 8002524:	f003 fefa 	bl	800631c <HAL_SPI_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800252e:	f000 f95b 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000580 	.word	0x20000580
 800253c:	40013000 	.word	0x40013000

08002540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002550:	463b      	mov	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800255c:	4b27      	ldr	r3, [pc, #156]	; (80025fc <MX_TIM3_Init+0xbc>)
 800255e:	4a28      	ldr	r2, [pc, #160]	; (8002600 <MX_TIM3_Init+0xc0>)
 8002560:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <MX_TIM3_Init+0xbc>)
 8002564:	2247      	movs	r2, #71	; 0x47
 8002566:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <MX_TIM3_Init+0xbc>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <MX_TIM3_Init+0xbc>)
 8002570:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002574:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_TIM3_Init+0xbc>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <MX_TIM3_Init+0xbc>)
 800257e:	2200      	movs	r2, #0
 8002580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002582:	481e      	ldr	r0, [pc, #120]	; (80025fc <MX_TIM3_Init+0xbc>)
 8002584:	f004 f930 	bl	80067e8 <HAL_TIM_IC_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800258e:	f000 f92b 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4619      	mov	r1, r3
 80025a0:	4816      	ldr	r0, [pc, #88]	; (80025fc <MX_TIM3_Init+0xbc>)
 80025a2:	f004 fe0f 	bl	80071c4 <HAL_TIMEx_MasterConfigSynchronization>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80025ac:	f000 f91c 	bl	80027e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025b0:	2300      	movs	r3, #0
 80025b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025b4:	2301      	movs	r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	4619      	mov	r1, r3
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_TIM3_Init+0xbc>)
 80025c8:	f004 fb6c 	bl	8006ca4 <HAL_TIM_IC_ConfigChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80025d2:	f000 f909 	bl	80027e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80025d6:	2302      	movs	r3, #2
 80025d8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80025da:	2302      	movs	r3, #2
 80025dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	2204      	movs	r2, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_TIM3_Init+0xbc>)
 80025e6:	f004 fb5d 	bl	8006ca4 <HAL_TIM_IC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80025f0:	f000 f8fa 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000508 	.word	0x20000508
 8002600:	40000400 	.word	0x40000400

08002604 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002620:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <MX_TIM4_Init+0xc0>)
 8002624:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002628:	2247      	movs	r2, #71	; 0x47
 800262a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <MX_TIM4_Init+0xbc>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002634:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002638:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263a:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <MX_TIM4_Init+0xbc>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002646:	481e      	ldr	r0, [pc, #120]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002648:	f004 f8ce 	bl	80067e8 <HAL_TIM_IC_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002652:	f000 f8c9 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265e:	f107 0310 	add.w	r3, r7, #16
 8002662:	4619      	mov	r1, r3
 8002664:	4816      	ldr	r0, [pc, #88]	; (80026c0 <MX_TIM4_Init+0xbc>)
 8002666:	f004 fdad 	bl	80071c4 <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002670:	f000 f8ba 	bl	80027e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002674:	2300      	movs	r3, #0
 8002676:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002678:	2301      	movs	r3, #1
 800267a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002684:	463b      	mov	r3, r7
 8002686:	2200      	movs	r2, #0
 8002688:	4619      	mov	r1, r3
 800268a:	480d      	ldr	r0, [pc, #52]	; (80026c0 <MX_TIM4_Init+0xbc>)
 800268c:	f004 fb0a 	bl	8006ca4 <HAL_TIM_IC_ConfigChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002696:	f000 f8a7 	bl	80027e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800269a:	2302      	movs	r3, #2
 800269c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800269e:	2302      	movs	r3, #2
 80026a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026a2:	463b      	mov	r3, r7
 80026a4:	2204      	movs	r2, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4805      	ldr	r0, [pc, #20]	; (80026c0 <MX_TIM4_Init+0xbc>)
 80026aa:	f004 fafb 	bl	8006ca4 <HAL_TIM_IC_ConfigChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80026b4:	f000 f898 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200004b8 	.word	0x200004b8
 80026c4:	40000800 	.word	0x40000800

080026c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ce:	f107 0310 	add.w	r3, r7, #16
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026dc:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <MX_GPIO_Init+0x110>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a3d      	ldr	r2, [pc, #244]	; (80027d8 <MX_GPIO_Init+0x110>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <MX_GPIO_Init+0x110>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f4:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <MX_GPIO_Init+0x110>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <MX_GPIO_Init+0x110>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6193      	str	r3, [r2, #24]
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <MX_GPIO_Init+0x110>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <MX_GPIO_Init+0x110>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	4a31      	ldr	r2, [pc, #196]	; (80027d8 <MX_GPIO_Init+0x110>)
 8002712:	f043 0304 	orr.w	r3, r3, #4
 8002716:	6193      	str	r3, [r2, #24]
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <MX_GPIO_Init+0x110>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <MX_GPIO_Init+0x110>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <MX_GPIO_Init+0x110>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	6193      	str	r3, [r2, #24]
 8002730:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <MX_GPIO_Init+0x110>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002742:	4826      	ldr	r0, [pc, #152]	; (80027dc <MX_GPIO_Init+0x114>)
 8002744:	f001 fcc1 	bl	80040ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	f240 4112 	movw	r1, #1042	; 0x412
 800274e:	4824      	ldr	r0, [pc, #144]	; (80027e0 <MX_GPIO_Init+0x118>)
 8002750:	f001 fcbb 	bl	80040ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002754:	2201      	movs	r2, #1
 8002756:	2104      	movs	r1, #4
 8002758:	4821      	ldr	r0, [pc, #132]	; (80027e0 <MX_GPIO_Init+0x118>)
 800275a:	f001 fcb6 	bl	80040ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800275e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276c:	2302      	movs	r3, #2
 800276e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f107 0310 	add.w	r3, r7, #16
 8002774:	4619      	mov	r1, r3
 8002776:	4819      	ldr	r0, [pc, #100]	; (80027dc <MX_GPIO_Init+0x114>)
 8002778:	f001 fb0c 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 800277c:	f240 4316 	movw	r3, #1046	; 0x416
 8002780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2302      	movs	r3, #2
 800278c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0310 	add.w	r3, r7, #16
 8002792:	4619      	mov	r1, r3
 8002794:	4812      	ldr	r0, [pc, #72]	; (80027e0 <MX_GPIO_Init+0x118>)
 8002796:	f001 fafd 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800279a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_GPIO_Init+0x11c>)
 80027b0:	f001 faf0 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80027b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80027b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	4619      	mov	r1, r3
 80027c8:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_GPIO_Init+0x11c>)
 80027ca:	f001 fae3 	bl	8003d94 <HAL_GPIO_Init>

}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40011000 	.word	0x40011000
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40010c00 	.word	0x40010c00

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_MspInit+0x5c>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_MspInit+0x5c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_MspInit+0x5c>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <HAL_MspInit+0x5c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <HAL_MspInit+0x5c>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_MspInit+0x5c>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_MspInit+0x60>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_MspInit+0x60>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000

08002858 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b088      	sub	sp, #32
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <HAL_ADC_MspInit+0x7c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d129      	bne.n	80028cc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6193      	str	r3, [r2, #24]
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_ADC_MspInit+0x80>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80028a8:	2308      	movs	r3, #8
 80028aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ac:	2303      	movs	r3, #3
 80028ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4619      	mov	r1, r3
 80028b6:	4809      	ldr	r0, [pc, #36]	; (80028dc <HAL_ADC_MspInit+0x84>)
 80028b8:	f001 fa6c 	bl	8003d94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2012      	movs	r0, #18
 80028c2:	f001 f814 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028c6:	2012      	movs	r0, #18
 80028c8:	f001 f82d 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40012400 	.word	0x40012400
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010800 	.word	0x40010800

080028e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_CRC_MspInit+0x34>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10b      	bne.n	800290a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_CRC_MspInit+0x38>)
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	4a08      	ldr	r2, [pc, #32]	; (8002918 <HAL_CRC_MspInit+0x38>)
 80028f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028fc:	6153      	str	r3, [r2, #20]
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_CRC_MspInit+0x38>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40023000 	.word	0x40023000
 8002918:	40021000 	.word	0x40021000

0800291c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0310 	add.w	r3, r7, #16
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_SPI_MspInit+0x70>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d123      	bne.n	8002984 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_SPI_MspInit+0x74>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <HAL_SPI_MspInit+0x74>)
 8002942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_SPI_MspInit+0x74>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_SPI_MspInit+0x74>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_SPI_MspInit+0x74>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_SPI_MspInit+0x74>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 800296c:	23a0      	movs	r3, #160	; 0xa0
 800296e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002974:	2303      	movs	r3, #3
 8002976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4619      	mov	r1, r3
 800297e:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_SPI_MspInit+0x78>)
 8002980:	f001 fa08 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40013000 	.word	0x40013000
 8002990:	40021000 	.word	0x40021000
 8002994:	40010800 	.word	0x40010800

08002998 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <HAL_TIM_IC_MspInit+0x108>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d13e      	bne.n	8002a36 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029b8:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	4a39      	ldr	r2, [pc, #228]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	61d3      	str	r3, [r2, #28]
 80029c4:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029d6:	f043 0308 	orr.w	r3, r3, #8
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029e8:	2310      	movs	r3, #16
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ec:	2300      	movs	r3, #0
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	482b      	ldr	r0, [pc, #172]	; (8002aa8 <HAL_TIM_IC_MspInit+0x110>)
 80029fc:	f001 f9ca 	bl	8003d94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002a00:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_TIM_IC_MspInit+0x114>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	4a23      	ldr	r2, [pc, #140]	; (8002aac <HAL_TIM_IC_MspInit+0x114>)
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	201d      	movs	r0, #29
 8002a2a:	f000 ff60 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a2e:	201d      	movs	r0, #29
 8002a30:	f000 ff79 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a34:	e030      	b.n	8002a98 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <HAL_TIM_IC_MspInit+0x118>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d12b      	bne.n	8002a98 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a17      	ldr	r2, [pc, #92]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	61d3      	str	r3, [r2, #28]
 8002a4c:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a5e:	f043 0308 	orr.w	r3, r3, #8
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_TIM_IC_MspInit+0x10c>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a70:	2340      	movs	r3, #64	; 0x40
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <HAL_TIM_IC_MspInit+0x110>)
 8002a84:	f001 f986 	bl	8003d94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	201e      	movs	r0, #30
 8002a8e:	f000 ff2e 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a92:	201e      	movs	r0, #30
 8002a94:	f000 ff47 	bl	8003926 <HAL_NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010c00 	.word	0x40010c00
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002ac4:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <HardFault_Handler+0x14>)
 8002ac6:	f008 fe7d 	bl	800b7c4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("HardFault_IRQn");
 8002aca:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <HardFault_Handler+0x14>)
 8002acc:	f008 fe7a 	bl	800b7c4 <iprintf>
 8002ad0:	e7fb      	b.n	8002aca <HardFault_Handler+0xa>
 8002ad2:	bf00      	nop
 8002ad4:	0800ca98 	.word	0x0800ca98

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b12:	f000 f945 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <ADC1_2_IRQHandler+0x10>)
 8002b22:	f000 fb17 	bl	8003154 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000550 	.word	0x20000550

08002b30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b36:	f001 fc11 	bl	800435c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000ec4 	.word	0x20000ec4

08002b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM3_IRQHandler+0x10>)
 8002b4a:	f003 ffa3 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000508 	.word	0x20000508

08002b58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM4_IRQHandler+0x10>)
 8002b5e:	f003 ff99 	bl	8006a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200004b8 	.word	0x200004b8

08002b6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e00a      	b.n	8002b94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b7e:	f3af 8000 	nop.w
 8002b82:	4601      	mov	r1, r0
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	60ba      	str	r2, [r7, #8]
 8002b8a:	b2ca      	uxtb	r2, r1
 8002b8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	dbf0      	blt.n	8002b7e <_read+0x12>
	}

return len;
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
	return -1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bcc:	605a      	str	r2, [r3, #4]
	return 0;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <_isatty>:

int _isatty(int file)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
	return 1;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b085      	sub	sp, #20
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
	...

08002c08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <_sbrk+0x50>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <_sbrk+0x16>
		heap_end = &end;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <_sbrk+0x50>)
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <_sbrk+0x54>)
 8002c1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <_sbrk+0x50>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <_sbrk+0x50>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	466a      	mov	r2, sp
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d907      	bls.n	8002c42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002c32:	f008 fd87 	bl	800b744 <__errno>
 8002c36:	4603      	mov	r3, r0
 8002c38:	220c      	movs	r2, #12
 8002c3a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	e006      	b.n	8002c50 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <_sbrk+0x50>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <_sbrk+0x50>)
 8002c4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20000288 	.word	0x20000288
 8002c5c:	200011c0 	.word	0x200011c0

08002c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <SystemInit+0x5c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <SystemInit+0x5c>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <SystemInit+0x5c>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4911      	ldr	r1, [pc, #68]	; (8002cbc <SystemInit+0x5c>)
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <SystemInit+0x60>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <SystemInit+0x5c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0e      	ldr	r2, [pc, #56]	; (8002cbc <SystemInit+0x5c>)
 8002c82:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c8a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <SystemInit+0x5c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <SystemInit+0x5c>)
 8002c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c96:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <SystemInit+0x5c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <SystemInit+0x5c>)
 8002c9e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002ca2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <SystemInit+0x5c>)
 8002ca6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002caa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <SystemInit+0x64>)
 8002cae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cb2:	609a      	str	r2, [r3, #8]
#endif 
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	f8ff0000 	.word	0xf8ff0000
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cca:	e003      	b.n	8002cd4 <LoopCopyDataInit>

08002ccc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cd2:	3104      	adds	r1, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002cd4:	480a      	ldr	r0, [pc, #40]	; (8002d00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cdc:	d3f6      	bcc.n	8002ccc <CopyDataInit>
  ldr r2, =_sbss
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ce0:	e002      	b.n	8002ce8 <LoopFillZerobss>

08002ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ce2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ce4:	f842 3b04 	str.w	r3, [r2], #4

08002ce8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002cea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002cec:	d3f9      	bcc.n	8002ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cee:	f7ff ffb7 	bl	8002c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cf2:	f008 fd2d 	bl	800b750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cf6:	f7fe ff73 	bl	8001be0 <main>
  bx lr
 8002cfa:	4770      	bx	lr
  ldr r3, =_sidata
 8002cfc:	0800cc1c 	.word	0x0800cc1c
  ldr r0, =_sdata
 8002d00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d04:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002d08:	200001f8 	.word	0x200001f8
  ldr r3, = _ebss
 8002d0c:	200011c0 	.word	0x200011c0

08002d10 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d10:	e7fe      	b.n	8002d10 <CAN1_RX1_IRQHandler>
	...

08002d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_Init+0x28>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_Init+0x28>)
 8002d1e:	f043 0310 	orr.w	r3, r3, #16
 8002d22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 fdd7 	bl	80038d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fd60 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40022000 	.word	0x40022000

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fdef 	bl	8003942 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	f000 fdb7 	bl	80038ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000014 	.word	0x20000014
 8002d98:	2000001c 	.word	0x2000001c
 8002d9c:	20000018 	.word	0x20000018

08002da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_IncTick+0x1c>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_IncTick+0x20>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a03      	ldr	r2, [pc, #12]	; (8002dc0 <HAL_IncTick+0x20>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	2000001c 	.word	0x2000001c
 8002dc0:	200005d8 	.word	0x200005d8

08002dc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	; (8002dd4 <HAL_GetTick+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	200005d8 	.word	0x200005d8

08002dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de0:	f7ff fff0 	bl	8002dc4 <HAL_GetTick>
 8002de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d005      	beq.n	8002dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_Delay+0x44>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dfe:	bf00      	nop
 8002e00:	f7ff ffe0 	bl	8002dc4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d8f7      	bhi.n	8002e00 <HAL_Delay+0x28>
  {
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	2000001c 	.word	0x2000001c

08002e20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e0be      	b.n	8002fc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fcfa 	bl	8002858 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb8b 	bl	8003580 <ADC_ConversionStop_Disable>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 8099 	bne.w	8002fae <HAL_ADC_Init+0x18e>
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 8095 	bne.w	8002fae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e8c:	f023 0302 	bic.w	r3, r3, #2
 8002e90:	f043 0202 	orr.w	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ea0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7b1b      	ldrb	r3, [r3, #12]
 8002ea6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ea8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d003      	beq.n	8002ec2 <HAL_ADC_Init+0xa2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_ADC_Init+0xa8>
 8002ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_Init+0xaa>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7d1b      	ldrb	r3, [r3, #20]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d119      	bne.n	8002f0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7b1b      	ldrb	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	035a      	lsls	r2, r3, #13
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e00b      	b.n	8002f0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	f043 0201 	orr.w	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_ADC_Init+0x1a8>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_Init+0x126>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d104      	bne.n	8002f50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	051b      	lsls	r3, r3, #20
 8002f4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <HAL_ADC_Init+0x1ac>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10b      	bne.n	8002f8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f8a:	e018      	b.n	8002fbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	f023 0312 	bic.w	r3, r3, #18
 8002f94:	f043 0210 	orr.w	r2, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f043 0201 	orr.w	r2, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fac:	e007      	b.n	8002fbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	f043 0210 	orr.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	ffe1f7fd 	.word	0xffe1f7fd
 8002fcc:	ff1f0efe 	.word	0xff1f0efe

08002fd0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_Start_IT+0x1a>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e0a0      	b.n	800312c <HAL_ADC_Start_IT+0x15c>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fa72 	bl	80034dc <ADC_Enable>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f040 808f 	bne.w	8003122 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a45      	ldr	r2, [pc, #276]	; (8003134 <HAL_ADC_Start_IT+0x164>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d105      	bne.n	800302e <HAL_ADC_Start_IT+0x5e>
 8003022:	4b45      	ldr	r3, [pc, #276]	; (8003138 <HAL_ADC_Start_IT+0x168>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d115      	bne.n	800305a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d026      	beq.n	8003096 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003050:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003058:	e01d      	b.n	8003096 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a33      	ldr	r2, [pc, #204]	; (8003138 <HAL_ADC_Start_IT+0x168>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d004      	beq.n	800307a <HAL_ADC_Start_IT+0xaa>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2f      	ldr	r2, [pc, #188]	; (8003134 <HAL_ADC_Start_IT+0x164>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10d      	bne.n	8003096 <HAL_ADC_Start_IT+0xc6>
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_ADC_Start_IT+0x168>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003082:	2b00      	cmp	r3, #0
 8003084:	d007      	beq.n	8003096 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800308e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	f023 0206 	bic.w	r2, r3, #6
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0202 	mvn.w	r2, #2
 80030c6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030e6:	d113      	bne.n	8003110 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_ADC_Start_IT+0x164>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d105      	bne.n	80030fe <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_ADC_Start_IT+0x168>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	e00c      	b.n	800312a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	e003      	b.n	800312a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40012800 	.word	0x40012800
 8003138:	40012400 	.word	0x40012400

0800313c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr

08003154 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b20      	cmp	r3, #32
 8003168:	d140      	bne.n	80031ec <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b02      	cmp	r3, #2
 8003176:	d139      	bne.n	80031ec <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800319a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800319e:	d11d      	bne.n	80031dc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d119      	bne.n	80031dc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0220 	bic.w	r2, r2, #32
 80031b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fb29 	bl	8000834 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f06f 0212 	mvn.w	r2, #18
 80031ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d14f      	bne.n	800329a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d148      	bne.n	800329a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800322a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800322e:	d012      	beq.n	8003256 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800323a:	2b00      	cmp	r3, #0
 800323c:	d125      	bne.n	800328a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003248:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800324c:	d11d      	bne.n	800328a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d119      	bne.n	800328a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003264:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa4e 	bl	800372c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 020c 	mvn.w	r2, #12
 8003298:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d114      	bne.n	80032d2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10d      	bne.n	80032d2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f809 	bl	80032da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0201 	mvn.w	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x20>
 8003308:	2302      	movs	r3, #2
 800330a:	e0dc      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x1da>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b06      	cmp	r3, #6
 800331a:	d81c      	bhi.n	8003356 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	3b05      	subs	r3, #5
 800332e:	221f      	movs	r2, #31
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	4019      	ands	r1, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	3b05      	subs	r3, #5
 8003348:	fa00 f203 	lsl.w	r2, r0, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
 8003354:	e03c      	b.n	80033d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d81c      	bhi.n	8003398 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	3b23      	subs	r3, #35	; 0x23
 8003370:	221f      	movs	r2, #31
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	4019      	ands	r1, r3
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	3b23      	subs	r3, #35	; 0x23
 800338a:	fa00 f203 	lsl.w	r2, r0, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
 8003396:	e01b      	b.n	80033d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	3b41      	subs	r3, #65	; 0x41
 80033aa:	221f      	movs	r2, #31
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	4019      	ands	r1, r3
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b41      	subs	r3, #65	; 0x41
 80033c4:	fa00 f203 	lsl.w	r2, r0, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b09      	cmp	r3, #9
 80033d6:	d91c      	bls.n	8003412 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68d9      	ldr	r1, [r3, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	3b1e      	subs	r3, #30
 80033ea:	2207      	movs	r2, #7
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	4019      	ands	r1, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6898      	ldr	r0, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	3b1e      	subs	r3, #30
 8003404:	fa00 f203 	lsl.w	r2, r0, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	e019      	b.n	8003446 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6919      	ldr	r1, [r3, #16]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	2207      	movs	r2, #7
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	4019      	ands	r1, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6898      	ldr	r0, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b10      	cmp	r3, #16
 800344c:	d003      	beq.n	8003456 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003452:	2b11      	cmp	r3, #17
 8003454:	d132      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d125      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d126      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800347c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d11a      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003486:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800348c:	fba2 2303 	umull	r2, r3, r2, r3
 8003490:	0c9a      	lsrs	r2, r3, #18
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800349c:	e002      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f9      	bne.n	800349e <HAL_ADC_ConfigChannel+0x1b2>
 80034aa:	e007      	b.n	80034bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40012400 	.word	0x40012400
 80034d4:	20000014 	.word	0x20000014
 80034d8:	431bde83 	.word	0x431bde83

080034dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d039      	beq.n	800356e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800350a:	4b1b      	ldr	r3, [pc, #108]	; (8003578 <ADC_Enable+0x9c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <ADC_Enable+0xa0>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003518:	e002      	b.n	8003520 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3b01      	subs	r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f9      	bne.n	800351a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003526:	f7ff fc4d 	bl	8002dc4 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800352c:	e018      	b.n	8003560 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800352e:	f7ff fc49 	bl	8002dc4 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d911      	bls.n	8003560 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f043 0210 	orr.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e007      	b.n	8003570 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b01      	cmp	r3, #1
 800356c:	d1df      	bne.n	800352e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000014 	.word	0x20000014
 800357c:	431bde83 	.word	0x431bde83

08003580 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d127      	bne.n	80035ea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035aa:	f7ff fc0b 	bl	8002dc4 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035b0:	e014      	b.n	80035dc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035b2:	f7ff fc07 	bl	8002dc4 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d90d      	bls.n	80035dc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f043 0210 	orr.w	r2, r3, #16
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e007      	b.n	80035ec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d0e3      	beq.n	80035b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_ADCEx_Calibration_Start+0x1e>
 800360e:	2302      	movs	r3, #2
 8003610:	e086      	b.n	8003720 <HAL_ADCEx_Calibration_Start+0x12c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffb0 	bl	8003580 <ADC_ConversionStop_Disable>
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d175      	bne.n	8003716 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800363e:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_ADCEx_Calibration_Start+0x134>)
 8003640:	681c      	ldr	r4, [r3, #0]
 8003642:	2002      	movs	r0, #2
 8003644:	f002 fda6 	bl	8006194 <HAL_RCCEx_GetPeriphCLKFreq>
 8003648:	4603      	mov	r3, r0
 800364a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800364e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003650:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003652:	e002      	b.n	800365a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3b01      	subs	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f9      	bne.n	8003654 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff ff3b 	bl	80034dc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0208 	orr.w	r2, r2, #8
 8003674:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003676:	f7ff fba5 	bl	8002dc4 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800367c:	e014      	b.n	80036a8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800367e:	f7ff fba1 	bl	8002dc4 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b0a      	cmp	r3, #10
 800368a:	d90d      	bls.n	80036a8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f023 0312 	bic.w	r3, r3, #18
 8003694:	f043 0210 	orr.w	r2, r3, #16
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e03b      	b.n	8003720 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0204 	orr.w	r2, r2, #4
 80036c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80036c6:	f7ff fb7d 	bl	8002dc4 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036cc:	e014      	b.n	80036f8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036ce:	f7ff fb79 	bl	8002dc4 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b0a      	cmp	r3, #10
 80036da:	d90d      	bls.n	80036f8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f023 0312 	bic.w	r3, r3, #18
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e013      	b.n	8003720 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e3      	bne.n	80036ce <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800371e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}
 8003728:	20000014 	.word	0x20000014

0800372c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
	...

08003740 <__NVIC_SetPriorityGrouping>:
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_GetPriorityGrouping>:
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <__NVIC_GetPriorityGrouping+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 0307 	and.w	r3, r3, #7
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_EnableIRQ>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db0b      	blt.n	80037ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <__NVIC_EnableIRQ+0x34>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_SetPriority>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <SysTick_Config>:
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a4:	d301      	bcc.n	80038aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038a6:	2301      	movs	r3, #1
 80038a8:	e00f      	b.n	80038ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038aa:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <SysTick_Config+0x40>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b2:	210f      	movs	r1, #15
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	f7ff ff90 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <SysTick_Config+0x40>)
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c2:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <SysTick_Config+0x40>)
 80038c4:	2207      	movs	r2, #7
 80038c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000e010 	.word	0xe000e010

080038d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff2d 	bl	8003740 <__NVIC_SetPriorityGrouping>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	4603      	mov	r3, r0
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003900:	f7ff ff42 	bl	8003788 <__NVIC_GetPriorityGrouping>
 8003904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7ff ff90 	bl	8003830 <NVIC_EncodePriority>
 8003910:	4602      	mov	r2, r0
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff5f 	bl	80037dc <__NVIC_SetPriority>
}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff35 	bl	80037a4 <__NVIC_EnableIRQ>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ffa2 	bl	8003894 <SysTick_Config>
 8003950:	4603      	mov	r3, r0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e00e      	b.n	800398a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	795b      	ldrb	r3, [r3, #5]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d105      	bne.n	8003982 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe ffaf 	bl	80028e0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039ae:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_FLASH_Program+0xd8>)
 80039b0:	7e1b      	ldrb	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_FLASH_Program+0x26>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e054      	b.n	8003a64 <HAL_FLASH_Program+0xd0>
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_FLASH_Program+0xd8>)
 80039bc:	2201      	movs	r2, #1
 80039be:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039c4:	f000 f8a8 	bl	8003b18 <FLASH_WaitForLastOperation>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d144      	bne.n	8003a5c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	757b      	strb	r3, [r7, #21]
 80039dc:	e007      	b.n	80039ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d102      	bne.n	80039ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80039e4:	2302      	movs	r3, #2
 80039e6:	757b      	strb	r3, [r7, #21]
 80039e8:	e001      	b.n	80039ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80039ea:	2304      	movs	r3, #4
 80039ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	75bb      	strb	r3, [r7, #22]
 80039f2:	e02d      	b.n	8003a50 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80039f4:	7dbb      	ldrb	r3, [r7, #22]
 80039f6:	005a      	lsls	r2, r3, #1
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	eb02 0c03 	add.w	ip, r2, r3
 80039fe:	7dbb      	ldrb	r3, [r7, #22]
 8003a00:	0119      	lsls	r1, r3, #4
 8003a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a06:	f1c1 0620 	rsb	r6, r1, #32
 8003a0a:	f1a1 0020 	sub.w	r0, r1, #32
 8003a0e:	fa22 f401 	lsr.w	r4, r2, r1
 8003a12:	fa03 f606 	lsl.w	r6, r3, r6
 8003a16:	4334      	orrs	r4, r6
 8003a18:	fa23 f000 	lsr.w	r0, r3, r0
 8003a1c:	4304      	orrs	r4, r0
 8003a1e:	fa23 f501 	lsr.w	r5, r3, r1
 8003a22:	b2a3      	uxth	r3, r4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4660      	mov	r0, ip
 8003a28:	f000 f85a 	bl	8003ae0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a30:	f000 f872 	bl	8003b18 <FLASH_WaitForLastOperation>
 8003a34:	4603      	mov	r3, r0
 8003a36:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <HAL_FLASH_Program+0xdc>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <HAL_FLASH_Program+0xdc>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d107      	bne.n	8003a5a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003a4a:	7dbb      	ldrb	r3, [r7, #22]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	75bb      	strb	r3, [r7, #22]
 8003a50:	7dba      	ldrb	r2, [r7, #22]
 8003a52:	7d7b      	ldrb	r3, [r7, #21]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3cd      	bcc.n	80039f4 <HAL_FLASH_Program+0x60>
 8003a58:	e000      	b.n	8003a5c <HAL_FLASH_Program+0xc8>
      {
        break;
 8003a5a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_FLASH_Program+0xd8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	761a      	strb	r2, [r3, #24]

  return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6c:	200005e0 	.word	0x200005e0
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_FLASH_Unlock+0x40>)
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00d      	beq.n	8003aa6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_FLASH_Unlock+0x40>)
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_FLASH_Unlock+0x44>)
 8003a8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a90:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_FLASH_Unlock+0x40>)
 8003a92:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_FLASH_Unlock+0x48>)
 8003a94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_FLASH_Unlock+0x40>)
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	45670123 	.word	0x45670123
 8003abc:	cdef89ab 	.word	0xcdef89ab

08003ac0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_FLASH_Lock+0x1c>)
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4a04      	ldr	r2, [pc, #16]	; (8003adc <HAL_FLASH_Lock+0x1c>)
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40022000 	.word	0x40022000

08003ae0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <FLASH_Program_HalfWord+0x30>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003af2:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <FLASH_Program_HalfWord+0x34>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <FLASH_Program_HalfWord+0x34>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	887a      	ldrh	r2, [r7, #2]
 8003b02:	801a      	strh	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200005e0 	.word	0x200005e0
 8003b14:	40022000 	.word	0x40022000

08003b18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff f950 	bl	8002dc4 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b26:	e010      	b.n	8003b4a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d00c      	beq.n	8003b4a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <FLASH_WaitForLastOperation+0x2e>
 8003b36:	f7ff f945 	bl	8002dc4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d201      	bcs.n	8003b4a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e025      	b.n	8003b96 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e8      	bne.n	8003b28 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003b62:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b64:	2220      	movs	r2, #32
 8003b66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <FLASH_WaitForLastOperation+0x88>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003b8c:	f000 f80a 	bl	8003ba4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40022000 	.word	0x40022000

08003ba4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f043 0302 	orr.w	r3, r3, #2
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003bc4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f043 0310 	orr.w	r3, r3, #16
 8003bcc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d009      	beq.n	8003bee <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003bda:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003be4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	4a0f      	ldr	r2, [pc, #60]	; (8003c40 <FLASH_SetErrorCode+0x9c>)
 8003c04:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f240 1201 	movw	r2, #257	; 0x101
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d106      	bne.n	8003c2a <FLASH_SetErrorCode+0x86>
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	61d3      	str	r3, [r2, #28]
}  
 8003c28:	e002      	b.n	8003c30 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003c2a:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <FLASH_SetErrorCode+0x98>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60d3      	str	r3, [r2, #12]
}  
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40022000 	.word	0x40022000
 8003c40:	200005e0 	.word	0x200005e0

08003c44 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c56:	4b2f      	ldr	r3, [pc, #188]	; (8003d14 <HAL_FLASHEx_Erase+0xd0>)
 8003c58:	7e1b      	ldrb	r3, [r3, #24]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_FLASHEx_Erase+0x1e>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e053      	b.n	8003d0a <HAL_FLASHEx_Erase+0xc6>
 8003c62:	4b2c      	ldr	r3, [pc, #176]	; (8003d14 <HAL_FLASHEx_Erase+0xd0>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d116      	bne.n	8003c9e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c74:	f7ff ff50 	bl	8003b18 <FLASH_WaitForLastOperation>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d141      	bne.n	8003d02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003c7e:	2001      	movs	r0, #1
 8003c80:	f000 f84c 	bl	8003d1c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c88:	f7ff ff46 	bl	8003b18 <FLASH_WaitForLastOperation>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_FLASHEx_Erase+0xd4>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_FLASHEx_Erase+0xd4>)
 8003c96:	f023 0304 	bic.w	r3, r3, #4
 8003c9a:	6113      	str	r3, [r2, #16]
 8003c9c:	e031      	b.n	8003d02 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003c9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ca2:	f7ff ff39 	bl	8003b18 <FLASH_WaitForLastOperation>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d12a      	bne.n	8003d02 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	e019      	b.n	8003cf0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003cbc:	68b8      	ldr	r0, [r7, #8]
 8003cbe:	f000 f849 	bl	8003d54 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003cc6:	f7ff ff27 	bl	8003b18 <FLASH_WaitForLastOperation>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_FLASHEx_Erase+0xd4>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <HAL_FLASHEx_Erase+0xd4>)
 8003cd4:	f023 0302 	bic.w	r3, r3, #2
 8003cd8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	601a      	str	r2, [r3, #0]
            break;
 8003ce6:	e00c      	b.n	8003d02 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cee:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	029a      	lsls	r2, r3, #10
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3dc      	bcc.n	8003cbc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d02:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <HAL_FLASHEx_Erase+0xd0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	761a      	strb	r2, [r3, #24]

  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200005e0 	.word	0x200005e0
 8003d18:	40022000 	.word	0x40022000

08003d1c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <FLASH_MassErase+0x30>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <FLASH_MassErase+0x34>)
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <FLASH_MassErase+0x34>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <FLASH_MassErase+0x34>)
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <FLASH_MassErase+0x34>)
 8003d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d40:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	200005e0 	.word	0x200005e0
 8003d50:	40022000 	.word	0x40022000

08003d54 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <FLASH_PageErase+0x38>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <FLASH_PageErase+0x3c>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <FLASH_PageErase+0x3c>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <FLASH_PageErase+0x3c>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <FLASH_PageErase+0x3c>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <FLASH_PageErase+0x3c>)
 8003d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	200005e0 	.word	0x200005e0
 8003d90:	40022000 	.word	0x40022000

08003d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b08b      	sub	sp, #44	; 0x2c
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003da2:	2300      	movs	r3, #0
 8003da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da6:	e169      	b.n	800407c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003da8:	2201      	movs	r2, #1
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	f040 8158 	bne.w	8004076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4a9a      	ldr	r2, [pc, #616]	; (8004034 <HAL_GPIO_Init+0x2a0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d05e      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
 8003dd0:	4a98      	ldr	r2, [pc, #608]	; (8004034 <HAL_GPIO_Init+0x2a0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d875      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003dd6:	4a98      	ldr	r2, [pc, #608]	; (8004038 <HAL_GPIO_Init+0x2a4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d058      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
 8003ddc:	4a96      	ldr	r2, [pc, #600]	; (8004038 <HAL_GPIO_Init+0x2a4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d86f      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003de2:	4a96      	ldr	r2, [pc, #600]	; (800403c <HAL_GPIO_Init+0x2a8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d052      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
 8003de8:	4a94      	ldr	r2, [pc, #592]	; (800403c <HAL_GPIO_Init+0x2a8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d869      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003dee:	4a94      	ldr	r2, [pc, #592]	; (8004040 <HAL_GPIO_Init+0x2ac>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d04c      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
 8003df4:	4a92      	ldr	r2, [pc, #584]	; (8004040 <HAL_GPIO_Init+0x2ac>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d863      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003dfa:	4a92      	ldr	r2, [pc, #584]	; (8004044 <HAL_GPIO_Init+0x2b0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d046      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
 8003e00:	4a90      	ldr	r2, [pc, #576]	; (8004044 <HAL_GPIO_Init+0x2b0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d85d      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003e06:	2b12      	cmp	r3, #18
 8003e08:	d82a      	bhi.n	8003e60 <HAL_GPIO_Init+0xcc>
 8003e0a:	2b12      	cmp	r3, #18
 8003e0c:	d859      	bhi.n	8003ec2 <HAL_GPIO_Init+0x12e>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_GPIO_Init+0x80>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e8f 	.word	0x08003e8f
 8003e18:	08003e69 	.word	0x08003e69
 8003e1c:	08003e7b 	.word	0x08003e7b
 8003e20:	08003ebd 	.word	0x08003ebd
 8003e24:	08003ec3 	.word	0x08003ec3
 8003e28:	08003ec3 	.word	0x08003ec3
 8003e2c:	08003ec3 	.word	0x08003ec3
 8003e30:	08003ec3 	.word	0x08003ec3
 8003e34:	08003ec3 	.word	0x08003ec3
 8003e38:	08003ec3 	.word	0x08003ec3
 8003e3c:	08003ec3 	.word	0x08003ec3
 8003e40:	08003ec3 	.word	0x08003ec3
 8003e44:	08003ec3 	.word	0x08003ec3
 8003e48:	08003ec3 	.word	0x08003ec3
 8003e4c:	08003ec3 	.word	0x08003ec3
 8003e50:	08003ec3 	.word	0x08003ec3
 8003e54:	08003ec3 	.word	0x08003ec3
 8003e58:	08003e71 	.word	0x08003e71
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	4a79      	ldr	r2, [pc, #484]	; (8004048 <HAL_GPIO_Init+0x2b4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e66:	e02c      	b.n	8003ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	623b      	str	r3, [r7, #32]
          break;
 8003e6e:	e029      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	3304      	adds	r3, #4
 8003e76:	623b      	str	r3, [r7, #32]
          break;
 8003e78:	e024      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	623b      	str	r3, [r7, #32]
          break;
 8003e82:	e01f      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	623b      	str	r3, [r7, #32]
          break;
 8003e8c:	e01a      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e96:	2304      	movs	r3, #4
 8003e98:	623b      	str	r3, [r7, #32]
          break;
 8003e9a:	e013      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	611a      	str	r2, [r3, #16]
          break;
 8003eae:	e009      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	615a      	str	r2, [r3, #20]
          break;
 8003eba:	e003      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	623b      	str	r3, [r7, #32]
          break;
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x130>
          break;
 8003ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2bff      	cmp	r3, #255	; 0xff
 8003ec8:	d801      	bhi.n	8003ece <HAL_GPIO_Init+0x13a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	e001      	b.n	8003ed2 <HAL_GPIO_Init+0x13e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2bff      	cmp	r3, #255	; 0xff
 8003ed8:	d802      	bhi.n	8003ee0 <HAL_GPIO_Init+0x14c>
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	e002      	b.n	8003ee6 <HAL_GPIO_Init+0x152>
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	3b08      	subs	r3, #8
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	210f      	movs	r1, #15
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	6a39      	ldr	r1, [r7, #32]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	431a      	orrs	r2, r3
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80b1 	beq.w	8004076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_GPIO_Init+0x2b8>)
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	4a4c      	ldr	r2, [pc, #304]	; (800404c <HAL_GPIO_Init+0x2b8>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6193      	str	r3, [r2, #24]
 8003f20:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_GPIO_Init+0x2b8>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f2c:	4a48      	ldr	r2, [pc, #288]	; (8004050 <HAL_GPIO_Init+0x2bc>)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	3302      	adds	r3, #2
 8003f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	220f      	movs	r2, #15
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a40      	ldr	r2, [pc, #256]	; (8004054 <HAL_GPIO_Init+0x2c0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d013      	beq.n	8003f80 <HAL_GPIO_Init+0x1ec>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_GPIO_Init+0x2c4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00d      	beq.n	8003f7c <HAL_GPIO_Init+0x1e8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3e      	ldr	r2, [pc, #248]	; (800405c <HAL_GPIO_Init+0x2c8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <HAL_GPIO_Init+0x1e4>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	; (8004060 <HAL_GPIO_Init+0x2cc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_GPIO_Init+0x1e0>
 8003f70:	2303      	movs	r3, #3
 8003f72:	e006      	b.n	8003f82 <HAL_GPIO_Init+0x1ee>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e004      	b.n	8003f82 <HAL_GPIO_Init+0x1ee>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e002      	b.n	8003f82 <HAL_GPIO_Init+0x1ee>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_GPIO_Init+0x1ee>
 8003f80:	2300      	movs	r3, #0
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	f002 0203 	and.w	r2, r2, #3
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	4093      	lsls	r3, r2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f92:	492f      	ldr	r1, [pc, #188]	; (8004050 <HAL_GPIO_Init+0x2bc>)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3302      	adds	r3, #2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	492c      	ldr	r1, [pc, #176]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fba:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4928      	ldr	r1, [pc, #160]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d006      	beq.n	8003fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4922      	ldr	r1, [pc, #136]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fe2:	4b20      	ldr	r3, [pc, #128]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	491e      	ldr	r1, [pc, #120]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	4918      	ldr	r1, [pc, #96]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
 8004008:	e006      	b.n	8004018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	43db      	mvns	r3, r3
 8004012:	4914      	ldr	r1, [pc, #80]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8004014:	4013      	ands	r3, r2
 8004016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d021      	beq.n	8004068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	490e      	ldr	r1, [pc, #56]	; (8004064 <HAL_GPIO_Init+0x2d0>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	60cb      	str	r3, [r1, #12]
 8004030:	e021      	b.n	8004076 <HAL_GPIO_Init+0x2e2>
 8004032:	bf00      	nop
 8004034:	10320000 	.word	0x10320000
 8004038:	10310000 	.word	0x10310000
 800403c:	10220000 	.word	0x10220000
 8004040:	10210000 	.word	0x10210000
 8004044:	10120000 	.word	0x10120000
 8004048:	10110000 	.word	0x10110000
 800404c:	40021000 	.word	0x40021000
 8004050:	40010000 	.word	0x40010000
 8004054:	40010800 	.word	0x40010800
 8004058:	40010c00 	.word	0x40010c00
 800405c:	40011000 	.word	0x40011000
 8004060:	40011400 	.word	0x40011400
 8004064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_GPIO_Init+0x304>)
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	43db      	mvns	r3, r3
 8004070:	4909      	ldr	r1, [pc, #36]	; (8004098 <HAL_GPIO_Init+0x304>)
 8004072:	4013      	ands	r3, r2
 8004074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	3301      	adds	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	fa22 f303 	lsr.w	r3, r2, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	f47f ae8e 	bne.w	8003da8 <HAL_GPIO_Init+0x14>
  }
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	372c      	adds	r7, #44	; 0x2c
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	40010400 	.word	0x40010400

0800409c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	887b      	ldrh	r3, [r7, #2]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e001      	b.n	80040be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040be:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	460b      	mov	r3, r1
 80040d4:	807b      	strh	r3, [r7, #2]
 80040d6:	4613      	mov	r3, r2
 80040d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040da:	787b      	ldrb	r3, [r7, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040e6:	e003      	b.n	80040f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	041a      	lsls	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	611a      	str	r2, [r3, #16]
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fc:	b08b      	sub	sp, #44	; 0x2c
 80040fe:	af06      	add	r7, sp, #24
 8004100:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0fd      	b.n	8004308 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f007 f865 	bl	800b1f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2203      	movs	r2, #3
 800412a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 f8dc 	bl	80072f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	603b      	str	r3, [r7, #0]
 800413e:	687e      	ldr	r6, [r7, #4]
 8004140:	466d      	mov	r5, sp
 8004142:	f106 0410 	add.w	r4, r6, #16
 8004146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	602b      	str	r3, [r5, #0]
 800414e:	1d33      	adds	r3, r6, #4
 8004150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f003 f8a6 	bl	80072a4 <USB_CoreInit>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e0ce      	b.n	8004308 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2100      	movs	r1, #0
 8004170:	4618      	mov	r0, r3
 8004172:	f003 f8d7 	bl	8007324 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e04c      	b.n	8004216 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	3301      	adds	r3, #1
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041a6:	7bfa      	ldrb	r2, [r7, #15]
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	b298      	uxth	r0, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	3336      	adds	r3, #54	; 0x36
 80041ba:	4602      	mov	r2, r0
 80041bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	3303      	adds	r3, #3
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	3338      	adds	r3, #56	; 0x38
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	440b      	add	r3, r1
 80041f6:	333c      	adds	r3, #60	; 0x3c
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041fc:	7bfa      	ldrb	r2, [r7, #15]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	3340      	adds	r3, #64	; 0x40
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	3301      	adds	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3ad      	bcc.n	800417c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e044      	b.n	80042b0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	440b      	add	r3, r1
 8004234:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	440b      	add	r3, r1
 800424a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	440b      	add	r3, r1
 8004260:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	440b      	add	r3, r1
 8004276:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	440b      	add	r3, r1
 80042a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	3301      	adds	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d3b5      	bcc.n	8004226 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	687e      	ldr	r6, [r7, #4]
 80042c2:	466d      	mov	r5, sp
 80042c4:	f106 0410 	add.w	r4, r6, #16
 80042c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	1d33      	adds	r3, r6, #4
 80042d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d4:	6838      	ldr	r0, [r7, #0]
 80042d6:	f003 f831 	bl	800733c <USB_DevInit>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e00d      	b.n	8004308 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f004 ffcb 	bl	800929c <USB_DevDisconnect>

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004310 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_PCD_Start+0x16>
 8004322:	2302      	movs	r3, #2
 8004324:	e016      	b.n	8004354 <HAL_PCD_Start+0x44>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f002 ffc6 	bl	80072c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004338:	2101      	movs	r1, #1
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f007 f9cb 	bl	800b6d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f004 ff9f 	bl	8009288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f004 ffa1 	bl	80092b0 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004378:	d102      	bne.n	8004380 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fb61 	bl	8004a42 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f004 ff93 	bl	80092b0 <USB_ReadInterrupts>
 800438a:	4603      	mov	r3, r0
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004394:	d112      	bne.n	80043bc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a8:	b292      	uxth	r2, r2
 80043aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f006 ff99 	bl	800b2e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80043b4:	2100      	movs	r1, #0
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f925 	bl	8004606 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f004 ff75 	bl	80092b0 <USB_ReadInterrupts>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d0:	d10b      	bne.n	80043ea <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043e4:	b292      	uxth	r2, r2
 80043e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f004 ff5e 	bl	80092b0 <USB_ReadInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d10b      	bne.n	8004418 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004412:	b292      	uxth	r2, r2
 8004414:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f004 ff47 	bl	80092b0 <USB_ReadInterrupts>
 8004422:	4603      	mov	r3, r0
 8004424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d126      	bne.n	800447c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0204 	bic.w	r2, r2, #4
 8004440:	b292      	uxth	r2, r2
 8004442:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	b292      	uxth	r2, r2
 800445a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f006 ff7a 	bl	800b358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004476:	b292      	uxth	r2, r2
 8004478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f004 ff15 	bl	80092b0 <USB_ReadInterrupts>
 8004486:	4603      	mov	r3, r0
 8004488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004490:	f040 8084 	bne.w	800459c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e011      	b.n	80044be <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	7ffb      	ldrb	r3, [r7, #31]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	7ffb      	ldrb	r3, [r7, #31]
 80044a8:	8812      	ldrh	r2, [r2, #0]
 80044aa:	b292      	uxth	r2, r2
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	f107 0120 	add.w	r1, r7, #32
 80044b2:	440b      	add	r3, r1
 80044b4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80044b8:	7ffb      	ldrb	r3, [r7, #31]
 80044ba:	3301      	adds	r3, #1
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	7ffb      	ldrb	r3, [r7, #31]
 80044c0:	2b07      	cmp	r3, #7
 80044c2:	d9ea      	bls.n	800449a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	b292      	uxth	r2, r2
 80044d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	b292      	uxth	r2, r2
 80044f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80044f4:	bf00      	nop
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f6      	beq.n	80044f6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	b292      	uxth	r2, r2
 800451c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004520:	2300      	movs	r3, #0
 8004522:	77fb      	strb	r3, [r7, #31]
 8004524:	e010      	b.n	8004548 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	4611      	mov	r1, r2
 800452e:	7ffa      	ldrb	r2, [r7, #31]
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	440a      	add	r2, r1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	f107 0120 	add.w	r1, r7, #32
 800453a:	440b      	add	r3, r1
 800453c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004540:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004542:	7ffb      	ldrb	r3, [r7, #31]
 8004544:	3301      	adds	r3, #1
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	7ffb      	ldrb	r3, [r7, #31]
 800454a:	2b07      	cmp	r3, #7
 800454c:	d9eb      	bls.n	8004526 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0208 	orr.w	r2, r2, #8
 8004560:	b292      	uxth	r2, r2
 8004562:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004578:	b292      	uxth	r2, r2
 800457a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0204 	orr.w	r2, r2, #4
 8004590:	b292      	uxth	r2, r2
 8004592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f006 fec4 	bl	800b324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 fe85 	bl	80092b0 <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d10e      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045c4:	b292      	uxth	r2, r2
 80045c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f006 fe7d 	bl	800b2ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fe6b 	bl	80092b0 <USB_ReadInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e4:	d10b      	bne.n	80045fe <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f8:	b292      	uxth	r2, r2
 80045fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_PCD_SetAddress+0x1a>
 800461c:	2302      	movs	r3, #2
 800461e:	e013      	b.n	8004648 <HAL_PCD_SetAddress+0x42>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f004 fe12 	bl	8009262 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4603      	mov	r3, r0
 8004660:	70fb      	strb	r3, [r7, #3]
 8004662:	460b      	mov	r3, r1
 8004664:	803b      	strh	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800466e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004672:	2b00      	cmp	r3, #0
 8004674:	da0e      	bge.n	8004694 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2201      	movs	r2, #1
 8004690:	705a      	strb	r2, [r3, #1]
 8004692:	e00e      	b.n	80046b2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 0207 	and.w	r2, r3, #7
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046be:	883a      	ldrh	r2, [r7, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	78ba      	ldrb	r2, [r7, #2]
 80046c8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	785b      	ldrb	r3, [r3, #1]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046dc:	78bb      	ldrb	r3, [r7, #2]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d102      	bne.n	80046e8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_EP_Open+0xa6>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e00e      	b.n	8004714 <HAL_PCD_EP_Open+0xc4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68f9      	ldr	r1, [r7, #12]
 8004704:	4618      	mov	r0, r3
 8004706:	f002 fe39 	bl	800737c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004712:	7afb      	ldrb	r3, [r7, #11]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da0e      	bge.n	800474e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4413      	add	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	705a      	strb	r2, [r3, #1]
 800474c:	e00e      	b.n	800476c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 0207 	and.w	r2, r3, #7
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_PCD_EP_Close+0x6a>
 8004782:	2302      	movs	r3, #2
 8004784:	e00e      	b.n	80047a4 <HAL_PCD_EP_Close+0x88>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	4618      	mov	r0, r3
 8004796:	f003 f95b 	bl	8007a50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047bc:	7afb      	ldrb	r3, [r7, #11]
 80047be:	f003 0207 	and.w	r2, r3, #7
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2200      	movs	r2, #0
 80047e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2200      	movs	r2, #0
 80047ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047ec:	7afb      	ldrb	r3, [r7, #11]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047f8:	7afb      	ldrb	r3, [r7, #11]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6979      	ldr	r1, [r7, #20]
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fb0d 	bl	8007e28 <USB_EPStartXfer>
 800480e:	e005      	b.n	800481c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6979      	ldr	r1, [r7, #20]
 8004816:	4618      	mov	r0, r3
 8004818:	f003 fb06 	bl	8007e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 0207 	and.w	r2, r3, #7
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004848:	681b      	ldr	r3, [r3, #0]
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2201      	movs	r2, #1
 800489e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ac:	7afb      	ldrb	r3, [r7, #11]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6979      	ldr	r1, [r7, #20]
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 fab3 	bl	8007e28 <USB_EPStartXfer>
 80048c2:	e005      	b.n	80048d0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6979      	ldr	r1, [r7, #20]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 faac 	bl	8007e28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 0207 	and.w	r2, r3, #7
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d901      	bls.n	80048f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e04c      	b.n	8004992 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	da0e      	bge.n	800491e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	705a      	strb	r2, [r3, #1]
 800491c:	e00c      	b.n	8004938 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	4613      	mov	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_PCD_EP_SetStall+0x7e>
 8004954:	2302      	movs	r3, #2
 8004956:	e01c      	b.n	8004992 <HAL_PCD_EP_SetStall+0xb8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	f004 fb7e 	bl	8009068 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d108      	bne.n	8004988 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f004 fca3 	bl	80092ce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	f003 020f 	and.w	r2, r3, #15
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d901      	bls.n	80049b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e040      	b.n	8004a3a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	da0e      	bge.n	80049de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4413      	add	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	705a      	strb	r2, [r3, #1]
 80049dc:	e00e      	b.n	80049fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 0207 	and.w	r2, r3, #7
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4413      	add	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_PCD_EP_ClrStall+0x82>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e00e      	b.n	8004a3a <HAL_PCD_EP_ClrStall+0xa0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 fb6c 	bl	8009108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b08e      	sub	sp, #56	; 0x38
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a4a:	e2df      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a54:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004a62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 8158 	bne.w	8004d1c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d152      	bne.n	8004b1c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	89fb      	ldrh	r3, [r7, #14]
 8004a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3328      	adds	r3, #40	; 0x28
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ada:	2100      	movs	r1, #0
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f006 fbda 	bl	800b296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 828e 	beq.w	800500c <PCD_EP_ISR_Handler+0x5ca>
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8289 	bne.w	800500c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b1a:	e277      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d034      	beq.n	8004ba0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	3306      	adds	r3, #6
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f004 fbfa 	bl	800936e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b86:	4013      	ands	r3, r2
 8004b88:	823b      	strh	r3, [r7, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	8a3a      	ldrh	r2, [r7, #16]
 8004b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b94:	b292      	uxth	r2, r2
 8004b96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f006 fb4f 	bl	800b23c <HAL_PCD_SetupStageCallback>
 8004b9e:	e235      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ba0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f280 8231 	bge.w	800500c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	83bb      	strh	r3, [r7, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	8bba      	ldrh	r2, [r7, #28]
 8004bc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3306      	adds	r3, #6
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d019      	beq.n	8004c30 <PCD_EP_ISR_Handler+0x1ee>
 8004bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	6959      	ldr	r1, [r3, #20]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f004 fbaa 	bl	800936e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	441a      	add	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f006 fb18 	bl	800b260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	61bb      	str	r3, [r7, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	4413      	add	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d112      	bne.n	8004c7e <PCD_EP_ISR_Handler+0x23c>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e02f      	b.n	8004cde <PCD_EP_ISR_Handler+0x29c>
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b3e      	cmp	r3, #62	; 0x3e
 8004c84:	d813      	bhi.n	8004cae <PCD_EP_ISR_Handler+0x26c>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <PCD_EP_ISR_Handler+0x25e>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e017      	b.n	8004cde <PCD_EP_ISR_Handler+0x29c>
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <PCD_EP_ISR_Handler+0x286>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cee:	827b      	strh	r3, [r7, #18]
 8004cf0:	8a7b      	ldrh	r3, [r7, #18]
 8004cf2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cf6:	827b      	strh	r3, [r7, #18]
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cfe:	827b      	strh	r3, [r7, #18]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	8a7b      	ldrh	r3, [r7, #18]
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]
 8004d1a:	e177      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f280 80ea 	bge.w	8004f0c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d4e:	4013      	ands	r3, r2
 8004d50:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d66:	b292      	uxth	r2, r2
 8004d68:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	7b1b      	ldrb	r3, [r3, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d122      	bne.n	8004dce <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3306      	adds	r3, #6
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004db2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8087 	beq.w	8004ec8 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	6959      	ldr	r1, [r3, #20]
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	88da      	ldrh	r2, [r3, #6]
 8004dc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dc8:	f004 fad1 	bl	800936e <USB_ReadPMA>
 8004dcc:	e07c      	b.n	8004ec8 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	78db      	ldrb	r3, [r3, #3]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d108      	bne.n	8004de8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f923 	bl	8005028 <HAL_PCD_EP_DB_Receive>
 8004de2:	4603      	mov	r3, r0
 8004de4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004de6:	e06f      	b.n	8004ec8 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	441a      	add	r2, r3
 8004e12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d021      	beq.n	8004e86 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	3302      	adds	r3, #2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6812      	ldr	r2, [r2, #0]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02a      	beq.n	8004ec8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	6959      	ldr	r1, [r3, #20]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	891a      	ldrh	r2, [r3, #8]
 8004e7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e80:	f004 fa75 	bl	800936e <USB_ReadPMA>
 8004e84:	e020      	b.n	8004ec8 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	3306      	adds	r3, #6
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eae:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	6959      	ldr	r1, [r3, #20]
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	895a      	ldrh	r2, [r3, #10]
 8004ec2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ec4:	f004 fa53 	bl	800936e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ece:	441a      	add	r2, r3
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eda:	441a      	add	r2, r3
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <PCD_EP_ISR_Handler+0x4b0>
 8004ee8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d206      	bcs.n	8004f00 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f006 f9b1 	bl	800b260 <HAL_PCD_DataOutStageCallback>
 8004efe:	e005      	b.n	8004f0c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f002 ff8e 	bl	8007e28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d07a      	beq.n	800500c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f44:	843b      	strh	r3, [r7, #32]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8c3b      	ldrh	r3, [r7, #32]
 8004f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	78db      	ldrb	r3, [r3, #3]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d108      	bne.n	8004f7c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d146      	bne.n	8005000 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d141      	bne.n	8005000 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4413      	add	r3, r2
 8004f90:	3302      	adds	r3, #2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	8bfb      	ldrh	r3, [r7, #30]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d906      	bls.n	8004fbe <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	8bfb      	ldrh	r3, [r7, #30]
 8004fb6:	1ad2      	subs	r2, r2, r3
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	619a      	str	r2, [r3, #24]
 8004fbc:	e002      	b.n	8004fc4 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f006 f95f 	bl	800b296 <HAL_PCD_DataInStageCallback>
 8004fd8:	e018      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	8bfb      	ldrh	r3, [r7, #30]
 8004fe0:	441a      	add	r2, r3
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	8bfb      	ldrh	r3, [r7, #30]
 8004fec:	441a      	add	r2, r3
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 ff15 	bl	8007e28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004ffe:	e005      	b.n	800500c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005000:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005002:	461a      	mov	r2, r3
 8005004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f91b 	bl	8005242 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005014:	b29b      	uxth	r3, r3
 8005016:	b21b      	sxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	f6ff ad17 	blt.w	8004a4c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3738      	adds	r7, #56	; 0x38
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d07e      	beq.n	800513e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4413      	add	r3, r2
 8005054:	3302      	adds	r3, #2
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	4413      	add	r3, r2
 800505e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005068:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	8b7b      	ldrh	r3, [r7, #26]
 8005070:	429a      	cmp	r2, r3
 8005072:	d306      	bcc.n	8005082 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	8b7b      	ldrh	r3, [r7, #26]
 800507a:	1ad2      	subs	r2, r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	619a      	str	r2, [r3, #24]
 8005080:	e002      	b.n	8005088 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d123      	bne.n	80050d8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	833b      	strh	r3, [r7, #24]
 80050ac:	8b3b      	ldrh	r3, [r7, #24]
 80050ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050b2:	833b      	strh	r3, [r7, #24]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	8b3b      	ldrh	r3, [r7, #24]
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01f      	beq.n	8005122 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fc:	82fb      	strh	r3, [r7, #22]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	8afb      	ldrh	r3, [r7, #22]
 800510e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800511e:	b29b      	uxth	r3, r3
 8005120:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005122:	8b7b      	ldrh	r3, [r7, #26]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8087 	beq.w	8005238 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6959      	ldr	r1, [r3, #20]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	891a      	ldrh	r2, [r3, #8]
 8005136:	8b7b      	ldrh	r3, [r7, #26]
 8005138:	f004 f919 	bl	800936e <USB_ReadPMA>
 800513c:	e07c      	b.n	8005238 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	3306      	adds	r3, #6
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005166:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	8b7b      	ldrh	r3, [r7, #26]
 800516e:	429a      	cmp	r2, r3
 8005170:	d306      	bcc.n	8005180 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	8b7b      	ldrh	r3, [r7, #26]
 8005178:	1ad2      	subs	r2, r2, r3
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	619a      	str	r2, [r3, #24]
 800517e:	e002      	b.n	8005186 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d123      	bne.n	80051d6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	83fb      	strh	r3, [r7, #30]
 80051aa:	8bfb      	ldrh	r3, [r7, #30]
 80051ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051b0:	83fb      	strh	r3, [r7, #30]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	441a      	add	r2, r3
 80051c0:	8bfb      	ldrh	r3, [r7, #30]
 80051c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11f      	bne.n	8005220 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fa:	83bb      	strh	r3, [r7, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	8bbb      	ldrh	r3, [r7, #28]
 800520c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005218:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800521c:	b29b      	uxth	r3, r3
 800521e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005220:	8b7b      	ldrh	r3, [r7, #26]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6959      	ldr	r1, [r3, #20]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	895a      	ldrh	r2, [r3, #10]
 8005232:	8b7b      	ldrh	r3, [r7, #26]
 8005234:	f004 f89b 	bl	800936e <USB_ReadPMA>
    }
  }

  return count;
 8005238:	8b7b      	ldrh	r3, [r7, #26]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b094      	sub	sp, #80	; 0x50
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	4613      	mov	r3, r2
 800524e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8138 	beq.w	80054cc <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	3302      	adds	r3, #2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005284:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005290:	429a      	cmp	r2, r3
 8005292:	d907      	bls.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	619a      	str	r2, [r3, #24]
 80052a2:	e002      	b.n	80052aa <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d12c      	bne.n	800530c <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f005 ffec 	bl	800b296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 823a 	beq.w	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	82fb      	strh	r3, [r7, #22]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	8afb      	ldrh	r3, [r7, #22]
 80052f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005306:	b29b      	uxth	r3, r3
 8005308:	8013      	strh	r3, [r2, #0]
 800530a:	e218      	b.n	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01f      	beq.n	8005356 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800534e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005352:	b29b      	uxth	r3, r3
 8005354:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800535c:	2b01      	cmp	r3, #1
 800535e:	f040 81ee 	bne.w	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800536a:	441a      	add	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005378:	441a      	add	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6a1a      	ldr	r2, [r3, #32]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	429a      	cmp	r2, r3
 8005388:	d309      	bcc.n	800539e <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	621a      	str	r2, [r3, #32]
 800539c:	e015      	b.n	80053ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80053a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053b4:	e009      	b.n	80053ca <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d155      	bne.n	800547e <HAL_PCD_EP_DB_Transmit+0x23c>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	011a      	lsls	r2, r3, #4
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d112      	bne.n	8005426 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800540a:	b29a      	uxth	r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29a      	uxth	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	801a      	strh	r2, [r3, #0]
 8005424:	e047      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005428:	2b3e      	cmp	r3, #62	; 0x3e
 800542a:	d811      	bhi.n	8005450 <HAL_PCD_EP_DB_Transmit+0x20e>
 800542c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_PCD_EP_DB_Transmit+0x200>
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	3301      	adds	r3, #1
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29a      	uxth	r2, r3
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	e032      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_PCD_EP_DB_Transmit+0x224>
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	3b01      	subs	r3, #1
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	b29b      	uxth	r3, r3
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e01b      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x274>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d117      	bne.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x274>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	4413      	add	r3, r2
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	011a      	lsls	r2, r3, #4
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	4413      	add	r3, r2
 80054a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	891a      	ldrh	r2, [r3, #8]
 80054c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	f003 ff0d 	bl	80092e4 <USB_WritePMA>
 80054ca:	e138      	b.n	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	4413      	add	r3, r2
 80054e0:	3306      	adds	r3, #6
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005500:	429a      	cmp	r2, r3
 8005502:	d307      	bcc.n	8005514 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800550c:	1ad2      	subs	r2, r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	619a      	str	r2, [r3, #24]
 8005512:	e002      	b.n	800551a <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d12e      	bne.n	8005580 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f005 feb4 	bl	800b296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8102 	bne.w	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
 800557e:	e0de      	b.n	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d11f      	bne.n	80055ca <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	b29b      	uxth	r3, r3
 800559c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	867b      	strh	r3, [r7, #50]	; 0x32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 80b4 	bne.w	800573e <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055de:	441a      	add	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	69da      	ldr	r2, [r3, #28]
 80055e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ec:	441a      	add	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d309      	bcc.n	8005612 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	1ad2      	subs	r2, r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	621a      	str	r2, [r3, #32]
 8005610:	e015      	b.n	800563e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d107      	bne.n	800562a <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 800561a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800561e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005628:	e009      	b.n	800563e <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	643b      	str	r3, [r7, #64]	; 0x40
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d155      	bne.n	80056f8 <HAL_PCD_EP_DB_Transmit+0x4b6>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	4413      	add	r3, r2
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	4413      	add	r3, r2
 800566e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005672:	637b      	str	r3, [r7, #52]	; 0x34
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	2b00      	cmp	r3, #0
 8005678:	d112      	bne.n	80056a0 <HAL_PCD_EP_DB_Transmit+0x45e>
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005684:	b29a      	uxth	r2, r3
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005698:	b29a      	uxth	r2, r3
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e044      	b.n	800572a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80056a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a2:	2b3e      	cmp	r3, #62	; 0x3e
 80056a4:	d811      	bhi.n	80056ca <HAL_PCD_EP_DB_Transmit+0x488>
 80056a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_PCD_EP_DB_Transmit+0x47a>
 80056b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b8:	3301      	adds	r3, #1
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056be:	b29b      	uxth	r3, r3
 80056c0:	029b      	lsls	r3, r3, #10
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e02f      	b.n	800572a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80056ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_PCD_EP_DB_Transmit+0x49e>
 80056da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056dc:	3b01      	subs	r3, #1
 80056de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	801a      	strh	r2, [r3, #0]
 80056f6:	e018      	b.n	800572a <HAL_PCD_EP_DB_Transmit+0x4e8>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d114      	bne.n	800572a <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570e:	4413      	add	r3, r2
 8005710:	643b      	str	r3, [r7, #64]	; 0x40
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	011a      	lsls	r2, r3, #4
 8005718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571a:	4413      	add	r3, r2
 800571c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005724:	b29a      	uxth	r2, r3
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6959      	ldr	r1, [r3, #20]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	895a      	ldrh	r2, [r3, #10]
 8005736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005738:	b29b      	uxth	r3, r3
 800573a:	f003 fdd3 	bl	80092e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005758:	82bb      	strh	r3, [r7, #20]
 800575a:	8abb      	ldrh	r3, [r7, #20]
 800575c:	f083 0310 	eor.w	r3, r3, #16
 8005760:	82bb      	strh	r3, [r7, #20]
 8005762:	8abb      	ldrh	r3, [r7, #20]
 8005764:	f083 0320 	eor.w	r3, r3, #32
 8005768:	82bb      	strh	r3, [r7, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	441a      	add	r2, r3
 8005778:	8abb      	ldrh	r3, [r7, #20]
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3750      	adds	r7, #80	; 0x50
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	460b      	mov	r3, r1
 80057a4:	817b      	strh	r3, [r7, #10]
 80057a6:	4613      	mov	r3, r2
 80057a8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057b6:	897b      	ldrh	r3, [r7, #10]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e009      	b.n	80057e2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057ce:	897a      	ldrh	r2, [r7, #10]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d107      	bne.n	80057f8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	80da      	strh	r2, [r3, #6]
 80057f6:	e00b      	b.n	8005810 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2201      	movs	r2, #1
 80057fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	b29a      	uxth	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	b29a      	uxth	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e26c      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8087 	beq.w	800594a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800583c:	4b92      	ldr	r3, [pc, #584]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f003 030c 	and.w	r3, r3, #12
 8005844:	2b04      	cmp	r3, #4
 8005846:	d00c      	beq.n	8005862 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005848:	4b8f      	ldr	r3, [pc, #572]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b08      	cmp	r3, #8
 8005852:	d112      	bne.n	800587a <HAL_RCC_OscConfig+0x5e>
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005860:	d10b      	bne.n	800587a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005862:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d06c      	beq.n	8005948 <HAL_RCC_OscConfig+0x12c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d168      	bne.n	8005948 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e246      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x76>
 8005884:	4b80      	ldr	r3, [pc, #512]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a7f      	ldr	r2, [pc, #508]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800588a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e02e      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x98>
 800589a:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7a      	ldr	r2, [pc, #488]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4b78      	ldr	r3, [pc, #480]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a77      	ldr	r2, [pc, #476]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e01d      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058bc:	d10c      	bne.n	80058d8 <HAL_RCC_OscConfig+0xbc>
 80058be:	4b72      	ldr	r3, [pc, #456]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a71      	ldr	r2, [pc, #452]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4b6f      	ldr	r3, [pc, #444]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a6e      	ldr	r2, [pc, #440]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	e00b      	b.n	80058f0 <HAL_RCC_OscConfig+0xd4>
 80058d8:	4b6b      	ldr	r3, [pc, #428]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a6a      	ldr	r2, [pc, #424]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4b68      	ldr	r3, [pc, #416]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a67      	ldr	r2, [pc, #412]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d013      	beq.n	8005920 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fd fa64 	bl	8002dc4 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005900:	f7fd fa60 	bl	8002dc4 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e1fa      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005912:	4b5d      	ldr	r3, [pc, #372]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0xe4>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005920:	f7fd fa50 	bl	8002dc4 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005928:	f7fd fa4c 	bl	8002dc4 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	; 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e1e6      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800593a:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x10c>
 8005946:	e000      	b.n	800594a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d063      	beq.n	8005a1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005956:	4b4c      	ldr	r3, [pc, #304]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005962:	4b49      	ldr	r3, [pc, #292]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b08      	cmp	r3, #8
 800596c:	d11c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x18c>
 800596e:	4b46      	ldr	r3, [pc, #280]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d116      	bne.n	80059a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800597a:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_RCC_OscConfig+0x176>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d001      	beq.n	8005992 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e1ba      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005992:	4b3d      	ldr	r3, [pc, #244]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4939      	ldr	r1, [pc, #228]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	e03a      	b.n	8005a1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d020      	beq.n	80059f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059b0:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <HAL_RCC_OscConfig+0x270>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b6:	f7fd fa05 	bl	8002dc4 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059be:	f7fd fa01 	bl	8002dc4 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e19b      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d0:	4b2d      	ldr	r3, [pc, #180]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4927      	ldr	r1, [pc, #156]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	600b      	str	r3, [r1, #0]
 80059f0:	e015      	b.n	8005a1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059f2:	4b26      	ldr	r3, [pc, #152]	; (8005a8c <HAL_RCC_OscConfig+0x270>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fd f9e4 	bl	8002dc4 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a00:	f7fd f9e0 	bl	8002dc4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e17a      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a12:	4b1d      	ldr	r3, [pc, #116]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d03a      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d019      	beq.n	8005a66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a32:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <HAL_RCC_OscConfig+0x274>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a38:	f7fd f9c4 	bl	8002dc4 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a3e:	e008      	b.n	8005a52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a40:	f7fd f9c0 	bl	8002dc4 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e15a      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <HAL_RCC_OscConfig+0x26c>)
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0f0      	beq.n	8005a40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a5e:	2001      	movs	r0, #1
 8005a60:	f000 fac4 	bl	8005fec <RCC_Delay>
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a66:	4b0a      	ldr	r3, [pc, #40]	; (8005a90 <HAL_RCC_OscConfig+0x274>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6c:	f7fd f9aa 	bl	8002dc4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a72:	e00f      	b.n	8005a94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a74:	f7fd f9a6 	bl	8002dc4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d908      	bls.n	8005a94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e140      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	42420000 	.word	0x42420000
 8005a90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a94:	4b9e      	ldr	r3, [pc, #632]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e9      	bne.n	8005a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80a6 	beq.w	8005bfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b97      	ldr	r3, [pc, #604]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	4b94      	ldr	r3, [pc, #592]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	4a93      	ldr	r2, [pc, #588]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	61d3      	str	r3, [r2, #28]
 8005aca:	4b91      	ldr	r3, [pc, #580]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	60bb      	str	r3, [r7, #8]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ada:	4b8e      	ldr	r3, [pc, #568]	; (8005d14 <HAL_RCC_OscConfig+0x4f8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d118      	bne.n	8005b18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ae6:	4b8b      	ldr	r3, [pc, #556]	; (8005d14 <HAL_RCC_OscConfig+0x4f8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a8a      	ldr	r2, [pc, #552]	; (8005d14 <HAL_RCC_OscConfig+0x4f8>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af2:	f7fd f967 	bl	8002dc4 <HAL_GetTick>
 8005af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afa:	f7fd f963 	bl	8002dc4 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b64      	cmp	r3, #100	; 0x64
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0fd      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0c:	4b81      	ldr	r3, [pc, #516]	; (8005d14 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0f0      	beq.n	8005afa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d106      	bne.n	8005b2e <HAL_RCC_OscConfig+0x312>
 8005b20:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	4a7a      	ldr	r2, [pc, #488]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6213      	str	r3, [r2, #32]
 8005b2c:	e02d      	b.n	8005b8a <HAL_RCC_OscConfig+0x36e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10c      	bne.n	8005b50 <HAL_RCC_OscConfig+0x334>
 8005b36:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4a75      	ldr	r2, [pc, #468]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	6213      	str	r3, [r2, #32]
 8005b42:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	4a72      	ldr	r2, [pc, #456]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b48:	f023 0304 	bic.w	r3, r3, #4
 8005b4c:	6213      	str	r3, [r2, #32]
 8005b4e:	e01c      	b.n	8005b8a <HAL_RCC_OscConfig+0x36e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	d10c      	bne.n	8005b72 <HAL_RCC_OscConfig+0x356>
 8005b58:	4b6d      	ldr	r3, [pc, #436]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	4a6c      	ldr	r2, [pc, #432]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b5e:	f043 0304 	orr.w	r3, r3, #4
 8005b62:	6213      	str	r3, [r2, #32]
 8005b64:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	4a69      	ldr	r2, [pc, #420]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	6213      	str	r3, [r2, #32]
 8005b70:	e00b      	b.n	8005b8a <HAL_RCC_OscConfig+0x36e>
 8005b72:	4b67      	ldr	r3, [pc, #412]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	4a66      	ldr	r2, [pc, #408]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b78:	f023 0301 	bic.w	r3, r3, #1
 8005b7c:	6213      	str	r3, [r2, #32]
 8005b7e:	4b64      	ldr	r3, [pc, #400]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005b84:	f023 0304 	bic.w	r3, r3, #4
 8005b88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d015      	beq.n	8005bbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b92:	f7fd f917 	bl	8002dc4 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fd f913 	bl	8002dc4 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0ab      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb0:	4b57      	ldr	r3, [pc, #348]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0ee      	beq.n	8005b9a <HAL_RCC_OscConfig+0x37e>
 8005bbc:	e014      	b.n	8005be8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fd f901 	bl	8002dc4 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc4:	e00a      	b.n	8005bdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc6:	f7fd f8fd 	bl	8002dc4 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e095      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bdc:	4b4c      	ldr	r3, [pc, #304]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ee      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bee:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4a47      	ldr	r2, [pc, #284]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 8081 	beq.w	8005d06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c04:	4b42      	ldr	r3, [pc, #264]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 030c 	and.w	r3, r3, #12
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d061      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d146      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c18:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_OscConfig+0x4fc>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c1e:	f7fd f8d1 	bl	8002dc4 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fd f8cd 	bl	8002dc4 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e067      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c38:	4b35      	ldr	r3, [pc, #212]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4c:	d108      	bne.n	8005c60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c4e:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	492d      	ldr	r1, [pc, #180]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c60:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a19      	ldr	r1, [r3, #32]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	430b      	orrs	r3, r1
 8005c72:	4927      	ldr	r1, [pc, #156]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c78:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <HAL_RCC_OscConfig+0x4fc>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fd f8a1 	bl	8002dc4 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fd f89d 	bl	8002dc4 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e037      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x46a>
 8005ca4:	e02f      	b.n	8005d06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <HAL_RCC_OscConfig+0x4fc>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cac:	f7fd f88a 	bl	8002dc4 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb4:	f7fd f886 	bl	8002dc4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e020      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cc6:	4b12      	ldr	r3, [pc, #72]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f0      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x498>
 8005cd2:	e018      	b.n	8005d06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e013      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_OscConfig+0x4f4>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d106      	bne.n	8005d02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40007000 	.word	0x40007000
 8005d18:	42420060 	.word	0x42420060

08005d1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e0d0      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d30:	4b6a      	ldr	r3, [pc, #424]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d910      	bls.n	8005d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d3e:	4b67      	ldr	r3, [pc, #412]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f023 0207 	bic.w	r2, r3, #7
 8005d46:	4965      	ldr	r1, [pc, #404]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b63      	ldr	r3, [pc, #396]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e0b8      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d78:	4b59      	ldr	r3, [pc, #356]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a58      	ldr	r2, [pc, #352]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d90:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a52      	ldr	r2, [pc, #328]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d9c:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	494d      	ldr	r1, [pc, #308]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d040      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d107      	bne.n	8005dd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d115      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e07f      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d107      	bne.n	8005dea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dda:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e073      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dea:	4b3d      	ldr	r3, [pc, #244]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06b      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dfa:	4b39      	ldr	r3, [pc, #228]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f023 0203 	bic.w	r2, r3, #3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4936      	ldr	r1, [pc, #216]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fc ffda 	bl	8002dc4 <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	e00a      	b.n	8005e2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e14:	f7fc ffd6 	bl	8002dc4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e053      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 020c 	and.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d1eb      	bne.n	8005e14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e3c:	4b27      	ldr	r3, [pc, #156]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d210      	bcs.n	8005e6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f023 0207 	bic.w	r2, r3, #7
 8005e52:	4922      	ldr	r1, [pc, #136]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b20      	ldr	r3, [pc, #128]	; (8005edc <HAL_RCC_ClockConfig+0x1c0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e032      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e78:	4b19      	ldr	r3, [pc, #100]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4916      	ldr	r1, [pc, #88]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e96:	4b12      	ldr	r3, [pc, #72]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	490e      	ldr	r1, [pc, #56]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eaa:	f000 f821 	bl	8005ef0 <HAL_RCC_GetSysClockFreq>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c4>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	091b      	lsrs	r3, r3, #4
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	490a      	ldr	r1, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ebc:	5ccb      	ldrb	r3, [r1, r3]
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	4a09      	ldr	r2, [pc, #36]	; (8005ee8 <HAL_RCC_ClockConfig+0x1cc>)
 8005ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ec6:	4b09      	ldr	r3, [pc, #36]	; (8005eec <HAL_RCC_ClockConfig+0x1d0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fc ff38 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40022000 	.word	0x40022000
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	0800cb64 	.word	0x0800cb64
 8005ee8:	20000014 	.word	0x20000014
 8005eec:	20000018 	.word	0x20000018

08005ef0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef0:	b490      	push	{r4, r7}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ef8:	1d3c      	adds	r4, r7, #4
 8005efa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005efc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f00:	f240 2301 	movw	r3, #513	; 0x201
 8005f04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f1a:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d002      	beq.n	8005f30 <HAL_RCC_GetSysClockFreq+0x40>
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d003      	beq.n	8005f36 <HAL_RCC_GetSysClockFreq+0x46>
 8005f2e:	e02d      	b.n	8005f8c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f30:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f32:	623b      	str	r3, [r7, #32]
      break;
 8005f34:	e02d      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	0c9b      	lsrs	r3, r3, #18
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f42:	4413      	add	r3, r2
 8005f44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f48:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f54:	4b13      	ldr	r3, [pc, #76]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	0c5b      	lsrs	r3, r3, #17
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005f62:	4413      	add	r3, r2
 8005f64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f68:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f6e:	fb02 f203 	mul.w	r2, r2, r3
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7a:	e004      	b.n	8005f86 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	4a0b      	ldr	r2, [pc, #44]	; (8005fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	623b      	str	r3, [r7, #32]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f8e:	623b      	str	r3, [r7, #32]
      break;
 8005f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f92:	6a3b      	ldr	r3, [r7, #32]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3728      	adds	r7, #40	; 0x28
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc90      	pop	{r4, r7}
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	0800caa8 	.word	0x0800caa8
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	007a1200 	.word	0x007a1200
 8005fac:	003d0900 	.word	0x003d0900

08005fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fb4:	4b02      	ldr	r3, [pc, #8]	; (8005fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	20000014 	.word	0x20000014

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fc8:	f7ff fff2 	bl	8005fb0 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b05      	ldr	r3, [pc, #20]	; (8005fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	0adb      	lsrs	r3, r3, #11
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4903      	ldr	r1, [pc, #12]	; (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fda:	5ccb      	ldrb	r3, [r1, r3]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	0800cb74 	.word	0x0800cb74

08005fec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	; (8006020 <RCC_Delay+0x34>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <RCC_Delay+0x38>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	0a5b      	lsrs	r3, r3, #9
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	fb02 f303 	mul.w	r3, r2, r3
 8006006:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006008:	bf00      	nop
  }
  while (Delay --);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1e5a      	subs	r2, r3, #1
 800600e:	60fa      	str	r2, [r7, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1f9      	bne.n	8006008 <RCC_Delay+0x1c>
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000014 	.word	0x20000014
 8006024:	10624dd3 	.word	0x10624dd3

08006028 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d07d      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006048:	4b4f      	ldr	r3, [pc, #316]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006054:	4b4c      	ldr	r3, [pc, #304]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	4a4b      	ldr	r2, [pc, #300]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605e:	61d3      	str	r3, [r2, #28]
 8006060:	4b49      	ldr	r3, [pc, #292]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606c:	2301      	movs	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006070:	4b46      	ldr	r3, [pc, #280]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d118      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607c:	4b43      	ldr	r3, [pc, #268]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a42      	ldr	r2, [pc, #264]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006086:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006088:	f7fc fe9c 	bl	8002dc4 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608e:	e008      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006090:	f7fc fe98 	bl	8002dc4 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e06d      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a2:	4b3a      	ldr	r3, [pc, #232]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060ae:	4b36      	ldr	r3, [pc, #216]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02e      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d027      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060dc:	4b2c      	ldr	r3, [pc, #176]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060e2:	4a29      	ldr	r2, [pc, #164]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d014      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f2:	f7fc fe67 	bl	8002dc4 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f8:	e00a      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fa:	f7fc fe63 	bl	8002dc4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e036      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006110:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0ee      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800611c:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4917      	ldr	r1, [pc, #92]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	4313      	orrs	r3, r2
 800612c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d105      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006134:	4b14      	ldr	r3, [pc, #80]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800613e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d008      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800614c:	4b0e      	ldr	r3, [pc, #56]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	490b      	ldr	r1, [pc, #44]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615a:	4313      	orrs	r3, r2
 800615c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	4904      	ldr	r1, [pc, #16]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
 8006190:	42420440 	.word	0x42420440

08006194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b08d      	sub	sp, #52	; 0x34
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800619c:	4b5a      	ldr	r3, [pc, #360]	; (8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800619e:	f107 040c 	add.w	r4, r7, #12
 80061a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80061a8:	f240 2301 	movw	r3, #513	; 0x201
 80061ac:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b6:	2300      	movs	r3, #0
 80061b8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61fb      	str	r3, [r7, #28]
 80061be:	2300      	movs	r3, #0
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d00a      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	f200 8091 	bhi.w	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d04c      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d07c      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80061dc:	e089      	b.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80061de:	4b4b      	ldr	r3, [pc, #300]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80061e4:	4b49      	ldr	r3, [pc, #292]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8082 	beq.w	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	0c9b      	lsrs	r3, r3, #18
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80061fe:	4413      	add	r3, r2
 8006200:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006204:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d018      	beq.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006210:	4b3e      	ldr	r3, [pc, #248]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	0c5b      	lsrs	r3, r3, #17
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800621e:	4413      	add	r3, r2
 8006220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006224:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006230:	4a37      	ldr	r2, [pc, #220]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	fbb2 f2f3 	udiv	r2, r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006240:	e004      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800624c:	4b2f      	ldr	r3, [pc, #188]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006258:	d102      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800625e:	e04a      	b.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4a2c      	ldr	r2, [pc, #176]	; (8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006266:	fba2 2303 	umull	r2, r3, r2, r3
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800626e:	e042      	b.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006270:	4b26      	ldr	r3, [pc, #152]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006280:	d108      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800628c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	e01f      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800629e:	d109      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80062a0:	4b1a      	ldr	r3, [pc, #104]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80062ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b2:	e00f      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062be:	d11c      	bne.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d016      	beq.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80062cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062d2:	e012      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80062d4:	e011      	b.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80062d6:	f7ff fe75 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80062da:	4602      	mov	r2, r0
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	0b9b      	lsrs	r3, r3, #14
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	3301      	adds	r3, #1
 80062e8:	005b      	lsls	r3, r3, #1
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062f0:	e004      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80062f2:	bf00      	nop
 80062f4:	e002      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80062f6:	bf00      	nop
 80062f8:	e000      	b.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80062fa:	bf00      	nop
    }
  }
  return (frequency);
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3734      	adds	r7, #52	; 0x34
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	bf00      	nop
 8006308:	0800cab8 	.word	0x0800cab8
 800630c:	40021000 	.word	0x40021000
 8006310:	007a1200 	.word	0x007a1200
 8006314:	003d0900 	.word	0x003d0900
 8006318:	aaaaaaab 	.word	0xaaaaaaab

0800631c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e076      	b.n	800641c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d108      	bne.n	8006348 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633e:	d009      	beq.n	8006354 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	61da      	str	r2, [r3, #28]
 8006346:	e005      	b.n	8006354 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fc fad4 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d8:	ea42 0103 	orr.w	r1, r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	0c1a      	lsrs	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f002 0204 	and.w	r2, r2, #4
 80063fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800643e:	2b01      	cmp	r3, #1
 8006440:	d101      	bne.n	8006446 <HAL_SPI_Transmit+0x22>
 8006442:	2302      	movs	r3, #2
 8006444:	e126      	b.n	8006694 <HAL_SPI_Transmit+0x270>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800644e:	f7fc fcb9 	bl	8002dc4 <HAL_GetTick>
 8006452:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d002      	beq.n	800646a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006464:	2302      	movs	r3, #2
 8006466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006468:	e10b      	b.n	8006682 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_SPI_Transmit+0x52>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	77fb      	strb	r3, [r7, #31]
    goto error;
 800647a:	e102      	b.n	8006682 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2203      	movs	r2, #3
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c2:	d10f      	bne.n	80064e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ee:	2b40      	cmp	r3, #64	; 0x40
 80064f0:	d007      	beq.n	8006502 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650a:	d14b      	bne.n	80065a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_SPI_Transmit+0xf6>
 8006514:	8afb      	ldrh	r3, [r7, #22]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d13e      	bne.n	8006598 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800653e:	e02b      	b.n	8006598 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d112      	bne.n	8006574 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	881a      	ldrh	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	1c9a      	adds	r2, r3, #2
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	86da      	strh	r2, [r3, #54]	; 0x36
 8006572:	e011      	b.n	8006598 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006574:	f7fc fc26 	bl	8002dc4 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d803      	bhi.n	800658c <HAL_SPI_Transmit+0x168>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d102      	bne.n	8006592 <HAL_SPI_Transmit+0x16e>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d102      	bne.n	8006598 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006596:	e074      	b.n	8006682 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1ce      	bne.n	8006540 <HAL_SPI_Transmit+0x11c>
 80065a2:	e04c      	b.n	800663e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_SPI_Transmit+0x18e>
 80065ac:	8afb      	ldrh	r3, [r7, #22]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d140      	bne.n	8006634 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	7812      	ldrb	r2, [r2, #0]
 80065be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065d8:	e02c      	b.n	8006634 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d113      	bne.n	8006610 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b01      	subs	r3, #1
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	86da      	strh	r2, [r3, #54]	; 0x36
 800660e:	e011      	b.n	8006634 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006610:	f7fc fbd8 	bl	8002dc4 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d803      	bhi.n	8006628 <HAL_SPI_Transmit+0x204>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d102      	bne.n	800662e <HAL_SPI_Transmit+0x20a>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006632:	e026      	b.n	8006682 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1cd      	bne.n	80065da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f8b2 	bl	80067ac <SPI_EndRxTxTransaction>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	2b00      	cmp	r3, #0
 8006678:	d002      	beq.n	8006680 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e000      	b.n	8006682 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006692:	7ffb      	ldrb	r3, [r7, #31]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3720      	adds	r7, #32
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066ac:	f7fc fb8a 	bl	8002dc4 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066bc:	f7fc fb82 	bl	8002dc4 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	015b      	lsls	r3, r3, #5
 80066c8:	0d1b      	lsrs	r3, r3, #20
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	e054      	b.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d050      	beq.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066dc:	f7fc fb72 	bl	8002dc4 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d902      	bls.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d13d      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d111      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d004      	beq.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d107      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d10f      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e017      	b.n	800679e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3b01      	subs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d19b      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000014 	.word	0x20000014

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff ff6a 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e000      	b.n	80067e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e041      	b.n	800687e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fc f8c2 	bl	8002998 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f000 fb38 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d104      	bne.n	80068a2 <HAL_TIM_IC_Start_IT+0x1a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e013      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x42>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d104      	bne.n	80068b2 <HAL_TIM_IC_Start_IT+0x2a>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	e00b      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x42>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d104      	bne.n	80068c2 <HAL_TIM_IC_Start_IT+0x3a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	e003      	b.n	80068ca <HAL_TIM_IC_Start_IT+0x42>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d104      	bne.n	80068dc <HAL_TIM_IC_Start_IT+0x54>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	e013      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x7c>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d104      	bne.n	80068ec <HAL_TIM_IC_Start_IT+0x64>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	e00b      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x7c>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d104      	bne.n	80068fc <HAL_TIM_IC_Start_IT+0x74>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e003      	b.n	8006904 <HAL_TIM_IC_Start_IT+0x7c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006902:	b2db      	uxtb	r3, r3
 8006904:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d102      	bne.n	8006912 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800690c:	7bbb      	ldrb	r3, [r7, #14]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d001      	beq.n	8006916 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e0b3      	b.n	8006a7e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_TIM_IC_Start_IT+0x9e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006924:	e013      	b.n	800694e <HAL_TIM_IC_Start_IT+0xc6>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b04      	cmp	r3, #4
 800692a:	d104      	bne.n	8006936 <HAL_TIM_IC_Start_IT+0xae>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006934:	e00b      	b.n	800694e <HAL_TIM_IC_Start_IT+0xc6>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d104      	bne.n	8006946 <HAL_TIM_IC_Start_IT+0xbe>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006944:	e003      	b.n	800694e <HAL_TIM_IC_Start_IT+0xc6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <HAL_TIM_IC_Start_IT+0xd6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800695c:	e013      	b.n	8006986 <HAL_TIM_IC_Start_IT+0xfe>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b04      	cmp	r3, #4
 8006962:	d104      	bne.n	800696e <HAL_TIM_IC_Start_IT+0xe6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800696c:	e00b      	b.n	8006986 <HAL_TIM_IC_Start_IT+0xfe>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b08      	cmp	r3, #8
 8006972:	d104      	bne.n	800697e <HAL_TIM_IC_Start_IT+0xf6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697c:	e003      	b.n	8006986 <HAL_TIM_IC_Start_IT+0xfe>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b0c      	cmp	r3, #12
 800698a:	d841      	bhi.n	8006a10 <HAL_TIM_IC_Start_IT+0x188>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <HAL_TIM_IC_Start_IT+0x10c>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069c9 	.word	0x080069c9
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	080069db 	.word	0x080069db
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	080069ff 	.word	0x080069ff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68da      	ldr	r2, [r3, #12]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0202 	orr.w	r2, r2, #2
 80069d6:	60da      	str	r2, [r3, #12]
      break;
 80069d8:	e01b      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0204 	orr.w	r2, r2, #4
 80069e8:	60da      	str	r2, [r3, #12]
      break;
 80069ea:	e012      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0208 	orr.w	r2, r2, #8
 80069fa:	60da      	str	r2, [r3, #12]
      break;
 80069fc:	e009      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0210 	orr.w	r2, r2, #16
 8006a0c:	60da      	str	r2, [r3, #12]
      break;
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006a10:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2201      	movs	r2, #1
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fbad 	bl	800717a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a18      	ldr	r2, [pc, #96]	; (8006a88 <HAL_TIM_IC_Start_IT+0x200>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00e      	beq.n	8006a48 <HAL_TIM_IC_Start_IT+0x1c0>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d009      	beq.n	8006a48 <HAL_TIM_IC_Start_IT+0x1c0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a14      	ldr	r2, [pc, #80]	; (8006a8c <HAL_TIM_IC_Start_IT+0x204>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_IC_Start_IT+0x1c0>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <HAL_TIM_IC_Start_IT+0x208>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d111      	bne.n	8006a6c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d010      	beq.n	8006a7c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0201 	orr.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6a:	e007      	b.n	8006a7c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40000400 	.word	0x40000400
 8006a90:	40000800 	.word	0x40000800

08006a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0202 	mvn.w	r2, #2
 8006ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7f9 fe36 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9c1 	bl	8006e66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9c7 	bl	8006e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0304 	and.w	r3, r3, #4
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0204 	mvn.w	r2, #4
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7f9 fe0c 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f997 	bl	8006e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f99d 	bl	8006e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0208 	mvn.w	r2, #8
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7f9 fde2 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f96d 	bl	8006e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f973 	bl	8006e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b10      	cmp	r3, #16
 8006ba4:	d122      	bne.n	8006bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b10      	cmp	r3, #16
 8006bb2:	d11b      	bne.n	8006bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0210 	mvn.w	r2, #16
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7f9 fdb8 	bl	8000748 <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f943 	bl	8006e66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f949 	bl	8006e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d10e      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f06f 0201 	mvn.w	r2, #1
 8006c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f91e 	bl	8006e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c22:	2b80      	cmp	r3, #128	; 0x80
 8006c24:	d10e      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d107      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fb27 	bl	8007292 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b40      	cmp	r3, #64	; 0x40
 8006c50:	d10e      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d107      	bne.n	8006c70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f90d 	bl	8006e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d10e      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d107      	bne.n	8006c9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0220 	mvn.w	r2, #32
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 faf2 	bl	8007280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c9c:	bf00      	nop
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_IC_ConfigChannel+0x1a>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e082      	b.n	8006dc4 <HAL_TIM_IC_ConfigChannel+0x120>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11b      	bne.n	8006d04 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f000 f940 	bl	8006f60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 020c 	bic.w	r2, r2, #12
 8006cee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	689a      	ldr	r2, [r3, #8]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	619a      	str	r2, [r3, #24]
 8006d02:	e05a      	b.n	8006dba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d11c      	bne.n	8006d44 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f000 f97b 	bl	8007014 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699a      	ldr	r2, [r3, #24]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6999      	ldr	r1, [r3, #24]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	021a      	lsls	r2, r3, #8
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	619a      	str	r2, [r3, #24]
 8006d42:	e03a      	b.n	8006dba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d11b      	bne.n	8006d82 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f000 f997 	bl	800708c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 020c 	bic.w	r2, r2, #12
 8006d6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69d9      	ldr	r1, [r3, #28]
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	689a      	ldr	r2, [r3, #8]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	61da      	str	r2, [r3, #28]
 8006d80:	e01b      	b.n	8006dba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6819      	ldr	r1, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f000 f9b6 	bl	8007102 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006da4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69d9      	ldr	r1, [r3, #28]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	021a      	lsls	r2, r3, #8
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d831      	bhi.n	8006e44 <HAL_TIM_ReadCapturedValue+0x78>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e1d 	.word	0x08006e1d
 8006dec:	08006e45 	.word	0x08006e45
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006e45 	.word	0x08006e45
 8006df8:	08006e27 	.word	0x08006e27
 8006dfc:	08006e45 	.word	0x08006e45
 8006e00:	08006e45 	.word	0x08006e45
 8006e04:	08006e45 	.word	0x08006e45
 8006e08:	08006e31 	.word	0x08006e31
 8006e0c:	08006e45 	.word	0x08006e45
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	60fb      	str	r3, [r7, #12]

      break;
 8006e24:	e00f      	b.n	8006e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	60fb      	str	r3, [r7, #12]

      break;
 8006e2e:	e00a      	b.n	8006e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	60fb      	str	r3, [r7, #12]

      break;
 8006e38:	e005      	b.n	8006e46 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e40:	60fb      	str	r3, [r7, #12]

      break;
 8006e42:	e000      	b.n	8006e46 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006e44:	bf00      	nop
  }

  return tmpreg;
 8006e46:	68fb      	ldr	r3, [r7, #12]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop

08006e54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr

08006e66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bc80      	pop	{r7}
 8006e88:	4770      	bx	lr

08006e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d007      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a25      	ldr	r2, [pc, #148]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d007      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d108      	bne.n	8006f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800

08006f60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	f023 0201 	bic.w	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4a1f      	ldr	r2, [pc, #124]	; (8007008 <TIM_TI1_SetConfig+0xa8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_TI1_SetConfig+0x46>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f94:	d007      	beq.n	8006fa6 <TIM_TI1_SetConfig+0x46>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	; (800700c <TIM_TI1_SetConfig+0xac>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_TI1_SetConfig+0x46>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a1b      	ldr	r2, [pc, #108]	; (8007010 <TIM_TI1_SetConfig+0xb0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d101      	bne.n	8006faa <TIM_TI1_SetConfig+0x4a>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <TIM_TI1_SetConfig+0x4c>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e003      	b.n	8006fca <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f043 0301 	orr.w	r3, r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f023 030a 	bic.w	r3, r3, #10
 8006fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f003 030a 	and.w	r3, r3, #10
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800

08007014 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f023 0210 	bic.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007040:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	031b      	lsls	r3, r3, #12
 8007058:	b29b      	uxth	r3, r3
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007066:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800708c:	b480      	push	{r7}
 800708e:	b087      	sub	sp, #28
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f023 0303 	bic.w	r3, r3, #3
 80070b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr

08007102 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007102:	b480      	push	{r7}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007140:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	031b      	lsls	r3, r3, #12
 8007146:	b29b      	uxth	r3, r3
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007154:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	031b      	lsls	r3, r3, #12
 800715a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	4770      	bx	lr

0800717a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800717a:	b480      	push	{r7}
 800717c:	b087      	sub	sp, #28
 800717e:	af00      	add	r7, sp, #0
 8007180:	60f8      	str	r0, [r7, #12]
 8007182:	60b9      	str	r1, [r7, #8]
 8007184:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f003 031f 	and.w	r3, r3, #31
 800718c:	2201      	movs	r2, #1
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1a      	ldr	r2, [r3, #32]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	43db      	mvns	r3, r3
 800719c:	401a      	ands	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1a      	ldr	r2, [r3, #32]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	431a      	orrs	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr
	...

080071c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d8:	2302      	movs	r3, #2
 80071da:	e046      	b.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a16      	ldr	r2, [pc, #88]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007228:	d009      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a12      	ldr	r2, [pc, #72]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a10      	ldr	r2, [pc, #64]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d10c      	bne.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800

08007280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr

08007292 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	bc80      	pop	{r7}
 80072a2:	4770      	bx	lr

080072a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072a4:	b084      	sub	sp, #16
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	f107 0014 	add.w	r0, r7, #20
 80072b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	b004      	add	sp, #16
 80072c2:	4770      	bx	lr

080072c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80072d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr

080072f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80072fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	b29b      	uxth	r3, r3
 800730a:	43db      	mvns	r3, r3
 800730c:	b29b      	uxth	r3, r3
 800730e:	4013      	ands	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800733c:	b084      	sub	sp, #16
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	f107 0014 	add.w	r0, r7, #20
 800734a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	b004      	add	sp, #16
 800737a:	4770      	bx	lr

0800737c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800737c:	b480      	push	{r7}
 800737e:	b09b      	sub	sp, #108	; 0x6c
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29b      	uxth	r3, r3
 800739a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800739e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	78db      	ldrb	r3, [r3, #3]
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d81f      	bhi.n	80073ee <USB_ActivateEndpoint+0x72>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <USB_ActivateEndpoint+0x38>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073f7 	.word	0x080073f7
 80073c0:	080073d3 	.word	0x080073d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80073c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80073c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80073d0:	e012      	b.n	80073f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80073d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80073d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80073da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80073de:	e00b      	b.n	80073f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80073e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80073e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80073ec:	e004      	b.n	80073f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80073f4:	e000      	b.n	80073f8 <USB_ActivateEndpoint+0x7c>
      break;
 80073f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	441a      	add	r2, r3
 8007402:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007416:	b29b      	uxth	r3, r3
 8007418:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	b29a      	uxth	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b29b      	uxth	r3, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	441a      	add	r2, r3
 8007448:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800744c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745c:	b29b      	uxth	r3, r3
 800745e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	7b1b      	ldrb	r3, [r3, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f040 8149 	bne.w	80076fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 8084 	beq.w	800757c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747e:	b29b      	uxth	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	011a      	lsls	r2, r3, #4
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	88db      	ldrh	r3, [r3, #6]
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	b29b      	uxth	r3, r3
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	81fb      	strh	r3, [r7, #14]
 80074b6:	89fb      	ldrh	r3, [r7, #14]
 80074b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d01b      	beq.n	80074f8 <USB_ActivateEndpoint+0x17c>
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d6:	81bb      	strh	r3, [r7, #12]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	441a      	add	r2, r3
 80074e2:	89bb      	ldrh	r3, [r7, #12]
 80074e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	78db      	ldrb	r3, [r3, #3]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d020      	beq.n	8007542 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007516:	813b      	strh	r3, [r7, #8]
 8007518:	893b      	ldrh	r3, [r7, #8]
 800751a:	f083 0320 	eor.w	r3, r3, #32
 800751e:	813b      	strh	r3, [r7, #8]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	441a      	add	r2, r3
 800752a:	893b      	ldrh	r3, [r7, #8]
 800752c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]
 8007540:	e27f      	b.n	8007a42 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007558:	817b      	strh	r3, [r7, #10]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	441a      	add	r2, r3
 8007564:	897b      	ldrh	r3, [r7, #10]
 8007566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800756a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007576:	b29b      	uxth	r3, r3
 8007578:	8013      	strh	r3, [r2, #0]
 800757a:	e262      	b.n	8007a42 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007586:	b29b      	uxth	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	4413      	add	r3, r2
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	011a      	lsls	r2, r3, #4
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	4413      	add	r3, r2
 800759a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	88db      	ldrh	r3, [r3, #6]
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	4413      	add	r3, r2
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	011a      	lsls	r2, r3, #4
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	4413      	add	r3, r2
 80075ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d2:	623b      	str	r3, [r7, #32]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d112      	bne.n	8007602 <USB_ActivateEndpoint+0x286>
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	881b      	ldrh	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	801a      	strh	r2, [r3, #0]
 8007600:	e02f      	b.n	8007662 <USB_ActivateEndpoint+0x2e6>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b3e      	cmp	r3, #62	; 0x3e
 8007608:	d813      	bhi.n	8007632 <USB_ActivateEndpoint+0x2b6>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	663b      	str	r3, [r7, #96]	; 0x60
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <USB_ActivateEndpoint+0x2a8>
 800761e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007620:	3301      	adds	r3, #1
 8007622:	663b      	str	r3, [r7, #96]	; 0x60
 8007624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29a      	uxth	r2, r3
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	801a      	strh	r2, [r3, #0]
 8007630:	e017      	b.n	8007662 <USB_ActivateEndpoint+0x2e6>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	663b      	str	r3, [r7, #96]	; 0x60
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 031f 	and.w	r3, r3, #31
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <USB_ActivateEndpoint+0x2d0>
 8007646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007648:	3b01      	subs	r3, #1
 800764a:	663b      	str	r3, [r7, #96]	; 0x60
 800764c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800764e:	b29b      	uxth	r3, r3
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	b29b      	uxth	r3, r3
 8007654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765c:	b29a      	uxth	r2, r3
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	83fb      	strh	r3, [r7, #30]
 8007670:	8bfb      	ldrh	r3, [r7, #30]
 8007672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d01b      	beq.n	80076b2 <USB_ActivateEndpoint+0x336>
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800768c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007690:	83bb      	strh	r3, [r7, #28]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	441a      	add	r2, r3
 800769c:	8bbb      	ldrh	r3, [r7, #28]
 800769e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	881b      	ldrh	r3, [r3, #0]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	837b      	strh	r3, [r7, #26]
 80076ca:	8b7b      	ldrh	r3, [r7, #26]
 80076cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076d0:	837b      	strh	r3, [r7, #26]
 80076d2:	8b7b      	ldrh	r3, [r7, #26]
 80076d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076d8:	837b      	strh	r3, [r7, #26]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	8b7b      	ldrh	r3, [r7, #26]
 80076e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	8013      	strh	r3, [r2, #0]
 80076fa:	e1a2      	b.n	8007a42 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	441a      	add	r2, r3
 8007720:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007734:	b29b      	uxth	r3, r3
 8007736:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	65bb      	str	r3, [r7, #88]	; 0x58
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007742:	b29b      	uxth	r3, r3
 8007744:	461a      	mov	r2, r3
 8007746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007748:	4413      	add	r3, r2
 800774a:	65bb      	str	r3, [r7, #88]	; 0x58
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	011a      	lsls	r2, r3, #4
 8007752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007754:	4413      	add	r3, r2
 8007756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775a:	657b      	str	r3, [r7, #84]	; 0x54
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	891b      	ldrh	r3, [r3, #8]
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	653b      	str	r3, [r7, #80]	; 0x50
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007776:	b29b      	uxth	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800777c:	4413      	add	r3, r2
 800777e:	653b      	str	r3, [r7, #80]	; 0x50
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	011a      	lsls	r2, r3, #4
 8007786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007788:	4413      	add	r3, r2
 800778a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800778e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	895b      	ldrh	r3, [r3, #10]
 8007794:	085b      	lsrs	r3, r3, #1
 8007796:	b29b      	uxth	r3, r3
 8007798:	005b      	lsls	r3, r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f040 8091 	bne.w	80078cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4413      	add	r3, r2
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80077b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80077ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <USB_ActivateEndpoint+0x47e>
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80077e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	873b      	strh	r3, [r7, #56]	; 0x38
 8007808:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01b      	beq.n	800784a <USB_ActivateEndpoint+0x4ce>
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007828:	86fb      	strh	r3, [r7, #54]	; 0x36
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	441a      	add	r2, r3
 8007834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800783a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800783e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007846:	b29b      	uxth	r3, r3
 8007848:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800785c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007860:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007862:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007864:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007868:	86bb      	strh	r3, [r7, #52]	; 0x34
 800786a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800786c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007870:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	441a      	add	r2, r3
 800787c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800787e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788e:	b29b      	uxth	r3, r3
 8007890:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	441a      	add	r2, r3
 80078b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80078b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	8013      	strh	r3, [r2, #0]
 80078ca:	e0ba      	b.n	8007a42 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80078dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01d      	beq.n	8007924 <USB_ActivateEndpoint+0x5a8>
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	441a      	add	r2, r3
 800790c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800791c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007920:	b29b      	uxth	r3, r3
 8007922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007934:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01d      	beq.n	800797c <USB_ActivateEndpoint+0x600>
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	441a      	add	r2, r3
 8007964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007968:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007974:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007978:	b29b      	uxth	r3, r3
 800797a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	78db      	ldrb	r3, [r3, #3]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d024      	beq.n	80079ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800799e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079a2:	f083 0320 	eor.w	r3, r3, #32
 80079a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80079b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	8013      	strh	r3, [r2, #0]
 80079cc:	e01d      	b.n	8007a0a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	441a      	add	r2, r3
 80079f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80079f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	441a      	add	r2, r3
 8007a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	376c      	adds	r7, #108	; 0x6c
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b08d      	sub	sp, #52	; 0x34
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	7b1b      	ldrb	r3, [r3, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f040 808e 	bne.w	8007b80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d044      	beq.n	8007af6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	881b      	ldrh	r3, [r3, #0]
 8007a78:	81bb      	strh	r3, [r7, #12]
 8007a7a:	89bb      	ldrh	r3, [r7, #12]
 8007a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01b      	beq.n	8007abc <USB_DeactivateEndpoint+0x6c>
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9a:	817b      	strh	r3, [r7, #10]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	441a      	add	r2, r3
 8007aa6:	897b      	ldrh	r3, [r7, #10]
 8007aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad2:	813b      	strh	r3, [r7, #8]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	893b      	ldrh	r3, [r7, #8]
 8007ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	8013      	strh	r3, [r2, #0]
 8007af4:	e192      	b.n	8007e1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	827b      	strh	r3, [r7, #18]
 8007b04:	8a7b      	ldrh	r3, [r7, #18]
 8007b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d01b      	beq.n	8007b46 <USB_DeactivateEndpoint+0xf6>
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b24:	823b      	strh	r3, [r7, #16]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	8a3b      	ldrh	r3, [r7, #16]
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5c:	81fb      	strh	r3, [r7, #14]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	89fb      	ldrh	r3, [r7, #14]
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]
 8007b7e:	e14d      	b.n	8007e1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	785b      	ldrb	r3, [r3, #1]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f040 80a5 	bne.w	8007cd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	843b      	strh	r3, [r7, #32]
 8007b98:	8c3b      	ldrh	r3, [r7, #32]
 8007b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01b      	beq.n	8007bda <USB_DeactivateEndpoint+0x18a>
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb8:	83fb      	strh	r3, [r7, #30]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	8bfb      	ldrh	r3, [r7, #30]
 8007bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	83bb      	strh	r3, [r7, #28]
 8007be8:	8bbb      	ldrh	r3, [r7, #28]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01b      	beq.n	8007c2a <USB_DeactivateEndpoint+0x1da>
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	837b      	strh	r3, [r7, #26]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	441a      	add	r2, r3
 8007c14:	8b7b      	ldrh	r3, [r7, #26]
 8007c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c40:	833b      	strh	r3, [r7, #24]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	441a      	add	r2, r3
 8007c4c:	8b3b      	ldrh	r3, [r7, #24]
 8007c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c78:	82fb      	strh	r3, [r7, #22]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	441a      	add	r2, r3
 8007c84:	8afb      	ldrh	r3, [r7, #22]
 8007c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb0:	82bb      	strh	r3, [r7, #20]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	441a      	add	r2, r3
 8007cbc:	8abb      	ldrh	r3, [r7, #20]
 8007cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	8013      	strh	r3, [r2, #0]
 8007cd2:	e0a3      	b.n	8007e1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ce2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01b      	beq.n	8007d24 <USB_DeactivateEndpoint+0x2d4>
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	881b      	ldrh	r3, [r3, #0]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	441a      	add	r2, r3
 8007d0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01b      	beq.n	8007d74 <USB_DeactivateEndpoint+0x324>
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	4413      	add	r3, r2
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	853b      	strh	r3, [r7, #40]	; 0x28
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	441a      	add	r2, r3
 8007d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	441a      	add	r2, r3
 8007e06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3734      	adds	r7, #52	; 0x34
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b0c4      	sub	sp, #272	; 0x110
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	1d3b      	adds	r3, r7, #4
 8007e30:	6018      	str	r0, [r3, #0]
 8007e32:	463b      	mov	r3, r7
 8007e34:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e36:	463b      	mov	r3, r7
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	f040 8557 	bne.w	80088f0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e42:	463b      	mov	r3, r7
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	463b      	mov	r3, r7
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d905      	bls.n	8007e5e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8007e52:	463b      	mov	r3, r7
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e5c:	e004      	b.n	8007e68 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8007e5e:	463b      	mov	r3, r7
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007e68:	463b      	mov	r3, r7
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	7b1b      	ldrb	r3, [r3, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d12c      	bne.n	8007ecc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007e72:	463b      	mov	r3, r7
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6959      	ldr	r1, [r3, #20]
 8007e78:	463b      	mov	r3, r7
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	88da      	ldrh	r2, [r3, #6]
 8007e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	1d38      	adds	r0, r7, #4
 8007e86:	6800      	ldr	r0, [r0, #0]
 8007e88:	f001 fa2c 	bl	80092e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	617b      	str	r3, [r7, #20]
 8007e92:	1d3b      	adds	r3, r7, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	463b      	mov	r3, r7
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	011a      	lsls	r2, r3, #4
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007eb4:	f107 0310 	add.w	r3, r7, #16
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f107 0310 	add.w	r3, r7, #16
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	f000 bcdd 	b.w	8008886 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007ecc:	463b      	mov	r3, r7
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	f040 8347 	bne.w	8008566 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007ed8:	463b      	mov	r3, r7
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a1a      	ldr	r2, [r3, #32]
 8007ede:	463b      	mov	r3, r7
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	f240 82eb 	bls.w	80084c0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007eea:	1d3b      	adds	r3, r7, #4
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	463b      	mov	r3, r7
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	441a      	add	r2, r3
 8007f16:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007f2e:	463b      	mov	r3, r7
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f38:	1ad2      	subs	r2, r2, r3
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f40:	1d3b      	adds	r3, r7, #4
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	463b      	mov	r3, r7
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4413      	add	r3, r2
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 8159 	beq.w	800820e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f5c:	1d3b      	adds	r3, r7, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	637b      	str	r3, [r7, #52]	; 0x34
 8007f62:	463b      	mov	r3, r7
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	785b      	ldrb	r3, [r3, #1]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d164      	bne.n	8008036 <USB_EPStartXfer+0x20e>
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f72:	1d3b      	adds	r3, r7, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f80:	4413      	add	r3, r2
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f84:	463b      	mov	r3, r7
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	011a      	lsls	r2, r3, #4
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	4413      	add	r3, r2
 8007f90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d112      	bne.n	8007fc4 <USB_EPStartXfer+0x19c>
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	801a      	strh	r2, [r3, #0]
 8007fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e054      	b.n	800806e <USB_EPStartXfer+0x246>
 8007fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fc8:	2b3e      	cmp	r3, #62	; 0x3e
 8007fca:	d817      	bhi.n	8007ffc <USB_EPStartXfer+0x1d4>
 8007fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fd0:	085b      	lsrs	r3, r3, #1
 8007fd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <USB_EPStartXfer+0x1c4>
 8007fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	029b      	lsls	r3, r3, #10
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	e038      	b.n	800806e <USB_EPStartXfer+0x246>
 8007ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800a:	f003 031f 	and.w	r3, r3, #31
 800800e:	2b00      	cmp	r3, #0
 8008010:	d104      	bne.n	800801c <USB_EPStartXfer+0x1f4>
 8008012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008016:	3b01      	subs	r3, #1
 8008018:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800801c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008020:	b29b      	uxth	r3, r3
 8008022:	029b      	lsls	r3, r3, #10
 8008024:	b29b      	uxth	r3, r3
 8008026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802e:	b29a      	uxth	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e01b      	b.n	800806e <USB_EPStartXfer+0x246>
 8008036:	463b      	mov	r3, r7
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d116      	bne.n	800806e <USB_EPStartXfer+0x246>
 8008040:	1d3b      	adds	r3, r7, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008048:	b29b      	uxth	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	4413      	add	r3, r2
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
 8008052:	463b      	mov	r3, r7
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	011a      	lsls	r2, r3, #4
 800805a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805c:	4413      	add	r3, r2
 800805e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008062:	633b      	str	r3, [r7, #48]	; 0x30
 8008064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008068:	b29a      	uxth	r2, r3
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800806e:	463b      	mov	r3, r7
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	895b      	ldrh	r3, [r3, #10]
 8008074:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008078:	463b      	mov	r3, r7
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6959      	ldr	r1, [r3, #20]
 800807e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008082:	b29b      	uxth	r3, r3
 8008084:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008088:	1d38      	adds	r0, r7, #4
 800808a:	6800      	ldr	r0, [r0, #0]
 800808c:	f001 f92a 	bl	80092e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008090:	463b      	mov	r3, r7
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800809a:	441a      	add	r2, r3
 800809c:	463b      	mov	r3, r7
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80080a2:	463b      	mov	r3, r7
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	463b      	mov	r3, r7
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d909      	bls.n	80080c6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80080b2:	463b      	mov	r3, r7
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080bc:	1ad2      	subs	r2, r2, r3
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	621a      	str	r2, [r3, #32]
 80080c4:	e008      	b.n	80080d8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80080c6:	463b      	mov	r3, r7
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80080d0:	463b      	mov	r3, r7
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2200      	movs	r2, #0
 80080d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080d8:	463b      	mov	r3, r7
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d164      	bne.n	80081ac <USB_EPStartXfer+0x384>
 80080e2:	1d3b      	adds	r3, r7, #4
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	1d3b      	adds	r3, r7, #4
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	461a      	mov	r2, r3
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	61fb      	str	r3, [r7, #28]
 80080fa:	463b      	mov	r3, r7
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	011a      	lsls	r2, r3, #4
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800810a:	61bb      	str	r3, [r7, #24]
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008110:	2b00      	cmp	r3, #0
 8008112:	d112      	bne.n	800813a <USB_EPStartXfer+0x312>
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800811e:	b29a      	uxth	r2, r3
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008132:	b29a      	uxth	r2, r3
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e057      	b.n	80081ea <USB_EPStartXfer+0x3c2>
 800813a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813e:	2b3e      	cmp	r3, #62	; 0x3e
 8008140:	d817      	bhi.n	8008172 <USB_EPStartXfer+0x34a>
 8008142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800814c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <USB_EPStartXfer+0x33a>
 8008158:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800815c:	3301      	adds	r3, #1
 800815e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008162:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008166:	b29b      	uxth	r3, r3
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	b29a      	uxth	r2, r3
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e03b      	b.n	80081ea <USB_EPStartXfer+0x3c2>
 8008172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800817c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008180:	f003 031f 	and.w	r3, r3, #31
 8008184:	2b00      	cmp	r3, #0
 8008186:	d104      	bne.n	8008192 <USB_EPStartXfer+0x36a>
 8008188:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800818c:	3b01      	subs	r3, #1
 800818e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008192:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008196:	b29b      	uxth	r3, r3
 8008198:	029b      	lsls	r3, r3, #10
 800819a:	b29b      	uxth	r3, r3
 800819c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	801a      	strh	r2, [r3, #0]
 80081aa:	e01e      	b.n	80081ea <USB_EPStartXfer+0x3c2>
 80081ac:	463b      	mov	r3, r7
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d119      	bne.n	80081ea <USB_EPStartXfer+0x3c2>
 80081b6:	1d3b      	adds	r3, r7, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
 80081bc:	1d3b      	adds	r3, r7, #4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	4413      	add	r3, r2
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
 80081ce:	463b      	mov	r3, r7
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	011a      	lsls	r2, r3, #4
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	4413      	add	r3, r2
 80081da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081de:	623b      	str	r3, [r7, #32]
 80081e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081ea:	463b      	mov	r3, r7
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	891b      	ldrh	r3, [r3, #8]
 80081f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f4:	463b      	mov	r3, r7
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6959      	ldr	r1, [r3, #20]
 80081fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8008204:	1d38      	adds	r0, r7, #4
 8008206:	6800      	ldr	r0, [r0, #0]
 8008208:	f001 f86c 	bl	80092e4 <USB_WritePMA>
 800820c:	e33b      	b.n	8008886 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800820e:	463b      	mov	r3, r7
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d164      	bne.n	80082e2 <USB_EPStartXfer+0x4ba>
 8008218:	1d3b      	adds	r3, r7, #4
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008226:	b29b      	uxth	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822c:	4413      	add	r3, r2
 800822e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008230:	463b      	mov	r3, r7
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	011a      	lsls	r2, r3, #4
 8008238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800823a:	4413      	add	r3, r2
 800823c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008240:	64bb      	str	r3, [r7, #72]	; 0x48
 8008242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d112      	bne.n	8008270 <USB_EPStartXfer+0x448>
 800824a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008254:	b29a      	uxth	r2, r3
 8008256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008268:	b29a      	uxth	r2, r3
 800826a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	e057      	b.n	8008320 <USB_EPStartXfer+0x4f8>
 8008270:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008274:	2b3e      	cmp	r3, #62	; 0x3e
 8008276:	d817      	bhi.n	80082a8 <USB_EPStartXfer+0x480>
 8008278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <USB_EPStartXfer+0x470>
 800828e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008292:	3301      	adds	r3, #1
 8008294:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800829c:	b29b      	uxth	r3, r3
 800829e:	029b      	lsls	r3, r3, #10
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	e03b      	b.n	8008320 <USB_EPStartXfer+0x4f8>
 80082a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ac:	095b      	lsrs	r3, r3, #5
 80082ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <USB_EPStartXfer+0x4a0>
 80082be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c2:	3b01      	subs	r3, #1
 80082c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	029b      	lsls	r3, r3, #10
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082da:	b29a      	uxth	r2, r3
 80082dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e01e      	b.n	8008320 <USB_EPStartXfer+0x4f8>
 80082e2:	463b      	mov	r3, r7
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d119      	bne.n	8008320 <USB_EPStartXfer+0x4f8>
 80082ec:	1d3b      	adds	r3, r7, #4
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	657b      	str	r3, [r7, #84]	; 0x54
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008300:	4413      	add	r3, r2
 8008302:	657b      	str	r3, [r7, #84]	; 0x54
 8008304:	463b      	mov	r3, r7
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	011a      	lsls	r2, r3, #4
 800830c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800830e:	4413      	add	r3, r2
 8008310:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008314:	653b      	str	r3, [r7, #80]	; 0x50
 8008316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800831a:	b29a      	uxth	r2, r3
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008320:	463b      	mov	r3, r7
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	891b      	ldrh	r3, [r3, #8]
 8008326:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800832a:	463b      	mov	r3, r7
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6959      	ldr	r1, [r3, #20]
 8008330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008334:	b29b      	uxth	r3, r3
 8008336:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800833a:	1d38      	adds	r0, r7, #4
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	f000 ffd1 	bl	80092e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008342:	463b      	mov	r3, r7
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	695a      	ldr	r2, [r3, #20]
 8008348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800834c:	441a      	add	r2, r3
 800834e:	463b      	mov	r3, r7
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008354:	463b      	mov	r3, r7
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6a1a      	ldr	r2, [r3, #32]
 800835a:	463b      	mov	r3, r7
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	429a      	cmp	r2, r3
 8008362:	d909      	bls.n	8008378 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8008364:	463b      	mov	r3, r7
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a1a      	ldr	r2, [r3, #32]
 800836a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	463b      	mov	r3, r7
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	621a      	str	r2, [r3, #32]
 8008376:	e008      	b.n	800838a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8008378:	463b      	mov	r3, r7
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8008382:	463b      	mov	r3, r7
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800838a:	1d3b      	adds	r3, r7, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	647b      	str	r3, [r7, #68]	; 0x44
 8008390:	463b      	mov	r3, r7
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d164      	bne.n	8008464 <USB_EPStartXfer+0x63c>
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a0:	1d3b      	adds	r3, r7, #4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ae:	4413      	add	r3, r2
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b2:	463b      	mov	r3, r7
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	011a      	lsls	r2, r3, #4
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	4413      	add	r3, r2
 80083be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80083c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d112      	bne.n	80083f2 <USB_EPStartXfer+0x5ca>
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	801a      	strh	r2, [r3, #0]
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e054      	b.n	800849c <USB_EPStartXfer+0x674>
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083f6:	2b3e      	cmp	r3, #62	; 0x3e
 80083f8:	d817      	bhi.n	800842a <USB_EPStartXfer+0x602>
 80083fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80083fe:	085b      	lsrs	r3, r3, #1
 8008400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d004      	beq.n	800841a <USB_EPStartXfer+0x5f2>
 8008410:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008414:	3301      	adds	r3, #1
 8008416:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800841a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800841e:	b29b      	uxth	r3, r3
 8008420:	029b      	lsls	r3, r3, #10
 8008422:	b29a      	uxth	r2, r3
 8008424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e038      	b.n	800849c <USB_EPStartXfer+0x674>
 800842a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008434:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008438:	f003 031f 	and.w	r3, r3, #31
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <USB_EPStartXfer+0x622>
 8008440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008444:	3b01      	subs	r3, #1
 8008446:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800844a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800844e:	b29b      	uxth	r3, r3
 8008450:	029b      	lsls	r3, r3, #10
 8008452:	b29b      	uxth	r3, r3
 8008454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800845c:	b29a      	uxth	r2, r3
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	801a      	strh	r2, [r3, #0]
 8008462:	e01b      	b.n	800849c <USB_EPStartXfer+0x674>
 8008464:	463b      	mov	r3, r7
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	785b      	ldrb	r3, [r3, #1]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d116      	bne.n	800849c <USB_EPStartXfer+0x674>
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847c:	4413      	add	r3, r2
 800847e:	647b      	str	r3, [r7, #68]	; 0x44
 8008480:	463b      	mov	r3, r7
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	011a      	lsls	r2, r3, #4
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	4413      	add	r3, r2
 800848c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008490:	643b      	str	r3, [r7, #64]	; 0x40
 8008492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008496:	b29a      	uxth	r2, r3
 8008498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800849a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800849c:	463b      	mov	r3, r7
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	895b      	ldrh	r3, [r3, #10]
 80084a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084a6:	463b      	mov	r3, r7
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6959      	ldr	r1, [r3, #20]
 80084ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80084b6:	1d38      	adds	r0, r7, #4
 80084b8:	6800      	ldr	r0, [r0, #0]
 80084ba:	f000 ff13 	bl	80092e4 <USB_WritePMA>
 80084be:	e1e2      	b.n	8008886 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80084c0:	463b      	mov	r3, r7
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	463b      	mov	r3, r7
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	463b      	mov	r3, r7
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	441a      	add	r2, r3
 80084f6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80084fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	b29b      	uxth	r3, r3
 800850c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800850e:	1d3b      	adds	r3, r7, #4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	663b      	str	r3, [r7, #96]	; 0x60
 8008514:	1d3b      	adds	r3, r7, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008522:	4413      	add	r3, r2
 8008524:	663b      	str	r3, [r7, #96]	; 0x60
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008530:	4413      	add	r3, r2
 8008532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800853c:	b29a      	uxth	r2, r3
 800853e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008540:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008542:	463b      	mov	r3, r7
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	891b      	ldrh	r3, [r3, #8]
 8008548:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800854c:	463b      	mov	r3, r7
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6959      	ldr	r1, [r3, #20]
 8008552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008556:	b29b      	uxth	r3, r3
 8008558:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800855c:	1d38      	adds	r0, r7, #4
 800855e:	6800      	ldr	r0, [r0, #0]
 8008560:	f000 fec0 	bl	80092e4 <USB_WritePMA>
 8008564:	e18f      	b.n	8008886 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008566:	1d3b      	adds	r3, r7, #4
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	463b      	mov	r3, r7
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 808f 	beq.w	80086a0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008582:	1d3b      	adds	r3, r7, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	67bb      	str	r3, [r7, #120]	; 0x78
 8008588:	463b      	mov	r3, r7
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d164      	bne.n	800865c <USB_EPStartXfer+0x834>
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	673b      	str	r3, [r7, #112]	; 0x70
 8008598:	1d3b      	adds	r3, r7, #4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a6:	4413      	add	r3, r2
 80085a8:	673b      	str	r3, [r7, #112]	; 0x70
 80085aa:	463b      	mov	r3, r7
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	011a      	lsls	r2, r3, #4
 80085b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d112      	bne.n	80085ea <USB_EPStartXfer+0x7c2>
 80085c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	e054      	b.n	8008694 <USB_EPStartXfer+0x86c>
 80085ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085ee:	2b3e      	cmp	r3, #62	; 0x3e
 80085f0:	d817      	bhi.n	8008622 <USB_EPStartXfer+0x7fa>
 80085f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <USB_EPStartXfer+0x7ea>
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	3301      	adds	r3, #1
 800860e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008616:	b29b      	uxth	r3, r3
 8008618:	029b      	lsls	r3, r3, #10
 800861a:	b29a      	uxth	r2, r3
 800861c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	e038      	b.n	8008694 <USB_EPStartXfer+0x86c>
 8008622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800862c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <USB_EPStartXfer+0x81a>
 8008638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863c:	3b01      	subs	r3, #1
 800863e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008646:	b29b      	uxth	r3, r3
 8008648:	029b      	lsls	r3, r3, #10
 800864a:	b29b      	uxth	r3, r3
 800864c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008654:	b29a      	uxth	r2, r3
 8008656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	e01b      	b.n	8008694 <USB_EPStartXfer+0x86c>
 800865c:	463b      	mov	r3, r7
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	785b      	ldrb	r3, [r3, #1]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d116      	bne.n	8008694 <USB_EPStartXfer+0x86c>
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800866e:	b29b      	uxth	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008674:	4413      	add	r3, r2
 8008676:	67bb      	str	r3, [r7, #120]	; 0x78
 8008678:	463b      	mov	r3, r7
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	011a      	lsls	r2, r3, #4
 8008680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008682:	4413      	add	r3, r2
 8008684:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008688:	677b      	str	r3, [r7, #116]	; 0x74
 800868a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800868e:	b29a      	uxth	r2, r3
 8008690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008692:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008694:	463b      	mov	r3, r7
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	895b      	ldrh	r3, [r3, #10]
 800869a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800869e:	e097      	b.n	80087d0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80086a0:	463b      	mov	r3, r7
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d168      	bne.n	800877c <USB_EPStartXfer+0x954>
 80086aa:	1d3b      	adds	r3, r7, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086c2:	4413      	add	r3, r2
 80086c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086c8:	463b      	mov	r3, r7
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	011a      	lsls	r2, r3, #4
 80086d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d112      	bne.n	800870a <USB_EPStartXfer+0x8e2>
 80086e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008702:	b29a      	uxth	r2, r3
 8008704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e05d      	b.n	80087c6 <USB_EPStartXfer+0x99e>
 800870a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800870e:	2b3e      	cmp	r3, #62	; 0x3e
 8008710:	d817      	bhi.n	8008742 <USB_EPStartXfer+0x91a>
 8008712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800871c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <USB_EPStartXfer+0x90a>
 8008728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800872c:	3301      	adds	r3, #1
 800872e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008732:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008736:	b29b      	uxth	r3, r3
 8008738:	029b      	lsls	r3, r3, #10
 800873a:	b29a      	uxth	r2, r3
 800873c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e041      	b.n	80087c6 <USB_EPStartXfer+0x99e>
 8008742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008746:	095b      	lsrs	r3, r3, #5
 8008748:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800874c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008750:	f003 031f 	and.w	r3, r3, #31
 8008754:	2b00      	cmp	r3, #0
 8008756:	d104      	bne.n	8008762 <USB_EPStartXfer+0x93a>
 8008758:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800875c:	3b01      	subs	r3, #1
 800875e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008762:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008766:	b29b      	uxth	r3, r3
 8008768:	029b      	lsls	r3, r3, #10
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e024      	b.n	80087c6 <USB_EPStartXfer+0x99e>
 800877c:	463b      	mov	r3, r7
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d11f      	bne.n	80087c6 <USB_EPStartXfer+0x99e>
 8008786:	1d3b      	adds	r3, r7, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800878e:	1d3b      	adds	r3, r7, #4
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008796:	b29b      	uxth	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800879e:	4413      	add	r3, r2
 80087a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087a4:	463b      	mov	r3, r7
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	011a      	lsls	r2, r3, #4
 80087ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087b0:	4413      	add	r3, r2
 80087b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80087c6:	463b      	mov	r3, r7
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	891b      	ldrh	r3, [r3, #8]
 80087cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087d0:	463b      	mov	r3, r7
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6959      	ldr	r1, [r3, #20]
 80087d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80087e0:	1d38      	adds	r0, r7, #4
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	f000 fd7e 	bl	80092e4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80087e8:	463b      	mov	r3, r7
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d122      	bne.n	8008838 <USB_EPStartXfer+0xa10>
 80087f2:	1d3b      	adds	r3, r7, #4
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	463b      	mov	r3, r7
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8008810:	1d3b      	adds	r3, r7, #4
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	463b      	mov	r3, r7
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	441a      	add	r2, r3
 800881e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800882e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008832:	b29b      	uxth	r3, r3
 8008834:	8013      	strh	r3, [r2, #0]
 8008836:	e026      	b.n	8008886 <USB_EPStartXfer+0xa5e>
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d121      	bne.n	8008886 <USB_EPStartXfer+0xa5e>
 8008842:	1d3b      	adds	r3, r7, #4
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	463b      	mov	r3, r7
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	b29b      	uxth	r3, r3
 8008854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	463b      	mov	r3, r7
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	441a      	add	r2, r3
 800886e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800887e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008882:	b29b      	uxth	r3, r3
 8008884:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008886:	1d3b      	adds	r3, r7, #4
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	463b      	mov	r3, r7
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4413      	add	r3, r2
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	f107 020e 	add.w	r2, r7, #14
 800889c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a4:	8013      	strh	r3, [r2, #0]
 80088a6:	f107 030e 	add.w	r3, r7, #14
 80088aa:	f107 020e 	add.w	r2, r7, #14
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	f082 0210 	eor.w	r2, r2, #16
 80088b4:	801a      	strh	r2, [r3, #0]
 80088b6:	f107 030e 	add.w	r3, r7, #14
 80088ba:	f107 020e 	add.w	r2, r7, #14
 80088be:	8812      	ldrh	r2, [r2, #0]
 80088c0:	f082 0220 	eor.w	r2, r2, #32
 80088c4:	801a      	strh	r2, [r3, #0]
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	463b      	mov	r3, r7
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	441a      	add	r2, r3
 80088d4:	f107 030e 	add.w	r3, r7, #14
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	8013      	strh	r3, [r2, #0]
 80088ee:	e3b5      	b.n	800905c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80088f0:	463b      	mov	r3, r7
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	7b1b      	ldrb	r3, [r3, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f040 8090 	bne.w	8008a1c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80088fc:	463b      	mov	r3, r7
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	463b      	mov	r3, r7
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	429a      	cmp	r2, r3
 800890a:	d90e      	bls.n	800892a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800890c:	463b      	mov	r3, r7
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8008916:	463b      	mov	r3, r7
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	699a      	ldr	r2, [r3, #24]
 800891c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008920:	1ad2      	subs	r2, r2, r3
 8008922:	463b      	mov	r3, r7
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	619a      	str	r2, [r3, #24]
 8008928:	e008      	b.n	800893c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800892a:	463b      	mov	r3, r7
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8008934:	463b      	mov	r3, r7
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2200      	movs	r2, #0
 800893a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800893c:	1d3b      	adds	r3, r7, #4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008944:	1d3b      	adds	r3, r7, #4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894c:	b29b      	uxth	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008954:	4413      	add	r3, r2
 8008956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800895a:	463b      	mov	r3, r7
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	011a      	lsls	r2, r3, #4
 8008962:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008966:	4413      	add	r3, r2
 8008968:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800896c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d116      	bne.n	80089a6 <USB_EPStartXfer+0xb7e>
 8008978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008984:	b29a      	uxth	r2, r3
 8008986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	e32c      	b.n	8009000 <USB_EPStartXfer+0x11d8>
 80089a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089aa:	2b3e      	cmp	r3, #62	; 0x3e
 80089ac:	d818      	bhi.n	80089e0 <USB_EPStartXfer+0xbb8>
 80089ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089b2:	085b      	lsrs	r3, r3, #1
 80089b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <USB_EPStartXfer+0xba6>
 80089c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089c8:	3301      	adds	r3, #1
 80089ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089dc:	801a      	strh	r2, [r3, #0]
 80089de:	e30f      	b.n	8009000 <USB_EPStartXfer+0x11d8>
 80089e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80089ee:	f003 031f 	and.w	r3, r3, #31
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d104      	bne.n	8008a00 <USB_EPStartXfer+0xbd8>
 80089f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089fa:	3b01      	subs	r3, #1
 80089fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	029b      	lsls	r3, r3, #10
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	e2f1      	b.n	8009000 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	78db      	ldrb	r3, [r3, #3]
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	f040 818f 	bne.w	8008d46 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008a28:	463b      	mov	r3, r7
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d175      	bne.n	8008b1e <USB_EPStartXfer+0xcf6>
 8008a32:	1d3b      	adds	r3, r7, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a50:	463b      	mov	r3, r7
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	011a      	lsls	r2, r3, #4
 8008a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a66:	463b      	mov	r3, r7
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d116      	bne.n	8008a9e <USB_EPStartXfer+0xc76>
 8008a70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a82:	801a      	strh	r2, [r3, #0]
 8008a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a9a:	801a      	strh	r2, [r3, #0]
 8008a9c:	e065      	b.n	8008b6a <USB_EPStartXfer+0xd42>
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8008aa6:	d81a      	bhi.n	8008ade <USB_EPStartXfer+0xcb6>
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ab4:	463b      	mov	r3, r7
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <USB_EPStartXfer+0xca4>
 8008ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008acc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	029b      	lsls	r3, r3, #10
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ada:	801a      	strh	r2, [r3, #0]
 8008adc:	e045      	b.n	8008b6a <USB_EPStartXfer+0xd42>
 8008ade:	463b      	mov	r3, r7
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	095b      	lsrs	r3, r3, #5
 8008ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008aea:	463b      	mov	r3, r7
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f003 031f 	and.w	r3, r3, #31
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d104      	bne.n	8008b02 <USB_EPStartXfer+0xcda>
 8008af8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008afc:	3b01      	subs	r3, #1
 8008afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	029b      	lsls	r3, r3, #10
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b1a:	801a      	strh	r2, [r3, #0]
 8008b1c:	e025      	b.n	8008b6a <USB_EPStartXfer+0xd42>
 8008b1e:	463b      	mov	r3, r7
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	785b      	ldrb	r3, [r3, #1]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d120      	bne.n	8008b6a <USB_EPStartXfer+0xd42>
 8008b28:	1d3b      	adds	r3, r7, #4
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b30:	1d3b      	adds	r3, r7, #4
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b40:	4413      	add	r3, r2
 8008b42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b46:	463b      	mov	r3, r7
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	011a      	lsls	r2, r3, #4
 8008b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b52:	4413      	add	r3, r2
 8008b54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b5c:	463b      	mov	r3, r7
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b68:	801a      	strh	r2, [r3, #0]
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b72:	463b      	mov	r3, r7
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	785b      	ldrb	r3, [r3, #1]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d175      	bne.n	8008c68 <USB_EPStartXfer+0xe40>
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b84:	1d3b      	adds	r3, r7, #4
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b94:	4413      	add	r3, r2
 8008b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b9a:	463b      	mov	r3, r7
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	011a      	lsls	r2, r3, #4
 8008ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d116      	bne.n	8008be8 <USB_EPStartXfer+0xdc0>
 8008bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bcc:	801a      	strh	r2, [r3, #0]
 8008bce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	e061      	b.n	8008cac <USB_EPStartXfer+0xe84>
 8008be8:	463b      	mov	r3, r7
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	2b3e      	cmp	r3, #62	; 0x3e
 8008bf0:	d81a      	bhi.n	8008c28 <USB_EPStartXfer+0xe00>
 8008bf2:	463b      	mov	r3, r7
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bfe:	463b      	mov	r3, r7
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <USB_EPStartXfer+0xdee>
 8008c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c10:	3301      	adds	r3, #1
 8008c12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	029b      	lsls	r3, r3, #10
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	e041      	b.n	8008cac <USB_EPStartXfer+0xe84>
 8008c28:	463b      	mov	r3, r7
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c34:	463b      	mov	r3, r7
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <USB_EPStartXfer+0xe24>
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c46:	3b01      	subs	r3, #1
 8008c48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	029b      	lsls	r3, r3, #10
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	e021      	b.n	8008cac <USB_EPStartXfer+0xe84>
 8008c68:	463b      	mov	r3, r7
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	785b      	ldrb	r3, [r3, #1]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d11c      	bne.n	8008cac <USB_EPStartXfer+0xe84>
 8008c72:	1d3b      	adds	r3, r7, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c82:	4413      	add	r3, r2
 8008c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c88:	463b      	mov	r3, r7
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	011a      	lsls	r2, r3, #4
 8008c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c94:	4413      	add	r3, r2
 8008c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008caa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008cac:	463b      	mov	r3, r7
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f000 81a4 	beq.w	8009000 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008cb8:	1d3b      	adds	r3, r7, #4
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008ccc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <USB_EPStartXfer+0xebc>
 8008cd8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10d      	bne.n	8008d00 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008ce4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 8187 	bne.w	8009000 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008cf2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 8180 	bne.w	8009000 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008d00:	1d3b      	adds	r3, r7, #4
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	463b      	mov	r3, r7
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d1a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8008d1e:	1d3b      	adds	r3, r7, #4
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	463b      	mov	r3, r7
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	441a      	add	r2, r3
 8008d2c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8008d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	8013      	strh	r3, [r2, #0]
 8008d44:	e15c      	b.n	8009000 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008d46:	463b      	mov	r3, r7
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	f040 8155 	bne.w	8008ffc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d52:	463b      	mov	r3, r7
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	463b      	mov	r3, r7
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d90e      	bls.n	8008d80 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8008d62:	463b      	mov	r3, r7
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008d6c:	463b      	mov	r3, r7
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	699a      	ldr	r2, [r3, #24]
 8008d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	463b      	mov	r3, r7
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	619a      	str	r2, [r3, #24]
 8008d7e:	e008      	b.n	8008d92 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008d80:	463b      	mov	r3, r7
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8008d8a:	463b      	mov	r3, r7
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d92:	463b      	mov	r3, r7
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d16f      	bne.n	8008e7c <USB_EPStartXfer+0x1054>
 8008d9c:	1d3b      	adds	r3, r7, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008db4:	4413      	add	r3, r2
 8008db6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	011a      	lsls	r2, r3, #4
 8008dc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d116      	bne.n	8008e06 <USB_EPStartXfer+0xfde>
 8008dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	e05f      	b.n	8008ec6 <USB_EPStartXfer+0x109e>
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e0c:	d818      	bhi.n	8008e40 <USB_EPStartXfer+0x1018>
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d004      	beq.n	8008e2e <USB_EPStartXfer+0x1006>
 8008e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e28:	3301      	adds	r3, #1
 8008e2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	029b      	lsls	r3, r3, #10
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e042      	b.n	8008ec6 <USB_EPStartXfer+0x109e>
 8008e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <USB_EPStartXfer+0x1038>
 8008e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	029b      	lsls	r3, r3, #10
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008e78:	801a      	strh	r2, [r3, #0]
 8008e7a:	e024      	b.n	8008ec6 <USB_EPStartXfer+0x109e>
 8008e7c:	463b      	mov	r3, r7
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d11f      	bne.n	8008ec6 <USB_EPStartXfer+0x109e>
 8008e86:	1d3b      	adds	r3, r7, #4
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e8e:	1d3b      	adds	r3, r7, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	011a      	lsls	r2, r3, #4
 8008eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	1d3b      	adds	r3, r7, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ece:	463b      	mov	r3, r7
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d16f      	bne.n	8008fb8 <USB_EPStartXfer+0x1190>
 8008ed8:	1d3b      	adds	r3, r7, #4
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ee0:	1d3b      	adds	r3, r7, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	461a      	mov	r2, r3
 8008eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	011a      	lsls	r2, r3, #4
 8008efe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f02:	4413      	add	r3, r2
 8008f04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d116      	bne.n	8008f42 <USB_EPStartXfer+0x111a>
 8008f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f3e:	801a      	strh	r2, [r3, #0]
 8008f40:	e05e      	b.n	8009000 <USB_EPStartXfer+0x11d8>
 8008f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f46:	2b3e      	cmp	r3, #62	; 0x3e
 8008f48:	d818      	bhi.n	8008f7c <USB_EPStartXfer+0x1154>
 8008f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f4e:	085b      	lsrs	r3, r3, #1
 8008f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <USB_EPStartXfer+0x1142>
 8008f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f64:	3301      	adds	r3, #1
 8008f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	029b      	lsls	r3, r3, #10
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	e041      	b.n	8009000 <USB_EPStartXfer+0x11d8>
 8008f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <USB_EPStartXfer+0x1174>
 8008f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f96:	3b01      	subs	r3, #1
 8008f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008fb4:	801a      	strh	r2, [r3, #0]
 8008fb6:	e023      	b.n	8009000 <USB_EPStartXfer+0x11d8>
 8008fb8:	463b      	mov	r3, r7
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d11e      	bne.n	8009000 <USB_EPStartXfer+0x11d8>
 8008fc2:	1d3b      	adds	r3, r7, #4
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fd8:	463b      	mov	r3, r7
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	011a      	lsls	r2, r3, #4
 8008fe0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fe4:	4413      	add	r3, r2
 8008fe6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ff8:	801a      	strh	r2, [r3, #0]
 8008ffa:	e001      	b.n	8009000 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e02e      	b.n	800905e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009000:	1d3b      	adds	r3, r7, #4
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	463b      	mov	r3, r7
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	881b      	ldrh	r3, [r3, #0]
 8009010:	b29b      	uxth	r3, r3
 8009012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800901e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009022:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009026:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800902a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800902e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009032:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009036:	1d3b      	adds	r3, r7, #4
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	463b      	mov	r3, r7
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800904c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009058:	b29b      	uxth	r3, r3
 800905a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800908c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009090:	81bb      	strh	r3, [r7, #12]
 8009092:	89bb      	ldrh	r3, [r7, #12]
 8009094:	f083 0310 	eor.w	r3, r3, #16
 8009098:	81bb      	strh	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	89bb      	ldrh	r3, [r7, #12]
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]
 80090ba:	e01f      	b.n	80090fc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d2:	81fb      	strh	r3, [r7, #14]
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090da:	81fb      	strh	r3, [r7, #14]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	441a      	add	r2, r3
 80090e6:	89fb      	ldrh	r3, [r7, #14]
 80090e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	bc80      	pop	{r7}
 8009106:	4770      	bx	lr

08009108 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009108:	b480      	push	{r7}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	7b1b      	ldrb	r3, [r3, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	f040 809d 	bne.w	8009256 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d04c      	beq.n	80091be <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	823b      	strh	r3, [r7, #16]
 8009132:	8a3b      	ldrh	r3, [r7, #16]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01b      	beq.n	8009174 <USB_EPClearStall+0x6c>
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	81fb      	strh	r3, [r7, #14]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	89fb      	ldrh	r3, [r7, #14]
 8009160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800916c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	78db      	ldrb	r3, [r3, #3]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d06c      	beq.n	8009256 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	b29b      	uxth	r3, r3
 800918a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009192:	81bb      	strh	r3, [r7, #12]
 8009194:	89bb      	ldrh	r3, [r7, #12]
 8009196:	f083 0320 	eor.w	r3, r3, #32
 800919a:	81bb      	strh	r3, [r7, #12]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	441a      	add	r2, r3
 80091a6:	89bb      	ldrh	r3, [r7, #12]
 80091a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	8013      	strh	r3, [r2, #0]
 80091bc:	e04b      	b.n	8009256 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	82fb      	strh	r3, [r7, #22]
 80091cc:	8afb      	ldrh	r3, [r7, #22]
 80091ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01b      	beq.n	800920e <USB_EPClearStall+0x106>
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ec:	82bb      	strh	r3, [r7, #20]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8abb      	ldrh	r3, [r7, #20]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009224:	827b      	strh	r3, [r7, #18]
 8009226:	8a7b      	ldrh	r3, [r7, #18]
 8009228:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800922c:	827b      	strh	r3, [r7, #18]
 800922e:	8a7b      	ldrh	r3, [r7, #18]
 8009230:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009234:	827b      	strh	r3, [r7, #18]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	441a      	add	r2, r3
 8009240:	8a7b      	ldrh	r3, [r7, #18]
 8009242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009252:	b29b      	uxth	r3, r3
 8009254:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	371c      	adds	r7, #28
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr

08009262 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800926e:	78fb      	ldrb	r3, [r7, #3]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2280      	movs	r2, #128	; 0x80
 8009278:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80092be:	b29b      	uxth	r3, r3
 80092c0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80092c2:	68fb      	ldr	r3, [r7, #12]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bc80      	pop	{r7}
 80092cc:	4770      	bx	lr

080092ce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	bc80      	pop	{r7}
 80092e2:	4770      	bx	lr

080092e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b08d      	sub	sp, #52	; 0x34
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	4611      	mov	r1, r2
 80092f0:	461a      	mov	r2, r3
 80092f2:	460b      	mov	r3, r1
 80092f4:	80fb      	strh	r3, [r7, #6]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80092fa:	88bb      	ldrh	r3, [r7, #4]
 80092fc:	3301      	adds	r3, #1
 80092fe:	085b      	lsrs	r3, r3, #1
 8009300:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800930a:	88fb      	ldrh	r3, [r7, #6]
 800930c:	005a      	lsls	r2, r3, #1
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800931c:	e01e      	b.n	800935c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	3301      	adds	r3, #1
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	021b      	lsls	r3, r3, #8
 8009332:	b29b      	uxth	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	b29a      	uxth	r2, r3
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	3302      	adds	r3, #2
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	3302      	adds	r3, #2
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	3301      	adds	r3, #1
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	3b01      	subs	r3, #1
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1dd      	bne.n	800931e <USB_WritePMA+0x3a>
  }
}
 8009362:	bf00      	nop
 8009364:	bf00      	nop
 8009366:	3734      	adds	r7, #52	; 0x34
 8009368:	46bd      	mov	sp, r7
 800936a:	bc80      	pop	{r7}
 800936c:	4770      	bx	lr

0800936e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800936e:	b480      	push	{r7}
 8009370:	b08b      	sub	sp, #44	; 0x2c
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	4611      	mov	r1, r2
 800937a:	461a      	mov	r2, r3
 800937c:	460b      	mov	r3, r1
 800937e:	80fb      	strh	r3, [r7, #6]
 8009380:	4613      	mov	r3, r2
 8009382:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009384:	88bb      	ldrh	r3, [r7, #4]
 8009386:	085b      	lsrs	r3, r3, #1
 8009388:	b29b      	uxth	r3, r3
 800938a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009394:	88fb      	ldrh	r3, [r7, #6]
 8009396:	005a      	lsls	r2, r3, #1
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093a0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
 80093a6:	e01b      	b.n	80093e0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	3302      	adds	r3, #2
 80093b4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	3301      	adds	r3, #1
 80093c2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	0a1b      	lsrs	r3, r3, #8
 80093c8:	b2da      	uxtb	r2, r3
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	3301      	adds	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	3302      	adds	r3, #2
 80093d8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	3b01      	subs	r3, #1
 80093de:	627b      	str	r3, [r7, #36]	; 0x24
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1e0      	bne.n	80093a8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80093e6:	88bb      	ldrh	r3, [r7, #4]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d007      	beq.n	8009402 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	701a      	strb	r2, [r3, #0]
  }
}
 8009402:	bf00      	nop
 8009404:	372c      	adds	r7, #44	; 0x2c
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7c1b      	ldrb	r3, [r3, #16]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d115      	bne.n	8009450 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009428:	2202      	movs	r2, #2
 800942a:	2181      	movs	r1, #129	; 0x81
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f002 f816 	bl	800b45e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800943c:	2202      	movs	r2, #2
 800943e:	2101      	movs	r1, #1
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f002 f80c 	bl	800b45e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800944e:	e012      	b.n	8009476 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009450:	2340      	movs	r3, #64	; 0x40
 8009452:	2202      	movs	r2, #2
 8009454:	2181      	movs	r1, #129	; 0x81
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f002 f801 	bl	800b45e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009462:	2340      	movs	r3, #64	; 0x40
 8009464:	2202      	movs	r2, #2
 8009466:	2101      	movs	r1, #1
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fff8 	bl	800b45e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009476:	2308      	movs	r3, #8
 8009478:	2203      	movs	r2, #3
 800947a:	2182      	movs	r1, #130	; 0x82
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 ffee 	bl	800b45e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800948c:	f002 f90e 	bl	800b6ac <USBD_static_malloc>
 8009490:	4602      	mov	r2, r0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d102      	bne.n	80094a8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80094a2:	2301      	movs	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
 80094a6:	e026      	b.n	80094f6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7c1b      	ldrb	r3, [r3, #16]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d109      	bne.n	80094e6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094dc:	2101      	movs	r1, #1
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f002 f8ae 	bl	800b640 <USBD_LL_PrepareReceive>
 80094e4:	e007      	b.n	80094f6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094ec:	2340      	movs	r3, #64	; 0x40
 80094ee:	2101      	movs	r1, #1
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f002 f8a5 	bl	800b640 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009510:	2181      	movs	r1, #129	; 0x81
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 ffc9 	bl	800b4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800951e:	2101      	movs	r1, #1
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f001 ffc2 	bl	800b4aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800952e:	2182      	movs	r1, #130	; 0x82
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f001 ffba 	bl	800b4aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00e      	beq.n	8009564 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009556:	4618      	mov	r0, r3
 8009558:	f002 f8b4 	bl	800b6c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009564:	7bfb      	ldrb	r3, [r7, #15]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800957e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009584:	2300      	movs	r3, #0
 8009586:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009594:	2b00      	cmp	r3, #0
 8009596:	d039      	beq.n	800960c <USBD_CDC_Setup+0x9e>
 8009598:	2b20      	cmp	r3, #32
 800959a:	d17f      	bne.n	800969c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	88db      	ldrh	r3, [r3, #6]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d029      	beq.n	80095f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da11      	bge.n	80095d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80095ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	88d2      	ldrh	r2, [r2, #6]
 80095c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095c2:	6939      	ldr	r1, [r7, #16]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	88db      	ldrh	r3, [r3, #6]
 80095c8:	461a      	mov	r2, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 fa09 	bl	800a9e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80095d0:	e06b      	b.n	80096aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	785a      	ldrb	r2, [r3, #1]
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	88db      	ldrh	r3, [r3, #6]
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80095e8:	6939      	ldr	r1, [r7, #16]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	88db      	ldrh	r3, [r3, #6]
 80095ee:	461a      	mov	r2, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fa24 	bl	800aa3e <USBD_CtlPrepareRx>
      break;
 80095f6:	e058      	b.n	80096aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	7850      	ldrb	r0, [r2, #1]
 8009604:	2200      	movs	r2, #0
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	4798      	blx	r3
      break;
 800960a:	e04e      	b.n	80096aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	785b      	ldrb	r3, [r3, #1]
 8009610:	2b0b      	cmp	r3, #11
 8009612:	d02e      	beq.n	8009672 <USBD_CDC_Setup+0x104>
 8009614:	2b0b      	cmp	r3, #11
 8009616:	dc38      	bgt.n	800968a <USBD_CDC_Setup+0x11c>
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <USBD_CDC_Setup+0xb4>
 800961c:	2b0a      	cmp	r3, #10
 800961e:	d014      	beq.n	800964a <USBD_CDC_Setup+0xdc>
 8009620:	e033      	b.n	800968a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009628:	2b03      	cmp	r3, #3
 800962a:	d107      	bne.n	800963c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	2202      	movs	r2, #2
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 f9d4 	bl	800a9e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800963a:	e02e      	b.n	800969a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f001 f965 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 8009644:	2302      	movs	r3, #2
 8009646:	75fb      	strb	r3, [r7, #23]
          break;
 8009648:	e027      	b.n	800969a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009650:	2b03      	cmp	r3, #3
 8009652:	d107      	bne.n	8009664 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009654:	f107 030f 	add.w	r3, r7, #15
 8009658:	2201      	movs	r2, #1
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 f9c0 	bl	800a9e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009662:	e01a      	b.n	800969a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 f951 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 800966c:	2302      	movs	r3, #2
 800966e:	75fb      	strb	r3, [r7, #23]
          break;
 8009670:	e013      	b.n	800969a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	2b03      	cmp	r3, #3
 800967a:	d00d      	beq.n	8009698 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f945 	bl	800a90e <USBD_CtlError>
            ret = USBD_FAIL;
 8009684:	2302      	movs	r3, #2
 8009686:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009688:	e006      	b.n	8009698 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f001 f93e 	bl	800a90e <USBD_CtlError>
          ret = USBD_FAIL;
 8009692:	2302      	movs	r3, #2
 8009694:	75fb      	strb	r3, [r7, #23]
          break;
 8009696:	e000      	b.n	800969a <USBD_CDC_Setup+0x12c>
          break;
 8009698:	bf00      	nop
      }
      break;
 800969a:	e006      	b.n	80096aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800969c:	6839      	ldr	r1, [r7, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 f935 	bl	800a90e <USBD_CtlError>
      ret = USBD_FAIL;
 80096a4:	2302      	movs	r3, #2
 80096a6:	75fb      	strb	r3, [r7, #23]
      break;
 80096a8:	bf00      	nop
  }

  return ret;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d03a      	beq.n	8009750 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80096da:	78fa      	ldrb	r2, [r7, #3]
 80096dc:	6879      	ldr	r1, [r7, #4]
 80096de:	4613      	mov	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	440b      	add	r3, r1
 80096e8:	331c      	adds	r3, #28
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d029      	beq.n	8009744 <USBD_CDC_DataIn+0x90>
 80096f0:	78fa      	ldrb	r2, [r7, #3]
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	440b      	add	r3, r1
 80096fe:	331c      	adds	r3, #28
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	78f9      	ldrb	r1, [r7, #3]
 8009704:	68b8      	ldr	r0, [r7, #8]
 8009706:	460b      	mov	r3, r1
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4403      	add	r3, r0
 8009710:	3338      	adds	r3, #56	; 0x38
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	fbb2 f1f3 	udiv	r1, r2, r3
 8009718:	fb03 f301 	mul.w	r3, r3, r1
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d110      	bne.n	8009744 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	331c      	adds	r3, #28
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009736:	78f9      	ldrb	r1, [r7, #3]
 8009738:	2300      	movs	r3, #0
 800973a:	2200      	movs	r2, #0
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 ff5c 	bl	800b5fa <USBD_LL_Transmit>
 8009742:	e003      	b.n	800974c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	e000      	b.n	8009752 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009750:	2302      	movs	r3, #2
  }
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800976c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 ff87 	bl	800b686 <USBD_LL_GetRxDataSize>
 8009778:	4602      	mov	r2, r0
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00d      	beq.n	80097a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800979e:	4611      	mov	r1, r2
 80097a0:	4798      	blx	r3

    return USBD_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e000      	b.n	80097a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80097a6:	2302      	movs	r3, #2
  }
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d015      	beq.n	80097f6 <USBD_CDC_EP0_RxReady+0x46>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80097d0:	2bff      	cmp	r3, #255	; 0xff
 80097d2:	d010      	beq.n	80097f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80097e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80097ea:	b292      	uxth	r2, r2
 80097ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	22ff      	movs	r2, #255	; 0xff
 80097f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2243      	movs	r2, #67	; 0x43
 800980c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800980e:	4b03      	ldr	r3, [pc, #12]	; (800981c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009810:	4618      	mov	r0, r3
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	bc80      	pop	{r7}
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	200000a8 	.word	0x200000a8

08009820 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2243      	movs	r2, #67	; 0x43
 800982c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800982e:	4b03      	ldr	r3, [pc, #12]	; (800983c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009830:	4618      	mov	r0, r3
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	bc80      	pop	{r7}
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20000064 	.word	0x20000064

08009840 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2243      	movs	r2, #67	; 0x43
 800984c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800984e:	4b03      	ldr	r3, [pc, #12]	; (800985c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009850:	4618      	mov	r0, r3
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	200000ec 	.word	0x200000ec

08009860 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	220a      	movs	r2, #10
 800986c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800986e:	4b03      	ldr	r3, [pc, #12]	; (800987c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009870:	4618      	mov	r0, r3
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	bc80      	pop	{r7}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20000020 	.word	0x20000020

08009880 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800988a:	2302      	movs	r3, #2
 800988c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d005      	beq.n	80098a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bc80      	pop	{r7}
 80098aa:	4770      	bx	lr

080098ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	4613      	mov	r3, r2
 80098b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80098ca:	88fa      	ldrh	r2, [r7, #6]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr

080098de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009912:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01c      	beq.n	8009958 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009946:	b29b      	uxth	r3, r3
 8009948:	2181      	movs	r1, #129	; 0x81
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 fe55 	bl	800b5fa <USBD_LL_Transmit>

      return USBD_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	e002      	b.n	800995a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009958:	2302      	movs	r3, #2
  }
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009970:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	7c1b      	ldrb	r3, [r3, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d109      	bne.n	8009998 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800998a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800998e:	2101      	movs	r1, #1
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fe55 	bl	800b640 <USBD_LL_PrepareReceive>
 8009996:	e007      	b.n	80099a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800999e:	2340      	movs	r3, #64	; 0x40
 80099a0:	2101      	movs	r1, #1
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 fe4c 	bl	800b640 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80099ca:	2302      	movs	r3, #2
 80099cc:	e01a      	b.n	8009a04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d003      	beq.n	80099ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	79fa      	ldrb	r2, [r7, #7]
 80099fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f001 fcb9 	bl	800b374 <USBD_LL_Init>

  return USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d006      	beq.n	8009a2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	73fb      	strb	r3, [r7, #15]
 8009a2c:	e001      	b.n	8009a32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr

08009a3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fcee 	bl	800b428 <USBD_LL_Start>

  return USBD_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr

08009a6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a76:	2302      	movs	r3, #2
 8009a78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	4798      	blx	r3
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d101      	bne.n	8009a9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	4611      	mov	r1, r2
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	4798      	blx	r3

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b082      	sub	sp, #8
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 fed8 	bl	800a896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009af4:	461a      	mov	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b02:	f003 031f 	and.w	r3, r3, #31
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d016      	beq.n	8009b38 <USBD_LL_SetupStage+0x6a>
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d81c      	bhi.n	8009b48 <USBD_LL_SetupStage+0x7a>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <USBD_LL_SetupStage+0x4a>
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d008      	beq.n	8009b28 <USBD_LL_SetupStage+0x5a>
 8009b16:	e017      	b.n	8009b48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f9cb 	bl	8009ebc <USBD_StdDevReq>
      break;
 8009b26:	e01a      	b.n	8009b5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fa2d 	bl	8009f90 <USBD_StdItfReq>
      break;
 8009b36:	e012      	b.n	8009b5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fa6d 	bl	800a020 <USBD_StdEPReq>
      break;
 8009b46:	e00a      	b.n	8009b5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009b4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	4619      	mov	r1, r3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f001 fcc6 	bl	800b4e8 <USBD_LL_StallEP>
      break;
 8009b5c:	bf00      	nop
  }

  return USBD_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	460b      	mov	r3, r1
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d14b      	bne.n	8009c14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d134      	bne.n	8009bf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d919      	bls.n	8009bce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	1ad2      	subs	r2, r2, r3
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	68da      	ldr	r2, [r3, #12]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d203      	bcs.n	8009bbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	e002      	b.n	8009bc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 ff57 	bl	800aa7a <USBD_CtlContinueRx>
 8009bcc:	e038      	b.n	8009c40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009be0:	2b03      	cmp	r3, #3
 8009be2:	d105      	bne.n	8009bf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 ff54 	bl	800aa9e <USBD_CtlSendStatus>
 8009bf6:	e023      	b.n	8009c40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d11e      	bne.n	8009c40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f001 fc6b 	bl	800b4e8 <USBD_LL_StallEP>
 8009c12:	e015      	b.n	8009c40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d00d      	beq.n	8009c3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d108      	bne.n	8009c3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	7afa      	ldrb	r2, [r7, #11]
 8009c34:	4611      	mov	r1, r2
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	4798      	blx	r3
 8009c3a:	e001      	b.n	8009c40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e000      	b.n	8009c42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b086      	sub	sp, #24
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	60f8      	str	r0, [r7, #12]
 8009c52:	460b      	mov	r3, r1
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c58:	7afb      	ldrb	r3, [r7, #11]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d17f      	bne.n	8009d5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3314      	adds	r3, #20
 8009c62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d15c      	bne.n	8009d28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d915      	bls.n	8009ca6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	68da      	ldr	r2, [r3, #12]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	1ad2      	subs	r2, r2, r3
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fec1 	bl	800aa1a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f001 fcce 	bl	800b640 <USBD_LL_PrepareReceive>
 8009ca4:	e04e      	b.n	8009d44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	6912      	ldr	r2, [r2, #16]
 8009cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb2:	fb02 f201 	mul.w	r2, r2, r1
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11c      	bne.n	8009cf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d316      	bcc.n	8009cf6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d20f      	bcs.n	8009cf6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 fe9d 	bl	800aa1a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	68f8      	ldr	r0, [r7, #12]
 8009cf0:	f001 fca6 	bl	800b640 <USBD_LL_PrepareReceive>
 8009cf4:	e026      	b.n	8009d44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d105      	bne.n	8009d18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d18:	2180      	movs	r1, #128	; 0x80
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f001 fbe4 	bl	800b4e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fecf 	bl	800aac4 <USBD_CtlReceiveStatus>
 8009d26:	e00d      	b.n	8009d44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d004      	beq.n	8009d3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d3c:	2180      	movs	r1, #128	; 0x80
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f001 fbd2 	bl	800b4e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d11d      	bne.n	8009d8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fe81 	bl	8009a56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d5c:	e015      	b.n	8009d8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00d      	beq.n	8009d86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d108      	bne.n	8009d86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	7afa      	ldrb	r2, [r7, #11]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	4798      	blx	r3
 8009d84:	e001      	b.n	8009d8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d86:	2302      	movs	r3, #2
 8009d88:	e000      	b.n	8009d8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d9c:	2340      	movs	r3, #64	; 0x40
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 fb5b 	bl	800b45e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2240      	movs	r2, #64	; 0x40
 8009db4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009db8:	2340      	movs	r3, #64	; 0x40
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2180      	movs	r1, #128	; 0x80
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f001 fb4d 	bl	800b45e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2240      	movs	r2, #64	; 0x40
 8009dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d009      	beq.n	8009e0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	6852      	ldr	r2, [r2, #4]
 8009e04:	b2d2      	uxtb	r2, r2
 8009e06:	4611      	mov	r1, r2
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
  }

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3708      	adds	r7, #8
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bc80      	pop	{r7}
 8009e5a:	4770      	bx	lr

08009e5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d105      	bne.n	8009e7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc80      	pop	{r7}
 8009e84:	4770      	bx	lr

08009e86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d10b      	bne.n	8009eb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e9e:	69db      	ldr	r3, [r3, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d005      	beq.n	8009ee2 <USBD_StdDevReq+0x26>
 8009ed6:	2b40      	cmp	r3, #64	; 0x40
 8009ed8:	d84f      	bhi.n	8009f7a <USBD_StdDevReq+0xbe>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <USBD_StdDevReq+0x36>
 8009ede:	2b20      	cmp	r3, #32
 8009ee0:	d14b      	bne.n	8009f7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	4798      	blx	r3
      break;
 8009ef0:	e048      	b.n	8009f84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b09      	cmp	r3, #9
 8009ef8:	d839      	bhi.n	8009f6e <USBD_StdDevReq+0xb2>
 8009efa:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <USBD_StdDevReq+0x44>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f51 	.word	0x08009f51
 8009f04:	08009f65 	.word	0x08009f65
 8009f08:	08009f6f 	.word	0x08009f6f
 8009f0c:	08009f5b 	.word	0x08009f5b
 8009f10:	08009f6f 	.word	0x08009f6f
 8009f14:	08009f33 	.word	0x08009f33
 8009f18:	08009f29 	.word	0x08009f29
 8009f1c:	08009f6f 	.word	0x08009f6f
 8009f20:	08009f47 	.word	0x08009f47
 8009f24:	08009f3d 	.word	0x08009f3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f9dc 	bl	800a2e8 <USBD_GetDescriptor>
          break;
 8009f30:	e022      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fb3f 	bl	800a5b8 <USBD_SetAddress>
          break;
 8009f3a:	e01d      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fb7e 	bl	800a640 <USBD_SetConfig>
          break;
 8009f44:	e018      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fc07 	bl	800a75c <USBD_GetConfig>
          break;
 8009f4e:	e013      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fc37 	bl	800a7c6 <USBD_GetStatus>
          break;
 8009f58:	e00e      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fc65 	bl	800a82c <USBD_SetFeature>
          break;
 8009f62:	e009      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fc74 	bl	800a854 <USBD_ClrFeature>
          break;
 8009f6c:	e004      	b.n	8009f78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fccc 	bl	800a90e <USBD_CtlError>
          break;
 8009f76:	bf00      	nop
      }
      break;
 8009f78:	e004      	b.n	8009f84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fcc6 	bl	800a90e <USBD_CtlError>
      break;
 8009f82:	bf00      	nop
  }

  return ret;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop

08009f90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fa6:	2b40      	cmp	r3, #64	; 0x40
 8009fa8:	d005      	beq.n	8009fb6 <USBD_StdItfReq+0x26>
 8009faa:	2b40      	cmp	r3, #64	; 0x40
 8009fac:	d82e      	bhi.n	800a00c <USBD_StdItfReq+0x7c>
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <USBD_StdItfReq+0x26>
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	d12a      	bne.n	800a00c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d81d      	bhi.n	8009ffe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	889b      	ldrh	r3, [r3, #4]
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d813      	bhi.n	8009ff4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	4798      	blx	r3
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88db      	ldrh	r3, [r3, #6]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d110      	bne.n	800a008 <USBD_StdItfReq+0x78>
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10d      	bne.n	800a008 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fd56 	bl	800aa9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ff2:	e009      	b.n	800a008 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ff4:	6839      	ldr	r1, [r7, #0]
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fc89 	bl	800a90e <USBD_CtlError>
          break;
 8009ffc:	e004      	b.n	800a008 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fc84 	bl	800a90e <USBD_CtlError>
          break;
 800a006:	e000      	b.n	800a00a <USBD_StdItfReq+0x7a>
          break;
 800a008:	bf00      	nop
      }
      break;
 800a00a:	e004      	b.n	800a016 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fc7d 	bl	800a90e <USBD_CtlError>
      break;
 800a014:	bf00      	nop
  }

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a03c:	2b40      	cmp	r3, #64	; 0x40
 800a03e:	d007      	beq.n	800a050 <USBD_StdEPReq+0x30>
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	f200 8146 	bhi.w	800a2d2 <USBD_StdEPReq+0x2b2>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00a      	beq.n	800a060 <USBD_StdEPReq+0x40>
 800a04a:	2b20      	cmp	r3, #32
 800a04c:	f040 8141 	bne.w	800a2d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	6839      	ldr	r1, [r7, #0]
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
      break;
 800a05e:	e13d      	b.n	800a2dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d10a      	bne.n	800a082 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	4798      	blx	r3
 800a07a:	4603      	mov	r3, r0
 800a07c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	e12d      	b.n	800a2de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d007      	beq.n	800a09a <USBD_StdEPReq+0x7a>
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	f300 811b 	bgt.w	800a2c6 <USBD_StdEPReq+0x2a6>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d072      	beq.n	800a17a <USBD_StdEPReq+0x15a>
 800a094:	2b01      	cmp	r3, #1
 800a096:	d03a      	beq.n	800a10e <USBD_StdEPReq+0xee>
 800a098:	e115      	b.n	800a2c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d002      	beq.n	800a0aa <USBD_StdEPReq+0x8a>
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d015      	beq.n	800a0d4 <USBD_StdEPReq+0xb4>
 800a0a8:	e02b      	b.n	800a102 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0aa:	7bbb      	ldrb	r3, [r7, #14]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00c      	beq.n	800a0ca <USBD_StdEPReq+0xaa>
 800a0b0:	7bbb      	ldrb	r3, [r7, #14]
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d009      	beq.n	800a0ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f001 fa14 	bl	800b4e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0c0:	2180      	movs	r1, #128	; 0x80
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fa10 	bl	800b4e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0c8:	e020      	b.n	800a10c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fc1e 	bl	800a90e <USBD_CtlError>
              break;
 800a0d2:	e01b      	b.n	800a10c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	885b      	ldrh	r3, [r3, #2]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10e      	bne.n	800a0fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00b      	beq.n	800a0fa <USBD_StdEPReq+0xda>
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	2b80      	cmp	r3, #128	; 0x80
 800a0e6:	d008      	beq.n	800a0fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	88db      	ldrh	r3, [r3, #6]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f9f7 	bl	800b4e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fccf 	bl	800aa9e <USBD_CtlSendStatus>

              break;
 800a100:	e004      	b.n	800a10c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fc02 	bl	800a90e <USBD_CtlError>
              break;
 800a10a:	bf00      	nop
          }
          break;
 800a10c:	e0e0      	b.n	800a2d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	2b02      	cmp	r3, #2
 800a116:	d002      	beq.n	800a11e <USBD_StdEPReq+0xfe>
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d015      	beq.n	800a148 <USBD_StdEPReq+0x128>
 800a11c:	e026      	b.n	800a16c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00c      	beq.n	800a13e <USBD_StdEPReq+0x11e>
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	2b80      	cmp	r3, #128	; 0x80
 800a128:	d009      	beq.n	800a13e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 f9da 	bl	800b4e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a134:	2180      	movs	r1, #128	; 0x80
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f001 f9d6 	bl	800b4e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a13c:	e01c      	b.n	800a178 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fbe4 	bl	800a90e <USBD_CtlError>
              break;
 800a146:	e017      	b.n	800a178 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	885b      	ldrh	r3, [r3, #2]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d112      	bne.n	800a176 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a150:	7bbb      	ldrb	r3, [r7, #14]
 800a152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f001 f9e1 	bl	800b526 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fc9a 	bl	800aa9e <USBD_CtlSendStatus>
              }
              break;
 800a16a:	e004      	b.n	800a176 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fbcd 	bl	800a90e <USBD_CtlError>
              break;
 800a174:	e000      	b.n	800a178 <USBD_StdEPReq+0x158>
              break;
 800a176:	bf00      	nop
          }
          break;
 800a178:	e0aa      	b.n	800a2d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a180:	2b02      	cmp	r3, #2
 800a182:	d002      	beq.n	800a18a <USBD_StdEPReq+0x16a>
 800a184:	2b03      	cmp	r3, #3
 800a186:	d032      	beq.n	800a1ee <USBD_StdEPReq+0x1ce>
 800a188:	e097      	b.n	800a2ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d007      	beq.n	800a1a0 <USBD_StdEPReq+0x180>
 800a190:	7bbb      	ldrb	r3, [r7, #14]
 800a192:	2b80      	cmp	r3, #128	; 0x80
 800a194:	d004      	beq.n	800a1a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fbb8 	bl	800a90e <USBD_CtlError>
                break;
 800a19e:	e091      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	da0b      	bge.n	800a1c0 <USBD_StdEPReq+0x1a0>
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	3310      	adds	r3, #16
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	3304      	adds	r3, #4
 800a1be:	e00b      	b.n	800a1d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fbfb 	bl	800a9e2 <USBD_CtlSendData>
              break;
 800a1ec:	e06a      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	da11      	bge.n	800a21a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	f003 020f 	and.w	r2, r3, #15
 800a1fc:	6879      	ldr	r1, [r7, #4]
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	440b      	add	r3, r1
 800a208:	3318      	adds	r3, #24
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d117      	bne.n	800a240 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fb7b 	bl	800a90e <USBD_CtlError>
                  break;
 800a218:	e054      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	f003 020f 	and.w	r2, r3, #15
 800a220:	6879      	ldr	r1, [r7, #4]
 800a222:	4613      	mov	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	440b      	add	r3, r1
 800a22c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d104      	bne.n	800a240 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fb68 	bl	800a90e <USBD_CtlError>
                  break;
 800a23e:	e041      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a244:	2b00      	cmp	r3, #0
 800a246:	da0b      	bge.n	800a260 <USBD_StdEPReq+0x240>
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a24e:	4613      	mov	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	3310      	adds	r3, #16
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4413      	add	r3, r2
 800a25c:	3304      	adds	r3, #4
 800a25e:	e00b      	b.n	800a278 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a260:	7bbb      	ldrb	r3, [r7, #14]
 800a262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a266:	4613      	mov	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	4413      	add	r3, r2
 800a276:	3304      	adds	r3, #4
 800a278:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <USBD_StdEPReq+0x266>
 800a280:	7bbb      	ldrb	r3, [r7, #14]
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d103      	bne.n	800a28e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	e00e      	b.n	800a2ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f001 f966 	bl	800b564 <USBD_LL_IsStallEP>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	e002      	b.n	800a2ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb95 	bl	800a9e2 <USBD_CtlSendData>
              break;
 800a2b8:	e004      	b.n	800a2c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fb26 	bl	800a90e <USBD_CtlError>
              break;
 800a2c2:	bf00      	nop
          }
          break;
 800a2c4:	e004      	b.n	800a2d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fb20 	bl	800a90e <USBD_CtlError>
          break;
 800a2ce:	bf00      	nop
      }
      break;
 800a2d0:	e004      	b.n	800a2dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fb1a 	bl	800a90e <USBD_CtlError>
      break;
 800a2da:	bf00      	nop
  }

  return ret;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	885b      	ldrh	r3, [r3, #2]
 800a302:	0a1b      	lsrs	r3, r3, #8
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	2b06      	cmp	r3, #6
 800a30a:	f200 8128 	bhi.w	800a55e <USBD_GetDescriptor+0x276>
 800a30e:	a201      	add	r2, pc, #4	; (adr r2, 800a314 <USBD_GetDescriptor+0x2c>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a331 	.word	0x0800a331
 800a318:	0800a349 	.word	0x0800a349
 800a31c:	0800a389 	.word	0x0800a389
 800a320:	0800a55f 	.word	0x0800a55f
 800a324:	0800a55f 	.word	0x0800a55f
 800a328:	0800a4ff 	.word	0x0800a4ff
 800a32c:	0800a52b 	.word	0x0800a52b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	7c12      	ldrb	r2, [r2, #16]
 800a33c:	f107 0108 	add.w	r1, r7, #8
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	60f8      	str	r0, [r7, #12]
      break;
 800a346:	e112      	b.n	800a56e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	7c1b      	ldrb	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10d      	bne.n	800a36c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a358:	f107 0208 	add.w	r2, r7, #8
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	3301      	adds	r3, #1
 800a366:	2202      	movs	r2, #2
 800a368:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a36a:	e100      	b.n	800a56e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a374:	f107 0208 	add.w	r2, r7, #8
 800a378:	4610      	mov	r0, r2
 800a37a:	4798      	blx	r3
 800a37c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	2202      	movs	r2, #2
 800a384:	701a      	strb	r2, [r3, #0]
      break;
 800a386:	e0f2      	b.n	800a56e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	885b      	ldrh	r3, [r3, #2]
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b05      	cmp	r3, #5
 800a390:	f200 80ac 	bhi.w	800a4ec <USBD_GetDescriptor+0x204>
 800a394:	a201      	add	r2, pc, #4	; (adr r2, 800a39c <USBD_GetDescriptor+0xb4>)
 800a396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39a:	bf00      	nop
 800a39c:	0800a3b5 	.word	0x0800a3b5
 800a3a0:	0800a3e9 	.word	0x0800a3e9
 800a3a4:	0800a41d 	.word	0x0800a41d
 800a3a8:	0800a451 	.word	0x0800a451
 800a3ac:	0800a485 	.word	0x0800a485
 800a3b0:	0800a4b9 	.word	0x0800a4b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	7c12      	ldrb	r2, [r2, #16]
 800a3cc:	f107 0108 	add.w	r1, r7, #8
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
 800a3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3d6:	e091      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa97 	bl	800a90e <USBD_CtlError>
            err++;
 800a3e0:	7afb      	ldrb	r3, [r7, #11]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3e6:	e089      	b.n	800a4fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	7c12      	ldrb	r2, [r2, #16]
 800a400:	f107 0108 	add.w	r1, r7, #8
 800a404:	4610      	mov	r0, r2
 800a406:	4798      	blx	r3
 800a408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a40a:	e077      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fa7d 	bl	800a90e <USBD_CtlError>
            err++;
 800a414:	7afb      	ldrb	r3, [r7, #11]
 800a416:	3301      	adds	r3, #1
 800a418:	72fb      	strb	r3, [r7, #11]
          break;
 800a41a:	e06f      	b.n	800a4fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	7c12      	ldrb	r2, [r2, #16]
 800a434:	f107 0108 	add.w	r1, r7, #8
 800a438:	4610      	mov	r0, r2
 800a43a:	4798      	blx	r3
 800a43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a43e:	e05d      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a440:	6839      	ldr	r1, [r7, #0]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 fa63 	bl	800a90e <USBD_CtlError>
            err++;
 800a448:	7afb      	ldrb	r3, [r7, #11]
 800a44a:	3301      	adds	r3, #1
 800a44c:	72fb      	strb	r3, [r7, #11]
          break;
 800a44e:	e055      	b.n	800a4fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00b      	beq.n	800a474 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	7c12      	ldrb	r2, [r2, #16]
 800a468:	f107 0108 	add.w	r1, r7, #8
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
 800a470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a472:	e043      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a474:	6839      	ldr	r1, [r7, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fa49 	bl	800a90e <USBD_CtlError>
            err++;
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	3301      	adds	r3, #1
 800a480:	72fb      	strb	r3, [r7, #11]
          break;
 800a482:	e03b      	b.n	800a4fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a48a:	695b      	ldr	r3, [r3, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	7c12      	ldrb	r2, [r2, #16]
 800a49c:	f107 0108 	add.w	r1, r7, #8
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	4798      	blx	r3
 800a4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4a6:	e029      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa2f 	bl	800a90e <USBD_CtlError>
            err++;
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4b6:	e021      	b.n	800a4fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	7c12      	ldrb	r2, [r2, #16]
 800a4d0:	f107 0108 	add.w	r1, r7, #8
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4da:	e00f      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fa15 	bl	800a90e <USBD_CtlError>
            err++;
 800a4e4:	7afb      	ldrb	r3, [r7, #11]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ea:	e007      	b.n	800a4fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa0d 	bl	800a90e <USBD_CtlError>
          err++;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a4fa:	e038      	b.n	800a56e <USBD_GetDescriptor+0x286>
 800a4fc:	e037      	b.n	800a56e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	7c1b      	ldrb	r3, [r3, #16]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50e:	f107 0208 	add.w	r2, r7, #8
 800a512:	4610      	mov	r0, r2
 800a514:	4798      	blx	r3
 800a516:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a518:	e029      	b.n	800a56e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f9f6 	bl	800a90e <USBD_CtlError>
        err++;
 800a522:	7afb      	ldrb	r3, [r7, #11]
 800a524:	3301      	adds	r3, #1
 800a526:	72fb      	strb	r3, [r7, #11]
      break;
 800a528:	e021      	b.n	800a56e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	7c1b      	ldrb	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10d      	bne.n	800a54e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53a:	f107 0208 	add.w	r2, r7, #8
 800a53e:	4610      	mov	r0, r2
 800a540:	4798      	blx	r3
 800a542:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3301      	adds	r3, #1
 800a548:	2207      	movs	r2, #7
 800a54a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a54c:	e00f      	b.n	800a56e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a54e:	6839      	ldr	r1, [r7, #0]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f9dc 	bl	800a90e <USBD_CtlError>
        err++;
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	3301      	adds	r3, #1
 800a55a:	72fb      	strb	r3, [r7, #11]
      break;
 800a55c:	e007      	b.n	800a56e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f9d4 	bl	800a90e <USBD_CtlError>
      err++;
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	3301      	adds	r3, #1
 800a56a:	72fb      	strb	r3, [r7, #11]
      break;
 800a56c:	bf00      	nop
  }

  if (err != 0U)
 800a56e:	7afb      	ldrb	r3, [r7, #11]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d11c      	bne.n	800a5ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a574:	893b      	ldrh	r3, [r7, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d011      	beq.n	800a59e <USBD_GetDescriptor+0x2b6>
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	88db      	ldrh	r3, [r3, #6]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00d      	beq.n	800a59e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	88da      	ldrh	r2, [r3, #6]
 800a586:	893b      	ldrh	r3, [r7, #8]
 800a588:	4293      	cmp	r3, r2
 800a58a:	bf28      	it	cs
 800a58c:	4613      	movcs	r3, r2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a592:	893b      	ldrh	r3, [r7, #8]
 800a594:	461a      	mov	r2, r3
 800a596:	68f9      	ldr	r1, [r7, #12]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fa22 	bl	800a9e2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	88db      	ldrh	r3, [r3, #6]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d104      	bne.n	800a5b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa79 	bl	800aa9e <USBD_CtlSendStatus>
 800a5ac:	e000      	b.n	800a5b0 <USBD_GetDescriptor+0x2c8>
    return;
 800a5ae:	bf00      	nop
    }
  }
}
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop

0800a5b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	889b      	ldrh	r3, [r3, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d130      	bne.n	800a62c <USBD_SetAddress+0x74>
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	88db      	ldrh	r3, [r3, #6]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d12c      	bne.n	800a62c <USBD_SetAddress+0x74>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	885b      	ldrh	r3, [r3, #2]
 800a5d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a5d8:	d828      	bhi.n	800a62c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	885b      	ldrh	r3, [r3, #2]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d104      	bne.n	800a5fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 f98b 	bl	800a90e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f8:	e01d      	b.n	800a636 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7bfa      	ldrb	r2, [r7, #15]
 800a5fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 ffd8 	bl	800b5bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fa46 	bl	800aa9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a620:	e009      	b.n	800a636 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62a:	e004      	b.n	800a636 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f96d 	bl	800a90e <USBD_CtlError>
  }
}
 800a634:	bf00      	nop
 800a636:	bf00      	nop
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	885b      	ldrh	r3, [r3, #2]
 800a64e:	b2da      	uxtb	r2, r3
 800a650:	4b41      	ldr	r3, [pc, #260]	; (800a758 <USBD_SetConfig+0x118>)
 800a652:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a654:	4b40      	ldr	r3, [pc, #256]	; (800a758 <USBD_SetConfig+0x118>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d904      	bls.n	800a666 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f955 	bl	800a90e <USBD_CtlError>
 800a664:	e075      	b.n	800a752 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d002      	beq.n	800a676 <USBD_SetConfig+0x36>
 800a670:	2b03      	cmp	r3, #3
 800a672:	d023      	beq.n	800a6bc <USBD_SetConfig+0x7c>
 800a674:	e062      	b.n	800a73c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a676:	4b38      	ldr	r3, [pc, #224]	; (800a758 <USBD_SetConfig+0x118>)
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01a      	beq.n	800a6b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a67e:	4b36      	ldr	r3, [pc, #216]	; (800a758 <USBD_SetConfig+0x118>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2203      	movs	r2, #3
 800a68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a690:	4b31      	ldr	r3, [pc, #196]	; (800a758 <USBD_SetConfig+0x118>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff f9e7 	bl	8009a6a <USBD_SetClassConfig>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d104      	bne.n	800a6ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 f932 	bl	800a90e <USBD_CtlError>
            return;
 800a6aa:	e052      	b.n	800a752 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f9f6 	bl	800aa9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6b2:	e04e      	b.n	800a752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f9f2 	bl	800aa9e <USBD_CtlSendStatus>
        break;
 800a6ba:	e04a      	b.n	800a752 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a6bc:	4b26      	ldr	r3, [pc, #152]	; (800a758 <USBD_SetConfig+0x118>)
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d112      	bne.n	800a6ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a6cc:	4b22      	ldr	r3, [pc, #136]	; (800a758 <USBD_SetConfig+0x118>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a6d6:	4b20      	ldr	r3, [pc, #128]	; (800a758 <USBD_SetConfig+0x118>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	4619      	mov	r1, r3
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff f9e3 	bl	8009aa8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f9db 	bl	800aa9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6e8:	e033      	b.n	800a752 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a6ea:	4b1b      	ldr	r3, [pc, #108]	; (800a758 <USBD_SetConfig+0x118>)
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d01d      	beq.n	800a734 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff f9d1 	bl	8009aa8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a706:	4b14      	ldr	r3, [pc, #80]	; (800a758 <USBD_SetConfig+0x118>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	461a      	mov	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a710:	4b11      	ldr	r3, [pc, #68]	; (800a758 <USBD_SetConfig+0x118>)
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff f9a7 	bl	8009a6a <USBD_SetClassConfig>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d104      	bne.n	800a72c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f8f2 	bl	800a90e <USBD_CtlError>
            return;
 800a72a:	e012      	b.n	800a752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f9b6 	bl	800aa9e <USBD_CtlSendStatus>
        break;
 800a732:	e00e      	b.n	800a752 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f9b2 	bl	800aa9e <USBD_CtlSendStatus>
        break;
 800a73a:	e00a      	b.n	800a752 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f8e5 	bl	800a90e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a744:	4b04      	ldr	r3, [pc, #16]	; (800a758 <USBD_SetConfig+0x118>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff f9ac 	bl	8009aa8 <USBD_ClrClassConfig>
        break;
 800a750:	bf00      	nop
    }
  }
}
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	2000028c 	.word	0x2000028c

0800a75c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	88db      	ldrh	r3, [r3, #6]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d004      	beq.n	800a778 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a76e:	6839      	ldr	r1, [r7, #0]
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f8cc 	bl	800a90e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a776:	e022      	b.n	800a7be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dc02      	bgt.n	800a788 <USBD_GetConfig+0x2c>
 800a782:	2b00      	cmp	r3, #0
 800a784:	dc03      	bgt.n	800a78e <USBD_GetConfig+0x32>
 800a786:	e015      	b.n	800a7b4 <USBD_GetConfig+0x58>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d00b      	beq.n	800a7a4 <USBD_GetConfig+0x48>
 800a78c:	e012      	b.n	800a7b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3308      	adds	r3, #8
 800a798:	2201      	movs	r2, #1
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 f920 	bl	800a9e2 <USBD_CtlSendData>
        break;
 800a7a2:	e00c      	b.n	800a7be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f918 	bl	800a9e2 <USBD_CtlSendData>
        break;
 800a7b2:	e004      	b.n	800a7be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a7b4:	6839      	ldr	r1, [r7, #0]
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f8a9 	bl	800a90e <USBD_CtlError>
        break;
 800a7bc:	bf00      	nop
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d81e      	bhi.n	800a81a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	88db      	ldrh	r3, [r3, #6]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d004      	beq.n	800a7ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f891 	bl	800a90e <USBD_CtlError>
        break;
 800a7ec:	e01a      	b.n	800a824 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d005      	beq.n	800a80a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68db      	ldr	r3, [r3, #12]
 800a802:	f043 0202 	orr.w	r2, r3, #2
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	330c      	adds	r3, #12
 800a80e:	2202      	movs	r2, #2
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f8e5 	bl	800a9e2 <USBD_CtlSendData>
      break;
 800a818:	e004      	b.n	800a824 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f876 	bl	800a90e <USBD_CtlError>
      break;
 800a822:	bf00      	nop
  }
}
 800a824:	bf00      	nop
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	885b      	ldrh	r3, [r3, #2]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d106      	bne.n	800a84c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2201      	movs	r2, #1
 800a842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f929 	bl	800aa9e <USBD_CtlSendStatus>
  }
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a864:	3b01      	subs	r3, #1
 800a866:	2b02      	cmp	r3, #2
 800a868:	d80b      	bhi.n	800a882 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	885b      	ldrh	r3, [r3, #2]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d10c      	bne.n	800a88c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f90f 	bl	800aa9e <USBD_CtlSendStatus>
      }
      break;
 800a880:	e004      	b.n	800a88c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f842 	bl	800a90e <USBD_CtlError>
      break;
 800a88a:	e000      	b.n	800a88e <USBD_ClrFeature+0x3a>
      break;
 800a88c:	bf00      	nop
  }
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781a      	ldrb	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	785a      	ldrb	r2, [r3, #1]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	3302      	adds	r3, #2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	3303      	adds	r3, #3
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	021b      	lsls	r3, r3, #8
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	3305      	adds	r3, #5
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	3306      	adds	r3, #6
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	3307      	adds	r3, #7
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	80da      	strh	r2, [r3, #6]

}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	4770      	bx	lr

0800a90e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a918:	2180      	movs	r1, #128	; 0x80
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fde4 	bl	800b4e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a920:	2100      	movs	r1, #0
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fde0 	bl	800b4e8 <USBD_LL_StallEP>
}
 800a928:	bf00      	nop
 800a92a:	3708      	adds	r7, #8
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d032      	beq.n	800a9ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f834 	bl	800a9b4 <USBD_GetLen>
 800a94c:	4603      	mov	r3, r0
 800a94e:	3301      	adds	r3, #1
 800a950:	b29b      	uxth	r3, r3
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	b29a      	uxth	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a95a:	7dfb      	ldrb	r3, [r7, #23]
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	75fa      	strb	r2, [r7, #23]
 800a960:	461a      	mov	r2, r3
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	4413      	add	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	7812      	ldrb	r2, [r2, #0]
 800a96a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	75fa      	strb	r2, [r7, #23]
 800a972:	461a      	mov	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	4413      	add	r3, r2
 800a978:	2203      	movs	r2, #3
 800a97a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a97c:	e012      	b.n	800a9a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	60fa      	str	r2, [r7, #12]
 800a984:	7dfa      	ldrb	r2, [r7, #23]
 800a986:	1c51      	adds	r1, r2, #1
 800a988:	75f9      	strb	r1, [r7, #23]
 800a98a:	4611      	mov	r1, r2
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	440a      	add	r2, r1
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a994:	7dfb      	ldrb	r3, [r7, #23]
 800a996:	1c5a      	adds	r2, r3, #1
 800a998:	75fa      	strb	r2, [r7, #23]
 800a99a:	461a      	mov	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	4413      	add	r3, r2
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e8      	bne.n	800a97e <USBD_GetString+0x4e>
    }
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a9c0:	e005      	b.n	800a9ce <USBD_GetLen+0x1a>
  {
    len++;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1f5      	bne.n	800a9c2 <USBD_GetLen+0xe>
  }

  return len;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr

0800a9e2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2202      	movs	r2, #2
 800a9f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a9f8:	88fa      	ldrh	r2, [r7, #6]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a9fe:	88fa      	ldrh	r2, [r7, #6]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa04:	88fb      	ldrh	r3, [r7, #6]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	2100      	movs	r1, #0
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 fdf5 	bl	800b5fa <USBD_LL_Transmit>

  return USBD_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	60f8      	str	r0, [r7, #12]
 800aa22:	60b9      	str	r1, [r7, #8]
 800aa24:	4613      	mov	r3, r2
 800aa26:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa28:	88fb      	ldrh	r3, [r7, #6]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f000 fde3 	bl	800b5fa <USBD_LL_Transmit>

  return USBD_OK;
 800aa34:	2300      	movs	r3, #0
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b084      	sub	sp, #16
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aa54:	88fa      	ldrh	r2, [r7, #6]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa64:	88fb      	ldrh	r3, [r7, #6]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f000 fde8 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	60b9      	str	r1, [r7, #8]
 800aa84:	4613      	mov	r3, r2
 800aa86:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa88:	88fb      	ldrh	r3, [r7, #6]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fdd6 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2204      	movs	r2, #4
 800aaaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aaae:	2300      	movs	r3, #0
 800aab0:	2200      	movs	r2, #0
 800aab2:	2100      	movs	r1, #0
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fda0 	bl	800b5fa <USBD_LL_Transmit>

  return USBD_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2205      	movs	r2, #5
 800aad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aad4:	2300      	movs	r3, #0
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fdb0 	bl	800b640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4912      	ldr	r1, [pc, #72]	; (800ab3c <MX_USB_DEVICE_Init+0x50>)
 800aaf4:	4812      	ldr	r0, [pc, #72]	; (800ab40 <MX_USB_DEVICE_Init+0x54>)
 800aaf6:	f7fe ff5e 	bl	80099b6 <USBD_Init>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab00:	f7f7 fe72 	bl	80027e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab04:	490f      	ldr	r1, [pc, #60]	; (800ab44 <MX_USB_DEVICE_Init+0x58>)
 800ab06:	480e      	ldr	r0, [pc, #56]	; (800ab40 <MX_USB_DEVICE_Init+0x54>)
 800ab08:	f7fe ff80 	bl	8009a0c <USBD_RegisterClass>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab12:	f7f7 fe69 	bl	80027e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab16:	490c      	ldr	r1, [pc, #48]	; (800ab48 <MX_USB_DEVICE_Init+0x5c>)
 800ab18:	4809      	ldr	r0, [pc, #36]	; (800ab40 <MX_USB_DEVICE_Init+0x54>)
 800ab1a:	f7fe feb1 	bl	8009880 <USBD_CDC_RegisterInterface>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab24:	f7f7 fe60 	bl	80027e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <MX_USB_DEVICE_Init+0x54>)
 800ab2a:	f7fe ff88 	bl	8009a3e <USBD_Start>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab34:	f7f7 fe58 	bl	80027e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab38:	bf00      	nop
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20000140 	.word	0x20000140
 800ab40:	20000600 	.word	0x20000600
 800ab44:	2000002c 	.word	0x2000002c
 800ab48:	20000130 	.word	0x20000130

0800ab4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab50:	2200      	movs	r2, #0
 800ab52:	4905      	ldr	r1, [pc, #20]	; (800ab68 <CDC_Init_FS+0x1c>)
 800ab54:	4805      	ldr	r0, [pc, #20]	; (800ab6c <CDC_Init_FS+0x20>)
 800ab56:	f7fe fea9 	bl	80098ac <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab5a:	4905      	ldr	r1, [pc, #20]	; (800ab70 <CDC_Init_FS+0x24>)
 800ab5c:	4803      	ldr	r0, [pc, #12]	; (800ab6c <CDC_Init_FS+0x20>)
 800ab5e:	f7fe febe 	bl	80098de <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800ab62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20000ac4 	.word	0x20000ac4
 800ab6c:	20000600 	.word	0x20000600
 800ab70:	200008c4 	.word	0x200008c4

0800ab74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800ab78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr
	...

0800ab84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	6039      	str	r1, [r7, #0]
 800ab8e:	71fb      	strb	r3, [r7, #7]
 800ab90:	4613      	mov	r3, r2
 800ab92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	2b23      	cmp	r3, #35	; 0x23
 800ab98:	d84a      	bhi.n	800ac30 <CDC_Control_FS+0xac>
 800ab9a:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <CDC_Control_FS+0x1c>)
 800ab9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba0:	0800ac31 	.word	0x0800ac31
 800aba4:	0800ac31 	.word	0x0800ac31
 800aba8:	0800ac31 	.word	0x0800ac31
 800abac:	0800ac31 	.word	0x0800ac31
 800abb0:	0800ac31 	.word	0x0800ac31
 800abb4:	0800ac31 	.word	0x0800ac31
 800abb8:	0800ac31 	.word	0x0800ac31
 800abbc:	0800ac31 	.word	0x0800ac31
 800abc0:	0800ac31 	.word	0x0800ac31
 800abc4:	0800ac31 	.word	0x0800ac31
 800abc8:	0800ac31 	.word	0x0800ac31
 800abcc:	0800ac31 	.word	0x0800ac31
 800abd0:	0800ac31 	.word	0x0800ac31
 800abd4:	0800ac31 	.word	0x0800ac31
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ac31 	.word	0x0800ac31
 800abe4:	0800ac31 	.word	0x0800ac31
 800abe8:	0800ac31 	.word	0x0800ac31
 800abec:	0800ac31 	.word	0x0800ac31
 800abf0:	0800ac31 	.word	0x0800ac31
 800abf4:	0800ac31 	.word	0x0800ac31
 800abf8:	0800ac31 	.word	0x0800ac31
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac31 	.word	0x0800ac31
 800ac04:	0800ac31 	.word	0x0800ac31
 800ac08:	0800ac31 	.word	0x0800ac31
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac31 	.word	0x0800ac31
 800ac14:	0800ac31 	.word	0x0800ac31
 800ac18:	0800ac31 	.word	0x0800ac31
 800ac1c:	0800ac31 	.word	0x0800ac31
 800ac20:	0800ac31 	.word	0x0800ac31
 800ac24:	0800ac31 	.word	0x0800ac31
 800ac28:	0800ac31 	.word	0x0800ac31
 800ac2c:	0800ac31 	.word	0x0800ac31
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800ac30:	bf00      	nop
	}

	return (USBD_OK);
 800ac32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bc80      	pop	{r7}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop

0800ac40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac40:	b590      	push	{r4, r7, lr}
 800ac42:	b089      	sub	sp, #36	; 0x24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	48b2      	ldr	r0, [pc, #712]	; (800af18 <CDC_Receive_FS+0x2d8>)
 800ac4e:	f7fe fe46 	bl	80098de <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac52:	48b1      	ldr	r0, [pc, #708]	; (800af18 <CDC_Receive_FS+0x2d8>)
 800ac54:	f7fe fe85 	bl	8009962 <USBD_CDC_ReceivePacket>

	if (*Len < 1)	return (USBD_OK);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <CDC_Receive_FS+0x24>
 800ac60:	2300      	movs	r3, #0
 800ac62:	e188      	b.n	800af76 <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------

	uint16_t tVal16;
	uint8_t cmd	= Buf[0];
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	77fb      	strb	r3, [r7, #31]

//--------------------------------------------------------------------------


	// Relay:1 - 12V	[0x01 - 0x01]
	if (cmd == 0x01) {
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d15b      	bne.n	800ad28 <CDC_Receive_FS+0xe8>
		if (*Len >= 2 && (Buf[1] == 0x01 || Buf[1] == 0x00)) {
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d94b      	bls.n	800ad10 <CDC_Receive_FS+0xd0>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d004      	beq.n	800ac8c <CDC_Receive_FS+0x4c>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3301      	adds	r3, #1
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d141      	bne.n	800ad10 <CDC_Receive_FS+0xd0>
			if (Buf[1] == 0x01) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d11b      	bne.n	800acce <CDC_Receive_FS+0x8e>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 800ac96:	2201      	movs	r2, #1
 800ac98:	2104      	movs	r1, #4
 800ac9a:	48a0      	ldr	r0, [pc, #640]	; (800af1c <CDC_Receive_FS+0x2dc>)
 800ac9c:	f7f9 fa15 	bl	80040ca <HAL_GPIO_WritePin>
				RelayState = 0x01;
 800aca0:	4b9f      	ldr	r3, [pc, #636]	; (800af20 <CDC_Receive_FS+0x2e0>)
 800aca2:	2201      	movs	r2, #1
 800aca4:	701a      	strb	r2, [r3, #0]
				printf("RelayState:12V - %d \n", RelayState);
 800aca6:	4b9e      	ldr	r3, [pc, #632]	; (800af20 <CDC_Receive_FS+0x2e0>)
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	4619      	mov	r1, r3
 800acac:	489d      	ldr	r0, [pc, #628]	; (800af24 <CDC_Receive_FS+0x2e4>)
 800acae:	f000 fd89 	bl	800b7c4 <iprintf>
				SetAllDAC();
 800acb2:	f7f5 fc15 	bl	80004e0 <SetAllDAC>

				UserTxBufferFS[0]	= cmd;
 800acb6:	4a9c      	ldr	r2, [pc, #624]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800acb8:	7ffb      	ldrb	r3, [r7, #31]
 800acba:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1]	= 0x00;	// успешно
 800acbc:	4b9a      	ldr	r3, [pc, #616]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800acc2:	2102      	movs	r1, #2
 800acc4:	4898      	ldr	r0, [pc, #608]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800acc6:	f000 f95f 	bl	800af88 <CDC_Transmit_FS>
				return (USBD_OK);
 800acca:	2300      	movs	r3, #0
 800accc:	e153      	b.n	800af76 <CDC_Receive_FS+0x336>

			} else if (Buf[1] == 0x00) {
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3301      	adds	r3, #1
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11b      	bne.n	800ad10 <CDC_Receive_FS+0xd0>
				HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_RESET);
 800acd8:	2200      	movs	r2, #0
 800acda:	2104      	movs	r1, #4
 800acdc:	488f      	ldr	r0, [pc, #572]	; (800af1c <CDC_Receive_FS+0x2dc>)
 800acde:	f7f9 f9f4 	bl	80040ca <HAL_GPIO_WritePin>
				RelayState = 0x00;
 800ace2:	4b8f      	ldr	r3, [pc, #572]	; (800af20 <CDC_Receive_FS+0x2e0>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]
				printf("RelayState:27V - %d \n", RelayState);
 800ace8:	4b8d      	ldr	r3, [pc, #564]	; (800af20 <CDC_Receive_FS+0x2e0>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	4619      	mov	r1, r3
 800acee:	488f      	ldr	r0, [pc, #572]	; (800af2c <CDC_Receive_FS+0x2ec>)
 800acf0:	f000 fd68 	bl	800b7c4 <iprintf>
				SetAllDAC();
 800acf4:	f7f5 fbf4 	bl	80004e0 <SetAllDAC>

				UserTxBufferFS[0] = cmd;
 800acf8:	4a8b      	ldr	r2, [pc, #556]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800acfa:	7ffb      	ldrb	r3, [r7, #31]
 800acfc:	7013      	strb	r3, [r2, #0]
				UserTxBufferFS[1] = 0x00;	// успешно
 800acfe:	4b8a      	ldr	r3, [pc, #552]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	705a      	strb	r2, [r3, #1]
				CDC_Transmit_FS(UserTxBufferFS, 2);
 800ad04:	2102      	movs	r1, #2
 800ad06:	4888      	ldr	r0, [pc, #544]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad08:	f000 f93e 	bl	800af88 <CDC_Transmit_FS>
				return (USBD_OK);
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e132      	b.n	800af76 <CDC_Receive_FS+0x336>
			}
		}

		UserTxBufferFS[0] = cmd;
 800ad10:	4a85      	ldr	r2, [pc, #532]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad12:	7ffb      	ldrb	r3, [r7, #31]
 800ad14:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;	// ошибка
 800ad16:	4b84      	ldr	r3, [pc, #528]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad18:	2201      	movs	r2, #1
 800ad1a:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800ad1c:	2102      	movs	r1, #2
 800ad1e:	4882      	ldr	r0, [pc, #520]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad20:	f000 f932 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ad24:	2300      	movs	r3, #0
 800ad26:	e126      	b.n	800af76 <CDC_Receive_FS+0x336>

//--------------------------------------------------------------------------
	// DA:4095
	} else if (cmd == 0x02) {
 800ad28:	7ffb      	ldrb	r3, [r7, #31]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d12d      	bne.n	800ad8a <CDC_Receive_FS+0x14a>
		if (*Len >= 3) {
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d91d      	bls.n	800ad72 <CDC_Receive_FS+0x132>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800ad36:	f7f5 fcd7 	bl	80006e8 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800ad3a:	f7f5 fcf9 	bl	8000730 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3301      	adds	r3, #1
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	83bb      	strh	r3, [r7, #28]
			SetDacA(tVal16);
 800ad48:	8bbb      	ldrh	r3, [r7, #28]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7f5 fb9c 	bl	8000488 <SetDacA>

			printf("DacA: %d\n", tVal16);
 800ad50:	8bbb      	ldrh	r3, [r7, #28]
 800ad52:	4619      	mov	r1, r3
 800ad54:	4876      	ldr	r0, [pc, #472]	; (800af30 <CDC_Receive_FS+0x2f0>)
 800ad56:	f000 fd35 	bl	800b7c4 <iprintf>
			UserTxBufferFS[0] = cmd;
 800ad5a:	4a73      	ldr	r2, [pc, #460]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad5c:	7ffb      	ldrb	r3, [r7, #31]
 800ad5e:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800ad60:	4b71      	ldr	r3, [pc, #452]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	705a      	strb	r2, [r3, #1]

			CDC_Transmit_FS(UserTxBufferFS, 2);
 800ad66:	2102      	movs	r1, #2
 800ad68:	486f      	ldr	r0, [pc, #444]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad6a:	f000 f90d 	bl	800af88 <CDC_Transmit_FS>
			return (USBD_OK);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e101      	b.n	800af76 <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 800ad72:	4a6d      	ldr	r2, [pc, #436]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad74:	7ffb      	ldrb	r3, [r7, #31]
 800ad76:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800ad78:	4b6b      	ldr	r3, [pc, #428]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800ad7e:	2102      	movs	r1, #2
 800ad80:	4869      	ldr	r0, [pc, #420]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ad82:	f000 f901 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ad86:	2300      	movs	r3, #0
 800ad88:	e0f5      	b.n	800af76 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// DB:4095
	} else if (cmd == 0x03) {
 800ad8a:	7ffb      	ldrb	r3, [r7, #31]
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d12d      	bne.n	800adec <CDC_Receive_FS+0x1ac>
		if (*Len >= 3) {
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d91d      	bls.n	800add4 <CDC_Receive_FS+0x194>
			resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 800ad98:	f7f5 fca6 	bl	80006e8 <resValTIM3_PB4>
			resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 800ad9c:	f7f5 fcc8 	bl	8000730 <resValTIM4_PB6>
			memcpy(&tVal16, Buf + 1, sizeof(tVal16));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3301      	adds	r3, #1
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	83bb      	strh	r3, [r7, #28]
			SetDacB(tVal16);
 800adaa:	8bbb      	ldrh	r3, [r7, #28]
 800adac:	4618      	mov	r0, r3
 800adae:	f7f5 fb81 	bl	80004b4 <SetDacB>

			UserTxBufferFS[0] = cmd;
 800adb2:	4a5d      	ldr	r2, [pc, #372]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800adb4:	7ffb      	ldrb	r3, [r7, #31]
 800adb6:	7013      	strb	r3, [r2, #0]
			UserTxBufferFS[1] = 0x00;	// успешно
 800adb8:	4b5b      	ldr	r3, [pc, #364]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800adba:	2200      	movs	r2, #0
 800adbc:	705a      	strb	r2, [r3, #1]

			printf("DacB: %d \n",tVal16);
 800adbe:	8bbb      	ldrh	r3, [r7, #28]
 800adc0:	4619      	mov	r1, r3
 800adc2:	485c      	ldr	r0, [pc, #368]	; (800af34 <CDC_Receive_FS+0x2f4>)
 800adc4:	f000 fcfe 	bl	800b7c4 <iprintf>


			CDC_Transmit_FS(UserTxBufferFS, 2);
 800adc8:	2102      	movs	r1, #2
 800adca:	4857      	ldr	r0, [pc, #348]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800adcc:	f000 f8dc 	bl	800af88 <CDC_Transmit_FS>
			return (USBD_OK);
 800add0:	2300      	movs	r3, #0
 800add2:	e0d0      	b.n	800af76 <CDC_Receive_FS+0x336>
		}

		UserTxBufferFS[0] = cmd;
 800add4:	4a54      	ldr	r2, [pc, #336]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800add6:	7ffb      	ldrb	r3, [r7, #31]
 800add8:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = 0x01;		// ошибка
 800adda:	4b53      	ldr	r3, [pc, #332]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800addc:	2201      	movs	r2, #1
 800adde:	705a      	strb	r2, [r3, #1]
		CDC_Transmit_FS(UserTxBufferFS, 2);
 800ade0:	2102      	movs	r1, #2
 800ade2:	4851      	ldr	r0, [pc, #324]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ade4:	f000 f8d0 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ade8:	2300      	movs	r3, #0
 800adea:	e0c4      	b.n	800af76 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// ADC?
	} else if (cmd == 0x04) {
 800adec:	7ffb      	ldrb	r3, [r7, #31]
 800adee:	2b04      	cmp	r3, #4
 800adf0:	d10f      	bne.n	800ae12 <CDC_Receive_FS+0x1d2>
		tVal16 = GetADC();
 800adf2:	f7f5 fd13 	bl	800081c <GetADC>
 800adf6:	4603      	mov	r3, r0
 800adf8:	83bb      	strh	r3, [r7, #28]
		UserTxBufferFS[0] = cmd;
 800adfa:	4a4b      	ldr	r2, [pc, #300]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800adfc:	7ffb      	ldrb	r3, [r7, #31]
 800adfe:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS + 1, &tVal16, sizeof(tVal16));
 800ae00:	4a4d      	ldr	r2, [pc, #308]	; (800af38 <CDC_Receive_FS+0x2f8>)
 800ae02:	8bbb      	ldrh	r3, [r7, #28]
 800ae04:	8013      	strh	r3, [r2, #0]
		CDC_Transmit_FS(UserTxBufferFS, 3);
 800ae06:	2103      	movs	r1, #3
 800ae08:	4847      	ldr	r0, [pc, #284]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae0a:	f000 f8bd 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e0b1      	b.n	800af76 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Relay?DA?DB?
	} else if (cmd == 0x05) {
 800ae12:	7ffb      	ldrb	r3, [r7, #31]
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d11a      	bne.n	800ae4e <CDC_Receive_FS+0x20e>
		UserTxBufferFS[0] = cmd;
 800ae18:	4a43      	ldr	r2, [pc, #268]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae1a:	7ffb      	ldrb	r3, [r7, #31]
 800ae1c:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = RelayState;
 800ae1e:	4b40      	ldr	r3, [pc, #256]	; (800af20 <CDC_Receive_FS+0x2e0>)
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	4b41      	ldr	r3, [pc, #260]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae24:	705a      	strb	r2, [r3, #1]

		tVal16 = GetDacA();
 800ae26:	f7f5 fb6d 	bl	8000504 <GetDacA>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 2, &tVal16, sizeof(tVal16));
 800ae2e:	4a43      	ldr	r2, [pc, #268]	; (800af3c <CDC_Receive_FS+0x2fc>)
 800ae30:	8bbb      	ldrh	r3, [r7, #28]
 800ae32:	8013      	strh	r3, [r2, #0]

		tVal16 = GetDacB();
 800ae34:	f7f5 fb70 	bl	8000518 <GetDacB>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	83bb      	strh	r3, [r7, #28]
		memcpy(UserTxBufferFS + 4, &tVal16, sizeof(tVal16));
 800ae3c:	4a40      	ldr	r2, [pc, #256]	; (800af40 <CDC_Receive_FS+0x300>)
 800ae3e:	8bbb      	ldrh	r3, [r7, #28]
 800ae40:	8013      	strh	r3, [r2, #0]

		CDC_Transmit_FS(UserTxBufferFS, 6);
 800ae42:	2106      	movs	r1, #6
 800ae44:	4838      	ldr	r0, [pc, #224]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae46:	f000 f89f 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e093      	b.n	800af76 <CDC_Receive_FS+0x336>
//--------------------------------------------------------------------------
	// Btn?
	} else if (cmd == 0x06) {
 800ae4e:	7ffb      	ldrb	r3, [r7, #31]
 800ae50:	2b06      	cmp	r3, #6
 800ae52:	d11a      	bne.n	800ae8a <CDC_Receive_FS+0x24a>
		UserTxBufferFS[0] = cmd;
 800ae54:	4a34      	ldr	r2, [pc, #208]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae56:	7ffb      	ldrb	r3, [r7, #31]
 800ae58:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = GetBtnRunState();
 800ae5a:	f7f5 fb67 	bl	800052c <GetBtnRunState>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	461a      	mov	r2, r3
 800ae62:	4b31      	ldr	r3, [pc, #196]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae64:	705a      	strb	r2, [r3, #1]
		UserTxBufferFS[2] = GetBtnUpState();
 800ae66:	f7f5 fba3 	bl	80005b0 <GetBtnUpState>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae70:	709a      	strb	r2, [r3, #2]
		UserTxBufferFS[3] = GetBtnDownState();
 800ae72:	f7f5 fbdf 	bl	8000634 <GetBtnDownState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae7c:	70da      	strb	r2, [r3, #3]

		CDC_Transmit_FS(UserTxBufferFS, 4);
 800ae7e:	2104      	movs	r1, #4
 800ae80:	4829      	ldr	r0, [pc, #164]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae82:	f000 f881 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800ae86:	2300      	movs	r3, #0
 800ae88:	e075      	b.n	800af76 <CDC_Receive_FS+0x336>
	// ID? 
	} else if (cmd == 0x07) {
 800ae8a:	7ffb      	ldrb	r3, [r7, #31]
 800ae8c:	2b07      	cmp	r3, #7
 800ae8e:	d12d      	bne.n	800aeec <CDC_Receive_FS+0x2ac>
		char str[] = "prb_v0.3";
 800ae90:	4a2c      	ldr	r2, [pc, #176]	; (800af44 <CDC_Receive_FS+0x304>)
 800ae92:	f107 0310 	add.w	r3, r7, #16
 800ae96:	ca07      	ldmia	r2, {r0, r1, r2}
 800ae98:	c303      	stmia	r3!, {r0, r1}
 800ae9a:	701a      	strb	r2, [r3, #0]

		UserTxBufferFS[0] = cmd;
 800ae9c:	4a22      	ldr	r2, [pc, #136]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800ae9e:	7ffb      	ldrb	r3, [r7, #31]
 800aea0:	7013      	strb	r3, [r2, #0]
		UserTxBufferFS[1] = strlen(str);
 800aea2:	f107 0310 	add.w	r3, r7, #16
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7f5 f950 	bl	800014c <strlen>
 800aeac:	4603      	mov	r3, r0
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800aeb2:	705a      	strb	r2, [r3, #1]
		memcpy(UserTxBufferFS + 2, str, strlen(str));
 800aeb4:	4c21      	ldr	r4, [pc, #132]	; (800af3c <CDC_Receive_FS+0x2fc>)
 800aeb6:	f107 0310 	add.w	r3, r7, #16
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f5 f946 	bl	800014c <strlen>
 800aec0:	4602      	mov	r2, r0
 800aec2:	f107 0310 	add.w	r3, r7, #16
 800aec6:	4619      	mov	r1, r3
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fc65 	bl	800b798 <memcpy>
		CDC_Transmit_FS(UserTxBufferFS, strlen(str) + 2);
 800aece:	f107 0310 	add.w	r3, r7, #16
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f5 f93a 	bl	800014c <strlen>
 800aed8:	4603      	mov	r3, r0
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3302      	adds	r3, #2
 800aede:	b29b      	uxth	r3, r3
 800aee0:	4619      	mov	r1, r3
 800aee2:	4811      	ldr	r0, [pc, #68]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800aee4:	f000 f850 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800aee8:	2300      	movs	r3, #0
 800aeea:	e044      	b.n	800af76 <CDC_Receive_FS+0x336>
	 * до того момента пока на выходах компараторов не появится 1.
	 * Т.е. каждый раз когда мы меняем входной код - мы запрашиваем контроллер щупа о состоянии выходов компаратора.
	 */

	// inHL?
	} else if (cmd == 0x08) {
 800aeec:	7ffb      	ldrb	r3, [r7, #31]
 800aeee:	2b08      	cmp	r3, #8
 800aef0:	d12a      	bne.n	800af48 <CDC_Receive_FS+0x308>
		EnableTIM3_PB4();
 800aef2:	f7f5 fbe1 	bl	80006b8 <EnableTIM3_PB4>
		uint16_t temp = GetTIM3();
 800aef6:	f7f5 fbeb 	bl	80006d0 <GetTIM3>
 800aefa:	4603      	mov	r3, r0
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	81fb      	strh	r3, [r7, #14]
		UserTxBufferFS[0] = cmd;
 800af00:	4a09      	ldr	r2, [pc, #36]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800af02:	7ffb      	ldrb	r3, [r7, #31]
 800af04:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800af06:	4a0c      	ldr	r2, [pc, #48]	; (800af38 <CDC_Receive_FS+0x2f8>)
 800af08:	89fb      	ldrh	r3, [r7, #14]
 800af0a:	8013      	strh	r3, [r2, #0]
//	    for(int i = 0;i >= 10; i++ ){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(250);
//		}

		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800af0c:	2103      	movs	r1, #3
 800af0e:	4806      	ldr	r0, [pc, #24]	; (800af28 <CDC_Receive_FS+0x2e8>)
 800af10:	f000 f83a 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800af14:	2300      	movs	r3, #0
 800af16:	e02e      	b.n	800af76 <CDC_Receive_FS+0x336>
 800af18:	20000600 	.word	0x20000600
 800af1c:	40010800 	.word	0x40010800
 800af20:	2000028d 	.word	0x2000028d
 800af24:	0800cac8 	.word	0x0800cac8
 800af28:	20000ac4 	.word	0x20000ac4
 800af2c:	0800cae0 	.word	0x0800cae0
 800af30:	0800caf8 	.word	0x0800caf8
 800af34:	0800cb04 	.word	0x0800cb04
 800af38:	20000ac5 	.word	0x20000ac5
 800af3c:	20000ac6 	.word	0x20000ac6
 800af40:	20000ac8 	.word	0x20000ac8
 800af44:	0800cb10 	.word	0x0800cb10

	// inLL?
	} else if (cmd == 0x09) {
 800af48:	7ffb      	ldrb	r3, [r7, #31]
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d112      	bne.n	800af74 <CDC_Receive_FS+0x334>
		EnableTIM4_PB6();
 800af4e:	f7f5 fbd7 	bl	8000700 <EnableTIM4_PB6>
		uint16_t temp = GetTIM4();
 800af52:	f7f5 fbe1 	bl	8000718 <GetTIM4>
 800af56:	4603      	mov	r3, r0
 800af58:	b29b      	uxth	r3, r3
 800af5a:	81bb      	strh	r3, [r7, #12]
		UserTxBufferFS[0] = cmd;
 800af5c:	4a08      	ldr	r2, [pc, #32]	; (800af80 <CDC_Receive_FS+0x340>)
 800af5e:	7ffb      	ldrb	r3, [r7, #31]
 800af60:	7013      	strb	r3, [r2, #0]
		memcpy(UserTxBufferFS+1,&temp,sizeof(uint16_t));
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <CDC_Receive_FS+0x344>)
 800af64:	89bb      	ldrh	r3, [r7, #12]
 800af66:	8013      	strh	r3, [r2, #0]



		CDC_Transmit_FS(UserTxBufferFS, 1 + sizeof(uint16_t));
 800af68:	2103      	movs	r1, #3
 800af6a:	4805      	ldr	r0, [pc, #20]	; (800af80 <CDC_Receive_FS+0x340>)
 800af6c:	f000 f80c 	bl	800af88 <CDC_Transmit_FS>
		return (USBD_OK);
 800af70:	2300      	movs	r3, #0
 800af72:	e000      	b.n	800af76 <CDC_Receive_FS+0x336>
	}

//--------------------------------------------------------------------------
	return (USBD_OK);
 800af74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800af76:	4618      	mov	r0, r3
 800af78:	3724      	adds	r7, #36	; 0x24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd90      	pop	{r4, r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000ac4 	.word	0x20000ac4
 800af84:	20000ac5 	.word	0x20000ac5

0800af88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800af98:	4b0d      	ldr	r3, [pc, #52]	; (800afd0 <CDC_Transmit_FS+0x48>)
 800af9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af9e:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0) {
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800afaa:	2301      	movs	r3, #1
 800afac:	e00b      	b.n	800afc6 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	461a      	mov	r2, r3
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	4806      	ldr	r0, [pc, #24]	; (800afd0 <CDC_Transmit_FS+0x48>)
 800afb6:	f7fe fc79 	bl	80098ac <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800afba:	4805      	ldr	r0, [pc, #20]	; (800afd0 <CDC_Transmit_FS+0x48>)
 800afbc:	f7fe fca2 	bl	8009904 <USBD_CDC_TransmitPacket>
 800afc0:	4603      	mov	r3, r0
 800afc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	20000600 	.word	0x20000600

0800afd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	2212      	movs	r2, #18
 800afe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800afe6:	4b03      	ldr	r3, [pc, #12]	; (800aff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	bc80      	pop	{r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	2000015c 	.word	0x2000015c

0800aff8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2204      	movs	r2, #4
 800b008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b00a:	4b03      	ldr	r3, [pc, #12]	; (800b018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000170 	.word	0x20000170

0800b01c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	6039      	str	r1, [r7, #0]
 800b026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	4907      	ldr	r1, [pc, #28]	; (800b050 <USBD_FS_ProductStrDescriptor+0x34>)
 800b032:	4808      	ldr	r0, [pc, #32]	; (800b054 <USBD_FS_ProductStrDescriptor+0x38>)
 800b034:	f7ff fc7c 	bl	800a930 <USBD_GetString>
 800b038:	e004      	b.n	800b044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	4904      	ldr	r1, [pc, #16]	; (800b050 <USBD_FS_ProductStrDescriptor+0x34>)
 800b03e:	4805      	ldr	r0, [pc, #20]	; (800b054 <USBD_FS_ProductStrDescriptor+0x38>)
 800b040:	f7ff fc76 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b044:	4b02      	ldr	r3, [pc, #8]	; (800b050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000cc4 	.word	0x20000cc4
 800b054:	0800cb1c 	.word	0x0800cb1c

0800b058 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	4904      	ldr	r1, [pc, #16]	; (800b078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b068:	4804      	ldr	r0, [pc, #16]	; (800b07c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b06a:	f7ff fc61 	bl	800a930 <USBD_GetString>
  return USBD_StrDesc;
 800b06e:	4b02      	ldr	r3, [pc, #8]	; (800b078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	20000cc4 	.word	0x20000cc4
 800b07c:	0800cb34 	.word	0x0800cb34

0800b080 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	6039      	str	r1, [r7, #0]
 800b08a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	221a      	movs	r2, #26
 800b090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b092:	f000 f843 	bl	800b11c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b096:	4b02      	ldr	r3, [pc, #8]	; (800b0a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20000174 	.word	0x20000174

0800b0a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b082      	sub	sp, #8
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	6039      	str	r1, [r7, #0]
 800b0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b0b0:	79fb      	ldrb	r3, [r7, #7]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d105      	bne.n	800b0c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0b6:	683a      	ldr	r2, [r7, #0]
 800b0b8:	4907      	ldr	r1, [pc, #28]	; (800b0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0ba:	4808      	ldr	r0, [pc, #32]	; (800b0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0bc:	f7ff fc38 	bl	800a930 <USBD_GetString>
 800b0c0:	e004      	b.n	800b0cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	4904      	ldr	r1, [pc, #16]	; (800b0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b0c6:	4805      	ldr	r0, [pc, #20]	; (800b0dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b0c8:	f7ff fc32 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0cc:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20000cc4 	.word	0x20000cc4
 800b0dc:	0800cb48 	.word	0x0800cb48

0800b0e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0ec:	79fb      	ldrb	r3, [r7, #7]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d105      	bne.n	800b0fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	4907      	ldr	r1, [pc, #28]	; (800b114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b0f6:	4808      	ldr	r0, [pc, #32]	; (800b118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b0f8:	f7ff fc1a 	bl	800a930 <USBD_GetString>
 800b0fc:	e004      	b.n	800b108 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	4904      	ldr	r1, [pc, #16]	; (800b114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b102:	4805      	ldr	r0, [pc, #20]	; (800b118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b104:	f7ff fc14 	bl	800a930 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b108:	4b02      	ldr	r3, [pc, #8]	; (800b114 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20000cc4 	.word	0x20000cc4
 800b118:	0800cb54 	.word	0x0800cb54

0800b11c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b122:	4b0f      	ldr	r3, [pc, #60]	; (800b160 <Get_SerialNum+0x44>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b128:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <Get_SerialNum+0x48>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b12e:	4b0e      	ldr	r3, [pc, #56]	; (800b168 <Get_SerialNum+0x4c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4413      	add	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b142:	2208      	movs	r2, #8
 800b144:	4909      	ldr	r1, [pc, #36]	; (800b16c <Get_SerialNum+0x50>)
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 f814 	bl	800b174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b14c:	2204      	movs	r2, #4
 800b14e:	4908      	ldr	r1, [pc, #32]	; (800b170 <Get_SerialNum+0x54>)
 800b150:	68b8      	ldr	r0, [r7, #8]
 800b152:	f000 f80f 	bl	800b174 <IntToUnicode>
  }
}
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	1ffff7e8 	.word	0x1ffff7e8
 800b164:	1ffff7ec 	.word	0x1ffff7ec
 800b168:	1ffff7f0 	.word	0x1ffff7f0
 800b16c:	20000176 	.word	0x20000176
 800b170:	20000186 	.word	0x20000186

0800b174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b186:	2300      	movs	r3, #0
 800b188:	75fb      	strb	r3, [r7, #23]
 800b18a:	e027      	b.n	800b1dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	0f1b      	lsrs	r3, r3, #28
 800b190:	2b09      	cmp	r3, #9
 800b192:	d80b      	bhi.n	800b1ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	0f1b      	lsrs	r3, r3, #28
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3230      	adds	r2, #48	; 0x30
 800b1a6:	b2d2      	uxtb	r2, r2
 800b1a8:	701a      	strb	r2, [r3, #0]
 800b1aa:	e00a      	b.n	800b1c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	0f1b      	lsrs	r3, r3, #28
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	005b      	lsls	r3, r3, #1
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	440b      	add	r3, r1
 800b1bc:	3237      	adds	r2, #55	; 0x37
 800b1be:	b2d2      	uxtb	r2, r2
 800b1c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	011b      	lsls	r3, r3, #4
 800b1c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	75fb      	strb	r3, [r7, #23]
 800b1dc:	7dfa      	ldrb	r2, [r7, #23]
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d3d3      	bcc.n	800b18c <IntToUnicode+0x18>
  }
}
 800b1e4:	bf00      	nop
 800b1e6:	bf00      	nop
 800b1e8:	371c      	adds	r7, #28
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bc80      	pop	{r7}
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a0d      	ldr	r2, [pc, #52]	; (800b234 <HAL_PCD_MspInit+0x44>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d113      	bne.n	800b22a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b202:	4b0d      	ldr	r3, [pc, #52]	; (800b238 <HAL_PCD_MspInit+0x48>)
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	4a0c      	ldr	r2, [pc, #48]	; (800b238 <HAL_PCD_MspInit+0x48>)
 800b208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b20c:	61d3      	str	r3, [r2, #28]
 800b20e:	4b0a      	ldr	r3, [pc, #40]	; (800b238 <HAL_PCD_MspInit+0x48>)
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	2014      	movs	r0, #20
 800b220:	f7f8 fb65 	bl	80038ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b224:	2014      	movs	r0, #20
 800b226:	f7f8 fb7e 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	40005c00 	.word	0x40005c00
 800b238:	40021000 	.word	0x40021000

0800b23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b250:	4619      	mov	r1, r3
 800b252:	4610      	mov	r0, r2
 800b254:	f7fe fc3b 	bl	8009ace <USBD_LL_SetupStage>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	460b      	mov	r3, r1
 800b26a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b272:	78fa      	ldrb	r2, [r7, #3]
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	00db      	lsls	r3, r3, #3
 800b27e:	440b      	add	r3, r1
 800b280:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	4619      	mov	r1, r3
 800b28a:	f7fe fc6d 	bl	8009b68 <USBD_LL_DataOutStage>
}
 800b28e:	bf00      	nop
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b082      	sub	sp, #8
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b2a8:	78fa      	ldrb	r2, [r7, #3]
 800b2aa:	6879      	ldr	r1, [r7, #4]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	00db      	lsls	r3, r3, #3
 800b2b4:	440b      	add	r3, r1
 800b2b6:	333c      	adds	r3, #60	; 0x3c
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	f7fe fcc4 	bl	8009c4a <USBD_LL_DataInStage>
}
 800b2c2:	bf00      	nop
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe fdd4 	bl	8009e86 <USBD_LL_SOF>
}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d001      	beq.n	800b2fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2fa:	f7f7 fa75 	bl	80027e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b304:	7bfa      	ldrb	r2, [r7, #15]
 800b306:	4611      	mov	r1, r2
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fe fd84 	bl	8009e16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b314:	4618      	mov	r0, r3
 800b316:	f7fe fd3d 	bl	8009d94 <USBD_LL_Reset>
}
 800b31a:	bf00      	nop
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fd7e 	bl	8009e34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b340:	4b04      	ldr	r3, [pc, #16]	; (800b354 <HAL_PCD_SuspendCallback+0x30>)
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	4a03      	ldr	r2, [pc, #12]	; (800b354 <HAL_PCD_SuspendCallback+0x30>)
 800b346:	f043 0306 	orr.w	r3, r3, #6
 800b34a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b34c:	bf00      	nop
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	e000ed00 	.word	0xe000ed00

0800b358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe fd78 	bl	8009e5c <USBD_LL_Resume>
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b37c:	4a28      	ldr	r2, [pc, #160]	; (800b420 <USBD_LL_Init+0xac>)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a26      	ldr	r2, [pc, #152]	; (800b420 <USBD_LL_Init+0xac>)
 800b388:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b38c:	4b24      	ldr	r3, [pc, #144]	; (800b420 <USBD_LL_Init+0xac>)
 800b38e:	4a25      	ldr	r2, [pc, #148]	; (800b424 <USBD_LL_Init+0xb0>)
 800b390:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b392:	4b23      	ldr	r3, [pc, #140]	; (800b420 <USBD_LL_Init+0xac>)
 800b394:	2208      	movs	r2, #8
 800b396:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b398:	4b21      	ldr	r3, [pc, #132]	; (800b420 <USBD_LL_Init+0xac>)
 800b39a:	2202      	movs	r2, #2
 800b39c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b39e:	4b20      	ldr	r3, [pc, #128]	; (800b420 <USBD_LL_Init+0xac>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b3a4:	4b1e      	ldr	r3, [pc, #120]	; (800b420 <USBD_LL_Init+0xac>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b3aa:	4b1d      	ldr	r3, [pc, #116]	; (800b420 <USBD_LL_Init+0xac>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b3b0:	481b      	ldr	r0, [pc, #108]	; (800b420 <USBD_LL_Init+0xac>)
 800b3b2:	f7f8 fea2 	bl	80040fa <HAL_PCD_Init>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b3bc:	f7f7 fa14 	bl	80027e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3c6:	2318      	movs	r3, #24
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	f7fa f9e4 	bl	8005798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3d6:	2358      	movs	r3, #88	; 0x58
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2180      	movs	r1, #128	; 0x80
 800b3dc:	f7fa f9dc 	bl	8005798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3e6:	23c0      	movs	r3, #192	; 0xc0
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2181      	movs	r1, #129	; 0x81
 800b3ec:	f7fa f9d4 	bl	8005798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	f7fa f9cb 	bl	8005798 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b40c:	2200      	movs	r2, #0
 800b40e:	2182      	movs	r1, #130	; 0x82
 800b410:	f7fa f9c2 	bl	8005798 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000ec4 	.word	0x20000ec4
 800b424:	40005c00 	.word	0x40005c00

0800b428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f8 ff66 	bl	8004310 <HAL_PCD_Start>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b448:	7bfb      	ldrb	r3, [r7, #15]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 f94e 	bl	800b6ec <USBD_Get_USB_Status>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b454:	7bbb      	ldrb	r3, [r7, #14]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	4608      	mov	r0, r1
 800b468:	4611      	mov	r1, r2
 800b46a:	461a      	mov	r2, r3
 800b46c:	4603      	mov	r3, r0
 800b46e:	70fb      	strb	r3, [r7, #3]
 800b470:	460b      	mov	r3, r1
 800b472:	70bb      	strb	r3, [r7, #2]
 800b474:	4613      	mov	r3, r2
 800b476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b486:	78bb      	ldrb	r3, [r7, #2]
 800b488:	883a      	ldrh	r2, [r7, #0]
 800b48a:	78f9      	ldrb	r1, [r7, #3]
 800b48c:	f7f9 f8e0 	bl	8004650 <HAL_PCD_EP_Open>
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4618      	mov	r0, r3
 800b498:	f000 f928 	bl	800b6ec <USBD_Get_USB_Status>
 800b49c:	4603      	mov	r3, r0
 800b49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3710      	adds	r7, #16
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4c4:	78fa      	ldrb	r2, [r7, #3]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f9 f927 	bl	800471c <HAL_PCD_EP_Close>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 f909 	bl	800b6ec <USBD_Get_USB_Status>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b502:	78fa      	ldrb	r2, [r7, #3]
 800b504:	4611      	mov	r1, r2
 800b506:	4618      	mov	r0, r3
 800b508:	f7f9 f9e7 	bl	80048da <HAL_PCD_EP_SetStall>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f8ea 	bl	800b6ec <USBD_Get_USB_Status>
 800b518:	4603      	mov	r3, r0
 800b51a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	4611      	mov	r1, r2
 800b544:	4618      	mov	r0, r3
 800b546:	f7f9 fa28 	bl	800499a <HAL_PCD_EP_ClrStall>
 800b54a:	4603      	mov	r3, r0
 800b54c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54e:	7bfb      	ldrb	r3, [r7, #15]
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f8cb 	bl	800b6ec <USBD_Get_USB_Status>
 800b556:	4603      	mov	r3, r0
 800b558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	da0c      	bge.n	800b59a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b580:	78fb      	ldrb	r3, [r7, #3]
 800b582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	00db      	lsls	r3, r3, #3
 800b592:	440b      	add	r3, r1
 800b594:	3302      	adds	r3, #2
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	e00b      	b.n	800b5b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	440b      	add	r3, r1
 800b5ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b5b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bc80      	pop	{r7}
 800b5ba:	4770      	bx	lr

0800b5bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5d6:	78fa      	ldrb	r2, [r7, #3]
 800b5d8:	4611      	mov	r1, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f9 f813 	bl	8004606 <HAL_PCD_SetAddress>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 f880 	bl	800b6ec <USBD_Get_USB_Status>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b086      	sub	sp, #24
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	461a      	mov	r2, r3
 800b606:	460b      	mov	r3, r1
 800b608:	72fb      	strb	r3, [r7, #11]
 800b60a:	4613      	mov	r3, r2
 800b60c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b61c:	893b      	ldrh	r3, [r7, #8]
 800b61e:	7af9      	ldrb	r1, [r7, #11]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	f7f9 f917 	bl	8004854 <HAL_PCD_EP_Transmit>
 800b626:	4603      	mov	r3, r0
 800b628:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62a:	7dfb      	ldrb	r3, [r7, #23]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 f85d 	bl	800b6ec <USBD_Get_USB_Status>
 800b632:	4603      	mov	r3, r0
 800b634:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b636:	7dbb      	ldrb	r3, [r7, #22]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	607a      	str	r2, [r7, #4]
 800b64a:	461a      	mov	r2, r3
 800b64c:	460b      	mov	r3, r1
 800b64e:	72fb      	strb	r3, [r7, #11]
 800b650:	4613      	mov	r3, r2
 800b652:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b662:	893b      	ldrh	r3, [r7, #8]
 800b664:	7af9      	ldrb	r1, [r7, #11]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	f7f9 f8a0 	bl	80047ac <HAL_PCD_EP_Receive>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f83a 	bl	800b6ec <USBD_Get_USB_Status>
 800b678:	4603      	mov	r3, r0
 800b67a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b67c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	460b      	mov	r3, r1
 800b690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f9 f8c2 	bl	8004826 <HAL_PCD_EP_GetRxCount>
 800b6a2:	4603      	mov	r3, r0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6b4:	4b02      	ldr	r3, [pc, #8]	; (800b6c0 <USBD_static_malloc+0x14>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr
 800b6c0:	20000290 	.word	0x20000290

0800b6c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]

}
 800b6cc:	bf00      	nop
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bc80      	pop	{r7}
 800b6d4:	4770      	bx	lr

0800b6d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b083      	sub	sp, #12
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	460b      	mov	r3, r1
 800b6e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bc80      	pop	{r7}
 800b6ea:	4770      	bx	lr

0800b6ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6fa:	79fb      	ldrb	r3, [r7, #7]
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d817      	bhi.n	800b730 <USBD_Get_USB_Status+0x44>
 800b700:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <USBD_Get_USB_Status+0x1c>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b719 	.word	0x0800b719
 800b70c:	0800b71f 	.word	0x0800b71f
 800b710:	0800b725 	.word	0x0800b725
 800b714:	0800b72b 	.word	0x0800b72b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	73fb      	strb	r3, [r7, #15]
    break;
 800b71c:	e00b      	b.n	800b736 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b71e:	2302      	movs	r3, #2
 800b720:	73fb      	strb	r3, [r7, #15]
    break;
 800b722:	e008      	b.n	800b736 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b724:	2301      	movs	r3, #1
 800b726:	73fb      	strb	r3, [r7, #15]
    break;
 800b728:	e005      	b.n	800b736 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b72a:	2302      	movs	r3, #2
 800b72c:	73fb      	strb	r3, [r7, #15]
    break;
 800b72e:	e002      	b.n	800b736 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b730:	2302      	movs	r3, #2
 800b732:	73fb      	strb	r3, [r7, #15]
    break;
 800b734:	bf00      	nop
  }
  return usb_status;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3714      	adds	r7, #20
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bc80      	pop	{r7}
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop

0800b744 <__errno>:
 800b744:	4b01      	ldr	r3, [pc, #4]	; (800b74c <__errno+0x8>)
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000190 	.word	0x20000190

0800b750 <__libc_init_array>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	2600      	movs	r6, #0
 800b754:	4d0c      	ldr	r5, [pc, #48]	; (800b788 <__libc_init_array+0x38>)
 800b756:	4c0d      	ldr	r4, [pc, #52]	; (800b78c <__libc_init_array+0x3c>)
 800b758:	1b64      	subs	r4, r4, r5
 800b75a:	10a4      	asrs	r4, r4, #2
 800b75c:	42a6      	cmp	r6, r4
 800b75e:	d109      	bne.n	800b774 <__libc_init_array+0x24>
 800b760:	f001 f954 	bl	800ca0c <_init>
 800b764:	2600      	movs	r6, #0
 800b766:	4d0a      	ldr	r5, [pc, #40]	; (800b790 <__libc_init_array+0x40>)
 800b768:	4c0a      	ldr	r4, [pc, #40]	; (800b794 <__libc_init_array+0x44>)
 800b76a:	1b64      	subs	r4, r4, r5
 800b76c:	10a4      	asrs	r4, r4, #2
 800b76e:	42a6      	cmp	r6, r4
 800b770:	d105      	bne.n	800b77e <__libc_init_array+0x2e>
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	f855 3b04 	ldr.w	r3, [r5], #4
 800b778:	4798      	blx	r3
 800b77a:	3601      	adds	r6, #1
 800b77c:	e7ee      	b.n	800b75c <__libc_init_array+0xc>
 800b77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b782:	4798      	blx	r3
 800b784:	3601      	adds	r6, #1
 800b786:	e7f2      	b.n	800b76e <__libc_init_array+0x1e>
 800b788:	0800cc14 	.word	0x0800cc14
 800b78c:	0800cc14 	.word	0x0800cc14
 800b790:	0800cc14 	.word	0x0800cc14
 800b794:	0800cc18 	.word	0x0800cc18

0800b798 <memcpy>:
 800b798:	440a      	add	r2, r1
 800b79a:	4291      	cmp	r1, r2
 800b79c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7a0:	d100      	bne.n	800b7a4 <memcpy+0xc>
 800b7a2:	4770      	bx	lr
 800b7a4:	b510      	push	{r4, lr}
 800b7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7b0:	d1f9      	bne.n	800b7a6 <memcpy+0xe>
 800b7b2:	bd10      	pop	{r4, pc}

0800b7b4 <memset>:
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	4402      	add	r2, r0
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d100      	bne.n	800b7be <memset+0xa>
 800b7bc:	4770      	bx	lr
 800b7be:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c2:	e7f9      	b.n	800b7b8 <memset+0x4>

0800b7c4 <iprintf>:
 800b7c4:	b40f      	push	{r0, r1, r2, r3}
 800b7c6:	4b0a      	ldr	r3, [pc, #40]	; (800b7f0 <iprintf+0x2c>)
 800b7c8:	b513      	push	{r0, r1, r4, lr}
 800b7ca:	681c      	ldr	r4, [r3, #0]
 800b7cc:	b124      	cbz	r4, 800b7d8 <iprintf+0x14>
 800b7ce:	69a3      	ldr	r3, [r4, #24]
 800b7d0:	b913      	cbnz	r3, 800b7d8 <iprintf+0x14>
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 f886 	bl	800b8e4 <__sinit>
 800b7d8:	ab05      	add	r3, sp, #20
 800b7da:	4620      	mov	r0, r4
 800b7dc:	9a04      	ldr	r2, [sp, #16]
 800b7de:	68a1      	ldr	r1, [r4, #8]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	f000 fafd 	bl	800bde0 <_vfiprintf_r>
 800b7e6:	b002      	add	sp, #8
 800b7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ec:	b004      	add	sp, #16
 800b7ee:	4770      	bx	lr
 800b7f0:	20000190 	.word	0x20000190

0800b7f4 <siprintf>:
 800b7f4:	b40e      	push	{r1, r2, r3}
 800b7f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7fa:	b500      	push	{lr}
 800b7fc:	b09c      	sub	sp, #112	; 0x70
 800b7fe:	ab1d      	add	r3, sp, #116	; 0x74
 800b800:	9002      	str	r0, [sp, #8]
 800b802:	9006      	str	r0, [sp, #24]
 800b804:	9107      	str	r1, [sp, #28]
 800b806:	9104      	str	r1, [sp, #16]
 800b808:	4808      	ldr	r0, [pc, #32]	; (800b82c <siprintf+0x38>)
 800b80a:	4909      	ldr	r1, [pc, #36]	; (800b830 <siprintf+0x3c>)
 800b80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b810:	9105      	str	r1, [sp, #20]
 800b812:	6800      	ldr	r0, [r0, #0]
 800b814:	a902      	add	r1, sp, #8
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	f000 f9ba 	bl	800bb90 <_svfiprintf_r>
 800b81c:	2200      	movs	r2, #0
 800b81e:	9b02      	ldr	r3, [sp, #8]
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	b01c      	add	sp, #112	; 0x70
 800b824:	f85d eb04 	ldr.w	lr, [sp], #4
 800b828:	b003      	add	sp, #12
 800b82a:	4770      	bx	lr
 800b82c:	20000190 	.word	0x20000190
 800b830:	ffff0208 	.word	0xffff0208

0800b834 <std>:
 800b834:	2300      	movs	r3, #0
 800b836:	b510      	push	{r4, lr}
 800b838:	4604      	mov	r4, r0
 800b83a:	e9c0 3300 	strd	r3, r3, [r0]
 800b83e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b842:	6083      	str	r3, [r0, #8]
 800b844:	8181      	strh	r1, [r0, #12]
 800b846:	6643      	str	r3, [r0, #100]	; 0x64
 800b848:	81c2      	strh	r2, [r0, #14]
 800b84a:	6183      	str	r3, [r0, #24]
 800b84c:	4619      	mov	r1, r3
 800b84e:	2208      	movs	r2, #8
 800b850:	305c      	adds	r0, #92	; 0x5c
 800b852:	f7ff ffaf 	bl	800b7b4 <memset>
 800b856:	4b05      	ldr	r3, [pc, #20]	; (800b86c <std+0x38>)
 800b858:	6224      	str	r4, [r4, #32]
 800b85a:	6263      	str	r3, [r4, #36]	; 0x24
 800b85c:	4b04      	ldr	r3, [pc, #16]	; (800b870 <std+0x3c>)
 800b85e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b860:	4b04      	ldr	r3, [pc, #16]	; (800b874 <std+0x40>)
 800b862:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <std+0x44>)
 800b866:	6323      	str	r3, [r4, #48]	; 0x30
 800b868:	bd10      	pop	{r4, pc}
 800b86a:	bf00      	nop
 800b86c:	0800c38d 	.word	0x0800c38d
 800b870:	0800c3af 	.word	0x0800c3af
 800b874:	0800c3e7 	.word	0x0800c3e7
 800b878:	0800c40b 	.word	0x0800c40b

0800b87c <_cleanup_r>:
 800b87c:	4901      	ldr	r1, [pc, #4]	; (800b884 <_cleanup_r+0x8>)
 800b87e:	f000 b8af 	b.w	800b9e0 <_fwalk_reent>
 800b882:	bf00      	nop
 800b884:	0800c6e5 	.word	0x0800c6e5

0800b888 <__sfmoreglue>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	2568      	movs	r5, #104	; 0x68
 800b88c:	1e4a      	subs	r2, r1, #1
 800b88e:	4355      	muls	r5, r2
 800b890:	460e      	mov	r6, r1
 800b892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b896:	f000 f8c5 	bl	800ba24 <_malloc_r>
 800b89a:	4604      	mov	r4, r0
 800b89c:	b140      	cbz	r0, 800b8b0 <__sfmoreglue+0x28>
 800b89e:	2100      	movs	r1, #0
 800b8a0:	e9c0 1600 	strd	r1, r6, [r0]
 800b8a4:	300c      	adds	r0, #12
 800b8a6:	60a0      	str	r0, [r4, #8]
 800b8a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8ac:	f7ff ff82 	bl	800b7b4 <memset>
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}

0800b8b4 <__sfp_lock_acquire>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__sfp_lock_acquire+0x8>)
 800b8b6:	f000 b8b3 	b.w	800ba20 <__retarget_lock_acquire_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	200011b8 	.word	0x200011b8

0800b8c0 <__sfp_lock_release>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__sfp_lock_release+0x8>)
 800b8c2:	f000 b8ae 	b.w	800ba22 <__retarget_lock_release_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	200011b8 	.word	0x200011b8

0800b8cc <__sinit_lock_acquire>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <__sinit_lock_acquire+0x8>)
 800b8ce:	f000 b8a7 	b.w	800ba20 <__retarget_lock_acquire_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	200011b3 	.word	0x200011b3

0800b8d8 <__sinit_lock_release>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sinit_lock_release+0x8>)
 800b8da:	f000 b8a2 	b.w	800ba22 <__retarget_lock_release_recursive>
 800b8de:	bf00      	nop
 800b8e0:	200011b3 	.word	0x200011b3

0800b8e4 <__sinit>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	f7ff fff0 	bl	800b8cc <__sinit_lock_acquire>
 800b8ec:	69a3      	ldr	r3, [r4, #24]
 800b8ee:	b11b      	cbz	r3, 800b8f8 <__sinit+0x14>
 800b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f4:	f7ff bff0 	b.w	800b8d8 <__sinit_lock_release>
 800b8f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8fc:	6523      	str	r3, [r4, #80]	; 0x50
 800b8fe:	4b13      	ldr	r3, [pc, #76]	; (800b94c <__sinit+0x68>)
 800b900:	4a13      	ldr	r2, [pc, #76]	; (800b950 <__sinit+0x6c>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	62a2      	str	r2, [r4, #40]	; 0x28
 800b906:	42a3      	cmp	r3, r4
 800b908:	bf08      	it	eq
 800b90a:	2301      	moveq	r3, #1
 800b90c:	4620      	mov	r0, r4
 800b90e:	bf08      	it	eq
 800b910:	61a3      	streq	r3, [r4, #24]
 800b912:	f000 f81f 	bl	800b954 <__sfp>
 800b916:	6060      	str	r0, [r4, #4]
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 f81b 	bl	800b954 <__sfp>
 800b91e:	60a0      	str	r0, [r4, #8]
 800b920:	4620      	mov	r0, r4
 800b922:	f000 f817 	bl	800b954 <__sfp>
 800b926:	2200      	movs	r2, #0
 800b928:	2104      	movs	r1, #4
 800b92a:	60e0      	str	r0, [r4, #12]
 800b92c:	6860      	ldr	r0, [r4, #4]
 800b92e:	f7ff ff81 	bl	800b834 <std>
 800b932:	2201      	movs	r2, #1
 800b934:	2109      	movs	r1, #9
 800b936:	68a0      	ldr	r0, [r4, #8]
 800b938:	f7ff ff7c 	bl	800b834 <std>
 800b93c:	2202      	movs	r2, #2
 800b93e:	2112      	movs	r1, #18
 800b940:	68e0      	ldr	r0, [r4, #12]
 800b942:	f7ff ff77 	bl	800b834 <std>
 800b946:	2301      	movs	r3, #1
 800b948:	61a3      	str	r3, [r4, #24]
 800b94a:	e7d1      	b.n	800b8f0 <__sinit+0xc>
 800b94c:	0800cb7c 	.word	0x0800cb7c
 800b950:	0800b87d 	.word	0x0800b87d

0800b954 <__sfp>:
 800b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b956:	4607      	mov	r7, r0
 800b958:	f7ff ffac 	bl	800b8b4 <__sfp_lock_acquire>
 800b95c:	4b1e      	ldr	r3, [pc, #120]	; (800b9d8 <__sfp+0x84>)
 800b95e:	681e      	ldr	r6, [r3, #0]
 800b960:	69b3      	ldr	r3, [r6, #24]
 800b962:	b913      	cbnz	r3, 800b96a <__sfp+0x16>
 800b964:	4630      	mov	r0, r6
 800b966:	f7ff ffbd 	bl	800b8e4 <__sinit>
 800b96a:	3648      	adds	r6, #72	; 0x48
 800b96c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b970:	3b01      	subs	r3, #1
 800b972:	d503      	bpl.n	800b97c <__sfp+0x28>
 800b974:	6833      	ldr	r3, [r6, #0]
 800b976:	b30b      	cbz	r3, 800b9bc <__sfp+0x68>
 800b978:	6836      	ldr	r6, [r6, #0]
 800b97a:	e7f7      	b.n	800b96c <__sfp+0x18>
 800b97c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b980:	b9d5      	cbnz	r5, 800b9b8 <__sfp+0x64>
 800b982:	4b16      	ldr	r3, [pc, #88]	; (800b9dc <__sfp+0x88>)
 800b984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b988:	60e3      	str	r3, [r4, #12]
 800b98a:	6665      	str	r5, [r4, #100]	; 0x64
 800b98c:	f000 f847 	bl	800ba1e <__retarget_lock_init_recursive>
 800b990:	f7ff ff96 	bl	800b8c0 <__sfp_lock_release>
 800b994:	2208      	movs	r2, #8
 800b996:	4629      	mov	r1, r5
 800b998:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b99c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9a0:	6025      	str	r5, [r4, #0]
 800b9a2:	61a5      	str	r5, [r4, #24]
 800b9a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9a8:	f7ff ff04 	bl	800b7b4 <memset>
 800b9ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b8:	3468      	adds	r4, #104	; 0x68
 800b9ba:	e7d9      	b.n	800b970 <__sfp+0x1c>
 800b9bc:	2104      	movs	r1, #4
 800b9be:	4638      	mov	r0, r7
 800b9c0:	f7ff ff62 	bl	800b888 <__sfmoreglue>
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	6030      	str	r0, [r6, #0]
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d1d5      	bne.n	800b978 <__sfp+0x24>
 800b9cc:	f7ff ff78 	bl	800b8c0 <__sfp_lock_release>
 800b9d0:	230c      	movs	r3, #12
 800b9d2:	603b      	str	r3, [r7, #0]
 800b9d4:	e7ee      	b.n	800b9b4 <__sfp+0x60>
 800b9d6:	bf00      	nop
 800b9d8:	0800cb7c 	.word	0x0800cb7c
 800b9dc:	ffff0001 	.word	0xffff0001

0800b9e0 <_fwalk_reent>:
 800b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	4688      	mov	r8, r1
 800b9e8:	2700      	movs	r7, #0
 800b9ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9f2:	f1b9 0901 	subs.w	r9, r9, #1
 800b9f6:	d505      	bpl.n	800ba04 <_fwalk_reent+0x24>
 800b9f8:	6824      	ldr	r4, [r4, #0]
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	d1f7      	bne.n	800b9ee <_fwalk_reent+0xe>
 800b9fe:	4638      	mov	r0, r7
 800ba00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba04:	89ab      	ldrh	r3, [r5, #12]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d907      	bls.n	800ba1a <_fwalk_reent+0x3a>
 800ba0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	d003      	beq.n	800ba1a <_fwalk_reent+0x3a>
 800ba12:	4629      	mov	r1, r5
 800ba14:	4630      	mov	r0, r6
 800ba16:	47c0      	blx	r8
 800ba18:	4307      	orrs	r7, r0
 800ba1a:	3568      	adds	r5, #104	; 0x68
 800ba1c:	e7e9      	b.n	800b9f2 <_fwalk_reent+0x12>

0800ba1e <__retarget_lock_init_recursive>:
 800ba1e:	4770      	bx	lr

0800ba20 <__retarget_lock_acquire_recursive>:
 800ba20:	4770      	bx	lr

0800ba22 <__retarget_lock_release_recursive>:
 800ba22:	4770      	bx	lr

0800ba24 <_malloc_r>:
 800ba24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba26:	1ccd      	adds	r5, r1, #3
 800ba28:	f025 0503 	bic.w	r5, r5, #3
 800ba2c:	3508      	adds	r5, #8
 800ba2e:	2d0c      	cmp	r5, #12
 800ba30:	bf38      	it	cc
 800ba32:	250c      	movcc	r5, #12
 800ba34:	2d00      	cmp	r5, #0
 800ba36:	4606      	mov	r6, r0
 800ba38:	db01      	blt.n	800ba3e <_malloc_r+0x1a>
 800ba3a:	42a9      	cmp	r1, r5
 800ba3c:	d903      	bls.n	800ba46 <_malloc_r+0x22>
 800ba3e:	230c      	movs	r3, #12
 800ba40:	6033      	str	r3, [r6, #0]
 800ba42:	2000      	movs	r0, #0
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba46:	f000 ff27 	bl	800c898 <__malloc_lock>
 800ba4a:	4921      	ldr	r1, [pc, #132]	; (800bad0 <_malloc_r+0xac>)
 800ba4c:	680a      	ldr	r2, [r1, #0]
 800ba4e:	4614      	mov	r4, r2
 800ba50:	b99c      	cbnz	r4, 800ba7a <_malloc_r+0x56>
 800ba52:	4f20      	ldr	r7, [pc, #128]	; (800bad4 <_malloc_r+0xb0>)
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	b923      	cbnz	r3, 800ba62 <_malloc_r+0x3e>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f000 fc86 	bl	800c36c <_sbrk_r>
 800ba60:	6038      	str	r0, [r7, #0]
 800ba62:	4629      	mov	r1, r5
 800ba64:	4630      	mov	r0, r6
 800ba66:	f000 fc81 	bl	800c36c <_sbrk_r>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	d123      	bne.n	800bab6 <_malloc_r+0x92>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	4630      	mov	r0, r6
 800ba72:	6033      	str	r3, [r6, #0]
 800ba74:	f000 ff16 	bl	800c8a4 <__malloc_unlock>
 800ba78:	e7e3      	b.n	800ba42 <_malloc_r+0x1e>
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	1b5b      	subs	r3, r3, r5
 800ba7e:	d417      	bmi.n	800bab0 <_malloc_r+0x8c>
 800ba80:	2b0b      	cmp	r3, #11
 800ba82:	d903      	bls.n	800ba8c <_malloc_r+0x68>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	441c      	add	r4, r3
 800ba88:	6025      	str	r5, [r4, #0]
 800ba8a:	e004      	b.n	800ba96 <_malloc_r+0x72>
 800ba8c:	6863      	ldr	r3, [r4, #4]
 800ba8e:	42a2      	cmp	r2, r4
 800ba90:	bf0c      	ite	eq
 800ba92:	600b      	streq	r3, [r1, #0]
 800ba94:	6053      	strne	r3, [r2, #4]
 800ba96:	4630      	mov	r0, r6
 800ba98:	f000 ff04 	bl	800c8a4 <__malloc_unlock>
 800ba9c:	f104 000b 	add.w	r0, r4, #11
 800baa0:	1d23      	adds	r3, r4, #4
 800baa2:	f020 0007 	bic.w	r0, r0, #7
 800baa6:	1ac2      	subs	r2, r0, r3
 800baa8:	d0cc      	beq.n	800ba44 <_malloc_r+0x20>
 800baaa:	1a1b      	subs	r3, r3, r0
 800baac:	50a3      	str	r3, [r4, r2]
 800baae:	e7c9      	b.n	800ba44 <_malloc_r+0x20>
 800bab0:	4622      	mov	r2, r4
 800bab2:	6864      	ldr	r4, [r4, #4]
 800bab4:	e7cc      	b.n	800ba50 <_malloc_r+0x2c>
 800bab6:	1cc4      	adds	r4, r0, #3
 800bab8:	f024 0403 	bic.w	r4, r4, #3
 800babc:	42a0      	cmp	r0, r4
 800babe:	d0e3      	beq.n	800ba88 <_malloc_r+0x64>
 800bac0:	1a21      	subs	r1, r4, r0
 800bac2:	4630      	mov	r0, r6
 800bac4:	f000 fc52 	bl	800c36c <_sbrk_r>
 800bac8:	3001      	adds	r0, #1
 800baca:	d1dd      	bne.n	800ba88 <_malloc_r+0x64>
 800bacc:	e7cf      	b.n	800ba6e <_malloc_r+0x4a>
 800bace:	bf00      	nop
 800bad0:	200004b0 	.word	0x200004b0
 800bad4:	200004b4 	.word	0x200004b4

0800bad8 <__ssputs_r>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	688e      	ldr	r6, [r1, #8]
 800bade:	4682      	mov	sl, r0
 800bae0:	429e      	cmp	r6, r3
 800bae2:	460c      	mov	r4, r1
 800bae4:	4690      	mov	r8, r2
 800bae6:	461f      	mov	r7, r3
 800bae8:	d838      	bhi.n	800bb5c <__ssputs_r+0x84>
 800baea:	898a      	ldrh	r2, [r1, #12]
 800baec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf0:	d032      	beq.n	800bb58 <__ssputs_r+0x80>
 800baf2:	6825      	ldr	r5, [r4, #0]
 800baf4:	6909      	ldr	r1, [r1, #16]
 800baf6:	3301      	adds	r3, #1
 800baf8:	eba5 0901 	sub.w	r9, r5, r1
 800bafc:	6965      	ldr	r5, [r4, #20]
 800bafe:	444b      	add	r3, r9
 800bb00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb08:	106d      	asrs	r5, r5, #1
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	bf38      	it	cc
 800bb0e:	461d      	movcc	r5, r3
 800bb10:	0553      	lsls	r3, r2, #21
 800bb12:	d531      	bpl.n	800bb78 <__ssputs_r+0xa0>
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7ff ff85 	bl	800ba24 <_malloc_r>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	b950      	cbnz	r0, 800bb34 <__ssputs_r+0x5c>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	f8ca 3000 	str.w	r3, [sl]
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2e:	81a3      	strh	r3, [r4, #12]
 800bb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb34:	464a      	mov	r2, r9
 800bb36:	6921      	ldr	r1, [r4, #16]
 800bb38:	f7ff fe2e 	bl	800b798 <memcpy>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	6126      	str	r6, [r4, #16]
 800bb4a:	444e      	add	r6, r9
 800bb4c:	6026      	str	r6, [r4, #0]
 800bb4e:	463e      	mov	r6, r7
 800bb50:	6165      	str	r5, [r4, #20]
 800bb52:	eba5 0509 	sub.w	r5, r5, r9
 800bb56:	60a5      	str	r5, [r4, #8]
 800bb58:	42be      	cmp	r6, r7
 800bb5a:	d900      	bls.n	800bb5e <__ssputs_r+0x86>
 800bb5c:	463e      	mov	r6, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	4641      	mov	r1, r8
 800bb62:	6820      	ldr	r0, [r4, #0]
 800bb64:	f000 fe7e 	bl	800c864 <memmove>
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	6822      	ldr	r2, [r4, #0]
 800bb6c:	1b9b      	subs	r3, r3, r6
 800bb6e:	4432      	add	r2, r6
 800bb70:	2000      	movs	r0, #0
 800bb72:	60a3      	str	r3, [r4, #8]
 800bb74:	6022      	str	r2, [r4, #0]
 800bb76:	e7db      	b.n	800bb30 <__ssputs_r+0x58>
 800bb78:	462a      	mov	r2, r5
 800bb7a:	f000 fee5 	bl	800c948 <_realloc_r>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1e1      	bne.n	800bb48 <__ssputs_r+0x70>
 800bb84:	4650      	mov	r0, sl
 800bb86:	6921      	ldr	r1, [r4, #16]
 800bb88:	f000 fe92 	bl	800c8b0 <_free_r>
 800bb8c:	e7c7      	b.n	800bb1e <__ssputs_r+0x46>
	...

0800bb90 <_svfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	4698      	mov	r8, r3
 800bb96:	898b      	ldrh	r3, [r1, #12]
 800bb98:	4607      	mov	r7, r0
 800bb9a:	061b      	lsls	r3, r3, #24
 800bb9c:	460d      	mov	r5, r1
 800bb9e:	4614      	mov	r4, r2
 800bba0:	b09d      	sub	sp, #116	; 0x74
 800bba2:	d50e      	bpl.n	800bbc2 <_svfiprintf_r+0x32>
 800bba4:	690b      	ldr	r3, [r1, #16]
 800bba6:	b963      	cbnz	r3, 800bbc2 <_svfiprintf_r+0x32>
 800bba8:	2140      	movs	r1, #64	; 0x40
 800bbaa:	f7ff ff3b 	bl	800ba24 <_malloc_r>
 800bbae:	6028      	str	r0, [r5, #0]
 800bbb0:	6128      	str	r0, [r5, #16]
 800bbb2:	b920      	cbnz	r0, 800bbbe <_svfiprintf_r+0x2e>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e0d1      	b.n	800bd62 <_svfiprintf_r+0x1d2>
 800bbbe:	2340      	movs	r3, #64	; 0x40
 800bbc0:	616b      	str	r3, [r5, #20]
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc6:	2320      	movs	r3, #32
 800bbc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbcc:	2330      	movs	r3, #48	; 0x30
 800bbce:	f04f 0901 	mov.w	r9, #1
 800bbd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd7c <_svfiprintf_r+0x1ec>
 800bbda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbde:	4623      	mov	r3, r4
 800bbe0:	469a      	mov	sl, r3
 800bbe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe6:	b10a      	cbz	r2, 800bbec <_svfiprintf_r+0x5c>
 800bbe8:	2a25      	cmp	r2, #37	; 0x25
 800bbea:	d1f9      	bne.n	800bbe0 <_svfiprintf_r+0x50>
 800bbec:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf0:	d00b      	beq.n	800bc0a <_svfiprintf_r+0x7a>
 800bbf2:	465b      	mov	r3, fp
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	4638      	mov	r0, r7
 800bbfa:	f7ff ff6d 	bl	800bad8 <__ssputs_r>
 800bbfe:	3001      	adds	r0, #1
 800bc00:	f000 80aa 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc06:	445a      	add	r2, fp
 800bc08:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80a2 	beq.w	800bd58 <_svfiprintf_r+0x1c8>
 800bc14:	2300      	movs	r3, #0
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1e:	f10a 0a01 	add.w	sl, sl, #1
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	9307      	str	r3, [sp, #28]
 800bc26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2c:	4654      	mov	r4, sl
 800bc2e:	2205      	movs	r2, #5
 800bc30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc34:	4851      	ldr	r0, [pc, #324]	; (800bd7c <_svfiprintf_r+0x1ec>)
 800bc36:	f000 fe07 	bl	800c848 <memchr>
 800bc3a:	9a04      	ldr	r2, [sp, #16]
 800bc3c:	b9d8      	cbnz	r0, 800bc76 <_svfiprintf_r+0xe6>
 800bc3e:	06d0      	lsls	r0, r2, #27
 800bc40:	bf44      	itt	mi
 800bc42:	2320      	movmi	r3, #32
 800bc44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc48:	0711      	lsls	r1, r2, #28
 800bc4a:	bf44      	itt	mi
 800bc4c:	232b      	movmi	r3, #43	; 0x2b
 800bc4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc52:	f89a 3000 	ldrb.w	r3, [sl]
 800bc56:	2b2a      	cmp	r3, #42	; 0x2a
 800bc58:	d015      	beq.n	800bc86 <_svfiprintf_r+0xf6>
 800bc5a:	4654      	mov	r4, sl
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f04f 0c0a 	mov.w	ip, #10
 800bc62:	9a07      	ldr	r2, [sp, #28]
 800bc64:	4621      	mov	r1, r4
 800bc66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6a:	3b30      	subs	r3, #48	; 0x30
 800bc6c:	2b09      	cmp	r3, #9
 800bc6e:	d94e      	bls.n	800bd0e <_svfiprintf_r+0x17e>
 800bc70:	b1b0      	cbz	r0, 800bca0 <_svfiprintf_r+0x110>
 800bc72:	9207      	str	r2, [sp, #28]
 800bc74:	e014      	b.n	800bca0 <_svfiprintf_r+0x110>
 800bc76:	eba0 0308 	sub.w	r3, r0, r8
 800bc7a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	46a2      	mov	sl, r4
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	e7d2      	b.n	800bc2c <_svfiprintf_r+0x9c>
 800bc86:	9b03      	ldr	r3, [sp, #12]
 800bc88:	1d19      	adds	r1, r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	9103      	str	r1, [sp, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	bfbb      	ittet	lt
 800bc92:	425b      	neglt	r3, r3
 800bc94:	f042 0202 	orrlt.w	r2, r2, #2
 800bc98:	9307      	strge	r3, [sp, #28]
 800bc9a:	9307      	strlt	r3, [sp, #28]
 800bc9c:	bfb8      	it	lt
 800bc9e:	9204      	strlt	r2, [sp, #16]
 800bca0:	7823      	ldrb	r3, [r4, #0]
 800bca2:	2b2e      	cmp	r3, #46	; 0x2e
 800bca4:	d10c      	bne.n	800bcc0 <_svfiprintf_r+0x130>
 800bca6:	7863      	ldrb	r3, [r4, #1]
 800bca8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcaa:	d135      	bne.n	800bd18 <_svfiprintf_r+0x188>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	3402      	adds	r4, #2
 800bcb0:	1d1a      	adds	r2, r3, #4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	9203      	str	r2, [sp, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	bfb8      	it	lt
 800bcba:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd8c <_svfiprintf_r+0x1fc>
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	f000 fdbd 	bl	800c848 <memchr>
 800bcce:	b140      	cbz	r0, 800bce2 <_svfiprintf_r+0x152>
 800bcd0:	2340      	movs	r3, #64	; 0x40
 800bcd2:	eba0 000a 	sub.w	r0, r0, sl
 800bcd6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	3401      	adds	r4, #1
 800bcde:	4303      	orrs	r3, r0
 800bce0:	9304      	str	r3, [sp, #16]
 800bce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce6:	2206      	movs	r2, #6
 800bce8:	4825      	ldr	r0, [pc, #148]	; (800bd80 <_svfiprintf_r+0x1f0>)
 800bcea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcee:	f000 fdab 	bl	800c848 <memchr>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d038      	beq.n	800bd68 <_svfiprintf_r+0x1d8>
 800bcf6:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <_svfiprintf_r+0x1f4>)
 800bcf8:	bb1b      	cbnz	r3, 800bd42 <_svfiprintf_r+0x1b2>
 800bcfa:	9b03      	ldr	r3, [sp, #12]
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	f023 0307 	bic.w	r3, r3, #7
 800bd02:	3308      	adds	r3, #8
 800bd04:	9303      	str	r3, [sp, #12]
 800bd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd08:	4433      	add	r3, r6
 800bd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0c:	e767      	b.n	800bbde <_svfiprintf_r+0x4e>
 800bd0e:	460c      	mov	r4, r1
 800bd10:	2001      	movs	r0, #1
 800bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd16:	e7a5      	b.n	800bc64 <_svfiprintf_r+0xd4>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f04f 0c0a 	mov.w	ip, #10
 800bd1e:	4619      	mov	r1, r3
 800bd20:	3401      	adds	r4, #1
 800bd22:	9305      	str	r3, [sp, #20]
 800bd24:	4620      	mov	r0, r4
 800bd26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2a:	3a30      	subs	r2, #48	; 0x30
 800bd2c:	2a09      	cmp	r2, #9
 800bd2e:	d903      	bls.n	800bd38 <_svfiprintf_r+0x1a8>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0c5      	beq.n	800bcc0 <_svfiprintf_r+0x130>
 800bd34:	9105      	str	r1, [sp, #20]
 800bd36:	e7c3      	b.n	800bcc0 <_svfiprintf_r+0x130>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd40:	e7f0      	b.n	800bd24 <_svfiprintf_r+0x194>
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	462a      	mov	r2, r5
 800bd48:	4638      	mov	r0, r7
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd4c:	a904      	add	r1, sp, #16
 800bd4e:	f3af 8000 	nop.w
 800bd52:	1c42      	adds	r2, r0, #1
 800bd54:	4606      	mov	r6, r0
 800bd56:	d1d6      	bne.n	800bd06 <_svfiprintf_r+0x176>
 800bd58:	89ab      	ldrh	r3, [r5, #12]
 800bd5a:	065b      	lsls	r3, r3, #25
 800bd5c:	f53f af2c 	bmi.w	800bbb8 <_svfiprintf_r+0x28>
 800bd60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd62:	b01d      	add	sp, #116	; 0x74
 800bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd68:	ab03      	add	r3, sp, #12
 800bd6a:	9300      	str	r3, [sp, #0]
 800bd6c:	462a      	mov	r2, r5
 800bd6e:	4638      	mov	r0, r7
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <_svfiprintf_r+0x1f8>)
 800bd72:	a904      	add	r1, sp, #16
 800bd74:	f000 f9d4 	bl	800c120 <_printf_i>
 800bd78:	e7eb      	b.n	800bd52 <_svfiprintf_r+0x1c2>
 800bd7a:	bf00      	nop
 800bd7c:	0800cbe0 	.word	0x0800cbe0
 800bd80:	0800cbea 	.word	0x0800cbea
 800bd84:	00000000 	.word	0x00000000
 800bd88:	0800bad9 	.word	0x0800bad9
 800bd8c:	0800cbe6 	.word	0x0800cbe6

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	b410      	push	{r4}
 800bd94:	3b01      	subs	r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da07      	bge.n	800bdac <__sfputc_r+0x1c>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d102      	bne.n	800bdac <__sfputc_r+0x1c>
 800bda6:	bc10      	pop	{r4}
 800bda8:	f000 bb34 	b.w	800c414 <__swbuf_r>
 800bdac:	6813      	ldr	r3, [r2, #0]
 800bdae:	1c58      	adds	r0, r3, #1
 800bdb0:	6010      	str	r0, [r2, #0]
 800bdb2:	7019      	strb	r1, [r3, #0]
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	bc10      	pop	{r4}
 800bdb8:	4770      	bx	lr

0800bdba <__sfputs_r>:
 800bdba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	460f      	mov	r7, r1
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	18d5      	adds	r5, r2, r3
 800bdc4:	42ac      	cmp	r4, r5
 800bdc6:	d101      	bne.n	800bdcc <__sfputs_r+0x12>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e007      	b.n	800bddc <__sfputs_r+0x22>
 800bdcc:	463a      	mov	r2, r7
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	f7ff ffdc 	bl	800bd90 <__sfputc_r>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d1f3      	bne.n	800bdc4 <__sfputs_r+0xa>
 800bddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde0 <_vfiprintf_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	460d      	mov	r5, r1
 800bde6:	4614      	mov	r4, r2
 800bde8:	4698      	mov	r8, r3
 800bdea:	4606      	mov	r6, r0
 800bdec:	b09d      	sub	sp, #116	; 0x74
 800bdee:	b118      	cbz	r0, 800bdf8 <_vfiprintf_r+0x18>
 800bdf0:	6983      	ldr	r3, [r0, #24]
 800bdf2:	b90b      	cbnz	r3, 800bdf8 <_vfiprintf_r+0x18>
 800bdf4:	f7ff fd76 	bl	800b8e4 <__sinit>
 800bdf8:	4b89      	ldr	r3, [pc, #548]	; (800c020 <_vfiprintf_r+0x240>)
 800bdfa:	429d      	cmp	r5, r3
 800bdfc:	d11b      	bne.n	800be36 <_vfiprintf_r+0x56>
 800bdfe:	6875      	ldr	r5, [r6, #4]
 800be00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be02:	07d9      	lsls	r1, r3, #31
 800be04:	d405      	bmi.n	800be12 <_vfiprintf_r+0x32>
 800be06:	89ab      	ldrh	r3, [r5, #12]
 800be08:	059a      	lsls	r2, r3, #22
 800be0a:	d402      	bmi.n	800be12 <_vfiprintf_r+0x32>
 800be0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be0e:	f7ff fe07 	bl	800ba20 <__retarget_lock_acquire_recursive>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	071b      	lsls	r3, r3, #28
 800be16:	d501      	bpl.n	800be1c <_vfiprintf_r+0x3c>
 800be18:	692b      	ldr	r3, [r5, #16]
 800be1a:	b9eb      	cbnz	r3, 800be58 <_vfiprintf_r+0x78>
 800be1c:	4629      	mov	r1, r5
 800be1e:	4630      	mov	r0, r6
 800be20:	f000 fb5c 	bl	800c4dc <__swsetup_r>
 800be24:	b1c0      	cbz	r0, 800be58 <_vfiprintf_r+0x78>
 800be26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be28:	07dc      	lsls	r4, r3, #31
 800be2a:	d50e      	bpl.n	800be4a <_vfiprintf_r+0x6a>
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	b01d      	add	sp, #116	; 0x74
 800be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be36:	4b7b      	ldr	r3, [pc, #492]	; (800c024 <_vfiprintf_r+0x244>)
 800be38:	429d      	cmp	r5, r3
 800be3a:	d101      	bne.n	800be40 <_vfiprintf_r+0x60>
 800be3c:	68b5      	ldr	r5, [r6, #8]
 800be3e:	e7df      	b.n	800be00 <_vfiprintf_r+0x20>
 800be40:	4b79      	ldr	r3, [pc, #484]	; (800c028 <_vfiprintf_r+0x248>)
 800be42:	429d      	cmp	r5, r3
 800be44:	bf08      	it	eq
 800be46:	68f5      	ldreq	r5, [r6, #12]
 800be48:	e7da      	b.n	800be00 <_vfiprintf_r+0x20>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	0598      	lsls	r0, r3, #22
 800be4e:	d4ed      	bmi.n	800be2c <_vfiprintf_r+0x4c>
 800be50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be52:	f7ff fde6 	bl	800ba22 <__retarget_lock_release_recursive>
 800be56:	e7e9      	b.n	800be2c <_vfiprintf_r+0x4c>
 800be58:	2300      	movs	r3, #0
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	2320      	movs	r3, #32
 800be5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be62:	2330      	movs	r3, #48	; 0x30
 800be64:	f04f 0901 	mov.w	r9, #1
 800be68:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c02c <_vfiprintf_r+0x24c>
 800be70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be74:	4623      	mov	r3, r4
 800be76:	469a      	mov	sl, r3
 800be78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be7c:	b10a      	cbz	r2, 800be82 <_vfiprintf_r+0xa2>
 800be7e:	2a25      	cmp	r2, #37	; 0x25
 800be80:	d1f9      	bne.n	800be76 <_vfiprintf_r+0x96>
 800be82:	ebba 0b04 	subs.w	fp, sl, r4
 800be86:	d00b      	beq.n	800bea0 <_vfiprintf_r+0xc0>
 800be88:	465b      	mov	r3, fp
 800be8a:	4622      	mov	r2, r4
 800be8c:	4629      	mov	r1, r5
 800be8e:	4630      	mov	r0, r6
 800be90:	f7ff ff93 	bl	800bdba <__sfputs_r>
 800be94:	3001      	adds	r0, #1
 800be96:	f000 80aa 	beq.w	800bfee <_vfiprintf_r+0x20e>
 800be9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be9c:	445a      	add	r2, fp
 800be9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bea0:	f89a 3000 	ldrb.w	r3, [sl]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f000 80a2 	beq.w	800bfee <_vfiprintf_r+0x20e>
 800beaa:	2300      	movs	r3, #0
 800beac:	f04f 32ff 	mov.w	r2, #4294967295
 800beb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb4:	f10a 0a01 	add.w	sl, sl, #1
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	9307      	str	r3, [sp, #28]
 800bebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec0:	931a      	str	r3, [sp, #104]	; 0x68
 800bec2:	4654      	mov	r4, sl
 800bec4:	2205      	movs	r2, #5
 800bec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beca:	4858      	ldr	r0, [pc, #352]	; (800c02c <_vfiprintf_r+0x24c>)
 800becc:	f000 fcbc 	bl	800c848 <memchr>
 800bed0:	9a04      	ldr	r2, [sp, #16]
 800bed2:	b9d8      	cbnz	r0, 800bf0c <_vfiprintf_r+0x12c>
 800bed4:	06d1      	lsls	r1, r2, #27
 800bed6:	bf44      	itt	mi
 800bed8:	2320      	movmi	r3, #32
 800beda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bede:	0713      	lsls	r3, r2, #28
 800bee0:	bf44      	itt	mi
 800bee2:	232b      	movmi	r3, #43	; 0x2b
 800bee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee8:	f89a 3000 	ldrb.w	r3, [sl]
 800beec:	2b2a      	cmp	r3, #42	; 0x2a
 800beee:	d015      	beq.n	800bf1c <_vfiprintf_r+0x13c>
 800bef0:	4654      	mov	r4, sl
 800bef2:	2000      	movs	r0, #0
 800bef4:	f04f 0c0a 	mov.w	ip, #10
 800bef8:	9a07      	ldr	r2, [sp, #28]
 800befa:	4621      	mov	r1, r4
 800befc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf00:	3b30      	subs	r3, #48	; 0x30
 800bf02:	2b09      	cmp	r3, #9
 800bf04:	d94e      	bls.n	800bfa4 <_vfiprintf_r+0x1c4>
 800bf06:	b1b0      	cbz	r0, 800bf36 <_vfiprintf_r+0x156>
 800bf08:	9207      	str	r2, [sp, #28]
 800bf0a:	e014      	b.n	800bf36 <_vfiprintf_r+0x156>
 800bf0c:	eba0 0308 	sub.w	r3, r0, r8
 800bf10:	fa09 f303 	lsl.w	r3, r9, r3
 800bf14:	4313      	orrs	r3, r2
 800bf16:	46a2      	mov	sl, r4
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	e7d2      	b.n	800bec2 <_vfiprintf_r+0xe2>
 800bf1c:	9b03      	ldr	r3, [sp, #12]
 800bf1e:	1d19      	adds	r1, r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	9103      	str	r1, [sp, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfbb      	ittet	lt
 800bf28:	425b      	neglt	r3, r3
 800bf2a:	f042 0202 	orrlt.w	r2, r2, #2
 800bf2e:	9307      	strge	r3, [sp, #28]
 800bf30:	9307      	strlt	r3, [sp, #28]
 800bf32:	bfb8      	it	lt
 800bf34:	9204      	strlt	r2, [sp, #16]
 800bf36:	7823      	ldrb	r3, [r4, #0]
 800bf38:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3a:	d10c      	bne.n	800bf56 <_vfiprintf_r+0x176>
 800bf3c:	7863      	ldrb	r3, [r4, #1]
 800bf3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf40:	d135      	bne.n	800bfae <_vfiprintf_r+0x1ce>
 800bf42:	9b03      	ldr	r3, [sp, #12]
 800bf44:	3402      	adds	r4, #2
 800bf46:	1d1a      	adds	r2, r3, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	9203      	str	r2, [sp, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfb8      	it	lt
 800bf50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf54:	9305      	str	r3, [sp, #20]
 800bf56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c03c <_vfiprintf_r+0x25c>
 800bf5a:	2203      	movs	r2, #3
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	7821      	ldrb	r1, [r4, #0]
 800bf60:	f000 fc72 	bl	800c848 <memchr>
 800bf64:	b140      	cbz	r0, 800bf78 <_vfiprintf_r+0x198>
 800bf66:	2340      	movs	r3, #64	; 0x40
 800bf68:	eba0 000a 	sub.w	r0, r0, sl
 800bf6c:	fa03 f000 	lsl.w	r0, r3, r0
 800bf70:	9b04      	ldr	r3, [sp, #16]
 800bf72:	3401      	adds	r4, #1
 800bf74:	4303      	orrs	r3, r0
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf7c:	2206      	movs	r2, #6
 800bf7e:	482c      	ldr	r0, [pc, #176]	; (800c030 <_vfiprintf_r+0x250>)
 800bf80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf84:	f000 fc60 	bl	800c848 <memchr>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d03f      	beq.n	800c00c <_vfiprintf_r+0x22c>
 800bf8c:	4b29      	ldr	r3, [pc, #164]	; (800c034 <_vfiprintf_r+0x254>)
 800bf8e:	bb1b      	cbnz	r3, 800bfd8 <_vfiprintf_r+0x1f8>
 800bf90:	9b03      	ldr	r3, [sp, #12]
 800bf92:	3307      	adds	r3, #7
 800bf94:	f023 0307 	bic.w	r3, r3, #7
 800bf98:	3308      	adds	r3, #8
 800bf9a:	9303      	str	r3, [sp, #12]
 800bf9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9e:	443b      	add	r3, r7
 800bfa0:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa2:	e767      	b.n	800be74 <_vfiprintf_r+0x94>
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfac:	e7a5      	b.n	800befa <_vfiprintf_r+0x11a>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f04f 0c0a 	mov.w	ip, #10
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc0:	3a30      	subs	r2, #48	; 0x30
 800bfc2:	2a09      	cmp	r2, #9
 800bfc4:	d903      	bls.n	800bfce <_vfiprintf_r+0x1ee>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d0c5      	beq.n	800bf56 <_vfiprintf_r+0x176>
 800bfca:	9105      	str	r1, [sp, #20]
 800bfcc:	e7c3      	b.n	800bf56 <_vfiprintf_r+0x176>
 800bfce:	4604      	mov	r4, r0
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd6:	e7f0      	b.n	800bfba <_vfiprintf_r+0x1da>
 800bfd8:	ab03      	add	r3, sp, #12
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	462a      	mov	r2, r5
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4b15      	ldr	r3, [pc, #84]	; (800c038 <_vfiprintf_r+0x258>)
 800bfe2:	a904      	add	r1, sp, #16
 800bfe4:	f3af 8000 	nop.w
 800bfe8:	4607      	mov	r7, r0
 800bfea:	1c78      	adds	r0, r7, #1
 800bfec:	d1d6      	bne.n	800bf9c <_vfiprintf_r+0x1bc>
 800bfee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff0:	07d9      	lsls	r1, r3, #31
 800bff2:	d405      	bmi.n	800c000 <_vfiprintf_r+0x220>
 800bff4:	89ab      	ldrh	r3, [r5, #12]
 800bff6:	059a      	lsls	r2, r3, #22
 800bff8:	d402      	bmi.n	800c000 <_vfiprintf_r+0x220>
 800bffa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bffc:	f7ff fd11 	bl	800ba22 <__retarget_lock_release_recursive>
 800c000:	89ab      	ldrh	r3, [r5, #12]
 800c002:	065b      	lsls	r3, r3, #25
 800c004:	f53f af12 	bmi.w	800be2c <_vfiprintf_r+0x4c>
 800c008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00a:	e711      	b.n	800be30 <_vfiprintf_r+0x50>
 800c00c:	ab03      	add	r3, sp, #12
 800c00e:	9300      	str	r3, [sp, #0]
 800c010:	462a      	mov	r2, r5
 800c012:	4630      	mov	r0, r6
 800c014:	4b08      	ldr	r3, [pc, #32]	; (800c038 <_vfiprintf_r+0x258>)
 800c016:	a904      	add	r1, sp, #16
 800c018:	f000 f882 	bl	800c120 <_printf_i>
 800c01c:	e7e4      	b.n	800bfe8 <_vfiprintf_r+0x208>
 800c01e:	bf00      	nop
 800c020:	0800cba0 	.word	0x0800cba0
 800c024:	0800cbc0 	.word	0x0800cbc0
 800c028:	0800cb80 	.word	0x0800cb80
 800c02c:	0800cbe0 	.word	0x0800cbe0
 800c030:	0800cbea 	.word	0x0800cbea
 800c034:	00000000 	.word	0x00000000
 800c038:	0800bdbb 	.word	0x0800bdbb
 800c03c:	0800cbe6 	.word	0x0800cbe6

0800c040 <_printf_common>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	4616      	mov	r6, r2
 800c046:	4699      	mov	r9, r3
 800c048:	688a      	ldr	r2, [r1, #8]
 800c04a:	690b      	ldr	r3, [r1, #16]
 800c04c:	4607      	mov	r7, r0
 800c04e:	4293      	cmp	r3, r2
 800c050:	bfb8      	it	lt
 800c052:	4613      	movlt	r3, r2
 800c054:	6033      	str	r3, [r6, #0]
 800c056:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c05a:	460c      	mov	r4, r1
 800c05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c060:	b10a      	cbz	r2, 800c066 <_printf_common+0x26>
 800c062:	3301      	adds	r3, #1
 800c064:	6033      	str	r3, [r6, #0]
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	0699      	lsls	r1, r3, #26
 800c06a:	bf42      	ittt	mi
 800c06c:	6833      	ldrmi	r3, [r6, #0]
 800c06e:	3302      	addmi	r3, #2
 800c070:	6033      	strmi	r3, [r6, #0]
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	f015 0506 	ands.w	r5, r5, #6
 800c078:	d106      	bne.n	800c088 <_printf_common+0x48>
 800c07a:	f104 0a19 	add.w	sl, r4, #25
 800c07e:	68e3      	ldr	r3, [r4, #12]
 800c080:	6832      	ldr	r2, [r6, #0]
 800c082:	1a9b      	subs	r3, r3, r2
 800c084:	42ab      	cmp	r3, r5
 800c086:	dc28      	bgt.n	800c0da <_printf_common+0x9a>
 800c088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c08c:	1e13      	subs	r3, r2, #0
 800c08e:	6822      	ldr	r2, [r4, #0]
 800c090:	bf18      	it	ne
 800c092:	2301      	movne	r3, #1
 800c094:	0692      	lsls	r2, r2, #26
 800c096:	d42d      	bmi.n	800c0f4 <_printf_common+0xb4>
 800c098:	4649      	mov	r1, r9
 800c09a:	4638      	mov	r0, r7
 800c09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0a0:	47c0      	blx	r8
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	d020      	beq.n	800c0e8 <_printf_common+0xa8>
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	68e5      	ldr	r5, [r4, #12]
 800c0aa:	f003 0306 	and.w	r3, r3, #6
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	bf18      	it	ne
 800c0b2:	2500      	movne	r5, #0
 800c0b4:	6832      	ldr	r2, [r6, #0]
 800c0b6:	f04f 0600 	mov.w	r6, #0
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	bf08      	it	eq
 800c0be:	1aad      	subeq	r5, r5, r2
 800c0c0:	6922      	ldr	r2, [r4, #16]
 800c0c2:	bf08      	it	eq
 800c0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	bfc4      	itt	gt
 800c0cc:	1a9b      	subgt	r3, r3, r2
 800c0ce:	18ed      	addgt	r5, r5, r3
 800c0d0:	341a      	adds	r4, #26
 800c0d2:	42b5      	cmp	r5, r6
 800c0d4:	d11a      	bne.n	800c10c <_printf_common+0xcc>
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	e008      	b.n	800c0ec <_printf_common+0xac>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	4652      	mov	r2, sl
 800c0de:	4649      	mov	r1, r9
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	47c0      	blx	r8
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d103      	bne.n	800c0f0 <_printf_common+0xb0>
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	e7c4      	b.n	800c07e <_printf_common+0x3e>
 800c0f4:	2030      	movs	r0, #48	; 0x30
 800c0f6:	18e1      	adds	r1, r4, r3
 800c0f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c102:	4422      	add	r2, r4
 800c104:	3302      	adds	r3, #2
 800c106:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c10a:	e7c5      	b.n	800c098 <_printf_common+0x58>
 800c10c:	2301      	movs	r3, #1
 800c10e:	4622      	mov	r2, r4
 800c110:	4649      	mov	r1, r9
 800c112:	4638      	mov	r0, r7
 800c114:	47c0      	blx	r8
 800c116:	3001      	adds	r0, #1
 800c118:	d0e6      	beq.n	800c0e8 <_printf_common+0xa8>
 800c11a:	3601      	adds	r6, #1
 800c11c:	e7d9      	b.n	800c0d2 <_printf_common+0x92>
	...

0800c120 <_printf_i>:
 800c120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	7e27      	ldrb	r7, [r4, #24]
 800c128:	4691      	mov	r9, r2
 800c12a:	2f78      	cmp	r7, #120	; 0x78
 800c12c:	4680      	mov	r8, r0
 800c12e:	469a      	mov	sl, r3
 800c130:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c136:	d807      	bhi.n	800c148 <_printf_i+0x28>
 800c138:	2f62      	cmp	r7, #98	; 0x62
 800c13a:	d80a      	bhi.n	800c152 <_printf_i+0x32>
 800c13c:	2f00      	cmp	r7, #0
 800c13e:	f000 80d9 	beq.w	800c2f4 <_printf_i+0x1d4>
 800c142:	2f58      	cmp	r7, #88	; 0x58
 800c144:	f000 80a4 	beq.w	800c290 <_printf_i+0x170>
 800c148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c14c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c150:	e03a      	b.n	800c1c8 <_printf_i+0xa8>
 800c152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c156:	2b15      	cmp	r3, #21
 800c158:	d8f6      	bhi.n	800c148 <_printf_i+0x28>
 800c15a:	a001      	add	r0, pc, #4	; (adr r0, 800c160 <_printf_i+0x40>)
 800c15c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c160:	0800c1b9 	.word	0x0800c1b9
 800c164:	0800c1cd 	.word	0x0800c1cd
 800c168:	0800c149 	.word	0x0800c149
 800c16c:	0800c149 	.word	0x0800c149
 800c170:	0800c149 	.word	0x0800c149
 800c174:	0800c149 	.word	0x0800c149
 800c178:	0800c1cd 	.word	0x0800c1cd
 800c17c:	0800c149 	.word	0x0800c149
 800c180:	0800c149 	.word	0x0800c149
 800c184:	0800c149 	.word	0x0800c149
 800c188:	0800c149 	.word	0x0800c149
 800c18c:	0800c2db 	.word	0x0800c2db
 800c190:	0800c1fd 	.word	0x0800c1fd
 800c194:	0800c2bd 	.word	0x0800c2bd
 800c198:	0800c149 	.word	0x0800c149
 800c19c:	0800c149 	.word	0x0800c149
 800c1a0:	0800c2fd 	.word	0x0800c2fd
 800c1a4:	0800c149 	.word	0x0800c149
 800c1a8:	0800c1fd 	.word	0x0800c1fd
 800c1ac:	0800c149 	.word	0x0800c149
 800c1b0:	0800c149 	.word	0x0800c149
 800c1b4:	0800c2c5 	.word	0x0800c2c5
 800c1b8:	680b      	ldr	r3, [r1, #0]
 800c1ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c1be:	1d1a      	adds	r2, r3, #4
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	600a      	str	r2, [r1, #0]
 800c1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e0a4      	b.n	800c316 <_printf_i+0x1f6>
 800c1cc:	6825      	ldr	r5, [r4, #0]
 800c1ce:	6808      	ldr	r0, [r1, #0]
 800c1d0:	062e      	lsls	r6, r5, #24
 800c1d2:	f100 0304 	add.w	r3, r0, #4
 800c1d6:	d50a      	bpl.n	800c1ee <_printf_i+0xce>
 800c1d8:	6805      	ldr	r5, [r0, #0]
 800c1da:	600b      	str	r3, [r1, #0]
 800c1dc:	2d00      	cmp	r5, #0
 800c1de:	da03      	bge.n	800c1e8 <_printf_i+0xc8>
 800c1e0:	232d      	movs	r3, #45	; 0x2d
 800c1e2:	426d      	negs	r5, r5
 800c1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1e8:	230a      	movs	r3, #10
 800c1ea:	485e      	ldr	r0, [pc, #376]	; (800c364 <_printf_i+0x244>)
 800c1ec:	e019      	b.n	800c222 <_printf_i+0x102>
 800c1ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c1f2:	6805      	ldr	r5, [r0, #0]
 800c1f4:	600b      	str	r3, [r1, #0]
 800c1f6:	bf18      	it	ne
 800c1f8:	b22d      	sxthne	r5, r5
 800c1fa:	e7ef      	b.n	800c1dc <_printf_i+0xbc>
 800c1fc:	680b      	ldr	r3, [r1, #0]
 800c1fe:	6825      	ldr	r5, [r4, #0]
 800c200:	1d18      	adds	r0, r3, #4
 800c202:	6008      	str	r0, [r1, #0]
 800c204:	0628      	lsls	r0, r5, #24
 800c206:	d501      	bpl.n	800c20c <_printf_i+0xec>
 800c208:	681d      	ldr	r5, [r3, #0]
 800c20a:	e002      	b.n	800c212 <_printf_i+0xf2>
 800c20c:	0669      	lsls	r1, r5, #25
 800c20e:	d5fb      	bpl.n	800c208 <_printf_i+0xe8>
 800c210:	881d      	ldrh	r5, [r3, #0]
 800c212:	2f6f      	cmp	r7, #111	; 0x6f
 800c214:	bf0c      	ite	eq
 800c216:	2308      	moveq	r3, #8
 800c218:	230a      	movne	r3, #10
 800c21a:	4852      	ldr	r0, [pc, #328]	; (800c364 <_printf_i+0x244>)
 800c21c:	2100      	movs	r1, #0
 800c21e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c222:	6866      	ldr	r6, [r4, #4]
 800c224:	2e00      	cmp	r6, #0
 800c226:	bfa8      	it	ge
 800c228:	6821      	ldrge	r1, [r4, #0]
 800c22a:	60a6      	str	r6, [r4, #8]
 800c22c:	bfa4      	itt	ge
 800c22e:	f021 0104 	bicge.w	r1, r1, #4
 800c232:	6021      	strge	r1, [r4, #0]
 800c234:	b90d      	cbnz	r5, 800c23a <_printf_i+0x11a>
 800c236:	2e00      	cmp	r6, #0
 800c238:	d04d      	beq.n	800c2d6 <_printf_i+0x1b6>
 800c23a:	4616      	mov	r6, r2
 800c23c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c240:	fb03 5711 	mls	r7, r3, r1, r5
 800c244:	5dc7      	ldrb	r7, [r0, r7]
 800c246:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c24a:	462f      	mov	r7, r5
 800c24c:	42bb      	cmp	r3, r7
 800c24e:	460d      	mov	r5, r1
 800c250:	d9f4      	bls.n	800c23c <_printf_i+0x11c>
 800c252:	2b08      	cmp	r3, #8
 800c254:	d10b      	bne.n	800c26e <_printf_i+0x14e>
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	07df      	lsls	r7, r3, #31
 800c25a:	d508      	bpl.n	800c26e <_printf_i+0x14e>
 800c25c:	6923      	ldr	r3, [r4, #16]
 800c25e:	6861      	ldr	r1, [r4, #4]
 800c260:	4299      	cmp	r1, r3
 800c262:	bfde      	ittt	le
 800c264:	2330      	movle	r3, #48	; 0x30
 800c266:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c26a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c26e:	1b92      	subs	r2, r2, r6
 800c270:	6122      	str	r2, [r4, #16]
 800c272:	464b      	mov	r3, r9
 800c274:	4621      	mov	r1, r4
 800c276:	4640      	mov	r0, r8
 800c278:	f8cd a000 	str.w	sl, [sp]
 800c27c:	aa03      	add	r2, sp, #12
 800c27e:	f7ff fedf 	bl	800c040 <_printf_common>
 800c282:	3001      	adds	r0, #1
 800c284:	d14c      	bne.n	800c320 <_printf_i+0x200>
 800c286:	f04f 30ff 	mov.w	r0, #4294967295
 800c28a:	b004      	add	sp, #16
 800c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c290:	4834      	ldr	r0, [pc, #208]	; (800c364 <_printf_i+0x244>)
 800c292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c296:	680e      	ldr	r6, [r1, #0]
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c29e:	061f      	lsls	r7, r3, #24
 800c2a0:	600e      	str	r6, [r1, #0]
 800c2a2:	d514      	bpl.n	800c2ce <_printf_i+0x1ae>
 800c2a4:	07d9      	lsls	r1, r3, #31
 800c2a6:	bf44      	itt	mi
 800c2a8:	f043 0320 	orrmi.w	r3, r3, #32
 800c2ac:	6023      	strmi	r3, [r4, #0]
 800c2ae:	b91d      	cbnz	r5, 800c2b8 <_printf_i+0x198>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	f023 0320 	bic.w	r3, r3, #32
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	2310      	movs	r3, #16
 800c2ba:	e7af      	b.n	800c21c <_printf_i+0xfc>
 800c2bc:	6823      	ldr	r3, [r4, #0]
 800c2be:	f043 0320 	orr.w	r3, r3, #32
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	2378      	movs	r3, #120	; 0x78
 800c2c6:	4828      	ldr	r0, [pc, #160]	; (800c368 <_printf_i+0x248>)
 800c2c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c2cc:	e7e3      	b.n	800c296 <_printf_i+0x176>
 800c2ce:	065e      	lsls	r6, r3, #25
 800c2d0:	bf48      	it	mi
 800c2d2:	b2ad      	uxthmi	r5, r5
 800c2d4:	e7e6      	b.n	800c2a4 <_printf_i+0x184>
 800c2d6:	4616      	mov	r6, r2
 800c2d8:	e7bb      	b.n	800c252 <_printf_i+0x132>
 800c2da:	680b      	ldr	r3, [r1, #0]
 800c2dc:	6826      	ldr	r6, [r4, #0]
 800c2de:	1d1d      	adds	r5, r3, #4
 800c2e0:	6960      	ldr	r0, [r4, #20]
 800c2e2:	600d      	str	r5, [r1, #0]
 800c2e4:	0635      	lsls	r5, r6, #24
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	d501      	bpl.n	800c2ee <_printf_i+0x1ce>
 800c2ea:	6018      	str	r0, [r3, #0]
 800c2ec:	e002      	b.n	800c2f4 <_printf_i+0x1d4>
 800c2ee:	0671      	lsls	r1, r6, #25
 800c2f0:	d5fb      	bpl.n	800c2ea <_printf_i+0x1ca>
 800c2f2:	8018      	strh	r0, [r3, #0]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	e7ba      	b.n	800c272 <_printf_i+0x152>
 800c2fc:	680b      	ldr	r3, [r1, #0]
 800c2fe:	1d1a      	adds	r2, r3, #4
 800c300:	600a      	str	r2, [r1, #0]
 800c302:	681e      	ldr	r6, [r3, #0]
 800c304:	2100      	movs	r1, #0
 800c306:	4630      	mov	r0, r6
 800c308:	6862      	ldr	r2, [r4, #4]
 800c30a:	f000 fa9d 	bl	800c848 <memchr>
 800c30e:	b108      	cbz	r0, 800c314 <_printf_i+0x1f4>
 800c310:	1b80      	subs	r0, r0, r6
 800c312:	6060      	str	r0, [r4, #4]
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	6123      	str	r3, [r4, #16]
 800c318:	2300      	movs	r3, #0
 800c31a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c31e:	e7a8      	b.n	800c272 <_printf_i+0x152>
 800c320:	4632      	mov	r2, r6
 800c322:	4649      	mov	r1, r9
 800c324:	4640      	mov	r0, r8
 800c326:	6923      	ldr	r3, [r4, #16]
 800c328:	47d0      	blx	sl
 800c32a:	3001      	adds	r0, #1
 800c32c:	d0ab      	beq.n	800c286 <_printf_i+0x166>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	079b      	lsls	r3, r3, #30
 800c332:	d413      	bmi.n	800c35c <_printf_i+0x23c>
 800c334:	68e0      	ldr	r0, [r4, #12]
 800c336:	9b03      	ldr	r3, [sp, #12]
 800c338:	4298      	cmp	r0, r3
 800c33a:	bfb8      	it	lt
 800c33c:	4618      	movlt	r0, r3
 800c33e:	e7a4      	b.n	800c28a <_printf_i+0x16a>
 800c340:	2301      	movs	r3, #1
 800c342:	4632      	mov	r2, r6
 800c344:	4649      	mov	r1, r9
 800c346:	4640      	mov	r0, r8
 800c348:	47d0      	blx	sl
 800c34a:	3001      	adds	r0, #1
 800c34c:	d09b      	beq.n	800c286 <_printf_i+0x166>
 800c34e:	3501      	adds	r5, #1
 800c350:	68e3      	ldr	r3, [r4, #12]
 800c352:	9903      	ldr	r1, [sp, #12]
 800c354:	1a5b      	subs	r3, r3, r1
 800c356:	42ab      	cmp	r3, r5
 800c358:	dcf2      	bgt.n	800c340 <_printf_i+0x220>
 800c35a:	e7eb      	b.n	800c334 <_printf_i+0x214>
 800c35c:	2500      	movs	r5, #0
 800c35e:	f104 0619 	add.w	r6, r4, #25
 800c362:	e7f5      	b.n	800c350 <_printf_i+0x230>
 800c364:	0800cbf1 	.word	0x0800cbf1
 800c368:	0800cc02 	.word	0x0800cc02

0800c36c <_sbrk_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	2300      	movs	r3, #0
 800c370:	4d05      	ldr	r5, [pc, #20]	; (800c388 <_sbrk_r+0x1c>)
 800c372:	4604      	mov	r4, r0
 800c374:	4608      	mov	r0, r1
 800c376:	602b      	str	r3, [r5, #0]
 800c378:	f7f6 fc46 	bl	8002c08 <_sbrk>
 800c37c:	1c43      	adds	r3, r0, #1
 800c37e:	d102      	bne.n	800c386 <_sbrk_r+0x1a>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	b103      	cbz	r3, 800c386 <_sbrk_r+0x1a>
 800c384:	6023      	str	r3, [r4, #0]
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	200011bc 	.word	0x200011bc

0800c38c <__sread>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c394:	f000 fafe 	bl	800c994 <_read_r>
 800c398:	2800      	cmp	r0, #0
 800c39a:	bfab      	itete	ge
 800c39c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c39e:	89a3      	ldrhlt	r3, [r4, #12]
 800c3a0:	181b      	addge	r3, r3, r0
 800c3a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3a6:	bfac      	ite	ge
 800c3a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3aa:	81a3      	strhlt	r3, [r4, #12]
 800c3ac:	bd10      	pop	{r4, pc}

0800c3ae <__swrite>:
 800c3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b2:	461f      	mov	r7, r3
 800c3b4:	898b      	ldrh	r3, [r1, #12]
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	05db      	lsls	r3, r3, #23
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	4616      	mov	r6, r2
 800c3be:	d505      	bpl.n	800c3cc <__swrite+0x1e>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c8:	f000 f9c8 	bl	800c75c <_lseek_r>
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d4:	81a3      	strh	r3, [r4, #12]
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	463b      	mov	r3, r7
 800c3da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e2:	f000 b869 	b.w	800c4b8 <_write_r>

0800c3e6 <__sseek>:
 800c3e6:	b510      	push	{r4, lr}
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ee:	f000 f9b5 	bl	800c75c <_lseek_r>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	bf15      	itete	ne
 800c3f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c402:	81a3      	strheq	r3, [r4, #12]
 800c404:	bf18      	it	ne
 800c406:	81a3      	strhne	r3, [r4, #12]
 800c408:	bd10      	pop	{r4, pc}

0800c40a <__sclose>:
 800c40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c40e:	f000 b8d3 	b.w	800c5b8 <_close_r>
	...

0800c414 <__swbuf_r>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	460e      	mov	r6, r1
 800c418:	4614      	mov	r4, r2
 800c41a:	4605      	mov	r5, r0
 800c41c:	b118      	cbz	r0, 800c426 <__swbuf_r+0x12>
 800c41e:	6983      	ldr	r3, [r0, #24]
 800c420:	b90b      	cbnz	r3, 800c426 <__swbuf_r+0x12>
 800c422:	f7ff fa5f 	bl	800b8e4 <__sinit>
 800c426:	4b21      	ldr	r3, [pc, #132]	; (800c4ac <__swbuf_r+0x98>)
 800c428:	429c      	cmp	r4, r3
 800c42a:	d12b      	bne.n	800c484 <__swbuf_r+0x70>
 800c42c:	686c      	ldr	r4, [r5, #4]
 800c42e:	69a3      	ldr	r3, [r4, #24]
 800c430:	60a3      	str	r3, [r4, #8]
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	071a      	lsls	r2, r3, #28
 800c436:	d52f      	bpl.n	800c498 <__swbuf_r+0x84>
 800c438:	6923      	ldr	r3, [r4, #16]
 800c43a:	b36b      	cbz	r3, 800c498 <__swbuf_r+0x84>
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	6820      	ldr	r0, [r4, #0]
 800c440:	b2f6      	uxtb	r6, r6
 800c442:	1ac0      	subs	r0, r0, r3
 800c444:	6963      	ldr	r3, [r4, #20]
 800c446:	4637      	mov	r7, r6
 800c448:	4283      	cmp	r3, r0
 800c44a:	dc04      	bgt.n	800c456 <__swbuf_r+0x42>
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f948 	bl	800c6e4 <_fflush_r>
 800c454:	bb30      	cbnz	r0, 800c4a4 <__swbuf_r+0x90>
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	3001      	adds	r0, #1
 800c45a:	3b01      	subs	r3, #1
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	6022      	str	r2, [r4, #0]
 800c464:	701e      	strb	r6, [r3, #0]
 800c466:	6963      	ldr	r3, [r4, #20]
 800c468:	4283      	cmp	r3, r0
 800c46a:	d004      	beq.n	800c476 <__swbuf_r+0x62>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	07db      	lsls	r3, r3, #31
 800c470:	d506      	bpl.n	800c480 <__swbuf_r+0x6c>
 800c472:	2e0a      	cmp	r6, #10
 800c474:	d104      	bne.n	800c480 <__swbuf_r+0x6c>
 800c476:	4621      	mov	r1, r4
 800c478:	4628      	mov	r0, r5
 800c47a:	f000 f933 	bl	800c6e4 <_fflush_r>
 800c47e:	b988      	cbnz	r0, 800c4a4 <__swbuf_r+0x90>
 800c480:	4638      	mov	r0, r7
 800c482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c484:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <__swbuf_r+0x9c>)
 800c486:	429c      	cmp	r4, r3
 800c488:	d101      	bne.n	800c48e <__swbuf_r+0x7a>
 800c48a:	68ac      	ldr	r4, [r5, #8]
 800c48c:	e7cf      	b.n	800c42e <__swbuf_r+0x1a>
 800c48e:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <__swbuf_r+0xa0>)
 800c490:	429c      	cmp	r4, r3
 800c492:	bf08      	it	eq
 800c494:	68ec      	ldreq	r4, [r5, #12]
 800c496:	e7ca      	b.n	800c42e <__swbuf_r+0x1a>
 800c498:	4621      	mov	r1, r4
 800c49a:	4628      	mov	r0, r5
 800c49c:	f000 f81e 	bl	800c4dc <__swsetup_r>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d0cb      	beq.n	800c43c <__swbuf_r+0x28>
 800c4a4:	f04f 37ff 	mov.w	r7, #4294967295
 800c4a8:	e7ea      	b.n	800c480 <__swbuf_r+0x6c>
 800c4aa:	bf00      	nop
 800c4ac:	0800cba0 	.word	0x0800cba0
 800c4b0:	0800cbc0 	.word	0x0800cbc0
 800c4b4:	0800cb80 	.word	0x0800cb80

0800c4b8 <_write_r>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	4611      	mov	r1, r2
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4d05      	ldr	r5, [pc, #20]	; (800c4d8 <_write_r+0x20>)
 800c4c4:	602a      	str	r2, [r5, #0]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7f3 ffc2 	bl	8000450 <_write>
 800c4cc:	1c43      	adds	r3, r0, #1
 800c4ce:	d102      	bne.n	800c4d6 <_write_r+0x1e>
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	b103      	cbz	r3, 800c4d6 <_write_r+0x1e>
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	bd38      	pop	{r3, r4, r5, pc}
 800c4d8:	200011bc 	.word	0x200011bc

0800c4dc <__swsetup_r>:
 800c4dc:	4b32      	ldr	r3, [pc, #200]	; (800c5a8 <__swsetup_r+0xcc>)
 800c4de:	b570      	push	{r4, r5, r6, lr}
 800c4e0:	681d      	ldr	r5, [r3, #0]
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	b125      	cbz	r5, 800c4f2 <__swsetup_r+0x16>
 800c4e8:	69ab      	ldr	r3, [r5, #24]
 800c4ea:	b913      	cbnz	r3, 800c4f2 <__swsetup_r+0x16>
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7ff f9f9 	bl	800b8e4 <__sinit>
 800c4f2:	4b2e      	ldr	r3, [pc, #184]	; (800c5ac <__swsetup_r+0xd0>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d10f      	bne.n	800c518 <__swsetup_r+0x3c>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c500:	0719      	lsls	r1, r3, #28
 800c502:	d42c      	bmi.n	800c55e <__swsetup_r+0x82>
 800c504:	06dd      	lsls	r5, r3, #27
 800c506:	d411      	bmi.n	800c52c <__swsetup_r+0x50>
 800c508:	2309      	movs	r3, #9
 800c50a:	6033      	str	r3, [r6, #0]
 800c50c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c510:	f04f 30ff 	mov.w	r0, #4294967295
 800c514:	81a3      	strh	r3, [r4, #12]
 800c516:	e03e      	b.n	800c596 <__swsetup_r+0xba>
 800c518:	4b25      	ldr	r3, [pc, #148]	; (800c5b0 <__swsetup_r+0xd4>)
 800c51a:	429c      	cmp	r4, r3
 800c51c:	d101      	bne.n	800c522 <__swsetup_r+0x46>
 800c51e:	68ac      	ldr	r4, [r5, #8]
 800c520:	e7eb      	b.n	800c4fa <__swsetup_r+0x1e>
 800c522:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <__swsetup_r+0xd8>)
 800c524:	429c      	cmp	r4, r3
 800c526:	bf08      	it	eq
 800c528:	68ec      	ldreq	r4, [r5, #12]
 800c52a:	e7e6      	b.n	800c4fa <__swsetup_r+0x1e>
 800c52c:	0758      	lsls	r0, r3, #29
 800c52e:	d512      	bpl.n	800c556 <__swsetup_r+0x7a>
 800c530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c532:	b141      	cbz	r1, 800c546 <__swsetup_r+0x6a>
 800c534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c538:	4299      	cmp	r1, r3
 800c53a:	d002      	beq.n	800c542 <__swsetup_r+0x66>
 800c53c:	4630      	mov	r0, r6
 800c53e:	f000 f9b7 	bl	800c8b0 <_free_r>
 800c542:	2300      	movs	r3, #0
 800c544:	6363      	str	r3, [r4, #52]	; 0x34
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	2300      	movs	r3, #0
 800c550:	6063      	str	r3, [r4, #4]
 800c552:	6923      	ldr	r3, [r4, #16]
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	89a3      	ldrh	r3, [r4, #12]
 800c558:	f043 0308 	orr.w	r3, r3, #8
 800c55c:	81a3      	strh	r3, [r4, #12]
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	b94b      	cbnz	r3, 800c576 <__swsetup_r+0x9a>
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c56c:	d003      	beq.n	800c576 <__swsetup_r+0x9a>
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f929 	bl	800c7c8 <__smakebuf_r>
 800c576:	89a0      	ldrh	r0, [r4, #12]
 800c578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c57c:	f010 0301 	ands.w	r3, r0, #1
 800c580:	d00a      	beq.n	800c598 <__swsetup_r+0xbc>
 800c582:	2300      	movs	r3, #0
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6963      	ldr	r3, [r4, #20]
 800c588:	425b      	negs	r3, r3
 800c58a:	61a3      	str	r3, [r4, #24]
 800c58c:	6923      	ldr	r3, [r4, #16]
 800c58e:	b943      	cbnz	r3, 800c5a2 <__swsetup_r+0xc6>
 800c590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c594:	d1ba      	bne.n	800c50c <__swsetup_r+0x30>
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	0781      	lsls	r1, r0, #30
 800c59a:	bf58      	it	pl
 800c59c:	6963      	ldrpl	r3, [r4, #20]
 800c59e:	60a3      	str	r3, [r4, #8]
 800c5a0:	e7f4      	b.n	800c58c <__swsetup_r+0xb0>
 800c5a2:	2000      	movs	r0, #0
 800c5a4:	e7f7      	b.n	800c596 <__swsetup_r+0xba>
 800c5a6:	bf00      	nop
 800c5a8:	20000190 	.word	0x20000190
 800c5ac:	0800cba0 	.word	0x0800cba0
 800c5b0:	0800cbc0 	.word	0x0800cbc0
 800c5b4:	0800cb80 	.word	0x0800cb80

0800c5b8 <_close_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4d05      	ldr	r5, [pc, #20]	; (800c5d4 <_close_r+0x1c>)
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	602b      	str	r3, [r5, #0]
 800c5c4:	f7f6 faef 	bl	8002ba6 <_close>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_close_r+0x1a>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_close_r+0x1a>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	200011bc 	.word	0x200011bc

0800c5d8 <__sflush_r>:
 800c5d8:	898a      	ldrh	r2, [r1, #12]
 800c5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	0710      	lsls	r0, r2, #28
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	d458      	bmi.n	800c698 <__sflush_r+0xc0>
 800c5e6:	684b      	ldr	r3, [r1, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	dc05      	bgt.n	800c5f8 <__sflush_r+0x20>
 800c5ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	dc02      	bgt.n	800c5f8 <__sflush_r+0x20>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	d0f9      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c604:	682f      	ldr	r7, [r5, #0]
 800c606:	602b      	str	r3, [r5, #0]
 800c608:	d032      	beq.n	800c670 <__sflush_r+0x98>
 800c60a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	075a      	lsls	r2, r3, #29
 800c610:	d505      	bpl.n	800c61e <__sflush_r+0x46>
 800c612:	6863      	ldr	r3, [r4, #4]
 800c614:	1ac0      	subs	r0, r0, r3
 800c616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c618:	b10b      	cbz	r3, 800c61e <__sflush_r+0x46>
 800c61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c61c:	1ac0      	subs	r0, r0, r3
 800c61e:	2300      	movs	r3, #0
 800c620:	4602      	mov	r2, r0
 800c622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c624:	4628      	mov	r0, r5
 800c626:	6a21      	ldr	r1, [r4, #32]
 800c628:	47b0      	blx	r6
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	d106      	bne.n	800c63e <__sflush_r+0x66>
 800c630:	6829      	ldr	r1, [r5, #0]
 800c632:	291d      	cmp	r1, #29
 800c634:	d82c      	bhi.n	800c690 <__sflush_r+0xb8>
 800c636:	4a2a      	ldr	r2, [pc, #168]	; (800c6e0 <__sflush_r+0x108>)
 800c638:	40ca      	lsrs	r2, r1
 800c63a:	07d6      	lsls	r6, r2, #31
 800c63c:	d528      	bpl.n	800c690 <__sflush_r+0xb8>
 800c63e:	2200      	movs	r2, #0
 800c640:	6062      	str	r2, [r4, #4]
 800c642:	6922      	ldr	r2, [r4, #16]
 800c644:	04d9      	lsls	r1, r3, #19
 800c646:	6022      	str	r2, [r4, #0]
 800c648:	d504      	bpl.n	800c654 <__sflush_r+0x7c>
 800c64a:	1c42      	adds	r2, r0, #1
 800c64c:	d101      	bne.n	800c652 <__sflush_r+0x7a>
 800c64e:	682b      	ldr	r3, [r5, #0]
 800c650:	b903      	cbnz	r3, 800c654 <__sflush_r+0x7c>
 800c652:	6560      	str	r0, [r4, #84]	; 0x54
 800c654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c656:	602f      	str	r7, [r5, #0]
 800c658:	2900      	cmp	r1, #0
 800c65a:	d0ca      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c660:	4299      	cmp	r1, r3
 800c662:	d002      	beq.n	800c66a <__sflush_r+0x92>
 800c664:	4628      	mov	r0, r5
 800c666:	f000 f923 	bl	800c8b0 <_free_r>
 800c66a:	2000      	movs	r0, #0
 800c66c:	6360      	str	r0, [r4, #52]	; 0x34
 800c66e:	e7c1      	b.n	800c5f4 <__sflush_r+0x1c>
 800c670:	6a21      	ldr	r1, [r4, #32]
 800c672:	2301      	movs	r3, #1
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	1c41      	adds	r1, r0, #1
 800c67a:	d1c7      	bne.n	800c60c <__sflush_r+0x34>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0c4      	beq.n	800c60c <__sflush_r+0x34>
 800c682:	2b1d      	cmp	r3, #29
 800c684:	d001      	beq.n	800c68a <__sflush_r+0xb2>
 800c686:	2b16      	cmp	r3, #22
 800c688:	d101      	bne.n	800c68e <__sflush_r+0xb6>
 800c68a:	602f      	str	r7, [r5, #0]
 800c68c:	e7b1      	b.n	800c5f2 <__sflush_r+0x1a>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	e7ad      	b.n	800c5f4 <__sflush_r+0x1c>
 800c698:	690f      	ldr	r7, [r1, #16]
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	d0a9      	beq.n	800c5f2 <__sflush_r+0x1a>
 800c69e:	0793      	lsls	r3, r2, #30
 800c6a0:	bf18      	it	ne
 800c6a2:	2300      	movne	r3, #0
 800c6a4:	680e      	ldr	r6, [r1, #0]
 800c6a6:	bf08      	it	eq
 800c6a8:	694b      	ldreq	r3, [r1, #20]
 800c6aa:	eba6 0807 	sub.w	r8, r6, r7
 800c6ae:	600f      	str	r7, [r1, #0]
 800c6b0:	608b      	str	r3, [r1, #8]
 800c6b2:	f1b8 0f00 	cmp.w	r8, #0
 800c6b6:	dd9c      	ble.n	800c5f2 <__sflush_r+0x1a>
 800c6b8:	4643      	mov	r3, r8
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	6a21      	ldr	r1, [r4, #32]
 800c6c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6c2:	47b0      	blx	r6
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	dc06      	bgt.n	800c6d6 <__sflush_r+0xfe>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	e78e      	b.n	800c5f4 <__sflush_r+0x1c>
 800c6d6:	4407      	add	r7, r0
 800c6d8:	eba8 0800 	sub.w	r8, r8, r0
 800c6dc:	e7e9      	b.n	800c6b2 <__sflush_r+0xda>
 800c6de:	bf00      	nop
 800c6e0:	20400001 	.word	0x20400001

0800c6e4 <_fflush_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	690b      	ldr	r3, [r1, #16]
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	b913      	cbnz	r3, 800c6f4 <_fflush_r+0x10>
 800c6ee:	2500      	movs	r5, #0
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	b118      	cbz	r0, 800c6fe <_fflush_r+0x1a>
 800c6f6:	6983      	ldr	r3, [r0, #24]
 800c6f8:	b90b      	cbnz	r3, 800c6fe <_fflush_r+0x1a>
 800c6fa:	f7ff f8f3 	bl	800b8e4 <__sinit>
 800c6fe:	4b14      	ldr	r3, [pc, #80]	; (800c750 <_fflush_r+0x6c>)
 800c700:	429c      	cmp	r4, r3
 800c702:	d11b      	bne.n	800c73c <_fflush_r+0x58>
 800c704:	686c      	ldr	r4, [r5, #4]
 800c706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0ef      	beq.n	800c6ee <_fflush_r+0xa>
 800c70e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c710:	07d0      	lsls	r0, r2, #31
 800c712:	d404      	bmi.n	800c71e <_fflush_r+0x3a>
 800c714:	0599      	lsls	r1, r3, #22
 800c716:	d402      	bmi.n	800c71e <_fflush_r+0x3a>
 800c718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c71a:	f7ff f981 	bl	800ba20 <__retarget_lock_acquire_recursive>
 800c71e:	4628      	mov	r0, r5
 800c720:	4621      	mov	r1, r4
 800c722:	f7ff ff59 	bl	800c5d8 <__sflush_r>
 800c726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c728:	4605      	mov	r5, r0
 800c72a:	07da      	lsls	r2, r3, #31
 800c72c:	d4e0      	bmi.n	800c6f0 <_fflush_r+0xc>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	059b      	lsls	r3, r3, #22
 800c732:	d4dd      	bmi.n	800c6f0 <_fflush_r+0xc>
 800c734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c736:	f7ff f974 	bl	800ba22 <__retarget_lock_release_recursive>
 800c73a:	e7d9      	b.n	800c6f0 <_fflush_r+0xc>
 800c73c:	4b05      	ldr	r3, [pc, #20]	; (800c754 <_fflush_r+0x70>)
 800c73e:	429c      	cmp	r4, r3
 800c740:	d101      	bne.n	800c746 <_fflush_r+0x62>
 800c742:	68ac      	ldr	r4, [r5, #8]
 800c744:	e7df      	b.n	800c706 <_fflush_r+0x22>
 800c746:	4b04      	ldr	r3, [pc, #16]	; (800c758 <_fflush_r+0x74>)
 800c748:	429c      	cmp	r4, r3
 800c74a:	bf08      	it	eq
 800c74c:	68ec      	ldreq	r4, [r5, #12]
 800c74e:	e7da      	b.n	800c706 <_fflush_r+0x22>
 800c750:	0800cba0 	.word	0x0800cba0
 800c754:	0800cbc0 	.word	0x0800cbc0
 800c758:	0800cb80 	.word	0x0800cb80

0800c75c <_lseek_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	4611      	mov	r1, r2
 800c764:	2200      	movs	r2, #0
 800c766:	4d05      	ldr	r5, [pc, #20]	; (800c77c <_lseek_r+0x20>)
 800c768:	602a      	str	r2, [r5, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	f7f6 fa3f 	bl	8002bee <_lseek>
 800c770:	1c43      	adds	r3, r0, #1
 800c772:	d102      	bne.n	800c77a <_lseek_r+0x1e>
 800c774:	682b      	ldr	r3, [r5, #0]
 800c776:	b103      	cbz	r3, 800c77a <_lseek_r+0x1e>
 800c778:	6023      	str	r3, [r4, #0]
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	200011bc 	.word	0x200011bc

0800c780 <__swhatbuf_r>:
 800c780:	b570      	push	{r4, r5, r6, lr}
 800c782:	460e      	mov	r6, r1
 800c784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c788:	4614      	mov	r4, r2
 800c78a:	2900      	cmp	r1, #0
 800c78c:	461d      	mov	r5, r3
 800c78e:	b096      	sub	sp, #88	; 0x58
 800c790:	da07      	bge.n	800c7a2 <__swhatbuf_r+0x22>
 800c792:	2300      	movs	r3, #0
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	89b3      	ldrh	r3, [r6, #12]
 800c798:	061a      	lsls	r2, r3, #24
 800c79a:	d410      	bmi.n	800c7be <__swhatbuf_r+0x3e>
 800c79c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a0:	e00e      	b.n	800c7c0 <__swhatbuf_r+0x40>
 800c7a2:	466a      	mov	r2, sp
 800c7a4:	f000 f908 	bl	800c9b8 <_fstat_r>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	dbf2      	blt.n	800c792 <__swhatbuf_r+0x12>
 800c7ac:	9a01      	ldr	r2, [sp, #4]
 800c7ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7b6:	425a      	negs	r2, r3
 800c7b8:	415a      	adcs	r2, r3
 800c7ba:	602a      	str	r2, [r5, #0]
 800c7bc:	e7ee      	b.n	800c79c <__swhatbuf_r+0x1c>
 800c7be:	2340      	movs	r3, #64	; 0x40
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	6023      	str	r3, [r4, #0]
 800c7c4:	b016      	add	sp, #88	; 0x58
 800c7c6:	bd70      	pop	{r4, r5, r6, pc}

0800c7c8 <__smakebuf_r>:
 800c7c8:	898b      	ldrh	r3, [r1, #12]
 800c7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7cc:	079d      	lsls	r5, r3, #30
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	d507      	bpl.n	800c7e4 <__smakebuf_r+0x1c>
 800c7d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7d8:	6023      	str	r3, [r4, #0]
 800c7da:	6123      	str	r3, [r4, #16]
 800c7dc:	2301      	movs	r3, #1
 800c7de:	6163      	str	r3, [r4, #20]
 800c7e0:	b002      	add	sp, #8
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}
 800c7e4:	466a      	mov	r2, sp
 800c7e6:	ab01      	add	r3, sp, #4
 800c7e8:	f7ff ffca 	bl	800c780 <__swhatbuf_r>
 800c7ec:	9900      	ldr	r1, [sp, #0]
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	f7ff f917 	bl	800ba24 <_malloc_r>
 800c7f6:	b948      	cbnz	r0, 800c80c <__smakebuf_r+0x44>
 800c7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7fc:	059a      	lsls	r2, r3, #22
 800c7fe:	d4ef      	bmi.n	800c7e0 <__smakebuf_r+0x18>
 800c800:	f023 0303 	bic.w	r3, r3, #3
 800c804:	f043 0302 	orr.w	r3, r3, #2
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	e7e3      	b.n	800c7d4 <__smakebuf_r+0xc>
 800c80c:	4b0d      	ldr	r3, [pc, #52]	; (800c844 <__smakebuf_r+0x7c>)
 800c80e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	6020      	str	r0, [r4, #0]
 800c814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	9b00      	ldr	r3, [sp, #0]
 800c81c:	6120      	str	r0, [r4, #16]
 800c81e:	6163      	str	r3, [r4, #20]
 800c820:	9b01      	ldr	r3, [sp, #4]
 800c822:	b15b      	cbz	r3, 800c83c <__smakebuf_r+0x74>
 800c824:	4630      	mov	r0, r6
 800c826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c82a:	f000 f8d7 	bl	800c9dc <_isatty_r>
 800c82e:	b128      	cbz	r0, 800c83c <__smakebuf_r+0x74>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f023 0303 	bic.w	r3, r3, #3
 800c836:	f043 0301 	orr.w	r3, r3, #1
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	89a0      	ldrh	r0, [r4, #12]
 800c83e:	4305      	orrs	r5, r0
 800c840:	81a5      	strh	r5, [r4, #12]
 800c842:	e7cd      	b.n	800c7e0 <__smakebuf_r+0x18>
 800c844:	0800b87d 	.word	0x0800b87d

0800c848 <memchr>:
 800c848:	4603      	mov	r3, r0
 800c84a:	b510      	push	{r4, lr}
 800c84c:	b2c9      	uxtb	r1, r1
 800c84e:	4402      	add	r2, r0
 800c850:	4293      	cmp	r3, r2
 800c852:	4618      	mov	r0, r3
 800c854:	d101      	bne.n	800c85a <memchr+0x12>
 800c856:	2000      	movs	r0, #0
 800c858:	e003      	b.n	800c862 <memchr+0x1a>
 800c85a:	7804      	ldrb	r4, [r0, #0]
 800c85c:	3301      	adds	r3, #1
 800c85e:	428c      	cmp	r4, r1
 800c860:	d1f6      	bne.n	800c850 <memchr+0x8>
 800c862:	bd10      	pop	{r4, pc}

0800c864 <memmove>:
 800c864:	4288      	cmp	r0, r1
 800c866:	b510      	push	{r4, lr}
 800c868:	eb01 0402 	add.w	r4, r1, r2
 800c86c:	d902      	bls.n	800c874 <memmove+0x10>
 800c86e:	4284      	cmp	r4, r0
 800c870:	4623      	mov	r3, r4
 800c872:	d807      	bhi.n	800c884 <memmove+0x20>
 800c874:	1e43      	subs	r3, r0, #1
 800c876:	42a1      	cmp	r1, r4
 800c878:	d008      	beq.n	800c88c <memmove+0x28>
 800c87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c882:	e7f8      	b.n	800c876 <memmove+0x12>
 800c884:	4601      	mov	r1, r0
 800c886:	4402      	add	r2, r0
 800c888:	428a      	cmp	r2, r1
 800c88a:	d100      	bne.n	800c88e <memmove+0x2a>
 800c88c:	bd10      	pop	{r4, pc}
 800c88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c896:	e7f7      	b.n	800c888 <memmove+0x24>

0800c898 <__malloc_lock>:
 800c898:	4801      	ldr	r0, [pc, #4]	; (800c8a0 <__malloc_lock+0x8>)
 800c89a:	f7ff b8c1 	b.w	800ba20 <__retarget_lock_acquire_recursive>
 800c89e:	bf00      	nop
 800c8a0:	200011b4 	.word	0x200011b4

0800c8a4 <__malloc_unlock>:
 800c8a4:	4801      	ldr	r0, [pc, #4]	; (800c8ac <__malloc_unlock+0x8>)
 800c8a6:	f7ff b8bc 	b.w	800ba22 <__retarget_lock_release_recursive>
 800c8aa:	bf00      	nop
 800c8ac:	200011b4 	.word	0x200011b4

0800c8b0 <_free_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	2900      	cmp	r1, #0
 800c8b6:	d043      	beq.n	800c940 <_free_r+0x90>
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f0c      	subs	r4, r1, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfb8      	it	lt
 800c8c2:	18e4      	addlt	r4, r4, r3
 800c8c4:	f7ff ffe8 	bl	800c898 <__malloc_lock>
 800c8c8:	4a1e      	ldr	r2, [pc, #120]	; (800c944 <_free_r+0x94>)
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	b933      	cbnz	r3, 800c8de <_free_r+0x2e>
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	6014      	str	r4, [r2, #0]
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8da:	f7ff bfe3 	b.w	800c8a4 <__malloc_unlock>
 800c8de:	42a3      	cmp	r3, r4
 800c8e0:	d90a      	bls.n	800c8f8 <_free_r+0x48>
 800c8e2:	6821      	ldr	r1, [r4, #0]
 800c8e4:	1862      	adds	r2, r4, r1
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	bf01      	itttt	eq
 800c8ea:	681a      	ldreq	r2, [r3, #0]
 800c8ec:	685b      	ldreq	r3, [r3, #4]
 800c8ee:	1852      	addeq	r2, r2, r1
 800c8f0:	6022      	streq	r2, [r4, #0]
 800c8f2:	6063      	str	r3, [r4, #4]
 800c8f4:	6004      	str	r4, [r0, #0]
 800c8f6:	e7ed      	b.n	800c8d4 <_free_r+0x24>
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	b10b      	cbz	r3, 800c902 <_free_r+0x52>
 800c8fe:	42a3      	cmp	r3, r4
 800c900:	d9fa      	bls.n	800c8f8 <_free_r+0x48>
 800c902:	6811      	ldr	r1, [r2, #0]
 800c904:	1850      	adds	r0, r2, r1
 800c906:	42a0      	cmp	r0, r4
 800c908:	d10b      	bne.n	800c922 <_free_r+0x72>
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	4401      	add	r1, r0
 800c90e:	1850      	adds	r0, r2, r1
 800c910:	4283      	cmp	r3, r0
 800c912:	6011      	str	r1, [r2, #0]
 800c914:	d1de      	bne.n	800c8d4 <_free_r+0x24>
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	4401      	add	r1, r0
 800c91c:	6011      	str	r1, [r2, #0]
 800c91e:	6053      	str	r3, [r2, #4]
 800c920:	e7d8      	b.n	800c8d4 <_free_r+0x24>
 800c922:	d902      	bls.n	800c92a <_free_r+0x7a>
 800c924:	230c      	movs	r3, #12
 800c926:	602b      	str	r3, [r5, #0]
 800c928:	e7d4      	b.n	800c8d4 <_free_r+0x24>
 800c92a:	6820      	ldr	r0, [r4, #0]
 800c92c:	1821      	adds	r1, r4, r0
 800c92e:	428b      	cmp	r3, r1
 800c930:	bf01      	itttt	eq
 800c932:	6819      	ldreq	r1, [r3, #0]
 800c934:	685b      	ldreq	r3, [r3, #4]
 800c936:	1809      	addeq	r1, r1, r0
 800c938:	6021      	streq	r1, [r4, #0]
 800c93a:	6063      	str	r3, [r4, #4]
 800c93c:	6054      	str	r4, [r2, #4]
 800c93e:	e7c9      	b.n	800c8d4 <_free_r+0x24>
 800c940:	bd38      	pop	{r3, r4, r5, pc}
 800c942:	bf00      	nop
 800c944:	200004b0 	.word	0x200004b0

0800c948 <_realloc_r>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	4607      	mov	r7, r0
 800c94c:	4614      	mov	r4, r2
 800c94e:	460e      	mov	r6, r1
 800c950:	b921      	cbnz	r1, 800c95c <_realloc_r+0x14>
 800c952:	4611      	mov	r1, r2
 800c954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c958:	f7ff b864 	b.w	800ba24 <_malloc_r>
 800c95c:	b922      	cbnz	r2, 800c968 <_realloc_r+0x20>
 800c95e:	f7ff ffa7 	bl	800c8b0 <_free_r>
 800c962:	4625      	mov	r5, r4
 800c964:	4628      	mov	r0, r5
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c968:	f000 f848 	bl	800c9fc <_malloc_usable_size_r>
 800c96c:	42a0      	cmp	r0, r4
 800c96e:	d20f      	bcs.n	800c990 <_realloc_r+0x48>
 800c970:	4621      	mov	r1, r4
 800c972:	4638      	mov	r0, r7
 800c974:	f7ff f856 	bl	800ba24 <_malloc_r>
 800c978:	4605      	mov	r5, r0
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d0f2      	beq.n	800c964 <_realloc_r+0x1c>
 800c97e:	4631      	mov	r1, r6
 800c980:	4622      	mov	r2, r4
 800c982:	f7fe ff09 	bl	800b798 <memcpy>
 800c986:	4631      	mov	r1, r6
 800c988:	4638      	mov	r0, r7
 800c98a:	f7ff ff91 	bl	800c8b0 <_free_r>
 800c98e:	e7e9      	b.n	800c964 <_realloc_r+0x1c>
 800c990:	4635      	mov	r5, r6
 800c992:	e7e7      	b.n	800c964 <_realloc_r+0x1c>

0800c994 <_read_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	4608      	mov	r0, r1
 800c99a:	4611      	mov	r1, r2
 800c99c:	2200      	movs	r2, #0
 800c99e:	4d05      	ldr	r5, [pc, #20]	; (800c9b4 <_read_r+0x20>)
 800c9a0:	602a      	str	r2, [r5, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	f7f6 f8e2 	bl	8002b6c <_read>
 800c9a8:	1c43      	adds	r3, r0, #1
 800c9aa:	d102      	bne.n	800c9b2 <_read_r+0x1e>
 800c9ac:	682b      	ldr	r3, [r5, #0]
 800c9ae:	b103      	cbz	r3, 800c9b2 <_read_r+0x1e>
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	bd38      	pop	{r3, r4, r5, pc}
 800c9b4:	200011bc 	.word	0x200011bc

0800c9b8 <_fstat_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4d06      	ldr	r5, [pc, #24]	; (800c9d8 <_fstat_r+0x20>)
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	602b      	str	r3, [r5, #0]
 800c9c6:	f7f6 f8f9 	bl	8002bbc <_fstat>
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	d102      	bne.n	800c9d4 <_fstat_r+0x1c>
 800c9ce:	682b      	ldr	r3, [r5, #0]
 800c9d0:	b103      	cbz	r3, 800c9d4 <_fstat_r+0x1c>
 800c9d2:	6023      	str	r3, [r4, #0]
 800c9d4:	bd38      	pop	{r3, r4, r5, pc}
 800c9d6:	bf00      	nop
 800c9d8:	200011bc 	.word	0x200011bc

0800c9dc <_isatty_r>:
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	2300      	movs	r3, #0
 800c9e0:	4d05      	ldr	r5, [pc, #20]	; (800c9f8 <_isatty_r+0x1c>)
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	4608      	mov	r0, r1
 800c9e6:	602b      	str	r3, [r5, #0]
 800c9e8:	f7f6 f8f7 	bl	8002bda <_isatty>
 800c9ec:	1c43      	adds	r3, r0, #1
 800c9ee:	d102      	bne.n	800c9f6 <_isatty_r+0x1a>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	b103      	cbz	r3, 800c9f6 <_isatty_r+0x1a>
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	200011bc 	.word	0x200011bc

0800c9fc <_malloc_usable_size_r>:
 800c9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca00:	1f18      	subs	r0, r3, #4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	bfbc      	itt	lt
 800ca06:	580b      	ldrlt	r3, [r1, r0]
 800ca08:	18c0      	addlt	r0, r0, r3
 800ca0a:	4770      	bx	lr

0800ca0c <_init>:
 800ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0e:	bf00      	nop
 800ca10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca12:	bc08      	pop	{r3}
 800ca14:	469e      	mov	lr, r3
 800ca16:	4770      	bx	lr

0800ca18 <_fini>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	bf00      	nop
 800ca1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1e:	bc08      	pop	{r3}
 800ca20:	469e      	mov	lr, r3
 800ca22:	4770      	bx	lr
