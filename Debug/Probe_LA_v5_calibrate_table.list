
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdec  0800bdec  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdec  0800bdec  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdec  0800bdec  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdec  0800bdec  0001bdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdf0  0800bdf0  0001bdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800bdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001720  20000228  0800c018  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001948  0800c018  00021948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021284  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ea4  00000000  00000000  000414d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  00046378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00047a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e021  00000000  00000000  00048f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce4e  00000000  00000000  00066fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f36  00000000  00000000  00083def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011bd25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006724  00000000  00000000  0011bd78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc60 	.word	0x0800bc60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800bc60 	.word	0x0800bc60

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2102      	movs	r1, #2
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <ToggleLDAC+0x1c>)
 8000aee:	f002 feb5 	bl	800385c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2102      	movs	r1, #2
 8000af6:	4802      	ldr	r0, [pc, #8]	; (8000b00 <ToggleLDAC+0x1c>)
 8000af8:	f002 feb0 	bl	800385c <HAL_GPIO_WritePin>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40010800 	.word	0x40010800

08000b04 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <SendSPI+0x34>)
 8000b16:	f002 fea1 	bl	800385c <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b1a:	1cb9      	adds	r1, r7, #2
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2201      	movs	r2, #1
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f005 f849 	bl	8005bb8 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <SendSPI+0x34>)
 8000b2c:	f002 fe96 	bl	800385c <HAL_GPIO_WritePin>

}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40010800 	.word	0x40010800

08000b3c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b4e:	d302      	bcc.n	8000b56 <DAC_AD5322_Ch1+0x1a>
 8000b50:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b54:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b56:	2300      	movs	r3, #0
 8000b58:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b5e:	2300      	movs	r3, #0
 8000b60:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000b62:	2300      	movs	r3, #0
 8000b64:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	8abb      	ldrh	r3, [r7, #20]
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	035b      	lsls	r3, r3, #13
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21a      	sxth	r2, r3
 8000b80:	8a3b      	ldrh	r3, [r7, #16]
 8000b82:	031b      	lsls	r3, r3, #12
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b90:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	b21a      	sxth	r2, r3
 8000b9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000baa:	89bb      	ldrh	r3, [r7, #12]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa8 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000bb4:	89bb      	ldrh	r3, [r7, #12]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ffa3 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000bbe:	f7ff ff91 	bl	8000ae4 <ToggleLDAC>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bdc:	d302      	bcc.n	8000be4 <DAC_AD5322_Ch2+0x1a>
 8000bde:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000be2:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000be4:	2301      	movs	r3, #1
 8000be6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000be8:	2301      	movs	r3, #1
 8000bea:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000bec:	2300      	movs	r3, #0
 8000bee:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	03db      	lsls	r3, r3, #15
 8000bf8:	b21a      	sxth	r2, r3
 8000bfa:	8abb      	ldrh	r3, [r7, #20]
 8000bfc:	039b      	lsls	r3, r3, #14
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	8a7b      	ldrh	r3, [r7, #18]
 8000c06:	035b      	lsls	r3, r3, #13
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	8a3b      	ldrh	r3, [r7, #16]
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	b21a      	sxth	r2, r3
 8000c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	b21b      	sxth	r3, r3
 8000c32:	4313      	orrs	r3, r2
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff61 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	4619      	mov	r1, r3
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff5c 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000c4c:	f7ff ff4a 	bl	8000ae4 <ToggleLDAC>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
 8000c64:	4613      	mov	r3, r2
 8000c66:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000c68:	887b      	ldrh	r3, [r7, #2]
 8000c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c6e:	d302      	bcc.n	8000c76 <DAC_AD5322_Ch1Ch2+0x1e>
 8000c70:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c74:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c76:	883b      	ldrh	r3, [r7, #0]
 8000c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c7c:	d302      	bcc.n	8000c84 <DAC_AD5322_Ch1Ch2+0x2c>
 8000c7e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c82:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000c84:	2300      	movs	r3, #0
 8000c86:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c88:	2301      	movs	r3, #1
 8000c8a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000c90:	2300      	movs	r3, #0
 8000c92:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c94:	8afb      	ldrh	r3, [r7, #22]
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	8abb      	ldrh	r3, [r7, #20]
 8000c9c:	039b      	lsls	r3, r3, #14
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	8a7b      	ldrh	r3, [r7, #18]
 8000ca6:	035b      	lsls	r3, r3, #13
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	8a3b      	ldrh	r3, [r7, #16]
 8000cb0:	031b      	lsls	r3, r3, #12
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cbe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000cc2:	f023 030f 	bic.w	r3, r3, #15
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000cd8:	89bb      	ldrh	r3, [r7, #12]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff11 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff0c 	bl	8000b04 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000cec:	2301      	movs	r3, #1
 8000cee:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cfc:	8afb      	ldrh	r3, [r7, #22]
 8000cfe:	03db      	lsls	r3, r3, #15
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	8abb      	ldrh	r3, [r7, #20]
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	8a7b      	ldrh	r3, [r7, #18]
 8000d0e:	035b      	lsls	r3, r3, #13
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	8a3b      	ldrh	r3, [r7, #16]
 8000d18:	031b      	lsls	r3, r3, #12
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4619      	mov	r1, r3
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fedd 	bl	8000b04 <SendSPI>
  	SendSPI(pSPI,out);
 8000d4a:	89bb      	ldrh	r3, [r7, #12]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fed8 	bl	8000b04 <SendSPI>
  	ToggleLDAC();
 8000d54:	f7ff fec6 	bl	8000ae4 <ToggleLDAC>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8000d66:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <flash_write_calibTable+0x11c>)
 8000d68:	617b      	str	r3, [r7, #20]
    uint32_t            err     = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
    uint32_t            index   = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    uint8_t             status  = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	76fb      	strb	r3, [r7, #27]

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000d76:	e010      	b.n	8000d9a <flash_write_calibTable+0x3a>
        if ( DevNVRAM.data32[index] != *(uint32_t *)addr ) {
 8000d78:	4a41      	ldr	r2, [pc, #260]	; (8000e80 <flash_write_calibTable+0x120>)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d002      	beq.n	8000d8e <flash_write_calibTable+0x2e>
            ++err;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        index += 1;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
        addr += 4;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3304      	adds	r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4a39      	ldr	r2, [pc, #228]	; (8000e84 <flash_write_calibTable+0x124>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d9ea      	bls.n	8000d78 <flash_write_calibTable+0x18>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d064      	beq.n	8000e72 <flash_write_calibTable+0x112>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000da8:	f002 fa44 	bl	8003234 <HAL_FLASH_Unlock>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <flash_write_calibTable+0x5a>
            status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000db6:	7efb      	ldrb	r3, [r7, #27]
 8000db8:	e05c      	b.n	8000e74 <flash_write_calibTable+0x114>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <flash_write_calibTable+0x11c>)
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 8000dce:	f107 0210 	add.w	r2, r7, #16
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fb14 	bl	8003404 <HAL_FLASHEx_Erase>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <flash_write_calibTable+0x8a>
            status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000de6:	7efb      	ldrb	r3, [r7, #27]
 8000de8:	e044      	b.n	8000e74 <flash_write_calibTable+0x114>
        }
        if ( err != 0xFFFFFFFF ) {
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d003      	beq.n	8000dfa <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	76fb      	strb	r3, [r7, #27]
            return status;
 8000df6:	7efb      	ldrb	r3, [r7, #27]
 8000df8:	e03c      	b.n	8000e74 <flash_write_calibTable+0x114>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <flash_write_calibTable+0x11c>)
 8000dfc:	617b      	str	r3, [r7, #20]
        err     = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
        index   = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
        /* Increase number of rewritings */
        DevNVRAM.sector.NWrite += 1;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <flash_write_calibTable+0x120>)
 8000e08:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <flash_write_calibTable+0x120>)
 8000e10:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        DevNVRAM.sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 8000e14:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
 8000e18:	4919      	ldr	r1, [pc, #100]	; (8000e80 <flash_write_calibTable+0x120>)
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <flash_write_calibTable+0x128>)
 8000e1c:	f002 f967 	bl	80030ee <HAL_CRC_Calculate>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <flash_write_calibTable+0x120>)
 8000e24:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
                                                      (uint32_t*)&DevNVRAM.calibration_table,
                                                      (sizeof(DevNVRAM.calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000e28:	e01d      	b.n	8000e66 <flash_write_calibTable+0x106>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, DevNVRAM.data32[index]) != HAL_OK) {
 8000e2a:	6979      	ldr	r1, [r7, #20]
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <flash_write_calibTable+0x120>)
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	461a      	mov	r2, r3
 8000e36:	f04f 0300 	mov.w	r3, #0
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f002 f98a 	bl	8003154 <HAL_FLASH_Program>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <flash_write_calibTable+0xec>
                err++;
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
            }
            index += 1;
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
            addr += 4;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3304      	adds	r3, #4
 8000e56:	617b      	str	r3, [r7, #20]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 )
 8000e58:	bf00      	nop
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <flash_write_calibTable+0x12c>)
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <flash_write_calibTable+0xfa>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <flash_write_calibTable+0x124>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d9dd      	bls.n	8000e2a <flash_write_calibTable+0xca>
                ;
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000e6e:	f002 fa07 	bl	8003280 <HAL_FLASH_Lock>
    }
    return status;
 8000e72:	7efb      	ldrb	r3, [r7, #27]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0801fc00 	.word	0x0801fc00
 8000e80:	200004d0 	.word	0x200004d0
 8000e84:	0801ffff 	.word	0x0801ffff
 8000e88:	20000c88 	.word	0x20000c88
 8000e8c:	40022000 	.word	0x40022000

08000e90 <volt2dgt>:
// floor()
// Пример: 
// Следующий фрагмент кода выводит на экран «10»:
// printf("%f", floor(10.9));

uint16_t volt2dgt(Table_t *calibTable, int16_t volt){
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]

// TODO: Нужно ли учитывать Ктр? volt = volt*Ktr 
float count = ( abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) / STEP_CALIBRATE;
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <volt2dgt+0x10c>)
 8000e9e:	60fb      	str	r3, [r7, #12]
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000ea0:	493f      	ldr	r1, [pc, #252]	; (8000fa0 <volt2dgt+0x110>)
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fcce 	bl	8000844 <__aeabi_fmul>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	493e      	ldr	r1, [pc, #248]	; (8000fa4 <volt2dgt+0x114>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd7d 	bl	80009ac <__aeabi_fdiv>
 8000eb2:	4603      	mov	r3, r0
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12)) /
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <volt2dgt+0x110>)
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fd78 	bl	80009ac <__aeabi_fdiv>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461c      	mov	r4, r3
               abs(MIN_VOLT_MODE_12)*volt
 8000ec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fc69 	bl	800079c <__aeabi_i2f>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff fcb8 	bl	8000844 <__aeabi_fmul>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461c      	mov	r4, r3
               +
               (count*abs(MIN_VOLT_MODE_12)) /
 8000ed8:	4931      	ldr	r1, [pc, #196]	; (8000fa0 <volt2dgt+0x110>)
 8000eda:	68f8      	ldr	r0, [r7, #12]
 8000edc:	f7ff fcb2 	bl	8000844 <__aeabi_fmul>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4930      	ldr	r1, [pc, #192]	; (8000fa4 <volt2dgt+0x114>)
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fd61 	bl	80009ac <__aeabi_fdiv>
 8000eea:	4603      	mov	r3, r0
               +
 8000eec:	4619      	mov	r1, r3
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f7ff fba0 	bl	8000634 <__addsf3>
 8000ef4:	4603      	mov	r3, r0
uint16_t y = ( floor( (count*abs(MIN_VOLT_MODE_12)) /
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fa96 	bl	8000428 <__aeabi_f2d>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f00a fe2c 	bl	800bb60 <floor>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fb6a 	bl	80005e8 <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	817b      	strh	r3, [r7, #10]
               (abs(MIN_VOLT_MODE_12) + abs(MAX_VOLT_MODE_12) ) ) ); // искомый индекс в массиве!!! найти минимальное значение от него 26.5-->26 через floor
uint16_t CodeX = (((calibTable->dacValA_m12[y+1+1]-calibTable->dacValA_m12[y])/(((y+1+1) * STEP_CALIBRATE) -abs( MIN_VOLT_MODE_12)-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))))*(volt-((y+1) * STEP_CALIBRATE) - abs( MIN_VOLT_MODE_12))+calibTable->dacValA_m12[y+1];
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	889b      	ldrh	r3, [r3, #4]
 8000f26:	4619      	mov	r1, r3
 8000f28:	897b      	ldrh	r3, [r7, #10]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	1aca      	subs	r2, r1, r3
 8000f36:	897b      	ldrh	r3, [r7, #10]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	21c8      	movs	r1, #200	; 0xc8
 8000f3c:	fb01 f303 	mul.w	r3, r1, r3
 8000f40:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000f44:	3b08      	subs	r3, #8
 8000f46:	8979      	ldrh	r1, [r7, #10]
 8000f48:	3101      	adds	r1, #1
 8000f4a:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000f4e:	fb00 f101 	mul.w	r1, r0, r1
 8000f52:	440b      	add	r3, r1
 8000f54:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000f58:	3b08      	subs	r3, #8
 8000f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000f64:	897b      	ldrh	r3, [r7, #10]
 8000f66:	3301      	adds	r3, #1
 8000f68:	f06f 00c7 	mvn.w	r0, #199	; 0xc7
 8000f6c:	fb00 f303 	mul.w	r3, r0, r3
 8000f70:	440b      	add	r3, r1
 8000f72:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000f76:	3b08      	subs	r3, #8
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	fb03 f302 	mul.w	r3, r3, r2
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	897b      	ldrh	r3, [r7, #10]
 8000f82:	3301      	adds	r3, #1
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	440b      	add	r3, r1
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	813b      	strh	r3, [r7, #8]
	return CodeX;
 8000f92:	893b      	ldrh	r3, [r7, #8]





}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	42aa0000 	.word	0x42aa0000
 8000fa0:	459c4000 	.word	0x459c4000
 8000fa4:	4684d000 	.word	0x4684d000

08000fa8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fc8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00b      	beq.n	8000fe8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	e000      	b.n	8000fd4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fd2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f9      	beq.n	8000fd2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fde:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <DWT_Init>:
#define SCB_DEMCR   *(volatile unsigned long *)0xE000EDFC

/******************************************************************************/
/* inline func */
__STATIC_INLINE void DWT_Init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <DWT_Init+0x24>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <DWT_Init+0x24>)
 8000ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001002:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <DWT_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <DWT_Init+0x28>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	e000edf0 	.word	0xe000edf0
 800101c:	e0001000 	.word	0xe0001000

08001020 <_write>:
void USB_Reset(void);

/*---------------------------------------------*/
#if DEBUG_SWO
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e009      	b.n	8001046 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	60ba      	str	r2, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffb4 	bl	8000fa8 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbf1      	blt.n	8001032 <_write+0x12>
	}
	return len;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SetDacA>:
uint16_t VDAC_A = 0;
uint16_t VDAC_B = 0;
// Новая реализация. для приема значений в напряжениях, с поиском по структуре DevNVRAM выгруженной из памяти.
//TODO: Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
void SetDacA(int16_t da)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
	VDAC_A = volt2dgt(&(DevNVRAM.calibration_table), da);
 8001062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001066:	4619      	mov	r1, r3
 8001068:	4808      	ldr	r0, [pc, #32]	; (800108c <SetDacA+0x34>)
 800106a:	f7ff ff11 	bl	8000e90 <volt2dgt>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <SetDacA+0x38>)
 8001074:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch1(&hspi1, VDAC_A);
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <SetDacA+0x38>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <SetDacA+0x3c>)
 800107e:	f7ff fd5d 	bl	8000b3c <DAC_AD5322_Ch1>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200004d0 	.word	0x200004d0
 8001090:	20000246 	.word	0x20000246
 8001094:	20000d08 	.word	0x20000d08

08001098 <SetDacB>:
void SetDacB(int16_t db) //BUG: Не работает. Установка цап реализованно только для канала A и режима m12. Нужно переписать с учетом режима работы. режим работы определяет какую таблицу использовать.
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <SetDacB+0x34>)
 80010aa:	f7ff fef1 	bl	8000e90 <volt2dgt>
 80010ae:	4603      	mov	r3, r0
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <SetDacB+0x38>)
 80010b4:	801a      	strh	r2, [r3, #0]
	DAC_AD5322_Ch2(&hspi1, VDAC_B);
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SetDacB+0x38>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <SetDacB+0x3c>)
 80010be:	f7ff fd84 	bl	8000bca <DAC_AD5322_Ch2>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200004d0 	.word	0x200004d0
 80010d0:	20000248 	.word	0x20000248
 80010d4:	20000d08 	.word	0x20000d08

080010d8 <SetAllDAC>:
void SetAllDAC()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SetAllDAC+0x18>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <SetAllDAC+0x1c>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <SetAllDAC+0x20>)
 80010e8:	f7ff fdb6 	bl	8000c58 <DAC_AD5322_Ch1Ch2>
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000246 	.word	0x20000246
 80010f4:	20000248 	.word	0x20000248
 80010f8:	20000d08 	.word	0x20000d08

080010fc <GetDacA>:
uint16_t GetDacA()
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	return VDAC_A;
 8001100:	4b02      	ldr	r3, [pc, #8]	; (800110c <GetDacA+0x10>)
 8001102:	881b      	ldrh	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	20000246 	.word	0x20000246

08001110 <GetDacB>:
uint16_t GetDacB()
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	return VDAC_B;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <GetDacB+0x10>)
 8001116:	881b      	ldrh	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000248 	.word	0x20000248

08001124 <GetBtnRunState>:

uint8_t btn3_long_rd = 0;
uint8_t btn3_short_rd = 0;
//--------------------------------------------------------------------------
uint8_t GetBtnRunState()
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x00)
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <GetBtnRunState+0x7c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10b      	bne.n	8001148 <GetBtnRunState+0x24>
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <GetBtnRunState+0x80>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <GetBtnRunState+0x24>
	{
		btn1_long_rd = 0;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <GetBtnRunState+0x80>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <GetBtnRunState+0x7c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
		return 0x00;
 8001144:	2300      	movs	r3, #0
 8001146:	e026      	b.n	8001196 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x01 && btn1_long_rd == 0x00)
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <GetBtnRunState+0x7c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10b      	bne.n	8001168 <GetBtnRunState+0x44>
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <GetBtnRunState+0x80>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <GetBtnRunState+0x44>
	{
		btn1_long_rd = 0;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <GetBtnRunState+0x80>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <GetBtnRunState+0x7c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
		return 0x01;
 8001164:	2301      	movs	r3, #1
 8001166:	e016      	b.n	8001196 <GetBtnRunState+0x72>
	}
	if (btn1_short_rd == 0x00 && btn1_long_rd == 0x01)
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <GetBtnRunState+0x7c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10b      	bne.n	8001188 <GetBtnRunState+0x64>
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <GetBtnRunState+0x80>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d107      	bne.n	8001188 <GetBtnRunState+0x64>
	{
		btn1_long_rd = 0;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <GetBtnRunState+0x80>)
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
		btn1_short_rd = 0;
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <GetBtnRunState+0x7c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001184:	2302      	movs	r3, #2
 8001186:	e006      	b.n	8001196 <GetBtnRunState+0x72>
	}

	btn1_long_rd = 0;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <GetBtnRunState+0x80>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	btn1_short_rd = 0;
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <GetBtnRunState+0x7c>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

	//	if (short_state1 == 0x00 && long_state1 == 0x00)	return 0x00;
	//	if (short_state1 == 0x01 && long_state1 == 0x00)	return 0x01;
	//	if (short_state1 == 0x00 && long_state1 == 0x01)	return 0x02;
	return 0x00;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000024b 	.word	0x2000024b
 80011a4:	2000024a 	.word	0x2000024a

080011a8 <GetBtnUpState>:
//--------------------------------------------------------------------------
uint8_t GetBtnUpState()
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x00)
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <GetBtnUpState+0x7c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10b      	bne.n	80011cc <GetBtnUpState+0x24>
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <GetBtnUpState+0x80>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <GetBtnUpState+0x24>
	{
		btn2_long_rd = 0;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <GetBtnUpState+0x80>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <GetBtnUpState+0x7c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
		return 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e026      	b.n	800121a <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x01 && btn2_long_rd == 0x00)
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <GetBtnUpState+0x7c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d10b      	bne.n	80011ec <GetBtnUpState+0x44>
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <GetBtnUpState+0x80>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <GetBtnUpState+0x44>
	{
		btn2_long_rd = 0;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <GetBtnUpState+0x80>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <GetBtnUpState+0x7c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
		return 0x01;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e016      	b.n	800121a <GetBtnUpState+0x72>
	}
	if (btn2_short_rd == 0x00 && btn2_long_rd == 0x01)
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <GetBtnUpState+0x7c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10b      	bne.n	800120c <GetBtnUpState+0x64>
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <GetBtnUpState+0x80>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d107      	bne.n	800120c <GetBtnUpState+0x64>
	{
		btn2_long_rd = 0;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <GetBtnUpState+0x80>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
		btn2_short_rd = 0;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <GetBtnUpState+0x7c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		return 0x02;
 8001208:	2302      	movs	r3, #2
 800120a:	e006      	b.n	800121a <GetBtnUpState+0x72>
	}

	btn2_long_rd = 0;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <GetBtnUpState+0x80>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
	btn2_short_rd = 0;
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <GetBtnUpState+0x7c>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	//	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	//	if (short_state2 == 0x00 && long_state2 == 0x00)	return 0x00;
	//	if (short_state2 == 0x01 && long_state2 == 0x00)	return 0x01;
	//	if (short_state2 == 0x00 && long_state2 == 0x01)	return 0x02;
	return 0x00;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000024d 	.word	0x2000024d
 8001228:	2000024c 	.word	0x2000024c

0800122c <GetBtnDownState>:
//--------------------------------------------------------------------------
uint8_t GetBtnDownState()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	// 0x00 - не нажата; 0x01 - короткое нажатие; 0x02 - длительное нажатие
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x00)
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <GetBtnDownState+0x7c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <GetBtnDownState+0x24>
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <GetBtnDownState+0x80>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <GetBtnDownState+0x24>
	{
		btn3_long_rd = 0;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <GetBtnDownState+0x80>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <GetBtnDownState+0x7c>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
		return 0x00;
 800124c:	2300      	movs	r3, #0
 800124e:	e026      	b.n	800129e <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x01 && btn3_long_rd == 0x00)
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <GetBtnDownState+0x7c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10b      	bne.n	8001270 <GetBtnDownState+0x44>
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <GetBtnDownState+0x80>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <GetBtnDownState+0x44>
	{
		btn3_long_rd = 0;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <GetBtnDownState+0x80>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <GetBtnDownState+0x7c>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		return 0x01;
 800126c:	2301      	movs	r3, #1
 800126e:	e016      	b.n	800129e <GetBtnDownState+0x72>
	}
	if (btn3_short_rd == 0x00 && btn3_long_rd == 0x01)
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <GetBtnDownState+0x7c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10b      	bne.n	8001290 <GetBtnDownState+0x64>
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <GetBtnDownState+0x80>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <GetBtnDownState+0x64>
	{
		btn3_long_rd = 0;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <GetBtnDownState+0x80>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
		btn3_short_rd = 0;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <GetBtnDownState+0x7c>)
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
		return 0x02;
 800128c:	2302      	movs	r3, #2
 800128e:	e006      	b.n	800129e <GetBtnDownState+0x72>
	}

	btn3_long_rd = 0;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <GetBtnDownState+0x80>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
	btn3_short_rd = 0;
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <GetBtnDownState+0x7c>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	//	if (short_state3 == 0x00 && long_state3 == 0x00)	return 0x00;
	//	if (short_state3 == 0x01 && long_state3 == 0x00)	return 0x01;
	//	if (short_state3 == 0x00 && long_state3 == 0x01)	return 0x02;
	return 0x00;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	2000024f 	.word	0x2000024f
 80012ac:	2000024e 	.word	0x2000024e

080012b0 <EnableTIM3_PB4>:
// char trans2_str[64] = {
// 	0,
// };
//--------------------------------------------------------------------------
void EnableTIM3_PB4(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
	timWork = 1;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <EnableTIM3_PB4+0x14>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000250 	.word	0x20000250

080012c8 <GetTIM3>:
uint16_t GetTIM3(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	return g_vTIM3_PB4;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <GetTIM3+0x14>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000252 	.word	0x20000252

080012e0 <resValTIM3_PB4>:
void resValTIM3_PB4(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	g_vTIM3_PB4 = 0;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <resValTIM3_PB4+0x14>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	801a      	strh	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000252 	.word	0x20000252

080012f8 <EnableTIM4_PB6>:
//--------------------------------------------------------------------------
void EnableTIM4_PB6()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	timWork = 0;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <EnableTIM4_PB6+0x14>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000250 	.word	0x20000250

08001310 <GetTIM4>:
uint16_t GetTIM4()
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return g_vTIM4_PB6;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <GetTIM4+0x14>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000254 	.word	0x20000254

08001328 <resValTIM4_PB6>:
void resValTIM4_PB6()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	g_vTIM4_PB6 = 0;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <resValTIM4_PB6+0x14>)
 800132e:	2200      	movs	r2, #0
 8001330:	801a      	strh	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000254 	.word	0x20000254

08001340 <HAL_TIM_IC_CaptureCallback>:
//--------------------------------------------------------------------------
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (timWork)
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d027      	beq.n	80013a2 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Instance == TIM3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d149      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0xb0>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7f1b      	ldrb	r3, [r3, #28]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d145      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0xb0>
			{
				periodTIM3 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4826      	ldr	r0, [pc, #152]	; (8001400 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001368:	f005 f8fa 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 800136c:	4603      	mov	r3, r0
 800136e:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3 = HAL_TIM_ReadCapturedValue(&htim3,
 8001370:	2104      	movs	r1, #4
 8001372:	4823      	ldr	r0, [pc, #140]	; (8001400 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001374:	f005 f8f4 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 8001378:	4603      	mov	r3, r0
 800137a:	81fb      	strh	r3, [r7, #14]
														   TIM_CHANNEL_2);

				TIM3->CNT = 0;
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HAL_TIM_IC_CaptureCallback+0xbc>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3 = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8001382:	8a3a      	ldrh	r2, [r7, #16]
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	81bb      	strh	r3, [r7, #12]
				deltaTIM3 = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 800138c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	bfb8      	it	lt
 8001394:	425b      	neglt	r3, r3
 8001396:	b29b      	uxth	r3, r3
 8001398:	81bb      	strh	r3, [r7, #12]
				g_vTIM3_PB4 = deltaTIM3;
 800139a:	89ba      	ldrh	r2, [r7, #12]
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800139e:	801a      	strh	r2, [r3, #0]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				g_vTIM4_PB6 = deltaTIM4;
			}
		}
	}
}
 80013a0:	e026      	b.n	80013f0 <HAL_TIM_IC_CaptureCallback+0xb0>
		if (htim->Instance == TIM4)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d121      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0xb0>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7f1b      	ldrb	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11d      	bne.n	80013f0 <HAL_TIM_IC_CaptureCallback+0xb0>
				periodTIM4 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80013b4:	2100      	movs	r1, #0
 80013b6:	4815      	ldr	r0, [pc, #84]	; (800140c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80013b8:	f005 f8d2 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 80013bc:	4603      	mov	r3, r0
 80013be:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4 = HAL_TIM_ReadCapturedValue(&htim4,
 80013c0:	2104      	movs	r1, #4
 80013c2:	4812      	ldr	r0, [pc, #72]	; (800140c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80013c4:	f005 f8cc 	bl	8006560 <HAL_TIM_ReadCapturedValue>
 80013c8:	4603      	mov	r3, r0
 80013ca:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4 = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 80013d2:	8afa      	ldrh	r2, [r7, #22]
 80013d4:	8abb      	ldrh	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b29b      	uxth	r3, r3
 80013da:	827b      	strh	r3, [r7, #18]
				deltaTIM4 = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 80013dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bfb8      	it	lt
 80013e4:	425b      	neglt	r3, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	827b      	strh	r3, [r7, #18]
				g_vTIM4_PB6 = deltaTIM4;
 80013ea:	8a7a      	ldrh	r2, [r7, #18]
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80013ee:	801a      	strh	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000250 	.word	0x20000250
 80013fc:	40000400 	.word	0x40000400
 8001400:	20000c90 	.word	0x20000c90
 8001404:	20000252 	.word	0x20000252
 8001408:	40000800 	.word	0x40000800
 800140c:	20000488 	.word	0x20000488
 8001410:	20000254 	.word	0x20000254

08001414 <GetADC>:
//**************************************************************************
#if TEST_ADC
volatile uint16_t g_VADC = 0;

uint16_t GetADC()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	return g_VADC;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <GetADC+0x14>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000256 	.word	0x20000256

0800142c <HAL_ADC_ConvCpltCallback>:
//--------------------------------------------------------------------------
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_ADC_ConvCpltCallback+0x28>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d106      	bne.n	800144c <HAL_ADC_ConvCpltCallback+0x20>
	{
		g_VADC = HAL_ADC_GetValue(&hadc1); // глобальная переменна g_VADC вычитывается
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001440:	f001 fa2a 	bl	8002898 <HAL_ADC_GetValue>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_ADC_ConvCpltCallback+0x30>)
 800144a:	801a      	strh	r2, [r3, #0]
	}
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40012400 	.word	0x40012400
 8001458:	20000cd8 	.word	0x20000cd8
 800145c:	20000256 	.word	0x20000256

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f001 f828 	bl	80024b8 <HAL_Init>

  /* USER CODE BEGIN Init */

/*---------------------------------------------------------------------------*/
#if DWT_INIT
	DWT_Init();
 8001468:	f7ff fdc4 	bl	8000ff4 <DWT_Init>
#endif /* DWT_INIT */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f836 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 f9e0 	bl	8001834 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001474:	f000 f8e2 	bl	800163c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001478:	f008 ff02 	bl	800a280 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800147c:	f000 f88c 	bl	8001598 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001480:	f000 f914 	bl	80016ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001484:	f000 f974 	bl	8001770 <MX_TIM4_Init>
  MX_CRC_Init();
 8001488:	f000 f8c4 	bl	8001614 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

/*---------------------------------------------------------------------------*/

#if TEST_TIM_CAPTURE
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800148c:	2100      	movs	r1, #0
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <main+0x6c>)
 8001490:	f004 fdc4 	bl	800601c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001494:	2104      	movs	r1, #4
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <main+0x6c>)
 8001498:	f004 fdc0 	bl	800601c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <main+0x70>)
 80014a0:	f004 fdbc 	bl	800601c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <main+0x70>)
 80014a8:	f004 fdb8 	bl	800601c <HAL_TIM_IC_Start_IT>
#endif /* TEST_TIM_CAPTURE */

/*---------------------------------------------------------------------------*/

#if TEST_DAC
  SetAllDAC();
 80014ac:	f7ff fe14 	bl	80010d8 <SetAllDAC>
#endif /* TEST_DAC */

/*---------------------------------------------------------------------------*/

#if TEST_ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <main+0x74>)
 80014b2:	f001 fc4d 	bl	8002d50 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <main+0x74>)
 80014b8:	f001 f938 	bl	800272c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    if ( usb_rx_data.is_received == true ) {
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <main+0x78>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0fb      	beq.n	80014bc <main+0x5c>
	        usb_rx_handler(&usb_rx_data);
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <main+0x78>)
 80014c6:	f000 fcdb 	bl	8001e80 <usb_rx_handler>
	    if ( usb_rx_data.is_received == true ) {
 80014ca:	e7f7      	b.n	80014bc <main+0x5c>
 80014cc:	20000c90 	.word	0x20000c90
 80014d0:	20000488 	.word	0x20000488
 80014d4:	20000cd8 	.word	0x20000cd8
 80014d8:	20000000 	.word	0x20000000

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f009 fbd0 	bl	800ac90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001528:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	4618      	mov	r0, r3
 8001534:	f003 fd3c 	bl	8004fb0 <HAL_RCC_OscConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800153e:	f000 fa2f 	bl	80019a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001542:	230f      	movs	r3, #15
 8001544:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001552:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2102      	movs	r1, #2
 800155e:	4618      	mov	r0, r3
 8001560:	f003 ffa6 	bl	80054b0 <HAL_RCC_ClockConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800156a:	f000 fa19 	bl	80019a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800156e:	2312      	movs	r3, #18
 8001570:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001576:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f004 f91c 	bl	80057bc <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800158a:	f000 fa09 	bl	80019a0 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	; 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_ADC1_Init+0x74>)
 80015aa:	4a19      	ldr	r2, [pc, #100]	; (8001610 <MX_ADC1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <MX_ADC1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_ADC1_Init+0x74>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <MX_ADC1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_ADC1_Init+0x74>)
 80015c2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80015c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_ADC1_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_ADC1_Init+0x74>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_ADC1_Init+0x74>)
 80015d6:	f000 ffd1 	bl	800257c <HAL_ADC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 f9de 	bl	80019a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015e4:	2303      	movs	r3, #3
 80015e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_ADC1_Init+0x74>)
 80015f6:	f001 fa27 	bl	8002a48 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001600:	f000 f9ce 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000cd8 	.word	0x20000cd8
 8001610:	40012400 	.word	0x40012400

08001614 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_CRC_Init+0x20>)
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <MX_CRC_Init+0x24>)
 800161c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_CRC_Init+0x20>)
 8001620:	f001 fd49 	bl	80030b6 <HAL_CRC_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800162a:	f000 f9b9 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000c88 	.word	0x20000c88
 8001638:	40023000 	.word	0x40023000

0800163c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001642:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <MX_SPI1_Init+0x6c>)
 8001644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800164c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <MX_SPI1_Init+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <MX_SPI1_Init+0x68>)
 800166a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001670:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001672:	2208      	movs	r2, #8
 8001674:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <MX_SPI1_Init+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <MX_SPI1_Init+0x68>)
 800168a:	220a      	movs	r2, #10
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_SPI1_Init+0x68>)
 8001690:	f004 fa0e 	bl	8005ab0 <HAL_SPI_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800169a:	f000 f981 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000d08 	.word	0x20000d08
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b2:	f107 0310 	add.w	r3, r7, #16
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016ca:	4a28      	ldr	r2, [pc, #160]	; (800176c <MX_TIM3_Init+0xc0>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016d0:	2247      	movs	r2, #71	; 0x47
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016dc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80016e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016ee:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_TIM3_Init+0xbc>)
 80016f0:	f004 fc44 	bl	8005f7c <HAL_TIM_IC_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016fa:	f000 f951 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	4619      	mov	r1, r3
 800170c:	4816      	ldr	r0, [pc, #88]	; (8001768 <MX_TIM3_Init+0xbc>)
 800170e:	f005 f923 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 f942 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800171c:	2300      	movs	r3, #0
 800171e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001720:	2301      	movs	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM3_Init+0xbc>)
 8001734:	f004 fe80 	bl	8006438 <HAL_TIM_IC_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800173e:	f000 f92f 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001742:	2302      	movs	r3, #2
 8001744:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001746:	2302      	movs	r3, #2
 8001748:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_TIM3_Init+0xbc>)
 8001752:	f004 fe71 	bl	8006438 <HAL_TIM_IC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800175c:	f000 f920 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000c90 	.word	0x20000c90
 800176c:	40000400 	.word	0x40000400

08001770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001780:	463b      	mov	r3, r7
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <MX_TIM4_Init+0xbc>)
 800178e:	4a28      	ldr	r2, [pc, #160]	; (8001830 <MX_TIM4_Init+0xc0>)
 8001790:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001792:	4b26      	ldr	r3, [pc, #152]	; (800182c <MX_TIM4_Init+0xbc>)
 8001794:	2247      	movs	r2, #71	; 0x47
 8001796:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <MX_TIM4_Init+0xbc>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <MX_TIM4_Init+0xbc>)
 80017a0:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80017a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <MX_TIM4_Init+0xbc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <MX_TIM4_Init+0xbc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017b2:	481e      	ldr	r0, [pc, #120]	; (800182c <MX_TIM4_Init+0xbc>)
 80017b4:	f004 fbe2 	bl	8005f7c <HAL_TIM_IC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017be:	f000 f8ef 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	4816      	ldr	r0, [pc, #88]	; (800182c <MX_TIM4_Init+0xbc>)
 80017d2:	f005 f8c1 	bl	8006958 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80017dc:	f000 f8e0 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e0:	2300      	movs	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f0:	463b      	mov	r3, r7
 80017f2:	2200      	movs	r2, #0
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_TIM4_Init+0xbc>)
 80017f8:	f004 fe1e 	bl	8006438 <HAL_TIM_IC_ConfigChannel>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001802:	f000 f8cd 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001806:	2302      	movs	r3, #2
 8001808:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800180a:	2302      	movs	r3, #2
 800180c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	2204      	movs	r2, #4
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM4_Init+0xbc>)
 8001816:	f004 fe0f 	bl	8006438 <HAL_TIM_IC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001820:	f000 f8be 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000488 	.word	0x20000488
 8001830:	40000800 	.word	0x40000800

08001834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001848:	4b51      	ldr	r3, [pc, #324]	; (8001990 <MX_GPIO_Init+0x15c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <MX_GPIO_Init+0x15c>)
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b4e      	ldr	r3, [pc, #312]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0310 	and.w	r3, r3, #16
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001860:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001866:	f043 0320 	orr.w	r3, r3, #32
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b48      	ldr	r3, [pc, #288]	; (8001990 <MX_GPIO_Init+0x15c>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0320 	and.w	r3, r3, #32
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <MX_GPIO_Init+0x15c>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <MX_GPIO_Init+0x15c>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a3e      	ldr	r2, [pc, #248]	; (8001990 <MX_GPIO_Init+0x15c>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <MX_GPIO_Init+0x15c>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]


  // reset USB DP (D+)
  // инициализируем пин DP как выход
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4835      	ldr	r0, [pc, #212]	; (8001994 <MX_GPIO_Init+0x160>)
 80018be:	f001 fe49 	bl	8003554 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // прижимаем DP к "земле"
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c8:	4832      	ldr	r0, [pc, #200]	; (8001994 <MX_GPIO_Init+0x160>)
 80018ca:	f001 ffc7 	bl	800385c <HAL_GPIO_WritePin>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80018ce:	2300      	movs	r3, #0
 80018d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018d2:	e002      	b.n	80018da <MX_GPIO_Init+0xa6>
 80018d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018d6:	3301      	adds	r3, #1
 80018d8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d9f7      	bls.n	80018d4 <MX_GPIO_Init+0xa0>

  // переинициализируем пин для работы с USB
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4828      	ldr	r0, [pc, #160]	; (8001994 <MX_GPIO_Init+0x160>)
 80018f4:	f001 fe2e 	bl	8003554 <HAL_GPIO_Init>
  for(uint16_t i = 0; i < 10000; i++) {}; // немного ждём
 80018f8:	2300      	movs	r3, #0
 80018fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80018fc:	e002      	b.n	8001904 <MX_GPIO_Init+0xd0>
 80018fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001900:	3301      	adds	r3, #1
 8001902:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001906:	f242 720f 	movw	r2, #9999	; 0x270f
 800190a:	4293      	cmp	r3, r2
 800190c:	d9f7      	bls.n	80018fe <MX_GPIO_Init+0xca>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	4820      	ldr	r0, [pc, #128]	; (8001998 <MX_GPIO_Init+0x164>)
 8001916:	f001 ffa1 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f240 4112 	movw	r1, #1042	; 0x412
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <MX_GPIO_Init+0x160>)
 8001922:	f001 ff9b 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001926:	2201      	movs	r2, #1
 8001928:	2104      	movs	r1, #4
 800192a:	481a      	ldr	r0, [pc, #104]	; (8001994 <MX_GPIO_Init+0x160>)
 800192c:	f001 ff96 	bl	800385c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4813      	ldr	r0, [pc, #76]	; (8001998 <MX_GPIO_Init+0x164>)
 800194a:	f001 fe03 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 800194e:	f240 4316 	movw	r3, #1046	; 0x416
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <MX_GPIO_Init+0x160>)
 8001968:	f001 fdf4 	bl	8003554 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800196c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_GPIO_Init+0x168>)
 8001982:	f001 fde7 	bl	8003554 <HAL_GPIO_Init>

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40010800 	.word	0x40010800
 8001998:	40011000 	.word	0x40011000
 800199c:	40010c00 	.word	0x40010c00

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_MspInit+0x5c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6193      	str	r3, [r2, #24]
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_MspInit+0x5c>)
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_MspInit+0x5c>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	61d3      	str	r3, [r2, #28]
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_MspInit+0x5c>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_MspInit+0x60>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_MspInit+0x60>)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <HAL_ADC_MspInit+0x7c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d129      	bne.n	8001a84 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a60:	2308      	movs	r3, #8
 8001a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <HAL_ADC_MspInit+0x84>)
 8001a70:	f001 fd70 	bl	8003554 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2012      	movs	r0, #18
 8001a7a:	f001 fae6 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a7e:	2012      	movs	r0, #18
 8001a80:	f001 faff 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40012400 	.word	0x40012400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010800 	.word	0x40010800

08001a98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_CRC_MspInit+0x34>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_CRC_MspInit+0x38>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_CRC_MspInit+0x38>)
 8001ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ab4:	6153      	str	r3, [r2, #20]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_CRC_MspInit+0x38>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40023000 	.word	0x40023000
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_SPI_MspInit+0x70>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d123      	bne.n	8001b3c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8001b24:	23a0      	movs	r3, #160	; 0xa0
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_SPI_MspInit+0x78>)
 8001b38:	f001 fd0c 	bl	8003554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40013000 	.word	0x40013000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800

08001b50 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	; 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_TIM_IC_MspInit+0x108>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d13e      	bne.n	8001bee <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	4a39      	ldr	r2, [pc, #228]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b76:	f043 0302 	orr.w	r3, r3, #2
 8001b7a:	61d3      	str	r3, [r2, #28]
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	482b      	ldr	r0, [pc, #172]	; (8001c60 <HAL_TIM_IC_MspInit+0x110>)
 8001bb4:	f001 fcce 	bl	8003554 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_TIM_IC_MspInit+0x114>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_TIM_IC_MspInit+0x114>)
 8001bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bda:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2100      	movs	r1, #0
 8001be0:	201d      	movs	r0, #29
 8001be2:	f001 fa32 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001be6:	201d      	movs	r0, #29
 8001be8:	f001 fa4b 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bec:	e030      	b.n	8001c50 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_TIM_IC_MspInit+0x118>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d12b      	bne.n	8001c50 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	61d3      	str	r3, [r2, #28]
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6193      	str	r3, [r2, #24]
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_TIM_IC_MspInit+0x10c>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <HAL_TIM_IC_MspInit+0x110>)
 8001c3c:	f001 fc8a 	bl	8003554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	201e      	movs	r0, #30
 8001c46:	f001 fa00 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	f001 fa19 	bl	8003082 <HAL_NVIC_EnableIRQ>
}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40000800 	.word	0x40000800

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
//	  printf("HardFault_IRQn");
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c82:	4802      	ldr	r0, [pc, #8]	; (8001c8c <HardFault_Handler+0x14>)
 8001c84:	f001 fdea 	bl	800385c <HAL_GPIO_WritePin>
 8001c88:	e7f8      	b.n	8001c7c <HardFault_Handler+0x4>
 8001c8a:	bf00      	nop
 8001c8c:	40011000 	.word	0x40011000

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 fc3b 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <ADC1_2_IRQHandler+0x10>)
 8001cda:	f000 fde9 	bl	80028b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000cd8 	.word	0x20000cd8

08001ce8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001cee:	f001 fefe 	bl	8003aee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000164c 	.word	0x2000164c

08001cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <TIM3_IRQHandler+0x10>)
 8001d02:	f004 fa91 	bl	8006228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000c90 	.word	0x20000c90

08001d10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM4_IRQHandler+0x10>)
 8001d16:	f004 fa87 	bl	8006228 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000488 	.word	0x20000488

08001d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e00a      	b.n	8001d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d36:	f3af 8000 	nop.w
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	60ba      	str	r2, [r7, #8]
 8001d42:	b2ca      	uxtb	r2, r1
 8001d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf0      	blt.n	8001d36 <_read+0x12>
	}

return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	605a      	str	r2, [r3, #4]
	return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	return 0;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x50>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x16>
		heap_end = &end;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <_sbrk+0x50>)
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <_sbrk+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <_sbrk+0x50>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <_sbrk+0x50>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	466a      	mov	r2, sp
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d907      	bls.n	8001dfa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dea:	f008 ff19 	bl	800ac20 <__errno>
 8001dee:	4603      	mov	r3, r0
 8001df0:	220c      	movs	r2, #12
 8001df2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	e006      	b.n	8001e08 <_sbrk+0x48>
	}

	heap_end += incr;
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <_sbrk+0x50>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <_sbrk+0x50>)
 8001e04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000258 	.word	0x20000258
 8001e14:	20001948 	.word	0x20001948

08001e18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <SystemInit+0x5c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <SystemInit+0x5c>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <SystemInit+0x5c>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4911      	ldr	r1, [pc, #68]	; (8001e74 <SystemInit+0x5c>)
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <SystemInit+0x60>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <SystemInit+0x5c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <SystemInit+0x5c>)
 8001e3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <SystemInit+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SystemInit+0x5c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <SystemInit+0x5c>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <SystemInit+0x5c>)
 8001e56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001e5a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SystemInit+0x5c>)
 8001e5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001e62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SystemInit+0x64>)
 8001e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e6a:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	f8ff0000 	.word	0xf8ff0000
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <usb_rx_handler>:
 * @brief   USB package handler
 * @note    Len <= 64
 * @retval  HAL Status
 */
HAL_StatusTypeDef usb_rx_handler(usb_rx_data_type *usb)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b09d      	sub	sp, #116	; 0x74
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    if ( usb->is_received != true ||
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <usb_rx_handler+0x1e>
         usb->is_handled  != false )
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	785b      	ldrb	r3, [r3, #1]
    if ( usb->is_received != true ||
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <usb_rx_handler+0x22>
    {
        /* Если пакет ещё не принят или уже обработан, то
         * ошибка - обрабатывать либо ещё, либо уже нечего. */
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e2db      	b.n	800245a <usb_rx_handler+0x5da>
    }
    usb->is_received = false;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]

    /*-MAIN HANDLER CODE-----------------------------------------------------*/

    if ( usb->len < 1 || usb->len > 64 ) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	789b      	ldrb	r3, [r3, #2]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <usb_rx_handler+0x38>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	789b      	ldrb	r3, [r3, #2]
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	d901      	bls.n	8001ebc <usb_rx_handler+0x3c>
        /* Если размер пакета не соответствует нормальному - ошибка */
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e2ce      	b.n	800245a <usb_rx_handler+0x5da>
     * такого размера будет достаточно. */
    uint8_t     usb_tx_buff[64];
    /* 16-ти битовая переменная для установки значения ЦАП */
    uint16_t    tVal16;
    /* Переменная, содержащая текущую команду, сделана для удобства */
    uint8_t     cmd = usb->buff[0];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	78db      	ldrb	r3, [r3, #3]
 8001ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    switch (cmd) {
 8001ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	f200 82b9 	bhi.w	8002442 <usb_rx_handler+0x5c2>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <usb_rx_handler+0x58>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001f0d 	.word	0x08001f0d
 8001edc:	08001f87 	.word	0x08001f87
 8001ee0:	08001fd5 	.word	0x08001fd5
 8001ee4:	08002023 	.word	0x08002023
 8001ee8:	08002049 	.word	0x08002049
 8001eec:	08002087 	.word	0x08002087
 8001ef0:	080020b3 	.word	0x080020b3
 8001ef4:	08002113 	.word	0x08002113
 8001ef8:	0800213d 	.word	0x0800213d
 8001efc:	08002167 	.word	0x08002167
 8001f00:	0800244d 	.word	0x0800244d
 8001f04:	0800244d 	.word	0x0800244d
 8001f08:	08002405 	.word	0x08002405
        /* Команда включения реле */
        case 0x01 :
            if ( usb->len >= 2 && (usb->buff[1] == 0x01 || usb->buff[1] == 0x00) ) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	789b      	ldrb	r3, [r3, #2]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d92c      	bls.n	8001f6e <usb_rx_handler+0xee>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	791b      	ldrb	r3, [r3, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d003      	beq.n	8001f24 <usb_rx_handler+0xa4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	791b      	ldrb	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d124      	bne.n	8001f6e <usb_rx_handler+0xee>

                HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2104      	movs	r1, #4
 8001f28:	48ca      	ldr	r0, [pc, #808]	; (8002254 <usb_rx_handler+0x3d4>)
 8001f2a:	f001 fc97 	bl	800385c <HAL_GPIO_WritePin>

                if ( usb->buff[1] == 0x01 ) {
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d109      	bne.n	8001f4a <usb_rx_handler+0xca>
                    RelayState = m12;
 8001f36:	4bc8      	ldr	r3, [pc, #800]	; (8002258 <usb_rx_handler+0x3d8>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:12V - %d \n", RelayState);
 8001f3c:	4bc6      	ldr	r3, [pc, #792]	; (8002258 <usb_rx_handler+0x3d8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	48c6      	ldr	r0, [pc, #792]	; (800225c <usb_rx_handler+0x3dc>)
 8001f44:	f008 feac 	bl	800aca0 <iprintf>
 8001f48:	e00c      	b.n	8001f64 <usb_rx_handler+0xe4>
                }
                else if (usb->buff[1] == 0x00) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	791b      	ldrb	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <usb_rx_handler+0xe4>
                    RelayState = m27;
 8001f52:	4bc1      	ldr	r3, [pc, #772]	; (8002258 <usb_rx_handler+0x3d8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:27V - %d \n", RelayState);
 8001f58:	4bbf      	ldr	r3, [pc, #764]	; (8002258 <usb_rx_handler+0x3d8>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	48c0      	ldr	r0, [pc, #768]	; (8002260 <usb_rx_handler+0x3e0>)
 8001f60:	f008 fe9e 	bl	800aca0 <iprintf>
                }
                SetAllDAC();
 8001f64:	f7ff f8b8 	bl	80010d8 <SetAllDAC>
                usb_tx_buff[1] = 0x00; // успешно
 8001f68:	2300      	movs	r3, #0
 8001f6a:	777b      	strb	r3, [r7, #29]
 8001f6c:	e001      	b.n	8001f72 <usb_rx_handler+0xf2>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001f6e:	2301      	movs	r3, #1
 8001f70:	777b      	strb	r3, [r7, #29]
            }

            usb_tx_buff[0] = cmd;
 8001f72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001f76:	773b      	strb	r3, [r7, #28]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f008 fa70 	bl	800a464 <CDC_Transmit_FS>
            break;
 8001f84:	e265      	b.n	8002452 <usb_rx_handler+0x5d2>

        /* Команда калибровки ЦАП А */
        case 0x02 :
            if (usb->len >= 3) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	789b      	ldrb	r3, [r3, #2]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d916      	bls.n	8001fbc <usb_rx_handler+0x13c>
                resValTIM3_PB4(); // обнуление переменной для проведения калибровки
 8001f8e:	f7ff f9a7 	bl	80012e0 <resValTIM3_PB4>
                resValTIM4_PB6(); // обнуление переменной для проведения калибровки
 8001f92:	f7ff f9c9 	bl	8001328 <resValTIM4_PB6>
                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3303      	adds	r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	837b      	strh	r3, [r7, #26]
                SetDacA(tVal16);
 8001fa2:	8b7b      	ldrh	r3, [r7, #26]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff f856 	bl	8001058 <SetDacA>
                printf("DacA: %d\n", tVal16);
 8001fac:	8b7b      	ldrh	r3, [r7, #26]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	48ac      	ldr	r0, [pc, #688]	; (8002264 <usb_rx_handler+0x3e4>)
 8001fb2:	f008 fe75 	bl	800aca0 <iprintf>

                usb_tx_buff[1] = 0x00; // успешно
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	777b      	strb	r3, [r7, #29]
 8001fba:	e001      	b.n	8001fc0 <usb_rx_handler+0x140>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	777b      	strb	r3, [r7, #29]
            }
            usb_tx_buff[0] = cmd;
 8001fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001fc4:	773b      	strb	r3, [r7, #28]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f008 fa49 	bl	800a464 <CDC_Transmit_FS>
            break;
 8001fd2:	e23e      	b.n	8002452 <usb_rx_handler+0x5d2>

        /* Команда калибровки ЦАП В */
        case 0x03 :
            if (usb->len >= 3) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	789b      	ldrb	r3, [r3, #2]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d916      	bls.n	800200a <usb_rx_handler+0x18a>
                resValTIM3_PB4(); // обнуление переменной для проведения калиброки
 8001fdc:	f7ff f980 	bl	80012e0 <resValTIM3_PB4>
                resValTIM4_PB6(); // обнуление переменной для проведения калиброки
 8001fe0:	f7ff f9a2 	bl	8001328 <resValTIM4_PB6>
                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	837b      	strh	r3, [r7, #26]
                SetDacB(tVal16);
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff f84f 	bl	8001098 <SetDacB>
                printf("DacB: %d \n", tVal16);
 8001ffa:	8b7b      	ldrh	r3, [r7, #26]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	489a      	ldr	r0, [pc, #616]	; (8002268 <usb_rx_handler+0x3e8>)
 8002000:	f008 fe4e 	bl	800aca0 <iprintf>

                usb_tx_buff[1] = 0x00; // успешно
 8002004:	2300      	movs	r3, #0
 8002006:	777b      	strb	r3, [r7, #29]
 8002008:	e001      	b.n	800200e <usb_rx_handler+0x18e>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 800200a:	2301      	movs	r3, #1
 800200c:	777b      	strb	r3, [r7, #29]
            }
            usb_tx_buff[0] = cmd;
 800200e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002012:	773b      	strb	r3, [r7, #28]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f008 fa22 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002020:	e217      	b.n	8002452 <usb_rx_handler+0x5d2>

        /* Команда запроса значения АЦП */
        case 0x04 :
            tVal16 = GetADC();
 8002022:	f7ff f9f7 	bl	8001414 <GetADC>
 8002026:	4603      	mov	r3, r0
 8002028:	837b      	strh	r3, [r7, #26]
            usb_tx_buff[0] = cmd;
 800202a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800202e:	773b      	strb	r3, [r7, #28]
            memcpy(usb_tx_buff + 1, &tVal16, sizeof(tVal16));
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	3301      	adds	r3, #1
 8002036:	8b7a      	ldrh	r2, [r7, #26]
 8002038:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 3);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	2103      	movs	r1, #3
 8002040:	4618      	mov	r0, r3
 8002042:	f008 fa0f 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002046:	e204      	b.n	8002452 <usb_rx_handler+0x5d2>

        /* Команда запроса состояния ЦАПов */
        case 0x05 :
            usb_tx_buff[0] = cmd;
 8002048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800204c:	773b      	strb	r3, [r7, #28]
            usb_tx_buff[1] = RelayState;
 800204e:	4b82      	ldr	r3, [pc, #520]	; (8002258 <usb_rx_handler+0x3d8>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	777b      	strb	r3, [r7, #29]

            tVal16 = GetDacA();
 8002054:	f7ff f852 	bl	80010fc <GetDacA>
 8002058:	4603      	mov	r3, r0
 800205a:	837b      	strh	r3, [r7, #26]
            memcpy(usb_tx_buff + 2, &tVal16, sizeof(tVal16));
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	3302      	adds	r3, #2
 8002062:	8b7a      	ldrh	r2, [r7, #26]
 8002064:	801a      	strh	r2, [r3, #0]

            tVal16 = GetDacB();
 8002066:	f7ff f853 	bl	8001110 <GetDacB>
 800206a:	4603      	mov	r3, r0
 800206c:	837b      	strh	r3, [r7, #26]
            memcpy(usb_tx_buff + 4, &tVal16, sizeof(tVal16));
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	3304      	adds	r3, #4
 8002074:	8b7a      	ldrh	r2, [r7, #26]
 8002076:	801a      	strh	r2, [r3, #0]

            CDC_Transmit_FS(usb_tx_buff, 6);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2106      	movs	r1, #6
 800207e:	4618      	mov	r0, r3
 8002080:	f008 f9f0 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002084:	e1e5      	b.n	8002452 <usb_rx_handler+0x5d2>

        /* Команда запроса состояния кнопок */
        case 0x06 :
            usb_tx_buff[0] = cmd;
 8002086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800208a:	773b      	strb	r3, [r7, #28]
            usb_tx_buff[1] = GetBtnRunState();
 800208c:	f7ff f84a 	bl	8001124 <GetBtnRunState>
 8002090:	4603      	mov	r3, r0
 8002092:	777b      	strb	r3, [r7, #29]
            usb_tx_buff[2] = GetBtnUpState();
 8002094:	f7ff f888 	bl	80011a8 <GetBtnUpState>
 8002098:	4603      	mov	r3, r0
 800209a:	77bb      	strb	r3, [r7, #30]
            usb_tx_buff[3] = GetBtnDownState();
 800209c:	f7ff f8c6 	bl	800122c <GetBtnDownState>
 80020a0:	4603      	mov	r3, r0
 80020a2:	77fb      	strb	r3, [r7, #31]
            CDC_Transmit_FS(usb_tx_buff, 4);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	2104      	movs	r1, #4
 80020aa:	4618      	mov	r0, r3
 80020ac:	f008 f9da 	bl	800a464 <CDC_Transmit_FS>
            break;
 80020b0:	e1cf      	b.n	8002452 <usb_rx_handler+0x5d2>
            };
            memcpy(str, "SN", strlen("SN"));
            itoa(SN_DEFINE, str + 2, 16);
            */

            char str[] = {"prb_v0.3"};
 80020b2:	4a6e      	ldr	r2, [pc, #440]	; (800226c <usb_rx_handler+0x3ec>)
 80020b4:	f107 0310 	add.w	r3, r7, #16
 80020b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ba:	c303      	stmia	r3!, {r0, r1}
 80020bc:	701a      	strb	r2, [r3, #0]

            usb_tx_buff[0] = cmd;
 80020be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80020c2:	773b      	strb	r3, [r7, #28]
            usb_tx_buff[1] = strlen(str);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe f841 	bl	8000150 <strlen>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	777b      	strb	r3, [r7, #29]
            memcpy(usb_tx_buff + 2, str, strlen(str));
 80020d4:	f107 041c 	add.w	r4, r7, #28
 80020d8:	3402      	adds	r4, #2
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f836 	bl	8000150 <strlen>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	4620      	mov	r0, r4
 80020ee:	f008 fdc1 	bl	800ac74 <memcpy>
            CDC_Transmit_FS(usb_tx_buff, strlen(str) + 2);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f82a 	bl	8000150 <strlen>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3302      	adds	r3, #2
 8002102:	b29a      	uxth	r2, r3
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f008 f9aa 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002110:	e19f      	b.n	8002452 <usb_rx_handler+0x5d2>
        }

        /* Команда запроса измеренной длительности */
        case 0x08 :
        {
            EnableTIM3_PB4();
 8002112:	f7ff f8cd 	bl	80012b0 <EnableTIM3_PB4>
            uint16_t temp = GetTIM3();
 8002116:	f7ff f8d7 	bl	80012c8 <GetTIM3>
 800211a:	4603      	mov	r3, r0
 800211c:	81fb      	strh	r3, [r7, #14]
            usb_tx_buff[0] = cmd;
 800211e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002122:	773b      	strb	r3, [r7, #28]
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	3301      	adds	r3, #1
 800212a:	89fa      	ldrh	r2, [r7, #14]
 800212c:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	2103      	movs	r1, #3
 8002134:	4618      	mov	r0, r3
 8002136:	f008 f995 	bl	800a464 <CDC_Transmit_FS>
            break;
 800213a:	e18a      	b.n	8002452 <usb_rx_handler+0x5d2>
        }

        /* Команда запроса измеренной длительности */
        case 0x09 :
        {
            EnableTIM4_PB6();
 800213c:	f7ff f8dc 	bl	80012f8 <EnableTIM4_PB6>
            uint16_t temp = GetTIM4();
 8002140:	f7ff f8e6 	bl	8001310 <GetTIM4>
 8002144:	4603      	mov	r3, r0
 8002146:	81bb      	strh	r3, [r7, #12]
            usb_tx_buff[0] = cmd;
 8002148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800214c:	773b      	strb	r3, [r7, #28]
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	3301      	adds	r3, #1
 8002154:	89ba      	ldrh	r2, [r7, #12]
 8002156:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	2103      	movs	r1, #3
 800215e:	4618      	mov	r0, r3
 8002160:	f008 f980 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002164:	e175      	b.n	8002452 <usb_rx_handler+0x5d2>
        case 0x0A :
        {
            /* Константа для обозначения максимального количества передаваемых значений.
             * Определяется максимальным количеством байт, передаваемых по USB за раз.
             * (64(всего) - 6(команда))/2(так как числа 2-х байтовые) = 29*/
            const uint8_t usb_max_calib_value = 29;
 8002166:	231d      	movs	r3, #29
 8002168:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
            /* Значение для ответа на команду, 0х00 - успешное выполнение */
            usb_tx_buff[6] = 0x00;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            /* В буффер для отправки ответа заносим номер таблицы */
            usb_tx_buff[1] = usb->buff[1];
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	777b      	strb	r3, [r7, #29]
            /* dataStartNumber  - номер ячейки, с которой начинается запись
             * dataEndNumber    - номер последней ячейки, в которую должны записываться данные
             * dataOffset       - разница между ними */
            uint16_t dataStartNumber, dataEndNumber, dataOffset;

            memcpy(&dataStartNumber, &usb->buff[2], sizeof(uint16_t));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3305      	adds	r3, #5
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	817b      	strh	r3, [r7, #10]
            memcpy(&dataOffset, &usb->buff[4], sizeof(uint16_t));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3307      	adds	r3, #7
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	813b      	strh	r3, [r7, #8]
            dataEndNumber = dataStartNumber + dataOffset;
 800218c:	897a      	ldrh	r2, [r7, #10]
 800218e:	893b      	ldrh	r3, [r7, #8]
 8002190:	4413      	add	r3, r2
 8002192:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

            switch (usb->buff[1]) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	2b03      	cmp	r3, #3
 800219c:	f200 8110 	bhi.w	80023c0 <usb_rx_handler+0x540>
 80021a0:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <usb_rx_handler+0x328>)
 80021a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a6:	bf00      	nop
 80021a8:	080021b9 	.word	0x080021b9
 80021ac:	08002233 	.word	0x08002233
 80021b0:	080022cd 	.word	0x080022cd
 80021b4:	08002347 	.word	0x08002347
                case 0x00 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	2b87      	cmp	r3, #135	; 0x87
 80021bc:	d809      	bhi.n	80021d2 <usb_rx_handler+0x352>
 80021be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80021c2:	2b88      	cmp	r3, #136	; 0x88
 80021c4:	d805      	bhi.n	80021d2 <usb_rx_handler+0x352>
                        dataEndNumber > MAX_VAL_M12    ||
                        dataOffset > usb_max_calib_value) {
 80021c6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	893b      	ldrh	r3, [r7, #8]
                        dataEndNumber > MAX_VAL_M12    ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d203      	bcs.n	80021da <usb_rx_handler+0x35a>
                        usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80021d2:	2301      	movs	r3, #1
 80021d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                        break;
 80021d8:	e0fd      	b.n	80023d6 <usb_rx_handler+0x556>
                    }

                    uint8_t i_usb    = 6;
 80021da:	2306      	movs	r3, #6
 80021dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                    uint16_t i_calib = dataStartNumber;
 80021e0:	897b      	ldrh	r3, [r7, #10]
 80021e2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80021e6:	e018      	b.n	800221a <usb_rx_handler+0x39a>

                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 80021e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80021ec:	3304      	adds	r3, #4
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <usb_rx_handler+0x3f0>)
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
                                &usb->buff[i_usb],
 80021f6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	440a      	add	r2, r1
 80021fe:	3203      	adds	r2, #3
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	b292      	uxth	r2, r2
                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 8002204:	801a      	strh	r2, [r3, #0]
                                sizeof(uint16_t) );

                        i_usb   += 2;
 8002206:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800220a:	3302      	adds	r3, #2
 800220c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                        i_calib += 1;
 8002210:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002214:	3301      	adds	r3, #1
 8002216:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800221a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800221e:	2b3f      	cmp	r3, #63	; 0x3f
 8002220:	f200 80d2 	bhi.w	80023c8 <usb_rx_handler+0x548>
 8002224:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8002228:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800222c:	429a      	cmp	r2, r3
 800222e:	d3db      	bcc.n	80021e8 <usb_rx_handler+0x368>
                    }
                    break;
 8002230:	e0ca      	b.n	80023c8 <usb_rx_handler+0x548>

                }
                case 0x01 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	2b87      	cmp	r3, #135	; 0x87
 8002236:	d809      	bhi.n	800224c <usb_rx_handler+0x3cc>
 8002238:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800223c:	2b88      	cmp	r3, #136	; 0x88
 800223e:	d805      	bhi.n	800224c <usb_rx_handler+0x3cc>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 8002240:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002244:	b29a      	uxth	r2, r3
 8002246:	893b      	ldrh	r3, [r7, #8]
                         dataEndNumber > MAX_VAL_M12    ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d213      	bcs.n	8002274 <usb_rx_handler+0x3f4>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                         break;
 8002252:	e0c0      	b.n	80023d6 <usb_rx_handler+0x556>
 8002254:	40010800 	.word	0x40010800
 8002258:	20000043 	.word	0x20000043
 800225c:	0800bc78 	.word	0x0800bc78
 8002260:	0800bc90 	.word	0x0800bc90
 8002264:	0800bca8 	.word	0x0800bca8
 8002268:	0800bcb4 	.word	0x0800bcb4
 800226c:	0800bcc0 	.word	0x0800bcc0
 8002270:	200004d0 	.word	0x200004d0
                     }

                     uint8_t i_usb    = 6;
 8002274:	2306      	movs	r3, #6
 8002276:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                     uint16_t i_calib = dataStartNumber;
 800227a:	897b      	ldrh	r3, [r7, #10]
 800227c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8002280:	e018      	b.n	80022b4 <usb_rx_handler+0x434>

                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 8002282:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002286:	338c      	adds	r3, #140	; 0x8c
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4a76      	ldr	r2, [pc, #472]	; (8002464 <usb_rx_handler+0x5e4>)
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 8002290:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	440a      	add	r2, r1
 8002298:	3203      	adds	r2, #3
 800229a:	8812      	ldrh	r2, [r2, #0]
 800229c:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 800229e:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 80022a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80022a4:	3302      	adds	r3, #2
 80022a6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                         i_calib += 1;
 80022aa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80022ae:	3301      	adds	r3, #1
 80022b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80022b4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80022b8:	2b3f      	cmp	r3, #63	; 0x3f
 80022ba:	f200 8087 	bhi.w	80023cc <usb_rx_handler+0x54c>
 80022be:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80022c2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3db      	bcc.n	8002282 <usb_rx_handler+0x402>
                     }
                     break;
 80022ca:	e07f      	b.n	80023cc <usb_rx_handler+0x54c>

                }
                case 0x02 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	2b87      	cmp	r3, #135	; 0x87
 80022d0:	d809      	bhi.n	80022e6 <usb_rx_handler+0x466>
 80022d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80022d6:	2b88      	cmp	r3, #136	; 0x88
 80022d8:	d805      	bhi.n	80022e6 <usb_rx_handler+0x466>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 80022da:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80022de:	b29a      	uxth	r2, r3
 80022e0:	893b      	ldrh	r3, [r7, #8]
                         dataEndNumber > MAX_VAL_M12    ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d203      	bcs.n	80022ee <usb_rx_handler+0x46e>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                         break;
 80022ec:	e073      	b.n	80023d6 <usb_rx_handler+0x556>
                     }

                     uint8_t i_usb    = 6;
 80022ee:	2306      	movs	r3, #6
 80022f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                     uint16_t i_calib = dataStartNumber;
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80022fa:	e019      	b.n	8002330 <usb_rx_handler+0x4b0>

                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80022fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002300:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	4a57      	ldr	r2, [pc, #348]	; (8002464 <usb_rx_handler+0x5e4>)
 8002308:	4413      	add	r3, r2
 800230a:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 800230c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	440a      	add	r2, r1
 8002314:	3203      	adds	r2, #3
 8002316:	8812      	ldrh	r2, [r2, #0]
 8002318:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 800231a:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 800231c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002320:	3302      	adds	r3, #2
 8002322:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                         i_calib += 1;
 8002326:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800232a:	3301      	adds	r3, #1
 800232c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8002330:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002334:	2b3f      	cmp	r3, #63	; 0x3f
 8002336:	d84b      	bhi.n	80023d0 <usb_rx_handler+0x550>
 8002338:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800233c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002340:	429a      	cmp	r2, r3
 8002342:	d3db      	bcc.n	80022fc <usb_rx_handler+0x47c>
                     }
                     break;
 8002344:	e044      	b.n	80023d0 <usb_rx_handler+0x550>

                }
                case 0x03 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 8002346:	897b      	ldrh	r3, [r7, #10]
 8002348:	2b87      	cmp	r3, #135	; 0x87
 800234a:	d809      	bhi.n	8002360 <usb_rx_handler+0x4e0>
 800234c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002350:	2b88      	cmp	r3, #136	; 0x88
 8002352:	d805      	bhi.n	8002360 <usb_rx_handler+0x4e0>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 8002354:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002358:	b29a      	uxth	r2, r3
 800235a:	893b      	ldrh	r3, [r7, #8]
                         dataEndNumber > MAX_VAL_M12    ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d203      	bcs.n	8002368 <usb_rx_handler+0x4e8>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8002360:	2301      	movs	r3, #1
 8002362:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                         break;
 8002366:	e036      	b.n	80023d6 <usb_rx_handler+0x556>
                     }

                     uint8_t i_usb    = 6;
 8002368:	2306      	movs	r3, #6
 800236a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                     uint16_t i_calib = dataStartNumber;
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8002374:	e019      	b.n	80023aa <usb_rx_handler+0x52a>

                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 8002376:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800237a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <usb_rx_handler+0x5e4>)
 8002382:	4413      	add	r3, r2
 8002384:	3302      	adds	r3, #2
                                 &usb->buff[i_usb],
 8002386:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	440a      	add	r2, r1
 800238e:	3203      	adds	r2, #3
 8002390:	8812      	ldrh	r2, [r2, #0]
 8002392:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 8002394:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 8002396:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800239a:	3302      	adds	r3, #2
 800239c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                         i_calib += 1;
 80023a0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80023aa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80023ae:	2b3f      	cmp	r3, #63	; 0x3f
 80023b0:	d810      	bhi.n	80023d4 <usb_rx_handler+0x554>
 80023b2:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 80023b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3db      	bcc.n	8002376 <usb_rx_handler+0x4f6>
                     }
                     break;
 80023be:	e009      	b.n	80023d4 <usb_rx_handler+0x554>

                }
                default :
                    usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    break;
 80023c6:	e006      	b.n	80023d6 <usb_rx_handler+0x556>
                    break;
 80023c8:	bf00      	nop
 80023ca:	e004      	b.n	80023d6 <usb_rx_handler+0x556>
                     break;
 80023cc:	bf00      	nop
 80023ce:	e002      	b.n	80023d6 <usb_rx_handler+0x556>
                     break;
 80023d0:	bf00      	nop
 80023d2:	e000      	b.n	80023d6 <usb_rx_handler+0x556>
                     break;
 80023d4:	bf00      	nop
            };

            usb_tx_buff[0] = cmd;
 80023d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80023da:	773b      	strb	r3, [r7, #28]
            memcpy(usb_tx_buff + 2, &dataStartNumber, sizeof(uint16_t));
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	3302      	adds	r3, #2
 80023e2:	897a      	ldrh	r2, [r7, #10]
 80023e4:	801a      	strh	r2, [r3, #0]
            memcpy(usb_tx_buff + 4, &dataOffset, sizeof(uint16_t));
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	3304      	adds	r3, #4
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	801a      	strh	r2, [r3, #0]
            usb_tx_buff[2 + 2 * sizeof(uint16_t) + 1] = 0x00;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CDC_Transmit_FS(usb_tx_buff, 7);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	2107      	movs	r1, #7
 80023fc:	4618      	mov	r0, r3
 80023fe:	f008 f831 	bl	800a464 <CDC_Transmit_FS>
        }
            break;
 8002402:	e026      	b.n	8002452 <usb_rx_handler+0x5d2>
            break;

        /* Команда записи во флеш калибровочной таблицы */
        case 0x0D :
        {
            if (usb->len >= 2 && (usb->buff[1] == 0x02))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	789b      	ldrb	r3, [r3, #2]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d90e      	bls.n	800242a <usb_rx_handler+0x5aa>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	791b      	ldrb	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d10a      	bne.n	800242a <usb_rx_handler+0x5aa>
            {
                changeTableFlag = true;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <usb_rx_handler+0x5e8>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
                if ( flash_write_calibTable() != HAL_OK ) {
 800241a:	f7fe fca1 	bl	8000d60 <flash_write_calibTable>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d115      	bne.n	8002450 <usb_rx_handler+0x5d0>
                    break;
                }
                usb_tx_buff[1] = 0x00; // успешно
 8002424:	2300      	movs	r3, #0
 8002426:	777b      	strb	r3, [r7, #29]
 8002428:	e001      	b.n	800242e <usb_rx_handler+0x5ae>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 800242a:	2301      	movs	r3, #1
 800242c:	777b      	strb	r3, [r7, #29]
            }
            usb_tx_buff[0] = cmd;
 800242e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002432:	773b      	strb	r3, [r7, #28]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f008 f812 	bl	800a464 <CDC_Transmit_FS>
            break;
 8002440:	e007      	b.n	8002452 <usb_rx_handler+0x5d2>
        }

        /* По умолчанию, если прочитанная команда не соответствует ни одной команде
         * в протоколе, отправляем в ответ просто 0, как сигнал ошибки. */
        default:
            CDC_Transmit_FS(0, 1);
 8002442:	2101      	movs	r1, #1
 8002444:	2000      	movs	r0, #0
 8002446:	f008 f80d 	bl	800a464 <CDC_Transmit_FS>
 800244a:	e002      	b.n	8002452 <usb_rx_handler+0x5d2>
            break;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <usb_rx_handler+0x5d2>
                    break;
 8002450:	bf00      	nop
    };

    /*-END MAIN HANDLER CODE-------------------------------------------------*/

    usb->is_handled = true;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3774      	adds	r7, #116	; 0x74
 800245e:	46bd      	mov	sp, r7
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	bf00      	nop
 8002464:	200004d0 	.word	0x200004d0
 8002468:	20000244 	.word	0x20000244

0800246c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800246c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800246e:	e003      	b.n	8002478 <LoopCopyDataInit>

08002470 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002472:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002474:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002476:	3104      	adds	r1, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002478:	480a      	ldr	r0, [pc, #40]	; (80024a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800247c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800247e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002480:	d3f6      	bcc.n	8002470 <CopyDataInit>
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002484:	e002      	b.n	800248c <LoopFillZerobss>

08002486 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002488:	f842 3b04 	str.w	r3, [r2], #4

0800248c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800248e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002490:	d3f9      	bcc.n	8002486 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002492:	f7ff fcc1 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002496:	f008 fbc9 	bl	800ac2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800249a:	f7fe ffe1 	bl	8001460 <main>
  bx lr
 800249e:	4770      	bx	lr
  ldr r3, =_sidata
 80024a0:	0800bdf4 	.word	0x0800bdf4
  ldr r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024a8:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 80024ac:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 80024b0:	20001948 	.word	0x20001948

080024b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <CAN1_RX1_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_Init+0x28>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_Init+0x28>)
 80024c2:	f043 0310 	orr.w	r3, r3, #16
 80024c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 fdb3 	bl	8003034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fa6a 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fdcb 	bl	800309e <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f000 fd93 	bl	800304a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000044 	.word	0x20000044
 800253c:	2000004c 	.word	0x2000004c
 8002540:	20000048 	.word	0x20000048

08002544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <HAL_IncTick+0x1c>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_IncTick+0x20>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_IncTick+0x20>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	2000004c 	.word	0x2000004c
 8002564:	20000d60 	.word	0x20000d60

08002568 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <HAL_GetTick+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000d60 	.word	0x20000d60

0800257c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0be      	b.n	800271c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fa28 	bl	8001a10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fb8b 	bl	8002cdc <ADC_ConversionStop_Disable>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 8099 	bne.w	800270a <HAL_ADC_Init+0x18e>
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f040 8095 	bne.w	800270a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025e8:	f023 0302 	bic.w	r3, r3, #2
 80025ec:	f043 0202 	orr.w	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7b1b      	ldrb	r3, [r3, #12]
 8002602:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002604:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d003      	beq.n	800261e <HAL_ADC_Init+0xa2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d102      	bne.n	8002624 <HAL_ADC_Init+0xa8>
 800261e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002622:	e000      	b.n	8002626 <HAL_ADC_Init+0xaa>
 8002624:	2300      	movs	r3, #0
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7d1b      	ldrb	r3, [r3, #20]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d119      	bne.n	8002668 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7b1b      	ldrb	r3, [r3, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	3b01      	subs	r3, #1
 8002642:	035a      	lsls	r2, r3, #13
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e00b      	b.n	8002668 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	430a      	orrs	r2, r1
 800267a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_ADC_Init+0x1a8>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	430b      	orrs	r3, r1
 800268e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002698:	d003      	beq.n	80026a2 <HAL_ADC_Init+0x126>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d104      	bne.n	80026ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051b      	lsls	r3, r3, #20
 80026aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	430a      	orrs	r2, r1
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_ADC_Init+0x1ac>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026e6:	e018      	b.n	800271a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f023 0312 	bic.w	r3, r3, #18
 80026f0:	f043 0210 	orr.w	r2, r3, #16
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f043 0201 	orr.w	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002708:	e007      	b.n	800271a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	ffe1f7fd 	.word	0xffe1f7fd
 8002728:	ff1f0efe 	.word	0xff1f0efe

0800272c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Start_IT+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e0a0      	b.n	8002888 <HAL_ADC_Start_IT+0x15c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa72 	bl	8002c38 <ADC_Enable>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 808f 	bne.w	800287e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a45      	ldr	r2, [pc, #276]	; (8002890 <HAL_ADC_Start_IT+0x164>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d105      	bne.n	800278a <HAL_ADC_Start_IT+0x5e>
 800277e:	4b45      	ldr	r3, [pc, #276]	; (8002894 <HAL_ADC_Start_IT+0x168>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d026      	beq.n	80027f2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027b4:	e01d      	b.n	80027f2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a33      	ldr	r2, [pc, #204]	; (8002894 <HAL_ADC_Start_IT+0x168>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_ADC_Start_IT+0xaa>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	; (8002890 <HAL_ADC_Start_IT+0x164>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10d      	bne.n	80027f2 <HAL_ADC_Start_IT+0xc6>
 80027d6:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_ADC_Start_IT+0x168>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f023 0206 	bic.w	r2, r3, #6
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
 800280a:	e002      	b.n	8002812 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0202 	mvn.w	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800283e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002842:	d113      	bne.n	800286c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_ADC_Start_IT+0x164>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d105      	bne.n	800285a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800284e:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_ADC_Start_IT+0x168>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e00c      	b.n	8002886 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e003      	b.n	8002886 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40012800 	.word	0x40012800
 8002894:	40012400 	.word	0x40012400

08002898 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d140      	bne.n	8002948 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d139      	bne.n	8002948 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028fa:	d11d      	bne.n	8002938 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0220 	bic.w	r2, r2, #32
 8002912:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7fe fd77 	bl	800142c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0212 	mvn.w	r2, #18
 8002946:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d14f      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d148      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002986:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800298a:	d012      	beq.n	80029b2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002996:	2b00      	cmp	r3, #0
 8002998:	d125      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029a8:	d11d      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa4e 	bl	8002e88 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 020c 	mvn.w	r2, #12
 80029f4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a00:	2b40      	cmp	r3, #64	; 0x40
 8002a02:	d114      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d10d      	bne.n	8002a2e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f809 	bl	8002a36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0201 	mvn.w	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x20>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e0dc      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x1da>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d81c      	bhi.n	8002ab2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b05      	subs	r3, #5
 8002a8a:	221f      	movs	r2, #31
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	4019      	ands	r1, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b05      	subs	r3, #5
 8002aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab0:	e03c      	b.n	8002b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d81c      	bhi.n	8002af4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	3b23      	subs	r3, #35	; 0x23
 8002acc:	221f      	movs	r2, #31
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4019      	ands	r1, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b23      	subs	r3, #35	; 0x23
 8002ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	e01b      	b.n	8002b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b41      	subs	r3, #65	; 0x41
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4019      	ands	r1, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b41      	subs	r3, #65	; 0x41
 8002b20:	fa00 f203 	lsl.w	r2, r0, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b09      	cmp	r3, #9
 8002b32:	d91c      	bls.n	8002b6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68d9      	ldr	r1, [r3, #12]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	4413      	add	r3, r2
 8002b44:	3b1e      	subs	r3, #30
 8002b46:	2207      	movs	r2, #7
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	4019      	ands	r1, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6898      	ldr	r0, [r3, #8]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b1e      	subs	r3, #30
 8002b60:	fa00 f203 	lsl.w	r2, r0, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	e019      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6919      	ldr	r1, [r3, #16]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	2207      	movs	r2, #7
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	4019      	ands	r1, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6898      	ldr	r0, [r3, #8]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d003      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bae:	2b11      	cmp	r3, #17
 8002bb0:	d132      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <HAL_ADC_ConfigChannel+0x1e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d125      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d126      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d11a      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_ADC_ConfigChannel+0x1e8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a13      	ldr	r2, [pc, #76]	; (8002c34 <HAL_ADC_ConfigChannel+0x1ec>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9a      	lsrs	r2, r3, #18
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bf8:	e002      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f9      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x1b2>
 8002c06:	e007      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012400 	.word	0x40012400
 8002c30:	20000044 	.word	0x20000044
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d039      	beq.n	8002cca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <ADC_Enable+0x9c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <ADC_Enable+0xa0>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c74:	e002      	b.n	8002c7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f9      	bne.n	8002c76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c82:	f7ff fc71 	bl	8002568 <HAL_GetTick>
 8002c86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c88:	e018      	b.n	8002cbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c8a:	f7ff fc6d 	bl	8002568 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d911      	bls.n	8002cbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	f043 0210 	orr.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d1df      	bne.n	8002c8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000044 	.word	0x20000044
 8002cd8:	431bde83 	.word	0x431bde83

08002cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d127      	bne.n	8002d46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d06:	f7ff fc2f 	bl	8002568 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d0c:	e014      	b.n	8002d38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d0e:	f7ff fc2b 	bl	8002568 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d90d      	bls.n	8002d38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d0e3      	beq.n	8002d0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <HAL_ADCEx_Calibration_Start+0x1e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e086      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0x12c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ffb0 	bl	8002cdc <ADC_ConversionStop_Disable>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d80:	7dfb      	ldrb	r3, [r7, #23]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d175      	bne.n	8002e72 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d8e:	f023 0302 	bic.w	r3, r3, #2
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d9a:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_ADCEx_Calibration_Start+0x134>)
 8002d9c:	681c      	ldr	r4, [r3, #0]
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f002 fdc2 	bl	8005928 <HAL_RCCEx_GetPeriphCLKFreq>
 8002da4:	4603      	mov	r3, r0
 8002da6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002daa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002dac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002dae:	e002      	b.n	8002db6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f9      	bne.n	8002db0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff3b 	bl	8002c38 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0208 	orr.w	r2, r2, #8
 8002dd0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002dd2:	f7ff fbc9 	bl	8002568 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dd8:	e014      	b.n	8002e04 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002dda:	f7ff fbc5 	bl	8002568 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	d90d      	bls.n	8002e04 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f023 0312 	bic.w	r3, r3, #18
 8002df0:	f043 0210 	orr.w	r2, r3, #16
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e03b      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e3      	bne.n	8002dda <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0204 	orr.w	r2, r2, #4
 8002e20:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e22:	f7ff fba1 	bl	8002568 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e28:	e014      	b.n	8002e54 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e2a:	f7ff fb9d 	bl	8002568 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b0a      	cmp	r3, #10
 8002e36:	d90d      	bls.n	8002e54 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	f023 0312 	bic.w	r3, r3, #18
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e013      	b.n	8002e7c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f023 0303 	bic.w	r3, r3, #3
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	20000044 	.word	0x20000044

08002e88 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
	...

08002e9c <__NVIC_SetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	60d3      	str	r3, [r2, #12]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <__NVIC_GetPriorityGrouping>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <__NVIC_GetPriorityGrouping+0x18>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	f003 0307 	and.w	r3, r3, #7
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_EnableIRQ>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	db0b      	blt.n	8002f2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4906      	ldr	r1, [pc, #24]	; (8002f34 <__NVIC_EnableIRQ+0x34>)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	2001      	movs	r0, #1
 8002f22:	fa00 f202 	lsl.w	r2, r0, r2
 8002f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <__NVIC_SetPriority>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	db0a      	blt.n	8002f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	490c      	ldr	r1, [pc, #48]	; (8002f84 <__NVIC_SetPriority+0x4c>)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	0112      	lsls	r2, r2, #4
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f60:	e00a      	b.n	8002f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4908      	ldr	r1, [pc, #32]	; (8002f88 <__NVIC_SetPriority+0x50>)
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3b04      	subs	r3, #4
 8002f70:	0112      	lsls	r2, r2, #4
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	440b      	add	r3, r1
 8002f76:	761a      	strb	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e100 	.word	0xe000e100
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <NVIC_EncodePriority>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b089      	sub	sp, #36	; 0x24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	bf28      	it	cs
 8002faa:	2304      	movcs	r3, #4
 8002fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d902      	bls.n	8002fbc <NVIC_EncodePriority+0x30>
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3b03      	subs	r3, #3
 8002fba:	e000      	b.n	8002fbe <NVIC_EncodePriority+0x32>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43da      	mvns	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	401a      	ands	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43d9      	mvns	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	4313      	orrs	r3, r2
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3724      	adds	r7, #36	; 0x24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <SysTick_Config>:
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003000:	d301      	bcc.n	8003006 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003002:	2301      	movs	r3, #1
 8003004:	e00f      	b.n	8003026 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <SysTick_Config+0x40>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3b01      	subs	r3, #1
 800300c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300e:	210f      	movs	r1, #15
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f7ff ff90 	bl	8002f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <SysTick_Config+0x40>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301e:	4b04      	ldr	r3, [pc, #16]	; (8003030 <SysTick_Config+0x40>)
 8003020:	2207      	movs	r2, #7
 8003022:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ff2d 	bl	8002e9c <__NVIC_SetPriorityGrouping>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	4603      	mov	r3, r0
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800305c:	f7ff ff42 	bl	8002ee4 <__NVIC_GetPriorityGrouping>
 8003060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	6978      	ldr	r0, [r7, #20]
 8003068:	f7ff ff90 	bl	8002f8c <NVIC_EncodePriority>
 800306c:	4602      	mov	r2, r0
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff ff5f 	bl	8002f38 <__NVIC_SetPriority>
}
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff ff35 	bl	8002f00 <__NVIC_EnableIRQ>
}
 8003096:	bf00      	nop
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ffa2 	bl	8002ff0 <SysTick_Config>
 80030ac:	4603      	mov	r3, r0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e00e      	b.n	80030e6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	795b      	ldrb	r3, [r3, #5]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d105      	bne.n	80030de <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe fcdd 	bl	8001a98 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2202      	movs	r2, #2
 8003102:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	e00a      	b.n	8003130 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	441a      	add	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3f0      	bcc.n	800311a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003146:	693b      	ldr	r3, [r7, #16]
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc80      	pop	{r7}
 8003150:	4770      	bx	lr
	...

08003154 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_FLASH_Program+0xd8>)
 8003170:	7e1b      	ldrb	r3, [r3, #24]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_FLASH_Program+0x26>
 8003176:	2302      	movs	r3, #2
 8003178:	e054      	b.n	8003224 <HAL_FLASH_Program+0xd0>
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_FLASH_Program+0xd8>)
 800317c:	2201      	movs	r2, #1
 800317e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003180:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003184:	f000 f8a8 	bl	80032d8 <FLASH_WaitForLastOperation>
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d144      	bne.n	800321c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d102      	bne.n	800319e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003198:	2301      	movs	r3, #1
 800319a:	757b      	strb	r3, [r7, #21]
 800319c:	e007      	b.n	80031ae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d102      	bne.n	80031aa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80031a4:	2302      	movs	r3, #2
 80031a6:	757b      	strb	r3, [r7, #21]
 80031a8:	e001      	b.n	80031ae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80031aa:	2304      	movs	r3, #4
 80031ac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	75bb      	strb	r3, [r7, #22]
 80031b2:	e02d      	b.n	8003210 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80031b4:	7dbb      	ldrb	r3, [r7, #22]
 80031b6:	005a      	lsls	r2, r3, #1
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	eb02 0c03 	add.w	ip, r2, r3
 80031be:	7dbb      	ldrb	r3, [r7, #22]
 80031c0:	0119      	lsls	r1, r3, #4
 80031c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031c6:	f1c1 0620 	rsb	r6, r1, #32
 80031ca:	f1a1 0020 	sub.w	r0, r1, #32
 80031ce:	fa22 f401 	lsr.w	r4, r2, r1
 80031d2:	fa03 f606 	lsl.w	r6, r3, r6
 80031d6:	4334      	orrs	r4, r6
 80031d8:	fa23 f000 	lsr.w	r0, r3, r0
 80031dc:	4304      	orrs	r4, r0
 80031de:	fa23 f501 	lsr.w	r5, r3, r1
 80031e2:	b2a3      	uxth	r3, r4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4660      	mov	r0, ip
 80031e8:	f000 f85a 	bl	80032a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80031ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031f0:	f000 f872 	bl	80032d8 <FLASH_WaitForLastOperation>
 80031f4:	4603      	mov	r3, r0
 80031f6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_FLASH_Program+0xdc>)
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_FLASH_Program+0xdc>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d107      	bne.n	800321a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800320a:	7dbb      	ldrb	r3, [r7, #22]
 800320c:	3301      	adds	r3, #1
 800320e:	75bb      	strb	r3, [r7, #22]
 8003210:	7dba      	ldrb	r2, [r7, #22]
 8003212:	7d7b      	ldrb	r3, [r7, #21]
 8003214:	429a      	cmp	r2, r3
 8003216:	d3cd      	bcc.n	80031b4 <HAL_FLASH_Program+0x60>
 8003218:	e000      	b.n	800321c <HAL_FLASH_Program+0xc8>
      {
        break;
 800321a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_FLASH_Program+0xd8>)
 800321e:	2200      	movs	r2, #0
 8003220:	761a      	strb	r2, [r3, #24]

  return status;
 8003222:	7dfb      	ldrb	r3, [r7, #23]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322c:	20000d68 	.word	0x20000d68
 8003230:	40022000 	.word	0x40022000

08003234 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_FLASH_Unlock+0x40>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_FLASH_Unlock+0x40>)
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <HAL_FLASH_Unlock+0x44>)
 800324e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_FLASH_Unlock+0x40>)
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_FLASH_Unlock+0x48>)
 8003254:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_FLASH_Unlock+0x40>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003266:	79fb      	ldrb	r3, [r7, #7]
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40022000 	.word	0x40022000
 8003278:	45670123 	.word	0x45670123
 800327c:	cdef89ab 	.word	0xcdef89ab

08003280 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_FLASH_Lock+0x1c>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <HAL_FLASH_Lock+0x1c>)
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40022000 	.word	0x40022000

080032a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <FLASH_Program_HalfWord+0x30>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <FLASH_Program_HalfWord+0x34>)
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <FLASH_Program_HalfWord+0x34>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	887a      	ldrh	r2, [r7, #2]
 80032c2:	801a      	strh	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000d68 	.word	0x20000d68
 80032d4:	40022000 	.word	0x40022000

080032d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80032e0:	f7ff f942 	bl	8002568 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80032e6:	e010      	b.n	800330a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d00c      	beq.n	800330a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <FLASH_WaitForLastOperation+0x2e>
 80032f6:	f7ff f937 	bl	8002568 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d201      	bcs.n	800330a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e025      	b.n	8003356 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e8      	bne.n	80032e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003316:	4b12      	ldr	r3, [pc, #72]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003322:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 8003324:	2220      	movs	r2, #32
 8003326:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <FLASH_WaitForLastOperation+0x88>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800334c:	f000 f80a 	bl	8003364 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40022000 	.word	0x40022000

08003364 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800336e:	4b23      	ldr	r3, [pc, #140]	; (80033fc <FLASH_SetErrorCode+0x98>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800337a:	4b21      	ldr	r3, [pc, #132]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 8003384:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f043 0310 	orr.w	r3, r3, #16
 800338c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <FLASH_SetErrorCode+0x98>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	4a17      	ldr	r2, [pc, #92]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 80033a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f043 0304 	orr.w	r3, r3, #4
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <FLASH_SetErrorCode+0x9c>)
 80033c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f240 1201 	movw	r2, #257	; 0x101
 80033d8:	4293      	cmp	r3, r2
 80033da:	d106      	bne.n	80033ea <FLASH_SetErrorCode+0x86>
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a06      	ldr	r2, [pc, #24]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033e2:	f023 0301 	bic.w	r3, r3, #1
 80033e6:	61d3      	str	r3, [r2, #28]
}  
 80033e8:	e002      	b.n	80033f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80033ea:	4a04      	ldr	r2, [pc, #16]	; (80033fc <FLASH_SetErrorCode+0x98>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60d3      	str	r3, [r2, #12]
}  
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40022000 	.word	0x40022000
 8003400:	20000d68 	.word	0x20000d68

08003404 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_FLASHEx_Erase+0xd0>)
 8003418:	7e1b      	ldrb	r3, [r3, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_FLASHEx_Erase+0x1e>
 800341e:	2302      	movs	r3, #2
 8003420:	e053      	b.n	80034ca <HAL_FLASHEx_Erase+0xc6>
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_FLASHEx_Erase+0xd0>)
 8003424:	2201      	movs	r2, #1
 8003426:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d116      	bne.n	800345e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003434:	f7ff ff50 	bl	80032d8 <FLASH_WaitForLastOperation>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d141      	bne.n	80034c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800343e:	2001      	movs	r0, #1
 8003440:	f000 f84c 	bl	80034dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003444:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003448:	f7ff ff46 	bl	80032d8 <FLASH_WaitForLastOperation>
 800344c:	4603      	mov	r3, r0
 800344e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_FLASHEx_Erase+0xd4>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <HAL_FLASHEx_Erase+0xd4>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6113      	str	r3, [r2, #16]
 800345c:	e031      	b.n	80034c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800345e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003462:	f7ff ff39 	bl	80032d8 <FLASH_WaitForLastOperation>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d12a      	bne.n	80034c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f04f 32ff 	mov.w	r2, #4294967295
 8003472:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	e019      	b.n	80034b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800347c:	68b8      	ldr	r0, [r7, #8]
 800347e:	f000 f849 	bl	8003514 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003482:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003486:	f7ff ff27 	bl	80032d8 <FLASH_WaitForLastOperation>
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_FLASHEx_Erase+0xd4>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_FLASHEx_Erase+0xd4>)
 8003494:	f023 0302 	bic.w	r3, r3, #2
 8003498:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	601a      	str	r2, [r3, #0]
            break;
 80034a6:	e00c      	b.n	80034c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	029a      	lsls	r2, r3, #10
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d3dc      	bcc.n	800347c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034c2:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <HAL_FLASHEx_Erase+0xd0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	761a      	strb	r2, [r3, #24]

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000d68 	.word	0x20000d68
 80034d8:	40022000 	.word	0x40022000

080034dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034e4:	4b09      	ldr	r3, [pc, #36]	; (800350c <FLASH_MassErase+0x30>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <FLASH_MassErase+0x34>)
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <FLASH_MassErase+0x34>)
 80034f0:	f043 0304 	orr.w	r3, r3, #4
 80034f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <FLASH_MassErase+0x34>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4a05      	ldr	r2, [pc, #20]	; (8003510 <FLASH_MassErase+0x34>)
 80034fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003500:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	20000d68 	.word	0x20000d68
 8003510:	40022000 	.word	0x40022000

08003514 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <FLASH_PageErase+0x38>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <FLASH_PageErase+0x3c>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <FLASH_PageErase+0x3c>)
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <FLASH_PageErase+0x3c>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <FLASH_PageErase+0x3c>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	4a05      	ldr	r2, [pc, #20]	; (8003550 <FLASH_PageErase+0x3c>)
 800353a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800353e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000d68 	.word	0x20000d68
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003554:	b480      	push	{r7}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003566:	e169      	b.n	800383c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003568:	2201      	movs	r2, #1
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	429a      	cmp	r2, r3
 8003582:	f040 8158 	bne.w	8003836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4a9a      	ldr	r2, [pc, #616]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 8003590:	4a98      	ldr	r2, [pc, #608]	; (80037f4 <HAL_GPIO_Init+0x2a0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d875      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 8003596:	4a98      	ldr	r2, [pc, #608]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d058      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 800359c:	4a96      	ldr	r2, [pc, #600]	; (80037f8 <HAL_GPIO_Init+0x2a4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d86f      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035a2:	4a96      	ldr	r2, [pc, #600]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d052      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035a8:	4a94      	ldr	r2, [pc, #592]	; (80037fc <HAL_GPIO_Init+0x2a8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d869      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ae:	4a94      	ldr	r2, [pc, #592]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d04c      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035b4:	4a92      	ldr	r2, [pc, #584]	; (8003800 <HAL_GPIO_Init+0x2ac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d863      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ba:	4a92      	ldr	r2, [pc, #584]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d046      	beq.n	800364e <HAL_GPIO_Init+0xfa>
 80035c0:	4a90      	ldr	r2, [pc, #576]	; (8003804 <HAL_GPIO_Init+0x2b0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d85d      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035c6:	2b12      	cmp	r3, #18
 80035c8:	d82a      	bhi.n	8003620 <HAL_GPIO_Init+0xcc>
 80035ca:	2b12      	cmp	r3, #18
 80035cc:	d859      	bhi.n	8003682 <HAL_GPIO_Init+0x12e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <HAL_GPIO_Init+0x80>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	0800364f 	.word	0x0800364f
 80035d8:	08003629 	.word	0x08003629
 80035dc:	0800363b 	.word	0x0800363b
 80035e0:	0800367d 	.word	0x0800367d
 80035e4:	08003683 	.word	0x08003683
 80035e8:	08003683 	.word	0x08003683
 80035ec:	08003683 	.word	0x08003683
 80035f0:	08003683 	.word	0x08003683
 80035f4:	08003683 	.word	0x08003683
 80035f8:	08003683 	.word	0x08003683
 80035fc:	08003683 	.word	0x08003683
 8003600:	08003683 	.word	0x08003683
 8003604:	08003683 	.word	0x08003683
 8003608:	08003683 	.word	0x08003683
 800360c:	08003683 	.word	0x08003683
 8003610:	08003683 	.word	0x08003683
 8003614:	08003683 	.word	0x08003683
 8003618:	08003631 	.word	0x08003631
 800361c:	08003645 	.word	0x08003645
 8003620:	4a79      	ldr	r2, [pc, #484]	; (8003808 <HAL_GPIO_Init+0x2b4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003626:	e02c      	b.n	8003682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	623b      	str	r3, [r7, #32]
          break;
 800362e:	e029      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	3304      	adds	r3, #4
 8003636:	623b      	str	r3, [r7, #32]
          break;
 8003638:	e024      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	3308      	adds	r3, #8
 8003640:	623b      	str	r3, [r7, #32]
          break;
 8003642:	e01f      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	330c      	adds	r3, #12
 800364a:	623b      	str	r3, [r7, #32]
          break;
 800364c:	e01a      	b.n	8003684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003656:	2304      	movs	r3, #4
 8003658:	623b      	str	r3, [r7, #32]
          break;
 800365a:	e013      	b.n	8003684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003664:	2308      	movs	r3, #8
 8003666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	611a      	str	r2, [r3, #16]
          break;
 800366e:	e009      	b.n	8003684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003670:	2308      	movs	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	615a      	str	r2, [r3, #20]
          break;
 800367a:	e003      	b.n	8003684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
          break;
 8003680:	e000      	b.n	8003684 <HAL_GPIO_Init+0x130>
          break;
 8003682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2bff      	cmp	r3, #255	; 0xff
 8003688:	d801      	bhi.n	800368e <HAL_GPIO_Init+0x13a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	e001      	b.n	8003692 <HAL_GPIO_Init+0x13e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3304      	adds	r3, #4
 8003692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2bff      	cmp	r3, #255	; 0xff
 8003698:	d802      	bhi.n	80036a0 <HAL_GPIO_Init+0x14c>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	e002      	b.n	80036a6 <HAL_GPIO_Init+0x152>
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	3b08      	subs	r3, #8
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	210f      	movs	r1, #15
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	6a39      	ldr	r1, [r7, #32]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	431a      	orrs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80b1 	beq.w	8003836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	4a4c      	ldr	r2, [pc, #304]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6193      	str	r3, [r2, #24]
 80036e0:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_GPIO_Init+0x2b8>)
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3302      	adds	r3, #2
 80036f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <HAL_GPIO_Init+0x2c0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d013      	beq.n	8003740 <HAL_GPIO_Init+0x1ec>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3f      	ldr	r2, [pc, #252]	; (8003818 <HAL_GPIO_Init+0x2c4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00d      	beq.n	800373c <HAL_GPIO_Init+0x1e8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_GPIO_Init+0x2c8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <HAL_GPIO_Init+0x1e4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <HAL_GPIO_Init+0x2cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_GPIO_Init+0x1e0>
 8003730:	2303      	movs	r3, #3
 8003732:	e006      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003734:	2304      	movs	r3, #4
 8003736:	e004      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003738:	2302      	movs	r3, #2
 800373a:	e002      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_GPIO_Init+0x1ee>
 8003740:	2300      	movs	r3, #0
 8003742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003744:	f002 0203 	and.w	r2, r2, #3
 8003748:	0092      	lsls	r2, r2, #2
 800374a:	4093      	lsls	r3, r2
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003752:	492f      	ldr	r1, [pc, #188]	; (8003810 <HAL_GPIO_Init+0x2bc>)
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800376c:	4b2d      	ldr	r3, [pc, #180]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	492c      	ldr	r1, [pc, #176]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	43db      	mvns	r3, r3
 8003782:	4928      	ldr	r1, [pc, #160]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003784:	4013      	ands	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d006      	beq.n	80037a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4922      	ldr	r1, [pc, #136]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037a2:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	491e      	ldr	r1, [pc, #120]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d006      	beq.n	80037ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	4914      	ldr	r1, [pc, #80]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d021      	beq.n	8003828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_GPIO_Init+0x2d0>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
 80037f0:	e021      	b.n	8003836 <HAL_GPIO_Init+0x2e2>
 80037f2:	bf00      	nop
 80037f4:	10320000 	.word	0x10320000
 80037f8:	10310000 	.word	0x10310000
 80037fc:	10220000 	.word	0x10220000
 8003800:	10210000 	.word	0x10210000
 8003804:	10120000 	.word	0x10120000
 8003808:	10110000 	.word	0x10110000
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	40010800 	.word	0x40010800
 8003818:	40010c00 	.word	0x40010c00
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_GPIO_Init+0x304>)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	43db      	mvns	r3, r3
 8003830:	4909      	ldr	r1, [pc, #36]	; (8003858 <HAL_GPIO_Init+0x304>)
 8003832:	4013      	ands	r3, r2
 8003834:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	3301      	adds	r3, #1
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	f47f ae8e 	bne.w	8003568 <HAL_GPIO_Init+0x14>
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	372c      	adds	r7, #44	; 0x2c
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
 8003868:	4613      	mov	r3, r2
 800386a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003878:	e003      	b.n	8003882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	041a      	lsls	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr

0800388c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b08b      	sub	sp, #44	; 0x2c
 8003890:	af06      	add	r7, sp, #24
 8003892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e0fd      	b.n	8003a9a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f006 ff0a 	bl	800a6cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2203      	movs	r2, #3
 80038bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f8dd 	bl	8006a84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	687e      	ldr	r6, [r7, #4]
 80038d2:	466d      	mov	r5, sp
 80038d4:	f106 0410 	add.w	r4, r6, #16
 80038d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	1d33      	adds	r3, r6, #4
 80038e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038e4:	6838      	ldr	r0, [r7, #0]
 80038e6:	f003 f8a7 	bl	8006a38 <USB_CoreInit>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0ce      	b.n	8003a9a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f8d8 	bl	8006ab8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e04c      	b.n	80039a8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3301      	adds	r3, #1
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	440b      	add	r3, r1
 8003934:	7bfa      	ldrb	r2, [r7, #15]
 8003936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	b298      	uxth	r0, r3
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	440b      	add	r3, r1
 800394a:	3336      	adds	r3, #54	; 0x36
 800394c:	4602      	mov	r2, r0
 800394e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	3303      	adds	r3, #3
 8003962:	2200      	movs	r2, #0
 8003964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	3338      	adds	r3, #56	; 0x38
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	333c      	adds	r3, #60	; 0x3c
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	3340      	adds	r3, #64	; 0x40
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	3301      	adds	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3ad      	bcc.n	800390e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	e044      	b.n	8003a42 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039b8:	7bfa      	ldrb	r2, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	440b      	add	r3, r1
 80039dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	440b      	add	r3, r1
 80039f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039fa:	7bfa      	ldrb	r2, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	440b      	add	r3, r1
 8003a34:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3b5      	bcc.n	80039b8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	687e      	ldr	r6, [r7, #4]
 8003a54:	466d      	mov	r5, sp
 8003a56:	f106 0410 	add.w	r4, r6, #16
 8003a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	1d33      	adds	r3, r6, #4
 8003a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	f003 f832 	bl	8006ad0 <USB_DevInit>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00d      	b.n	8003a9a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 ffcc 	bl	8008a30 <USB_DevDisconnect>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003aa2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_PCD_Start+0x16>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e016      	b.n	8003ae6 <HAL_PCD_Start+0x44>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f002 ffc7 	bl	8006a58 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003aca:	2101      	movs	r1, #1
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f007 f870 	bl	800abb2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 ffa0 	bl	8008a1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f004 ffa2 	bl	8008a44 <USB_ReadInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d102      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fb61 	bl	80041d4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 ff94 	bl	8008a44 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d112      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f006 fe3e 	bl	800a7c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b46:	2100      	movs	r1, #0
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f925 	bl	8003d98 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 ff76 	bl	8008a44 <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b62:	d10b      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b76:	b292      	uxth	r2, r2
 8003b78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f004 ff5f 	bl	8008a44 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d10b      	bne.n	8003baa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba4:	b292      	uxth	r2, r2
 8003ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 ff48 	bl	8008a44 <USB_ReadInterrupts>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	d126      	bne.n	8003c0e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0208 	bic.w	r2, r2, #8
 8003bea:	b292      	uxth	r2, r2
 8003bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f006 fe1f 	bl	800a834 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f004 ff16 	bl	8008a44 <USB_ReadInterrupts>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c22:	f040 8084 	bne.w	8003d2e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e011      	b.n	8003c50 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	7ffb      	ldrb	r3, [r7, #31]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	7ffb      	ldrb	r3, [r7, #31]
 8003c3a:	8812      	ldrh	r2, [r2, #0]
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	f107 0120 	add.w	r1, r7, #32
 8003c44:	440b      	add	r3, r1
 8003c46:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003c4a:	7ffb      	ldrb	r3, [r7, #31]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	7ffb      	ldrb	r3, [r7, #31]
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	d9ea      	bls.n	8003c2c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	b292      	uxth	r2, r2
 8003c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	b292      	uxth	r2, r2
 8003c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c86:	bf00      	nop
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f6      	beq.n	8003c88 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	b292      	uxth	r2, r2
 8003cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e010      	b.n	8003cda <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003cb8:	7ffb      	ldrb	r3, [r7, #31]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	7ffa      	ldrb	r2, [r7, #31]
 8003cc2:	0092      	lsls	r2, r2, #2
 8003cc4:	440a      	add	r2, r1
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	f107 0120 	add.w	r1, r7, #32
 8003ccc:	440b      	add	r3, r1
 8003cce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003cd2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cd4:	7ffb      	ldrb	r3, [r7, #31]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	77fb      	strb	r3, [r7, #31]
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	2b07      	cmp	r3, #7
 8003cde:	d9eb      	bls.n	8003cb8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0208 	orr.w	r2, r2, #8
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d0a:	b292      	uxth	r2, r2
 8003d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0204 	orr.w	r2, r2, #4
 8003d22:	b292      	uxth	r2, r2
 8003d24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f006 fd69 	bl	800a800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f004 fe86 	bl	8008a44 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d42:	d10e      	bne.n	8003d62 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d56:	b292      	uxth	r2, r2
 8003d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f006 fd22 	bl	800a7a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 fe6c 	bl	8008a44 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d10b      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003d90:	bf00      	nop
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_PCD_SetAddress+0x1a>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e013      	b.n	8003dda <HAL_PCD_SetAddress+0x42>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fe13 	bl	80089f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	4608      	mov	r0, r1
 8003dec:	4611      	mov	r1, r2
 8003dee:	461a      	mov	r2, r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	70fb      	strb	r3, [r7, #3]
 8003df4:	460b      	mov	r3, r1
 8003df6:	803b      	strh	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da0e      	bge.n	8003e26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	e00e      	b.n	8003e44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 0207 	and.w	r2, r3, #7
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e50:	883a      	ldrh	r2, [r7, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	78ba      	ldrb	r2, [r7, #2]
 8003e5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e6e:	78bb      	ldrb	r3, [r7, #2]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d102      	bne.n	8003e7a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_PCD_EP_Open+0xa6>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e00e      	b.n	8003ea6 <HAL_PCD_EP_Open+0xc4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f002 fe3a 	bl	8006b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	da0e      	bge.n	8003ee0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	705a      	strb	r2, [r3, #1]
 8003ede:	e00e      	b.n	8003efe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 0207 	and.w	r2, r3, #7
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_PCD_EP_Close+0x6a>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e00e      	b.n	8003f36 <HAL_PCD_EP_Close+0x88>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68f9      	ldr	r1, [r7, #12]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 f95c 	bl	80071e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
 8003f50:	f003 0207 	and.w	r2, r3, #7
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6979      	ldr	r1, [r7, #20]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f003 fb0e 	bl	80075bc <USB_EPStartXfer>
 8003fa0:	e005      	b.n	8003fae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6979      	ldr	r1, [r7, #20]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f003 fb07 	bl	80075bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 0207 	and.w	r2, r3, #7
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2201      	movs	r2, #1
 8004030:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004032:	7afb      	ldrb	r3, [r7, #11]
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	b2da      	uxtb	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800403e:	7afb      	ldrb	r3, [r7, #11]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fab4 	bl	80075bc <USB_EPStartXfer>
 8004054:	e005      	b.n	8004062 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	4618      	mov	r0, r3
 800405e:	f003 faad 	bl	80075bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 0207 	and.w	r2, r3, #7
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d901      	bls.n	800408a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e04c      	b.n	8004124 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800408a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0e      	bge.n	80040b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	705a      	strb	r2, [r3, #1]
 80040ae:	e00c      	b.n	80040ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_PCD_EP_SetStall+0x7e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e01c      	b.n	8004124 <HAL_PCD_EP_SetStall+0xb8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f004 fb7f 	bl	80087fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f004 fca4 	bl	8008a62 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	f003 020f 	and.w	r2, r3, #15
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d901      	bls.n	800414a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e040      	b.n	80041cc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800414a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800414e:	2b00      	cmp	r3, #0
 8004150:	da0e      	bge.n	8004170 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	705a      	strb	r2, [r3, #1]
 800416e:	e00e      	b.n	800418e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 0207 	and.w	r2, r3, #7
 8004176:	4613      	mov	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_PCD_EP_ClrStall+0x82>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e00e      	b.n	80041cc <HAL_PCD_EP_ClrStall+0xa0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fb6d 	bl	800889c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041dc:	e2df      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80041f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f040 8158 	bne.w	80044ae <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b00      	cmp	r3, #0
 8004206:	d152      	bne.n	80042ae <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004218:	81fb      	strh	r3, [r7, #14]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	89fb      	ldrh	r3, [r7, #14]
 8004220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004228:	b29b      	uxth	r3, r3
 800422a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3328      	adds	r3, #40	; 0x28
 8004230:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	3302      	adds	r3, #2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	441a      	add	r2, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f006 fa7f 	bl	800a772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 828e 	beq.w	800479e <PCD_EP_ISR_Handler+0x5ca>
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 8289 	bne.w	800479e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004292:	b2db      	uxtb	r3, r3
 8004294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004298:	b2da      	uxtb	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	b292      	uxth	r2, r2
 80042a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042ac:	e277      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d034      	beq.n	8004332 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	3306      	adds	r3, #6
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004306:	b29b      	uxth	r3, r3
 8004308:	f004 fbfb 	bl	8008b02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29a      	uxth	r2, r3
 8004314:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004318:	4013      	ands	r3, r2
 800431a:	823b      	strh	r3, [r7, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	8a3a      	ldrh	r2, [r7, #16]
 8004322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004326:	b292      	uxth	r2, r2
 8004328:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f006 f9f4 	bl	800a718 <HAL_PCD_SetupStageCallback>
 8004330:	e235      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004332:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004336:	2b00      	cmp	r3, #0
 8004338:	f280 8231 	bge.w	800479e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004348:	4013      	ands	r3, r2
 800434a:	83bb      	strh	r3, [r7, #28]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	8bba      	ldrh	r2, [r7, #28]
 8004352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004356:	b292      	uxth	r2, r2
 8004358:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	3306      	adds	r3, #6
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <PCD_EP_ISR_Handler+0x1ee>
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d015      	beq.n	80043c2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	6959      	ldr	r1, [r3, #20]
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f004 fbab 	bl	8008b02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	441a      	add	r2, r3
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80043ba:	2100      	movs	r1, #0
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f006 f9bd 	bl	800a73c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d112      	bne.n	8004410 <PCD_EP_ISR_Handler+0x23c>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004408:	b29a      	uxth	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	e02f      	b.n	8004470 <PCD_EP_ISR_Handler+0x29c>
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b3e      	cmp	r3, #62	; 0x3e
 8004416:	d813      	bhi.n	8004440 <PCD_EP_ISR_Handler+0x26c>
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	633b      	str	r3, [r7, #48]	; 0x30
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <PCD_EP_ISR_Handler+0x25e>
 800442c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442e:	3301      	adds	r3, #1
 8004430:	633b      	str	r3, [r7, #48]	; 0x30
 8004432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004434:	b29b      	uxth	r3, r3
 8004436:	029b      	lsls	r3, r3, #10
 8004438:	b29a      	uxth	r2, r3
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e017      	b.n	8004470 <PCD_EP_ISR_Handler+0x29c>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <PCD_EP_ISR_Handler+0x286>
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	3b01      	subs	r3, #1
 8004458:	633b      	str	r3, [r7, #48]	; 0x30
 800445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445c:	b29b      	uxth	r3, r3
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	b29b      	uxth	r3, r3
 8004462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446a:	b29a      	uxth	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	827b      	strh	r3, [r7, #18]
 8004482:	8a7b      	ldrh	r3, [r7, #18]
 8004484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004488:	827b      	strh	r3, [r7, #18]
 800448a:	8a7b      	ldrh	r3, [r7, #18]
 800448c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004490:	827b      	strh	r3, [r7, #18]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	8a7b      	ldrh	r3, [r7, #18]
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
 80044ac:	e177      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f280 80ea 	bge.w	800469e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044e0:	4013      	ands	r3, r2
 80044e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80044f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044f8:	b292      	uxth	r2, r2
 80044fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	7b1b      	ldrb	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d122      	bne.n	8004560 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004522:	b29b      	uxth	r3, r3
 8004524:	461a      	mov	r2, r3
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	3306      	adds	r3, #6
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004542:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004544:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8087 	beq.w	800465a <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	6959      	ldr	r1, [r3, #20]
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	88da      	ldrh	r2, [r3, #6]
 8004558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800455a:	f004 fad2 	bl	8008b02 <USB_ReadPMA>
 800455e:	e07c      	b.n	800465a <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	78db      	ldrb	r3, [r3, #3]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d108      	bne.n	800457a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004568:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800456a:	461a      	mov	r2, r3
 800456c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f923 	bl	80047ba <HAL_PCD_EP_DB_Receive>
 8004574:	4603      	mov	r3, r0
 8004576:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004578:	e06f      	b.n	800465a <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004594:	847b      	strh	r3, [r7, #34]	; 0x22
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d021      	beq.n	8004618 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4413      	add	r3, r2
 80045e8:	3302      	adds	r3, #2
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80045fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02a      	beq.n	800465a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	6959      	ldr	r1, [r3, #20]
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	891a      	ldrh	r2, [r3, #8]
 8004610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004612:	f004 fa76 	bl	8008b02 <USB_ReadPMA>
 8004616:	e020      	b.n	800465a <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	3306      	adds	r3, #6
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004640:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004642:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004644:	2b00      	cmp	r3, #0
 8004646:	d008      	beq.n	800465a <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	6959      	ldr	r1, [r3, #20]
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	895a      	ldrh	r2, [r3, #10]
 8004654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004656:	f004 fa54 	bl	8008b02 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004660:	441a      	add	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800466c:	441a      	add	r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <PCD_EP_ISR_Handler+0x4b0>
 800467a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d206      	bcs.n	8004692 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f006 f856 	bl	800a73c <HAL_PCD_DataOutStageCallback>
 8004690:	e005      	b.n	800469e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004698:	4618      	mov	r0, r3
 800469a:	f002 ff8f 	bl	80075bc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800469e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80046a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d07a      	beq.n	800479e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80046a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	843b      	strh	r3, [r7, #32]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	8c3b      	ldrh	r3, [r7, #32]
 80046e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	78db      	ldrb	r3, [r3, #3]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d108      	bne.n	800470e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8004700:	2b02      	cmp	r3, #2
 8004702:	d146      	bne.n	8004792 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004704:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d141      	bne.n	8004792 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	3302      	adds	r3, #2
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004736:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	8bfb      	ldrh	r3, [r7, #30]
 800473e:	429a      	cmp	r2, r3
 8004740:	d906      	bls.n	8004750 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	1ad2      	subs	r2, r2, r3
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	619a      	str	r2, [r3, #24]
 800474e:	e002      	b.n	8004756 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f006 f804 	bl	800a772 <HAL_PCD_DataInStageCallback>
 800476a:	e018      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	8bfb      	ldrh	r3, [r7, #30]
 8004772:	441a      	add	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	8bfb      	ldrh	r3, [r7, #30]
 800477e:	441a      	add	r2, r3
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800478a:	4618      	mov	r0, r3
 800478c:	f002 ff16 	bl	80075bc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004790:	e005      	b.n	800479e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004792:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004794:	461a      	mov	r2, r3
 8004796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f91b 	bl	80049d4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f6ff ad17 	blt.w	80041de <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3738      	adds	r7, #56	; 0x38
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b088      	sub	sp, #32
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	4613      	mov	r3, r2
 80047c6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d07e      	beq.n	80048d0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	3302      	adds	r3, #2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	8b7b      	ldrh	r3, [r7, #26]
 8004802:	429a      	cmp	r2, r3
 8004804:	d306      	bcc.n	8004814 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	8b7b      	ldrh	r3, [r7, #26]
 800480c:	1ad2      	subs	r2, r2, r3
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	619a      	str	r2, [r3, #24]
 8004812:	e002      	b.n	800481a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d123      	bne.n	800486a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483c:	833b      	strh	r3, [r7, #24]
 800483e:	8b3b      	ldrh	r3, [r7, #24]
 8004840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004844:	833b      	strh	r3, [r7, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	441a      	add	r2, r3
 8004854:	8b3b      	ldrh	r3, [r7, #24]
 8004856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004866:	b29b      	uxth	r3, r3
 8004868:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01f      	beq.n	80048b4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	82fb      	strh	r3, [r7, #22]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	8afb      	ldrh	r3, [r7, #22]
 80048a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80048b4:	8b7b      	ldrh	r3, [r7, #26]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8087 	beq.w	80049ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6959      	ldr	r1, [r3, #20]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	891a      	ldrh	r2, [r3, #8]
 80048c8:	8b7b      	ldrh	r3, [r7, #26]
 80048ca:	f004 f91a 	bl	8008b02 <USB_ReadPMA>
 80048ce:	e07c      	b.n	80049ca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	3306      	adds	r3, #6
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	8b7b      	ldrh	r3, [r7, #26]
 8004900:	429a      	cmp	r2, r3
 8004902:	d306      	bcc.n	8004912 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	8b7b      	ldrh	r3, [r7, #26]
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	619a      	str	r2, [r3, #24]
 8004910:	e002      	b.n	8004918 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d123      	bne.n	8004968 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	83fb      	strh	r3, [r7, #30]
 800493c:	8bfb      	ldrh	r3, [r7, #30]
 800493e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004942:	83fb      	strh	r3, [r7, #30]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	8bfb      	ldrh	r3, [r7, #30]
 8004954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004964:	b29b      	uxth	r3, r3
 8004966:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11f      	bne.n	80049b2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	83bb      	strh	r3, [r7, #28]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	441a      	add	r2, r3
 800499c:	8bbb      	ldrh	r3, [r7, #28]
 800499e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049b2:	8b7b      	ldrh	r3, [r7, #26]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6959      	ldr	r1, [r3, #20]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	895a      	ldrh	r2, [r3, #10]
 80049c4:	8b7b      	ldrh	r3, [r7, #26]
 80049c6:	f004 f89c 	bl	8008b02 <USB_ReadPMA>
    }
  }

  return count;
 80049ca:	8b7b      	ldrh	r3, [r7, #26]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b094      	sub	sp, #80	; 0x50
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8138 	beq.w	8004c5e <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	3302      	adds	r3, #2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a16:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d907      	bls.n	8004a36 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a2e:	1ad2      	subs	r2, r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	619a      	str	r2, [r3, #24]
 8004a34:	e002      	b.n	8004a3c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d12c      	bne.n	8004a9e <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f005 fe91 	bl	800a772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a50:	88fb      	ldrh	r3, [r7, #6]
 8004a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 823a 	beq.w	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	82fb      	strh	r3, [r7, #22]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	8afb      	ldrh	r3, [r7, #22]
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]
 8004a9c:	e218      	b.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a9e:	88fb      	ldrh	r3, [r7, #6]
 8004aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	f040 81ee 	bne.w	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	695a      	ldr	r2, [r3, #20]
 8004af8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004afc:	441a      	add	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a1a      	ldr	r2, [r3, #32]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d309      	bcc.n	8004b30 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	621a      	str	r2, [r3, #32]
 8004b2e:	e015      	b.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8004b38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b46:	e009      	b.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d155      	bne.n	8004c10 <HAL_PCD_EP_DB_Transmit+0x23c>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	011a      	lsls	r2, r3, #4
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d112      	bne.n	8004bb8 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	e047      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x274>
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	2b3e      	cmp	r3, #62	; 0x3e
 8004bbc:	d811      	bhi.n	8004be2 <HAL_PCD_EP_DB_Transmit+0x20e>
 8004bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_PCD_EP_DB_Transmit+0x200>
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	801a      	strh	r2, [r3, #0]
 8004be0:	e032      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x274>
 8004be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x224>
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	e01b      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x274>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d117      	bne.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x274>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	4413      	add	r3, r2
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	011a      	lsls	r2, r3, #4
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	4413      	add	r3, r2
 8004c3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6959      	ldr	r1, [r3, #20]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	891a      	ldrh	r2, [r3, #8]
 8004c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f003 ff0e 	bl	8008a78 <USB_WritePMA>
 8004c5c:	e138      	b.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	3306      	adds	r3, #6
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d307      	bcc.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	699a      	ldr	r2, [r3, #24]
 8004c9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	619a      	str	r2, [r3, #24]
 8004ca4:	e002      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12e      	bne.n	8004d12 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f005 fd59 	bl	800a772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8102 	bne.w	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	441a      	add	r2, r3
 8004cf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]
 8004d10:	e0de      	b.n	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11f      	bne.n	8004d5c <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	867b      	strh	r3, [r7, #50]	; 0x32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	441a      	add	r2, r3
 8004d46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	f040 80b4 	bne.w	8004ed0 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d70:	441a      	add	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d7e:	441a      	add	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d309      	bcc.n	8004da4 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6a1a      	ldr	r2, [r3, #32]
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	621a      	str	r2, [r3, #32]
 8004da2:	e015      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8004dac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004db0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004dba:	e009      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d155      	bne.n	8004e8a <HAL_PCD_EP_DB_Transmit+0x4b6>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	4413      	add	r3, r2
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	011a      	lsls	r2, r3, #4
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	4413      	add	r3, r2
 8004e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d112      	bne.n	8004e32 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	e044      	b.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	2b3e      	cmp	r3, #62	; 0x3e
 8004e36:	d811      	bhi.n	8004e5c <HAL_PCD_EP_DB_Transmit+0x488>
 8004e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x47a>
 8004e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	029b      	lsls	r3, r3, #10
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e02f      	b.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e5e:	095b      	lsrs	r3, r3, #5
 8004e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x49e>
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	029b      	lsls	r3, r3, #10
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	e018      	b.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d114      	bne.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x4e8>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ea0:	4413      	add	r3, r2
 8004ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	011a      	lsls	r2, r3, #4
 8004eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eac:	4413      	add	r3, r2
 8004eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	6959      	ldr	r1, [r3, #20]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	895a      	ldrh	r2, [r3, #10]
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f003 fdd4 	bl	8008a78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eea:	82bb      	strh	r3, [r7, #20]
 8004eec:	8abb      	ldrh	r3, [r7, #20]
 8004eee:	f083 0310 	eor.w	r3, r3, #16
 8004ef2:	82bb      	strh	r3, [r7, #20]
 8004ef4:	8abb      	ldrh	r3, [r7, #20]
 8004ef6:	f083 0320 	eor.w	r3, r3, #32
 8004efa:	82bb      	strh	r3, [r7, #20]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8abb      	ldrh	r3, [r7, #20]
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3750      	adds	r7, #80	; 0x50
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b087      	sub	sp, #28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	897b      	ldrh	r3, [r7, #10]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	1c5a      	adds	r2, r3, #1
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e009      	b.n	8004f74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f60:	897a      	ldrh	r2, [r7, #10]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f74:	893b      	ldrh	r3, [r7, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	80da      	strh	r2, [r3, #6]
 8004f88:	e00b      	b.n	8004fa2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	371c      	adds	r7, #28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e26c      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 8087 	beq.w	80050de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd0:	4b92      	ldr	r3, [pc, #584]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d00c      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fdc:	4b8f      	ldr	r3, [pc, #572]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d112      	bne.n	800500e <HAL_RCC_OscConfig+0x5e>
 8004fe8:	4b8c      	ldr	r3, [pc, #560]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d10b      	bne.n	800500e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff6:	4b89      	ldr	r3, [pc, #548]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d06c      	beq.n	80050dc <HAL_RCC_OscConfig+0x12c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d168      	bne.n	80050dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e246      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x76>
 8005018:	4b80      	ldr	r3, [pc, #512]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7f      	ldr	r2, [pc, #508]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800501e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	e02e      	b.n	8005084 <HAL_RCC_OscConfig+0xd4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10c      	bne.n	8005048 <HAL_RCC_OscConfig+0x98>
 800502e:	4b7b      	ldr	r3, [pc, #492]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a7a      	ldr	r2, [pc, #488]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4b78      	ldr	r3, [pc, #480]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a77      	ldr	r2, [pc, #476]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e01d      	b.n	8005084 <HAL_RCC_OscConfig+0xd4>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0xbc>
 8005052:	4b72      	ldr	r3, [pc, #456]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a71      	ldr	r2, [pc, #452]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4b6f      	ldr	r3, [pc, #444]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e00b      	b.n	8005084 <HAL_RCC_OscConfig+0xd4>
 800506c:	4b6b      	ldr	r3, [pc, #428]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a6a      	ldr	r2, [pc, #424]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a67      	ldr	r2, [pc, #412]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 800507e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d013      	beq.n	80050b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fd fa6c 	bl	8002568 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005094:	f7fd fa68 	bl	8002568 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1fa      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0xe4>
 80050b2:	e014      	b.n	80050de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b4:	f7fd fa58 	bl	8002568 <HAL_GetTick>
 80050b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050bc:	f7fd fa54 	bl	8002568 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	; 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e1e6      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	4b53      	ldr	r3, [pc, #332]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x10c>
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d063      	beq.n	80051b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ea:	4b4c      	ldr	r3, [pc, #304]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050f6:	4b49      	ldr	r3, [pc, #292]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b08      	cmp	r3, #8
 8005100:	d11c      	bne.n	800513c <HAL_RCC_OscConfig+0x18c>
 8005102:	4b46      	ldr	r3, [pc, #280]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d116      	bne.n	800513c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510e:	4b43      	ldr	r3, [pc, #268]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_RCC_OscConfig+0x176>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d001      	beq.n	8005126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e1ba      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005126:	4b3d      	ldr	r3, [pc, #244]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4939      	ldr	r1, [pc, #228]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	e03a      	b.n	80051b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d020      	beq.n	8005186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005144:	4b36      	ldr	r3, [pc, #216]	; (8005220 <HAL_RCC_OscConfig+0x270>)
 8005146:	2201      	movs	r2, #1
 8005148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514a:	f7fd fa0d 	bl	8002568 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005152:	f7fd fa09 	bl	8002568 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e19b      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	4b2d      	ldr	r3, [pc, #180]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005170:	4b2a      	ldr	r3, [pc, #168]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4927      	ldr	r1, [pc, #156]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]
 8005184:	e015      	b.n	80051b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <HAL_RCC_OscConfig+0x270>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fd f9ec 	bl	8002568 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005194:	f7fd f9e8 	bl	8002568 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e17a      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f0      	bne.n	8005194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d03a      	beq.n	8005234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d019      	beq.n	80051fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c6:	4b17      	ldr	r3, [pc, #92]	; (8005224 <HAL_RCC_OscConfig+0x274>)
 80051c8:	2201      	movs	r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051cc:	f7fd f9cc 	bl	8002568 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d4:	f7fd f9c8 	bl	8002568 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e15a      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <HAL_RCC_OscConfig+0x26c>)
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051f2:	2001      	movs	r0, #1
 80051f4:	f000 fac4 	bl	8005780 <RCC_Delay>
 80051f8:	e01c      	b.n	8005234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_RCC_OscConfig+0x274>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005200:	f7fd f9b2 	bl	8002568 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005206:	e00f      	b.n	8005228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005208:	f7fd f9ae 	bl	8002568 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d908      	bls.n	8005228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e140      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	42420000 	.word	0x42420000
 8005224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005228:	4b9e      	ldr	r3, [pc, #632]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e9      	bne.n	8005208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80a6 	beq.w	800538e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005246:	4b97      	ldr	r3, [pc, #604]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10d      	bne.n	800526e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005252:	4b94      	ldr	r3, [pc, #592]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	4a93      	ldr	r2, [pc, #588]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525c:	61d3      	str	r3, [r2, #28]
 800525e:	4b91      	ldr	r3, [pc, #580]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4b8e      	ldr	r3, [pc, #568]	; (80054a8 <HAL_RCC_OscConfig+0x4f8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d118      	bne.n	80052ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527a:	4b8b      	ldr	r3, [pc, #556]	; (80054a8 <HAL_RCC_OscConfig+0x4f8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a8a      	ldr	r2, [pc, #552]	; (80054a8 <HAL_RCC_OscConfig+0x4f8>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fd f96f 	bl	8002568 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fd f96b 	bl	8002568 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b64      	cmp	r3, #100	; 0x64
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0fd      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a0:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <HAL_RCC_OscConfig+0x4f8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x312>
 80052b4:	4b7b      	ldr	r3, [pc, #492]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a7a      	ldr	r2, [pc, #488]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6213      	str	r3, [r2, #32]
 80052c0:	e02d      	b.n	800531e <HAL_RCC_OscConfig+0x36e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10c      	bne.n	80052e4 <HAL_RCC_OscConfig+0x334>
 80052ca:	4b76      	ldr	r3, [pc, #472]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	4a75      	ldr	r2, [pc, #468]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052d0:	f023 0301 	bic.w	r3, r3, #1
 80052d4:	6213      	str	r3, [r2, #32]
 80052d6:	4b73      	ldr	r3, [pc, #460]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	4a72      	ldr	r2, [pc, #456]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	6213      	str	r3, [r2, #32]
 80052e2:	e01c      	b.n	800531e <HAL_RCC_OscConfig+0x36e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b05      	cmp	r3, #5
 80052ea:	d10c      	bne.n	8005306 <HAL_RCC_OscConfig+0x356>
 80052ec:	4b6d      	ldr	r3, [pc, #436]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	4a6c      	ldr	r2, [pc, #432]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	6213      	str	r3, [r2, #32]
 80052f8:	4b6a      	ldr	r3, [pc, #424]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	4a69      	ldr	r2, [pc, #420]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6213      	str	r3, [r2, #32]
 8005304:	e00b      	b.n	800531e <HAL_RCC_OscConfig+0x36e>
 8005306:	4b67      	ldr	r3, [pc, #412]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4a66      	ldr	r2, [pc, #408]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6213      	str	r3, [r2, #32]
 8005312:	4b64      	ldr	r3, [pc, #400]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	4a63      	ldr	r2, [pc, #396]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d015      	beq.n	8005352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005326:	f7fd f91f 	bl	8002568 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532c:	e00a      	b.n	8005344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800532e:	f7fd f91b 	bl	8002568 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f241 3288 	movw	r2, #5000	; 0x1388
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0ab      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005344:	4b57      	ldr	r3, [pc, #348]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ee      	beq.n	800532e <HAL_RCC_OscConfig+0x37e>
 8005350:	e014      	b.n	800537c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fd f909 	bl	8002568 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fd f905 	bl	8002568 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e095      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005370:	4b4c      	ldr	r3, [pc, #304]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1ee      	bne.n	800535a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005382:	4b48      	ldr	r3, [pc, #288]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4a47      	ldr	r2, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800538c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8081 	beq.w	800549a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005398:	4b42      	ldr	r3, [pc, #264]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b08      	cmp	r3, #8
 80053a2:	d061      	beq.n	8005468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d146      	bne.n	800543a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ac:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <HAL_RCC_OscConfig+0x4fc>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fd f8d9 	bl	8002568 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ba:	f7fd f8d5 	bl	8002568 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e067      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053cc:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f0      	bne.n	80053ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e0:	d108      	bne.n	80053f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053e2:	4b30      	ldr	r3, [pc, #192]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	492d      	ldr	r1, [pc, #180]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a19      	ldr	r1, [r3, #32]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	430b      	orrs	r3, r1
 8005406:	4927      	ldr	r1, [pc, #156]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800540c:	4b27      	ldr	r3, [pc, #156]	; (80054ac <HAL_RCC_OscConfig+0x4fc>)
 800540e:	2201      	movs	r2, #1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005412:	f7fd f8a9 	bl	8002568 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541a:	f7fd f8a5 	bl	8002568 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e037      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800542c:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x46a>
 8005438:	e02f      	b.n	800549a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_RCC_OscConfig+0x4fc>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fd f892 	bl	8002568 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005448:	f7fd f88e 	bl	8002568 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e020      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545a:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x498>
 8005466:	e018      	b.n	800549a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e013      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_OscConfig+0x4f4>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	429a      	cmp	r2, r3
 8005486:	d106      	bne.n	8005496 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40007000 	.word	0x40007000
 80054ac:	42420060 	.word	0x42420060

080054b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0d0      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b6a      	ldr	r3, [pc, #424]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d910      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b67      	ldr	r3, [pc, #412]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 0207 	bic.w	r2, r3, #7
 80054da:	4965      	ldr	r1, [pc, #404]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b63      	ldr	r3, [pc, #396]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0b8      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d020      	beq.n	8005542 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005516:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005524:	4b53      	ldr	r3, [pc, #332]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a52      	ldr	r2, [pc, #328]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800552e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005530:	4b50      	ldr	r3, [pc, #320]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	494d      	ldr	r1, [pc, #308]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d040      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b47      	ldr	r3, [pc, #284]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d115      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e07f      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b41      	ldr	r3, [pc, #260]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e073      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e06b      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558e:	4b39      	ldr	r3, [pc, #228]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f023 0203 	bic.w	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4936      	ldr	r1, [pc, #216]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fc ffe2 	bl	8002568 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	e00a      	b.n	80055be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fc ffde 	bl	8002568 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e053      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 020c 	and.w	r2, r3, #12
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1eb      	bne.n	80055a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d0:	4b27      	ldr	r3, [pc, #156]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d210      	bcs.n	8005600 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 0207 	bic.w	r2, r3, #7
 80055e6:	4922      	ldr	r1, [pc, #136]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ee:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d001      	beq.n	8005600 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e032      	b.n	8005666 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d008      	beq.n	800561e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4916      	ldr	r1, [pc, #88]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800561a:	4313      	orrs	r3, r2
 800561c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800562a:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	490e      	ldr	r1, [pc, #56]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800563e:	f000 f821 	bl	8005684 <HAL_RCC_GetSysClockFreq>
 8005642:	4602      	mov	r2, r0
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	490a      	ldr	r1, [pc, #40]	; (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005650:	5ccb      	ldrb	r3, [r1, r3]
 8005652:	fa22 f303 	lsr.w	r3, r2, r3
 8005656:	4a09      	ldr	r2, [pc, #36]	; (800567c <HAL_RCC_ClockConfig+0x1cc>)
 8005658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x1d0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f7fc ff40 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40022000 	.word	0x40022000
 8005674:	40021000 	.word	0x40021000
 8005678:	0800bd3c 	.word	0x0800bd3c
 800567c:	20000044 	.word	0x20000044
 8005680:	20000048 	.word	0x20000048

08005684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005684:	b490      	push	{r4, r7}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800568a:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <HAL_RCC_GetSysClockFreq+0xb0>)
 800568c:	1d3c      	adds	r4, r7, #4
 800568e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005690:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005694:	f240 2301 	movw	r3, #513	; 0x201
 8005698:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	61fb      	str	r3, [r7, #28]
 800569e:	2300      	movs	r3, #0
 80056a0:	61bb      	str	r3, [r7, #24]
 80056a2:	2300      	movs	r3, #0
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 030c 	and.w	r3, r3, #12
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d002      	beq.n	80056c4 <HAL_RCC_GetSysClockFreq+0x40>
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d003      	beq.n	80056ca <HAL_RCC_GetSysClockFreq+0x46>
 80056c2:	e02d      	b.n	8005720 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_RCC_GetSysClockFreq+0xb8>)
 80056c6:	623b      	str	r3, [r7, #32]
      break;
 80056c8:	e02d      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	0c9b      	lsrs	r3, r3, #18
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056d6:	4413      	add	r3, r2
 80056d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80056dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <HAL_RCC_GetSysClockFreq+0xb4>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	0c5b      	lsrs	r3, r3, #17
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80056f6:	4413      	add	r3, r2
 80056f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80056fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a0e      	ldr	r2, [pc, #56]	; (800573c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005702:	fb02 f203 	mul.w	r2, r2, r3
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	fbb2 f3f3 	udiv	r3, r2, r3
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	e004      	b.n	800571a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	623b      	str	r3, [r7, #32]
      break;
 800571e:	e002      	b.n	8005726 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005722:	623b      	str	r3, [r7, #32]
      break;
 8005724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005726:	6a3b      	ldr	r3, [r7, #32]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bc90      	pop	{r4, r7}
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	0800bccc 	.word	0x0800bccc
 8005738:	40021000 	.word	0x40021000
 800573c:	007a1200 	.word	0x007a1200
 8005740:	003d0900 	.word	0x003d0900

08005744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b02      	ldr	r3, [pc, #8]	; (8005754 <HAL_RCC_GetHCLKFreq+0x10>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	20000044 	.word	0x20000044

08005758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800575c:	f7ff fff2 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005760:	4602      	mov	r2, r0
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	0adb      	lsrs	r3, r3, #11
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	4903      	ldr	r1, [pc, #12]	; (800577c <HAL_RCC_GetPCLK2Freq+0x24>)
 800576e:	5ccb      	ldrb	r3, [r1, r3]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005774:	4618      	mov	r0, r3
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000
 800577c:	0800bd4c 	.word	0x0800bd4c

08005780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <RCC_Delay+0x34>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <RCC_Delay+0x38>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	0a5b      	lsrs	r3, r3, #9
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800579c:	bf00      	nop
  }
  while (Delay --);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1e5a      	subs	r2, r3, #1
 80057a2:	60fa      	str	r2, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f9      	bne.n	800579c <RCC_Delay+0x1c>
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	20000044 	.word	0x20000044
 80057b8:	10624dd3 	.word	0x10624dd3

080057bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d07d      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057dc:	4b4f      	ldr	r3, [pc, #316]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10d      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e8:	4b4c      	ldr	r3, [pc, #304]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	4a4b      	ldr	r2, [pc, #300]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f2:	61d3      	str	r3, [r2, #28]
 80057f4:	4b49      	ldr	r3, [pc, #292]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fc:	60bb      	str	r3, [r7, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005800:	2301      	movs	r3, #1
 8005802:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005804:	4b46      	ldr	r3, [pc, #280]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580c:	2b00      	cmp	r3, #0
 800580e:	d118      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005810:	4b43      	ldr	r3, [pc, #268]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800581a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581c:	f7fc fea4 	bl	8002568 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005822:	e008      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005824:	f7fc fea0 	bl	8002568 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b64      	cmp	r3, #100	; 0x64
 8005830:	d901      	bls.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e06d      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005836:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d02e      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d027      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005860:	4b2e      	ldr	r3, [pc, #184]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005868:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800586a:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005870:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d014      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005886:	f7fc fe6f 	bl	8002568 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fc fe6b 	bl	8002568 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e036      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0ee      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058b0:	4b1a      	ldr	r3, [pc, #104]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4917      	ldr	r1, [pc, #92]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058e0:	4b0e      	ldr	r3, [pc, #56]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	490b      	ldr	r1, [pc, #44]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0310 	and.w	r3, r3, #16
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4904      	ldr	r1, [pc, #16]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590c:	4313      	orrs	r3, r2
 800590e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40021000 	.word	0x40021000
 8005920:	40007000 	.word	0x40007000
 8005924:	42420440 	.word	0x42420440

08005928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b08d      	sub	sp, #52	; 0x34
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005930:	4b5a      	ldr	r3, [pc, #360]	; (8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005932:	f107 040c 	add.w	r4, r7, #12
 8005936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800593c:	f240 2301 	movw	r3, #513	; 0x201
 8005940:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	2300      	movs	r3, #0
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594a:	2300      	movs	r3, #0
 800594c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	2300      	movs	r3, #0
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b10      	cmp	r3, #16
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b10      	cmp	r3, #16
 8005960:	f200 8091 	bhi.w	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d04c      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d07c      	beq.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005970:	e089      	b.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8005972:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005978:	4b49      	ldr	r3, [pc, #292]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8082 	beq.w	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	0c9b      	lsrs	r3, r3, #18
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005992:	4413      	add	r3, r2
 8005994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005998:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d018      	beq.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059a4:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	0c5b      	lsrs	r3, r3, #17
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059b2:	4413      	add	r3, r2
 80059b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00d      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80059c4:	4a37      	ldr	r2, [pc, #220]	; (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	fb02 f303 	mul.w	r3, r2, r3
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059d4:	e004      	b.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	4a33      	ldr	r2, [pc, #204]	; (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80059da:	fb02 f303 	mul.w	r3, r2, r3
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80059e0:	4b2f      	ldr	r3, [pc, #188]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059ec:	d102      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80059f2:	e04a      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	4a2c      	ldr	r2, [pc, #176]	; (8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a02:	e042      	b.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8005a04:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a14:	d108      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005a20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a26:	e01f      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a32:	d109      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005a34:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005a40:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a46:	e00f      	b.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a52:	d11c      	bne.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d016      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8005a60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a66:	e012      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005a68:	e011      	b.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005a6a:	f7ff fe75 	bl	8005758 <HAL_RCC_GetPCLK2Freq>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0b9b      	lsrs	r3, r3, #14
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005a84:	e004      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a86:	bf00      	nop
 8005a88:	e002      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e000      	b.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8005a8e:	bf00      	nop
    }
  }
  return (frequency);
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3734      	adds	r7, #52	; 0x34
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd90      	pop	{r4, r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	0800bcdc 	.word	0x0800bcdc
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	007a1200 	.word	0x007a1200
 8005aa8:	003d0900 	.word	0x003d0900
 8005aac:	aaaaaaab 	.word	0xaaaaaaab

08005ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e076      	b.n	8005bb0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad2:	d009      	beq.n	8005ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
 8005ada:	e005      	b.n	8005ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb ffe6 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	ea42 0103 	orr.w	r1, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	0c1a      	lsrs	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f002 0204 	and.w	r2, r2, #4
 8005b8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_SPI_Transmit+0x22>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e126      	b.n	8005e28 <HAL_SPI_Transmit+0x270>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be2:	f7fc fcc1 	bl	8002568 <HAL_GetTick>
 8005be6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bfc:	e10b      	b.n	8005e16 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x52>
 8005c04:	88fb      	ldrh	r3, [r7, #6]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c0e:	e102      	b.n	8005e16 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2203      	movs	r2, #3
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	88fa      	ldrh	r2, [r7, #6]
 8005c28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c56:	d10f      	bne.n	8005c78 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d007      	beq.n	8005c96 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9e:	d14b      	bne.n	8005d38 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_SPI_Transmit+0xf6>
 8005ca8:	8afb      	ldrh	r3, [r7, #22]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d13e      	bne.n	8005d2c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cd2:	e02b      	b.n	8005d2c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d112      	bne.n	8005d08 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	881a      	ldrh	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	1c9a      	adds	r2, r3, #2
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d06:	e011      	b.n	8005d2c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d08:	f7fc fc2e 	bl	8002568 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d803      	bhi.n	8005d20 <HAL_SPI_Transmit+0x168>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d102      	bne.n	8005d26 <HAL_SPI_Transmit+0x16e>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d2a:	e074      	b.n	8005e16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1ce      	bne.n	8005cd4 <HAL_SPI_Transmit+0x11c>
 8005d36:	e04c      	b.n	8005dd2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Transmit+0x18e>
 8005d40:	8afb      	ldrh	r3, [r7, #22]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d140      	bne.n	8005dc8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d6c:	e02c      	b.n	8005dc8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d113      	bne.n	8005da4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	86da      	strh	r2, [r3, #54]	; 0x36
 8005da2:	e011      	b.n	8005dc8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005da4:	f7fc fbe0 	bl	8002568 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d803      	bhi.n	8005dbc <HAL_SPI_Transmit+0x204>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d102      	bne.n	8005dc2 <HAL_SPI_Transmit+0x20a>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dc6:	e026      	b.n	8005e16 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cd      	bne.n	8005d6e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 f8b2 	bl	8005f40 <SPI_EndRxTxTransaction>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	613b      	str	r3, [r7, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e000      	b.n	8005e16 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e40:	f7fc fb92 	bl	8002568 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	1a9b      	subs	r3, r3, r2
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e50:	f7fc fb8a 	bl	8002568 <HAL_GetTick>
 8005e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	015b      	lsls	r3, r3, #5
 8005e5c:	0d1b      	lsrs	r3, r3, #20
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	fb02 f303 	mul.w	r3, r2, r3
 8005e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e66:	e054      	b.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d050      	beq.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e70:	f7fc fb7a 	bl	8002568 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d902      	bls.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d13d      	bne.n	8005f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9e:	d111      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	d004      	beq.n	8005eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb2:	d107      	bne.n	8005ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ecc:	d10f      	bne.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e017      	b.n	8005f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d19b      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000044 	.word	0x20000044

08005f40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2200      	movs	r2, #0
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f7ff ff6a 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e000      	b.n	8005f74 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e041      	b.n	8006012 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fb fdd4 	bl	8001b50 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3304      	adds	r3, #4
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4610      	mov	r0, r2
 8005fbc:	f000 fb38 	bl	8006630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d104      	bne.n	8006036 <HAL_TIM_IC_Start_IT+0x1a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006032:	b2db      	uxtb	r3, r3
 8006034:	e013      	b.n	800605e <HAL_TIM_IC_Start_IT+0x42>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d104      	bne.n	8006046 <HAL_TIM_IC_Start_IT+0x2a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e00b      	b.n	800605e <HAL_TIM_IC_Start_IT+0x42>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d104      	bne.n	8006056 <HAL_TIM_IC_Start_IT+0x3a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	b2db      	uxtb	r3, r3
 8006054:	e003      	b.n	800605e <HAL_TIM_IC_Start_IT+0x42>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605c:	b2db      	uxtb	r3, r3
 800605e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <HAL_TIM_IC_Start_IT+0x54>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800606c:	b2db      	uxtb	r3, r3
 800606e:	e013      	b.n	8006098 <HAL_TIM_IC_Start_IT+0x7c>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b04      	cmp	r3, #4
 8006074:	d104      	bne.n	8006080 <HAL_TIM_IC_Start_IT+0x64>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e00b      	b.n	8006098 <HAL_TIM_IC_Start_IT+0x7c>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b08      	cmp	r3, #8
 8006084:	d104      	bne.n	8006090 <HAL_TIM_IC_Start_IT+0x74>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e003      	b.n	8006098 <HAL_TIM_IC_Start_IT+0x7c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006096:	b2db      	uxtb	r3, r3
 8006098:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d102      	bne.n	80060a6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d001      	beq.n	80060aa <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0b3      	b.n	8006212 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <HAL_TIM_IC_Start_IT+0x9e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b8:	e013      	b.n	80060e2 <HAL_TIM_IC_Start_IT+0xc6>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d104      	bne.n	80060ca <HAL_TIM_IC_Start_IT+0xae>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060c8:	e00b      	b.n	80060e2 <HAL_TIM_IC_Start_IT+0xc6>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d104      	bne.n	80060da <HAL_TIM_IC_Start_IT+0xbe>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d8:	e003      	b.n	80060e2 <HAL_TIM_IC_Start_IT+0xc6>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_IC_Start_IT+0xd6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f0:	e013      	b.n	800611a <HAL_TIM_IC_Start_IT+0xfe>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d104      	bne.n	8006102 <HAL_TIM_IC_Start_IT+0xe6>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006100:	e00b      	b.n	800611a <HAL_TIM_IC_Start_IT+0xfe>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d104      	bne.n	8006112 <HAL_TIM_IC_Start_IT+0xf6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006110:	e003      	b.n	800611a <HAL_TIM_IC_Start_IT+0xfe>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b0c      	cmp	r3, #12
 800611e:	d841      	bhi.n	80061a4 <HAL_TIM_IC_Start_IT+0x188>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <HAL_TIM_IC_Start_IT+0x10c>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	0800615d 	.word	0x0800615d
 800612c:	080061a5 	.word	0x080061a5
 8006130:	080061a5 	.word	0x080061a5
 8006134:	080061a5 	.word	0x080061a5
 8006138:	0800616f 	.word	0x0800616f
 800613c:	080061a5 	.word	0x080061a5
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	08006181 	.word	0x08006181
 800614c:	080061a5 	.word	0x080061a5
 8006150:	080061a5 	.word	0x080061a5
 8006154:	080061a5 	.word	0x080061a5
 8006158:	08006193 	.word	0x08006193
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0202 	orr.w	r2, r2, #2
 800616a:	60da      	str	r2, [r3, #12]
      break;
 800616c:	e01b      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0204 	orr.w	r2, r2, #4
 800617c:	60da      	str	r2, [r3, #12]
      break;
 800617e:	e012      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0208 	orr.w	r2, r2, #8
 800618e:	60da      	str	r2, [r3, #12]
      break;
 8006190:	e009      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0210 	orr.w	r2, r2, #16
 80061a0:	60da      	str	r2, [r3, #12]
      break;
 80061a2:	e000      	b.n	80061a6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80061a4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fbad 	bl	800690e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a18      	ldr	r2, [pc, #96]	; (800621c <HAL_TIM_IC_Start_IT+0x200>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00e      	beq.n	80061dc <HAL_TIM_IC_Start_IT+0x1c0>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d009      	beq.n	80061dc <HAL_TIM_IC_Start_IT+0x1c0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a14      	ldr	r2, [pc, #80]	; (8006220 <HAL_TIM_IC_Start_IT+0x204>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_TIM_IC_Start_IT+0x1c0>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a13      	ldr	r2, [pc, #76]	; (8006224 <HAL_TIM_IC_Start_IT+0x208>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d111      	bne.n	8006200 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 0307 	and.w	r3, r3, #7
 80061e6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b06      	cmp	r3, #6
 80061ec:	d010      	beq.n	8006210 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fe:	e007      	b.n	8006210 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800

08006228 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b02      	cmp	r3, #2
 800623c:	d122      	bne.n	8006284 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b02      	cmp	r3, #2
 800624a:	d11b      	bne.n	8006284 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0202 	mvn.w	r2, #2
 8006254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fb f868 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8006270:	e005      	b.n	800627e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9c1 	bl	80065fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f9c7 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b04      	cmp	r3, #4
 8006290:	d122      	bne.n	80062d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b04      	cmp	r3, #4
 800629e:	d11b      	bne.n	80062d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0204 	mvn.w	r2, #4
 80062a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fb f83e 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 80062c4:	e005      	b.n	80062d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f997 	bl	80065fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f99d 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d122      	bne.n	800632c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d11b      	bne.n	800632c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0208 	mvn.w	r2, #8
 80062fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb f814 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8006318:	e005      	b.n	8006326 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f96d 	bl	80065fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f973 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b10      	cmp	r3, #16
 8006338:	d122      	bne.n	8006380 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b10      	cmp	r3, #16
 8006346:	d11b      	bne.n	8006380 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0210 	mvn.w	r2, #16
 8006350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2208      	movs	r2, #8
 8006356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fa ffea 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f943 	bl	80065fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f949 	bl	800660c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b01      	cmp	r3, #1
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0201 	mvn.w	r2, #1
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f91e 	bl	80065e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b80      	cmp	r3, #128	; 0x80
 80063b8:	d10e      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b80      	cmp	r3, #128	; 0x80
 80063c6:	d107      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fb27 	bl	8006a26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d10e      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d107      	bne.n	8006404 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f90d 	bl	800661e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d10e      	bne.n	8006430 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0320 	and.w	r3, r3, #32
 800641c:	2b20      	cmp	r3, #32
 800641e:	d107      	bne.n	8006430 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0220 	mvn.w	r2, #32
 8006428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 faf2 	bl	8006a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_TIM_IC_ConfigChannel+0x1a>
 800644e:	2302      	movs	r3, #2
 8006450:	e082      	b.n	8006558 <HAL_TIM_IC_ConfigChannel+0x120>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d11b      	bne.n	8006498 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6819      	ldr	r1, [r3, #0]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 f940 	bl	80066f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 020c 	bic.w	r2, r2, #12
 8006482:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	619a      	str	r2, [r3, #24]
 8006496:	e05a      	b.n	800654e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b04      	cmp	r3, #4
 800649c:	d11c      	bne.n	80064d8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f000 f97b 	bl	80067a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6999      	ldr	r1, [r3, #24]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	021a      	lsls	r2, r3, #8
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]
 80064d6:	e03a      	b.n	800654e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b08      	cmp	r3, #8
 80064dc:	d11b      	bne.n	8006516 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f000 f997 	bl	8006820 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 020c 	bic.w	r2, r2, #12
 8006500:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69d9      	ldr	r1, [r3, #28]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	61da      	str	r2, [r3, #28]
 8006514:	e01b      	b.n	800654e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f000 f9b6 	bl	8006896 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006538:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69d9      	ldr	r1, [r3, #28]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	021a      	lsls	r2, r3, #8
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b0c      	cmp	r3, #12
 8006572:	d831      	bhi.n	80065d8 <HAL_TIM_ReadCapturedValue+0x78>
 8006574:	a201      	add	r2, pc, #4	; (adr r2, 800657c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657a:	bf00      	nop
 800657c:	080065b1 	.word	0x080065b1
 8006580:	080065d9 	.word	0x080065d9
 8006584:	080065d9 	.word	0x080065d9
 8006588:	080065d9 	.word	0x080065d9
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065d9 	.word	0x080065d9
 8006594:	080065d9 	.word	0x080065d9
 8006598:	080065d9 	.word	0x080065d9
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065d9 	.word	0x080065d9
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080065d9 	.word	0x080065d9
 80065ac:	080065cf 	.word	0x080065cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	60fb      	str	r3, [r7, #12]

      break;
 80065b8:	e00f      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	60fb      	str	r3, [r7, #12]

      break;
 80065c2:	e00a      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ca:	60fb      	str	r3, [r7, #12]

      break;
 80065cc:	e005      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	60fb      	str	r3, [r7, #12]

      break;
 80065d6:	e000      	b.n	80065da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065d8:	bf00      	nop
  }

  return tmpreg;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop

080065e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a29      	ldr	r2, [pc, #164]	; (80066e8 <TIM_Base_SetConfig+0xb8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d00b      	beq.n	8006660 <TIM_Base_SetConfig+0x30>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664e:	d007      	beq.n	8006660 <TIM_Base_SetConfig+0x30>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a26      	ldr	r2, [pc, #152]	; (80066ec <TIM_Base_SetConfig+0xbc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_Base_SetConfig+0x30>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a25      	ldr	r2, [pc, #148]	; (80066f0 <TIM_Base_SetConfig+0xc0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d108      	bne.n	8006672 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <TIM_Base_SetConfig+0xb8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00b      	beq.n	8006692 <TIM_Base_SetConfig+0x62>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d007      	beq.n	8006692 <TIM_Base_SetConfig+0x62>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a19      	ldr	r2, [pc, #100]	; (80066ec <TIM_Base_SetConfig+0xbc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_Base_SetConfig+0x62>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <TIM_Base_SetConfig+0xc0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d108      	bne.n	80066a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <TIM_Base_SetConfig+0xb8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d103      	bne.n	80066d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	615a      	str	r2, [r3, #20]
}
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr
 80066e8:	40012c00 	.word	0x40012c00
 80066ec:	40000400 	.word	0x40000400
 80066f0:	40000800 	.word	0x40000800

080066f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <TIM_TI1_SetConfig+0xa8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00b      	beq.n	800673a <TIM_TI1_SetConfig+0x46>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d007      	beq.n	800673a <TIM_TI1_SetConfig+0x46>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4a1c      	ldr	r2, [pc, #112]	; (80067a0 <TIM_TI1_SetConfig+0xac>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_TI1_SetConfig+0x46>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <TIM_TI1_SetConfig+0xb0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d101      	bne.n	800673e <TIM_TI1_SetConfig+0x4a>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <TIM_TI1_SetConfig+0x4c>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e003      	b.n	800675e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	b2db      	uxtb	r3, r3
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f023 030a 	bic.w	r3, r3, #10
 8006778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f003 030a 	and.w	r3, r3, #10
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800

080067a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0210 	bic.w	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	031b      	lsls	r3, r3, #12
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 0303 	bic.w	r3, r3, #3
 800684c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800685c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	011b      	lsls	r3, r3, #4
 8006862:	b2db      	uxtb	r3, r3
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006870:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	621a      	str	r2, [r3, #32]
}
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr

08006896 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006896:	b480      	push	{r7}
 8006898:	b087      	sub	sp, #28
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
 80068a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	031b      	lsls	r3, r3, #12
 80068da:	b29b      	uxth	r3, r3
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	031b      	lsls	r3, r3, #12
 80068ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800690e:	b480      	push	{r7}
 8006910:	b087      	sub	sp, #28
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2201      	movs	r2, #1
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	43db      	mvns	r3, r3
 8006930:	401a      	ands	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	6879      	ldr	r1, [r7, #4]
 8006942:	fa01 f303 	lsl.w	r3, r1, r3
 8006946:	431a      	orrs	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr
	...

08006958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800696c:	2302      	movs	r3, #2
 800696e:	e046      	b.n	80069fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a16      	ldr	r2, [pc, #88]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d009      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a10      	ldr	r2, [pc, #64]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10c      	bne.n	80069ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800

08006a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a38:	b084      	sub	sp, #16
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	f107 0014 	add.w	r0, r7, #20
 8006a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	b004      	add	sp, #16
 8006a56:	4770      	bx	lr

08006a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a68:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a8c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006a90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ad0:	b084      	sub	sp, #16
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	f107 0014 	add.w	r0, r7, #20
 8006ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	b004      	add	sp, #16
 8006b0e:	4770      	bx	lr

08006b10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b09b      	sub	sp, #108	; 0x6c
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	78db      	ldrb	r3, [r3, #3]
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d81f      	bhi.n	8006b82 <USB_ActivateEndpoint+0x72>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <USB_ActivateEndpoint+0x38>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b59 	.word	0x08006b59
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b8b 	.word	0x08006b8b
 8006b54:	08006b67 	.word	0x08006b67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006b58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b64:	e012      	b.n	8006b8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006b66:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b6a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006b6e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b72:	e00b      	b.n	8006b8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006b80:	e004      	b.n	8006b8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006b88:	e000      	b.n	8006b8c <USB_ActivateEndpoint+0x7c>
      break;
 8006b8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	441a      	add	r2, r3
 8006b96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	7b1b      	ldrb	r3, [r3, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 8149 	bne.w	8006e90 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8084 	beq.w	8006d10 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	461a      	mov	r2, r3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	011a      	lsls	r2, r3, #4
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2a:	613b      	str	r3, [r7, #16]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	88db      	ldrh	r3, [r3, #6]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	4413      	add	r3, r2
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	81fb      	strh	r3, [r7, #14]
 8006c4a:	89fb      	ldrh	r3, [r7, #14]
 8006c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <USB_ActivateEndpoint+0x17c>
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	81bb      	strh	r3, [r7, #12]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	89bb      	ldrh	r3, [r7, #12]
 8006c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d020      	beq.n	8006cd6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006caa:	813b      	strh	r3, [r7, #8]
 8006cac:	893b      	ldrh	r3, [r7, #8]
 8006cae:	f083 0320 	eor.w	r3, r3, #32
 8006cb2:	813b      	strh	r3, [r7, #8]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	441a      	add	r2, r3
 8006cbe:	893b      	ldrh	r3, [r7, #8]
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]
 8006cd4:	e27f      	b.n	80071d6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	817b      	strh	r3, [r7, #10]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	897b      	ldrh	r3, [r7, #10]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
 8006d0e:	e262      	b.n	80071d6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	4413      	add	r3, r2
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	011a      	lsls	r2, r3, #4
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	005b      	lsls	r3, r3, #1
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d42:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	627b      	str	r3, [r7, #36]	; 0x24
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	4413      	add	r3, r2
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	011a      	lsls	r2, r3, #4
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d112      	bne.n	8006d96 <USB_ActivateEndpoint+0x286>
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	e02f      	b.n	8006df6 <USB_ActivateEndpoint+0x2e6>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d9c:	d813      	bhi.n	8006dc6 <USB_ActivateEndpoint+0x2b6>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	663b      	str	r3, [r7, #96]	; 0x60
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <USB_ActivateEndpoint+0x2a8>
 8006db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db4:	3301      	adds	r3, #1
 8006db6:	663b      	str	r3, [r7, #96]	; 0x60
 8006db8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	e017      	b.n	8006df6 <USB_ActivateEndpoint+0x2e6>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <USB_ActivateEndpoint+0x2d0>
 8006dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	663b      	str	r3, [r7, #96]	; 0x60
 8006de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	029b      	lsls	r3, r3, #10
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4413      	add	r3, r2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	83fb      	strh	r3, [r7, #30]
 8006e04:	8bfb      	ldrh	r3, [r7, #30]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01b      	beq.n	8006e46 <USB_ActivateEndpoint+0x336>
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e24:	83bb      	strh	r3, [r7, #28]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	441a      	add	r2, r3
 8006e30:	8bbb      	ldrh	r3, [r7, #28]
 8006e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4413      	add	r3, r2
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5c:	837b      	strh	r3, [r7, #26]
 8006e5e:	8b7b      	ldrh	r3, [r7, #26]
 8006e60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e64:	837b      	strh	r3, [r7, #26]
 8006e66:	8b7b      	ldrh	r3, [r7, #26]
 8006e68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e6c:	837b      	strh	r3, [r7, #26]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	441a      	add	r2, r3
 8006e78:	8b7b      	ldrh	r3, [r7, #26]
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
 8006e8e:	e1a2      	b.n	80071d6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006edc:	4413      	add	r3, r2
 8006ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	011a      	lsls	r2, r3, #4
 8006ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eee:	657b      	str	r3, [r7, #84]	; 0x54
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	891b      	ldrh	r3, [r3, #8]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	653b      	str	r3, [r7, #80]	; 0x50
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f10:	4413      	add	r3, r2
 8006f12:	653b      	str	r3, [r7, #80]	; 0x50
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	895b      	ldrh	r3, [r3, #10]
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 8091 	bne.w	8007060 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <USB_ActivateEndpoint+0x47e>
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01b      	beq.n	8006fde <USB_ActivateEndpoint+0x4ce>
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ff6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006ff8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006ffe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007000:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007004:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800701e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007022:	b29b      	uxth	r3, r3
 8007024:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800703c:	867b      	strh	r3, [r7, #50]	; 0x32
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	441a      	add	r2, r3
 8007048:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800704a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800705a:	b29b      	uxth	r3, r3
 800705c:	8013      	strh	r3, [r2, #0]
 800705e:	e0ba      	b.n	80071d6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007070:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d01d      	beq.n	80070b8 <USB_ActivateEndpoint+0x5a8>
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800708e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007092:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	441a      	add	r2, r3
 80070a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80070c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01d      	beq.n	8007110 <USB_ActivateEndpoint+0x600>
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	881b      	ldrh	r3, [r3, #0]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007108:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	78db      	ldrb	r3, [r3, #3]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d024      	beq.n	8007162 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800712e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007132:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007136:	f083 0320 	eor.w	r3, r3, #32
 800713a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800714c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]
 8007160:	e01d      	b.n	800719e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007178:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	441a      	add	r2, r3
 8007186:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800718a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800718e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	b29b      	uxth	r3, r3
 800719c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	881b      	ldrh	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	441a      	add	r2, r3
 80071c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80071c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80071d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80071da:	4618      	mov	r0, r3
 80071dc:	376c      	adds	r7, #108	; 0x6c
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b08d      	sub	sp, #52	; 0x34
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	7b1b      	ldrb	r3, [r3, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f040 808e 	bne.w	8007314 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d044      	beq.n	800728a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	81bb      	strh	r3, [r7, #12]
 800720e:	89bb      	ldrh	r3, [r7, #12]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01b      	beq.n	8007250 <USB_DeactivateEndpoint+0x6c>
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	881b      	ldrh	r3, [r3, #0]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	817b      	strh	r3, [r7, #10]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	897b      	ldrh	r3, [r7, #10]
 800723c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007266:	813b      	strh	r3, [r7, #8]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	441a      	add	r2, r3
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800727c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007284:	b29b      	uxth	r3, r3
 8007286:	8013      	strh	r3, [r2, #0]
 8007288:	e192      	b.n	80075b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	827b      	strh	r3, [r7, #18]
 8007298:	8a7b      	ldrh	r3, [r7, #18]
 800729a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01b      	beq.n	80072da <USB_DeactivateEndpoint+0xf6>
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b8:	823b      	strh	r3, [r7, #16]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	441a      	add	r2, r3
 80072c4:	8a3b      	ldrh	r3, [r7, #16]
 80072c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f0:	81fb      	strh	r3, [r7, #14]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	441a      	add	r2, r3
 80072fc:	89fb      	ldrh	r3, [r7, #14]
 80072fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730e:	b29b      	uxth	r3, r3
 8007310:	8013      	strh	r3, [r2, #0]
 8007312:	e14d      	b.n	80075b0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f040 80a5 	bne.w	8007468 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	843b      	strh	r3, [r7, #32]
 800732c:	8c3b      	ldrh	r3, [r7, #32]
 800732e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01b      	beq.n	800736e <USB_DeactivateEndpoint+0x18a>
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734c:	83fb      	strh	r3, [r7, #30]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	441a      	add	r2, r3
 8007358:	8bfb      	ldrh	r3, [r7, #30]
 800735a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800735e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007362:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800736a:	b29b      	uxth	r3, r3
 800736c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4413      	add	r3, r2
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	83bb      	strh	r3, [r7, #28]
 800737c:	8bbb      	ldrh	r3, [r7, #28]
 800737e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01b      	beq.n	80073be <USB_DeactivateEndpoint+0x1da>
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739c:	837b      	strh	r3, [r7, #26]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	441a      	add	r2, r3
 80073a8:	8b7b      	ldrh	r3, [r7, #26]
 80073aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d4:	833b      	strh	r3, [r7, #24]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	441a      	add	r2, r3
 80073e0:	8b3b      	ldrh	r3, [r7, #24]
 80073e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800740c:	82fb      	strh	r3, [r7, #22]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	441a      	add	r2, r3
 8007418:	8afb      	ldrh	r3, [r7, #22]
 800741a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	b29b      	uxth	r3, r3
 800742c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007444:	82bb      	strh	r3, [r7, #20]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	441a      	add	r2, r3
 8007450:	8abb      	ldrh	r3, [r7, #20]
 8007452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800745a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007462:	b29b      	uxth	r3, r3
 8007464:	8013      	strh	r3, [r2, #0]
 8007466:	e0a3      	b.n	80075b0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007476:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <USB_DeactivateEndpoint+0x2d4>
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007496:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80074c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01b      	beq.n	8007508 <USB_DeactivateEndpoint+0x324>
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	853b      	strh	r3, [r7, #40]	; 0x28
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	441a      	add	r2, r3
 80074f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80074f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007504:	b29b      	uxth	r3, r3
 8007506:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29b      	uxth	r3, r3
 8007516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	441a      	add	r2, r3
 800752a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800752c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	881b      	ldrh	r3, [r3, #0]
 800754c:	b29b      	uxth	r3, r3
 800754e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007556:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	441a      	add	r2, r3
 8007562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007574:	b29b      	uxth	r3, r3
 8007576:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800758a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800759c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3734      	adds	r7, #52	; 0x34
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr

080075bc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b0c4      	sub	sp, #272	; 0x110
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	6018      	str	r0, [r3, #0]
 80075c6:	463b      	mov	r3, r7
 80075c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ca:	463b      	mov	r3, r7
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 8557 	bne.w	8008084 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80075d6:	463b      	mov	r3, r7
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	699a      	ldr	r2, [r3, #24]
 80075dc:	463b      	mov	r3, r7
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d905      	bls.n	80075f2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80075e6:	463b      	mov	r3, r7
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075f0:	e004      	b.n	80075fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075fc:	463b      	mov	r3, r7
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	7b1b      	ldrb	r3, [r3, #12]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d12c      	bne.n	8007660 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6959      	ldr	r1, [r3, #20]
 800760c:	463b      	mov	r3, r7
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	88da      	ldrh	r2, [r3, #6]
 8007612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007616:	b29b      	uxth	r3, r3
 8007618:	1d38      	adds	r0, r7, #4
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	f001 fa2c 	bl	8008a78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762e:	b29b      	uxth	r3, r3
 8007630:	461a      	mov	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	463b      	mov	r3, r7
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	011a      	lsls	r2, r3, #4
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007648:	f107 0310 	add.w	r3, r7, #16
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007652:	b29a      	uxth	r2, r3
 8007654:	f107 0310 	add.w	r3, r7, #16
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	801a      	strh	r2, [r3, #0]
 800765c:	f000 bcdd 	b.w	800801a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007660:	463b      	mov	r3, r7
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	78db      	ldrb	r3, [r3, #3]
 8007666:	2b02      	cmp	r3, #2
 8007668:	f040 8347 	bne.w	8007cfa <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800766c:	463b      	mov	r3, r7
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	463b      	mov	r3, r7
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	429a      	cmp	r2, r3
 800767a:	f240 82eb 	bls.w	8007c54 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800767e:	1d3b      	adds	r3, r7, #4
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	463b      	mov	r3, r7
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800769c:	1d3b      	adds	r3, r7, #4
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	463b      	mov	r3, r7
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80076c2:	463b      	mov	r3, r7
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a1a      	ldr	r2, [r3, #32]
 80076c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80076cc:	1ad2      	subs	r2, r2, r3
 80076ce:	463b      	mov	r3, r7
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	463b      	mov	r3, r7
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8159 	beq.w	80079a2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
 80076f6:	463b      	mov	r3, r7
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d164      	bne.n	80077ca <USB_EPStartXfer+0x20e>
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007706:	1d3b      	adds	r3, r7, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	4413      	add	r3, r2
 8007716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007718:	463b      	mov	r3, r7
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	011a      	lsls	r2, r3, #4
 8007720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007722:	4413      	add	r3, r2
 8007724:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007728:	62bb      	str	r3, [r7, #40]	; 0x28
 800772a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d112      	bne.n	8007758 <USB_EPStartXfer+0x19c>
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	881b      	ldrh	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800773c:	b29a      	uxth	r2, r3
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	881b      	ldrh	r3, [r3, #0]
 8007746:	b29b      	uxth	r3, r3
 8007748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800774c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007750:	b29a      	uxth	r2, r3
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	e054      	b.n	8007802 <USB_EPStartXfer+0x246>
 8007758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800775c:	2b3e      	cmp	r3, #62	; 0x3e
 800775e:	d817      	bhi.n	8007790 <USB_EPStartXfer+0x1d4>
 8007760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800776a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d004      	beq.n	8007780 <USB_EPStartXfer+0x1c4>
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777a:	3301      	adds	r3, #1
 800777c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	b29b      	uxth	r3, r3
 8007786:	029b      	lsls	r3, r3, #10
 8007788:	b29a      	uxth	r2, r3
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	e038      	b.n	8007802 <USB_EPStartXfer+0x246>
 8007790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800779a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <USB_EPStartXfer+0x1f4>
 80077a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077aa:	3b01      	subs	r3, #1
 80077ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e01b      	b.n	8007802 <USB_EPStartXfer+0x246>
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	785b      	ldrb	r3, [r3, #1]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d116      	bne.n	8007802 <USB_EPStartXfer+0x246>
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077dc:	b29b      	uxth	r3, r3
 80077de:	461a      	mov	r2, r3
 80077e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e2:	4413      	add	r3, r2
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	011a      	lsls	r2, r3, #4
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077f6:	633b      	str	r3, [r7, #48]	; 0x30
 80077f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007802:	463b      	mov	r3, r7
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	895b      	ldrh	r3, [r3, #10]
 8007808:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800780c:	463b      	mov	r3, r7
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6959      	ldr	r1, [r3, #20]
 8007812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007816:	b29b      	uxth	r3, r3
 8007818:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800781c:	1d38      	adds	r0, r7, #4
 800781e:	6800      	ldr	r0, [r0, #0]
 8007820:	f001 f92a 	bl	8008a78 <USB_WritePMA>
            ep->xfer_buff += len;
 8007824:	463b      	mov	r3, r7
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800782e:	441a      	add	r2, r3
 8007830:	463b      	mov	r3, r7
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007836:	463b      	mov	r3, r7
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6a1a      	ldr	r2, [r3, #32]
 800783c:	463b      	mov	r3, r7
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	429a      	cmp	r2, r3
 8007844:	d909      	bls.n	800785a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8007846:	463b      	mov	r3, r7
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6a1a      	ldr	r2, [r3, #32]
 800784c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007850:	1ad2      	subs	r2, r2, r3
 8007852:	463b      	mov	r3, r7
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	621a      	str	r2, [r3, #32]
 8007858:	e008      	b.n	800786c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800785a:	463b      	mov	r3, r7
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007864:	463b      	mov	r3, r7
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2200      	movs	r2, #0
 800786a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800786c:	463b      	mov	r3, r7
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	785b      	ldrb	r3, [r3, #1]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d164      	bne.n	8007940 <USB_EPStartXfer+0x384>
 8007876:	1d3b      	adds	r3, r7, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	1d3b      	adds	r3, r7, #4
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	463b      	mov	r3, r7
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	011a      	lsls	r2, r3, #4
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	4413      	add	r3, r2
 800789a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800789e:	61bb      	str	r3, [r7, #24]
 80078a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d112      	bne.n	80078ce <USB_EPStartXfer+0x312>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	801a      	strh	r2, [r3, #0]
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	881b      	ldrh	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	e057      	b.n	800797e <USB_EPStartXfer+0x3c2>
 80078ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078d2:	2b3e      	cmp	r3, #62	; 0x3e
 80078d4:	d817      	bhi.n	8007906 <USB_EPStartXfer+0x34a>
 80078d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078da:	085b      	lsrs	r3, r3, #1
 80078dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <USB_EPStartXfer+0x33a>
 80078ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078f0:	3301      	adds	r3, #1
 80078f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80078f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29a      	uxth	r2, r3
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	801a      	strh	r2, [r3, #0]
 8007904:	e03b      	b.n	800797e <USB_EPStartXfer+0x3c2>
 8007906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007914:	f003 031f 	and.w	r3, r3, #31
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USB_EPStartXfer+0x36a>
 800791c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007920:	3b01      	subs	r3, #1
 8007922:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800792a:	b29b      	uxth	r3, r3
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	b29b      	uxth	r3, r3
 8007930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007938:	b29a      	uxth	r2, r3
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	801a      	strh	r2, [r3, #0]
 800793e:	e01e      	b.n	800797e <USB_EPStartXfer+0x3c2>
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d119      	bne.n	800797e <USB_EPStartXfer+0x3c2>
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	627b      	str	r3, [r7, #36]	; 0x24
 8007950:	1d3b      	adds	r3, r7, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007958:	b29b      	uxth	r3, r3
 800795a:	461a      	mov	r2, r3
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	4413      	add	r3, r2
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	463b      	mov	r3, r7
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	011a      	lsls	r2, r3, #4
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	4413      	add	r3, r2
 800796e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007972:	623b      	str	r3, [r7, #32]
 8007974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007978:	b29a      	uxth	r2, r3
 800797a:	6a3b      	ldr	r3, [r7, #32]
 800797c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800797e:	463b      	mov	r3, r7
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	891b      	ldrh	r3, [r3, #8]
 8007984:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007988:	463b      	mov	r3, r7
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6959      	ldr	r1, [r3, #20]
 800798e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007992:	b29b      	uxth	r3, r3
 8007994:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007998:	1d38      	adds	r0, r7, #4
 800799a:	6800      	ldr	r0, [r0, #0]
 800799c:	f001 f86c 	bl	8008a78 <USB_WritePMA>
 80079a0:	e33b      	b.n	800801a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80079a2:	463b      	mov	r3, r7
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d164      	bne.n	8007a76 <USB_EPStartXfer+0x4ba>
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c0:	4413      	add	r3, r2
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c4:	463b      	mov	r3, r7
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	011a      	lsls	r2, r3, #4
 80079cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ce:	4413      	add	r3, r2
 80079d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d112      	bne.n	8007a04 <USB_EPStartXfer+0x448>
 80079de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ec:	801a      	strh	r2, [r3, #0]
 80079ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e057      	b.n	8007ab4 <USB_EPStartXfer+0x4f8>
 8007a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a08:	2b3e      	cmp	r3, #62	; 0x3e
 8007a0a:	d817      	bhi.n	8007a3c <USB_EPStartXfer+0x480>
 8007a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d004      	beq.n	8007a2c <USB_EPStartXfer+0x470>
 8007a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a26:	3301      	adds	r3, #1
 8007a28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	029b      	lsls	r3, r3, #10
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e03b      	b.n	8007ab4 <USB_EPStartXfer+0x4f8>
 8007a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <USB_EPStartXfer+0x4a0>
 8007a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e01e      	b.n	8007ab4 <USB_EPStartXfer+0x4f8>
 8007a76:	463b      	mov	r3, r7
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	785b      	ldrb	r3, [r3, #1]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d119      	bne.n	8007ab4 <USB_EPStartXfer+0x4f8>
 8007a80:	1d3b      	adds	r3, r7, #4
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	657b      	str	r3, [r7, #84]	; 0x54
 8007a86:	1d3b      	adds	r3, r7, #4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	4413      	add	r3, r2
 8007a96:	657b      	str	r3, [r7, #84]	; 0x54
 8007a98:	463b      	mov	r3, r7
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	011a      	lsls	r2, r3, #4
 8007aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8007aaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	891b      	ldrh	r3, [r3, #8]
 8007aba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007abe:	463b      	mov	r3, r7
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6959      	ldr	r1, [r3, #20]
 8007ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007ace:	1d38      	adds	r0, r7, #4
 8007ad0:	6800      	ldr	r0, [r0, #0]
 8007ad2:	f000 ffd1 	bl	8008a78 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695a      	ldr	r2, [r3, #20]
 8007adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ae0:	441a      	add	r2, r3
 8007ae2:	463b      	mov	r3, r7
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007ae8:	463b      	mov	r3, r7
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6a1a      	ldr	r2, [r3, #32]
 8007aee:	463b      	mov	r3, r7
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d909      	bls.n	8007b0c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8007af8:	463b      	mov	r3, r7
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a1a      	ldr	r2, [r3, #32]
 8007afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b02:	1ad2      	subs	r2, r2, r3
 8007b04:	463b      	mov	r3, r7
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	621a      	str	r2, [r3, #32]
 8007b0a:	e008      	b.n	8007b1e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8007b16:	463b      	mov	r3, r7
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b1e:	1d3b      	adds	r3, r7, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	647b      	str	r3, [r7, #68]	; 0x44
 8007b24:	463b      	mov	r3, r7
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d164      	bne.n	8007bf8 <USB_EPStartXfer+0x63c>
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b34:	1d3b      	adds	r3, r7, #4
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	4413      	add	r3, r2
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b46:	463b      	mov	r3, r7
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	011a      	lsls	r2, r3, #4
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b50:	4413      	add	r3, r2
 8007b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d112      	bne.n	8007b86 <USB_EPStartXfer+0x5ca>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e054      	b.n	8007c30 <USB_EPStartXfer+0x674>
 8007b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b8c:	d817      	bhi.n	8007bbe <USB_EPStartXfer+0x602>
 8007b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b92:	085b      	lsrs	r3, r3, #1
 8007b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d004      	beq.n	8007bae <USB_EPStartXfer+0x5f2>
 8007ba4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	029b      	lsls	r3, r3, #10
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e038      	b.n	8007c30 <USB_EPStartXfer+0x674>
 8007bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bcc:	f003 031f 	and.w	r3, r3, #31
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <USB_EPStartXfer+0x622>
 8007bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007bde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	801a      	strh	r2, [r3, #0]
 8007bf6:	e01b      	b.n	8007c30 <USB_EPStartXfer+0x674>
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d116      	bne.n	8007c30 <USB_EPStartXfer+0x674>
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c10:	4413      	add	r3, r2
 8007c12:	647b      	str	r3, [r7, #68]	; 0x44
 8007c14:	463b      	mov	r3, r7
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	011a      	lsls	r2, r3, #4
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1e:	4413      	add	r3, r2
 8007c20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c24:	643b      	str	r3, [r7, #64]	; 0x40
 8007c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c30:	463b      	mov	r3, r7
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	895b      	ldrh	r3, [r3, #10]
 8007c36:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c3a:	463b      	mov	r3, r7
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6959      	ldr	r1, [r3, #20]
 8007c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007c4a:	1d38      	adds	r0, r7, #4
 8007c4c:	6800      	ldr	r0, [r0, #0]
 8007c4e:	f000 ff13 	bl	8008a78 <USB_WritePMA>
 8007c52:	e1e2      	b.n	800801a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c54:	463b      	mov	r3, r7
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	463b      	mov	r3, r7
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007c7c:	1d3b      	adds	r3, r7, #4
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	463b      	mov	r3, r7
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ca2:	1d3b      	adds	r3, r7, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ca8:	1d3b      	adds	r3, r7, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cb6:	4413      	add	r3, r2
 8007cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cba:	463b      	mov	r3, r7
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	011a      	lsls	r2, r3, #4
 8007cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	891b      	ldrh	r3, [r3, #8]
 8007cdc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6959      	ldr	r1, [r3, #20]
 8007ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007cf0:	1d38      	adds	r0, r7, #4
 8007cf2:	6800      	ldr	r0, [r0, #0]
 8007cf4:	f000 fec0 	bl	8008a78 <USB_WritePMA>
 8007cf8:	e18f      	b.n	800801a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	463b      	mov	r3, r7
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 808f 	beq.w	8007e34 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d16:	1d3b      	adds	r3, r7, #4
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d164      	bne.n	8007df0 <USB_EPStartXfer+0x834>
 8007d26:	1d3b      	adds	r3, r7, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d2c:	1d3b      	adds	r3, r7, #4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	461a      	mov	r2, r3
 8007d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d3a:	4413      	add	r3, r2
 8007d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8007d3e:	463b      	mov	r3, r7
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	011a      	lsls	r2, r3, #4
 8007d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d48:	4413      	add	r3, r2
 8007d4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d112      	bne.n	8007d7e <USB_EPStartXfer+0x7c2>
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	e054      	b.n	8007e28 <USB_EPStartXfer+0x86c>
 8007d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d82:	2b3e      	cmp	r3, #62	; 0x3e
 8007d84:	d817      	bhi.n	8007db6 <USB_EPStartXfer+0x7fa>
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d8a:	085b      	lsrs	r3, r3, #1
 8007d8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <USB_EPStartXfer+0x7ea>
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	3301      	adds	r3, #1
 8007da2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	029b      	lsls	r3, r3, #10
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	801a      	strh	r2, [r3, #0]
 8007db4:	e038      	b.n	8007e28 <USB_EPStartXfer+0x86c>
 8007db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <USB_EPStartXfer+0x81a>
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	029b      	lsls	r3, r3, #10
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e01b      	b.n	8007e28 <USB_EPStartXfer+0x86c>
 8007df0:	463b      	mov	r3, r7
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	785b      	ldrb	r3, [r3, #1]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d116      	bne.n	8007e28 <USB_EPStartXfer+0x86c>
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e08:	4413      	add	r3, r2
 8007e0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	011a      	lsls	r2, r3, #4
 8007e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e16:	4413      	add	r3, r2
 8007e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e1c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007e28:	463b      	mov	r3, r7
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	895b      	ldrh	r3, [r3, #10]
 8007e2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8007e32:	e097      	b.n	8007f64 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e34:	463b      	mov	r3, r7
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d168      	bne.n	8007f10 <USB_EPStartXfer+0x954>
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e46:	1d3b      	adds	r3, r7, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e56:	4413      	add	r3, r2
 8007e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	011a      	lsls	r2, r3, #4
 8007e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e68:	4413      	add	r3, r2
 8007e6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d112      	bne.n	8007e9e <USB_EPStartXfer+0x8e2>
 8007e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e86:	801a      	strh	r2, [r3, #0]
 8007e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e05d      	b.n	8007f5a <USB_EPStartXfer+0x99e>
 8007e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ea4:	d817      	bhi.n	8007ed6 <USB_EPStartXfer+0x91a>
 8007ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eaa:	085b      	lsrs	r3, r3, #1
 8007eac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <USB_EPStartXfer+0x90a>
 8007ebc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ec6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	029b      	lsls	r3, r3, #10
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	e041      	b.n	8007f5a <USB_EPStartXfer+0x99e>
 8007ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d104      	bne.n	8007ef6 <USB_EPStartXfer+0x93a>
 8007eec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ef6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	029b      	lsls	r3, r3, #10
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f0c:	801a      	strh	r2, [r3, #0]
 8007f0e:	e024      	b.n	8007f5a <USB_EPStartXfer+0x99e>
 8007f10:	463b      	mov	r3, r7
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	785b      	ldrb	r3, [r3, #1]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d11f      	bne.n	8007f5a <USB_EPStartXfer+0x99e>
 8007f1a:	1d3b      	adds	r3, r7, #4
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f32:	4413      	add	r3, r2
 8007f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f38:	463b      	mov	r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	011a      	lsls	r2, r3, #4
 8007f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f5a:	463b      	mov	r3, r7
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	891b      	ldrh	r3, [r3, #8]
 8007f60:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f64:	463b      	mov	r3, r7
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6959      	ldr	r1, [r3, #20]
 8007f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8007f74:	1d38      	adds	r0, r7, #4
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	f000 fd7e 	bl	8008a78 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d122      	bne.n	8007fcc <USB_EPStartXfer+0xa10>
 8007f86:	1d3b      	adds	r3, r7, #4
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8007fa4:	1d3b      	adds	r3, r7, #4
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	463b      	mov	r3, r7
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	441a      	add	r2, r3
 8007fb2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8007fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	8013      	strh	r3, [r2, #0]
 8007fca:	e026      	b.n	800801a <USB_EPStartXfer+0xa5e>
 8007fcc:	463b      	mov	r3, r7
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d121      	bne.n	800801a <USB_EPStartXfer+0xa5e>
 8007fd6:	1d3b      	adds	r3, r7, #4
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	463b      	mov	r3, r7
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	441a      	add	r2, r3
 8008002:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8008006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800800e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	b29b      	uxth	r3, r3
 8008018:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	463b      	mov	r3, r7
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f107 020e 	add.w	r2, r7, #14
 8008030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	8013      	strh	r3, [r2, #0]
 800803a:	f107 030e 	add.w	r3, r7, #14
 800803e:	f107 020e 	add.w	r2, r7, #14
 8008042:	8812      	ldrh	r2, [r2, #0]
 8008044:	f082 0210 	eor.w	r2, r2, #16
 8008048:	801a      	strh	r2, [r3, #0]
 800804a:	f107 030e 	add.w	r3, r7, #14
 800804e:	f107 020e 	add.w	r2, r7, #14
 8008052:	8812      	ldrh	r2, [r2, #0]
 8008054:	f082 0220 	eor.w	r2, r2, #32
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	463b      	mov	r3, r7
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	441a      	add	r2, r3
 8008068:	f107 030e 	add.w	r3, r7, #14
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807e:	b29b      	uxth	r3, r3
 8008080:	8013      	strh	r3, [r2, #0]
 8008082:	e3b5      	b.n	80087f0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008084:	463b      	mov	r3, r7
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	7b1b      	ldrb	r3, [r3, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 8090 	bne.w	80081b0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008090:	463b      	mov	r3, r7
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	463b      	mov	r3, r7
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	429a      	cmp	r2, r3
 800809e:	d90e      	bls.n	80080be <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80080a0:	463b      	mov	r3, r7
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80080aa:	463b      	mov	r3, r7
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699a      	ldr	r2, [r3, #24]
 80080b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	463b      	mov	r3, r7
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	619a      	str	r2, [r3, #24]
 80080bc:	e008      	b.n	80080d0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80080be:	463b      	mov	r3, r7
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80080c8:	463b      	mov	r3, r7
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2200      	movs	r2, #0
 80080ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80080d0:	1d3b      	adds	r3, r7, #4
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080d8:	1d3b      	adds	r3, r7, #4
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080e8:	4413      	add	r3, r2
 80080ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080ee:	463b      	mov	r3, r7
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	011a      	lsls	r2, r3, #4
 80080f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80080fa:	4413      	add	r3, r2
 80080fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d116      	bne.n	800813a <USB_EPStartXfer+0xb7e>
 800810c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008118:	b29a      	uxth	r2, r3
 800811a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800811e:	801a      	strh	r2, [r3, #0]
 8008120:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e32c      	b.n	8008794 <USB_EPStartXfer+0x11d8>
 800813a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813e:	2b3e      	cmp	r3, #62	; 0x3e
 8008140:	d818      	bhi.n	8008174 <USB_EPStartXfer+0xbb8>
 8008142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800814c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d004      	beq.n	8008162 <USB_EPStartXfer+0xba6>
 8008158:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800815c:	3301      	adds	r3, #1
 800815e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008162:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008166:	b29b      	uxth	r3, r3
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	b29a      	uxth	r2, r3
 800816c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008170:	801a      	strh	r2, [r3, #0]
 8008172:	e30f      	b.n	8008794 <USB_EPStartXfer+0x11d8>
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <USB_EPStartXfer+0xbd8>
 800818a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800818e:	3b01      	subs	r3, #1
 8008190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008194:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008198:	b29b      	uxth	r3, r3
 800819a:	029b      	lsls	r3, r3, #10
 800819c:	b29b      	uxth	r3, r3
 800819e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	e2f1      	b.n	8008794 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80081b0:	463b      	mov	r3, r7
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	78db      	ldrb	r3, [r3, #3]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	f040 818f 	bne.w	80084da <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80081bc:	463b      	mov	r3, r7
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d175      	bne.n	80082b2 <USB_EPStartXfer+0xcf6>
 80081c6:	1d3b      	adds	r3, r7, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081ce:	1d3b      	adds	r3, r7, #4
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081de:	4413      	add	r3, r2
 80081e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081e4:	463b      	mov	r3, r7
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	011a      	lsls	r2, r3, #4
 80081ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081f0:	4413      	add	r3, r2
 80081f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80081fa:	463b      	mov	r3, r7
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d116      	bne.n	8008232 <USB_EPStartXfer+0xc76>
 8008204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008208:	881b      	ldrh	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008210:	b29a      	uxth	r2, r3
 8008212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008228:	b29a      	uxth	r2, r3
 800822a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800822e:	801a      	strh	r2, [r3, #0]
 8008230:	e065      	b.n	80082fe <USB_EPStartXfer+0xd42>
 8008232:	463b      	mov	r3, r7
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b3e      	cmp	r3, #62	; 0x3e
 800823a:	d81a      	bhi.n	8008272 <USB_EPStartXfer+0xcb6>
 800823c:	463b      	mov	r3, r7
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008248:	463b      	mov	r3, r7
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <USB_EPStartXfer+0xca4>
 8008256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800825a:	3301      	adds	r3, #1
 800825c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008260:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008264:	b29b      	uxth	r3, r3
 8008266:	029b      	lsls	r3, r3, #10
 8008268:	b29a      	uxth	r2, r3
 800826a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e045      	b.n	80082fe <USB_EPStartXfer+0xd42>
 8008272:	463b      	mov	r3, r7
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	095b      	lsrs	r3, r3, #5
 800827a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800827e:	463b      	mov	r3, r7
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2b00      	cmp	r3, #0
 800828a:	d104      	bne.n	8008296 <USB_EPStartXfer+0xcda>
 800828c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008290:	3b01      	subs	r3, #1
 8008292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29b      	uxth	r3, r3
 80082a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e025      	b.n	80082fe <USB_EPStartXfer+0xd42>
 80082b2:	463b      	mov	r3, r7
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d120      	bne.n	80082fe <USB_EPStartXfer+0xd42>
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c4:	1d3b      	adds	r3, r7, #4
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082d4:	4413      	add	r3, r2
 80082d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082da:	463b      	mov	r3, r7
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	011a      	lsls	r2, r3, #4
 80082e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082e6:	4413      	add	r3, r2
 80082e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082f0:	463b      	mov	r3, r7
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	1d3b      	adds	r3, r7, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008306:	463b      	mov	r3, r7
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d175      	bne.n	80083fc <USB_EPStartXfer+0xe40>
 8008310:	1d3b      	adds	r3, r7, #4
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008328:	4413      	add	r3, r2
 800832a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800832e:	463b      	mov	r3, r7
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	011a      	lsls	r2, r3, #4
 8008336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800833a:	4413      	add	r3, r2
 800833c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008340:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008344:	463b      	mov	r3, r7
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d116      	bne.n	800837c <USB_EPStartXfer+0xdc0>
 800834e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008352:	881b      	ldrh	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800836e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	e061      	b.n	8008440 <USB_EPStartXfer+0xe84>
 800837c:	463b      	mov	r3, r7
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b3e      	cmp	r3, #62	; 0x3e
 8008384:	d81a      	bhi.n	80083bc <USB_EPStartXfer+0xe00>
 8008386:	463b      	mov	r3, r7
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008392:	463b      	mov	r3, r7
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d004      	beq.n	80083aa <USB_EPStartXfer+0xdee>
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	3301      	adds	r3, #1
 80083a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	029b      	lsls	r3, r3, #10
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e041      	b.n	8008440 <USB_EPStartXfer+0xe84>
 80083bc:	463b      	mov	r3, r7
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	095b      	lsrs	r3, r3, #5
 80083c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083c8:	463b      	mov	r3, r7
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <USB_EPStartXfer+0xe24>
 80083d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083da:	3b01      	subs	r3, #1
 80083dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083f8:	801a      	strh	r2, [r3, #0]
 80083fa:	e021      	b.n	8008440 <USB_EPStartXfer+0xe84>
 80083fc:	463b      	mov	r3, r7
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d11c      	bne.n	8008440 <USB_EPStartXfer+0xe84>
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840e:	b29b      	uxth	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008416:	4413      	add	r3, r2
 8008418:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800841c:	463b      	mov	r3, r7
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	011a      	lsls	r2, r3, #4
 8008424:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008428:	4413      	add	r3, r2
 800842a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800842e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008432:	463b      	mov	r3, r7
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	b29a      	uxth	r2, r3
 800843a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800843e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008440:	463b      	mov	r3, r7
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 81a4 	beq.w	8008794 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	463b      	mov	r3, r7
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008460:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <USB_EPStartXfer+0xebc>
 800846c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10d      	bne.n	8008494 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008478:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800847c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008480:	2b00      	cmp	r3, #0
 8008482:	f040 8187 	bne.w	8008794 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008486:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 8180 	bne.w	8008794 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008494:	1d3b      	adds	r3, r7, #4
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	463b      	mov	r3, r7
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	881b      	ldrh	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ae:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80084b2:	1d3b      	adds	r3, r7, #4
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	463b      	mov	r3, r7
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	441a      	add	r2, r3
 80084c0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
 80084d8:	e15c      	b.n	8008794 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084da:	463b      	mov	r3, r7
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	78db      	ldrb	r3, [r3, #3]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	f040 8155 	bne.w	8008790 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084e6:	463b      	mov	r3, r7
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	699a      	ldr	r2, [r3, #24]
 80084ec:	463b      	mov	r3, r7
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d90e      	bls.n	8008514 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80084f6:	463b      	mov	r3, r7
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8008500:	463b      	mov	r3, r7
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800850a:	1ad2      	subs	r2, r2, r3
 800850c:	463b      	mov	r3, r7
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	619a      	str	r2, [r3, #24]
 8008512:	e008      	b.n	8008526 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8008514:	463b      	mov	r3, r7
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800851e:	463b      	mov	r3, r7
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2200      	movs	r2, #0
 8008524:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008526:	463b      	mov	r3, r7
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d16f      	bne.n	8008610 <USB_EPStartXfer+0x1054>
 8008530:	1d3b      	adds	r3, r7, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008538:	1d3b      	adds	r3, r7, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008540:	b29b      	uxth	r3, r3
 8008542:	461a      	mov	r2, r3
 8008544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008548:	4413      	add	r3, r2
 800854a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800854e:	463b      	mov	r3, r7
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	011a      	lsls	r2, r3, #4
 8008556:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800855a:	4413      	add	r3, r2
 800855c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008560:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d116      	bne.n	800859a <USB_EPStartXfer+0xfde>
 800856c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008578:	b29a      	uxth	r2, r3
 800857a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008596:	801a      	strh	r2, [r3, #0]
 8008598:	e05f      	b.n	800865a <USB_EPStartXfer+0x109e>
 800859a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800859e:	2b3e      	cmp	r3, #62	; 0x3e
 80085a0:	d818      	bhi.n	80085d4 <USB_EPStartXfer+0x1018>
 80085a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085a6:	085b      	lsrs	r3, r3, #1
 80085a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <USB_EPStartXfer+0x1006>
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085bc:	3301      	adds	r3, #1
 80085be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e042      	b.n	800865a <USB_EPStartXfer+0x109e>
 80085d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80085e2:	f003 031f 	and.w	r3, r3, #31
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d104      	bne.n	80085f4 <USB_EPStartXfer+0x1038>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ee:	3b01      	subs	r3, #1
 80085f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	029b      	lsls	r3, r3, #10
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008606:	b29a      	uxth	r2, r3
 8008608:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	e024      	b.n	800865a <USB_EPStartXfer+0x109e>
 8008610:	463b      	mov	r3, r7
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d11f      	bne.n	800865a <USB_EPStartXfer+0x109e>
 800861a:	1d3b      	adds	r3, r7, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800862a:	b29b      	uxth	r3, r3
 800862c:	461a      	mov	r2, r3
 800862e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008632:	4413      	add	r3, r2
 8008634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008638:	463b      	mov	r3, r7
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	011a      	lsls	r2, r3, #4
 8008640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008644:	4413      	add	r3, r2
 8008646:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800864a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800864e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008652:	b29a      	uxth	r2, r3
 8008654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008658:	801a      	strh	r2, [r3, #0]
 800865a:	1d3b      	adds	r3, r7, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008662:	463b      	mov	r3, r7
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d16f      	bne.n	800874c <USB_EPStartXfer+0x1190>
 800866c:	1d3b      	adds	r3, r7, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008674:	1d3b      	adds	r3, r7, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867c:	b29b      	uxth	r3, r3
 800867e:	461a      	mov	r2, r3
 8008680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008684:	4413      	add	r3, r2
 8008686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800868a:	463b      	mov	r3, r7
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	011a      	lsls	r2, r3, #4
 8008692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008696:	4413      	add	r3, r2
 8008698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800869c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80086a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d116      	bne.n	80086d6 <USB_EPStartXfer+0x111a>
 80086a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e05e      	b.n	8008794 <USB_EPStartXfer+0x11d8>
 80086d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086da:	2b3e      	cmp	r3, #62	; 0x3e
 80086dc:	d818      	bhi.n	8008710 <USB_EPStartXfer+0x1154>
 80086de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086e2:	085b      	lsrs	r3, r3, #1
 80086e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d004      	beq.n	80086fe <USB_EPStartXfer+0x1142>
 80086f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f8:	3301      	adds	r3, #1
 80086fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80086fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008702:	b29b      	uxth	r3, r3
 8008704:	029b      	lsls	r3, r3, #10
 8008706:	b29a      	uxth	r2, r3
 8008708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	e041      	b.n	8008794 <USB_EPStartXfer+0x11d8>
 8008710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800871a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800871e:	f003 031f 	and.w	r3, r3, #31
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <USB_EPStartXfer+0x1174>
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872a:	3b01      	subs	r3, #1
 800872c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008734:	b29b      	uxth	r3, r3
 8008736:	029b      	lsls	r3, r3, #10
 8008738:	b29b      	uxth	r3, r3
 800873a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008742:	b29a      	uxth	r2, r3
 8008744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008748:	801a      	strh	r2, [r3, #0]
 800874a:	e023      	b.n	8008794 <USB_EPStartXfer+0x11d8>
 800874c:	463b      	mov	r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	785b      	ldrb	r3, [r3, #1]
 8008752:	2b01      	cmp	r3, #1
 8008754:	d11e      	bne.n	8008794 <USB_EPStartXfer+0x11d8>
 8008756:	1d3b      	adds	r3, r7, #4
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800875e:	b29b      	uxth	r3, r3
 8008760:	461a      	mov	r2, r3
 8008762:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008766:	4413      	add	r3, r2
 8008768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800876c:	463b      	mov	r3, r7
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	011a      	lsls	r2, r3, #4
 8008774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008778:	4413      	add	r3, r2
 800877a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800877e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008782:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008786:	b29a      	uxth	r2, r3
 8008788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	e001      	b.n	8008794 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e02e      	b.n	80087f2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008794:	1d3b      	adds	r3, r7, #4
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	463b      	mov	r3, r7
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80087b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80087b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80087be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80087c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80087ca:	1d3b      	adds	r3, r7, #4
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	463b      	mov	r3, r7
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	441a      	add	r2, r3
 80087d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80087dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d020      	beq.n	8008850 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008824:	81bb      	strh	r3, [r7, #12]
 8008826:	89bb      	ldrh	r3, [r7, #12]
 8008828:	f083 0310 	eor.w	r3, r3, #16
 800882c:	81bb      	strh	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	89bb      	ldrh	r3, [r7, #12]
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]
 800884e:	e01f      	b.n	8008890 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	81fb      	strh	r3, [r7, #14]
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800886e:	81fb      	strh	r3, [r7, #14]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	441a      	add	r2, r3
 800887a:	89fb      	ldrh	r3, [r7, #14]
 800887c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	b29b      	uxth	r3, r3
 800888e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	bc80      	pop	{r7}
 800889a:	4770      	bx	lr

0800889c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800889c:	b480      	push	{r7}
 800889e:	b087      	sub	sp, #28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	7b1b      	ldrb	r3, [r3, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 809d 	bne.w	80089ea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d04c      	beq.n	8008952 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	823b      	strh	r3, [r7, #16]
 80088c6:	8a3b      	ldrh	r3, [r7, #16]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01b      	beq.n	8008908 <USB_EPClearStall+0x6c>
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e6:	81fb      	strh	r3, [r7, #14]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	441a      	add	r2, r3
 80088f2:	89fb      	ldrh	r3, [r7, #14]
 80088f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008904:	b29b      	uxth	r3, r3
 8008906:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	78db      	ldrb	r3, [r3, #3]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d06c      	beq.n	80089ea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	b29b      	uxth	r3, r3
 800891e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008926:	81bb      	strh	r3, [r7, #12]
 8008928:	89bb      	ldrh	r3, [r7, #12]
 800892a:	f083 0320 	eor.w	r3, r3, #32
 800892e:	81bb      	strh	r3, [r7, #12]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	441a      	add	r2, r3
 800893a:	89bb      	ldrh	r3, [r7, #12]
 800893c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894c:	b29b      	uxth	r3, r3
 800894e:	8013      	strh	r3, [r2, #0]
 8008950:	e04b      	b.n	80089ea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	82fb      	strh	r3, [r7, #22]
 8008960:	8afb      	ldrh	r3, [r7, #22]
 8008962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01b      	beq.n	80089a2 <USB_EPClearStall+0x106>
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800897c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008980:	82bb      	strh	r3, [r7, #20]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	8abb      	ldrh	r3, [r7, #20]
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800899a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b8:	827b      	strh	r3, [r7, #18]
 80089ba:	8a7b      	ldrh	r3, [r7, #18]
 80089bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80089c0:	827b      	strh	r3, [r7, #18]
 80089c2:	8a7b      	ldrh	r3, [r7, #18]
 80089c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80089c8:	827b      	strh	r3, [r7, #18]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	441a      	add	r2, r3
 80089d4:	8a7b      	ldrh	r3, [r7, #18]
 80089d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bc80      	pop	{r7}
 80089f4:	4770      	bx	lr

080089f6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2280      	movs	r2, #128	; 0x80
 8008a0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr

08008a1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bc80      	pop	{r7}
 8008a2e:	4770      	bx	lr

08008a30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bc80      	pop	{r7}
 8008a42:	4770      	bx	lr

08008a44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bc80      	pop	{r7}
 8008a76:	4770      	bx	lr

08008a78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b08d      	sub	sp, #52	; 0x34
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4611      	mov	r1, r2
 8008a84:	461a      	mov	r2, r3
 8008a86:	460b      	mov	r3, r1
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008a8e:	88bb      	ldrh	r3, [r7, #4]
 8008a90:	3301      	adds	r3, #1
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	005a      	lsls	r2, r3, #1
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ab0:	e01e      	b.n	8008af0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	3301      	adds	r3, #1
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	461a      	mov	r2, r3
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	3302      	adds	r3, #2
 8008adc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	3302      	adds	r3, #2
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	3b01      	subs	r3, #1
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1dd      	bne.n	8008ab2 <USB_WritePMA+0x3a>
  }
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	3734      	adds	r7, #52	; 0x34
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bc80      	pop	{r7}
 8008b00:	4770      	bx	lr

08008b02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b08b      	sub	sp, #44	; 0x2c
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	461a      	mov	r2, r3
 8008b10:	460b      	mov	r3, r1
 8008b12:	80fb      	strh	r3, [r7, #6]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b18:	88bb      	ldrh	r3, [r7, #4]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	005a      	lsls	r2, r3, #1
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3a:	e01b      	b.n	8008b74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	3302      	adds	r3, #2
 8008b48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3301      	adds	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	3301      	adds	r3, #1
 8008b66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b68:	6a3b      	ldr	r3, [r7, #32]
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	3b01      	subs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e0      	bne.n	8008b3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008b7a:	88bb      	ldrh	r3, [r7, #4]
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	701a      	strb	r2, [r3, #0]
  }
}
 8008b96:	bf00      	nop
 8008b98:	372c      	adds	r7, #44	; 0x2c
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr

08008ba0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	7c1b      	ldrb	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d115      	bne.n	8008be4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	2181      	movs	r1, #129	; 0x81
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 feba 	bl	800a93a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 feb0 	bl	800a93a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008be2:	e012      	b.n	8008c0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	2202      	movs	r2, #2
 8008be8:	2181      	movs	r1, #129	; 0x81
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fea5 	bl	800a93a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 fe9c 	bl	800a93a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c0a:	2308      	movs	r3, #8
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	2182      	movs	r1, #130	; 0x82
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fe92 	bl	800a93a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c20:	f001 ffb2 	bl	800ab88 <USBD_static_malloc>
 8008c24:	4602      	mov	r2, r0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008c36:	2301      	movs	r3, #1
 8008c38:	73fb      	strb	r3, [r7, #15]
 8008c3a:	e026      	b.n	8008c8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	7c1b      	ldrb	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c70:	2101      	movs	r1, #1
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 ff52 	bl	800ab1c <USBD_LL_PrepareReceive>
 8008c78:	e007      	b.n	8008c8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	2101      	movs	r1, #1
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f001 ff49 	bl	800ab1c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ca4:	2181      	movs	r1, #129	; 0x81
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f001 fe6d 	bl	800a986 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fe66 	bl	800a986 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008cc2:	2182      	movs	r1, #130	; 0x82
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 fe5e 	bl	800a986 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00e      	beq.n	8008cf8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f001 ff58 	bl	800aba0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d039      	beq.n	8008da0 <USBD_CDC_Setup+0x9e>
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d17f      	bne.n	8008e30 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	88db      	ldrh	r3, [r3, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d029      	beq.n	8008d8c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da11      	bge.n	8008d66 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008d4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	88d2      	ldrh	r2, [r2, #6]
 8008d54:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d56:	6939      	ldr	r1, [r7, #16]
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	88db      	ldrh	r3, [r3, #6]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fa09 	bl	800a176 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008d64:	e06b      	b.n	8008e3e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	785a      	ldrb	r2, [r3, #1]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	88db      	ldrh	r3, [r3, #6]
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008d7c:	6939      	ldr	r1, [r7, #16]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	88db      	ldrh	r3, [r3, #6]
 8008d82:	461a      	mov	r2, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 fa24 	bl	800a1d2 <USBD_CtlPrepareRx>
      break;
 8008d8a:	e058      	b.n	8008e3e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	7850      	ldrb	r0, [r2, #1]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	4798      	blx	r3
      break;
 8008d9e:	e04e      	b.n	8008e3e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b0b      	cmp	r3, #11
 8008da6:	d02e      	beq.n	8008e06 <USBD_CDC_Setup+0x104>
 8008da8:	2b0b      	cmp	r3, #11
 8008daa:	dc38      	bgt.n	8008e1e <USBD_CDC_Setup+0x11c>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <USBD_CDC_Setup+0xb4>
 8008db0:	2b0a      	cmp	r3, #10
 8008db2:	d014      	beq.n	8008dde <USBD_CDC_Setup+0xdc>
 8008db4:	e033      	b.n	8008e1e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d107      	bne.n	8008dd0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008dc0:	f107 030c 	add.w	r3, r7, #12
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f9d4 	bl	800a176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008dce:	e02e      	b.n	8008e2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008dd0:	6839      	ldr	r1, [r7, #0]
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 f965 	bl	800a0a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	75fb      	strb	r3, [r7, #23]
          break;
 8008ddc:	e027      	b.n	8008e2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d107      	bne.n	8008df8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008de8:	f107 030f 	add.w	r3, r7, #15
 8008dec:	2201      	movs	r2, #1
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 f9c0 	bl	800a176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008df6:	e01a      	b.n	8008e2e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f001 f951 	bl	800a0a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e00:	2302      	movs	r3, #2
 8008e02:	75fb      	strb	r3, [r7, #23]
          break;
 8008e04:	e013      	b.n	8008e2e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e0c:	2b03      	cmp	r3, #3
 8008e0e:	d00d      	beq.n	8008e2c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 f945 	bl	800a0a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e1c:	e006      	b.n	8008e2c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f93e 	bl	800a0a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008e26:	2302      	movs	r3, #2
 8008e28:	75fb      	strb	r3, [r7, #23]
          break;
 8008e2a:	e000      	b.n	8008e2e <USBD_CDC_Setup+0x12c>
          break;
 8008e2c:	bf00      	nop
      }
      break;
 8008e2e:	e006      	b.n	8008e3e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f935 	bl	800a0a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3c:	bf00      	nop
  }

  return ret;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e62:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d03a      	beq.n	8008ee4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	331c      	adds	r3, #28
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d029      	beq.n	8008ed8 <USBD_CDC_DataIn+0x90>
 8008e84:	78fa      	ldrb	r2, [r7, #3]
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	440b      	add	r3, r1
 8008e92:	331c      	adds	r3, #28
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	78f9      	ldrb	r1, [r7, #3]
 8008e98:	68b8      	ldr	r0, [r7, #8]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	440b      	add	r3, r1
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4403      	add	r3, r0
 8008ea4:	3338      	adds	r3, #56	; 0x38
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008eac:	fb03 f301 	mul.w	r3, r3, r1
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d110      	bne.n	8008ed8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	331c      	adds	r3, #28
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008eca:	78f9      	ldrb	r1, [r7, #3]
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fe00 	bl	800aad6 <USBD_LL_Transmit>
 8008ed6:	e003      	b.n	8008ee0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e000      	b.n	8008ee6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008ee4:	2302      	movs	r3, #2
  }
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f001 fe2b 	bl	800ab62 <USBD_LL_GetRxDataSize>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00d      	beq.n	8008f3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008f32:	4611      	mov	r1, r2
 8008f34:	4798      	blx	r3

    return USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	e000      	b.n	8008f3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008f3a:	2302      	movs	r3, #2
  }
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f52:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d015      	beq.n	8008f8a <USBD_CDC_EP0_RxReady+0x46>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008f64:	2bff      	cmp	r3, #255	; 0xff
 8008f66:	d010      	beq.n	8008f8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008f76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008f7e:	b292      	uxth	r2, r2
 8008f80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2243      	movs	r2, #67	; 0x43
 8008fa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008fa2:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	200000d8 	.word	0x200000d8

08008fb4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2243      	movs	r2, #67	; 0x43
 8008fc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008fc2:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bc80      	pop	{r7}
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000094 	.word	0x20000094

08008fd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2243      	movs	r2, #67	; 0x43
 8008fe0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008fe2:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	2000011c 	.word	0x2000011c

08008ff4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	220a      	movs	r2, #10
 8009000:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009002:	4b03      	ldr	r3, [pc, #12]	; (8009010 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000050 	.word	0x20000050

08009014 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800901e:	2302      	movs	r3, #2
 8009020:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	bc80      	pop	{r7}
 800903e:	4770      	bx	lr

08009040 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009040:	b480      	push	{r7}
 8009042:	b087      	sub	sp, #28
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009054:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr

08009072 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009072:	b480      	push	{r7}
 8009074:	b085      	sub	sp, #20
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009082:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr

08009098 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01c      	beq.n	80090ec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d115      	bne.n	80090e8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2201      	movs	r2, #1
 80090c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2181      	movs	r1, #129	; 0x81
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f001 fcf9 	bl	800aad6 <USBD_LL_Transmit>

      return USBD_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e002      	b.n	80090ee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e000      	b.n	80090ee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80090ec:	2302      	movs	r3, #2
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009104:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d017      	beq.n	8009140 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7c1b      	ldrb	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d109      	bne.n	800912c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800911e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009122:	2101      	movs	r1, #1
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f001 fcf9 	bl	800ab1c <USBD_LL_PrepareReceive>
 800912a:	e007      	b.n	800913c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	2101      	movs	r1, #1
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fcf0 	bl	800ab1c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	e000      	b.n	8009142 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009140:	2302      	movs	r3, #2
  }
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	60b9      	str	r1, [r7, #8]
 8009154:	4613      	mov	r3, r2
 8009156:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800915e:	2302      	movs	r3, #2
 8009160:	e01a      	b.n	8009198 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f001 fb5d 	bl	800a850 <USBD_LL_Init>

  return USBD_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d006      	beq.n	80091c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e001      	b.n	80091c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80091c2:	2302      	movs	r3, #2
 80091c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr

080091d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fb92 	bl	800a904 <USBD_LL_Start>

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bc80      	pop	{r7}
 80091fc:	4770      	bx	lr

080091fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800920a:	2302      	movs	r3, #2
 800920c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00c      	beq.n	8009232 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009232:	7bfb      	ldrb	r3, [r7, #15]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	78fa      	ldrb	r2, [r7, #3]
 8009252:	4611      	mov	r1, r2
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	4798      	blx	r3

  return USBD_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009272:	6839      	ldr	r1, [r7, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fed8 	bl	800a02a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009296:	f003 031f 	and.w	r3, r3, #31
 800929a:	2b02      	cmp	r3, #2
 800929c:	d016      	beq.n	80092cc <USBD_LL_SetupStage+0x6a>
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d81c      	bhi.n	80092dc <USBD_LL_SetupStage+0x7a>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <USBD_LL_SetupStage+0x4a>
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d008      	beq.n	80092bc <USBD_LL_SetupStage+0x5a>
 80092aa:	e017      	b.n	80092dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f9cb 	bl	8009650 <USBD_StdDevReq>
      break;
 80092ba:	e01a      	b.n	80092f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa2d 	bl	8009724 <USBD_StdItfReq>
      break;
 80092ca:	e012      	b.n	80092f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fa6d 	bl	80097b4 <USBD_StdEPReq>
      break;
 80092da:	e00a      	b.n	80092f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 fb6a 	bl	800a9c4 <USBD_LL_StallEP>
      break;
 80092f0:	bf00      	nop
  }

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	460b      	mov	r3, r1
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800930a:	7afb      	ldrb	r3, [r7, #11]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d14b      	bne.n	80093a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009316:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800931e:	2b03      	cmp	r3, #3
 8009320:	d134      	bne.n	800938c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	429a      	cmp	r2, r3
 800932c:	d919      	bls.n	8009362 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	68da      	ldr	r2, [r3, #12]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009344:	429a      	cmp	r2, r3
 8009346:	d203      	bcs.n	8009350 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800934c:	b29b      	uxth	r3, r3
 800934e:	e002      	b.n	8009356 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009354:	b29b      	uxth	r3, r3
 8009356:	461a      	mov	r2, r3
 8009358:	6879      	ldr	r1, [r7, #4]
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 ff57 	bl	800a20e <USBD_CtlContinueRx>
 8009360:	e038      	b.n	80093d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00a      	beq.n	8009384 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009374:	2b03      	cmp	r3, #3
 8009376:	d105      	bne.n	8009384 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 ff54 	bl	800a232 <USBD_CtlSendStatus>
 800938a:	e023      	b.n	80093d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009392:	2b05      	cmp	r3, #5
 8009394:	d11e      	bne.n	80093d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800939e:	2100      	movs	r1, #0
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f001 fb0f 	bl	800a9c4 <USBD_LL_StallEP>
 80093a6:	e015      	b.n	80093d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00d      	beq.n	80093d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	d108      	bne.n	80093d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	7afa      	ldrb	r2, [r7, #11]
 80093c8:	4611      	mov	r1, r2
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	4798      	blx	r3
 80093ce:	e001      	b.n	80093d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093d0:	2302      	movs	r3, #2
 80093d2:	e000      	b.n	80093d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b086      	sub	sp, #24
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	460b      	mov	r3, r1
 80093e8:	607a      	str	r2, [r7, #4]
 80093ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d17f      	bne.n	80094f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3314      	adds	r3, #20
 80093f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d15c      	bne.n	80094bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	429a      	cmp	r2, r3
 800940c:	d915      	bls.n	800943a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	b29b      	uxth	r3, r3
 8009422:	461a      	mov	r2, r3
 8009424:	6879      	ldr	r1, [r7, #4]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fec1 	bl	800a1ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800942c:	2300      	movs	r3, #0
 800942e:	2200      	movs	r2, #0
 8009430:	2100      	movs	r1, #0
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f001 fb72 	bl	800ab1c <USBD_LL_PrepareReceive>
 8009438:	e04e      	b.n	80094d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	6912      	ldr	r2, [r2, #16]
 8009442:	fbb3 f1f2 	udiv	r1, r3, r2
 8009446:	fb02 f201 	mul.w	r2, r2, r1
 800944a:	1a9b      	subs	r3, r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d11c      	bne.n	800948a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009458:	429a      	cmp	r2, r3
 800945a:	d316      	bcc.n	800948a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	689a      	ldr	r2, [r3, #8]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009466:	429a      	cmp	r2, r3
 8009468:	d20f      	bcs.n	800948a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800946a:	2200      	movs	r2, #0
 800946c:	2100      	movs	r1, #0
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 fe9d 	bl	800a1ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800947c:	2300      	movs	r3, #0
 800947e:	2200      	movs	r2, #0
 8009480:	2100      	movs	r1, #0
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f001 fb4a 	bl	800ab1c <USBD_LL_PrepareReceive>
 8009488:	e026      	b.n	80094d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800949c:	2b03      	cmp	r3, #3
 800949e:	d105      	bne.n	80094ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80094ac:	2180      	movs	r1, #128	; 0x80
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f001 fa88 	bl	800a9c4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 fecf 	bl	800a258 <USBD_CtlReceiveStatus>
 80094ba:	e00d      	b.n	80094d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d004      	beq.n	80094d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d103      	bne.n	80094d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80094d0:	2180      	movs	r1, #128	; 0x80
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f001 fa76 	bl	800a9c4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d11d      	bne.n	800951e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff fe81 	bl	80091ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094f0:	e015      	b.n	800951e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009504:	2b03      	cmp	r3, #3
 8009506:	d108      	bne.n	800951a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	7afa      	ldrb	r2, [r7, #11]
 8009512:	4611      	mov	r1, r2
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	4798      	blx	r3
 8009518:	e001      	b.n	800951e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	e000      	b.n	8009520 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009530:	2340      	movs	r3, #64	; 0x40
 8009532:	2200      	movs	r2, #0
 8009534:	2100      	movs	r1, #0
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f9ff 	bl	800a93a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2240      	movs	r2, #64	; 0x40
 8009548:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	2200      	movs	r2, #0
 8009550:	2180      	movs	r1, #128	; 0x80
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f001 f9f1 	bl	800a93a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2240      	movs	r2, #64	; 0x40
 8009562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6852      	ldr	r2, [r2, #4]
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	4611      	mov	r1, r2
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	4798      	blx	r3
  }

  return USBD_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	78fa      	ldrb	r2, [r7, #3]
 80095ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2204      	movs	r2, #4
 80095e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr

080095f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fe:	2b04      	cmp	r3, #4
 8009600:	d105      	bne.n	800960e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	bc80      	pop	{r7}
 8009618:	4770      	bx	lr

0800961a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009628:	2b03      	cmp	r3, #3
 800962a:	d10b      	bne.n	8009644 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3708      	adds	r7, #8
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
	...

08009650 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009666:	2b40      	cmp	r3, #64	; 0x40
 8009668:	d005      	beq.n	8009676 <USBD_StdDevReq+0x26>
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d84f      	bhi.n	800970e <USBD_StdDevReq+0xbe>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <USBD_StdDevReq+0x36>
 8009672:	2b20      	cmp	r3, #32
 8009674:	d14b      	bne.n	800970e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	4798      	blx	r3
      break;
 8009684:	e048      	b.n	8009718 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	785b      	ldrb	r3, [r3, #1]
 800968a:	2b09      	cmp	r3, #9
 800968c:	d839      	bhi.n	8009702 <USBD_StdDevReq+0xb2>
 800968e:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USBD_StdDevReq+0x44>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096e5 	.word	0x080096e5
 8009698:	080096f9 	.word	0x080096f9
 800969c:	08009703 	.word	0x08009703
 80096a0:	080096ef 	.word	0x080096ef
 80096a4:	08009703 	.word	0x08009703
 80096a8:	080096c7 	.word	0x080096c7
 80096ac:	080096bd 	.word	0x080096bd
 80096b0:	08009703 	.word	0x08009703
 80096b4:	080096db 	.word	0x080096db
 80096b8:	080096d1 	.word	0x080096d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f9dc 	bl	8009a7c <USBD_GetDescriptor>
          break;
 80096c4:	e022      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fb3f 	bl	8009d4c <USBD_SetAddress>
          break;
 80096ce:	e01d      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fb7e 	bl	8009dd4 <USBD_SetConfig>
          break;
 80096d8:	e018      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc07 	bl	8009ef0 <USBD_GetConfig>
          break;
 80096e2:	e013      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fc37 	bl	8009f5a <USBD_GetStatus>
          break;
 80096ec:	e00e      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fc65 	bl	8009fc0 <USBD_SetFeature>
          break;
 80096f6:	e009      	b.n	800970c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc74 	bl	8009fe8 <USBD_ClrFeature>
          break;
 8009700:	e004      	b.n	800970c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 fccc 	bl	800a0a2 <USBD_CtlError>
          break;
 800970a:	bf00      	nop
      }
      break;
 800970c:	e004      	b.n	8009718 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fcc6 	bl	800a0a2 <USBD_CtlError>
      break;
 8009716:	bf00      	nop
  }

  return ret;
 8009718:	7bfb      	ldrb	r3, [r7, #15]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop

08009724 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973a:	2b40      	cmp	r3, #64	; 0x40
 800973c:	d005      	beq.n	800974a <USBD_StdItfReq+0x26>
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d82e      	bhi.n	80097a0 <USBD_StdItfReq+0x7c>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <USBD_StdItfReq+0x26>
 8009746:	2b20      	cmp	r3, #32
 8009748:	d12a      	bne.n	80097a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009750:	3b01      	subs	r3, #1
 8009752:	2b02      	cmp	r3, #2
 8009754:	d81d      	bhi.n	8009792 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	889b      	ldrh	r3, [r3, #4]
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	d813      	bhi.n	8009788 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	4603      	mov	r3, r0
 8009770:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	88db      	ldrh	r3, [r3, #6]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d110      	bne.n	800979c <USBD_StdItfReq+0x78>
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10d      	bne.n	800979c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fd56 	bl	800a232 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009786:	e009      	b.n	800979c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fc89 	bl	800a0a2 <USBD_CtlError>
          break;
 8009790:	e004      	b.n	800979c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fc84 	bl	800a0a2 <USBD_CtlError>
          break;
 800979a:	e000      	b.n	800979e <USBD_StdItfReq+0x7a>
          break;
 800979c:	bf00      	nop
      }
      break;
 800979e:	e004      	b.n	80097aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fc7d 	bl	800a0a2 <USBD_CtlError>
      break;
 80097a8:	bf00      	nop
  }

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	889b      	ldrh	r3, [r3, #4]
 80097c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097d0:	2b40      	cmp	r3, #64	; 0x40
 80097d2:	d007      	beq.n	80097e4 <USBD_StdEPReq+0x30>
 80097d4:	2b40      	cmp	r3, #64	; 0x40
 80097d6:	f200 8146 	bhi.w	8009a66 <USBD_StdEPReq+0x2b2>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <USBD_StdEPReq+0x40>
 80097de:	2b20      	cmp	r3, #32
 80097e0:	f040 8141 	bne.w	8009a66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
      break;
 80097f2:	e13d      	b.n	8009a70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d10a      	bne.n	8009816 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	e12d      	b.n	8009a72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	785b      	ldrb	r3, [r3, #1]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d007      	beq.n	800982e <USBD_StdEPReq+0x7a>
 800981e:	2b03      	cmp	r3, #3
 8009820:	f300 811b 	bgt.w	8009a5a <USBD_StdEPReq+0x2a6>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d072      	beq.n	800990e <USBD_StdEPReq+0x15a>
 8009828:	2b01      	cmp	r3, #1
 800982a:	d03a      	beq.n	80098a2 <USBD_StdEPReq+0xee>
 800982c:	e115      	b.n	8009a5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009834:	2b02      	cmp	r3, #2
 8009836:	d002      	beq.n	800983e <USBD_StdEPReq+0x8a>
 8009838:	2b03      	cmp	r3, #3
 800983a:	d015      	beq.n	8009868 <USBD_StdEPReq+0xb4>
 800983c:	e02b      	b.n	8009896 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00c      	beq.n	800985e <USBD_StdEPReq+0xaa>
 8009844:	7bbb      	ldrb	r3, [r7, #14]
 8009846:	2b80      	cmp	r3, #128	; 0x80
 8009848:	d009      	beq.n	800985e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	4619      	mov	r1, r3
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f001 f8b8 	bl	800a9c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009854:	2180      	movs	r1, #128	; 0x80
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f001 f8b4 	bl	800a9c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800985c:	e020      	b.n	80098a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fc1e 	bl	800a0a2 <USBD_CtlError>
              break;
 8009866:	e01b      	b.n	80098a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	885b      	ldrh	r3, [r3, #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10e      	bne.n	800988e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009870:	7bbb      	ldrb	r3, [r7, #14]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00b      	beq.n	800988e <USBD_StdEPReq+0xda>
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b80      	cmp	r3, #128	; 0x80
 800987a:	d008      	beq.n	800988e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	88db      	ldrh	r3, [r3, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 f89b 	bl	800a9c4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fccf 	bl	800a232 <USBD_CtlSendStatus>

              break;
 8009894:	e004      	b.n	80098a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc02 	bl	800a0a2 <USBD_CtlError>
              break;
 800989e:	bf00      	nop
          }
          break;
 80098a0:	e0e0      	b.n	8009a64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d002      	beq.n	80098b2 <USBD_StdEPReq+0xfe>
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d015      	beq.n	80098dc <USBD_StdEPReq+0x128>
 80098b0:	e026      	b.n	8009900 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00c      	beq.n	80098d2 <USBD_StdEPReq+0x11e>
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b80      	cmp	r3, #128	; 0x80
 80098bc:	d009      	beq.n	80098d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 f87e 	bl	800a9c4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80098c8:	2180      	movs	r1, #128	; 0x80
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 f87a 	bl	800a9c4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098d0:	e01c      	b.n	800990c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fbe4 	bl	800a0a2 <USBD_CtlError>
              break;
 80098da:	e017      	b.n	800990c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	885b      	ldrh	r3, [r3, #2]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d112      	bne.n	800990a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 f885 	bl	800aa02 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fc9a 	bl	800a232 <USBD_CtlSendStatus>
              }
              break;
 80098fe:	e004      	b.n	800990a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fbcd 	bl	800a0a2 <USBD_CtlError>
              break;
 8009908:	e000      	b.n	800990c <USBD_StdEPReq+0x158>
              break;
 800990a:	bf00      	nop
          }
          break;
 800990c:	e0aa      	b.n	8009a64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009914:	2b02      	cmp	r3, #2
 8009916:	d002      	beq.n	800991e <USBD_StdEPReq+0x16a>
 8009918:	2b03      	cmp	r3, #3
 800991a:	d032      	beq.n	8009982 <USBD_StdEPReq+0x1ce>
 800991c:	e097      	b.n	8009a4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800991e:	7bbb      	ldrb	r3, [r7, #14]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d007      	beq.n	8009934 <USBD_StdEPReq+0x180>
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b80      	cmp	r3, #128	; 0x80
 8009928:	d004      	beq.n	8009934 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbb8 	bl	800a0a2 <USBD_CtlError>
                break;
 8009932:	e091      	b.n	8009a58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009938:	2b00      	cmp	r3, #0
 800993a:	da0b      	bge.n	8009954 <USBD_StdEPReq+0x1a0>
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	3310      	adds	r3, #16
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	4413      	add	r3, r2
 8009950:	3304      	adds	r3, #4
 8009952:	e00b      	b.n	800996c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009954:	7bbb      	ldrb	r3, [r7, #14]
 8009956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	3304      	adds	r3, #4
 800996c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2202      	movs	r2, #2
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fbfb 	bl	800a176 <USBD_CtlSendData>
              break;
 8009980:	e06a      	b.n	8009a58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009986:	2b00      	cmp	r3, #0
 8009988:	da11      	bge.n	80099ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	f003 020f 	and.w	r2, r3, #15
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3318      	adds	r3, #24
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d117      	bne.n	80099d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fb7b 	bl	800a0a2 <USBD_CtlError>
                  break;
 80099ac:	e054      	b.n	8009a58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fb68 	bl	800a0a2 <USBD_CtlError>
                  break;
 80099d2:	e041      	b.n	8009a58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	da0b      	bge.n	80099f4 <USBD_StdEPReq+0x240>
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	3310      	adds	r3, #16
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	4413      	add	r3, r2
 80099f0:	3304      	adds	r3, #4
 80099f2:	e00b      	b.n	8009a0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <USBD_StdEPReq+0x266>
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d103      	bne.n	8009a22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e00e      	b.n	8009a40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	4619      	mov	r1, r3
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 f80a 	bl	800aa40 <USBD_LL_IsStallEP>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2201      	movs	r2, #1
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	e002      	b.n	8009a40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2202      	movs	r2, #2
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb95 	bl	800a176 <USBD_CtlSendData>
              break;
 8009a4c:	e004      	b.n	8009a58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fb26 	bl	800a0a2 <USBD_CtlError>
              break;
 8009a56:	bf00      	nop
          }
          break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fb20 	bl	800a0a2 <USBD_CtlError>
          break;
 8009a62:	bf00      	nop
      }
      break;
 8009a64:	e004      	b.n	8009a70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fb1a 	bl	800a0a2 <USBD_CtlError>
      break;
 8009a6e:	bf00      	nop
  }

  return ret;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	885b      	ldrh	r3, [r3, #2]
 8009a96:	0a1b      	lsrs	r3, r3, #8
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	2b06      	cmp	r3, #6
 8009a9e:	f200 8128 	bhi.w	8009cf2 <USBD_GetDescriptor+0x276>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <USBD_GetDescriptor+0x2c>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009ac5 	.word	0x08009ac5
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009cf3 	.word	0x08009cf3
 8009ab8:	08009cf3 	.word	0x08009cf3
 8009abc:	08009c93 	.word	0x08009c93
 8009ac0:	08009cbf 	.word	0x08009cbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
      break;
 8009ada:	e112      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7c1b      	ldrb	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10d      	bne.n	8009b00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aec:	f107 0208 	add.w	r2, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	2202      	movs	r2, #2
 8009afc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009afe:	e100      	b.n	8009d02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b08:	f107 0208 	add.w	r2, r7, #8
 8009b0c:	4610      	mov	r0, r2
 8009b0e:	4798      	blx	r3
 8009b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	2202      	movs	r2, #2
 8009b18:	701a      	strb	r2, [r3, #0]
      break;
 8009b1a:	e0f2      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	885b      	ldrh	r3, [r3, #2]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	f200 80ac 	bhi.w	8009c80 <USBD_GetDescriptor+0x204>
 8009b28:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <USBD_GetDescriptor+0xb4>)
 8009b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2e:	bf00      	nop
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b7d 	.word	0x08009b7d
 8009b38:	08009bb1 	.word	0x08009bb1
 8009b3c:	08009be5 	.word	0x08009be5
 8009b40:	08009c19 	.word	0x08009c19
 8009b44:	08009c4d 	.word	0x08009c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	7c12      	ldrb	r2, [r2, #16]
 8009b60:	f107 0108 	add.w	r1, r7, #8
 8009b64:	4610      	mov	r0, r2
 8009b66:	4798      	blx	r3
 8009b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b6a:	e091      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b6c:	6839      	ldr	r1, [r7, #0]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa97 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009b74:	7afb      	ldrb	r3, [r7, #11]
 8009b76:	3301      	adds	r3, #1
 8009b78:	72fb      	strb	r3, [r7, #11]
          break;
 8009b7a:	e089      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00b      	beq.n	8009ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	7c12      	ldrb	r2, [r2, #16]
 8009b94:	f107 0108 	add.w	r1, r7, #8
 8009b98:	4610      	mov	r0, r2
 8009b9a:	4798      	blx	r3
 8009b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b9e:	e077      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fa7d 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009ba8:	7afb      	ldrb	r3, [r7, #11]
 8009baa:	3301      	adds	r3, #1
 8009bac:	72fb      	strb	r3, [r7, #11]
          break;
 8009bae:	e06f      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	7c12      	ldrb	r2, [r2, #16]
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bd2:	e05d      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa63 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	3301      	adds	r3, #1
 8009be0:	72fb      	strb	r3, [r7, #11]
          break;
 8009be2:	e055      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00b      	beq.n	8009c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bf6:	691b      	ldr	r3, [r3, #16]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7c12      	ldrb	r2, [r2, #16]
 8009bfc:	f107 0108 	add.w	r1, r7, #8
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c06:	e043      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa49 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009c10:	7afb      	ldrb	r3, [r7, #11]
 8009c12:	3301      	adds	r3, #1
 8009c14:	72fb      	strb	r3, [r7, #11]
          break;
 8009c16:	e03b      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00b      	beq.n	8009c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	7c12      	ldrb	r2, [r2, #16]
 8009c30:	f107 0108 	add.w	r1, r7, #8
 8009c34:	4610      	mov	r0, r2
 8009c36:	4798      	blx	r3
 8009c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c3a:	e029      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fa2f 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3301      	adds	r3, #1
 8009c48:	72fb      	strb	r3, [r7, #11]
          break;
 8009c4a:	e021      	b.n	8009c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00b      	beq.n	8009c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	7c12      	ldrb	r2, [r2, #16]
 8009c64:	f107 0108 	add.w	r1, r7, #8
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
 8009c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c6e:	e00f      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa15 	bl	800a0a2 <USBD_CtlError>
            err++;
 8009c78:	7afb      	ldrb	r3, [r7, #11]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c7e:	e007      	b.n	8009c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 fa0d 	bl	800a0a2 <USBD_CtlError>
          err++;
 8009c88:	7afb      	ldrb	r3, [r7, #11]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009c8e:	e038      	b.n	8009d02 <USBD_GetDescriptor+0x286>
 8009c90:	e037      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	7c1b      	ldrb	r3, [r3, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d109      	bne.n	8009cae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca2:	f107 0208 	add.w	r2, r7, #8
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	4798      	blx	r3
 8009caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009cac:	e029      	b.n	8009d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f9f6 	bl	800a0a2 <USBD_CtlError>
        err++;
 8009cb6:	7afb      	ldrb	r3, [r7, #11]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	72fb      	strb	r3, [r7, #11]
      break;
 8009cbc:	e021      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7c1b      	ldrb	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10d      	bne.n	8009ce2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cce:	f107 0208 	add.w	r2, r7, #8
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	4798      	blx	r3
 8009cd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	2207      	movs	r2, #7
 8009cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ce0:	e00f      	b.n	8009d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f9dc 	bl	800a0a2 <USBD_CtlError>
        err++;
 8009cea:	7afb      	ldrb	r3, [r7, #11]
 8009cec:	3301      	adds	r3, #1
 8009cee:	72fb      	strb	r3, [r7, #11]
      break;
 8009cf0:	e007      	b.n	8009d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9d4 	bl	800a0a2 <USBD_CtlError>
      err++;
 8009cfa:	7afb      	ldrb	r3, [r7, #11]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8009d00:	bf00      	nop
  }

  if (err != 0U)
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11c      	bne.n	8009d42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009d08:	893b      	ldrh	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d011      	beq.n	8009d32 <USBD_GetDescriptor+0x2b6>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	88db      	ldrh	r3, [r3, #6]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	88da      	ldrh	r2, [r3, #6]
 8009d1a:	893b      	ldrh	r3, [r7, #8]
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	bf28      	it	cs
 8009d20:	4613      	movcs	r3, r2
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fa22 	bl	800a176 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	88db      	ldrh	r3, [r3, #6]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d104      	bne.n	8009d44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fa79 	bl	800a232 <USBD_CtlSendStatus>
 8009d40:	e000      	b.n	8009d44 <USBD_GetDescriptor+0x2c8>
    return;
 8009d42:	bf00      	nop
    }
  }
}
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop

08009d4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	889b      	ldrh	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d130      	bne.n	8009dc0 <USBD_SetAddress+0x74>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	88db      	ldrh	r3, [r3, #6]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d12c      	bne.n	8009dc0 <USBD_SetAddress+0x74>
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	885b      	ldrh	r3, [r3, #2]
 8009d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d6c:	d828      	bhi.n	8009dc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	885b      	ldrh	r3, [r3, #2]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d104      	bne.n	8009d8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f98b 	bl	800a0a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d8c:	e01d      	b.n	8009dca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	7bfa      	ldrb	r2, [r7, #15]
 8009d92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fe7c 	bl	800aa98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fa46 	bl	800a232 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db4:	e009      	b.n	8009dca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009dbe:	e004      	b.n	8009dca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009dc0:	6839      	ldr	r1, [r7, #0]
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f96d 	bl	800a0a2 <USBD_CtlError>
  }
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	885b      	ldrh	r3, [r3, #2]
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	4b41      	ldr	r3, [pc, #260]	; (8009eec <USBD_SetConfig+0x118>)
 8009de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009de8:	4b40      	ldr	r3, [pc, #256]	; (8009eec <USBD_SetConfig+0x118>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d904      	bls.n	8009dfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f955 	bl	800a0a2 <USBD_CtlError>
 8009df8:	e075      	b.n	8009ee6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d002      	beq.n	8009e0a <USBD_SetConfig+0x36>
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d023      	beq.n	8009e50 <USBD_SetConfig+0x7c>
 8009e08:	e062      	b.n	8009ed0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009e0a:	4b38      	ldr	r3, [pc, #224]	; (8009eec <USBD_SetConfig+0x118>)
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01a      	beq.n	8009e48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009e12:	4b36      	ldr	r3, [pc, #216]	; (8009eec <USBD_SetConfig+0x118>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2203      	movs	r2, #3
 8009e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009e24:	4b31      	ldr	r3, [pc, #196]	; (8009eec <USBD_SetConfig+0x118>)
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7ff f9e7 	bl	80091fe <USBD_SetClassConfig>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d104      	bne.n	8009e40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f932 	bl	800a0a2 <USBD_CtlError>
            return;
 8009e3e:	e052      	b.n	8009ee6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f9f6 	bl	800a232 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e46:	e04e      	b.n	8009ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f9f2 	bl	800a232 <USBD_CtlSendStatus>
        break;
 8009e4e:	e04a      	b.n	8009ee6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009e50:	4b26      	ldr	r3, [pc, #152]	; (8009eec <USBD_SetConfig+0x118>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d112      	bne.n	8009e7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009e60:	4b22      	ldr	r3, [pc, #136]	; (8009eec <USBD_SetConfig+0x118>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	461a      	mov	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009e6a:	4b20      	ldr	r3, [pc, #128]	; (8009eec <USBD_SetConfig+0x118>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7ff f9e3 	bl	800923c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f9db 	bl	800a232 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009e7c:	e033      	b.n	8009ee6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009e7e:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <USBD_SetConfig+0x118>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d01d      	beq.n	8009ec8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7ff f9d1 	bl	800923c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009e9a:	4b14      	ldr	r3, [pc, #80]	; (8009eec <USBD_SetConfig+0x118>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ea4:	4b11      	ldr	r3, [pc, #68]	; (8009eec <USBD_SetConfig+0x118>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff f9a7 	bl	80091fe <USBD_SetClassConfig>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d104      	bne.n	8009ec0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f8f2 	bl	800a0a2 <USBD_CtlError>
            return;
 8009ebe:	e012      	b.n	8009ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f9b6 	bl	800a232 <USBD_CtlSendStatus>
        break;
 8009ec6:	e00e      	b.n	8009ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f9b2 	bl	800a232 <USBD_CtlSendStatus>
        break;
 8009ece:	e00a      	b.n	8009ee6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f8e5 	bl	800a0a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ed8:	4b04      	ldr	r3, [pc, #16]	; (8009eec <USBD_SetConfig+0x118>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff f9ac 	bl	800923c <USBD_ClrClassConfig>
        break;
 8009ee4:	bf00      	nop
    }
  }
}
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	2000025c 	.word	0x2000025c

08009ef0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	88db      	ldrh	r3, [r3, #6]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d004      	beq.n	8009f0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f8cc 	bl	800a0a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009f0a:	e022      	b.n	8009f52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	dc02      	bgt.n	8009f1c <USBD_GetConfig+0x2c>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dc03      	bgt.n	8009f22 <USBD_GetConfig+0x32>
 8009f1a:	e015      	b.n	8009f48 <USBD_GetConfig+0x58>
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d00b      	beq.n	8009f38 <USBD_GetConfig+0x48>
 8009f20:	e012      	b.n	8009f48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f920 	bl	800a176 <USBD_CtlSendData>
        break;
 8009f36:	e00c      	b.n	8009f52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f918 	bl	800a176 <USBD_CtlSendData>
        break;
 8009f46:	e004      	b.n	8009f52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f8a9 	bl	800a0a2 <USBD_CtlError>
        break;
 8009f50:	bf00      	nop
}
 8009f52:	bf00      	nop
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d81e      	bhi.n	8009fae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	88db      	ldrh	r3, [r3, #6]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d004      	beq.n	8009f82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f891 	bl	800a0a2 <USBD_CtlError>
        break;
 8009f80:	e01a      	b.n	8009fb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d005      	beq.n	8009f9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f043 0202 	orr.w	r2, r3, #2
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	330c      	adds	r3, #12
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f8e5 	bl	800a176 <USBD_CtlSendData>
      break;
 8009fac:	e004      	b.n	8009fb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f876 	bl	800a0a2 <USBD_CtlError>
      break;
 8009fb6:	bf00      	nop
  }
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	885b      	ldrh	r3, [r3, #2]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d106      	bne.n	8009fe0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f929 	bl	800a232 <USBD_CtlSendStatus>
  }
}
 8009fe0:	bf00      	nop
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d80b      	bhi.n	800a016 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	885b      	ldrh	r3, [r3, #2]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d10c      	bne.n	800a020 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f90f 	bl	800a232 <USBD_CtlSendStatus>
      }
      break;
 800a014:	e004      	b.n	800a020 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f842 	bl	800a0a2 <USBD_CtlError>
      break;
 800a01e:	e000      	b.n	800a022 <USBD_ClrFeature+0x3a>
      break;
 800a020:	bf00      	nop
  }
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	785a      	ldrb	r2, [r3, #1]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	3302      	adds	r3, #2
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	3303      	adds	r3, #3
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	b29b      	uxth	r3, r3
 800a058:	4413      	add	r3, r2
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	3304      	adds	r3, #4
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	b29a      	uxth	r2, r3
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	3305      	adds	r3, #5
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	021b      	lsls	r3, r3, #8
 800a072:	b29b      	uxth	r3, r3
 800a074:	4413      	add	r3, r2
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	3306      	adds	r3, #6
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b29a      	uxth	r2, r3
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	3307      	adds	r3, #7
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4413      	add	r3, r2
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	80da      	strh	r2, [r3, #6]

}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bc80      	pop	{r7}
 800a0a0:	4770      	bx	lr

0800a0a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a0ac:	2180      	movs	r1, #128	; 0x80
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fc88 	bl	800a9c4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fc84 	bl	800a9c4 <USBD_LL_StallEP>
}
 800a0bc:	bf00      	nop
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d032      	beq.n	800a140 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f000 f834 	bl	800a148 <USBD_GetLen>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	75fa      	strb	r2, [r7, #23]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	7812      	ldrb	r2, [r2, #0]
 800a0fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	75fa      	strb	r2, [r7, #23]
 800a106:	461a      	mov	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	4413      	add	r3, r2
 800a10c:	2203      	movs	r2, #3
 800a10e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a110:	e012      	b.n	800a138 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	60fa      	str	r2, [r7, #12]
 800a118:	7dfa      	ldrb	r2, [r7, #23]
 800a11a:	1c51      	adds	r1, r2, #1
 800a11c:	75f9      	strb	r1, [r7, #23]
 800a11e:	4611      	mov	r1, r2
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	440a      	add	r2, r1
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	75fa      	strb	r2, [r7, #23]
 800a12e:	461a      	mov	r2, r3
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4413      	add	r3, r2
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e8      	bne.n	800a112 <USBD_GetString+0x4e>
    }
  }
}
 800a140:	bf00      	nop
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a150:	2300      	movs	r3, #0
 800a152:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a154:	e005      	b.n	800a162 <USBD_GetLen+0x1a>
  {
    len++;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	3301      	adds	r3, #1
 800a15a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	3301      	adds	r3, #1
 800a160:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1f5      	bne.n	800a156 <USBD_GetLen+0xe>
  }

  return len;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr

0800a176 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	4613      	mov	r3, r2
 800a182:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2202      	movs	r2, #2
 800a188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a18c:	88fa      	ldrh	r2, [r7, #6]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a192:	88fa      	ldrh	r2, [r7, #6]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	2100      	movs	r1, #0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fc99 	bl	800aad6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b084      	sub	sp, #16
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1bc:	88fb      	ldrh	r3, [r7, #6]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 fc87 	bl	800aad6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b084      	sub	sp, #16
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1e8:	88fa      	ldrh	r2, [r7, #6]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a1f0:	88fa      	ldrh	r2, [r7, #6]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1f8:	88fb      	ldrh	r3, [r7, #6]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 fc8c 	bl	800ab1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	4613      	mov	r3, r2
 800a21a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	2100      	movs	r1, #0
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f000 fc7a 	bl	800ab1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2204      	movs	r2, #4
 800a23e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a242:	2300      	movs	r3, #0
 800a244:	2200      	movs	r2, #0
 800a246:	2100      	movs	r1, #0
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fc44 	bl	800aad6 <USBD_LL_Transmit>

  return USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2205      	movs	r2, #5
 800a264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a268:	2300      	movs	r3, #0
 800a26a:	2200      	movs	r2, #0
 800a26c:	2100      	movs	r1, #0
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 fc54 	bl	800ab1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a284:	2200      	movs	r2, #0
 800a286:	4912      	ldr	r1, [pc, #72]	; (800a2d0 <MX_USB_DEVICE_Init+0x50>)
 800a288:	4812      	ldr	r0, [pc, #72]	; (800a2d4 <MX_USB_DEVICE_Init+0x54>)
 800a28a:	f7fe ff5e 	bl	800914a <USBD_Init>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a294:	f7f7 fb84 	bl	80019a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a298:	490f      	ldr	r1, [pc, #60]	; (800a2d8 <MX_USB_DEVICE_Init+0x58>)
 800a29a:	480e      	ldr	r0, [pc, #56]	; (800a2d4 <MX_USB_DEVICE_Init+0x54>)
 800a29c:	f7fe ff80 	bl	80091a0 <USBD_RegisterClass>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a2a6:	f7f7 fb7b 	bl	80019a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a2aa:	490c      	ldr	r1, [pc, #48]	; (800a2dc <MX_USB_DEVICE_Init+0x5c>)
 800a2ac:	4809      	ldr	r0, [pc, #36]	; (800a2d4 <MX_USB_DEVICE_Init+0x54>)
 800a2ae:	f7fe feb1 	bl	8009014 <USBD_CDC_RegisterInterface>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d001      	beq.n	800a2bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2b8:	f7f7 fb72 	bl	80019a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a2bc:	4805      	ldr	r0, [pc, #20]	; (800a2d4 <MX_USB_DEVICE_Init+0x54>)
 800a2be:	f7fe ff88 	bl	80091d2 <USBD_Start>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2c8:	f7f7 fb6a 	bl	80019a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2cc:	bf00      	nop
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20000170 	.word	0x20000170
 800a2d4:	20000d88 	.word	0x20000d88
 800a2d8:	2000005c 	.word	0x2000005c
 800a2dc:	20000160 	.word	0x20000160

0800a2e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4905      	ldr	r1, [pc, #20]	; (800a2fc <CDC_Init_FS+0x1c>)
 800a2e8:	4805      	ldr	r0, [pc, #20]	; (800a300 <CDC_Init_FS+0x20>)
 800a2ea:	f7fe fea9 	bl	8009040 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2ee:	4905      	ldr	r1, [pc, #20]	; (800a304 <CDC_Init_FS+0x24>)
 800a2f0:	4803      	ldr	r0, [pc, #12]	; (800a300 <CDC_Init_FS+0x20>)
 800a2f2:	f7fe febe 	bl	8009072 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800a2f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	2000124c 	.word	0x2000124c
 800a300:	20000d88 	.word	0x20000d88
 800a304:	2000104c 	.word	0x2000104c

0800a308 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800a30c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a30e:	4618      	mov	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr
	...

0800a318 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	6039      	str	r1, [r7, #0]
 800a322:	71fb      	strb	r3, [r7, #7]
 800a324:	4613      	mov	r3, r2
 800a326:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800a328:	79fb      	ldrb	r3, [r7, #7]
 800a32a:	2b23      	cmp	r3, #35	; 0x23
 800a32c:	d84a      	bhi.n	800a3c4 <CDC_Control_FS+0xac>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <CDC_Control_FS+0x1c>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a3c5 	.word	0x0800a3c5
 800a338:	0800a3c5 	.word	0x0800a3c5
 800a33c:	0800a3c5 	.word	0x0800a3c5
 800a340:	0800a3c5 	.word	0x0800a3c5
 800a344:	0800a3c5 	.word	0x0800a3c5
 800a348:	0800a3c5 	.word	0x0800a3c5
 800a34c:	0800a3c5 	.word	0x0800a3c5
 800a350:	0800a3c5 	.word	0x0800a3c5
 800a354:	0800a3c5 	.word	0x0800a3c5
 800a358:	0800a3c5 	.word	0x0800a3c5
 800a35c:	0800a3c5 	.word	0x0800a3c5
 800a360:	0800a3c5 	.word	0x0800a3c5
 800a364:	0800a3c5 	.word	0x0800a3c5
 800a368:	0800a3c5 	.word	0x0800a3c5
 800a36c:	0800a3c5 	.word	0x0800a3c5
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a3c5 	.word	0x0800a3c5
 800a378:	0800a3c5 	.word	0x0800a3c5
 800a37c:	0800a3c5 	.word	0x0800a3c5
 800a380:	0800a3c5 	.word	0x0800a3c5
 800a384:	0800a3c5 	.word	0x0800a3c5
 800a388:	0800a3c5 	.word	0x0800a3c5
 800a38c:	0800a3c5 	.word	0x0800a3c5
 800a390:	0800a3c5 	.word	0x0800a3c5
 800a394:	0800a3c5 	.word	0x0800a3c5
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	0800a3c5 	.word	0x0800a3c5
 800a3a0:	0800a3c5 	.word	0x0800a3c5
 800a3a4:	0800a3c5 	.word	0x0800a3c5
 800a3a8:	0800a3c5 	.word	0x0800a3c5
 800a3ac:	0800a3c5 	.word	0x0800a3c5
 800a3b0:	0800a3c5 	.word	0x0800a3c5
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3c5 	.word	0x0800a3c5
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	0800a3c5 	.word	0x0800a3c5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800a3c4:	bf00      	nop
	}

	return (USBD_OK);
 800a3c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bc80      	pop	{r7}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop

0800a3d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	481c      	ldr	r0, [pc, #112]	; (800a454 <CDC_Receive_FS+0x80>)
 800a3e2:	f7fe fe46 	bl	8009072 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3e6:	481b      	ldr	r0, [pc, #108]	; (800a454 <CDC_Receive_FS+0x80>)
 800a3e8:	f7fe fe85 	bl	80090f6 <USBD_CDC_ReceivePacket>

	/* Запись данных в общую глобальную переменную для
	 * хранения пакета данных - usb_rx_data */
	if ( usb_rx_data.is_handled  == false ) {
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <CDC_Receive_FS+0x84>)
 800a3ee:	785b      	ldrb	r3, [r3, #1]
 800a3f0:	f083 0301 	eor.w	r3, r3, #1
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d015      	beq.n	800a426 <CDC_Receive_FS+0x52>
	    /* Если данные пакета ещё не обработаны, то
	     * ошибка - прием нового пакета пока не возможен.
	     * И отправляем пакет из 5-ти нулей, как показатель об
	     * ошибке. */
	    uint8_t b[] = {0,0,0,0,0};
 800a3fa:	4a18      	ldr	r2, [pc, #96]	; (800a45c <CDC_Receive_FS+0x88>)
 800a3fc:	f107 0308 	add.w	r3, r7, #8
 800a400:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a404:	6018      	str	r0, [r3, #0]
 800a406:	3304      	adds	r3, #4
 800a408:	7019      	strb	r1, [r3, #0]
	    CDC_Transmit_FS(b, strlen( (char*)b) );
 800a40a:	f107 0308 	add.w	r3, r7, #8
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f5 fe9e 	bl	8000150 <strlen>
 800a414:	4603      	mov	r3, r0
 800a416:	b29a      	uxth	r2, r3
 800a418:	f107 0308 	add.w	r3, r7, #8
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 f820 	bl	800a464 <CDC_Transmit_FS>
 800a424:	e011      	b.n	800a44a <CDC_Receive_FS+0x76>
	}
	else {
	    memcpy( usb_rx_data.buff, Buf, *Len );
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	480c      	ldr	r0, [pc, #48]	; (800a460 <CDC_Receive_FS+0x8c>)
 800a430:	f000 fc20 	bl	800ac74 <memcpy>
	    usb_rx_data.len         = *Len;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	4b07      	ldr	r3, [pc, #28]	; (800a458 <CDC_Receive_FS+0x84>)
 800a43c:	709a      	strb	r2, [r3, #2]
	    usb_rx_data.is_handled  = false;
 800a43e:	4b06      	ldr	r3, [pc, #24]	; (800a458 <CDC_Receive_FS+0x84>)
 800a440:	2200      	movs	r2, #0
 800a442:	705a      	strb	r2, [r3, #1]
	    usb_rx_data.is_received = true;
 800a444:	4b04      	ldr	r3, [pc, #16]	; (800a458 <CDC_Receive_FS+0x84>)
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
	}

	return (USBD_OK);
 800a44a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000d88 	.word	0x20000d88
 800a458:	20000000 	.word	0x20000000
 800a45c:	0800bcec 	.word	0x0800bcec
 800a460:	20000003 	.word	0x20000003

0800a464 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <CDC_Transmit_FS+0x48>)
 800a476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800a486:	2301      	movs	r3, #1
 800a488:	e00b      	b.n	800a4a2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a48a:	887b      	ldrh	r3, [r7, #2]
 800a48c:	461a      	mov	r2, r3
 800a48e:	6879      	ldr	r1, [r7, #4]
 800a490:	4806      	ldr	r0, [pc, #24]	; (800a4ac <CDC_Transmit_FS+0x48>)
 800a492:	f7fe fdd5 	bl	8009040 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a496:	4805      	ldr	r0, [pc, #20]	; (800a4ac <CDC_Transmit_FS+0x48>)
 800a498:	f7fe fdfe 	bl	8009098 <USBD_CDC_TransmitPacket>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000d88 	.word	0x20000d88

0800a4b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2212      	movs	r2, #18
 800a4c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a4c2:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bc80      	pop	{r7}
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	2000018c 	.word	0x2000018c

0800a4d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	6039      	str	r1, [r7, #0]
 800a4de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2204      	movs	r2, #4
 800a4e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a4e6:	4b03      	ldr	r3, [pc, #12]	; (800a4f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	200001a0 	.word	0x200001a0

0800a4f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	6039      	str	r1, [r7, #0]
 800a502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a504:	79fb      	ldrb	r3, [r7, #7]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d105      	bne.n	800a516 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4907      	ldr	r1, [pc, #28]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
 800a50e:	4808      	ldr	r0, [pc, #32]	; (800a530 <USBD_FS_ProductStrDescriptor+0x38>)
 800a510:	f7ff fdd8 	bl	800a0c4 <USBD_GetString>
 800a514:	e004      	b.n	800a520 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	4904      	ldr	r1, [pc, #16]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
 800a51a:	4805      	ldr	r0, [pc, #20]	; (800a530 <USBD_FS_ProductStrDescriptor+0x38>)
 800a51c:	f7ff fdd2 	bl	800a0c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a520:	4b02      	ldr	r3, [pc, #8]	; (800a52c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	2000144c 	.word	0x2000144c
 800a530:	0800bcf4 	.word	0x0800bcf4

0800a534 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	6039      	str	r1, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	4904      	ldr	r1, [pc, #16]	; (800a554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a544:	4804      	ldr	r0, [pc, #16]	; (800a558 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a546:	f7ff fdbd 	bl	800a0c4 <USBD_GetString>
  return USBD_StrDesc;
 800a54a:	4b02      	ldr	r3, [pc, #8]	; (800a554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	2000144c 	.word	0x2000144c
 800a558:	0800bd0c 	.word	0x0800bd0c

0800a55c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	221a      	movs	r2, #26
 800a56c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a56e:	f000 f843 	bl	800a5f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a572:	4b02      	ldr	r3, [pc, #8]	; (800a57c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	200001a4 	.word	0x200001a4

0800a580 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	6039      	str	r1, [r7, #0]
 800a58a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a58c:	79fb      	ldrb	r3, [r7, #7]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d105      	bne.n	800a59e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4907      	ldr	r1, [pc, #28]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a596:	4808      	ldr	r0, [pc, #32]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a598:	f7ff fd94 	bl	800a0c4 <USBD_GetString>
 800a59c:	e004      	b.n	800a5a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	4904      	ldr	r1, [pc, #16]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a5a2:	4805      	ldr	r0, [pc, #20]	; (800a5b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a5a4:	f7ff fd8e 	bl	800a0c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	2000144c 	.word	0x2000144c
 800a5b8:	0800bd20 	.word	0x0800bd20

0800a5bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d105      	bne.n	800a5da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	4907      	ldr	r1, [pc, #28]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5d2:	4808      	ldr	r0, [pc, #32]	; (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5d4:	f7ff fd76 	bl	800a0c4 <USBD_GetString>
 800a5d8:	e004      	b.n	800a5e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a5da:	683a      	ldr	r2, [r7, #0]
 800a5dc:	4904      	ldr	r1, [pc, #16]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a5de:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a5e0:	f7ff fd70 	bl	800a0c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5e4:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3708      	adds	r7, #8
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000144c 	.word	0x2000144c
 800a5f4:	0800bd2c 	.word	0x0800bd2c

0800a5f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5fe:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <Get_SerialNum+0x44>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <Get_SerialNum+0x48>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a60a:	4b0e      	ldr	r3, [pc, #56]	; (800a644 <Get_SerialNum+0x4c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4413      	add	r3, r2
 800a616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d009      	beq.n	800a632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a61e:	2208      	movs	r2, #8
 800a620:	4909      	ldr	r1, [pc, #36]	; (800a648 <Get_SerialNum+0x50>)
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f814 	bl	800a650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a628:	2204      	movs	r2, #4
 800a62a:	4908      	ldr	r1, [pc, #32]	; (800a64c <Get_SerialNum+0x54>)
 800a62c:	68b8      	ldr	r0, [r7, #8]
 800a62e:	f000 f80f 	bl	800a650 <IntToUnicode>
  }
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	1ffff7e8 	.word	0x1ffff7e8
 800a640:	1ffff7ec 	.word	0x1ffff7ec
 800a644:	1ffff7f0 	.word	0x1ffff7f0
 800a648:	200001a6 	.word	0x200001a6
 800a64c:	200001b6 	.word	0x200001b6

0800a650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a65e:	2300      	movs	r3, #0
 800a660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a662:	2300      	movs	r3, #0
 800a664:	75fb      	strb	r3, [r7, #23]
 800a666:	e027      	b.n	800a6b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0f1b      	lsrs	r3, r3, #28
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d80b      	bhi.n	800a688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	0f1b      	lsrs	r3, r3, #28
 800a674:	b2da      	uxtb	r2, r3
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4619      	mov	r1, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	440b      	add	r3, r1
 800a680:	3230      	adds	r2, #48	; 0x30
 800a682:	b2d2      	uxtb	r2, r2
 800a684:	701a      	strb	r2, [r3, #0]
 800a686:	e00a      	b.n	800a69e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	0f1b      	lsrs	r3, r3, #28
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	7dfb      	ldrb	r3, [r7, #23]
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	4619      	mov	r1, r3
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	440b      	add	r3, r1
 800a698:	3237      	adds	r2, #55	; 0x37
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
 800a6a6:	005b      	lsls	r3, r3, #1
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
 800a6b8:	7dfa      	ldrb	r2, [r7, #23]
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d3d3      	bcc.n	800a668 <IntToUnicode+0x18>
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bc80      	pop	{r7}
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a0d      	ldr	r2, [pc, #52]	; (800a710 <HAL_PCD_MspInit+0x44>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d113      	bne.n	800a706 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a6de:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <HAL_PCD_MspInit+0x48>)
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	4a0c      	ldr	r2, [pc, #48]	; (800a714 <HAL_PCD_MspInit+0x48>)
 800a6e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6e8:	61d3      	str	r3, [r2, #28]
 800a6ea:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <HAL_PCD_MspInit+0x48>)
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	2014      	movs	r0, #20
 800a6fc:	f7f8 fca5 	bl	800304a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a700:	2014      	movs	r0, #20
 800a702:	f7f8 fcbe 	bl	8003082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40005c00 	.word	0x40005c00
 800a714:	40021000 	.word	0x40021000

0800a718 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fe fd97 	bl	8009262 <USBD_LL_SetupStage>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a74e:	78fa      	ldrb	r2, [r7, #3]
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	4613      	mov	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	440b      	add	r3, r1
 800a75c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	78fb      	ldrb	r3, [r7, #3]
 800a764:	4619      	mov	r1, r3
 800a766:	f7fe fdc9 	bl	80092fc <USBD_LL_DataOutStage>
}
 800a76a:	bf00      	nop
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	460b      	mov	r3, r1
 800a77c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a784:	78fa      	ldrb	r2, [r7, #3]
 800a786:	6879      	ldr	r1, [r7, #4]
 800a788:	4613      	mov	r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	440b      	add	r3, r1
 800a792:	333c      	adds	r3, #60	; 0x3c
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	4619      	mov	r1, r3
 800a79a:	f7fe fe20 	bl	80093de <USBD_LL_DataInStage>
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe ff30 	bl	800961a <USBD_LL_SOF>
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d001      	beq.n	800a7da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a7d6:	f7f7 f8e3 	bl	80019a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7e0:	7bfa      	ldrb	r2, [r7, #15]
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe fee0 	bl	80095aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fe fe99 	bl	8009528 <USBD_LL_Reset>
}
 800a7f6:	bf00      	nop
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
	...

0800a800 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe feda 	bl	80095c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d005      	beq.n	800a828 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a81c:	4b04      	ldr	r3, [pc, #16]	; (800a830 <HAL_PCD_SuspendCallback+0x30>)
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	4a03      	ldr	r2, [pc, #12]	; (800a830 <HAL_PCD_SuspendCallback+0x30>)
 800a822:	f043 0306 	orr.w	r3, r3, #6
 800a826:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	e000ed00 	.word	0xe000ed00

0800a834 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fed4 	bl	80095f0 <USBD_LL_Resume>
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a858:	4a28      	ldr	r2, [pc, #160]	; (800a8fc <USBD_LL_Init+0xac>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a26      	ldr	r2, [pc, #152]	; (800a8fc <USBD_LL_Init+0xac>)
 800a864:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a868:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <USBD_LL_Init+0xac>)
 800a86a:	4a25      	ldr	r2, [pc, #148]	; (800a900 <USBD_LL_Init+0xb0>)
 800a86c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a86e:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <USBD_LL_Init+0xac>)
 800a870:	2208      	movs	r2, #8
 800a872:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a874:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <USBD_LL_Init+0xac>)
 800a876:	2202      	movs	r2, #2
 800a878:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a87a:	4b20      	ldr	r3, [pc, #128]	; (800a8fc <USBD_LL_Init+0xac>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a880:	4b1e      	ldr	r3, [pc, #120]	; (800a8fc <USBD_LL_Init+0xac>)
 800a882:	2200      	movs	r2, #0
 800a884:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a886:	4b1d      	ldr	r3, [pc, #116]	; (800a8fc <USBD_LL_Init+0xac>)
 800a888:	2200      	movs	r2, #0
 800a88a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a88c:	481b      	ldr	r0, [pc, #108]	; (800a8fc <USBD_LL_Init+0xac>)
 800a88e:	f7f8 fffd 	bl	800388c <HAL_PCD_Init>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a898:	f7f7 f882 	bl	80019a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8a2:	2318      	movs	r3, #24
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	f7fa fb3f 	bl	8004f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8b2:	2358      	movs	r3, #88	; 0x58
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2180      	movs	r1, #128	; 0x80
 800a8b8:	f7fa fb37 	bl	8004f2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8c2:	23c0      	movs	r3, #192	; 0xc0
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2181      	movs	r1, #129	; 0x81
 800a8c8:	f7fa fb2f 	bl	8004f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8d2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2101      	movs	r1, #1
 800a8da:	f7fa fb26 	bl	8004f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2182      	movs	r1, #130	; 0x82
 800a8ec:	f7fa fb1d 	bl	8004f2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	2000164c 	.word	0x2000164c
 800a900:	40005c00 	.word	0x40005c00

0800a904 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a90c:	2300      	movs	r3, #0
 800a90e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7f9 f8c1 	bl	8003aa2 <HAL_PCD_Start>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f94e 	bl	800abc8 <USBD_Get_USB_Status>
 800a92c:	4603      	mov	r3, r0
 800a92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a930:	7bbb      	ldrb	r3, [r7, #14]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	4608      	mov	r0, r1
 800a944:	4611      	mov	r1, r2
 800a946:	461a      	mov	r2, r3
 800a948:	4603      	mov	r3, r0
 800a94a:	70fb      	strb	r3, [r7, #3]
 800a94c:	460b      	mov	r3, r1
 800a94e:	70bb      	strb	r3, [r7, #2]
 800a950:	4613      	mov	r3, r2
 800a952:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a962:	78bb      	ldrb	r3, [r7, #2]
 800a964:	883a      	ldrh	r2, [r7, #0]
 800a966:	78f9      	ldrb	r1, [r7, #3]
 800a968:	f7f9 fa3b 	bl	8003de2 <HAL_PCD_EP_Open>
 800a96c:	4603      	mov	r3, r0
 800a96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	4618      	mov	r0, r3
 800a974:	f000 f928 	bl	800abc8 <USBD_Get_USB_Status>
 800a978:	4603      	mov	r3, r0
 800a97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
 800a98e:	460b      	mov	r3, r1
 800a990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f9 fa82 	bl	8003eae <HAL_PCD_EP_Close>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 f909 	bl	800abc8 <USBD_Get_USB_Status>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9de:	78fa      	ldrb	r2, [r7, #3]
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7f9 fb42 	bl	800406c <HAL_PCD_EP_SetStall>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 f8ea 	bl	800abc8 <USBD_Get_USB_Status>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa1c:	78fa      	ldrb	r2, [r7, #3]
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7f9 fb83 	bl	800412c <HAL_PCD_EP_ClrStall>
 800aa26:	4603      	mov	r3, r0
 800aa28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 f8cb 	bl	800abc8 <USBD_Get_USB_Status>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	da0c      	bge.n	800aa76 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	440b      	add	r3, r1
 800aa70:	3302      	adds	r3, #2
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	e00b      	b.n	800aa8e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	440b      	add	r3, r1
 800aa88:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aa8c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bc80      	pop	{r7}
 800aa96:	4770      	bx	lr

0800aa98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aab2:	78fa      	ldrb	r2, [r7, #3]
 800aab4:	4611      	mov	r1, r2
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f9 f96e 	bl	8003d98 <HAL_PCD_SetAddress>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f880 	bl	800abc8 <USBD_Get_USB_Status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b086      	sub	sp, #24
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	461a      	mov	r2, r3
 800aae2:	460b      	mov	r3, r1
 800aae4:	72fb      	strb	r3, [r7, #11]
 800aae6:	4613      	mov	r3, r2
 800aae8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aaf8:	893b      	ldrh	r3, [r7, #8]
 800aafa:	7af9      	ldrb	r1, [r7, #11]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	f7f9 fa72 	bl	8003fe6 <HAL_PCD_EP_Transmit>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 f85d 	bl	800abc8 <USBD_Get_USB_Status>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab12:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3718      	adds	r7, #24
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b086      	sub	sp, #24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	607a      	str	r2, [r7, #4]
 800ab26:	461a      	mov	r2, r3
 800ab28:	460b      	mov	r3, r1
 800ab2a:	72fb      	strb	r3, [r7, #11]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab3e:	893b      	ldrh	r3, [r7, #8]
 800ab40:	7af9      	ldrb	r1, [r7, #11]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	f7f9 f9fb 	bl	8003f3e <HAL_PCD_EP_Receive>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 f83a 	bl	800abc8 <USBD_Get_USB_Status>
 800ab54:	4603      	mov	r3, r0
 800ab56:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab58:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b082      	sub	sp, #8
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab74:	78fa      	ldrb	r2, [r7, #3]
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7f9 fa1d 	bl	8003fb8 <HAL_PCD_EP_GetRxCount>
 800ab7e:	4603      	mov	r3, r0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab90:	4b02      	ldr	r3, [pc, #8]	; (800ab9c <USBD_static_malloc+0x14>)
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bc80      	pop	{r7}
 800ab9a:	4770      	bx	lr
 800ab9c:	20000260 	.word	0x20000260

0800aba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]

}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	bc80      	pop	{r7}
 800abb0:	4770      	bx	lr

0800abb2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bc80      	pop	{r7}
 800abc6:	4770      	bx	lr

0800abc8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4603      	mov	r3, r0
 800abd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d817      	bhi.n	800ac0c <USBD_Get_USB_Status+0x44>
 800abdc:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <USBD_Get_USB_Status+0x1c>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800abf5 	.word	0x0800abf5
 800abe8:	0800abfb 	.word	0x0800abfb
 800abec:	0800ac01 	.word	0x0800ac01
 800abf0:	0800ac07 	.word	0x0800ac07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
    break;
 800abf8:	e00b      	b.n	800ac12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abfa:	2302      	movs	r3, #2
 800abfc:	73fb      	strb	r3, [r7, #15]
    break;
 800abfe:	e008      	b.n	800ac12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac00:	2301      	movs	r3, #1
 800ac02:	73fb      	strb	r3, [r7, #15]
    break;
 800ac04:	e005      	b.n	800ac12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac06:	2302      	movs	r3, #2
 800ac08:	73fb      	strb	r3, [r7, #15]
    break;
 800ac0a:	e002      	b.n	800ac12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac10:	bf00      	nop
  }
  return usb_status;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bc80      	pop	{r7}
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop

0800ac20 <__errno>:
 800ac20:	4b01      	ldr	r3, [pc, #4]	; (800ac28 <__errno+0x8>)
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	200001c0 	.word	0x200001c0

0800ac2c <__libc_init_array>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	2600      	movs	r6, #0
 800ac30:	4d0c      	ldr	r5, [pc, #48]	; (800ac64 <__libc_init_array+0x38>)
 800ac32:	4c0d      	ldr	r4, [pc, #52]	; (800ac68 <__libc_init_array+0x3c>)
 800ac34:	1b64      	subs	r4, r4, r5
 800ac36:	10a4      	asrs	r4, r4, #2
 800ac38:	42a6      	cmp	r6, r4
 800ac3a:	d109      	bne.n	800ac50 <__libc_init_array+0x24>
 800ac3c:	f001 f810 	bl	800bc60 <_init>
 800ac40:	2600      	movs	r6, #0
 800ac42:	4d0a      	ldr	r5, [pc, #40]	; (800ac6c <__libc_init_array+0x40>)
 800ac44:	4c0a      	ldr	r4, [pc, #40]	; (800ac70 <__libc_init_array+0x44>)
 800ac46:	1b64      	subs	r4, r4, r5
 800ac48:	10a4      	asrs	r4, r4, #2
 800ac4a:	42a6      	cmp	r6, r4
 800ac4c:	d105      	bne.n	800ac5a <__libc_init_array+0x2e>
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac54:	4798      	blx	r3
 800ac56:	3601      	adds	r6, #1
 800ac58:	e7ee      	b.n	800ac38 <__libc_init_array+0xc>
 800ac5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac5e:	4798      	blx	r3
 800ac60:	3601      	adds	r6, #1
 800ac62:	e7f2      	b.n	800ac4a <__libc_init_array+0x1e>
 800ac64:	0800bdec 	.word	0x0800bdec
 800ac68:	0800bdec 	.word	0x0800bdec
 800ac6c:	0800bdec 	.word	0x0800bdec
 800ac70:	0800bdf0 	.word	0x0800bdf0

0800ac74 <memcpy>:
 800ac74:	440a      	add	r2, r1
 800ac76:	4291      	cmp	r1, r2
 800ac78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac7c:	d100      	bne.n	800ac80 <memcpy+0xc>
 800ac7e:	4770      	bx	lr
 800ac80:	b510      	push	{r4, lr}
 800ac82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac86:	4291      	cmp	r1, r2
 800ac88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac8c:	d1f9      	bne.n	800ac82 <memcpy+0xe>
 800ac8e:	bd10      	pop	{r4, pc}

0800ac90 <memset>:
 800ac90:	4603      	mov	r3, r0
 800ac92:	4402      	add	r2, r0
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d100      	bne.n	800ac9a <memset+0xa>
 800ac98:	4770      	bx	lr
 800ac9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9e:	e7f9      	b.n	800ac94 <memset+0x4>

0800aca0 <iprintf>:
 800aca0:	b40f      	push	{r0, r1, r2, r3}
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <iprintf+0x2c>)
 800aca4:	b513      	push	{r0, r1, r4, lr}
 800aca6:	681c      	ldr	r4, [r3, #0]
 800aca8:	b124      	cbz	r4, 800acb4 <iprintf+0x14>
 800acaa:	69a3      	ldr	r3, [r4, #24]
 800acac:	b913      	cbnz	r3, 800acb4 <iprintf+0x14>
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f866 	bl	800ad80 <__sinit>
 800acb4:	ab05      	add	r3, sp, #20
 800acb6:	4620      	mov	r0, r4
 800acb8:	9a04      	ldr	r2, [sp, #16]
 800acba:	68a1      	ldr	r1, [r4, #8]
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	f000 f981 	bl	800afc4 <_vfiprintf_r>
 800acc2:	b002      	add	sp, #8
 800acc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc8:	b004      	add	sp, #16
 800acca:	4770      	bx	lr
 800accc:	200001c0 	.word	0x200001c0

0800acd0 <std>:
 800acd0:	2300      	movs	r3, #0
 800acd2:	b510      	push	{r4, lr}
 800acd4:	4604      	mov	r4, r0
 800acd6:	e9c0 3300 	strd	r3, r3, [r0]
 800acda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acde:	6083      	str	r3, [r0, #8]
 800ace0:	8181      	strh	r1, [r0, #12]
 800ace2:	6643      	str	r3, [r0, #100]	; 0x64
 800ace4:	81c2      	strh	r2, [r0, #14]
 800ace6:	6183      	str	r3, [r0, #24]
 800ace8:	4619      	mov	r1, r3
 800acea:	2208      	movs	r2, #8
 800acec:	305c      	adds	r0, #92	; 0x5c
 800acee:	f7ff ffcf 	bl	800ac90 <memset>
 800acf2:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <std+0x38>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	6263      	str	r3, [r4, #36]	; 0x24
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <std+0x3c>)
 800acfa:	62a3      	str	r3, [r4, #40]	; 0x28
 800acfc:	4b04      	ldr	r3, [pc, #16]	; (800ad10 <std+0x40>)
 800acfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad00:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <std+0x44>)
 800ad02:	6323      	str	r3, [r4, #48]	; 0x30
 800ad04:	bd10      	pop	{r4, pc}
 800ad06:	bf00      	nop
 800ad08:	0800b571 	.word	0x0800b571
 800ad0c:	0800b593 	.word	0x0800b593
 800ad10:	0800b5cb 	.word	0x0800b5cb
 800ad14:	0800b5ef 	.word	0x0800b5ef

0800ad18 <_cleanup_r>:
 800ad18:	4901      	ldr	r1, [pc, #4]	; (800ad20 <_cleanup_r+0x8>)
 800ad1a:	f000 b8af 	b.w	800ae7c <_fwalk_reent>
 800ad1e:	bf00      	nop
 800ad20:	0800b8c9 	.word	0x0800b8c9

0800ad24 <__sfmoreglue>:
 800ad24:	b570      	push	{r4, r5, r6, lr}
 800ad26:	2568      	movs	r5, #104	; 0x68
 800ad28:	1e4a      	subs	r2, r1, #1
 800ad2a:	4355      	muls	r5, r2
 800ad2c:	460e      	mov	r6, r1
 800ad2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad32:	f000 f8c5 	bl	800aec0 <_malloc_r>
 800ad36:	4604      	mov	r4, r0
 800ad38:	b140      	cbz	r0, 800ad4c <__sfmoreglue+0x28>
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	e9c0 1600 	strd	r1, r6, [r0]
 800ad40:	300c      	adds	r0, #12
 800ad42:	60a0      	str	r0, [r4, #8]
 800ad44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad48:	f7ff ffa2 	bl	800ac90 <memset>
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	bd70      	pop	{r4, r5, r6, pc}

0800ad50 <__sfp_lock_acquire>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sfp_lock_acquire+0x8>)
 800ad52:	f000 b8b3 	b.w	800aebc <__retarget_lock_acquire_recursive>
 800ad56:	bf00      	nop
 800ad58:	20001940 	.word	0x20001940

0800ad5c <__sfp_lock_release>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sfp_lock_release+0x8>)
 800ad5e:	f000 b8ae 	b.w	800aebe <__retarget_lock_release_recursive>
 800ad62:	bf00      	nop
 800ad64:	20001940 	.word	0x20001940

0800ad68 <__sinit_lock_acquire>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__sinit_lock_acquire+0x8>)
 800ad6a:	f000 b8a7 	b.w	800aebc <__retarget_lock_acquire_recursive>
 800ad6e:	bf00      	nop
 800ad70:	2000193b 	.word	0x2000193b

0800ad74 <__sinit_lock_release>:
 800ad74:	4801      	ldr	r0, [pc, #4]	; (800ad7c <__sinit_lock_release+0x8>)
 800ad76:	f000 b8a2 	b.w	800aebe <__retarget_lock_release_recursive>
 800ad7a:	bf00      	nop
 800ad7c:	2000193b 	.word	0x2000193b

0800ad80 <__sinit>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	4604      	mov	r4, r0
 800ad84:	f7ff fff0 	bl	800ad68 <__sinit_lock_acquire>
 800ad88:	69a3      	ldr	r3, [r4, #24]
 800ad8a:	b11b      	cbz	r3, 800ad94 <__sinit+0x14>
 800ad8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad90:	f7ff bff0 	b.w	800ad74 <__sinit_lock_release>
 800ad94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad98:	6523      	str	r3, [r4, #80]	; 0x50
 800ad9a:	4b13      	ldr	r3, [pc, #76]	; (800ade8 <__sinit+0x68>)
 800ad9c:	4a13      	ldr	r2, [pc, #76]	; (800adec <__sinit+0x6c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	bf08      	it	eq
 800ada6:	2301      	moveq	r3, #1
 800ada8:	4620      	mov	r0, r4
 800adaa:	bf08      	it	eq
 800adac:	61a3      	streq	r3, [r4, #24]
 800adae:	f000 f81f 	bl	800adf0 <__sfp>
 800adb2:	6060      	str	r0, [r4, #4]
 800adb4:	4620      	mov	r0, r4
 800adb6:	f000 f81b 	bl	800adf0 <__sfp>
 800adba:	60a0      	str	r0, [r4, #8]
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 f817 	bl	800adf0 <__sfp>
 800adc2:	2200      	movs	r2, #0
 800adc4:	2104      	movs	r1, #4
 800adc6:	60e0      	str	r0, [r4, #12]
 800adc8:	6860      	ldr	r0, [r4, #4]
 800adca:	f7ff ff81 	bl	800acd0 <std>
 800adce:	2201      	movs	r2, #1
 800add0:	2109      	movs	r1, #9
 800add2:	68a0      	ldr	r0, [r4, #8]
 800add4:	f7ff ff7c 	bl	800acd0 <std>
 800add8:	2202      	movs	r2, #2
 800adda:	2112      	movs	r1, #18
 800addc:	68e0      	ldr	r0, [r4, #12]
 800adde:	f7ff ff77 	bl	800acd0 <std>
 800ade2:	2301      	movs	r3, #1
 800ade4:	61a3      	str	r3, [r4, #24]
 800ade6:	e7d1      	b.n	800ad8c <__sinit+0xc>
 800ade8:	0800bd54 	.word	0x0800bd54
 800adec:	0800ad19 	.word	0x0800ad19

0800adf0 <__sfp>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	4607      	mov	r7, r0
 800adf4:	f7ff ffac 	bl	800ad50 <__sfp_lock_acquire>
 800adf8:	4b1e      	ldr	r3, [pc, #120]	; (800ae74 <__sfp+0x84>)
 800adfa:	681e      	ldr	r6, [r3, #0]
 800adfc:	69b3      	ldr	r3, [r6, #24]
 800adfe:	b913      	cbnz	r3, 800ae06 <__sfp+0x16>
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff ffbd 	bl	800ad80 <__sinit>
 800ae06:	3648      	adds	r6, #72	; 0x48
 800ae08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	d503      	bpl.n	800ae18 <__sfp+0x28>
 800ae10:	6833      	ldr	r3, [r6, #0]
 800ae12:	b30b      	cbz	r3, 800ae58 <__sfp+0x68>
 800ae14:	6836      	ldr	r6, [r6, #0]
 800ae16:	e7f7      	b.n	800ae08 <__sfp+0x18>
 800ae18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae1c:	b9d5      	cbnz	r5, 800ae54 <__sfp+0x64>
 800ae1e:	4b16      	ldr	r3, [pc, #88]	; (800ae78 <__sfp+0x88>)
 800ae20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae24:	60e3      	str	r3, [r4, #12]
 800ae26:	6665      	str	r5, [r4, #100]	; 0x64
 800ae28:	f000 f847 	bl	800aeba <__retarget_lock_init_recursive>
 800ae2c:	f7ff ff96 	bl	800ad5c <__sfp_lock_release>
 800ae30:	2208      	movs	r2, #8
 800ae32:	4629      	mov	r1, r5
 800ae34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae3c:	6025      	str	r5, [r4, #0]
 800ae3e:	61a5      	str	r5, [r4, #24]
 800ae40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae44:	f7ff ff24 	bl	800ac90 <memset>
 800ae48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae50:	4620      	mov	r0, r4
 800ae52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae54:	3468      	adds	r4, #104	; 0x68
 800ae56:	e7d9      	b.n	800ae0c <__sfp+0x1c>
 800ae58:	2104      	movs	r1, #4
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f7ff ff62 	bl	800ad24 <__sfmoreglue>
 800ae60:	4604      	mov	r4, r0
 800ae62:	6030      	str	r0, [r6, #0]
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d1d5      	bne.n	800ae14 <__sfp+0x24>
 800ae68:	f7ff ff78 	bl	800ad5c <__sfp_lock_release>
 800ae6c:	230c      	movs	r3, #12
 800ae6e:	603b      	str	r3, [r7, #0]
 800ae70:	e7ee      	b.n	800ae50 <__sfp+0x60>
 800ae72:	bf00      	nop
 800ae74:	0800bd54 	.word	0x0800bd54
 800ae78:	ffff0001 	.word	0xffff0001

0800ae7c <_fwalk_reent>:
 800ae7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae80:	4606      	mov	r6, r0
 800ae82:	4688      	mov	r8, r1
 800ae84:	2700      	movs	r7, #0
 800ae86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ae92:	d505      	bpl.n	800aea0 <_fwalk_reent+0x24>
 800ae94:	6824      	ldr	r4, [r4, #0]
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d1f7      	bne.n	800ae8a <_fwalk_reent+0xe>
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea0:	89ab      	ldrh	r3, [r5, #12]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d907      	bls.n	800aeb6 <_fwalk_reent+0x3a>
 800aea6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	d003      	beq.n	800aeb6 <_fwalk_reent+0x3a>
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	47c0      	blx	r8
 800aeb4:	4307      	orrs	r7, r0
 800aeb6:	3568      	adds	r5, #104	; 0x68
 800aeb8:	e7e9      	b.n	800ae8e <_fwalk_reent+0x12>

0800aeba <__retarget_lock_init_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <__retarget_lock_acquire_recursive>:
 800aebc:	4770      	bx	lr

0800aebe <__retarget_lock_release_recursive>:
 800aebe:	4770      	bx	lr

0800aec0 <_malloc_r>:
 800aec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec2:	1ccd      	adds	r5, r1, #3
 800aec4:	f025 0503 	bic.w	r5, r5, #3
 800aec8:	3508      	adds	r5, #8
 800aeca:	2d0c      	cmp	r5, #12
 800aecc:	bf38      	it	cc
 800aece:	250c      	movcc	r5, #12
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	4606      	mov	r6, r0
 800aed4:	db01      	blt.n	800aeda <_malloc_r+0x1a>
 800aed6:	42a9      	cmp	r1, r5
 800aed8:	d903      	bls.n	800aee2 <_malloc_r+0x22>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	2000      	movs	r0, #0
 800aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee2:	f000 fdb1 	bl	800ba48 <__malloc_lock>
 800aee6:	4921      	ldr	r1, [pc, #132]	; (800af6c <_malloc_r+0xac>)
 800aee8:	680a      	ldr	r2, [r1, #0]
 800aeea:	4614      	mov	r4, r2
 800aeec:	b99c      	cbnz	r4, 800af16 <_malloc_r+0x56>
 800aeee:	4f20      	ldr	r7, [pc, #128]	; (800af70 <_malloc_r+0xb0>)
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	b923      	cbnz	r3, 800aefe <_malloc_r+0x3e>
 800aef4:	4621      	mov	r1, r4
 800aef6:	4630      	mov	r0, r6
 800aef8:	f000 fb2a 	bl	800b550 <_sbrk_r>
 800aefc:	6038      	str	r0, [r7, #0]
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f000 fb25 	bl	800b550 <_sbrk_r>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d123      	bne.n	800af52 <_malloc_r+0x92>
 800af0a:	230c      	movs	r3, #12
 800af0c:	4630      	mov	r0, r6
 800af0e:	6033      	str	r3, [r6, #0]
 800af10:	f000 fda0 	bl	800ba54 <__malloc_unlock>
 800af14:	e7e3      	b.n	800aede <_malloc_r+0x1e>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	1b5b      	subs	r3, r3, r5
 800af1a:	d417      	bmi.n	800af4c <_malloc_r+0x8c>
 800af1c:	2b0b      	cmp	r3, #11
 800af1e:	d903      	bls.n	800af28 <_malloc_r+0x68>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	441c      	add	r4, r3
 800af24:	6025      	str	r5, [r4, #0]
 800af26:	e004      	b.n	800af32 <_malloc_r+0x72>
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	42a2      	cmp	r2, r4
 800af2c:	bf0c      	ite	eq
 800af2e:	600b      	streq	r3, [r1, #0]
 800af30:	6053      	strne	r3, [r2, #4]
 800af32:	4630      	mov	r0, r6
 800af34:	f000 fd8e 	bl	800ba54 <__malloc_unlock>
 800af38:	f104 000b 	add.w	r0, r4, #11
 800af3c:	1d23      	adds	r3, r4, #4
 800af3e:	f020 0007 	bic.w	r0, r0, #7
 800af42:	1ac2      	subs	r2, r0, r3
 800af44:	d0cc      	beq.n	800aee0 <_malloc_r+0x20>
 800af46:	1a1b      	subs	r3, r3, r0
 800af48:	50a3      	str	r3, [r4, r2]
 800af4a:	e7c9      	b.n	800aee0 <_malloc_r+0x20>
 800af4c:	4622      	mov	r2, r4
 800af4e:	6864      	ldr	r4, [r4, #4]
 800af50:	e7cc      	b.n	800aeec <_malloc_r+0x2c>
 800af52:	1cc4      	adds	r4, r0, #3
 800af54:	f024 0403 	bic.w	r4, r4, #3
 800af58:	42a0      	cmp	r0, r4
 800af5a:	d0e3      	beq.n	800af24 <_malloc_r+0x64>
 800af5c:	1a21      	subs	r1, r4, r0
 800af5e:	4630      	mov	r0, r6
 800af60:	f000 faf6 	bl	800b550 <_sbrk_r>
 800af64:	3001      	adds	r0, #1
 800af66:	d1dd      	bne.n	800af24 <_malloc_r+0x64>
 800af68:	e7cf      	b.n	800af0a <_malloc_r+0x4a>
 800af6a:	bf00      	nop
 800af6c:	20000480 	.word	0x20000480
 800af70:	20000484 	.word	0x20000484

0800af74 <__sfputc_r>:
 800af74:	6893      	ldr	r3, [r2, #8]
 800af76:	b410      	push	{r4}
 800af78:	3b01      	subs	r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	6093      	str	r3, [r2, #8]
 800af7e:	da07      	bge.n	800af90 <__sfputc_r+0x1c>
 800af80:	6994      	ldr	r4, [r2, #24]
 800af82:	42a3      	cmp	r3, r4
 800af84:	db01      	blt.n	800af8a <__sfputc_r+0x16>
 800af86:	290a      	cmp	r1, #10
 800af88:	d102      	bne.n	800af90 <__sfputc_r+0x1c>
 800af8a:	bc10      	pop	{r4}
 800af8c:	f000 bb34 	b.w	800b5f8 <__swbuf_r>
 800af90:	6813      	ldr	r3, [r2, #0]
 800af92:	1c58      	adds	r0, r3, #1
 800af94:	6010      	str	r0, [r2, #0]
 800af96:	7019      	strb	r1, [r3, #0]
 800af98:	4608      	mov	r0, r1
 800af9a:	bc10      	pop	{r4}
 800af9c:	4770      	bx	lr

0800af9e <__sfputs_r>:
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4606      	mov	r6, r0
 800afa2:	460f      	mov	r7, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	18d5      	adds	r5, r2, r3
 800afa8:	42ac      	cmp	r4, r5
 800afaa:	d101      	bne.n	800afb0 <__sfputs_r+0x12>
 800afac:	2000      	movs	r0, #0
 800afae:	e007      	b.n	800afc0 <__sfputs_r+0x22>
 800afb0:	463a      	mov	r2, r7
 800afb2:	4630      	mov	r0, r6
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	f7ff ffdc 	bl	800af74 <__sfputc_r>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d1f3      	bne.n	800afa8 <__sfputs_r+0xa>
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afc4 <_vfiprintf_r>:
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	460d      	mov	r5, r1
 800afca:	4614      	mov	r4, r2
 800afcc:	4698      	mov	r8, r3
 800afce:	4606      	mov	r6, r0
 800afd0:	b09d      	sub	sp, #116	; 0x74
 800afd2:	b118      	cbz	r0, 800afdc <_vfiprintf_r+0x18>
 800afd4:	6983      	ldr	r3, [r0, #24]
 800afd6:	b90b      	cbnz	r3, 800afdc <_vfiprintf_r+0x18>
 800afd8:	f7ff fed2 	bl	800ad80 <__sinit>
 800afdc:	4b89      	ldr	r3, [pc, #548]	; (800b204 <_vfiprintf_r+0x240>)
 800afde:	429d      	cmp	r5, r3
 800afe0:	d11b      	bne.n	800b01a <_vfiprintf_r+0x56>
 800afe2:	6875      	ldr	r5, [r6, #4]
 800afe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800aff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff2:	f7ff ff63 	bl	800aebc <__retarget_lock_acquire_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	071b      	lsls	r3, r3, #28
 800affa:	d501      	bpl.n	800b000 <_vfiprintf_r+0x3c>
 800affc:	692b      	ldr	r3, [r5, #16]
 800affe:	b9eb      	cbnz	r3, 800b03c <_vfiprintf_r+0x78>
 800b000:	4629      	mov	r1, r5
 800b002:	4630      	mov	r0, r6
 800b004:	f000 fb5c 	bl	800b6c0 <__swsetup_r>
 800b008:	b1c0      	cbz	r0, 800b03c <_vfiprintf_r+0x78>
 800b00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b00c:	07dc      	lsls	r4, r3, #31
 800b00e:	d50e      	bpl.n	800b02e <_vfiprintf_r+0x6a>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	b01d      	add	sp, #116	; 0x74
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	4b7b      	ldr	r3, [pc, #492]	; (800b208 <_vfiprintf_r+0x244>)
 800b01c:	429d      	cmp	r5, r3
 800b01e:	d101      	bne.n	800b024 <_vfiprintf_r+0x60>
 800b020:	68b5      	ldr	r5, [r6, #8]
 800b022:	e7df      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b024:	4b79      	ldr	r3, [pc, #484]	; (800b20c <_vfiprintf_r+0x248>)
 800b026:	429d      	cmp	r5, r3
 800b028:	bf08      	it	eq
 800b02a:	68f5      	ldreq	r5, [r6, #12]
 800b02c:	e7da      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	0598      	lsls	r0, r3, #22
 800b032:	d4ed      	bmi.n	800b010 <_vfiprintf_r+0x4c>
 800b034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b036:	f7ff ff42 	bl	800aebe <__retarget_lock_release_recursive>
 800b03a:	e7e9      	b.n	800b010 <_vfiprintf_r+0x4c>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	2320      	movs	r3, #32
 800b042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b046:	2330      	movs	r3, #48	; 0x30
 800b048:	f04f 0901 	mov.w	r9, #1
 800b04c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b050:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b210 <_vfiprintf_r+0x24c>
 800b054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b058:	4623      	mov	r3, r4
 800b05a:	469a      	mov	sl, r3
 800b05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b060:	b10a      	cbz	r2, 800b066 <_vfiprintf_r+0xa2>
 800b062:	2a25      	cmp	r2, #37	; 0x25
 800b064:	d1f9      	bne.n	800b05a <_vfiprintf_r+0x96>
 800b066:	ebba 0b04 	subs.w	fp, sl, r4
 800b06a:	d00b      	beq.n	800b084 <_vfiprintf_r+0xc0>
 800b06c:	465b      	mov	r3, fp
 800b06e:	4622      	mov	r2, r4
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff93 	bl	800af9e <__sfputs_r>
 800b078:	3001      	adds	r0, #1
 800b07a:	f000 80aa 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	445a      	add	r2, fp
 800b082:	9209      	str	r2, [sp, #36]	; 0x24
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80a2 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b08e:	2300      	movs	r3, #0
 800b090:	f04f 32ff 	mov.w	r2, #4294967295
 800b094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b098:	f10a 0a01 	add.w	sl, sl, #1
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	9307      	str	r3, [sp, #28]
 800b0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a6:	4654      	mov	r4, sl
 800b0a8:	2205      	movs	r2, #5
 800b0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ae:	4858      	ldr	r0, [pc, #352]	; (800b210 <_vfiprintf_r+0x24c>)
 800b0b0:	f000 fcbc 	bl	800ba2c <memchr>
 800b0b4:	9a04      	ldr	r2, [sp, #16]
 800b0b6:	b9d8      	cbnz	r0, 800b0f0 <_vfiprintf_r+0x12c>
 800b0b8:	06d1      	lsls	r1, r2, #27
 800b0ba:	bf44      	itt	mi
 800b0bc:	2320      	movmi	r3, #32
 800b0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c2:	0713      	lsls	r3, r2, #28
 800b0c4:	bf44      	itt	mi
 800b0c6:	232b      	movmi	r3, #43	; 0x2b
 800b0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d2:	d015      	beq.n	800b100 <_vfiprintf_r+0x13c>
 800b0d4:	4654      	mov	r4, sl
 800b0d6:	2000      	movs	r0, #0
 800b0d8:	f04f 0c0a 	mov.w	ip, #10
 800b0dc:	9a07      	ldr	r2, [sp, #28]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	; 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94e      	bls.n	800b188 <_vfiprintf_r+0x1c4>
 800b0ea:	b1b0      	cbz	r0, 800b11a <_vfiprintf_r+0x156>
 800b0ec:	9207      	str	r2, [sp, #28]
 800b0ee:	e014      	b.n	800b11a <_vfiprintf_r+0x156>
 800b0f0:	eba0 0308 	sub.w	r3, r0, r8
 800b0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	46a2      	mov	sl, r4
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	e7d2      	b.n	800b0a6 <_vfiprintf_r+0xe2>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d19      	adds	r1, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfbb      	ittet	lt
 800b10c:	425b      	neglt	r3, r3
 800b10e:	f042 0202 	orrlt.w	r2, r2, #2
 800b112:	9307      	strge	r3, [sp, #28]
 800b114:	9307      	strlt	r3, [sp, #28]
 800b116:	bfb8      	it	lt
 800b118:	9204      	strlt	r2, [sp, #16]
 800b11a:	7823      	ldrb	r3, [r4, #0]
 800b11c:	2b2e      	cmp	r3, #46	; 0x2e
 800b11e:	d10c      	bne.n	800b13a <_vfiprintf_r+0x176>
 800b120:	7863      	ldrb	r3, [r4, #1]
 800b122:	2b2a      	cmp	r3, #42	; 0x2a
 800b124:	d135      	bne.n	800b192 <_vfiprintf_r+0x1ce>
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	3402      	adds	r4, #2
 800b12a:	1d1a      	adds	r2, r3, #4
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	9203      	str	r2, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfb8      	it	lt
 800b134:	f04f 33ff 	movlt.w	r3, #4294967295
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b220 <_vfiprintf_r+0x25c>
 800b13e:	2203      	movs	r2, #3
 800b140:	4650      	mov	r0, sl
 800b142:	7821      	ldrb	r1, [r4, #0]
 800b144:	f000 fc72 	bl	800ba2c <memchr>
 800b148:	b140      	cbz	r0, 800b15c <_vfiprintf_r+0x198>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	eba0 000a 	sub.w	r0, r0, sl
 800b150:	fa03 f000 	lsl.w	r0, r3, r0
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	3401      	adds	r4, #1
 800b158:	4303      	orrs	r3, r0
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	2206      	movs	r2, #6
 800b162:	482c      	ldr	r0, [pc, #176]	; (800b214 <_vfiprintf_r+0x250>)
 800b164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b168:	f000 fc60 	bl	800ba2c <memchr>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d03f      	beq.n	800b1f0 <_vfiprintf_r+0x22c>
 800b170:	4b29      	ldr	r3, [pc, #164]	; (800b218 <_vfiprintf_r+0x254>)
 800b172:	bb1b      	cbnz	r3, 800b1bc <_vfiprintf_r+0x1f8>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	3308      	adds	r3, #8
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b182:	443b      	add	r3, r7
 800b184:	9309      	str	r3, [sp, #36]	; 0x24
 800b186:	e767      	b.n	800b058 <_vfiprintf_r+0x94>
 800b188:	460c      	mov	r4, r1
 800b18a:	2001      	movs	r0, #1
 800b18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b190:	e7a5      	b.n	800b0de <_vfiprintf_r+0x11a>
 800b192:	2300      	movs	r3, #0
 800b194:	f04f 0c0a 	mov.w	ip, #10
 800b198:	4619      	mov	r1, r3
 800b19a:	3401      	adds	r4, #1
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a4:	3a30      	subs	r2, #48	; 0x30
 800b1a6:	2a09      	cmp	r2, #9
 800b1a8:	d903      	bls.n	800b1b2 <_vfiprintf_r+0x1ee>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c5      	beq.n	800b13a <_vfiprintf_r+0x176>
 800b1ae:	9105      	str	r1, [sp, #20]
 800b1b0:	e7c3      	b.n	800b13a <_vfiprintf_r+0x176>
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ba:	e7f0      	b.n	800b19e <_vfiprintf_r+0x1da>
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	4b15      	ldr	r3, [pc, #84]	; (800b21c <_vfiprintf_r+0x258>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	f3af 8000 	nop.w
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	1c78      	adds	r0, r7, #1
 800b1d0:	d1d6      	bne.n	800b180 <_vfiprintf_r+0x1bc>
 800b1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d4:	07d9      	lsls	r1, r3, #31
 800b1d6:	d405      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1d8:	89ab      	ldrh	r3, [r5, #12]
 800b1da:	059a      	lsls	r2, r3, #22
 800b1dc:	d402      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1e0:	f7ff fe6d 	bl	800aebe <__retarget_lock_release_recursive>
 800b1e4:	89ab      	ldrh	r3, [r5, #12]
 800b1e6:	065b      	lsls	r3, r3, #25
 800b1e8:	f53f af12 	bmi.w	800b010 <_vfiprintf_r+0x4c>
 800b1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ee:	e711      	b.n	800b014 <_vfiprintf_r+0x50>
 800b1f0:	ab03      	add	r3, sp, #12
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	4b08      	ldr	r3, [pc, #32]	; (800b21c <_vfiprintf_r+0x258>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	f000 f882 	bl	800b304 <_printf_i>
 800b200:	e7e4      	b.n	800b1cc <_vfiprintf_r+0x208>
 800b202:	bf00      	nop
 800b204:	0800bd78 	.word	0x0800bd78
 800b208:	0800bd98 	.word	0x0800bd98
 800b20c:	0800bd58 	.word	0x0800bd58
 800b210:	0800bdb8 	.word	0x0800bdb8
 800b214:	0800bdc2 	.word	0x0800bdc2
 800b218:	00000000 	.word	0x00000000
 800b21c:	0800af9f 	.word	0x0800af9f
 800b220:	0800bdbe 	.word	0x0800bdbe

0800b224 <_printf_common>:
 800b224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b228:	4616      	mov	r6, r2
 800b22a:	4699      	mov	r9, r3
 800b22c:	688a      	ldr	r2, [r1, #8]
 800b22e:	690b      	ldr	r3, [r1, #16]
 800b230:	4607      	mov	r7, r0
 800b232:	4293      	cmp	r3, r2
 800b234:	bfb8      	it	lt
 800b236:	4613      	movlt	r3, r2
 800b238:	6033      	str	r3, [r6, #0]
 800b23a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b23e:	460c      	mov	r4, r1
 800b240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b244:	b10a      	cbz	r2, 800b24a <_printf_common+0x26>
 800b246:	3301      	adds	r3, #1
 800b248:	6033      	str	r3, [r6, #0]
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	0699      	lsls	r1, r3, #26
 800b24e:	bf42      	ittt	mi
 800b250:	6833      	ldrmi	r3, [r6, #0]
 800b252:	3302      	addmi	r3, #2
 800b254:	6033      	strmi	r3, [r6, #0]
 800b256:	6825      	ldr	r5, [r4, #0]
 800b258:	f015 0506 	ands.w	r5, r5, #6
 800b25c:	d106      	bne.n	800b26c <_printf_common+0x48>
 800b25e:	f104 0a19 	add.w	sl, r4, #25
 800b262:	68e3      	ldr	r3, [r4, #12]
 800b264:	6832      	ldr	r2, [r6, #0]
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	42ab      	cmp	r3, r5
 800b26a:	dc28      	bgt.n	800b2be <_printf_common+0x9a>
 800b26c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b270:	1e13      	subs	r3, r2, #0
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	bf18      	it	ne
 800b276:	2301      	movne	r3, #1
 800b278:	0692      	lsls	r2, r2, #26
 800b27a:	d42d      	bmi.n	800b2d8 <_printf_common+0xb4>
 800b27c:	4649      	mov	r1, r9
 800b27e:	4638      	mov	r0, r7
 800b280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b284:	47c0      	blx	r8
 800b286:	3001      	adds	r0, #1
 800b288:	d020      	beq.n	800b2cc <_printf_common+0xa8>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	68e5      	ldr	r5, [r4, #12]
 800b28e:	f003 0306 	and.w	r3, r3, #6
 800b292:	2b04      	cmp	r3, #4
 800b294:	bf18      	it	ne
 800b296:	2500      	movne	r5, #0
 800b298:	6832      	ldr	r2, [r6, #0]
 800b29a:	f04f 0600 	mov.w	r6, #0
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	bf08      	it	eq
 800b2a2:	1aad      	subeq	r5, r5, r2
 800b2a4:	6922      	ldr	r2, [r4, #16]
 800b2a6:	bf08      	it	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bfc4      	itt	gt
 800b2b0:	1a9b      	subgt	r3, r3, r2
 800b2b2:	18ed      	addgt	r5, r5, r3
 800b2b4:	341a      	adds	r4, #26
 800b2b6:	42b5      	cmp	r5, r6
 800b2b8:	d11a      	bne.n	800b2f0 <_printf_common+0xcc>
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	e008      	b.n	800b2d0 <_printf_common+0xac>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	47c0      	blx	r8
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d103      	bne.n	800b2d4 <_printf_common+0xb0>
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	e7c4      	b.n	800b262 <_printf_common+0x3e>
 800b2d8:	2030      	movs	r0, #48	; 0x30
 800b2da:	18e1      	adds	r1, r4, r3
 800b2dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2e6:	4422      	add	r2, r4
 800b2e8:	3302      	adds	r3, #2
 800b2ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2ee:	e7c5      	b.n	800b27c <_printf_common+0x58>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	4622      	mov	r2, r4
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	47c0      	blx	r8
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d0e6      	beq.n	800b2cc <_printf_common+0xa8>
 800b2fe:	3601      	adds	r6, #1
 800b300:	e7d9      	b.n	800b2b6 <_printf_common+0x92>
	...

0800b304 <_printf_i>:
 800b304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b308:	460c      	mov	r4, r1
 800b30a:	7e27      	ldrb	r7, [r4, #24]
 800b30c:	4691      	mov	r9, r2
 800b30e:	2f78      	cmp	r7, #120	; 0x78
 800b310:	4680      	mov	r8, r0
 800b312:	469a      	mov	sl, r3
 800b314:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b31a:	d807      	bhi.n	800b32c <_printf_i+0x28>
 800b31c:	2f62      	cmp	r7, #98	; 0x62
 800b31e:	d80a      	bhi.n	800b336 <_printf_i+0x32>
 800b320:	2f00      	cmp	r7, #0
 800b322:	f000 80d9 	beq.w	800b4d8 <_printf_i+0x1d4>
 800b326:	2f58      	cmp	r7, #88	; 0x58
 800b328:	f000 80a4 	beq.w	800b474 <_printf_i+0x170>
 800b32c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b334:	e03a      	b.n	800b3ac <_printf_i+0xa8>
 800b336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b33a:	2b15      	cmp	r3, #21
 800b33c:	d8f6      	bhi.n	800b32c <_printf_i+0x28>
 800b33e:	a001      	add	r0, pc, #4	; (adr r0, 800b344 <_printf_i+0x40>)
 800b340:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b344:	0800b39d 	.word	0x0800b39d
 800b348:	0800b3b1 	.word	0x0800b3b1
 800b34c:	0800b32d 	.word	0x0800b32d
 800b350:	0800b32d 	.word	0x0800b32d
 800b354:	0800b32d 	.word	0x0800b32d
 800b358:	0800b32d 	.word	0x0800b32d
 800b35c:	0800b3b1 	.word	0x0800b3b1
 800b360:	0800b32d 	.word	0x0800b32d
 800b364:	0800b32d 	.word	0x0800b32d
 800b368:	0800b32d 	.word	0x0800b32d
 800b36c:	0800b32d 	.word	0x0800b32d
 800b370:	0800b4bf 	.word	0x0800b4bf
 800b374:	0800b3e1 	.word	0x0800b3e1
 800b378:	0800b4a1 	.word	0x0800b4a1
 800b37c:	0800b32d 	.word	0x0800b32d
 800b380:	0800b32d 	.word	0x0800b32d
 800b384:	0800b4e1 	.word	0x0800b4e1
 800b388:	0800b32d 	.word	0x0800b32d
 800b38c:	0800b3e1 	.word	0x0800b3e1
 800b390:	0800b32d 	.word	0x0800b32d
 800b394:	0800b32d 	.word	0x0800b32d
 800b398:	0800b4a9 	.word	0x0800b4a9
 800b39c:	680b      	ldr	r3, [r1, #0]
 800b39e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b3a2:	1d1a      	adds	r2, r3, #4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	600a      	str	r2, [r1, #0]
 800b3a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e0a4      	b.n	800b4fa <_printf_i+0x1f6>
 800b3b0:	6825      	ldr	r5, [r4, #0]
 800b3b2:	6808      	ldr	r0, [r1, #0]
 800b3b4:	062e      	lsls	r6, r5, #24
 800b3b6:	f100 0304 	add.w	r3, r0, #4
 800b3ba:	d50a      	bpl.n	800b3d2 <_printf_i+0xce>
 800b3bc:	6805      	ldr	r5, [r0, #0]
 800b3be:	600b      	str	r3, [r1, #0]
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	da03      	bge.n	800b3cc <_printf_i+0xc8>
 800b3c4:	232d      	movs	r3, #45	; 0x2d
 800b3c6:	426d      	negs	r5, r5
 800b3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3cc:	230a      	movs	r3, #10
 800b3ce:	485e      	ldr	r0, [pc, #376]	; (800b548 <_printf_i+0x244>)
 800b3d0:	e019      	b.n	800b406 <_printf_i+0x102>
 800b3d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b3d6:	6805      	ldr	r5, [r0, #0]
 800b3d8:	600b      	str	r3, [r1, #0]
 800b3da:	bf18      	it	ne
 800b3dc:	b22d      	sxthne	r5, r5
 800b3de:	e7ef      	b.n	800b3c0 <_printf_i+0xbc>
 800b3e0:	680b      	ldr	r3, [r1, #0]
 800b3e2:	6825      	ldr	r5, [r4, #0]
 800b3e4:	1d18      	adds	r0, r3, #4
 800b3e6:	6008      	str	r0, [r1, #0]
 800b3e8:	0628      	lsls	r0, r5, #24
 800b3ea:	d501      	bpl.n	800b3f0 <_printf_i+0xec>
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	e002      	b.n	800b3f6 <_printf_i+0xf2>
 800b3f0:	0669      	lsls	r1, r5, #25
 800b3f2:	d5fb      	bpl.n	800b3ec <_printf_i+0xe8>
 800b3f4:	881d      	ldrh	r5, [r3, #0]
 800b3f6:	2f6f      	cmp	r7, #111	; 0x6f
 800b3f8:	bf0c      	ite	eq
 800b3fa:	2308      	moveq	r3, #8
 800b3fc:	230a      	movne	r3, #10
 800b3fe:	4852      	ldr	r0, [pc, #328]	; (800b548 <_printf_i+0x244>)
 800b400:	2100      	movs	r1, #0
 800b402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b406:	6866      	ldr	r6, [r4, #4]
 800b408:	2e00      	cmp	r6, #0
 800b40a:	bfa8      	it	ge
 800b40c:	6821      	ldrge	r1, [r4, #0]
 800b40e:	60a6      	str	r6, [r4, #8]
 800b410:	bfa4      	itt	ge
 800b412:	f021 0104 	bicge.w	r1, r1, #4
 800b416:	6021      	strge	r1, [r4, #0]
 800b418:	b90d      	cbnz	r5, 800b41e <_printf_i+0x11a>
 800b41a:	2e00      	cmp	r6, #0
 800b41c:	d04d      	beq.n	800b4ba <_printf_i+0x1b6>
 800b41e:	4616      	mov	r6, r2
 800b420:	fbb5 f1f3 	udiv	r1, r5, r3
 800b424:	fb03 5711 	mls	r7, r3, r1, r5
 800b428:	5dc7      	ldrb	r7, [r0, r7]
 800b42a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b42e:	462f      	mov	r7, r5
 800b430:	42bb      	cmp	r3, r7
 800b432:	460d      	mov	r5, r1
 800b434:	d9f4      	bls.n	800b420 <_printf_i+0x11c>
 800b436:	2b08      	cmp	r3, #8
 800b438:	d10b      	bne.n	800b452 <_printf_i+0x14e>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	07df      	lsls	r7, r3, #31
 800b43e:	d508      	bpl.n	800b452 <_printf_i+0x14e>
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	6861      	ldr	r1, [r4, #4]
 800b444:	4299      	cmp	r1, r3
 800b446:	bfde      	ittt	le
 800b448:	2330      	movle	r3, #48	; 0x30
 800b44a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b44e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b452:	1b92      	subs	r2, r2, r6
 800b454:	6122      	str	r2, [r4, #16]
 800b456:	464b      	mov	r3, r9
 800b458:	4621      	mov	r1, r4
 800b45a:	4640      	mov	r0, r8
 800b45c:	f8cd a000 	str.w	sl, [sp]
 800b460:	aa03      	add	r2, sp, #12
 800b462:	f7ff fedf 	bl	800b224 <_printf_common>
 800b466:	3001      	adds	r0, #1
 800b468:	d14c      	bne.n	800b504 <_printf_i+0x200>
 800b46a:	f04f 30ff 	mov.w	r0, #4294967295
 800b46e:	b004      	add	sp, #16
 800b470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b474:	4834      	ldr	r0, [pc, #208]	; (800b548 <_printf_i+0x244>)
 800b476:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b47a:	680e      	ldr	r6, [r1, #0]
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b482:	061f      	lsls	r7, r3, #24
 800b484:	600e      	str	r6, [r1, #0]
 800b486:	d514      	bpl.n	800b4b2 <_printf_i+0x1ae>
 800b488:	07d9      	lsls	r1, r3, #31
 800b48a:	bf44      	itt	mi
 800b48c:	f043 0320 	orrmi.w	r3, r3, #32
 800b490:	6023      	strmi	r3, [r4, #0]
 800b492:	b91d      	cbnz	r5, 800b49c <_printf_i+0x198>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	f023 0320 	bic.w	r3, r3, #32
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	2310      	movs	r3, #16
 800b49e:	e7af      	b.n	800b400 <_printf_i+0xfc>
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	f043 0320 	orr.w	r3, r3, #32
 800b4a6:	6023      	str	r3, [r4, #0]
 800b4a8:	2378      	movs	r3, #120	; 0x78
 800b4aa:	4828      	ldr	r0, [pc, #160]	; (800b54c <_printf_i+0x248>)
 800b4ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4b0:	e7e3      	b.n	800b47a <_printf_i+0x176>
 800b4b2:	065e      	lsls	r6, r3, #25
 800b4b4:	bf48      	it	mi
 800b4b6:	b2ad      	uxthmi	r5, r5
 800b4b8:	e7e6      	b.n	800b488 <_printf_i+0x184>
 800b4ba:	4616      	mov	r6, r2
 800b4bc:	e7bb      	b.n	800b436 <_printf_i+0x132>
 800b4be:	680b      	ldr	r3, [r1, #0]
 800b4c0:	6826      	ldr	r6, [r4, #0]
 800b4c2:	1d1d      	adds	r5, r3, #4
 800b4c4:	6960      	ldr	r0, [r4, #20]
 800b4c6:	600d      	str	r5, [r1, #0]
 800b4c8:	0635      	lsls	r5, r6, #24
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	d501      	bpl.n	800b4d2 <_printf_i+0x1ce>
 800b4ce:	6018      	str	r0, [r3, #0]
 800b4d0:	e002      	b.n	800b4d8 <_printf_i+0x1d4>
 800b4d2:	0671      	lsls	r1, r6, #25
 800b4d4:	d5fb      	bpl.n	800b4ce <_printf_i+0x1ca>
 800b4d6:	8018      	strh	r0, [r3, #0]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4616      	mov	r6, r2
 800b4dc:	6123      	str	r3, [r4, #16]
 800b4de:	e7ba      	b.n	800b456 <_printf_i+0x152>
 800b4e0:	680b      	ldr	r3, [r1, #0]
 800b4e2:	1d1a      	adds	r2, r3, #4
 800b4e4:	600a      	str	r2, [r1, #0]
 800b4e6:	681e      	ldr	r6, [r3, #0]
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	6862      	ldr	r2, [r4, #4]
 800b4ee:	f000 fa9d 	bl	800ba2c <memchr>
 800b4f2:	b108      	cbz	r0, 800b4f8 <_printf_i+0x1f4>
 800b4f4:	1b80      	subs	r0, r0, r6
 800b4f6:	6060      	str	r0, [r4, #4]
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	6123      	str	r3, [r4, #16]
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b502:	e7a8      	b.n	800b456 <_printf_i+0x152>
 800b504:	4632      	mov	r2, r6
 800b506:	4649      	mov	r1, r9
 800b508:	4640      	mov	r0, r8
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	47d0      	blx	sl
 800b50e:	3001      	adds	r0, #1
 800b510:	d0ab      	beq.n	800b46a <_printf_i+0x166>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	079b      	lsls	r3, r3, #30
 800b516:	d413      	bmi.n	800b540 <_printf_i+0x23c>
 800b518:	68e0      	ldr	r0, [r4, #12]
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	4298      	cmp	r0, r3
 800b51e:	bfb8      	it	lt
 800b520:	4618      	movlt	r0, r3
 800b522:	e7a4      	b.n	800b46e <_printf_i+0x16a>
 800b524:	2301      	movs	r3, #1
 800b526:	4632      	mov	r2, r6
 800b528:	4649      	mov	r1, r9
 800b52a:	4640      	mov	r0, r8
 800b52c:	47d0      	blx	sl
 800b52e:	3001      	adds	r0, #1
 800b530:	d09b      	beq.n	800b46a <_printf_i+0x166>
 800b532:	3501      	adds	r5, #1
 800b534:	68e3      	ldr	r3, [r4, #12]
 800b536:	9903      	ldr	r1, [sp, #12]
 800b538:	1a5b      	subs	r3, r3, r1
 800b53a:	42ab      	cmp	r3, r5
 800b53c:	dcf2      	bgt.n	800b524 <_printf_i+0x220>
 800b53e:	e7eb      	b.n	800b518 <_printf_i+0x214>
 800b540:	2500      	movs	r5, #0
 800b542:	f104 0619 	add.w	r6, r4, #25
 800b546:	e7f5      	b.n	800b534 <_printf_i+0x230>
 800b548:	0800bdc9 	.word	0x0800bdc9
 800b54c:	0800bdda 	.word	0x0800bdda

0800b550 <_sbrk_r>:
 800b550:	b538      	push	{r3, r4, r5, lr}
 800b552:	2300      	movs	r3, #0
 800b554:	4d05      	ldr	r5, [pc, #20]	; (800b56c <_sbrk_r+0x1c>)
 800b556:	4604      	mov	r4, r0
 800b558:	4608      	mov	r0, r1
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	f7f6 fc30 	bl	8001dc0 <_sbrk>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_sbrk_r+0x1a>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_sbrk_r+0x1a>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	20001944 	.word	0x20001944

0800b570 <__sread>:
 800b570:	b510      	push	{r4, lr}
 800b572:	460c      	mov	r4, r1
 800b574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b578:	f000 fabe 	bl	800baf8 <_read_r>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	bfab      	itete	ge
 800b580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b582:	89a3      	ldrhlt	r3, [r4, #12]
 800b584:	181b      	addge	r3, r3, r0
 800b586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b58a:	bfac      	ite	ge
 800b58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b58e:	81a3      	strhlt	r3, [r4, #12]
 800b590:	bd10      	pop	{r4, pc}

0800b592 <__swrite>:
 800b592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b596:	461f      	mov	r7, r3
 800b598:	898b      	ldrh	r3, [r1, #12]
 800b59a:	4605      	mov	r5, r0
 800b59c:	05db      	lsls	r3, r3, #23
 800b59e:	460c      	mov	r4, r1
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	d505      	bpl.n	800b5b0 <__swrite+0x1e>
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ac:	f000 f9c8 	bl	800b940 <_lseek_r>
 800b5b0:	89a3      	ldrh	r3, [r4, #12]
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	463b      	mov	r3, r7
 800b5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c6:	f000 b869 	b.w	800b69c <_write_r>

0800b5ca <__sseek>:
 800b5ca:	b510      	push	{r4, lr}
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d2:	f000 f9b5 	bl	800b940 <_lseek_r>
 800b5d6:	1c43      	adds	r3, r0, #1
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	bf15      	itete	ne
 800b5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5e6:	81a3      	strheq	r3, [r4, #12]
 800b5e8:	bf18      	it	ne
 800b5ea:	81a3      	strhne	r3, [r4, #12]
 800b5ec:	bd10      	pop	{r4, pc}

0800b5ee <__sclose>:
 800b5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f2:	f000 b8d3 	b.w	800b79c <_close_r>
	...

0800b5f8 <__swbuf_r>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	460e      	mov	r6, r1
 800b5fc:	4614      	mov	r4, r2
 800b5fe:	4605      	mov	r5, r0
 800b600:	b118      	cbz	r0, 800b60a <__swbuf_r+0x12>
 800b602:	6983      	ldr	r3, [r0, #24]
 800b604:	b90b      	cbnz	r3, 800b60a <__swbuf_r+0x12>
 800b606:	f7ff fbbb 	bl	800ad80 <__sinit>
 800b60a:	4b21      	ldr	r3, [pc, #132]	; (800b690 <__swbuf_r+0x98>)
 800b60c:	429c      	cmp	r4, r3
 800b60e:	d12b      	bne.n	800b668 <__swbuf_r+0x70>
 800b610:	686c      	ldr	r4, [r5, #4]
 800b612:	69a3      	ldr	r3, [r4, #24]
 800b614:	60a3      	str	r3, [r4, #8]
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	071a      	lsls	r2, r3, #28
 800b61a:	d52f      	bpl.n	800b67c <__swbuf_r+0x84>
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	b36b      	cbz	r3, 800b67c <__swbuf_r+0x84>
 800b620:	6923      	ldr	r3, [r4, #16]
 800b622:	6820      	ldr	r0, [r4, #0]
 800b624:	b2f6      	uxtb	r6, r6
 800b626:	1ac0      	subs	r0, r0, r3
 800b628:	6963      	ldr	r3, [r4, #20]
 800b62a:	4637      	mov	r7, r6
 800b62c:	4283      	cmp	r3, r0
 800b62e:	dc04      	bgt.n	800b63a <__swbuf_r+0x42>
 800b630:	4621      	mov	r1, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f948 	bl	800b8c8 <_fflush_r>
 800b638:	bb30      	cbnz	r0, 800b688 <__swbuf_r+0x90>
 800b63a:	68a3      	ldr	r3, [r4, #8]
 800b63c:	3001      	adds	r0, #1
 800b63e:	3b01      	subs	r3, #1
 800b640:	60a3      	str	r3, [r4, #8]
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	6022      	str	r2, [r4, #0]
 800b648:	701e      	strb	r6, [r3, #0]
 800b64a:	6963      	ldr	r3, [r4, #20]
 800b64c:	4283      	cmp	r3, r0
 800b64e:	d004      	beq.n	800b65a <__swbuf_r+0x62>
 800b650:	89a3      	ldrh	r3, [r4, #12]
 800b652:	07db      	lsls	r3, r3, #31
 800b654:	d506      	bpl.n	800b664 <__swbuf_r+0x6c>
 800b656:	2e0a      	cmp	r6, #10
 800b658:	d104      	bne.n	800b664 <__swbuf_r+0x6c>
 800b65a:	4621      	mov	r1, r4
 800b65c:	4628      	mov	r0, r5
 800b65e:	f000 f933 	bl	800b8c8 <_fflush_r>
 800b662:	b988      	cbnz	r0, 800b688 <__swbuf_r+0x90>
 800b664:	4638      	mov	r0, r7
 800b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b668:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <__swbuf_r+0x9c>)
 800b66a:	429c      	cmp	r4, r3
 800b66c:	d101      	bne.n	800b672 <__swbuf_r+0x7a>
 800b66e:	68ac      	ldr	r4, [r5, #8]
 800b670:	e7cf      	b.n	800b612 <__swbuf_r+0x1a>
 800b672:	4b09      	ldr	r3, [pc, #36]	; (800b698 <__swbuf_r+0xa0>)
 800b674:	429c      	cmp	r4, r3
 800b676:	bf08      	it	eq
 800b678:	68ec      	ldreq	r4, [r5, #12]
 800b67a:	e7ca      	b.n	800b612 <__swbuf_r+0x1a>
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	f000 f81e 	bl	800b6c0 <__swsetup_r>
 800b684:	2800      	cmp	r0, #0
 800b686:	d0cb      	beq.n	800b620 <__swbuf_r+0x28>
 800b688:	f04f 37ff 	mov.w	r7, #4294967295
 800b68c:	e7ea      	b.n	800b664 <__swbuf_r+0x6c>
 800b68e:	bf00      	nop
 800b690:	0800bd78 	.word	0x0800bd78
 800b694:	0800bd98 	.word	0x0800bd98
 800b698:	0800bd58 	.word	0x0800bd58

0800b69c <_write_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4d05      	ldr	r5, [pc, #20]	; (800b6bc <_write_r+0x20>)
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f5 fcb8 	bl	8001020 <_write>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_write_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_write_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20001944 	.word	0x20001944

0800b6c0 <__swsetup_r>:
 800b6c0:	4b32      	ldr	r3, [pc, #200]	; (800b78c <__swsetup_r+0xcc>)
 800b6c2:	b570      	push	{r4, r5, r6, lr}
 800b6c4:	681d      	ldr	r5, [r3, #0]
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	b125      	cbz	r5, 800b6d6 <__swsetup_r+0x16>
 800b6cc:	69ab      	ldr	r3, [r5, #24]
 800b6ce:	b913      	cbnz	r3, 800b6d6 <__swsetup_r+0x16>
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f7ff fb55 	bl	800ad80 <__sinit>
 800b6d6:	4b2e      	ldr	r3, [pc, #184]	; (800b790 <__swsetup_r+0xd0>)
 800b6d8:	429c      	cmp	r4, r3
 800b6da:	d10f      	bne.n	800b6fc <__swsetup_r+0x3c>
 800b6dc:	686c      	ldr	r4, [r5, #4]
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e4:	0719      	lsls	r1, r3, #28
 800b6e6:	d42c      	bmi.n	800b742 <__swsetup_r+0x82>
 800b6e8:	06dd      	lsls	r5, r3, #27
 800b6ea:	d411      	bmi.n	800b710 <__swsetup_r+0x50>
 800b6ec:	2309      	movs	r3, #9
 800b6ee:	6033      	str	r3, [r6, #0]
 800b6f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	e03e      	b.n	800b77a <__swsetup_r+0xba>
 800b6fc:	4b25      	ldr	r3, [pc, #148]	; (800b794 <__swsetup_r+0xd4>)
 800b6fe:	429c      	cmp	r4, r3
 800b700:	d101      	bne.n	800b706 <__swsetup_r+0x46>
 800b702:	68ac      	ldr	r4, [r5, #8]
 800b704:	e7eb      	b.n	800b6de <__swsetup_r+0x1e>
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <__swsetup_r+0xd8>)
 800b708:	429c      	cmp	r4, r3
 800b70a:	bf08      	it	eq
 800b70c:	68ec      	ldreq	r4, [r5, #12]
 800b70e:	e7e6      	b.n	800b6de <__swsetup_r+0x1e>
 800b710:	0758      	lsls	r0, r3, #29
 800b712:	d512      	bpl.n	800b73a <__swsetup_r+0x7a>
 800b714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b716:	b141      	cbz	r1, 800b72a <__swsetup_r+0x6a>
 800b718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b71c:	4299      	cmp	r1, r3
 800b71e:	d002      	beq.n	800b726 <__swsetup_r+0x66>
 800b720:	4630      	mov	r0, r6
 800b722:	f000 f99d 	bl	800ba60 <_free_r>
 800b726:	2300      	movs	r3, #0
 800b728:	6363      	str	r3, [r4, #52]	; 0x34
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	2300      	movs	r3, #0
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	6923      	ldr	r3, [r4, #16]
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	89a3      	ldrh	r3, [r4, #12]
 800b73c:	f043 0308 	orr.w	r3, r3, #8
 800b740:	81a3      	strh	r3, [r4, #12]
 800b742:	6923      	ldr	r3, [r4, #16]
 800b744:	b94b      	cbnz	r3, 800b75a <__swsetup_r+0x9a>
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b750:	d003      	beq.n	800b75a <__swsetup_r+0x9a>
 800b752:	4621      	mov	r1, r4
 800b754:	4630      	mov	r0, r6
 800b756:	f000 f929 	bl	800b9ac <__smakebuf_r>
 800b75a:	89a0      	ldrh	r0, [r4, #12]
 800b75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b760:	f010 0301 	ands.w	r3, r0, #1
 800b764:	d00a      	beq.n	800b77c <__swsetup_r+0xbc>
 800b766:	2300      	movs	r3, #0
 800b768:	60a3      	str	r3, [r4, #8]
 800b76a:	6963      	ldr	r3, [r4, #20]
 800b76c:	425b      	negs	r3, r3
 800b76e:	61a3      	str	r3, [r4, #24]
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	b943      	cbnz	r3, 800b786 <__swsetup_r+0xc6>
 800b774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b778:	d1ba      	bne.n	800b6f0 <__swsetup_r+0x30>
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	0781      	lsls	r1, r0, #30
 800b77e:	bf58      	it	pl
 800b780:	6963      	ldrpl	r3, [r4, #20]
 800b782:	60a3      	str	r3, [r4, #8]
 800b784:	e7f4      	b.n	800b770 <__swsetup_r+0xb0>
 800b786:	2000      	movs	r0, #0
 800b788:	e7f7      	b.n	800b77a <__swsetup_r+0xba>
 800b78a:	bf00      	nop
 800b78c:	200001c0 	.word	0x200001c0
 800b790:	0800bd78 	.word	0x0800bd78
 800b794:	0800bd98 	.word	0x0800bd98
 800b798:	0800bd58 	.word	0x0800bd58

0800b79c <_close_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4d05      	ldr	r5, [pc, #20]	; (800b7b8 <_close_r+0x1c>)
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f6 fad9 	bl	8001d5e <_close>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_close_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_close_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	20001944 	.word	0x20001944

0800b7bc <__sflush_r>:
 800b7bc:	898a      	ldrh	r2, [r1, #12]
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	0710      	lsls	r0, r2, #28
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	d458      	bmi.n	800b87c <__sflush_r+0xc0>
 800b7ca:	684b      	ldr	r3, [r1, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	dc05      	bgt.n	800b7dc <__sflush_r+0x20>
 800b7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	dc02      	bgt.n	800b7dc <__sflush_r+0x20>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7de:	2e00      	cmp	r6, #0
 800b7e0:	d0f9      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b7e8:	682f      	ldr	r7, [r5, #0]
 800b7ea:	602b      	str	r3, [r5, #0]
 800b7ec:	d032      	beq.n	800b854 <__sflush_r+0x98>
 800b7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	075a      	lsls	r2, r3, #29
 800b7f4:	d505      	bpl.n	800b802 <__sflush_r+0x46>
 800b7f6:	6863      	ldr	r3, [r4, #4]
 800b7f8:	1ac0      	subs	r0, r0, r3
 800b7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b7fc:	b10b      	cbz	r3, 800b802 <__sflush_r+0x46>
 800b7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b800:	1ac0      	subs	r0, r0, r3
 800b802:	2300      	movs	r3, #0
 800b804:	4602      	mov	r2, r0
 800b806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b808:	4628      	mov	r0, r5
 800b80a:	6a21      	ldr	r1, [r4, #32]
 800b80c:	47b0      	blx	r6
 800b80e:	1c43      	adds	r3, r0, #1
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	d106      	bne.n	800b822 <__sflush_r+0x66>
 800b814:	6829      	ldr	r1, [r5, #0]
 800b816:	291d      	cmp	r1, #29
 800b818:	d82c      	bhi.n	800b874 <__sflush_r+0xb8>
 800b81a:	4a2a      	ldr	r2, [pc, #168]	; (800b8c4 <__sflush_r+0x108>)
 800b81c:	40ca      	lsrs	r2, r1
 800b81e:	07d6      	lsls	r6, r2, #31
 800b820:	d528      	bpl.n	800b874 <__sflush_r+0xb8>
 800b822:	2200      	movs	r2, #0
 800b824:	6062      	str	r2, [r4, #4]
 800b826:	6922      	ldr	r2, [r4, #16]
 800b828:	04d9      	lsls	r1, r3, #19
 800b82a:	6022      	str	r2, [r4, #0]
 800b82c:	d504      	bpl.n	800b838 <__sflush_r+0x7c>
 800b82e:	1c42      	adds	r2, r0, #1
 800b830:	d101      	bne.n	800b836 <__sflush_r+0x7a>
 800b832:	682b      	ldr	r3, [r5, #0]
 800b834:	b903      	cbnz	r3, 800b838 <__sflush_r+0x7c>
 800b836:	6560      	str	r0, [r4, #84]	; 0x54
 800b838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b83a:	602f      	str	r7, [r5, #0]
 800b83c:	2900      	cmp	r1, #0
 800b83e:	d0ca      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b844:	4299      	cmp	r1, r3
 800b846:	d002      	beq.n	800b84e <__sflush_r+0x92>
 800b848:	4628      	mov	r0, r5
 800b84a:	f000 f909 	bl	800ba60 <_free_r>
 800b84e:	2000      	movs	r0, #0
 800b850:	6360      	str	r0, [r4, #52]	; 0x34
 800b852:	e7c1      	b.n	800b7d8 <__sflush_r+0x1c>
 800b854:	6a21      	ldr	r1, [r4, #32]
 800b856:	2301      	movs	r3, #1
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	1c41      	adds	r1, r0, #1
 800b85e:	d1c7      	bne.n	800b7f0 <__sflush_r+0x34>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d0c4      	beq.n	800b7f0 <__sflush_r+0x34>
 800b866:	2b1d      	cmp	r3, #29
 800b868:	d001      	beq.n	800b86e <__sflush_r+0xb2>
 800b86a:	2b16      	cmp	r3, #22
 800b86c:	d101      	bne.n	800b872 <__sflush_r+0xb6>
 800b86e:	602f      	str	r7, [r5, #0]
 800b870:	e7b1      	b.n	800b7d6 <__sflush_r+0x1a>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b878:	81a3      	strh	r3, [r4, #12]
 800b87a:	e7ad      	b.n	800b7d8 <__sflush_r+0x1c>
 800b87c:	690f      	ldr	r7, [r1, #16]
 800b87e:	2f00      	cmp	r7, #0
 800b880:	d0a9      	beq.n	800b7d6 <__sflush_r+0x1a>
 800b882:	0793      	lsls	r3, r2, #30
 800b884:	bf18      	it	ne
 800b886:	2300      	movne	r3, #0
 800b888:	680e      	ldr	r6, [r1, #0]
 800b88a:	bf08      	it	eq
 800b88c:	694b      	ldreq	r3, [r1, #20]
 800b88e:	eba6 0807 	sub.w	r8, r6, r7
 800b892:	600f      	str	r7, [r1, #0]
 800b894:	608b      	str	r3, [r1, #8]
 800b896:	f1b8 0f00 	cmp.w	r8, #0
 800b89a:	dd9c      	ble.n	800b7d6 <__sflush_r+0x1a>
 800b89c:	4643      	mov	r3, r8
 800b89e:	463a      	mov	r2, r7
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	6a21      	ldr	r1, [r4, #32]
 800b8a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8a6:	47b0      	blx	r6
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	dc06      	bgt.n	800b8ba <__sflush_r+0xfe>
 800b8ac:	89a3      	ldrh	r3, [r4, #12]
 800b8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	e78e      	b.n	800b7d8 <__sflush_r+0x1c>
 800b8ba:	4407      	add	r7, r0
 800b8bc:	eba8 0800 	sub.w	r8, r8, r0
 800b8c0:	e7e9      	b.n	800b896 <__sflush_r+0xda>
 800b8c2:	bf00      	nop
 800b8c4:	20400001 	.word	0x20400001

0800b8c8 <_fflush_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	690b      	ldr	r3, [r1, #16]
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	b913      	cbnz	r3, 800b8d8 <_fflush_r+0x10>
 800b8d2:	2500      	movs	r5, #0
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	b118      	cbz	r0, 800b8e2 <_fflush_r+0x1a>
 800b8da:	6983      	ldr	r3, [r0, #24]
 800b8dc:	b90b      	cbnz	r3, 800b8e2 <_fflush_r+0x1a>
 800b8de:	f7ff fa4f 	bl	800ad80 <__sinit>
 800b8e2:	4b14      	ldr	r3, [pc, #80]	; (800b934 <_fflush_r+0x6c>)
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	d11b      	bne.n	800b920 <_fflush_r+0x58>
 800b8e8:	686c      	ldr	r4, [r5, #4]
 800b8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0ef      	beq.n	800b8d2 <_fflush_r+0xa>
 800b8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b8f4:	07d0      	lsls	r0, r2, #31
 800b8f6:	d404      	bmi.n	800b902 <_fflush_r+0x3a>
 800b8f8:	0599      	lsls	r1, r3, #22
 800b8fa:	d402      	bmi.n	800b902 <_fflush_r+0x3a>
 800b8fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8fe:	f7ff fadd 	bl	800aebc <__retarget_lock_acquire_recursive>
 800b902:	4628      	mov	r0, r5
 800b904:	4621      	mov	r1, r4
 800b906:	f7ff ff59 	bl	800b7bc <__sflush_r>
 800b90a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b90c:	4605      	mov	r5, r0
 800b90e:	07da      	lsls	r2, r3, #31
 800b910:	d4e0      	bmi.n	800b8d4 <_fflush_r+0xc>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	059b      	lsls	r3, r3, #22
 800b916:	d4dd      	bmi.n	800b8d4 <_fflush_r+0xc>
 800b918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b91a:	f7ff fad0 	bl	800aebe <__retarget_lock_release_recursive>
 800b91e:	e7d9      	b.n	800b8d4 <_fflush_r+0xc>
 800b920:	4b05      	ldr	r3, [pc, #20]	; (800b938 <_fflush_r+0x70>)
 800b922:	429c      	cmp	r4, r3
 800b924:	d101      	bne.n	800b92a <_fflush_r+0x62>
 800b926:	68ac      	ldr	r4, [r5, #8]
 800b928:	e7df      	b.n	800b8ea <_fflush_r+0x22>
 800b92a:	4b04      	ldr	r3, [pc, #16]	; (800b93c <_fflush_r+0x74>)
 800b92c:	429c      	cmp	r4, r3
 800b92e:	bf08      	it	eq
 800b930:	68ec      	ldreq	r4, [r5, #12]
 800b932:	e7da      	b.n	800b8ea <_fflush_r+0x22>
 800b934:	0800bd78 	.word	0x0800bd78
 800b938:	0800bd98 	.word	0x0800bd98
 800b93c:	0800bd58 	.word	0x0800bd58

0800b940 <_lseek_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	4611      	mov	r1, r2
 800b948:	2200      	movs	r2, #0
 800b94a:	4d05      	ldr	r5, [pc, #20]	; (800b960 <_lseek_r+0x20>)
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f7f6 fa29 	bl	8001da6 <_lseek>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_lseek_r+0x1e>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_lseek_r+0x1e>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	20001944 	.word	0x20001944

0800b964 <__swhatbuf_r>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	460e      	mov	r6, r1
 800b968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b96c:	4614      	mov	r4, r2
 800b96e:	2900      	cmp	r1, #0
 800b970:	461d      	mov	r5, r3
 800b972:	b096      	sub	sp, #88	; 0x58
 800b974:	da07      	bge.n	800b986 <__swhatbuf_r+0x22>
 800b976:	2300      	movs	r3, #0
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	89b3      	ldrh	r3, [r6, #12]
 800b97c:	061a      	lsls	r2, r3, #24
 800b97e:	d410      	bmi.n	800b9a2 <__swhatbuf_r+0x3e>
 800b980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b984:	e00e      	b.n	800b9a4 <__swhatbuf_r+0x40>
 800b986:	466a      	mov	r2, sp
 800b988:	f000 f8c8 	bl	800bb1c <_fstat_r>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	dbf2      	blt.n	800b976 <__swhatbuf_r+0x12>
 800b990:	9a01      	ldr	r2, [sp, #4]
 800b992:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b996:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b99a:	425a      	negs	r2, r3
 800b99c:	415a      	adcs	r2, r3
 800b99e:	602a      	str	r2, [r5, #0]
 800b9a0:	e7ee      	b.n	800b980 <__swhatbuf_r+0x1c>
 800b9a2:	2340      	movs	r3, #64	; 0x40
 800b9a4:	2000      	movs	r0, #0
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	b016      	add	sp, #88	; 0x58
 800b9aa:	bd70      	pop	{r4, r5, r6, pc}

0800b9ac <__smakebuf_r>:
 800b9ac:	898b      	ldrh	r3, [r1, #12]
 800b9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9b0:	079d      	lsls	r5, r3, #30
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	460c      	mov	r4, r1
 800b9b6:	d507      	bpl.n	800b9c8 <__smakebuf_r+0x1c>
 800b9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	6123      	str	r3, [r4, #16]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	6163      	str	r3, [r4, #20]
 800b9c4:	b002      	add	sp, #8
 800b9c6:	bd70      	pop	{r4, r5, r6, pc}
 800b9c8:	466a      	mov	r2, sp
 800b9ca:	ab01      	add	r3, sp, #4
 800b9cc:	f7ff ffca 	bl	800b964 <__swhatbuf_r>
 800b9d0:	9900      	ldr	r1, [sp, #0]
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	4630      	mov	r0, r6
 800b9d6:	f7ff fa73 	bl	800aec0 <_malloc_r>
 800b9da:	b948      	cbnz	r0, 800b9f0 <__smakebuf_r+0x44>
 800b9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e0:	059a      	lsls	r2, r3, #22
 800b9e2:	d4ef      	bmi.n	800b9c4 <__smakebuf_r+0x18>
 800b9e4:	f023 0303 	bic.w	r3, r3, #3
 800b9e8:	f043 0302 	orr.w	r3, r3, #2
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	e7e3      	b.n	800b9b8 <__smakebuf_r+0xc>
 800b9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ba28 <__smakebuf_r+0x7c>)
 800b9f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	6020      	str	r0, [r4, #0]
 800b9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	9b00      	ldr	r3, [sp, #0]
 800ba00:	6120      	str	r0, [r4, #16]
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	9b01      	ldr	r3, [sp, #4]
 800ba06:	b15b      	cbz	r3, 800ba20 <__smakebuf_r+0x74>
 800ba08:	4630      	mov	r0, r6
 800ba0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba0e:	f000 f897 	bl	800bb40 <_isatty_r>
 800ba12:	b128      	cbz	r0, 800ba20 <__smakebuf_r+0x74>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f023 0303 	bic.w	r3, r3, #3
 800ba1a:	f043 0301 	orr.w	r3, r3, #1
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	89a0      	ldrh	r0, [r4, #12]
 800ba22:	4305      	orrs	r5, r0
 800ba24:	81a5      	strh	r5, [r4, #12]
 800ba26:	e7cd      	b.n	800b9c4 <__smakebuf_r+0x18>
 800ba28:	0800ad19 	.word	0x0800ad19

0800ba2c <memchr>:
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	b510      	push	{r4, lr}
 800ba30:	b2c9      	uxtb	r1, r1
 800ba32:	4402      	add	r2, r0
 800ba34:	4293      	cmp	r3, r2
 800ba36:	4618      	mov	r0, r3
 800ba38:	d101      	bne.n	800ba3e <memchr+0x12>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	e003      	b.n	800ba46 <memchr+0x1a>
 800ba3e:	7804      	ldrb	r4, [r0, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	428c      	cmp	r4, r1
 800ba44:	d1f6      	bne.n	800ba34 <memchr+0x8>
 800ba46:	bd10      	pop	{r4, pc}

0800ba48 <__malloc_lock>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__malloc_lock+0x8>)
 800ba4a:	f7ff ba37 	b.w	800aebc <__retarget_lock_acquire_recursive>
 800ba4e:	bf00      	nop
 800ba50:	2000193c 	.word	0x2000193c

0800ba54 <__malloc_unlock>:
 800ba54:	4801      	ldr	r0, [pc, #4]	; (800ba5c <__malloc_unlock+0x8>)
 800ba56:	f7ff ba32 	b.w	800aebe <__retarget_lock_release_recursive>
 800ba5a:	bf00      	nop
 800ba5c:	2000193c 	.word	0x2000193c

0800ba60 <_free_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4605      	mov	r5, r0
 800ba64:	2900      	cmp	r1, #0
 800ba66:	d043      	beq.n	800baf0 <_free_r+0x90>
 800ba68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba6c:	1f0c      	subs	r4, r1, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfb8      	it	lt
 800ba72:	18e4      	addlt	r4, r4, r3
 800ba74:	f7ff ffe8 	bl	800ba48 <__malloc_lock>
 800ba78:	4a1e      	ldr	r2, [pc, #120]	; (800baf4 <_free_r+0x94>)
 800ba7a:	6813      	ldr	r3, [r2, #0]
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	b933      	cbnz	r3, 800ba8e <_free_r+0x2e>
 800ba80:	6063      	str	r3, [r4, #4]
 800ba82:	6014      	str	r4, [r2, #0]
 800ba84:	4628      	mov	r0, r5
 800ba86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba8a:	f7ff bfe3 	b.w	800ba54 <__malloc_unlock>
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	d90a      	bls.n	800baa8 <_free_r+0x48>
 800ba92:	6821      	ldr	r1, [r4, #0]
 800ba94:	1862      	adds	r2, r4, r1
 800ba96:	4293      	cmp	r3, r2
 800ba98:	bf01      	itttt	eq
 800ba9a:	681a      	ldreq	r2, [r3, #0]
 800ba9c:	685b      	ldreq	r3, [r3, #4]
 800ba9e:	1852      	addeq	r2, r2, r1
 800baa0:	6022      	streq	r2, [r4, #0]
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	6004      	str	r4, [r0, #0]
 800baa6:	e7ed      	b.n	800ba84 <_free_r+0x24>
 800baa8:	461a      	mov	r2, r3
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	b10b      	cbz	r3, 800bab2 <_free_r+0x52>
 800baae:	42a3      	cmp	r3, r4
 800bab0:	d9fa      	bls.n	800baa8 <_free_r+0x48>
 800bab2:	6811      	ldr	r1, [r2, #0]
 800bab4:	1850      	adds	r0, r2, r1
 800bab6:	42a0      	cmp	r0, r4
 800bab8:	d10b      	bne.n	800bad2 <_free_r+0x72>
 800baba:	6820      	ldr	r0, [r4, #0]
 800babc:	4401      	add	r1, r0
 800babe:	1850      	adds	r0, r2, r1
 800bac0:	4283      	cmp	r3, r0
 800bac2:	6011      	str	r1, [r2, #0]
 800bac4:	d1de      	bne.n	800ba84 <_free_r+0x24>
 800bac6:	6818      	ldr	r0, [r3, #0]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	4401      	add	r1, r0
 800bacc:	6011      	str	r1, [r2, #0]
 800bace:	6053      	str	r3, [r2, #4]
 800bad0:	e7d8      	b.n	800ba84 <_free_r+0x24>
 800bad2:	d902      	bls.n	800bada <_free_r+0x7a>
 800bad4:	230c      	movs	r3, #12
 800bad6:	602b      	str	r3, [r5, #0]
 800bad8:	e7d4      	b.n	800ba84 <_free_r+0x24>
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	1821      	adds	r1, r4, r0
 800bade:	428b      	cmp	r3, r1
 800bae0:	bf01      	itttt	eq
 800bae2:	6819      	ldreq	r1, [r3, #0]
 800bae4:	685b      	ldreq	r3, [r3, #4]
 800bae6:	1809      	addeq	r1, r1, r0
 800bae8:	6021      	streq	r1, [r4, #0]
 800baea:	6063      	str	r3, [r4, #4]
 800baec:	6054      	str	r4, [r2, #4]
 800baee:	e7c9      	b.n	800ba84 <_free_r+0x24>
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	20000480 	.word	0x20000480

0800baf8 <_read_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	4611      	mov	r1, r2
 800bb00:	2200      	movs	r2, #0
 800bb02:	4d05      	ldr	r5, [pc, #20]	; (800bb18 <_read_r+0x20>)
 800bb04:	602a      	str	r2, [r5, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	f7f6 f90c 	bl	8001d24 <_read>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_read_r+0x1e>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_read_r+0x1e>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	20001944 	.word	0x20001944

0800bb1c <_fstat_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	2300      	movs	r3, #0
 800bb20:	4d06      	ldr	r5, [pc, #24]	; (800bb3c <_fstat_r+0x20>)
 800bb22:	4604      	mov	r4, r0
 800bb24:	4608      	mov	r0, r1
 800bb26:	4611      	mov	r1, r2
 800bb28:	602b      	str	r3, [r5, #0]
 800bb2a:	f7f6 f923 	bl	8001d74 <_fstat>
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	d102      	bne.n	800bb38 <_fstat_r+0x1c>
 800bb32:	682b      	ldr	r3, [r5, #0]
 800bb34:	b103      	cbz	r3, 800bb38 <_fstat_r+0x1c>
 800bb36:	6023      	str	r3, [r4, #0]
 800bb38:	bd38      	pop	{r3, r4, r5, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20001944 	.word	0x20001944

0800bb40 <_isatty_r>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	2300      	movs	r3, #0
 800bb44:	4d05      	ldr	r5, [pc, #20]	; (800bb5c <_isatty_r+0x1c>)
 800bb46:	4604      	mov	r4, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	602b      	str	r3, [r5, #0]
 800bb4c:	f7f6 f921 	bl	8001d92 <_isatty>
 800bb50:	1c43      	adds	r3, r0, #1
 800bb52:	d102      	bne.n	800bb5a <_isatty_r+0x1a>
 800bb54:	682b      	ldr	r3, [r5, #0]
 800bb56:	b103      	cbz	r3, 800bb5a <_isatty_r+0x1a>
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	20001944 	.word	0x20001944

0800bb60 <floor>:
 800bb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bb68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bb6c:	2e13      	cmp	r6, #19
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4607      	mov	r7, r0
 800bb74:	460c      	mov	r4, r1
 800bb76:	4605      	mov	r5, r0
 800bb78:	dc34      	bgt.n	800bbe4 <floor+0x84>
 800bb7a:	2e00      	cmp	r6, #0
 800bb7c:	da15      	bge.n	800bbaa <floor+0x4a>
 800bb7e:	a334      	add	r3, pc, #208	; (adr r3, 800bc50 <floor+0xf0>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	f7f4 faf2 	bl	800016c <__adddf3>
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f7f4 fd22 	bl	80005d4 <__aeabi_dcmpgt>
 800bb90:	b140      	cbz	r0, 800bba4 <floor+0x44>
 800bb92:	2c00      	cmp	r4, #0
 800bb94:	da59      	bge.n	800bc4a <floor+0xea>
 800bb96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bb9a:	ea57 0503 	orrs.w	r5, r7, r3
 800bb9e:	d001      	beq.n	800bba4 <floor+0x44>
 800bba0:	2500      	movs	r5, #0
 800bba2:	4c2d      	ldr	r4, [pc, #180]	; (800bc58 <floor+0xf8>)
 800bba4:	4623      	mov	r3, r4
 800bba6:	462f      	mov	r7, r5
 800bba8:	e025      	b.n	800bbf6 <floor+0x96>
 800bbaa:	4a2c      	ldr	r2, [pc, #176]	; (800bc5c <floor+0xfc>)
 800bbac:	fa42 f806 	asr.w	r8, r2, r6
 800bbb0:	ea01 0208 	and.w	r2, r1, r8
 800bbb4:	4302      	orrs	r2, r0
 800bbb6:	d01e      	beq.n	800bbf6 <floor+0x96>
 800bbb8:	a325      	add	r3, pc, #148	; (adr r3, 800bc50 <floor+0xf0>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fad5 	bl	800016c <__adddf3>
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f7f4 fd05 	bl	80005d4 <__aeabi_dcmpgt>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d0ea      	beq.n	800bba4 <floor+0x44>
 800bbce:	2c00      	cmp	r4, #0
 800bbd0:	bfbe      	ittt	lt
 800bbd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bbd6:	fa43 f606 	asrlt.w	r6, r3, r6
 800bbda:	19a4      	addlt	r4, r4, r6
 800bbdc:	2500      	movs	r5, #0
 800bbde:	ea24 0408 	bic.w	r4, r4, r8
 800bbe2:	e7df      	b.n	800bba4 <floor+0x44>
 800bbe4:	2e33      	cmp	r6, #51	; 0x33
 800bbe6:	dd0a      	ble.n	800bbfe <floor+0x9e>
 800bbe8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbec:	d103      	bne.n	800bbf6 <floor+0x96>
 800bbee:	f7f4 fabd 	bl	800016c <__adddf3>
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800bc02:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bc06:	fa22 f808 	lsr.w	r8, r2, r8
 800bc0a:	ea18 0f00 	tst.w	r8, r0
 800bc0e:	d0f2      	beq.n	800bbf6 <floor+0x96>
 800bc10:	a30f      	add	r3, pc, #60	; (adr r3, 800bc50 <floor+0xf0>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 faa9 	bl	800016c <__adddf3>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f7f4 fcd9 	bl	80005d4 <__aeabi_dcmpgt>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0be      	beq.n	800bba4 <floor+0x44>
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	da02      	bge.n	800bc30 <floor+0xd0>
 800bc2a:	2e14      	cmp	r6, #20
 800bc2c:	d103      	bne.n	800bc36 <floor+0xd6>
 800bc2e:	3401      	adds	r4, #1
 800bc30:	ea25 0508 	bic.w	r5, r5, r8
 800bc34:	e7b6      	b.n	800bba4 <floor+0x44>
 800bc36:	2301      	movs	r3, #1
 800bc38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc3c:	fa03 f606 	lsl.w	r6, r3, r6
 800bc40:	4435      	add	r5, r6
 800bc42:	42bd      	cmp	r5, r7
 800bc44:	bf38      	it	cc
 800bc46:	18e4      	addcc	r4, r4, r3
 800bc48:	e7f2      	b.n	800bc30 <floor+0xd0>
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	462c      	mov	r4, r5
 800bc4e:	e7a9      	b.n	800bba4 <floor+0x44>
 800bc50:	8800759c 	.word	0x8800759c
 800bc54:	7e37e43c 	.word	0x7e37e43c
 800bc58:	bff00000 	.word	0xbff00000
 800bc5c:	000fffff 	.word	0x000fffff

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
