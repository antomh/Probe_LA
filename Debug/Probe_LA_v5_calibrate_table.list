
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c818  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9bc  0800c9bc  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9bc  0800c9bc  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9bc  0800c9bc  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9bc  0800c9bc  0001c9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800c9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  200001d0  0800cb90  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018f8  0800cb90  000218f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022023  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eda  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  000470f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00048760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da62  00000000  00000000  00049ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db0f  00000000  00000000  00067602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096cdc  00000000  00000000  00085111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011bded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d14  00000000  00000000  0011be40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d0 	.word	0x200001d0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c910 	.word	0x0800c910

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d4 	.word	0x200001d4
 800014c:	0800c910 	.word	0x0800c910

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__gedf2>:
 80004d8:	f04f 3cff 	mov.w	ip, #4294967295
 80004dc:	e006      	b.n	80004ec <__cmpdf2+0x4>
 80004de:	bf00      	nop

080004e0 <__ledf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	e002      	b.n	80004ec <__cmpdf2+0x4>
 80004e6:	bf00      	nop

080004e8 <__cmpdf2>:
 80004e8:	f04f 0c01 	mov.w	ip, #1
 80004ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004fc:	bf18      	it	ne
 80004fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000502:	d01b      	beq.n	800053c <__cmpdf2+0x54>
 8000504:	b001      	add	sp, #4
 8000506:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800050a:	bf0c      	ite	eq
 800050c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000510:	ea91 0f03 	teqne	r1, r3
 8000514:	bf02      	ittt	eq
 8000516:	ea90 0f02 	teqeq	r0, r2
 800051a:	2000      	moveq	r0, #0
 800051c:	4770      	bxeq	lr
 800051e:	f110 0f00 	cmn.w	r0, #0
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf58      	it	pl
 8000528:	4299      	cmppl	r1, r3
 800052a:	bf08      	it	eq
 800052c:	4290      	cmpeq	r0, r2
 800052e:	bf2c      	ite	cs
 8000530:	17d8      	asrcs	r0, r3, #31
 8000532:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000536:	f040 0001 	orr.w	r0, r0, #1
 800053a:	4770      	bx	lr
 800053c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d102      	bne.n	800054c <__cmpdf2+0x64>
 8000546:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800054a:	d107      	bne.n	800055c <__cmpdf2+0x74>
 800054c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000550:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000554:	d1d6      	bne.n	8000504 <__cmpdf2+0x1c>
 8000556:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800055a:	d0d3      	beq.n	8000504 <__cmpdf2+0x1c>
 800055c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <__aeabi_cdrcmple>:
 8000564:	4684      	mov	ip, r0
 8000566:	4610      	mov	r0, r2
 8000568:	4662      	mov	r2, ip
 800056a:	468c      	mov	ip, r1
 800056c:	4619      	mov	r1, r3
 800056e:	4663      	mov	r3, ip
 8000570:	e000      	b.n	8000574 <__aeabi_cdcmpeq>
 8000572:	bf00      	nop

08000574 <__aeabi_cdcmpeq>:
 8000574:	b501      	push	{r0, lr}
 8000576:	f7ff ffb7 	bl	80004e8 <__cmpdf2>
 800057a:	2800      	cmp	r0, #0
 800057c:	bf48      	it	mi
 800057e:	f110 0f00 	cmnmi.w	r0, #0
 8000582:	bd01      	pop	{r0, pc}

08000584 <__aeabi_dcmpeq>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff fff4 	bl	8000574 <__aeabi_cdcmpeq>
 800058c:	bf0c      	ite	eq
 800058e:	2001      	moveq	r0, #1
 8000590:	2000      	movne	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmplt>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffea 	bl	8000574 <__aeabi_cdcmpeq>
 80005a0:	bf34      	ite	cc
 80005a2:	2001      	movcc	r0, #1
 80005a4:	2000      	movcs	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmple>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffe0 	bl	8000574 <__aeabi_cdcmpeq>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpge>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffce 	bl	8000564 <__aeabi_cdrcmple>
 80005c8:	bf94      	ite	ls
 80005ca:	2001      	movls	r0, #1
 80005cc:	2000      	movhi	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmpgt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffc4 	bl	8000564 <__aeabi_cdrcmple>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2uiz>:
 80005e8:	004a      	lsls	r2, r1, #1
 80005ea:	d211      	bcs.n	8000610 <__aeabi_d2uiz+0x28>
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d211      	bcs.n	8000616 <__aeabi_d2uiz+0x2e>
 80005f2:	d50d      	bpl.n	8000610 <__aeabi_d2uiz+0x28>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d40e      	bmi.n	800061c <__aeabi_d2uiz+0x34>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	fa23 f002 	lsr.w	r0, r3, r2
 800060e:	4770      	bx	lr
 8000610:	f04f 0000 	mov.w	r0, #0
 8000614:	4770      	bx	lr
 8000616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800061a:	d102      	bne.n	8000622 <__aeabi_d2uiz+0x3a>
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	4770      	bx	lr
 8000622:	f04f 0000 	mov.w	r0, #0
 8000626:	4770      	bx	lr

08000628 <__aeabi_frsub>:
 8000628:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800062c:	e002      	b.n	8000634 <__addsf3>
 800062e:	bf00      	nop

08000630 <__aeabi_fsub>:
 8000630:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000634 <__addsf3>:
 8000634:	0042      	lsls	r2, r0, #1
 8000636:	bf1f      	itttt	ne
 8000638:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800063c:	ea92 0f03 	teqne	r2, r3
 8000640:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000644:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000648:	d06a      	beq.n	8000720 <__addsf3+0xec>
 800064a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800064e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000652:	bfc1      	itttt	gt
 8000654:	18d2      	addgt	r2, r2, r3
 8000656:	4041      	eorgt	r1, r0
 8000658:	4048      	eorgt	r0, r1
 800065a:	4041      	eorgt	r1, r0
 800065c:	bfb8      	it	lt
 800065e:	425b      	neglt	r3, r3
 8000660:	2b19      	cmp	r3, #25
 8000662:	bf88      	it	hi
 8000664:	4770      	bxhi	lr
 8000666:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800066a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000672:	bf18      	it	ne
 8000674:	4240      	negne	r0, r0
 8000676:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800067a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800067e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000682:	bf18      	it	ne
 8000684:	4249      	negne	r1, r1
 8000686:	ea92 0f03 	teq	r2, r3
 800068a:	d03f      	beq.n	800070c <__addsf3+0xd8>
 800068c:	f1a2 0201 	sub.w	r2, r2, #1
 8000690:	fa41 fc03 	asr.w	ip, r1, r3
 8000694:	eb10 000c 	adds.w	r0, r0, ip
 8000698:	f1c3 0320 	rsb	r3, r3, #32
 800069c:	fa01 f103 	lsl.w	r1, r1, r3
 80006a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006a4:	d502      	bpl.n	80006ac <__addsf3+0x78>
 80006a6:	4249      	negs	r1, r1
 80006a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006b0:	d313      	bcc.n	80006da <__addsf3+0xa6>
 80006b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006b6:	d306      	bcc.n	80006c6 <__addsf3+0x92>
 80006b8:	0840      	lsrs	r0, r0, #1
 80006ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80006be:	f102 0201 	add.w	r2, r2, #1
 80006c2:	2afe      	cmp	r2, #254	; 0xfe
 80006c4:	d251      	bcs.n	800076a <__addsf3+0x136>
 80006c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006ce:	bf08      	it	eq
 80006d0:	f020 0001 	biceq.w	r0, r0, #1
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	4770      	bx	lr
 80006da:	0049      	lsls	r1, r1, #1
 80006dc:	eb40 0000 	adc.w	r0, r0, r0
 80006e0:	3a01      	subs	r2, #1
 80006e2:	bf28      	it	cs
 80006e4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006e8:	d2ed      	bcs.n	80006c6 <__addsf3+0x92>
 80006ea:	fab0 fc80 	clz	ip, r0
 80006ee:	f1ac 0c08 	sub.w	ip, ip, #8
 80006f2:	ebb2 020c 	subs.w	r2, r2, ip
 80006f6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006fa:	bfaa      	itet	ge
 80006fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000700:	4252      	neglt	r2, r2
 8000702:	4318      	orrge	r0, r3
 8000704:	bfbc      	itt	lt
 8000706:	40d0      	lsrlt	r0, r2
 8000708:	4318      	orrlt	r0, r3
 800070a:	4770      	bx	lr
 800070c:	f092 0f00 	teq	r2, #0
 8000710:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000714:	bf06      	itte	eq
 8000716:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800071a:	3201      	addeq	r2, #1
 800071c:	3b01      	subne	r3, #1
 800071e:	e7b5      	b.n	800068c <__addsf3+0x58>
 8000720:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000724:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000728:	bf18      	it	ne
 800072a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800072e:	d021      	beq.n	8000774 <__addsf3+0x140>
 8000730:	ea92 0f03 	teq	r2, r3
 8000734:	d004      	beq.n	8000740 <__addsf3+0x10c>
 8000736:	f092 0f00 	teq	r2, #0
 800073a:	bf08      	it	eq
 800073c:	4608      	moveq	r0, r1
 800073e:	4770      	bx	lr
 8000740:	ea90 0f01 	teq	r0, r1
 8000744:	bf1c      	itt	ne
 8000746:	2000      	movne	r0, #0
 8000748:	4770      	bxne	lr
 800074a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800074e:	d104      	bne.n	800075a <__addsf3+0x126>
 8000750:	0040      	lsls	r0, r0, #1
 8000752:	bf28      	it	cs
 8000754:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000758:	4770      	bx	lr
 800075a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800075e:	bf3c      	itt	cc
 8000760:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000764:	4770      	bxcc	lr
 8000766:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800076a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800076e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000772:	4770      	bx	lr
 8000774:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000778:	bf16      	itet	ne
 800077a:	4608      	movne	r0, r1
 800077c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000780:	4601      	movne	r1, r0
 8000782:	0242      	lsls	r2, r0, #9
 8000784:	bf06      	itte	eq
 8000786:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800078a:	ea90 0f01 	teqeq	r0, r1
 800078e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000792:	4770      	bx	lr

08000794 <__aeabi_ui2f>:
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	e004      	b.n	80007a4 <__aeabi_i2f+0x8>
 800079a:	bf00      	nop

0800079c <__aeabi_i2f>:
 800079c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	ea5f 0c00 	movs.w	ip, r0
 80007a8:	bf08      	it	eq
 80007aa:	4770      	bxeq	lr
 80007ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007b0:	4601      	mov	r1, r0
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	e01c      	b.n	80007f2 <__aeabi_l2f+0x2a>

080007b8 <__aeabi_ul2f>:
 80007b8:	ea50 0201 	orrs.w	r2, r0, r1
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f04f 0300 	mov.w	r3, #0
 80007c4:	e00a      	b.n	80007dc <__aeabi_l2f+0x14>
 80007c6:	bf00      	nop

080007c8 <__aeabi_l2f>:
 80007c8:	ea50 0201 	orrs.w	r2, r0, r1
 80007cc:	bf08      	it	eq
 80007ce:	4770      	bxeq	lr
 80007d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007d4:	d502      	bpl.n	80007dc <__aeabi_l2f+0x14>
 80007d6:	4240      	negs	r0, r0
 80007d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007dc:	ea5f 0c01 	movs.w	ip, r1
 80007e0:	bf02      	ittt	eq
 80007e2:	4684      	moveq	ip, r0
 80007e4:	4601      	moveq	r1, r0
 80007e6:	2000      	moveq	r0, #0
 80007e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007ec:	bf08      	it	eq
 80007ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007f6:	fabc f28c 	clz	r2, ip
 80007fa:	3a08      	subs	r2, #8
 80007fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000800:	db10      	blt.n	8000824 <__aeabi_l2f+0x5c>
 8000802:	fa01 fc02 	lsl.w	ip, r1, r2
 8000806:	4463      	add	r3, ip
 8000808:	fa00 fc02 	lsl.w	ip, r0, r2
 800080c:	f1c2 0220 	rsb	r2, r2, #32
 8000810:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000814:	fa20 f202 	lsr.w	r2, r0, r2
 8000818:	eb43 0002 	adc.w	r0, r3, r2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f102 0220 	add.w	r2, r2, #32
 8000828:	fa01 fc02 	lsl.w	ip, r1, r2
 800082c:	f1c2 0220 	rsb	r2, r2, #32
 8000830:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000834:	fa21 f202 	lsr.w	r2, r1, r2
 8000838:	eb43 0002 	adc.w	r0, r3, r2
 800083c:	bf08      	it	eq
 800083e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000842:	4770      	bx	lr

08000844 <__aeabi_fmul>:
 8000844:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800084c:	bf1e      	ittt	ne
 800084e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000852:	ea92 0f0c 	teqne	r2, ip
 8000856:	ea93 0f0c 	teqne	r3, ip
 800085a:	d06f      	beq.n	800093c <__aeabi_fmul+0xf8>
 800085c:	441a      	add	r2, r3
 800085e:	ea80 0c01 	eor.w	ip, r0, r1
 8000862:	0240      	lsls	r0, r0, #9
 8000864:	bf18      	it	ne
 8000866:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800086a:	d01e      	beq.n	80008aa <__aeabi_fmul+0x66>
 800086c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000870:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000874:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000878:	fba0 3101 	umull	r3, r1, r0, r1
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000880:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000884:	bf3e      	ittt	cc
 8000886:	0049      	lslcc	r1, r1, #1
 8000888:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800088c:	005b      	lslcc	r3, r3, #1
 800088e:	ea40 0001 	orr.w	r0, r0, r1
 8000892:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000896:	2afd      	cmp	r2, #253	; 0xfd
 8000898:	d81d      	bhi.n	80008d6 <__aeabi_fmul+0x92>
 800089a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800089e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008a2:	bf08      	it	eq
 80008a4:	f020 0001 	biceq.w	r0, r0, #1
 80008a8:	4770      	bx	lr
 80008aa:	f090 0f00 	teq	r0, #0
 80008ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008b2:	bf08      	it	eq
 80008b4:	0249      	lsleq	r1, r1, #9
 80008b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008be:	3a7f      	subs	r2, #127	; 0x7f
 80008c0:	bfc2      	ittt	gt
 80008c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008ca:	4770      	bxgt	lr
 80008cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d0:	f04f 0300 	mov.w	r3, #0
 80008d4:	3a01      	subs	r2, #1
 80008d6:	dc5d      	bgt.n	8000994 <__aeabi_fmul+0x150>
 80008d8:	f112 0f19 	cmn.w	r2, #25
 80008dc:	bfdc      	itt	le
 80008de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008e2:	4770      	bxle	lr
 80008e4:	f1c2 0200 	rsb	r2, r2, #0
 80008e8:	0041      	lsls	r1, r0, #1
 80008ea:	fa21 f102 	lsr.w	r1, r1, r2
 80008ee:	f1c2 0220 	rsb	r2, r2, #32
 80008f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008fa:	f140 0000 	adc.w	r0, r0, #0
 80008fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000902:	bf08      	it	eq
 8000904:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000908:	4770      	bx	lr
 800090a:	f092 0f00 	teq	r2, #0
 800090e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0040      	lsleq	r0, r0, #1
 8000916:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800091a:	3a01      	subeq	r2, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xce>
 800091e:	ea40 000c 	orr.w	r0, r0, ip
 8000922:	f093 0f00 	teq	r3, #0
 8000926:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800092a:	bf02      	ittt	eq
 800092c:	0049      	lsleq	r1, r1, #1
 800092e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000932:	3b01      	subeq	r3, #1
 8000934:	d0f9      	beq.n	800092a <__aeabi_fmul+0xe6>
 8000936:	ea41 010c 	orr.w	r1, r1, ip
 800093a:	e78f      	b.n	800085c <__aeabi_fmul+0x18>
 800093c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000940:	ea92 0f0c 	teq	r2, ip
 8000944:	bf18      	it	ne
 8000946:	ea93 0f0c 	teqne	r3, ip
 800094a:	d00a      	beq.n	8000962 <__aeabi_fmul+0x11e>
 800094c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000950:	bf18      	it	ne
 8000952:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000956:	d1d8      	bne.n	800090a <__aeabi_fmul+0xc6>
 8000958:	ea80 0001 	eor.w	r0, r0, r1
 800095c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000960:	4770      	bx	lr
 8000962:	f090 0f00 	teq	r0, #0
 8000966:	bf17      	itett	ne
 8000968:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800096c:	4608      	moveq	r0, r1
 800096e:	f091 0f00 	teqne	r1, #0
 8000972:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000976:	d014      	beq.n	80009a2 <__aeabi_fmul+0x15e>
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	d101      	bne.n	8000982 <__aeabi_fmul+0x13e>
 800097e:	0242      	lsls	r2, r0, #9
 8000980:	d10f      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000982:	ea93 0f0c 	teq	r3, ip
 8000986:	d103      	bne.n	8000990 <__aeabi_fmul+0x14c>
 8000988:	024b      	lsls	r3, r1, #9
 800098a:	bf18      	it	ne
 800098c:	4608      	movne	r0, r1
 800098e:	d108      	bne.n	80009a2 <__aeabi_fmul+0x15e>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009aa:	4770      	bx	lr

080009ac <__aeabi_fdiv>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d069      	beq.n	8000a98 <__aeabi_fdiv+0xec>
 80009c4:	eba2 0203 	sub.w	r2, r2, r3
 80009c8:	ea80 0c01 	eor.w	ip, r0, r1
 80009cc:	0249      	lsls	r1, r1, #9
 80009ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009d2:	d037      	beq.n	8000a44 <__aeabi_fdiv+0x98>
 80009d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e4:	428b      	cmp	r3, r1
 80009e6:	bf38      	it	cc
 80009e8:	005b      	lslcc	r3, r3, #1
 80009ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009f2:	428b      	cmp	r3, r1
 80009f4:	bf24      	itt	cs
 80009f6:	1a5b      	subcs	r3, r3, r1
 80009f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a00:	bf24      	itt	cs
 8000a02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a0e:	bf24      	itt	cs
 8000a10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a1c:	bf24      	itt	cs
 8000a1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a2e:	d1e0      	bne.n	80009f2 <__aeabi_fdiv+0x46>
 8000a30:	2afd      	cmp	r2, #253	; 0xfd
 8000a32:	f63f af50 	bhi.w	80008d6 <__aeabi_fmul+0x92>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4c:	327f      	adds	r2, #127	; 0x7f
 8000a4e:	bfc2      	ittt	gt
 8000a50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a58:	4770      	bxgt	lr
 8000a5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	3a01      	subs	r2, #1
 8000a64:	e737      	b.n	80008d6 <__aeabi_fmul+0x92>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0040      	lsleq	r0, r0, #1
 8000a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a76:	3a01      	subeq	r2, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xc2>
 8000a7a:	ea40 000c 	orr.w	r0, r0, ip
 8000a7e:	f093 0f00 	teq	r3, #0
 8000a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a86:	bf02      	ittt	eq
 8000a88:	0049      	lsleq	r1, r1, #1
 8000a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a8e:	3b01      	subeq	r3, #1
 8000a90:	d0f9      	beq.n	8000a86 <__aeabi_fdiv+0xda>
 8000a92:	ea41 010c 	orr.w	r1, r1, ip
 8000a96:	e795      	b.n	80009c4 <__aeabi_fdiv+0x18>
 8000a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a9c:	ea92 0f0c 	teq	r2, ip
 8000aa0:	d108      	bne.n	8000ab4 <__aeabi_fdiv+0x108>
 8000aa2:	0242      	lsls	r2, r0, #9
 8000aa4:	f47f af7d 	bne.w	80009a2 <__aeabi_fmul+0x15e>
 8000aa8:	ea93 0f0c 	teq	r3, ip
 8000aac:	f47f af70 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	e776      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ab4:	ea93 0f0c 	teq	r3, ip
 8000ab8:	d104      	bne.n	8000ac4 <__aeabi_fdiv+0x118>
 8000aba:	024b      	lsls	r3, r1, #9
 8000abc:	f43f af4c 	beq.w	8000958 <__aeabi_fmul+0x114>
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	e76e      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ac4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ac8:	bf18      	it	ne
 8000aca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ace:	d1ca      	bne.n	8000a66 <__aeabi_fdiv+0xba>
 8000ad0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ad4:	f47f af5c 	bne.w	8000990 <__aeabi_fmul+0x14c>
 8000ad8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000adc:	f47f af3c 	bne.w	8000958 <__aeabi_fmul+0x114>
 8000ae0:	e75f      	b.n	80009a2 <__aeabi_fmul+0x15e>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_f2uiz>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	d20e      	bcs.n	8000b06 <__aeabi_f2uiz+0x22>
 8000ae8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000aec:	d30b      	bcc.n	8000b06 <__aeabi_f2uiz+0x22>
 8000aee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000af2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000af6:	d409      	bmi.n	8000b0c <__aeabi_f2uiz+0x28>
 8000af8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b00:	fa23 f002 	lsr.w	r0, r3, r2
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b10:	d101      	bne.n	8000b16 <__aeabi_f2uiz+0x32>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d102      	bne.n	8000b1c <__aeabi_f2uiz+0x38>
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <ToggleLDAC+0x1c>)
 8000b2e:	f004 f92c 	bl	8004d8a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2102      	movs	r1, #2
 8000b36:	4802      	ldr	r0, [pc, #8]	; (8000b40 <ToggleLDAC+0x1c>)
 8000b38:	f004 f927 	bl	8004d8a <HAL_GPIO_WritePin>
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40010800 	.word	0x40010800

08000b44 <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2110      	movs	r1, #16
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <SendSPI+0x34>)
 8000b56:	f004 f918 	bl	8004d8a <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000b5a:	1cb9      	adds	r1, r7, #2
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2201      	movs	r2, #1
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f006 fc0d 	bl	8007380 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4803      	ldr	r0, [pc, #12]	; (8000b78 <SendSPI+0x34>)
 8000b6c:	f004 f90d 	bl	8004d8a <HAL_GPIO_WritePin>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010800 	.word	0x40010800

08000b7c <DAC_AD5322_Ch1>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала А
void DAC_AD5322_Ch1(SPI_HandleTypeDef *pSPI, uint16_t data_ch1) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b8e:	d302      	bcc.n	8000b96 <DAC_AD5322_Ch1+0x1a>
 8000b90:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b94:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000b96:	2300      	movs	r3, #0
 8000b98:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	03db      	lsls	r3, r3, #15
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	8abb      	ldrh	r3, [r7, #20]
 8000bae:	039b      	lsls	r3, r3, #14
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	8a7b      	ldrh	r3, [r7, #18]
 8000bb8:	035b      	lsls	r3, r3, #13
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	8a3b      	ldrh	r3, [r7, #16]
 8000bc2:	031b      	lsls	r3, r3, #12
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000bd4:	f023 030f 	bic.w	r3, r3, #15
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	4619      	mov	r1, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa8 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000bf4:	89bb      	ldrh	r3, [r7, #12]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffa3 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000bfe:	f7ff ff91 	bl	8000b24 <ToggleLDAC>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <DAC_AD5322_Ch2>:
//--------------------------------------------------------------------------
// Запуск цифро-аналогового преобразования канала В
void DAC_AD5322_Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch2) {
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	807b      	strh	r3, [r7, #2]

	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c1c:	d302      	bcc.n	8000c24 <DAC_AD5322_Ch2+0x1a>
 8000c1e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c22:	807b      	strh	r3, [r7, #2]

  	uint16_t chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000c24:	2301      	movs	r3, #1
 8000c26:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000c28:	2301      	movs	r3, #1
 8000c2a:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes   0  Normal Operation
 8000c30:	2300      	movs	r3, #0
 8000c32:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	03db      	lsls	r3, r3, #15
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	8abb      	ldrh	r3, [r7, #20]
 8000c3c:	039b      	lsls	r3, r3, #14
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	b21a      	sxth	r2, r3
 8000c44:	8a7b      	ldrh	r3, [r7, #18]
 8000c46:	035b      	lsls	r3, r3, #13
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	8a3b      	ldrh	r3, [r7, #16]
 8000c50:	031b      	lsls	r3, r3, #12
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000c5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000c62:	f023 030f 	bic.w	r3, r3, #15
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff61 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000c82:	89bb      	ldrh	r3, [r7, #12]
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff5c 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000c8c:	f7ff ff4a 	bl	8000b24 <ToggleLDAC>
}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DAC_AD5322_Ch1Ch2>:
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cae:	d302      	bcc.n	8000cb6 <DAC_AD5322_Ch1Ch2+0x1e>
 8000cb0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cb4:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 8000cb6:	883b      	ldrh	r3, [r7, #0]
 8000cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cbc:	d302      	bcc.n	8000cc4 <DAC_AD5322_Ch1Ch2+0x2c>
 8000cbe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cc2:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 8000cc8:	2301      	movs	r3, #1
 8000cca:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000ccc:	2300      	movs	r3, #0
 8000cce:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	8abb      	ldrh	r3, [r7, #20]
 8000cdc:	039b      	lsls	r3, r3, #14
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	8a7b      	ldrh	r3, [r7, #18]
 8000ce6:	035b      	lsls	r3, r3, #13
 8000ce8:	b21b      	sxth	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b21a      	sxth	r2, r3
 8000cee:	8a3b      	ldrh	r3, [r7, #16]
 8000cf0:	031b      	lsls	r3, r3, #12
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b21b      	sxth	r3, r3
 8000cf8:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000cfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	b21a      	sxth	r2, r3
 8000d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000d18:	89bb      	ldrh	r3, [r7, #12]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff11 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff0c 	bl	8000b44 <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 8000d30:	2301      	movs	r3, #1
 8000d32:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000d34:	2300      	movs	r3, #0
 8000d36:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000d38:	2300      	movs	r3, #0
 8000d3a:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000d3c:	8afb      	ldrh	r3, [r7, #22]
 8000d3e:	03db      	lsls	r3, r3, #15
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	8abb      	ldrh	r3, [r7, #20]
 8000d44:	039b      	lsls	r3, r3, #14
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	8a7b      	ldrh	r3, [r7, #18]
 8000d4e:	035b      	lsls	r3, r3, #13
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	8a3b      	ldrh	r3, [r7, #16]
 8000d58:	031b      	lsls	r3, r3, #12
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 8000d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d6a:	f023 030f 	bic.w	r3, r3, #15
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d78:	b21b      	sxth	r3, r3
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 8000d80:	89bb      	ldrh	r3, [r7, #12]
 8000d82:	4619      	mov	r1, r3
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff fedd 	bl	8000b44 <SendSPI>
  	SendSPI(pSPI,out);
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff fed8 	bl	8000b44 <SendSPI>
  	ToggleLDAC();
 8000d94:	f7ff fec6 	bl	8000b24 <ToggleLDAC>
}
 8000d98:	bf00      	nop
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <btn_run_get_state>:

/*
 * @brief   Get run button state
 * @retval  One of three state : not pressed(0x00), short press(0x01), long press(0x02)
 */
uint8_t btn_run_get_state(void) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_12.was_short_pressed == 1 ) {
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <btn_run_get_state+0x38>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d105      	bne.n	8000dbe <btn_run_get_state+0x1e>
        state = BTN_SHORT_PRESS;
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
        btn_pin_12.was_short_pressed = 0;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <btn_run_get_state+0x38>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e005      	b.n	8000dca <btn_run_get_state+0x2a>
    }
    else if ( btn_pin_12.is_long_press == 1 ) {
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <btn_run_get_state+0x38>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <btn_run_get_state+0x2a>
        state = BTN_LONG_PRESS;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200001ec 	.word	0x200001ec

08000ddc <btn_up_get_state>:

/*
 * @brief   Get up button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_up_get_state(void) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 8000de2:	2300      	movs	r3, #0
 8000de4:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_13.was_short_pressed == 1 ) {
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <btn_up_get_state+0x30>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d102      	bne.n	8000df4 <btn_up_get_state+0x18>
        state = BTN_SHORT_PRESS;
 8000dee:	2301      	movs	r3, #1
 8000df0:	71fb      	strb	r3, [r7, #7]
 8000df2:	e005      	b.n	8000e00 <btn_up_get_state+0x24>
    }
    else if ( btn_pin_13.is_long_press == 1 ) {
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <btn_up_get_state+0x30>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <btn_up_get_state+0x24>
        state = BTN_LONG_PRESS;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 8000e00:	79fb      	ldrb	r3, [r7, #7]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	200001f4 	.word	0x200001f4

08000e10 <btn_down_get_state>:

/*
 * @brief   Get down button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_down_get_state(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_14.was_short_pressed == 1 ) {
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <btn_down_get_state+0x30>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d102      	bne.n	8000e28 <btn_down_get_state+0x18>
        state = BTN_SHORT_PRESS;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e005      	b.n	8000e34 <btn_down_get_state+0x24>
    }
    else if ( btn_pin_14.is_long_press == 1 ) {
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <btn_down_get_state+0x30>)
 8000e2a:	785b      	ldrb	r3, [r3, #1]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <btn_down_get_state+0x24>
        state = BTN_LONG_PRESS;
 8000e30:	2302      	movs	r3, #2
 8000e32:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	200001fc 	.word	0x200001fc

08000e44 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief   GPIO EXTI Callback for buttons
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e54:	d058      	beq.n	8000f08 <HAL_GPIO_EXTI_Callback+0xc4>
 8000e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e5a:	f300 8081 	bgt.w	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
 8000e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_EXTI_Callback+0x28>
 8000e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e68:	d027      	beq.n	8000eba <HAL_GPIO_EXTI_Callback+0x76>
                        btn_pin_13.is_long_press = 0;
                    }
                }
                break;
    };
}
 8000e6a:	e079      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
            if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET ) {
 8000e6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e70:	483d      	ldr	r0, [pc, #244]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x124>)
 8000e72:	f003 ff73 	bl	8004d5c <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d103      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0x40>
                btn_pin_12.is_count_started = 1;
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	709a      	strb	r2, [r3, #2]
            break;
 8000e82:	e068      	b.n	8000f56 <HAL_GPIO_EXTI_Callback+0x112>
                if ( btn_pin_12.counter > 40 ||
 8000e84:	4b39      	ldr	r3, [pc, #228]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	2b28      	cmp	r3, #40	; 0x28
 8000e8a:	d804      	bhi.n	8000e96 <HAL_GPIO_EXTI_Callback+0x52>
                     btn_pin_12.counter < 800 ) {
 8000e8c:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e8e:	889b      	ldrh	r3, [r3, #4]
                if ( btn_pin_12.counter > 40 ||
 8000e90:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e94:	d209      	bcs.n	8000eaa <HAL_GPIO_EXTI_Callback+0x66>
                    btn_pin_12.was_short_pressed = 1;
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
                    btn_pin_12.counter    = 0;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	809a      	strh	r2, [r3, #4]
                    btn_pin_12.is_count_started = 0;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	709a      	strb	r2, [r3, #2]
                    break;
 8000ea8:	e05a      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
                if ( btn_pin_12.is_long_press == 1 ) {
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d151      	bne.n	8000f56 <HAL_GPIO_EXTI_Callback+0x112>
                    btn_pin_12.is_long_press = 0;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x128>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	705a      	strb	r2, [r3, #1]
            break;
 8000eb8:	e04d      	b.n	8000f56 <HAL_GPIO_EXTI_Callback+0x112>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET ) {
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x124>)
 8000ec0:	f003 ff4c 	bl	8004d5c <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x8e>
                    btn_pin_13.is_count_started = 1;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	709a      	strb	r2, [r3, #2]
                break;
 8000ed0:	e043      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x116>
                    if ( btn_pin_13.counter > 40 ||
 8000ed2:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b28      	cmp	r3, #40	; 0x28
 8000ed8:	d804      	bhi.n	8000ee4 <HAL_GPIO_EXTI_Callback+0xa0>
                         btn_pin_13.counter < 800 ) {
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000edc:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_13.counter > 40 ||
 8000ede:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ee2:	d209      	bcs.n	8000ef8 <HAL_GPIO_EXTI_Callback+0xb4>
                        btn_pin_13.was_short_pressed = 1;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
                        btn_pin_13.counter    = 0;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	809a      	strh	r2, [r3, #4]
                        btn_pin_13.is_count_started = 0;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	709a      	strb	r2, [r3, #2]
                        break;
 8000ef6:	e033      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d12c      	bne.n	8000f5a <HAL_GPIO_EXTI_Callback+0x116>
                        btn_pin_13.is_long_press = 0;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	705a      	strb	r2, [r3, #1]
                break;
 8000f06:	e028      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x116>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET ) {
 8000f08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0c:	4816      	ldr	r0, [pc, #88]	; (8000f68 <HAL_GPIO_EXTI_Callback+0x124>)
 8000f0e:	f003 ff25 	bl	8004d5c <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d103      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0xdc>
                    btn_pin_14.is_count_started = 1;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	709a      	strb	r2, [r3, #2]
                break;
 8000f1e:	e01e      	b.n	8000f5e <HAL_GPIO_EXTI_Callback+0x11a>
                    if ( btn_pin_14.counter > 40 ||
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f22:	889b      	ldrh	r3, [r3, #4]
 8000f24:	2b28      	cmp	r3, #40	; 0x28
 8000f26:	d804      	bhi.n	8000f32 <HAL_GPIO_EXTI_Callback+0xee>
                         btn_pin_14.counter < 800 ) {
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f2a:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_14.counter > 40 ||
 8000f2c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f30:	d209      	bcs.n	8000f46 <HAL_GPIO_EXTI_Callback+0x102>
                        btn_pin_13.was_short_pressed = 1;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
                        btn_pin_14.counter    = 0;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	809a      	strh	r2, [r3, #4]
                        btn_pin_14.is_count_started = 0;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	709a      	strb	r2, [r3, #2]
                        break;
 8000f44:	e00c      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d107      	bne.n	8000f5e <HAL_GPIO_EXTI_Callback+0x11a>
                        btn_pin_13.is_long_press = 0;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	705a      	strb	r2, [r3, #1]
                break;
 8000f54:	e003      	b.n	8000f5e <HAL_GPIO_EXTI_Callback+0x11a>
            break;
 8000f56:	bf00      	nop
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 8000f5a:	bf00      	nop
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 8000f5e:	bf00      	nop
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40010c00 	.word	0x40010c00
 8000f6c:	200001ec 	.word	0x200001ec
 8000f70:	200001f4 	.word	0x200001f4
 8000f74:	200001fc 	.word	0x200001fc

08000f78 <crc_read_from_flash>:
/*
 * @brief   Read calibration table CRC from flash memory
 * @param   Output variable for CRC
 */
void crc_read_from_flash(uint32_t *crc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	6018      	str	r0, [r3, #0]
    struct FLASH_Sector s;
    memcpy( &s, (uint32_t*)FLASH_TABLE_START_ADDR, sizeof(struct FLASH_Sector) );
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <crc_read_from_flash+0x38>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f92:	461a      	mov	r2, r3
 8000f94:	f00b fc24 	bl	800c7e0 <memcpy>
    *crc = s.CheckSum;
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0801fc00 	.word	0x0801fc00

08000fb4 <flash_is_calibTable_null>:
/*
 * @brief   Checks is there any calibration values in flash memory
 * @retval  Status (0x01) or (0x00) if there is table or no
 */
uint8_t flash_is_calibTable_null(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000fba:	af00      	add	r7, sp, #0
    Table_t t;
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <flash_is_calibTable_null+0x3c>)
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Копируем значения из флеш-памяти во временную переменную для
     * того, чтобы проверить значение поля MagicNum. Копируем 50 байт
     * с запасом, вдруг если в структуре Table_t изменятся какие-либо
     * поля и адрес поля MagicNum в флеш-памяти будет другой. */
    memcpy( &t, (uint32_t*)addr, 50 );
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	2232      	movs	r2, #50	; 0x32
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00b fc06 	bl	800c7e0 <memcpy>

    if ( t.MagicNum == MAGIC_KEY ) {
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <flash_is_calibTable_null+0x40>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <flash_is_calibTable_null+0x30>
        return 0x01;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <flash_is_calibTable_null+0x32>
    }

    return 0x00;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	0801fc00 	.word	0x0801fc00
 8000ff4:	48151623 	.word	0x48151623

08000ff8 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(union NVRAM *ram)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 8001000:	4b4a      	ldr	r3, [pc, #296]	; (800112c <flash_write_calibTable+0x134>)
 8001002:	61fb      	str	r3, [r7, #28]
    uint32_t            err     = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
    uint32_t            index   = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t             status  = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8001012:	e010      	b.n	8001036 <flash_write_calibTable+0x3e>
        if ( ram->data32[index] != *(uint32_t*)addr ) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d002      	beq.n	800102a <flash_write_calibTable+0x32>
            ++err;
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	3301      	adds	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
        }
        index += 1;
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
        addr += 4;
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	3304      	adds	r3, #4
 8001034:	61fb      	str	r3, [r7, #28]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	4a3d      	ldr	r2, [pc, #244]	; (8001130 <flash_write_calibTable+0x138>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d9ea      	bls.n	8001014 <flash_write_calibTable+0x1c>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d06d      	beq.n	8001120 <flash_write_calibTable+0x128>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8001044:	f003 fb76 	bl	8004734 <HAL_FLASH_Unlock>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <flash_write_calibTable+0x62>
            status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 8001054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001058:	e064      	b.n	8001124 <flash_write_calibTable+0x12c>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	4b30      	ldr	r3, [pc, #192]	; (800112c <flash_write_calibTable+0x134>)
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	2301      	movs	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 8001070:	f107 0218 	add.w	r2, r7, #24
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fc42 	bl	8004904 <HAL_FLASHEx_Erase>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 800108c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001090:	e048      	b.n	8001124 <flash_write_calibTable+0x12c>
        }
        if ( err != 0xFFFFFFFF ) {
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <flash_write_calibTable+0xae>
            status = HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 80010a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a4:	e03e      	b.n	8001124 <flash_write_calibTable+0x12c>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <flash_write_calibTable+0x134>)
 80010a8:	61fb      	str	r3, [r7, #28]
        err     = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
        index   = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
        /* Increase number of rewritings */
        ram->sector.NWrite += 1;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
                                                  (uint32_t*)&(ram->calibration_table),
 80010c0:	687b      	ldr	r3, [r7, #4]
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 80010c2:	22fe      	movs	r2, #254	; 0xfe
 80010c4:	4619      	mov	r1, r3
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <flash_write_calibTable+0x13c>)
 80010c8:	f003 fa91 	bl	80045ee <HAL_CRC_Calculate>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
                                                  (sizeof(ram->calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 80010d4:	e01e      	b.n	8001114 <flash_write_calibTable+0x11c>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, ram->data32[index]) != HAL_OK) {
 80010d6:	69f9      	ldr	r1, [r7, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	461a      	mov	r2, r3
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	2002      	movs	r0, #2
 80010e8:	f003 fab4 	bl	8004654 <HAL_FLASH_Program>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <flash_write_calibTable+0x100>
                err++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
            }
            index += 1;
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3301      	adds	r3, #1
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
            addr += 4;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	61fb      	str	r3, [r7, #28]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 ) continue;
 8001104:	e000      	b.n	8001108 <flash_write_calibTable+0x110>
 8001106:	bf00      	nop
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <flash_write_calibTable+0x140>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f8      	bne.n	8001106 <flash_write_calibTable+0x10e>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	4a06      	ldr	r2, [pc, #24]	; (8001130 <flash_write_calibTable+0x138>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d9dc      	bls.n	80010d6 <flash_write_calibTable+0xde>
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 800111c:	f003 fb30 	bl	8004780 <HAL_FLASH_Lock>
    }
    return status;
 8001120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001124:	4618      	mov	r0, r3
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	0801fc00 	.word	0x0801fc00
 8001130:	0801ffff 	.word	0x0801ffff
 8001134:	2000087c 	.word	0x2000087c
 8001138:	40022000 	.word	0x40022000

0800113c <flash_read_sector>:
/*---------------------------------------------------------------------------*/
/*
 * @brief   Read calibration table from flash memory and write it to some variable
 */
void flash_read_sector(union NVRAM *ram)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <flash_read_sector+0x24>)
 8001146:	60fb      	str	r3, [r7, #12]
    memcpy( ram, (uint32_t*)addr, sizeof(struct FLASH_Sector) );
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114e:	4619      	mov	r1, r3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f00b fb45 	bl	800c7e0 <memcpy>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	0801fc00 	.word	0x0801fc00

08001164 <calib_table_create_default>:
extern union NVRAM DevNVRAM;

/*---------------------------------------------------------------------------*/

void calib_table_create_default(Table_t *ct)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    ct->dacValA_m12[0]  = 0x159;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f240 1259 	movw	r2, #345	; 0x159
 8001172:	831a      	strh	r2, [r3, #24]
    ct->dacValA_m12[1]  = 0x182;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800117a:	835a      	strh	r2, [r3, #26]
    ct->dacValA_m12[2]  = 0x225;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f240 2225 	movw	r2, #549	; 0x225
 8001182:	839a      	strh	r2, [r3, #28]
    ct->dacValA_m12[3]  = 0x309;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f240 3209 	movw	r2, #777	; 0x309
 800118a:	83da      	strh	r2, [r3, #30]
    ct->dacValA_m12[4]  = 0x3eb;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8001192:	841a      	strh	r2, [r3, #32]
    ct->dacValA_m12[5]  = 0x4cd;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f240 42cd 	movw	r2, #1229	; 0x4cd
 800119a:	845a      	strh	r2, [r3, #34]	; 0x22
    ct->dacValA_m12[6]  = 0x5b0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 80011a2:	849a      	strh	r2, [r3, #36]	; 0x24
    ct->dacValA_m12[7]  = 0x693;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f240 6293 	movw	r2, #1683	; 0x693
 80011aa:	84da      	strh	r2, [r3, #38]	; 0x26
    ct->dacValA_m12[8]  = 0x777;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f240 7277 	movw	r2, #1911	; 0x777
 80011b2:	851a      	strh	r2, [r3, #40]	; 0x28
    ct->dacValA_m12[9]  = 0x861;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f640 0261 	movw	r2, #2145	; 0x861
 80011ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    ct->dacValA_m12[10] = 0x93c;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f640 123c 	movw	r2, #2364	; 0x93c
 80011c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    ct->dacValA_m12[11] = 0xa20;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 80011ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    ct->dacValA_m12[12] = 0xb04;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f640 3204 	movw	r2, #2820	; 0xb04
 80011d2:	861a      	strh	r2, [r3, #48]	; 0x30
    ct->dacValA_m12[13] = 0xbe5;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f640 32e5 	movw	r2, #3045	; 0xbe5
 80011da:	865a      	strh	r2, [r3, #50]	; 0x32
    ct->dacValA_m12[14] = 0xcc7;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80011e2:	869a      	strh	r2, [r3, #52]	; 0x34
    ct->dacValA_m12[15] = 0xda9;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f640 52a9 	movw	r2, #3497	; 0xda9
 80011ea:	86da      	strh	r2, [r3, #54]	; 0x36
    ct->dacValA_m12[16] = 0xe62;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f640 6262 	movw	r2, #3682	; 0xe62
 80011f2:	871a      	strh	r2, [r3, #56]	; 0x38
    ct->dacValA_m12[17] = 0xe96;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f640 6296 	movw	r2, #3734	; 0xe96
 80011fa:	875a      	strh	r2, [r3, #58]	; 0x3a
    ct->dacValA_m12[18] = 0xeac;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f640 62ac 	movw	r2, #3756	; 0xeac
 8001202:	879a      	strh	r2, [r3, #60]	; 0x3c

    ct->dacValB_m12[0]  = 0x145;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f240 1245 	movw	r2, #325	; 0x145
 800120a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    ct->dacValB_m12[1]  = 0x16e;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001214:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    ct->dacValB_m12[2]  = 0x212;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f240 2212 	movw	r2, #530	; 0x212
 800121e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    ct->dacValB_m12[3]  = 0x2f0;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8001228:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    ct->dacValB_m12[4]  = 0x3d2;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8001232:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    ct->dacValB_m12[5]  = 0x4b4;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800123c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    ct->dacValB_m12[6]  = 0x597;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f240 5297 	movw	r2, #1431	; 0x597
 8001246:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    ct->dacValB_m12[7]  = 0x67a;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f240 627a 	movw	r2, #1658	; 0x67a
 8001250:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    ct->dacValB_m12[8]  = 0x75e;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f240 725e 	movw	r2, #1886	; 0x75e
 800125a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    ct->dacValB_m12[9]  = 0x84a;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f640 024a 	movw	r2, #2122	; 0x84a
 8001264:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
    ct->dacValB_m12[10] = 0x923;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f640 1223 	movw	r2, #2339	; 0x923
 800126e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
    ct->dacValB_m12[11] = 0xa07;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f640 2207 	movw	r2, #2567	; 0xa07
 8001278:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
    ct->dacValB_m12[12] = 0xae8;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f640 22e8 	movw	r2, #2792	; 0xae8
 8001282:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    ct->dacValB_m12[13] = 0xbcc;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f640 32cc 	movw	r2, #3020	; 0xbcc
 800128c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    ct->dacValB_m12[14] = 0xcae;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f640 42ae 	movw	r2, #3246	; 0xcae
 8001296:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    ct->dacValB_m12[15] = 0xd90;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80012a0:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
    ct->dacValB_m12[16] = 0xe49;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f640 6249 	movw	r2, #3657	; 0xe49
 80012aa:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    ct->dacValB_m12[17] = 0xe7b;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f640 627b 	movw	r2, #3707	; 0xe7b
 80012b4:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
    ct->dacValB_m12[18] = 0xe92;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f640 6292 	movw	r2, #3730	; 0xe92
 80012be:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

    ct->dacValA_m27[0]  = 0x0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
    /* TODO: Добавить код заполнения таблицы для 27 В значениями
     * по умолчанию */
    ct->dacValA_m27[1]  = 0x1000;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012d0:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172

    ct->dacValB_m27[0]  = 0x0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
    ct->dacValB_m27[1]  = 0x1000;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012e2:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <calib_table_init>:
/*
 * @brief   Fill some fields in @Table_t structure and read calibrate values
 *          from flash.
 */
void calib_table_init(Table_t *ct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    if ( flash_is_calibTable_null() == 0x00 ) {
 80012f8:	f7ff fe5c 	bl	8000fb4 <flash_is_calibTable_null>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d126      	bne.n	8001350 <calib_table_init+0x60>
        ct->Firmware = FIRMWARE_NUMBER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2205      	movs	r2, #5
 8001306:	805a      	strh	r2, [r3, #2]
        ct->Hardwire = HARDWIRE_NUMBER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2206      	movs	r2, #6
 800130c:	801a      	strh	r2, [r3, #0]
        ct->MagicNum = MAGIC_KEY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <calib_table_init+0x70>)
 8001312:	615a      	str	r2, [r3, #20]
        ct->SN       = SERIAL_NUMBER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <calib_table_init+0x74>)
 8001318:	611a      	str	r2, [r3, #16]

        ct->calibration_step = 1040;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8001320:	809a      	strh	r2, [r3, #4]
        ct->volt_min_mode_12 = -9360;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f64d 3270 	movw	r2, #56176	; 0xdb70
 8001328:	80da      	strh	r2, [r3, #6]
        ct->volt_max_mode_12 = 9360;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f242 4290 	movw	r2, #9360	; 0x2490
 8001330:	811a      	strh	r2, [r3, #8]
        ct->volt_min_mode_27 = -27000;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f249 6288 	movw	r2, #38536	; 0x9688
 8001338:	815a      	strh	r2, [r3, #10]
        ct->volt_max_mode_27 = 27000;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f646 1278 	movw	r2, #27000	; 0x6978
 8001340:	819a      	strh	r2, [r3, #12]

        /* Заполнение калибровочной таблицы значениями по умолчанию */
        calib_table_create_default(ct);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff0e 	bl	8001164 <calib_table_create_default>
        /* Запись дефолтных значений во флеш-память */
        flash_write_calibTable( &DevNVRAM );
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <calib_table_init+0x78>)
 800134a:	f7ff fe55 	bl	8000ff8 <flash_write_calibTable>
    }
    else {
        /* Чтение таблицы из флеш-памяти в переменную DevNVRAM */
        flash_read_sector( &DevNVRAM );
    }
}
 800134e:	e002      	b.n	8001356 <calib_table_init+0x66>
        flash_read_sector( &DevNVRAM );
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <calib_table_init+0x78>)
 8001352:	f7ff fef3 	bl	800113c <flash_read_sector>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	48151623 	.word	0x48151623
 8001364:	00111ae9 	.word	0x00111ae9
 8001368:	2000047c 	.word	0x2000047c

0800136c <volt2dgt>:

/*
 * @brief   Convert some voltage to numeric value
 * */
uint16_t volt2dgt(Table_t *ct, struct comparison_parameters *cp, enum DacChannel ch)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	4613      	mov	r3, r2
 8001378:	71fb      	strb	r3, [r7, #7]
    struct data_volt2dgt dConv = {
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
            .a0     = 0,
            .a1     = 0,
            .CodeX  = 0
    };

    switch (cp->relay_state)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 838d 	beq.w	8001ab0 <volt2dgt+0x744>
 8001396:	2b01      	cmp	r3, #1
 8001398:	f040 8713 	bne.w	80021c2 <volt2dgt+0xe56>
    {
        case M12 :
        {
            if (ch == CH_A) {
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f040 81c2 	bne.w	8001728 <volt2dgt+0x3bc>
                /*Канал А*/
                /* по значениям МАX и MIN и Шага калибровки вычисляем индекс соотвестующего значению таблицы равного или меньше VOLT  */
                dConv.yi = floor(
                        ((float) ((float) (((abs(ct->volt_min_mode_12)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	bfb8      	it	lt
 80013ae:	425b      	neglt	r3, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_12)) / ct->calibration_step)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bfb8      	it	lt
 80013be:	425b      	neglt	r3, r3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	8892      	ldrh	r2, [r2, #4]
 80013c8:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_12))
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	bfb8      	it	lt
 80013d6:	4252      	neglt	r2, r2
 80013d8:	b292      	uxth	r2, r2
 80013da:	fb02 f303 	mul.w	r3, r2, r3
                        ((float) ((float) (((abs(ct->volt_min_mode_12)
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f9dc 	bl	800079c <__aeabi_i2f>
 80013e4:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_12)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bfb8      	it	lt
 80013f0:	425b      	neglt	r3, r3
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_12)))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bfb8      	it	lt
 8001400:	425b      	neglt	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_12)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f9c8 	bl	800079c <__aeabi_i2f>
 800140c:	4603      	mov	r3, r0
                        ((float) ((float) (((abs(ct->volt_min_mode_12)
 800140e:	4619      	mov	r1, r3
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff facb 	bl	80009ac <__aeabi_fdiv>
 8001416:	4603      	mov	r3, r0
 8001418:	461c      	mov	r4, r3
                        / (float) (abs(ct->volt_min_mode_12)))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001420:	2b00      	cmp	r3, #0
 8001422:	bfb8      	it	lt
 8001424:	425b      	neglt	r3, r3
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f9b7 	bl	800079c <__aeabi_i2f>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff faba 	bl	80009ac <__aeabi_fdiv>
 8001438:	4603      	mov	r3, r0
 800143a:	461c      	mov	r4, r3
                        * cp->dac_A_volt
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f9aa 	bl	800079c <__aeabi_i2f>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff f9f9 	bl	8000844 <__aeabi_fmul>
 8001452:	4603      	mov	r3, r0
 8001454:	461d      	mov	r5, r3
                        + ((float) (((abs(ct->volt_min_mode_12)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800145c:	2b00      	cmp	r3, #0
 800145e:	bfb8      	it	lt
 8001460:	425b      	neglt	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_12))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800146c:	2b00      	cmp	r3, #0
 800146e:	bfb8      	it	lt
 8001470:	425b      	neglt	r3, r3
 8001472:	b29b      	uxth	r3, r3
 8001474:	4413      	add	r3, r2
                        / ct->calibration_step)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	8892      	ldrh	r2, [r2, #4]
 800147a:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_12))
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001484:	2a00      	cmp	r2, #0
 8001486:	bfb8      	it	lt
 8001488:	4252      	neglt	r2, r2
 800148a:	b292      	uxth	r2, r2
 800148c:	fb02 f303 	mul.w	r3, r2, r3
                        + ((float) (((abs(ct->volt_min_mode_12)
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f983 	bl	800079c <__aeabi_i2f>
 8001496:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_12)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bfb8      	it	lt
 80014a2:	425b      	neglt	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_12))));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bfb8      	it	lt
 80014b2:	425b      	neglt	r3, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_12)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f96f 	bl	800079c <__aeabi_i2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fa72 	bl	80009ac <__aeabi_fdiv>
 80014c8:	4603      	mov	r3, r0
                        + ((float) (((abs(ct->volt_min_mode_12)
 80014ca:	4619      	mov	r1, r3
 80014cc:	4628      	mov	r0, r5
 80014ce:	f7ff f8b1 	bl	8000634 <__addsf3>
 80014d2:	4603      	mov	r3, r0
                dConv.yi = floor(
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffa7 	bl	8000428 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f00b f995 	bl	800c810 <floor>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff f87b 	bl	80005e8 <__aeabi_d2uiz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	823b      	strh	r3, [r7, #16]
                /* Значение цап для первой точки */
                /* Потенциальное место ошибки!  обращаемся к индексу который вычислили, добавить проверку вхождения в область таблицы */
                if (dConv.yi <= MAX_VAL_M12) /* Проверка что индекс был в области памями таблицы */
 80014f8:	8a3b      	ldrh	r3, [r7, #16]
 80014fa:	2b56      	cmp	r3, #86	; 0x56
 80014fc:	f200 810e 	bhi.w	800171c <volt2dgt+0x3b0>
                {
                    dConv.Ca0 = ct->dacValA_m12[dConv.yi];
 8001500:	8a3b      	ldrh	r3, [r7, #16]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	320c      	adds	r2, #12
 8001508:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800150c:	827b      	strh	r3, [r7, #18]
                    /* Значение цап для второй точки  */
                    /* Потенциальное место ошибки!  обращаемся к индексу который вычислили, добавить проверку выхождения за область таблицы */
                    dConv.Ca1 = ct->dacValA_m12[dConv.yi + 1];
 800150e:	8a3b      	ldrh	r3, [r7, #16]
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	320c      	adds	r2, #12
 8001516:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800151a:	82bb      	strh	r3, [r7, #20]
                    /* Значение цап для второй точки  */
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001522:	2b00      	cmp	r3, #0
 8001524:	bfb8      	it	lt
 8001526:	425b      	neglt	r3, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)) / ct->calibration_step)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	bfb8      	it	lt
 8001536:	425b      	neglt	r3, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	8892      	ldrh	r2, [r2, #4]
 8001540:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800154a:	2a00      	cmp	r2, #0
 800154c:	bfb8      	it	lt
 800154e:	4252      	neglt	r2, r2
 8001550:	b292      	uxth	r2, r2
 8001552:	fb02 f303 	mul.w	r3, r2, r3
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f920 	bl	800079c <__aeabi_i2f>
 800155c:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001564:	2b00      	cmp	r3, #0
 8001566:	bfb8      	it	lt
 8001568:	425b      	neglt	r3, r3
 800156a:	b29b      	uxth	r3, r3
 800156c:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bfb8      	it	lt
 8001578:	425b      	neglt	r3, r3
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f90c 	bl	800079c <__aeabi_i2f>
 8001584:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 8001586:	4619      	mov	r1, r3
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fa0f 	bl	80009ac <__aeabi_fdiv>
 800158e:	4603      	mov	r3, r0
 8001590:	461c      	mov	r4, r3
                            / (float) (abs(ct->volt_min_mode_12)))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfb8      	it	lt
 800159c:	425b      	neglt	r3, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff f8fb 	bl	800079c <__aeabi_i2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff f9fe 	bl	80009ac <__aeabi_fdiv>
 80015b0:	4603      	mov	r3, r0
 80015b2:	461c      	mov	r4, r3
                            * cp->dac_A_volt
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f8ee 	bl	800079c <__aeabi_i2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4619      	mov	r1, r3
 80015c4:	4620      	mov	r0, r4
 80015c6:	f7ff f93d 	bl	8000844 <__aeabi_fmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461d      	mov	r5, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bfb8      	it	lt
 80015d8:	425b      	neglt	r3, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12))
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	bfb8      	it	lt
 80015e8:	425b      	neglt	r3, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
                            / ct->calibration_step)
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	8892      	ldrh	r2, [r2, #4]
 80015f2:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	bfb8      	it	lt
 8001600:	4252      	neglt	r2, r2
 8001602:	b292      	uxth	r2, r2
 8001604:	fb02 f303 	mul.w	r3, r2, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff f8c7 	bl	800079c <__aeabi_i2f>
 800160e:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bfb8      	it	lt
 800161a:	425b      	neglt	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)));
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	bfb8      	it	lt
 800162a:	425b      	neglt	r3, r3
 800162c:	b29b      	uxth	r3, r3
 800162e:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f8b3 	bl	800079c <__aeabi_i2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4619      	mov	r1, r3
 800163a:	4620      	mov	r0, r4
 800163c:	f7ff f9b6 	bl	80009ac <__aeabi_fdiv>
 8001640:	4603      	mov	r3, r0
                            + ((float) (((abs(ct->volt_min_mode_12)
 8001642:	4619      	mov	r1, r3
 8001644:	4628      	mov	r0, r5
 8001646:	f7fe fff5 	bl	8000634 <__addsf3>
 800164a:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 800164c:	61fb      	str	r3, [r7, #28]

                    dConv.a0 = (dConv.yi * ct->calibration_step)
 800164e:	8a3b      	ldrh	r3, [r7, #16]
 8001650:	461a      	mov	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	fb03 f302 	mul.w	r3, r3, r2
                            - abs(ct->volt_min_mode_12);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001660:	2a00      	cmp	r2, #0
 8001662:	bfb8      	it	lt
 8001664:	4252      	neglt	r2, r2
 8001666:	b292      	uxth	r2, r2
 8001668:	1a9b      	subs	r3, r3, r2
                    dConv.a0 = (dConv.yi * ct->calibration_step)
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f896 	bl	800079c <__aeabi_i2f>
 8001670:	4603      	mov	r3, r0
 8001672:	623b      	str	r3, [r7, #32]
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001674:	8a3b      	ldrh	r3, [r7, #16]
                            - abs(ct->volt_min_mode_12);
 8001676:	3301      	adds	r3, #1
 8001678:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	8892      	ldrh	r2, [r2, #4]
                            - abs(ct->volt_min_mode_12);
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	bfb8      	it	lt
 800168e:	425b      	neglt	r3, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001696:	82fb      	strh	r3, [r7, #22]
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001698:	8abb      	ldrh	r3, [r7, #20]
 800169a:	461a      	mov	r2, r3
 800169c:	8a7b      	ldrh	r3, [r7, #18]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f87b 	bl	800079c <__aeabi_i2f>
 80016a6:	4604      	mov	r4, r0
                            / ((float) dConv.a1 - dConv.a0)))
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f872 	bl	8000794 <__aeabi_ui2f>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	4619      	mov	r1, r3
 80016b6:	4610      	mov	r0, r2
 80016b8:	f7fe ffba 	bl	8000630 <__aeabi_fsub>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff f973 	bl	80009ac <__aeabi_fdiv>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461c      	mov	r4, r3
                            * (cp->dac_A_volt - dConv.a0) + dConv.Ca0;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f863 	bl	800079c <__aeabi_i2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7fe ffa7 	bl	8000630 <__aeabi_fsub>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff f8ac 	bl	8000844 <__aeabi_fmul>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461c      	mov	r4, r3
 80016f0:	8a7b      	ldrh	r3, [r7, #18]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f852 	bl	800079c <__aeabi_i2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7fe ff99 	bl	8000634 <__addsf3>
 8001702:	4603      	mov	r3, r0
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

                    cp->set_level_status = SUCCESS;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2200      	movs	r2, #0
 800170a:	725a      	strb	r2, [r3, #9]

                    return dConv.CodeX; //2400v -> 2662dgt
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff f9e8 	bl	8000ae4 <__aeabi_f2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b29b      	uxth	r3, r3
 8001718:	f000 bd54 	b.w	80021c4 <volt2dgt+0xe58>
                } else {
                    /*Возвращаем статус -> вышли за область памяти таблицы */
                    return cp->set_level_status = ERROR;
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2201      	movs	r2, #1
 8001720:	725a      	strb	r2, [r3, #9]
 8001722:	2301      	movs	r3, #1
 8001724:	f000 bd4e 	b.w	80021c4 <volt2dgt+0xe58>
                    break;
                }
            }
            else if (ch == CH_B) {
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b01      	cmp	r3, #1
 800172c:	f040 8548 	bne.w	80021c0 <volt2dgt+0xe54>
                /*Канал B*/
                /* по значениям МАX и MIN и Шага калибровки вычисляем индекс соотвестующего значению таблицы равного или меньше VOLT  */
                dConv.yi = floor(
                            ((float) ((float) (((abs(ct->volt_min_mode_12)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001736:	2b00      	cmp	r3, #0
 8001738:	bfb8      	it	lt
 800173a:	425b      	neglt	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)) / ct->calibration_step)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	bfb8      	it	lt
 800174a:	425b      	neglt	r3, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	8892      	ldrh	r2, [r2, #4]
 8001754:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800175e:	2a00      	cmp	r2, #0
 8001760:	bfb8      	it	lt
 8001762:	4252      	neglt	r2, r2
 8001764:	b292      	uxth	r2, r2
 8001766:	fb02 f303 	mul.w	r3, r2, r3
                            ((float) ((float) (((abs(ct->volt_min_mode_12)
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f816 	bl	800079c <__aeabi_i2f>
 8001770:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001778:	2b00      	cmp	r3, #0
 800177a:	bfb8      	it	lt
 800177c:	425b      	neglt	r3, r3
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bfb8      	it	lt
 800178c:	425b      	neglt	r3, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f802 	bl	800079c <__aeabi_i2f>
 8001798:	4603      	mov	r3, r0
                            ((float) ((float) (((abs(ct->volt_min_mode_12)
 800179a:	4619      	mov	r1, r3
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff f905 	bl	80009ac <__aeabi_fdiv>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461c      	mov	r4, r3
                            / (float) (abs(ct->volt_min_mode_12)))
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bfb8      	it	lt
 80017b0:	425b      	neglt	r3, r3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fff1 	bl	800079c <__aeabi_i2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	4620      	mov	r0, r4
 80017c0:	f7ff f8f4 	bl	80009ac <__aeabi_fdiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461c      	mov	r4, r3
                            * cp->dac_B_volt
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe ffe4 	bl	800079c <__aeabi_i2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff f833 	bl	8000844 <__aeabi_fmul>
 80017de:	4603      	mov	r3, r0
 80017e0:	461d      	mov	r5, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bfb8      	it	lt
 80017ec:	425b      	neglt	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bfb8      	it	lt
 80017fc:	425b      	neglt	r3, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
                            / ct->calibration_step)
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	8892      	ldrh	r2, [r2, #4]
 8001806:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001810:	2a00      	cmp	r2, #0
 8001812:	bfb8      	it	lt
 8001814:	4252      	neglt	r2, r2
 8001816:	b292      	uxth	r2, r2
 8001818:	fb02 f303 	mul.w	r3, r2, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ffbd 	bl	800079c <__aeabi_i2f>
 8001822:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bfb8      	it	lt
 800182e:	425b      	neglt	r3, r3
 8001830:	b29b      	uxth	r3, r3
 8001832:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12))));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	bfb8      	it	lt
 800183e:	425b      	neglt	r3, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ffa9 	bl	800079c <__aeabi_i2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4619      	mov	r1, r3
 800184e:	4620      	mov	r0, r4
 8001850:	f7ff f8ac 	bl	80009ac <__aeabi_fdiv>
 8001854:	4603      	mov	r3, r0
                            + ((float) (((abs(ct->volt_min_mode_12)
 8001856:	4619      	mov	r1, r3
 8001858:	4628      	mov	r0, r5
 800185a:	f7fe feeb 	bl	8000634 <__addsf3>
 800185e:	4603      	mov	r3, r0
                dConv.yi = floor(
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fde1 	bl	8000428 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f00a ffcf 	bl	800c810 <floor>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7fe feb5 	bl	80005e8 <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	b29b      	uxth	r3, r3
 8001882:	823b      	strh	r3, [r7, #16]
                /* Значение цап для первой точки  */
                /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                if (dConv.yi <= MAX_VAL_M12) /* Проверка что индекс был в области памями таблицы */
 8001884:	8a3b      	ldrh	r3, [r7, #16]
 8001886:	2b56      	cmp	r3, #86	; 0x56
 8001888:	f200 810d 	bhi.w	8001aa6 <volt2dgt+0x73a>
                {
                    dConv.Ca0 = ct->dacValA_m12[dConv.yi];
 800188c:	8a3b      	ldrh	r3, [r7, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	320c      	adds	r2, #12
 8001894:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001898:	827b      	strh	r3, [r7, #18]
                    /* Значение цап для второй точки  */
                    /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                    dConv.Ca1 = ct->dacValA_m12[dConv.yi + 1];
 800189a:	8a3b      	ldrh	r3, [r7, #16]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	320c      	adds	r2, #12
 80018a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018a6:	82bb      	strh	r3, [r7, #20]
                    /* Значение цап для второй точки  */
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bfb8      	it	lt
 80018b2:	425b      	neglt	r3, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)) / ct->calibration_step)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bfb8      	it	lt
 80018c2:	425b      	neglt	r3, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	8892      	ldrh	r2, [r2, #4]
 80018cc:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	bfb8      	it	lt
 80018da:	4252      	neglt	r2, r2
 80018dc:	b292      	uxth	r2, r2
 80018de:	fb02 f303 	mul.w	r3, r2, r3
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe ff5a 	bl	800079c <__aeabi_i2f>
 80018e8:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bfb8      	it	lt
 80018f4:	425b      	neglt	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	bfb8      	it	lt
 8001904:	425b      	neglt	r3, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe ff46 	bl	800079c <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 8001912:	4619      	mov	r1, r3
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff f849 	bl	80009ac <__aeabi_fdiv>
 800191a:	4603      	mov	r3, r0
 800191c:	461c      	mov	r4, r3
                            / (float) (abs(ct->volt_min_mode_12)))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfb8      	it	lt
 8001928:	425b      	neglt	r3, r3
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe ff35 	bl	800079c <__aeabi_i2f>
 8001932:	4603      	mov	r3, r0
 8001934:	4619      	mov	r1, r3
 8001936:	4620      	mov	r0, r4
 8001938:	f7ff f838 	bl	80009ac <__aeabi_fdiv>
 800193c:	4603      	mov	r3, r0
 800193e:	461c      	mov	r4, r3
                            * cp->dac_B_volt
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe ff28 	bl	800079c <__aeabi_i2f>
 800194c:	4603      	mov	r3, r0
 800194e:	4619      	mov	r1, r3
 8001950:	4620      	mov	r0, r4
 8001952:	f7fe ff77 	bl	8000844 <__aeabi_fmul>
 8001956:	4603      	mov	r3, r0
 8001958:	461d      	mov	r5, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	bfb8      	it	lt
 8001964:	425b      	neglt	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	bfb8      	it	lt
 8001974:	425b      	neglt	r3, r3
 8001976:	b29b      	uxth	r3, r3
 8001978:	4413      	add	r3, r2
                            / ct->calibration_step)
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	8892      	ldrh	r2, [r2, #4]
 800197e:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_12))
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001988:	2a00      	cmp	r2, #0
 800198a:	bfb8      	it	lt
 800198c:	4252      	neglt	r2, r2
 800198e:	b292      	uxth	r2, r2
 8001990:	fb02 f303 	mul.w	r3, r2, r3
                            + ((float) (((abs(ct->volt_min_mode_12)
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe ff01 	bl	800079c <__aeabi_i2f>
 800199a:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_12)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfb8      	it	lt
 80019a6:	425b      	neglt	r3, r3
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_12)));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bfb8      	it	lt
 80019b6:	425b      	neglt	r3, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_12)
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe feed 	bl	800079c <__aeabi_i2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4619      	mov	r1, r3
 80019c6:	4620      	mov	r0, r4
 80019c8:	f7fe fff0 	bl	80009ac <__aeabi_fdiv>
 80019cc:	4603      	mov	r3, r0
                            + ((float) (((abs(ct->volt_min_mode_12)
 80019ce:	4619      	mov	r1, r3
 80019d0:	4628      	mov	r0, r5
 80019d2:	f7fe fe2f 	bl	8000634 <__addsf3>
 80019d6:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_12)
 80019d8:	61fb      	str	r3, [r7, #28]

                    dConv.a0 = (dConv.yi * ct->calibration_step)
 80019da:	8a3b      	ldrh	r3, [r7, #16]
 80019dc:	461a      	mov	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	889b      	ldrh	r3, [r3, #4]
 80019e2:	fb03 f302 	mul.w	r3, r3, r2
                            - abs(ct->volt_min_mode_12);
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	bfb8      	it	lt
 80019f0:	4252      	neglt	r2, r2
 80019f2:	b292      	uxth	r2, r2
 80019f4:	1a9b      	subs	r3, r3, r2
                    dConv.a0 = (dConv.yi * ct->calibration_step)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fed0 	bl	800079c <__aeabi_i2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	623b      	str	r3, [r7, #32]
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001a00:	8a3b      	ldrh	r3, [r7, #16]
                            - abs(ct->volt_min_mode_12);
 8001a02:	3301      	adds	r3, #1
 8001a04:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	8892      	ldrh	r2, [r2, #4]
                            - abs(ct->volt_min_mode_12);
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bfb8      	it	lt
 8001a1a:	425b      	neglt	r3, r3
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001a22:	82fb      	strh	r3, [r7, #22]
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001a24:	8abb      	ldrh	r3, [r7, #20]
 8001a26:	461a      	mov	r2, r3
 8001a28:	8a7b      	ldrh	r3, [r7, #18]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe feb5 	bl	800079c <__aeabi_i2f>
 8001a32:	4604      	mov	r4, r0
                            / ((float) dConv.a1 - dConv.a0)))
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe feac 	bl	8000794 <__aeabi_ui2f>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	4619      	mov	r1, r3
 8001a42:	4610      	mov	r0, r2
 8001a44:	f7fe fdf4 	bl	8000630 <__aeabi_fsub>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	f7fe ffad 	bl	80009ac <__aeabi_fdiv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461c      	mov	r4, r3
                            * (cp->dac_B_volt - dConv.a0) + dConv.Ca0;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fe9d 	bl	800079c <__aeabi_i2f>
 8001a62:	4602      	mov	r2, r0
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4610      	mov	r0, r2
 8001a6a:	f7fe fde1 	bl	8000630 <__aeabi_fsub>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7fe fee6 	bl	8000844 <__aeabi_fmul>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	8a7b      	ldrh	r3, [r7, #18]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fe8c 	bl	800079c <__aeabi_i2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7fe fdd3 	bl	8000634 <__addsf3>
 8001a8e:	4603      	mov	r3, r0
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24

                    cp->set_level_status = SUCCESS;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2200      	movs	r2, #0
 8001a96:	725a      	strb	r2, [r3, #9]

                    return dConv.CodeX; //2400 -> 2662
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f822 	bl	8000ae4 <__aeabi_f2uiz>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	e38e      	b.n	80021c4 <volt2dgt+0xe58>
                } else {
                    /*Возвращаем статус -> вышли за область памяти таблицы */
                    return cp->set_level_status = ERROR;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	725a      	strb	r2, [r3, #9]
 8001aac:	2301      	movs	r3, #1
 8001aae:	e389      	b.n	80021c4 <volt2dgt+0xe58>
            break;
        }

        case M27 :
        {
            if (ch == CH_A) {
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 81c0 	bne.w	8001e38 <volt2dgt+0xacc>
                /*Канал А*/
                /* по значениям МАX и MIN и Шага калибровки вычисляем индекс соотвестующего значению таблицы равного или меньше VOLT  */
                dConv.yi = floor(
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bfb8      	it	lt
 8001ac2:	425b      	neglt	r3, r3
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27)) / ct->calibration_step)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	bfb8      	it	lt
 8001ad2:	425b      	neglt	r3, r3
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	8892      	ldrh	r2, [r2, #4]
 8001adc:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_27))
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	bfb8      	it	lt
 8001aea:	4252      	neglt	r2, r2
 8001aec:	b292      	uxth	r2, r2
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fe52 	bl	800079c <__aeabi_i2f>
 8001af8:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_27)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bfb8      	it	lt
 8001b04:	425b      	neglt	r3, r3
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27)))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bfb8      	it	lt
 8001b14:	425b      	neglt	r3, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_27)
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fe3e 	bl	800079c <__aeabi_i2f>
 8001b20:	4603      	mov	r3, r0
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001b22:	4619      	mov	r1, r3
 8001b24:	4620      	mov	r0, r4
 8001b26:	f7fe ff41 	bl	80009ac <__aeabi_fdiv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461c      	mov	r4, r3
                        / (float) (abs(ct->volt_min_mode_27)))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bfb8      	it	lt
 8001b38:	425b      	neglt	r3, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fe2d 	bl	800079c <__aeabi_i2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7fe ff30 	bl	80009ac <__aeabi_fdiv>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461c      	mov	r4, r3
                        * cp->dac_A_volt
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fe20 	bl	800079c <__aeabi_i2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7fe fe6f 	bl	8000844 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461d      	mov	r5, r3
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bfb8      	it	lt
 8001b74:	425b      	neglt	r3, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bfb8      	it	lt
 8001b84:	425b      	neglt	r3, r3
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4413      	add	r3, r2
                        / ct->calibration_step)
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	8892      	ldrh	r2, [r2, #4]
 8001b8e:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_27))
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001b98:	2a00      	cmp	r2, #0
 8001b9a:	bfb8      	it	lt
 8001b9c:	4252      	neglt	r2, r2
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fdf9 	bl	800079c <__aeabi_i2f>
 8001baa:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_27)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfb8      	it	lt
 8001bb6:	425b      	neglt	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27))));
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	bfb8      	it	lt
 8001bc6:	425b      	neglt	r3, r3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_27)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fde5 	bl	800079c <__aeabi_i2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	f7fe fee8 	bl	80009ac <__aeabi_fdiv>
 8001bdc:	4603      	mov	r3, r0
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001bde:	4619      	mov	r1, r3
 8001be0:	4628      	mov	r0, r5
 8001be2:	f7fe fd27 	bl	8000634 <__addsf3>
 8001be6:	4603      	mov	r3, r0
                dConv.yi = floor(
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc1d 	bl	8000428 <__aeabi_f2d>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f00a fe0b 	bl	800c810 <floor>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe fcf1 	bl	80005e8 <__aeabi_d2uiz>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	823b      	strh	r3, [r7, #16]
                /* Значение цап для первой точки  */
                /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                if (dConv.yi <= MAX_VAL_M27) /* Проверка что индекс был в области памями таблицы */
 8001c0c:	8a3b      	ldrh	r3, [r7, #16]
 8001c0e:	2ba2      	cmp	r3, #162	; 0xa2
 8001c10:	f200 810d 	bhi.w	8001e2e <volt2dgt+0xac2>
                {
                    dConv.Ca0 = ct->dacValA_m27[dConv.yi];
 8001c14:	8a3b      	ldrh	r3, [r7, #16]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	32b8      	adds	r2, #184	; 0xb8
 8001c1c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c20:	827b      	strh	r3, [r7, #18]
                    /* Значение цап для второй точки  */
                    /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                    dConv.Ca1 = ct->dacValA_m27[dConv.yi + 1];
 8001c22:	8a3b      	ldrh	r3, [r7, #16]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	32b8      	adds	r2, #184	; 0xb8
 8001c2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c2e:	82bb      	strh	r3, [r7, #20]
                    /* Значение цап для второй точки  */
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bfb8      	it	lt
 8001c3a:	425b      	neglt	r3, r3
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)) / ct->calibration_step)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bfb8      	it	lt
 8001c4a:	425b      	neglt	r3, r3
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	8892      	ldrh	r2, [r2, #4]
 8001c54:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_27))
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001c5e:	2a00      	cmp	r2, #0
 8001c60:	bfb8      	it	lt
 8001c62:	4252      	neglt	r2, r2
 8001c64:	b292      	uxth	r2, r2
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fd96 	bl	800079c <__aeabi_i2f>
 8001c70:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_27)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bfb8      	it	lt
 8001c7c:	425b      	neglt	r3, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)))
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bfb8      	it	lt
 8001c8c:	425b      	neglt	r3, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_27)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fd82 	bl	800079c <__aeabi_i2f>
 8001c98:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe fe85 	bl	80009ac <__aeabi_fdiv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
                            / (float) (abs(ct->volt_min_mode_27)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bfb8      	it	lt
 8001cb0:	425b      	neglt	r3, r3
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fd71 	bl	800079c <__aeabi_i2f>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7fe fe74 	bl	80009ac <__aeabi_fdiv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	461c      	mov	r4, r3
                            * cp->dac_A_volt
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fd64 	bl	800079c <__aeabi_i2f>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7fe fdb3 	bl	8000844 <__aeabi_fmul>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461d      	mov	r5, r3
                            + ((float) (((abs(ct->volt_min_mode_27)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfb8      	it	lt
 8001cec:	425b      	neglt	r3, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	bfb8      	it	lt
 8001cfc:	425b      	neglt	r3, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4413      	add	r3, r2
                            / ct->calibration_step)
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	8892      	ldrh	r2, [r2, #4]
 8001d06:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_27))
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	bfb8      	it	lt
 8001d14:	4252      	neglt	r2, r2
 8001d16:	b292      	uxth	r2, r2
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
                            + ((float) (((abs(ct->volt_min_mode_27)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fd3d 	bl	800079c <__aeabi_i2f>
 8001d22:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_27)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfb8      	it	lt
 8001d2e:	425b      	neglt	r3, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bfb8      	it	lt
 8001d3e:	425b      	neglt	r3, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_27)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fd29 	bl	800079c <__aeabi_i2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4620      	mov	r0, r4
 8001d50:	f7fe fe2c 	bl	80009ac <__aeabi_fdiv>
 8001d54:	4603      	mov	r3, r0
                            + ((float) (((abs(ct->volt_min_mode_27)
 8001d56:	4619      	mov	r1, r3
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7fe fc6b 	bl	8000634 <__addsf3>
 8001d5e:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001d60:	61fb      	str	r3, [r7, #28]

                    dConv.a0 = (dConv.yi * ct->calibration_step)
 8001d62:	8a3b      	ldrh	r3, [r7, #16]
 8001d64:	461a      	mov	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	889b      	ldrh	r3, [r3, #4]
 8001d6a:	fb03 f302 	mul.w	r3, r3, r2
                            - abs(ct->volt_min_mode_27);
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	bfb8      	it	lt
 8001d78:	4252      	neglt	r2, r2
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	1a9b      	subs	r3, r3, r2
                    dConv.a0 = (dConv.yi * ct->calibration_step)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fd0c 	bl	800079c <__aeabi_i2f>
 8001d84:	4603      	mov	r3, r0
 8001d86:	623b      	str	r3, [r7, #32]
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001d88:	8a3b      	ldrh	r3, [r7, #16]
                            - abs(ct->volt_min_mode_27);
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	8892      	ldrh	r2, [r2, #4]
                            - abs(ct->volt_min_mode_27);
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bfb8      	it	lt
 8001da2:	425b      	neglt	r3, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8001daa:	82fb      	strh	r3, [r7, #22]
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001dac:	8abb      	ldrh	r3, [r7, #20]
 8001dae:	461a      	mov	r2, r3
 8001db0:	8a7b      	ldrh	r3, [r7, #18]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fcf1 	bl	800079c <__aeabi_i2f>
 8001dba:	4604      	mov	r4, r0
                            / ((float) dConv.a1 - dConv.a0)))
 8001dbc:	8afb      	ldrh	r3, [r7, #22]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fce8 	bl	8000794 <__aeabi_ui2f>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f7fe fc30 	bl	8000630 <__aeabi_fsub>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7fe fde9 	bl	80009ac <__aeabi_fdiv>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461c      	mov	r4, r3
                            * (cp->dac_A_volt - dConv.a0) + dConv.Ca0;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fcd9 	bl	800079c <__aeabi_i2f>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a3b      	ldr	r3, [r7, #32]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f7fe fc1d 	bl	8000630 <__aeabi_fsub>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7fe fd22 	bl	8000844 <__aeabi_fmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461c      	mov	r4, r3
 8001e04:	8a7b      	ldrh	r3, [r7, #18]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fcc8 	bl	800079c <__aeabi_i2f>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7fe fc0f 	bl	8000634 <__addsf3>
 8001e16:	4603      	mov	r3, r0
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
                    cp->set_level_status = SUCCESS;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	725a      	strb	r2, [r3, #9]
                    return dConv.CodeX; //2400 -> 2662
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fe5e 	bl	8000ae4 <__aeabi_f2uiz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	e1ca      	b.n	80021c4 <volt2dgt+0xe58>
                    break;
                } else {
                    /*Возвращаем статус -> вышли за область памяти таблицы */
                    return cp->set_level_status = ERROR;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2201      	movs	r2, #1
 8001e32:	725a      	strb	r2, [r3, #9]
 8001e34:	2301      	movs	r3, #1
 8001e36:	e1c5      	b.n	80021c4 <volt2dgt+0xe58>
                    break;
                }
            }
            else if (ch == CH_B) {
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	f040 81c1 	bne.w	80021c2 <volt2dgt+0xe56>
                /*Канал B*/
                /* по значениям МАX и MIN и Шага калибровки вычисляем индекс соотвестующего значению таблицы равного или меньше VOLT  */
                dConv.yi = floor(
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bfb8      	it	lt
 8001e4a:	425b      	neglt	r3, r3
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27)) / ct->calibration_step)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bfb8      	it	lt
 8001e5a:	425b      	neglt	r3, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	8892      	ldrh	r2, [r2, #4]
 8001e64:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_27))
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001e6e:	2a00      	cmp	r2, #0
 8001e70:	bfb8      	it	lt
 8001e72:	4252      	neglt	r2, r2
 8001e74:	b292      	uxth	r2, r2
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fc8e 	bl	800079c <__aeabi_i2f>
 8001e80:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_27)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bfb8      	it	lt
 8001e8c:	425b      	neglt	r3, r3
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27)))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bfb8      	it	lt
 8001e9c:	425b      	neglt	r3, r3
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_27)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fc7a 	bl	800079c <__aeabi_i2f>
 8001ea8:	4603      	mov	r3, r0
                        ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4620      	mov	r0, r4
 8001eae:	f7fe fd7d 	bl	80009ac <__aeabi_fdiv>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	461c      	mov	r4, r3
                        / (float) (abs(ct->volt_min_mode_27)))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bfb8      	it	lt
 8001ec0:	425b      	neglt	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fc69 	bl	800079c <__aeabi_i2f>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7fe fd6c 	bl	80009ac <__aeabi_fdiv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461c      	mov	r4, r3
                        * cp->dac_B_volt
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fc5c 	bl	800079c <__aeabi_i2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7fe fcab 	bl	8000844 <__aeabi_fmul>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461d      	mov	r5, r3
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bfb8      	it	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bfb8      	it	lt
 8001f0c:	425b      	neglt	r3, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
                        / ct->calibration_step)
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	8892      	ldrh	r2, [r2, #4]
 8001f16:	fb93 f3f2 	sdiv	r3, r3, r2
                        * abs(ct->volt_min_mode_27))
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	bfb8      	it	lt
 8001f24:	4252      	neglt	r2, r2
 8001f26:	b292      	uxth	r2, r2
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fc35 	bl	800079c <__aeabi_i2f>
 8001f32:	4604      	mov	r4, r0
                        / (float) (abs(ct->volt_min_mode_27)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bfb8      	it	lt
 8001f3e:	425b      	neglt	r3, r3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
                        + abs(ct->volt_max_mode_27))));
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	425b      	neglt	r3, r3
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4413      	add	r3, r2
                        / (float) (abs(ct->volt_min_mode_27)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fc21 	bl	800079c <__aeabi_i2f>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7fe fd24 	bl	80009ac <__aeabi_fdiv>
 8001f64:	4603      	mov	r3, r0
                        + ((float) (((abs(ct->volt_min_mode_27)
 8001f66:	4619      	mov	r1, r3
 8001f68:	4628      	mov	r0, r5
 8001f6a:	f7fe fb63 	bl	8000634 <__addsf3>
 8001f6e:	4603      	mov	r3, r0
                dConv.yi = floor(
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fa59 	bl	8000428 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f00a fc47 	bl	800c810 <floor>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fb2d 	bl	80005e8 <__aeabi_d2uiz>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	823b      	strh	r3, [r7, #16]
                /* Значение цап для первой точки  */
                /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                if (dConv.yi <= MAX_VAL_M27) /* Проверка что индекс был в области памями таблицы */
 8001f94:	8a3b      	ldrh	r3, [r7, #16]
 8001f96:	2ba2      	cmp	r3, #162	; 0xa2
 8001f98:	f200 810d 	bhi.w	80021b6 <volt2dgt+0xe4a>
                {
                    dConv.Ca0 = ct->dacValA_m27[dConv.yi];
 8001f9c:	8a3b      	ldrh	r3, [r7, #16]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	32b8      	adds	r2, #184	; 0xb8
 8001fa4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fa8:	827b      	strh	r3, [r7, #18]
                    /* Значение цап для второй точки  */
                    /* Потенциальное место ошибки!  обращаемся к индексу который вычеслили, добавить проверку  выхождения за область таблицы*/
                    dConv.Ca1 = ct->dacValA_m27[dConv.yi + 1];
 8001faa:	8a3b      	ldrh	r3, [r7, #16]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	32b8      	adds	r2, #184	; 0xb8
 8001fb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fb6:	82bb      	strh	r3, [r7, #20]
                    /* Значение цап для второй точки  */
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bfb8      	it	lt
 8001fc2:	425b      	neglt	r3, r3
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)) / ct->calibration_step)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bfb8      	it	lt
 8001fd2:	425b      	neglt	r3, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	8892      	ldrh	r2, [r2, #4]
 8001fdc:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_27))
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	bfb8      	it	lt
 8001fea:	4252      	neglt	r2, r2
 8001fec:	b292      	uxth	r2, r2
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fbd2 	bl	800079c <__aeabi_i2f>
 8001ff8:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_27)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002000:	2b00      	cmp	r3, #0
 8002002:	bfb8      	it	lt
 8002004:	425b      	neglt	r3, r3
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	bfb8      	it	lt
 8002014:	425b      	neglt	r3, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_27)
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fbbe 	bl	800079c <__aeabi_i2f>
 8002020:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 8002022:	4619      	mov	r1, r3
 8002024:	4620      	mov	r0, r4
 8002026:	f7fe fcc1 	bl	80009ac <__aeabi_fdiv>
 800202a:	4603      	mov	r3, r0
 800202c:	461c      	mov	r4, r3
                            / (float) (abs(ct->volt_min_mode_27)))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002034:	2b00      	cmp	r3, #0
 8002036:	bfb8      	it	lt
 8002038:	425b      	neglt	r3, r3
 800203a:	b29b      	uxth	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fbad 	bl	800079c <__aeabi_i2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe fcb0 	bl	80009ac <__aeabi_fdiv>
 800204c:	4603      	mov	r3, r0
 800204e:	461c      	mov	r4, r3
                            * cp->dac_B_volt
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fba0 	bl	800079c <__aeabi_i2f>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4620      	mov	r0, r4
 8002062:	f7fe fbef 	bl	8000844 <__aeabi_fmul>
 8002066:	4603      	mov	r3, r0
 8002068:	461d      	mov	r5, r3
                            + ((float) (((abs(ct->volt_min_mode_27)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002070:	2b00      	cmp	r3, #0
 8002072:	bfb8      	it	lt
 8002074:	425b      	neglt	r3, r3
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	bfb8      	it	lt
 8002084:	425b      	neglt	r3, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
                            / ct->calibration_step)
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	8892      	ldrh	r2, [r2, #4]
 800208e:	fb93 f3f2 	sdiv	r3, r3, r2
                            * abs(ct->volt_min_mode_27))
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002098:	2a00      	cmp	r2, #0
 800209a:	bfb8      	it	lt
 800209c:	4252      	neglt	r2, r2
 800209e:	b292      	uxth	r2, r2
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
                            + ((float) (((abs(ct->volt_min_mode_27)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fb79 	bl	800079c <__aeabi_i2f>
 80020aa:	4604      	mov	r4, r0
                            / (float) (abs(ct->volt_min_mode_27)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bfb8      	it	lt
 80020b6:	425b      	neglt	r3, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
                            + abs(ct->volt_max_mode_27)));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bfb8      	it	lt
 80020c6:	425b      	neglt	r3, r3
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4413      	add	r3, r2
                            / (float) (abs(ct->volt_min_mode_27)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fb65 	bl	800079c <__aeabi_i2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7fe fc68 	bl	80009ac <__aeabi_fdiv>
 80020dc:	4603      	mov	r3, r0
                            + ((float) (((abs(ct->volt_min_mode_27)
 80020de:	4619      	mov	r1, r3
 80020e0:	4628      	mov	r0, r5
 80020e2:	f7fe faa7 	bl	8000634 <__addsf3>
 80020e6:	4603      	mov	r3, r0
                    dConv.y = ((float) ((float) (((abs(ct->volt_min_mode_27)
 80020e8:	61fb      	str	r3, [r7, #28]

                    dConv.a0 = (dConv.yi * ct->calibration_step)
 80020ea:	8a3b      	ldrh	r3, [r7, #16]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	889b      	ldrh	r3, [r3, #4]
 80020f2:	fb03 f302 	mul.w	r3, r3, r2
                            - abs(ct->volt_min_mode_27);
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80020fc:	2a00      	cmp	r2, #0
 80020fe:	bfb8      	it	lt
 8002100:	4252      	neglt	r2, r2
 8002102:	b292      	uxth	r2, r2
 8002104:	1a9b      	subs	r3, r3, r2
                    dConv.a0 = (dConv.yi * ct->calibration_step)
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fb48 	bl	800079c <__aeabi_i2f>
 800210c:	4603      	mov	r3, r0
 800210e:	623b      	str	r3, [r7, #32]
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8002110:	8a3b      	ldrh	r3, [r7, #16]
                            - abs(ct->volt_min_mode_12);
 8002112:	3301      	adds	r3, #1
 8002114:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	8892      	ldrh	r2, [r2, #4]
                            - abs(ct->volt_min_mode_12);
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002126:	2b00      	cmp	r3, #0
 8002128:	bfb8      	it	lt
 800212a:	425b      	neglt	r3, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	b29b      	uxth	r3, r3
                    dConv.a1 = ((dConv.yi + 1) * ct->calibration_step)
 8002132:	82fb      	strh	r3, [r7, #22]
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 8002134:	8abb      	ldrh	r3, [r7, #20]
 8002136:	461a      	mov	r2, r3
 8002138:	8a7b      	ldrh	r3, [r7, #18]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fb2d 	bl	800079c <__aeabi_i2f>
 8002142:	4604      	mov	r4, r0
                            / ((float) dConv.a1 - dConv.a0)))
 8002144:	8afb      	ldrh	r3, [r7, #22]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fb24 	bl	8000794 <__aeabi_ui2f>
 800214c:	4602      	mov	r2, r0
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f7fe fa6c 	bl	8000630 <__aeabi_fsub>
 8002158:	4603      	mov	r3, r0
 800215a:	4619      	mov	r1, r3
 800215c:	4620      	mov	r0, r4
 800215e:	f7fe fc25 	bl	80009ac <__aeabi_fdiv>
 8002162:	4603      	mov	r3, r0
 8002164:	461c      	mov	r4, r3
                            * (cp->dac_B_volt - dConv.a0) + dConv.Ca0;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fb15 	bl	800079c <__aeabi_i2f>
 8002172:	4602      	mov	r2, r0
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f7fe fa59 	bl	8000630 <__aeabi_fsub>
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	4620      	mov	r0, r4
 8002184:	f7fe fb5e 	bl	8000844 <__aeabi_fmul>
 8002188:	4603      	mov	r3, r0
 800218a:	461c      	mov	r4, r3
 800218c:	8a7b      	ldrh	r3, [r7, #18]
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fb04 	bl	800079c <__aeabi_i2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4619      	mov	r1, r3
 8002198:	4620      	mov	r0, r4
 800219a:	f7fe fa4b 	bl	8000634 <__addsf3>
 800219e:	4603      	mov	r3, r0
                    dConv.CodeX = ((((float) (dConv.Ca1 - dConv.Ca0))
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
                    cp->set_level_status = SUCCESS;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2200      	movs	r2, #0
 80021a6:	725a      	strb	r2, [r3, #9]
                    return dConv.CodeX; //2400 -> 2662
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fc9a 	bl	8000ae4 <__aeabi_f2uiz>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	e006      	b.n	80021c4 <volt2dgt+0xe58>
                    break;
                }
                else {
                    /*Возвращаем статус -> вышли за область памяти таблицы */
                    return cp->set_level_status = ERROR;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2201      	movs	r2, #1
 80021ba:	725a      	strb	r2, [r3, #9]
 80021bc:	2301      	movs	r3, #1
 80021be:	e001      	b.n	80021c4 <volt2dgt+0xe58>
            break;
 80021c0:	bf00      	nop
                    break;
                }
            }
        }
    }
    return 0;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bdb0      	pop	{r4, r5, r7, pc}

080021cc <SetDacA>:
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */

/* Установка режима ЦАП А */
void SetDacA(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    switch (comparison_parameter.relay_state) {
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <SetDacA+0xb0>)
 80021d2:	7a1b      	ldrb	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d028      	beq.n	800222a <SetDacA+0x5e>
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d14d      	bne.n	8002278 <SetDacA+0xac>
        case M12:
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <SetDacA+0xb0>)
 80021de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <SetDacA+0xb4>)
 80021e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	db1a      	blt.n	8002222 <SetDacA+0x56>
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_12)
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <SetDacA+0xb0>)
 80021ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <SetDacA+0xb4>)
 80021f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 80021f8:	429a      	cmp	r2, r3
 80021fa:	dc12      	bgt.n	8002222 <SetDacA+0x56>
            {
                comparison_parameter.dac_A_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_A );
 80021fc:	2200      	movs	r2, #0
 80021fe:	491f      	ldr	r1, [pc, #124]	; (800227c <SetDacA+0xb0>)
 8002200:	481f      	ldr	r0, [pc, #124]	; (8002280 <SetDacA+0xb4>)
 8002202:	f7ff f8b3 	bl	800136c <volt2dgt>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <SetDacA+0xb0>)
 800220c:	809a      	strh	r2, [r3, #4]
                DAC_AD5322_Ch1(&hspi1, comparison_parameter.dac_A_dgt);
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <SetDacA+0xb0>)
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	4619      	mov	r1, r3
 8002214:	481b      	ldr	r0, [pc, #108]	; (8002284 <SetDacA+0xb8>)
 8002216:	f7fe fcb1 	bl	8000b7c <DAC_AD5322_Ch1>
                comparison_parameter.set_level_status = SUCCESS;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <SetDacA+0xb0>)
 800221c:	2200      	movs	r2, #0
 800221e:	725a      	strb	r2, [r3, #9]
                break;
 8002220:	e02a      	b.n	8002278 <SetDacA+0xac>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <SetDacA+0xb0>)
 8002224:	2201      	movs	r2, #1
 8002226:	725a      	strb	r2, [r3, #9]
                break;
 8002228:	e026      	b.n	8002278 <SetDacA+0xac>
            }

        case M27:
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <SetDacA+0xb0>)
 800222c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <SetDacA+0xb4>)
 8002232:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002236:	429a      	cmp	r2, r3
 8002238:	db1a      	blt.n	8002270 <SetDacA+0xa4>
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_27)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <SetDacA+0xb0>)
 800223c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <SetDacA+0xb4>)
 8002242:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 8002246:	429a      	cmp	r2, r3
 8002248:	dc12      	bgt.n	8002270 <SetDacA+0xa4>
            {
                comparison_parameter.dac_A_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_A );
 800224a:	2200      	movs	r2, #0
 800224c:	490b      	ldr	r1, [pc, #44]	; (800227c <SetDacA+0xb0>)
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <SetDacA+0xb4>)
 8002250:	f7ff f88c 	bl	800136c <volt2dgt>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <SetDacA+0xb0>)
 800225a:	809a      	strh	r2, [r3, #4]
                DAC_AD5322_Ch1(&hspi1, comparison_parameter.dac_A_dgt);
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <SetDacA+0xb0>)
 800225e:	889b      	ldrh	r3, [r3, #4]
 8002260:	4619      	mov	r1, r3
 8002262:	4808      	ldr	r0, [pc, #32]	; (8002284 <SetDacA+0xb8>)
 8002264:	f7fe fc8a 	bl	8000b7c <DAC_AD5322_Ch1>
                comparison_parameter.set_level_status = SUCCESS;
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <SetDacA+0xb0>)
 800226a:	2200      	movs	r2, #0
 800226c:	725a      	strb	r2, [r3, #9]
                break;
 800226e:	e003      	b.n	8002278 <SetDacA+0xac>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <SetDacA+0xb0>)
 8002272:	2201      	movs	r2, #1
 8002274:	725a      	strb	r2, [r3, #9]
                break;
 8002276:	bf00      	nop
            }
        }
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000044 	.word	0x20000044
 8002280:	2000047c 	.word	0x2000047c
 8002284:	200008fc 	.word	0x200008fc

08002288 <SetDacB>:

/* Установка режима ЦАП B */
void SetDacB(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
    switch (comparison_parameter.relay_state) {
 800228c:	4b2a      	ldr	r3, [pc, #168]	; (8002338 <SetDacB+0xb0>)
 800228e:	7a1b      	ldrb	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d028      	beq.n	80022e6 <SetDacB+0x5e>
 8002294:	2b01      	cmp	r3, #1
 8002296:	d14d      	bne.n	8002334 <SetDacB+0xac>
        case M12:
            if ( comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <SetDacB+0xb0>)
 800229a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <SetDacB+0xb4>)
 80022a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	db1a      	blt.n	80022de <SetDacB+0x56>
                 comparison_parameter.dac_B_volt <= DevNVRAM.calibration_table.volt_max_mode_12)
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <SetDacB+0xb0>)
 80022aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <SetDacB+0xb4>)
 80022b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            if ( comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 80022b4:	429a      	cmp	r2, r3
 80022b6:	dc12      	bgt.n	80022de <SetDacB+0x56>
            {
                comparison_parameter.dac_B_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_B);
 80022b8:	2201      	movs	r2, #1
 80022ba:	491f      	ldr	r1, [pc, #124]	; (8002338 <SetDacB+0xb0>)
 80022bc:	481f      	ldr	r0, [pc, #124]	; (800233c <SetDacB+0xb4>)
 80022be:	f7ff f855 	bl	800136c <volt2dgt>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <SetDacB+0xb0>)
 80022c8:	80da      	strh	r2, [r3, #6]
                DAC_AD5322_Ch2(&hspi1, comparison_parameter.dac_B_dgt);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <SetDacB+0xb0>)
 80022cc:	88db      	ldrh	r3, [r3, #6]
 80022ce:	4619      	mov	r1, r3
 80022d0:	481b      	ldr	r0, [pc, #108]	; (8002340 <SetDacB+0xb8>)
 80022d2:	f7fe fc9a 	bl	8000c0a <DAC_AD5322_Ch2>
                comparison_parameter.set_level_status = SUCCESS;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <SetDacB+0xb0>)
 80022d8:	2200      	movs	r2, #0
 80022da:	725a      	strb	r2, [r3, #9]
                break;
 80022dc:	e02a      	b.n	8002334 <SetDacB+0xac>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <SetDacB+0xb0>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	725a      	strb	r2, [r3, #9]
                break;
 80022e4:	e026      	b.n	8002334 <SetDacB+0xac>
            }

        case M27:
            if ( comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <SetDacB+0xb0>)
 80022e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022ec:	4b13      	ldr	r3, [pc, #76]	; (800233c <SetDacB+0xb4>)
 80022ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	db1a      	blt.n	800232c <SetDacB+0xa4>
                 comparison_parameter.dac_B_volt <= DevNVRAM.calibration_table.volt_max_mode_27)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <SetDacB+0xb0>)
 80022f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <SetDacB+0xb4>)
 80022fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
            if ( comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 8002302:	429a      	cmp	r2, r3
 8002304:	dc12      	bgt.n	800232c <SetDacB+0xa4>
            {
                comparison_parameter.dac_B_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_B);
 8002306:	2201      	movs	r2, #1
 8002308:	490b      	ldr	r1, [pc, #44]	; (8002338 <SetDacB+0xb0>)
 800230a:	480c      	ldr	r0, [pc, #48]	; (800233c <SetDacB+0xb4>)
 800230c:	f7ff f82e 	bl	800136c <volt2dgt>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <SetDacB+0xb0>)
 8002316:	80da      	strh	r2, [r3, #6]
                DAC_AD5322_Ch2(&hspi1, comparison_parameter.dac_B_dgt);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <SetDacB+0xb0>)
 800231a:	88db      	ldrh	r3, [r3, #6]
 800231c:	4619      	mov	r1, r3
 800231e:	4808      	ldr	r0, [pc, #32]	; (8002340 <SetDacB+0xb8>)
 8002320:	f7fe fc73 	bl	8000c0a <DAC_AD5322_Ch2>
                comparison_parameter.set_level_status = SUCCESS;
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <SetDacB+0xb0>)
 8002326:	2200      	movs	r2, #0
 8002328:	725a      	strb	r2, [r3, #9]
                break;
 800232a:	e003      	b.n	8002334 <SetDacB+0xac>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 800232c:	4b02      	ldr	r3, [pc, #8]	; (8002338 <SetDacB+0xb0>)
 800232e:	2201      	movs	r2, #1
 8002330:	725a      	strb	r2, [r3, #9]
                break;
 8002332:	bf00      	nop
            }
        }
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000044 	.word	0x20000044
 800233c:	2000047c 	.word	0x2000047c
 8002340:	200008fc 	.word	0x200008fc

08002344 <SetAllDAC>:

/* Установка режимов */
void SetAllDAC(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
    switch (comparison_parameter.relay_state) {
 8002348:	4b46      	ldr	r3, [pc, #280]	; (8002464 <SetAllDAC+0x120>)
 800234a:	7a1b      	ldrb	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d044      	beq.n	80023da <SetAllDAC+0x96>
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 8084 	bne.w	800245e <SetAllDAC+0x11a>
        case M12:
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <SetAllDAC+0x120>)
 8002358:	f9b3 2000 	ldrsh.w	r2, [r3]
 800235c:	4b42      	ldr	r3, [pc, #264]	; (8002468 <SetAllDAC+0x124>)
 800235e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002362:	429a      	cmp	r2, r3
 8002364:	db35      	blt.n	80023d2 <SetAllDAC+0x8e>
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_12 &&
 8002366:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <SetAllDAC+0x120>)
 8002368:	f9b3 2000 	ldrsh.w	r2, [r3]
 800236c:	4b3e      	ldr	r3, [pc, #248]	; (8002468 <SetAllDAC+0x124>)
 800236e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 8002372:	429a      	cmp	r2, r3
 8002374:	dc2d      	bgt.n	80023d2 <SetAllDAC+0x8e>
                 comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <SetAllDAC+0x120>)
 8002378:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800237c:	4b3a      	ldr	r3, [pc, #232]	; (8002468 <SetAllDAC+0x124>)
 800237e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_12 &&
 8002382:	429a      	cmp	r2, r3
 8002384:	db25      	blt.n	80023d2 <SetAllDAC+0x8e>
                 comparison_parameter.dac_B_volt <= DevNVRAM.calibration_table.volt_max_mode_12 )
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <SetAllDAC+0x120>)
 8002388:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <SetAllDAC+0x124>)
 800238e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
                 comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_12 &&
 8002392:	429a      	cmp	r2, r3
 8002394:	dc1d      	bgt.n	80023d2 <SetAllDAC+0x8e>
            {
                comparison_parameter.dac_A_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_A );
 8002396:	2200      	movs	r2, #0
 8002398:	4932      	ldr	r1, [pc, #200]	; (8002464 <SetAllDAC+0x120>)
 800239a:	4833      	ldr	r0, [pc, #204]	; (8002468 <SetAllDAC+0x124>)
 800239c:	f7fe ffe6 	bl	800136c <volt2dgt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <SetAllDAC+0x120>)
 80023a6:	809a      	strh	r2, [r3, #4]
                comparison_parameter.dac_B_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_B );
 80023a8:	2201      	movs	r2, #1
 80023aa:	492e      	ldr	r1, [pc, #184]	; (8002464 <SetAllDAC+0x120>)
 80023ac:	482e      	ldr	r0, [pc, #184]	; (8002468 <SetAllDAC+0x124>)
 80023ae:	f7fe ffdd 	bl	800136c <volt2dgt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <SetAllDAC+0x120>)
 80023b8:	80da      	strh	r2, [r3, #6]
                DAC_AD5322_Ch1Ch2(&hspi1, comparison_parameter.dac_A_dgt, comparison_parameter.dac_B_dgt);
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <SetAllDAC+0x120>)
 80023bc:	889b      	ldrh	r3, [r3, #4]
 80023be:	4a29      	ldr	r2, [pc, #164]	; (8002464 <SetAllDAC+0x120>)
 80023c0:	88d2      	ldrh	r2, [r2, #6]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4829      	ldr	r0, [pc, #164]	; (800246c <SetAllDAC+0x128>)
 80023c6:	f7fe fc67 	bl	8000c98 <DAC_AD5322_Ch1Ch2>
                comparison_parameter.set_level_status = SUCCESS;
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <SetAllDAC+0x120>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	725a      	strb	r2, [r3, #9]
                break;
 80023d0:	e045      	b.n	800245e <SetAllDAC+0x11a>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <SetAllDAC+0x120>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	725a      	strb	r2, [r3, #9]
                break;
 80023d8:	e041      	b.n	800245e <SetAllDAC+0x11a>
            }
        case M27:
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <SetAllDAC+0x120>)
 80023dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <SetAllDAC+0x124>)
 80023e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	db35      	blt.n	8002456 <SetAllDAC+0x112>
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_27 &&
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <SetAllDAC+0x120>)
 80023ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <SetAllDAC+0x124>)
 80023f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
            if ( comparison_parameter.dac_A_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 80023f6:	429a      	cmp	r2, r3
 80023f8:	dc2d      	bgt.n	8002456 <SetAllDAC+0x112>
                 comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <SetAllDAC+0x120>)
 80023fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <SetAllDAC+0x124>)
 8002402:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
                 comparison_parameter.dac_A_volt <= DevNVRAM.calibration_table.volt_max_mode_27 &&
 8002406:	429a      	cmp	r2, r3
 8002408:	db25      	blt.n	8002456 <SetAllDAC+0x112>
                 comparison_parameter.dac_B_volt <= DevNVRAM.calibration_table.volt_max_mode_27 )
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <SetAllDAC+0x120>)
 800240c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <SetAllDAC+0x124>)
 8002412:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
                 comparison_parameter.dac_B_volt >= DevNVRAM.calibration_table.volt_min_mode_27 &&
 8002416:	429a      	cmp	r2, r3
 8002418:	dc1d      	bgt.n	8002456 <SetAllDAC+0x112>
            {
                comparison_parameter.dac_A_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_A );
 800241a:	2200      	movs	r2, #0
 800241c:	4911      	ldr	r1, [pc, #68]	; (8002464 <SetAllDAC+0x120>)
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <SetAllDAC+0x124>)
 8002420:	f7fe ffa4 	bl	800136c <volt2dgt>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <SetAllDAC+0x120>)
 800242a:	809a      	strh	r2, [r3, #4]
                comparison_parameter.dac_B_dgt = volt2dgt( &(DevNVRAM.calibration_table), &comparison_parameter, CH_B );
 800242c:	2201      	movs	r2, #1
 800242e:	490d      	ldr	r1, [pc, #52]	; (8002464 <SetAllDAC+0x120>)
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <SetAllDAC+0x124>)
 8002432:	f7fe ff9b 	bl	800136c <volt2dgt>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <SetAllDAC+0x120>)
 800243c:	80da      	strh	r2, [r3, #6]
                DAC_AD5322_Ch1Ch2(&hspi1, comparison_parameter.dac_A_dgt, comparison_parameter.dac_B_dgt);
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <SetAllDAC+0x120>)
 8002440:	889b      	ldrh	r3, [r3, #4]
 8002442:	4a08      	ldr	r2, [pc, #32]	; (8002464 <SetAllDAC+0x120>)
 8002444:	88d2      	ldrh	r2, [r2, #6]
 8002446:	4619      	mov	r1, r3
 8002448:	4808      	ldr	r0, [pc, #32]	; (800246c <SetAllDAC+0x128>)
 800244a:	f7fe fc25 	bl	8000c98 <DAC_AD5322_Ch1Ch2>
                comparison_parameter.set_level_status = SUCCESS;
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SetAllDAC+0x120>)
 8002450:	2200      	movs	r2, #0
 8002452:	725a      	strb	r2, [r3, #9]
                break;
 8002454:	e003      	b.n	800245e <SetAllDAC+0x11a>
            }
            else {
                comparison_parameter.set_level_status = ERROR;
 8002456:	4b03      	ldr	r3, [pc, #12]	; (8002464 <SetAllDAC+0x120>)
 8002458:	2201      	movs	r2, #1
 800245a:	725a      	strb	r2, [r3, #9]
                break;
 800245c:	bf00      	nop
            }
    }
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000044 	.word	0x20000044
 8002468:	2000047c 	.word	0x2000047c
 800246c:	200008fc 	.word	0x200008fc

08002470 <unit_test>:

uint32_t unit_test(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
    uint32_t result = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]

    /*проверка на вхождение в MIN m12*/
    comparison_parameter.relay_state = M12;
 800247a:	4ba4      	ldr	r3, [pc, #656]	; (800270c <unit_test+0x29c>)
 800247c:	2201      	movs	r2, #1
 800247e:	721a      	strb	r2, [r3, #8]
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_12;
 8002480:	4ba3      	ldr	r3, [pc, #652]	; (8002710 <unit_test+0x2a0>)
 8002482:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002486:	4ba1      	ldr	r3, [pc, #644]	; (800270c <unit_test+0x29c>)
 8002488:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_12;
 800248a:	4ba1      	ldr	r3, [pc, #644]	; (8002710 <unit_test+0x2a0>)
 800248c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8002490:	4b9e      	ldr	r3, [pc, #632]	; (800270c <unit_test+0x29c>)
 8002492:	805a      	strh	r2, [r3, #2]
    SetDacA();
 8002494:	f7ff fe9a 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status == ERROR)
 8002498:	4b9c      	ldr	r3, [pc, #624]	; (800270c <unit_test+0x29c>)
 800249a:	7a5b      	ldrb	r3, [r3, #9]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <unit_test+0x34>
    {
        result = (1 << 0);
 80024a0:	2301      	movs	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 80024a4:	f7ff fef0 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status == ERROR)
 80024a8:	4b98      	ldr	r3, [pc, #608]	; (800270c <unit_test+0x29c>)
 80024aa:	7a5b      	ldrb	r3, [r3, #9]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <unit_test+0x44>
    {
        result = (1 << 0);
 80024b0:	2301      	movs	r3, #1
 80024b2:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из MIN m12*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_12 - 1;
 80024b4:	4b96      	ldr	r3, [pc, #600]	; (8002710 <unit_test+0x2a0>)
 80024b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	4b92      	ldr	r3, [pc, #584]	; (800270c <unit_test+0x29c>)
 80024c4:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_12 - 1;
 80024c6:	4b92      	ldr	r3, [pc, #584]	; (8002710 <unit_test+0x2a0>)
 80024c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	4b8d      	ldr	r3, [pc, #564]	; (800270c <unit_test+0x29c>)
 80024d6:	805a      	strh	r2, [r3, #2]
    SetDacA();
 80024d8:	f7ff fe78 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status != ERROR)
 80024dc:	4b8b      	ldr	r3, [pc, #556]	; (800270c <unit_test+0x29c>)
 80024de:	7a5b      	ldrb	r3, [r3, #9]
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <unit_test+0x7e>
    {
        result = (1 << 1);
 80024ea:	2302      	movs	r3, #2
 80024ec:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 80024ee:	f7ff fecb 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status != ERROR)
 80024f2:	4b86      	ldr	r3, [pc, #536]	; (800270c <unit_test+0x29c>)
 80024f4:	7a5b      	ldrb	r3, [r3, #9]
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <unit_test+0x94>
    {
        result = (1 << 1);
 8002500:	2302      	movs	r3, #2
 8002502:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из MAX m12*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_12 + 1;
 8002504:	4b82      	ldr	r3, [pc, #520]	; (8002710 <unit_test+0x2a0>)
 8002506:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800250a:	b29b      	uxth	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	b29b      	uxth	r3, r3
 8002510:	b21a      	sxth	r2, r3
 8002512:	4b7e      	ldr	r3, [pc, #504]	; (800270c <unit_test+0x29c>)
 8002514:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_12 + 1;
 8002516:	4b7e      	ldr	r3, [pc, #504]	; (8002710 <unit_test+0x2a0>)
 8002518:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800251c:	b29b      	uxth	r3, r3
 800251e:	3301      	adds	r3, #1
 8002520:	b29b      	uxth	r3, r3
 8002522:	b21a      	sxth	r2, r3
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <unit_test+0x29c>)
 8002526:	805a      	strh	r2, [r3, #2]
    SetDacA();
 8002528:	f7ff fe50 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status != ERROR)
 800252c:	4b77      	ldr	r3, [pc, #476]	; (800270c <unit_test+0x29c>)
 800252e:	7a5b      	ldrb	r3, [r3, #9]
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <unit_test+0xce>
    {
        result = (1 << 2);
 800253a:	2304      	movs	r3, #4
 800253c:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 800253e:	f7ff fea3 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status != ERROR)
 8002542:	4b72      	ldr	r3, [pc, #456]	; (800270c <unit_test+0x29c>)
 8002544:	7a5b      	ldrb	r3, [r3, #9]
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <unit_test+0xe4>
    {
        result = (1 << 2);
 8002550:	2304      	movs	r3, #4
 8002552:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из норм m12*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_12;
 8002554:	4b6e      	ldr	r3, [pc, #440]	; (8002710 <unit_test+0x2a0>)
 8002556:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800255a:	4b6c      	ldr	r3, [pc, #432]	; (800270c <unit_test+0x29c>)
 800255c:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_12;
 800255e:	4b6c      	ldr	r3, [pc, #432]	; (8002710 <unit_test+0x2a0>)
 8002560:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002564:	4b69      	ldr	r3, [pc, #420]	; (800270c <unit_test+0x29c>)
 8002566:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 8002568:	f7ff feec 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status == ERROR)
 800256c:	4b67      	ldr	r3, [pc, #412]	; (800270c <unit_test+0x29c>)
 800256e:	7a5b      	ldrb	r3, [r3, #9]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <unit_test+0x108>
    {
        result = (1 << 3);
 8002574:	2308      	movs	r3, #8
 8002576:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из мин m12*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_12 - 1;
 8002578:	4b65      	ldr	r3, [pc, #404]	; (8002710 <unit_test+0x2a0>)
 800257a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29b      	uxth	r3, r3
 8002584:	b21a      	sxth	r2, r3
 8002586:	4b61      	ldr	r3, [pc, #388]	; (800270c <unit_test+0x29c>)
 8002588:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_12 - 1;
 800258a:	4b61      	ldr	r3, [pc, #388]	; (8002710 <unit_test+0x2a0>)
 800258c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29b      	uxth	r3, r3
 8002596:	b21a      	sxth	r2, r3
 8002598:	4b5c      	ldr	r3, [pc, #368]	; (800270c <unit_test+0x29c>)
 800259a:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 800259c:	f7ff fed2 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status != ERROR)
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <unit_test+0x29c>)
 80025a2:	7a5b      	ldrb	r3, [r3, #9]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <unit_test+0x142>
    {
        result = (1 << 4);
 80025ae:	2310      	movs	r3, #16
 80025b0:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из макс m12*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_12 + 1;
 80025b2:	4b57      	ldr	r3, [pc, #348]	; (8002710 <unit_test+0x2a0>)
 80025b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b21a      	sxth	r2, r3
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <unit_test+0x29c>)
 80025c2:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_12 + 1;
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <unit_test+0x2a0>)
 80025c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <unit_test+0x29c>)
 80025d4:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 80025d6:	f7ff feb5 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status != ERROR)
 80025da:	4b4c      	ldr	r3, [pc, #304]	; (800270c <unit_test+0x29c>)
 80025dc:	7a5b      	ldrb	r3, [r3, #9]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <unit_test+0x17c>
    {
        result = (1 << 5);
 80025e8:	2320      	movs	r3, #32
 80025ea:	607b      	str	r3, [r7, #4]
    }



    /*проверка на вхождение в MIN m27*/
    comparison_parameter.relay_state = M27;
 80025ec:	4b47      	ldr	r3, [pc, #284]	; (800270c <unit_test+0x29c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	721a      	strb	r2, [r3, #8]
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_27;
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <unit_test+0x2a0>)
 80025f4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80025f8:	4b44      	ldr	r3, [pc, #272]	; (800270c <unit_test+0x29c>)
 80025fa:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_27;
 80025fc:	4b44      	ldr	r3, [pc, #272]	; (8002710 <unit_test+0x2a0>)
 80025fe:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002602:	4b42      	ldr	r3, [pc, #264]	; (800270c <unit_test+0x29c>)
 8002604:	805a      	strh	r2, [r3, #2]
    SetDacA();
 8002606:	f7ff fde1 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status == ERROR)
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <unit_test+0x29c>)
 800260c:	7a5b      	ldrb	r3, [r3, #9]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <unit_test+0x1a6>
    {
        result = (1 << 6);
 8002612:	2340      	movs	r3, #64	; 0x40
 8002614:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 8002616:	f7ff fe37 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status == ERROR)
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <unit_test+0x29c>)
 800261c:	7a5b      	ldrb	r3, [r3, #9]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <unit_test+0x1b6>
    {
        result = (1 << 6);
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из MIN m27*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_27 - 1;
 8002626:	4b3a      	ldr	r3, [pc, #232]	; (8002710 <unit_test+0x2a0>)
 8002628:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	b21a      	sxth	r2, r3
 8002634:	4b35      	ldr	r3, [pc, #212]	; (800270c <unit_test+0x29c>)
 8002636:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_27 - 1;
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <unit_test+0x2a0>)
 800263a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	b21a      	sxth	r2, r3
 8002646:	4b31      	ldr	r3, [pc, #196]	; (800270c <unit_test+0x29c>)
 8002648:	805a      	strh	r2, [r3, #2]
    SetDacA();
 800264a:	f7ff fdbf 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status != ERROR)
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <unit_test+0x29c>)
 8002650:	7a5b      	ldrb	r3, [r3, #9]
 8002652:	f083 0301 	eor.w	r3, r3, #1
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <unit_test+0x1f0>
    {
        result = (1 << 7);
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 8002660:	f7ff fe12 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status != ERROR)
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <unit_test+0x29c>)
 8002666:	7a5b      	ldrb	r3, [r3, #9]
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <unit_test+0x206>
    {
        result = (1 << 7);
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из MAX m27*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_27 + 1;
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <unit_test+0x2a0>)
 8002678:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800267c:	b29b      	uxth	r3, r3
 800267e:	3301      	adds	r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	b21a      	sxth	r2, r3
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <unit_test+0x29c>)
 8002686:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_27 + 1;
 8002688:	4b21      	ldr	r3, [pc, #132]	; (8002710 <unit_test+0x2a0>)
 800268a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800268e:	b29b      	uxth	r3, r3
 8002690:	3301      	adds	r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	b21a      	sxth	r2, r3
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <unit_test+0x29c>)
 8002698:	805a      	strh	r2, [r3, #2]
    SetDacA();
 800269a:	f7ff fd97 	bl	80021cc <SetDacA>
    if (comparison_parameter.set_level_status != ERROR)
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <unit_test+0x29c>)
 80026a0:	7a5b      	ldrb	r3, [r3, #9]
 80026a2:	f083 0301 	eor.w	r3, r3, #1
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <unit_test+0x242>
    {
        result = (1 << 8);
 80026ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b0:	607b      	str	r3, [r7, #4]
    }
    SetDacB();
 80026b2:	f7ff fde9 	bl	8002288 <SetDacB>
    if (comparison_parameter.set_level_status != ERROR)
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <unit_test+0x29c>)
 80026b8:	7a5b      	ldrb	r3, [r3, #9]
 80026ba:	f083 0301 	eor.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <unit_test+0x25a>
    {
        result = (1 << 8);
 80026c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c8:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из норм m27 */
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_27;
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <unit_test+0x2a0>)
 80026cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <unit_test+0x29c>)
 80026d2:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_27;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <unit_test+0x2a0>)
 80026d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <unit_test+0x29c>)
 80026dc:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 80026de:	f7ff fe31 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status == ERROR)
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <unit_test+0x29c>)
 80026e4:	7a5b      	ldrb	r3, [r3, #9]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <unit_test+0x280>
    {
        result = (1 << 9);
 80026ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ee:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из мин m27*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_min_mode_27 - 1;
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <unit_test+0x2a0>)
 80026f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <unit_test+0x29c>)
 8002700:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_min_mode_27 - 1;
 8002702:	4b03      	ldr	r3, [pc, #12]	; (8002710 <unit_test+0x2a0>)
 8002704:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002708:	b29b      	uxth	r3, r3
 800270a:	e003      	b.n	8002714 <unit_test+0x2a4>
 800270c:	20000044 	.word	0x20000044
 8002710:	2000047c 	.word	0x2000047c
 8002714:	3b01      	subs	r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	b21a      	sxth	r2, r3
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <unit_test+0x300>)
 800271c:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 800271e:	f7ff fe11 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status == ERROR)
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <unit_test+0x300>)
 8002724:	7a5b      	ldrb	r3, [r3, #9]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <unit_test+0x2c0>
    {
        result = (1 << 10);
 800272a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800272e:	607b      	str	r3, [r7, #4]
    }

    /*проверка на выход из макс m27*/
    comparison_parameter.dac_A_volt = DevNVRAM.calibration_table.volt_max_mode_27 + 1;
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <unit_test+0x304>)
 8002732:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002736:	b29b      	uxth	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	b29b      	uxth	r3, r3
 800273c:	b21a      	sxth	r2, r3
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <unit_test+0x300>)
 8002740:	801a      	strh	r2, [r3, #0]
    comparison_parameter.dac_B_volt = DevNVRAM.calibration_table.volt_max_mode_27 + 1;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <unit_test+0x304>)
 8002744:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002748:	b29b      	uxth	r3, r3
 800274a:	3301      	adds	r3, #1
 800274c:	b29b      	uxth	r3, r3
 800274e:	b21a      	sxth	r2, r3
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <unit_test+0x300>)
 8002752:	805a      	strh	r2, [r3, #2]
    SetAllDAC();
 8002754:	f7ff fdf6 	bl	8002344 <SetAllDAC>
    if (comparison_parameter.set_level_status == ERROR)
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <unit_test+0x300>)
 800275a:	7a5b      	ldrb	r3, [r3, #9]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <unit_test+0x2f6>
    {
        result = (1 << 11);
 8002760:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002764:	607b      	str	r3, [r7, #4]
    }

    /* Нужно сравнить таблицу загруженную во флеш и таблицу, которая должна быть там */
    /*  */

    return result;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000044 	.word	0x20000044
 8002774:	2000047c 	.word	0x2000047c

08002778 <EnableTIM3>:

/*---------------------------------------------------------------------------*/
inline void EnableTIM3(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	calibration.is_tim_working = 1;
 800277c:	4b03      	ldr	r3, [pc, #12]	; (800278c <EnableTIM3+0x14>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000204 	.word	0x20000204

08002790 <GetTIM3>:

inline uint16_t GetTIM3(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
	return calibration.g_tim3;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <GetTIM3+0x10>)
 8002796:	889b      	ldrh	r3, [r3, #4]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000204 	.word	0x20000204

080027a4 <EnableTIM4>:
    calibration.g_tim4 = 0;
}

/*---------------------------------------------------------------------------*/
inline void EnableTIM4(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	calibration.is_tim_working = 0;
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <EnableTIM4+0x14>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000204 	.word	0x20000204

080027bc <GetTIM4>:

inline uint16_t GetTIM4(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	return calibration.g_tim4;
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <GetTIM4+0x10>)
 80027c2:	88db      	ldrh	r3, [r3, #6]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	20000204 	.word	0x20000204

080027d0 <HAL_TIM_IC_CaptureCallback>:
	calibration.g_tim4 = 0;
}

/*---------------------------------------------------------------------------*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	uint16_t periodTIM3, pulseWidthTIM3, periodTIM4, pulseWidthTIM4;

	if (calibration.is_tim_working == 1)
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d127      	bne.n	8002830 <HAL_TIM_IC_CaptureCallback+0x60>
	{
		if (htim->Instance == TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a29      	ldr	r2, [pc, #164]	; (800288c <HAL_TIM_IC_CaptureCallback+0xbc>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d149      	bne.n	800287e <HAL_TIM_IC_CaptureCallback+0xae>
		{
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d145      	bne.n	800287e <HAL_TIM_IC_CaptureCallback+0xae>
			{
				periodTIM3      = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80027f2:	2100      	movs	r1, #0
 80027f4:	4826      	ldr	r0, [pc, #152]	; (8002890 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80027f6:	f005 fa97 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 80027fa:	4603      	mov	r3, r0
 80027fc:	823b      	strh	r3, [r7, #16]
				pulseWidthTIM3  = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80027fe:	2104      	movs	r1, #4
 8002800:	4823      	ldr	r0, [pc, #140]	; (8002890 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002802:	f005 fa91 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 8002806:	4603      	mov	r3, r0
 8002808:	81fb      	strh	r3, [r7, #14]

				TIM3->CNT = 0;
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_TIM_IC_CaptureCallback+0xbc>)
 800280c:	2200      	movs	r2, #0
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

				int16_t deltaTIM3   = (int16_t)periodTIM3 - (int16_t)pulseWidthTIM3;
 8002810:	8a3a      	ldrh	r2, [r7, #16]
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29b      	uxth	r3, r3
 8002818:	81bb      	strh	r3, [r7, #12]
				deltaTIM3           = (deltaTIM3 < 0) ? (-1 * deltaTIM3) : deltaTIM3;
 800281a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	bfb8      	it	lt
 8002822:	425b      	neglt	r3, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	81bb      	strh	r3, [r7, #12]
				calibration.g_tim3  = deltaTIM3;
 8002828:	89ba      	ldrh	r2, [r7, #12]
 800282a:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800282c:	809a      	strh	r2, [r3, #4]
				deltaTIM4           = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
				calibration.g_tim4  = deltaTIM4;
			}
		}
	}
}
 800282e:	e026      	b.n	800287e <HAL_TIM_IC_CaptureCallback+0xae>
		if (htim->Instance == TIM4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d121      	bne.n	800287e <HAL_TIM_IC_CaptureCallback+0xae>
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7f1b      	ldrb	r3, [r3, #28]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11d      	bne.n	800287e <HAL_TIM_IC_CaptureCallback+0xae>
				periodTIM4      = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002842:	2100      	movs	r1, #0
 8002844:	4814      	ldr	r0, [pc, #80]	; (8002898 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002846:	f005 fa6f 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 800284a:	4603      	mov	r3, r0
 800284c:	82fb      	strh	r3, [r7, #22]
				pulseWidthTIM4  = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 800284e:	2104      	movs	r1, #4
 8002850:	4811      	ldr	r0, [pc, #68]	; (8002898 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002852:	f005 fa69 	bl	8007d28 <HAL_TIM_ReadCapturedValue>
 8002856:	4603      	mov	r3, r0
 8002858:	82bb      	strh	r3, [r7, #20]
				TIM4->CNT = 0;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
				int16_t deltaTIM4   = (int16_t)periodTIM4 - (int16_t)pulseWidthTIM4;
 8002860:	8afa      	ldrh	r2, [r7, #22]
 8002862:	8abb      	ldrh	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	b29b      	uxth	r3, r3
 8002868:	827b      	strh	r3, [r7, #18]
				deltaTIM4           = (deltaTIM4 < 0) ? (-1 * deltaTIM4) : deltaTIM4;
 800286a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800286e:	2b00      	cmp	r3, #0
 8002870:	bfb8      	it	lt
 8002872:	425b      	neglt	r3, r3
 8002874:	b29b      	uxth	r3, r3
 8002876:	827b      	strh	r3, [r7, #18]
				calibration.g_tim4  = deltaTIM4;
 8002878:	8a7a      	ldrh	r2, [r7, #18]
 800287a:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800287c:	80da      	strh	r2, [r3, #6]
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000204 	.word	0x20000204
 800288c:	40000400 	.word	0x40000400
 8002890:	20000884 	.word	0x20000884
 8002894:	40000800 	.word	0x40000800
 8002898:	20000434 	.word	0x20000434

0800289c <GetADC>:
/* USER CODE BEGIN 0 */

volatile uint16_t volt_ADC = 0;

inline uint16_t GetADC(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	return volt_ADC;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <GetADC+0x14>)
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2000020e 	.word	0x2000020e

080028b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
    /* check if the interrupt comes from ACD1 */
	if (hadc->Instance == ADC1) {
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_ADC_ConvCpltCallback+0x28>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d106      	bne.n	80028d4 <HAL_ADC_ConvCpltCallback+0x20>
		volt_ADC = HAL_ADC_GetValue(&hadc1);
 80028c6:	4806      	ldr	r0, [pc, #24]	; (80028e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80028c8:	f001 fa46 	bl	8003d58 <HAL_ADC_GetValue>
 80028cc:	4603      	mov	r3, r0
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80028d2:	801a      	strh	r2, [r3, #0]
	}
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40012400 	.word	0x40012400
 80028e0:	200008cc 	.word	0x200008cc
 80028e4:	2000020e 	.word	0x2000020e

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

    comparison_parameter.relay_state = M12;
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <main+0x78>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	721a      	strb	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028f2:	f001 f841 	bl	8003978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f6:	f000 f83f 	bl	8002978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028fa:	f000 f9e9 	bl	8002cd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80028fe:	f000 f8eb 	bl	8002ad8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8002902:	f009 fa79 	bl	800bdf8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002906:	f000 f895 	bl	8002a34 <MX_ADC1_Init>
  MX_TIM3_Init();
 800290a:	f000 f91d 	bl	8002b48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800290e:	f000 f97d 	bl	8002c0c <MX_TIM4_Init>
  MX_CRC_Init();
 8002912:	f000 f8cd 	bl	8002ab0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002916:	2100      	movs	r1, #0
 8002918:	4812      	ldr	r0, [pc, #72]	; (8002964 <main+0x7c>)
 800291a:	f004 ff63 	bl	80077e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800291e:	2104      	movs	r1, #4
 8002920:	4810      	ldr	r0, [pc, #64]	; (8002964 <main+0x7c>)
 8002922:	f004 ff5f 	bl	80077e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002926:	2100      	movs	r1, #0
 8002928:	480f      	ldr	r0, [pc, #60]	; (8002968 <main+0x80>)
 800292a:	f004 ff5b 	bl	80077e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 800292e:	2104      	movs	r1, #4
 8002930:	480d      	ldr	r0, [pc, #52]	; (8002968 <main+0x80>)
 8002932:	f004 ff57 	bl	80077e4 <HAL_TIM_IC_Start_IT>

  SetAllDAC();
 8002936:	f7ff fd05 	bl	8002344 <SetAllDAC>

  HAL_ADCEx_Calibration_Start(&hadc1);
 800293a:	480c      	ldr	r0, [pc, #48]	; (800296c <main+0x84>)
 800293c:	f001 fc78 	bl	8004230 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <main+0x84>)
 8002942:	f001 f953 	bl	8003bec <HAL_ADC_Start_IT>

  calib_table_init( &DevNVRAM.calibration_table );
 8002946:	480a      	ldr	r0, [pc, #40]	; (8002970 <main+0x88>)
 8002948:	f7fe fcd2 	bl	80012f0 <calib_table_init>

  unit_test();
 800294c:	f7ff fd90 	bl	8002470 <unit_test>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    if ( usb_rx_data.is_received == true ) {
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <main+0x8c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0fb      	beq.n	8002950 <main+0x68>
	        usb_rx_handler(&usb_rx_data);
 8002958:	4806      	ldr	r0, [pc, #24]	; (8002974 <main+0x8c>)
 800295a:	f000 fc7d 	bl	8003258 <usb_rx_handler>
	    if ( usb_rx_data.is_received == true ) {
 800295e:	e7f7      	b.n	8002950 <main+0x68>
 8002960:	20000044 	.word	0x20000044
 8002964:	20000884 	.word	0x20000884
 8002968:	20000434 	.word	0x20000434
 800296c:	200008cc 	.word	0x200008cc
 8002970:	2000047c 	.word	0x2000047c
 8002974:	20000000 	.word	0x20000000

08002978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b094      	sub	sp, #80	; 0x50
 800297c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002982:	2228      	movs	r2, #40	; 0x28
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f009 ff38 	bl	800c7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029a8:	2301      	movs	r3, #1
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b6:	2301      	movs	r3, #1
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ba:	2302      	movs	r3, #2
 80029bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fed2 	bl	8006778 <HAL_RCC_OscConfig>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80029da:	f000 fa05 	bl	8002de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029de:	230f      	movs	r3, #15
 80029e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	2102      	movs	r1, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 f93c 	bl	8006c78 <HAL_RCC_ClockConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a06:	f000 f9ef 	bl	8002de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002a0a:	2312      	movs	r3, #18
 8002a0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a12:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fab2 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002a26:	f000 f9df 	bl	8002de8 <Error_Handler>
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3750      	adds	r7, #80	; 0x50
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a44:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a46:	4a19      	ldr	r2, [pc, #100]	; (8002aac <MX_ADC1_Init+0x78>)
 8002a48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a5e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a70:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a72:	f000 ffe3 	bl	8003a3c <HAL_ADC_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002a7c:	f000 f9b4 	bl	8002de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a80:	2303      	movs	r3, #3
 8002a82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <MX_ADC1_Init+0x74>)
 8002a92:	f001 fa39 	bl	8003f08 <HAL_ADC_ConfigChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002a9c:	f000 f9a4 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200008cc 	.word	0x200008cc
 8002aac:	40012400 	.word	0x40012400

08002ab0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_CRC_Init+0x20>)
 8002ab6:	4a07      	ldr	r2, [pc, #28]	; (8002ad4 <MX_CRC_Init+0x24>)
 8002ab8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_CRC_Init+0x20>)
 8002abc:	f001 fd7b 	bl	80045b6 <HAL_CRC_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002ac6:	f000 f98f 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000087c 	.word	0x2000087c
 8002ad4:	40023000 	.word	0x40023000

08002ad8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <MX_SPI1_Init+0x6c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ae8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b0e:	2208      	movs	r2, #8
 8002b10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b26:	220a      	movs	r2, #10
 8002b28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b2a:	4805      	ldr	r0, [pc, #20]	; (8002b40 <MX_SPI1_Init+0x68>)
 8002b2c:	f004 fba4 	bl	8007278 <HAL_SPI_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002b36:	f000 f957 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200008fc 	.word	0x200008fc
 8002b44:	40013000 	.word	0x40013000

08002b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4e:	f107 0310 	add.w	r3, r7, #16
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b58:	463b      	mov	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b64:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b66:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <MX_TIM3_Init+0xc0>)
 8002b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b6c:	2247      	movs	r2, #71	; 0x47
 8002b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b78:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002b7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b8a:	481e      	ldr	r0, [pc, #120]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b8c:	f004 fdda 	bl	8007744 <HAL_TIM_IC_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b96:	f000 f927 	bl	8002de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4816      	ldr	r0, [pc, #88]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002baa:	f005 fab9 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002bb4:	f000 f918 	bl	8002de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bc8:	463b      	mov	r3, r7
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002bd0:	f005 f816 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002bda:	f000 f905 	bl	8002de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002bde:	2302      	movs	r3, #2
 8002be0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002be2:	2302      	movs	r3, #2
 8002be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002be6:	463b      	mov	r3, r7
 8002be8:	2204      	movs	r2, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002bee:	f005 f807 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002bf8:	f000 f8f6 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000884 	.word	0x20000884
 8002c08:	40000400 	.word	0x40000400

08002c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	609a      	str	r2, [r3, #8]
 8002c26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <MX_TIM4_Init+0xc0>)
 8002c2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c30:	2247      	movs	r2, #71	; 0x47
 8002c32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c3c:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8002c40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c42:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c4e:	481e      	ldr	r0, [pc, #120]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c50:	f004 fd78 	bl	8007744 <HAL_TIM_IC_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002c5a:	f000 f8c5 	bl	8002de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c66:	f107 0310 	add.w	r3, r7, #16
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4816      	ldr	r0, [pc, #88]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c6e:	f005 fa57 	bl	8008120 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002c78:	f000 f8b6 	bl	8002de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c80:	2301      	movs	r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	2200      	movs	r2, #0
 8002c90:	4619      	mov	r1, r3
 8002c92:	480d      	ldr	r0, [pc, #52]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002c94:	f004 ffb4 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002c9e:	f000 f8a3 	bl	8002de8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002caa:	463b      	mov	r3, r7
 8002cac:	2204      	movs	r2, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_TIM4_Init+0xbc>)
 8002cb2:	f004 ffa5 	bl	8007c00 <HAL_TIM_IC_ConfigChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002cbc:	f000 f894 	bl	8002de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000434 	.word	0x20000434
 8002ccc:	40000800 	.word	0x40000800

08002cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002cea:	f043 0310 	orr.w	r3, r3, #16
 8002cee:	6193      	str	r3, [r2, #24]
 8002cf0:	4b38      	ldr	r3, [pc, #224]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a2e      	ldr	r2, [pc, #184]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2c:	4b29      	ldr	r3, [pc, #164]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a28      	ldr	r2, [pc, #160]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d32:	f043 0308 	orr.w	r3, r3, #8
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <MX_GPIO_Init+0x104>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d44:	2200      	movs	r2, #0
 8002d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d4a:	4823      	ldr	r0, [pc, #140]	; (8002dd8 <MX_GPIO_Init+0x108>)
 8002d4c:	f002 f81d 	bl	8004d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d50:	2200      	movs	r2, #0
 8002d52:	f240 4112 	movw	r1, #1042	; 0x412
 8002d56:	4821      	ldr	r0, [pc, #132]	; (8002ddc <MX_GPIO_Init+0x10c>)
 8002d58:	f002 f817 	bl	8004d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2104      	movs	r1, #4
 8002d60:	481e      	ldr	r0, [pc, #120]	; (8002ddc <MX_GPIO_Init+0x10c>)
 8002d62:	f002 f812 	bl	8004d8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2302      	movs	r3, #2
 8002d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d78:	f107 0310 	add.w	r3, r7, #16
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4816      	ldr	r0, [pc, #88]	; (8002dd8 <MX_GPIO_Init+0x108>)
 8002d80:	f001 fe68 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8002d84:	f240 4316 	movw	r3, #1046	; 0x416
 8002d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d92:	2302      	movs	r3, #2
 8002d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	480f      	ldr	r0, [pc, #60]	; (8002ddc <MX_GPIO_Init+0x10c>)
 8002d9e:	f001 fe59 	bl	8004a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002da2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <MX_GPIO_Init+0x110>)
 8002daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db0:	f107 0310 	add.w	r3, r7, #16
 8002db4:	4619      	mov	r1, r3
 8002db6:	480b      	ldr	r0, [pc, #44]	; (8002de4 <MX_GPIO_Init+0x114>)
 8002db8:	f001 fe4c 	bl	8004a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f001 fbc2 	bl	800454a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc6:	2028      	movs	r0, #40	; 0x28
 8002dc8:	f001 fbdb 	bl	8004582 <HAL_NVIC_EnableIRQ>

}
 8002dcc:	bf00      	nop
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40011000 	.word	0x40011000
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	10310000 	.word	0x10310000
 8002de4:	40010c00 	.word	0x40010c00

08002de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <HAL_MspInit+0x5c>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <HAL_MspInit+0x5c>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6193      	str	r3, [r2, #24]
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <HAL_MspInit+0x5c>)
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_MspInit+0x5c>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_MspInit+0x5c>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	61d3      	str	r3, [r2, #28]
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <HAL_MspInit+0x5c>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_MspInit+0x60>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_MspInit+0x60>)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000

08002e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0310 	add.w	r3, r7, #16
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_ADC_MspInit+0x7c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d129      	bne.n	8002ecc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e78:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e82:	6193      	str	r3, [r2, #24]
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e96:	f043 0304 	orr.w	r3, r3, #4
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_ADC_MspInit+0x80>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eac:	2303      	movs	r3, #3
 8002eae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4809      	ldr	r0, [pc, #36]	; (8002edc <HAL_ADC_MspInit+0x84>)
 8002eb8:	f001 fdcc 	bl	8004a54 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	2012      	movs	r0, #18
 8002ec2:	f001 fb42 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ec6:	2012      	movs	r0, #18
 8002ec8:	f001 fb5b 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40012400 	.word	0x40012400
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010800 	.word	0x40010800

08002ee0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_CRC_MspInit+0x34>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10b      	bne.n	8002f0a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_CRC_MspInit+0x38>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_CRC_MspInit+0x38>)
 8002ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002efc:	6153      	str	r3, [r2, #20]
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_CRC_MspInit+0x38>)
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40023000 	.word	0x40023000
 8002f18:	40021000 	.word	0x40021000

08002f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <HAL_SPI_MspInit+0x70>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d123      	bne.n	8002f84 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_SPI_MspInit+0x74>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8002f6c:	23a0      	movs	r3, #160	; 0xa0
 8002f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <HAL_SPI_MspInit+0x78>)
 8002f80:	f001 fd68 	bl	8004a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40013000 	.word	0x40013000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010800 	.word	0x40010800

08002f98 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	; (80030a0 <HAL_TIM_IC_MspInit+0x108>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d13e      	bne.n	8003036 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4a39      	ldr	r2, [pc, #228]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	61d3      	str	r3, [r2, #28]
 8002fc4:	4b37      	ldr	r3, [pc, #220]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	6193      	str	r3, [r2, #24]
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fe8:	2310      	movs	r3, #16
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	482b      	ldr	r0, [pc, #172]	; (80030a8 <HAL_TIM_IC_MspInit+0x110>)
 8002ffc:	f001 fd2a 	bl	8004a54 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_TIM_IC_MspInit+0x114>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_TIM_IC_MspInit+0x114>)
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	201d      	movs	r0, #29
 800302a:	f001 fa8e 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800302e:	201d      	movs	r0, #29
 8003030:	f001 faa7 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003034:	e030      	b.n	8003098 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <HAL_TIM_IC_MspInit+0x118>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d12b      	bne.n	8003098 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	61d3      	str	r3, [r2, #28]
 800304c:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003058:	4b12      	ldr	r3, [pc, #72]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6193      	str	r3, [r2, #24]
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <HAL_TIM_IC_MspInit+0x10c>)
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003070:	2340      	movs	r3, #64	; 0x40
 8003072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4619      	mov	r1, r3
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <HAL_TIM_IC_MspInit+0x110>)
 8003084:	f001 fce6 	bl	8004a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003088:	2200      	movs	r2, #0
 800308a:	2100      	movs	r1, #0
 800308c:	201e      	movs	r0, #30
 800308e:	f001 fa5c 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003092:	201e      	movs	r0, #30
 8003094:	f001 fa75 	bl	8004582 <HAL_NVIC_EnableIRQ>
}
 8003098:	bf00      	nop
 800309a:	3730      	adds	r7, #48	; 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40010c00 	.word	0x40010c00
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40000800 	.word	0x40000800

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	  printf("HardFault_IRQn");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <HardFault_Handler+0x4>

080030c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <MemManage_Handler+0x4>

080030cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d0:	e7fe      	b.n	80030d0 <BusFault_Handler+0x4>

080030d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d2:	b480      	push	{r7}
 80030d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d6:	e7fe      	b.n	80030d6 <UsageFault_Handler+0x4>

080030d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr

080030f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    if ( btn_pin_12.is_count_started == 1 ) {
 8003100:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <SysTick_Handler+0x78>)
 8003102:	789b      	ldrb	r3, [r3, #2]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10d      	bne.n	8003124 <SysTick_Handler+0x28>
        ++btn_pin_12.counter;
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <SysTick_Handler+0x78>)
 800310a:	889b      	ldrh	r3, [r3, #4]
 800310c:	3301      	adds	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <SysTick_Handler+0x78>)
 8003112:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_12.counter > 1000 ) {
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <SysTick_Handler+0x78>)
 8003116:	889b      	ldrh	r3, [r3, #4]
 8003118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311c:	d902      	bls.n	8003124 <SysTick_Handler+0x28>
            btn_pin_12.is_long_press = 1;
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <SysTick_Handler+0x78>)
 8003120:	2201      	movs	r2, #1
 8003122:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_13.is_count_started == 1 ) {
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <SysTick_Handler+0x7c>)
 8003126:	789b      	ldrb	r3, [r3, #2]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10d      	bne.n	8003148 <SysTick_Handler+0x4c>
        ++btn_pin_13.counter;
 800312c:	4b12      	ldr	r3, [pc, #72]	; (8003178 <SysTick_Handler+0x7c>)
 800312e:	889b      	ldrh	r3, [r3, #4]
 8003130:	3301      	adds	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <SysTick_Handler+0x7c>)
 8003136:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_13.counter > 1000 ) {
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <SysTick_Handler+0x7c>)
 800313a:	889b      	ldrh	r3, [r3, #4]
 800313c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003140:	d902      	bls.n	8003148 <SysTick_Handler+0x4c>
            btn_pin_13.is_long_press = 1;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <SysTick_Handler+0x7c>)
 8003144:	2201      	movs	r2, #1
 8003146:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_14.is_count_started == 1 ) {
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <SysTick_Handler+0x80>)
 800314a:	789b      	ldrb	r3, [r3, #2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10d      	bne.n	800316c <SysTick_Handler+0x70>
        ++btn_pin_14.counter;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <SysTick_Handler+0x80>)
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	3301      	adds	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <SysTick_Handler+0x80>)
 800315a:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_14.counter > 1000 ) {
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <SysTick_Handler+0x80>)
 800315e:	889b      	ldrh	r3, [r3, #4]
 8003160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003164:	d902      	bls.n	800316c <SysTick_Handler+0x70>
            btn_pin_14.is_long_press = 1;
 8003166:	4b05      	ldr	r3, [pc, #20]	; (800317c <SysTick_Handler+0x80>)
 8003168:	2201      	movs	r2, #1
 800316a:	705a      	strb	r2, [r3, #1]
        }
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316c:	f000 fc4a 	bl	8003a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	200001ec 	.word	0x200001ec
 8003178:	200001f4 	.word	0x200001f4
 800317c:	200001fc 	.word	0x200001fc

08003180 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <ADC1_2_IRQHandler+0x10>)
 8003186:	f000 fdf3 	bl	8003d70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200008cc 	.word	0x200008cc

08003194 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800319a:	f001 ff58 	bl	800504e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000160c 	.word	0x2000160c

080031a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <TIM3_IRQHandler+0x10>)
 80031ae:	f004 fc1f 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000884 	.word	0x20000884

080031bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <TIM4_IRQHandler+0x10>)
 80031c2:	f004 fc15 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000434 	.word	0x20000434

080031d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80031d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031d8:	f001 fdf0 	bl	8004dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031e0:	f001 fdec 	bl	8004dbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80031e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031e8:	f001 fde8 	bl	8004dbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <SystemInit+0x5c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <SystemInit+0x5c>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <SystemInit+0x5c>)
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	4911      	ldr	r1, [pc, #68]	; (800324c <SystemInit+0x5c>)
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <SystemInit+0x60>)
 8003208:	4013      	ands	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <SystemInit+0x5c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <SystemInit+0x5c>)
 8003212:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <SystemInit+0x5c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <SystemInit+0x5c>)
 8003222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003226:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <SystemInit+0x5c>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a07      	ldr	r2, [pc, #28]	; (800324c <SystemInit+0x5c>)
 800322e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003232:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <SystemInit+0x5c>)
 8003236:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800323a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SystemInit+0x64>)
 800323e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003242:	609a      	str	r2, [r3, #8]
#endif 
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	f8ff0000 	.word	0xf8ff0000
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <usb_rx_handler>:
 * @brief   USB package handler
 * @note    Len <= 64
 * @retval  HAL Status
 */
HAL_StatusTypeDef usb_rx_handler(usb_rx_data_type *usb)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b09f      	sub	sp, #124	; 0x7c
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
    if ( usb->is_received != true ||
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f083 0301 	eor.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d103      	bne.n	8003276 <usb_rx_handler+0x1e>
         usb->is_handled  != false )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	785b      	ldrb	r3, [r3, #1]
    if ( usb->is_received != true ||
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <usb_rx_handler+0x22>
    {
        /* Если пакет ещё не принят или уже обработан, то
         * ошибка - обрабатывать либо ещё, либо уже нечего. */
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e34e      	b.n	8003918 <usb_rx_handler+0x6c0>
    }
    usb->is_received = false;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	701a      	strb	r2, [r3, #0]

    /*-MAIN HANDLER CODE-----------------------------------------------------*/

    if ( usb->len < 1 || usb->len > 64 ) {
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	789b      	ldrb	r3, [r3, #2]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <usb_rx_handler+0x38>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d901      	bls.n	8003294 <usb_rx_handler+0x3c>
        /* Если размер пакета не соответствует нормальному - ошибка */
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e341      	b.n	8003918 <usb_rx_handler+0x6c0>
     * такого размера будет достаточно. */
    uint8_t     usb_tx_buff[64];
//    /* 16-ти битовая переменная для установки значения ЦАП */
//    uint16_t    tVal16;
    /* Переменная, содержащая текущую команду, сделана для удобства */
    uint8_t     cmd = usb->buff[0];
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    switch (cmd) {
 800329c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80032a0:	3b01      	subs	r3, #1
 80032a2:	2b0d      	cmp	r3, #13
 80032a4:	f200 832e 	bhi.w	8003904 <usb_rx_handler+0x6ac>
 80032a8:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <usb_rx_handler+0x58>)
 80032aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ae:	bf00      	nop
 80032b0:	080032e9 	.word	0x080032e9
 80032b4:	08003351 	.word	0x08003351
 80032b8:	0800338f 	.word	0x0800338f
 80032bc:	080033cd 	.word	0x080033cd
 80032c0:	080033f5 	.word	0x080033f5
 80032c4:	0800342b 	.word	0x0800342b
 80032c8:	0800345f 	.word	0x0800345f
 80032cc:	080034c3 	.word	0x080034c3
 80032d0:	080034ef 	.word	0x080034ef
 80032d4:	0800351b 	.word	0x0800351b
 80032d8:	08003811 	.word	0x08003811
 80032dc:	08003837 	.word	0x08003837
 80032e0:	08003891 	.word	0x08003891
 80032e4:	080038c9 	.word	0x080038c9
        /* Команда включения реле */
        case 0x01 :
            if ( usb->len >= 2 && (usb->buff[1] == 0x01 || usb->buff[1] == 0x00) ) {
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	789b      	ldrb	r3, [r3, #2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d921      	bls.n	8003334 <usb_rx_handler+0xdc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d003      	beq.n	8003300 <usb_rx_handler+0xa8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	791b      	ldrb	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d119      	bne.n	8003334 <usb_rx_handler+0xdc>

                HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8003300:	2201      	movs	r2, #1
 8003302:	2104      	movs	r1, #4
 8003304:	48ca      	ldr	r0, [pc, #808]	; (8003630 <usb_rx_handler+0x3d8>)
 8003306:	f001 fd40 	bl	8004d8a <HAL_GPIO_WritePin>

                if ( usb->buff[1] == 0x01 ) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d103      	bne.n	800331a <usb_rx_handler+0xc2>
                    comparison_parameter.relay_state = M12;
 8003312:	4bc8      	ldr	r3, [pc, #800]	; (8003634 <usb_rx_handler+0x3dc>)
 8003314:	2201      	movs	r2, #1
 8003316:	721a      	strb	r2, [r3, #8]
 8003318:	e006      	b.n	8003328 <usb_rx_handler+0xd0>
                }
                else if (usb->buff[1] == 0x00) {
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	791b      	ldrb	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <usb_rx_handler+0xd0>
                    comparison_parameter.relay_state = M27;
 8003322:	4bc4      	ldr	r3, [pc, #784]	; (8003634 <usb_rx_handler+0x3dc>)
 8003324:	2200      	movs	r2, #0
 8003326:	721a      	strb	r2, [r3, #8]
                }
                SetAllDAC();
 8003328:	f7ff f80c 	bl	8002344 <SetAllDAC>
                usb_tx_buff[1] = 0x00; // успешно
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003332:	e002      	b.n	800333a <usb_rx_handler+0xe2>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8003334:	2301      	movs	r3, #1
 8003336:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }

            usb_tx_buff[0] = cmd;
 800333a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800333e:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8003342:	f107 0320 	add.w	r3, r7, #32
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f008 fe47 	bl	800bfdc <CDC_Transmit_FS>
            break;
 800334e:	e2df      	b.n	8003910 <usb_rx_handler+0x6b8>

        /* Команда калибровки ЦАП А */
        case 0x02 :
            if (usb->len >= 3) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	789b      	ldrb	r3, [r3, #2]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d90c      	bls.n	8003372 <usb_rx_handler+0x11a>
                memcpy( &comparison_parameter.dac_A_volt,
                        usb->buff + 1,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3303      	adds	r3, #3
                memcpy( &comparison_parameter.dac_A_volt,
 800335c:	3301      	adds	r3, #1
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29a      	uxth	r2, r3
 8003362:	4bb4      	ldr	r3, [pc, #720]	; (8003634 <usb_rx_handler+0x3dc>)
 8003364:	801a      	strh	r2, [r3, #0]
                        sizeof(uint16_t) );
                SetDacA();
 8003366:	f7fe ff31 	bl	80021cc <SetDacA>
                usb_tx_buff[1] = 0x00; // успешно
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003370:	e002      	b.n	8003378 <usb_rx_handler+0x120>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 8003378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800337c:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8003380:	f107 0320 	add.w	r3, r7, #32
 8003384:	2102      	movs	r1, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f008 fe28 	bl	800bfdc <CDC_Transmit_FS>
            break;
 800338c:	e2c0      	b.n	8003910 <usb_rx_handler+0x6b8>

        /* Команда калибровки ЦАП В */
        case 0x03 :
            if (usb->len >= 3) {
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d90c      	bls.n	80033b0 <usb_rx_handler+0x158>
                memcpy( &comparison_parameter.dac_B_volt,
                        usb->buff + 1,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3303      	adds	r3, #3
                memcpy( &comparison_parameter.dac_B_volt,
 800339a:	3301      	adds	r3, #1
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29a      	uxth	r2, r3
 80033a0:	4ba4      	ldr	r3, [pc, #656]	; (8003634 <usb_rx_handler+0x3dc>)
 80033a2:	805a      	strh	r2, [r3, #2]
                        sizeof(uint16_t) );
                SetDacB();
 80033a4:	f7fe ff70 	bl	8002288 <SetDacB>

                usb_tx_buff[1] = 0x00; // успешно
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80033ae:	e002      	b.n	80033b6 <usb_rx_handler+0x15e>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 80033b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033ba:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 80033be:	f107 0320 	add.w	r3, r7, #32
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f008 fe09 	bl	800bfdc <CDC_Transmit_FS>
            break;
 80033ca:	e2a1      	b.n	8003910 <usb_rx_handler+0x6b8>

        /* Команда запроса значения АЦП */
        case 0x04 :
        {
            uint16_t adc_value = GetADC();
 80033cc:	f7ff fa66 	bl	800289c <GetADC>
 80033d0:	4603      	mov	r3, r0
 80033d2:	83fb      	strh	r3, [r7, #30]
            memcpy(usb_tx_buff + 1, &adc_value, sizeof(adc_value));
 80033d4:	f107 0320 	add.w	r3, r7, #32
 80033d8:	3301      	adds	r3, #1
 80033da:	8bfa      	ldrh	r2, [r7, #30]
 80033dc:	801a      	strh	r2, [r3, #0]
            usb_tx_buff[0] = cmd;
 80033de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80033e2:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 3);
 80033e6:	f107 0320 	add.w	r3, r7, #32
 80033ea:	2103      	movs	r1, #3
 80033ec:	4618      	mov	r0, r3
 80033ee:	f008 fdf5 	bl	800bfdc <CDC_Transmit_FS>
            break;
 80033f2:	e28d      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда запроса состояния ЦАПов */
        case 0x05 :
        {
            memcpy( usb_tx_buff + 2,
 80033f4:	f107 0320 	add.w	r3, r7, #32
 80033f8:	3302      	adds	r3, #2
 80033fa:	4a8e      	ldr	r2, [pc, #568]	; (8003634 <usb_rx_handler+0x3dc>)
 80033fc:	8812      	ldrh	r2, [r2, #0]
 80033fe:	801a      	strh	r2, [r3, #0]
                    &comparison_parameter.dac_A_volt,
                    sizeof(uint16_t) );
            memcpy( usb_tx_buff + 4,
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	3304      	adds	r3, #4
 8003406:	4a8b      	ldr	r2, [pc, #556]	; (8003634 <usb_rx_handler+0x3dc>)
 8003408:	8852      	ldrh	r2, [r2, #2]
 800340a:	801a      	strh	r2, [r3, #0]
                    &comparison_parameter.dac_B_volt,
                    sizeof(uint16_t) );

            usb_tx_buff[0] = cmd;
 800340c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003410:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = comparison_parameter.relay_state;
 8003414:	4b87      	ldr	r3, [pc, #540]	; (8003634 <usb_rx_handler+0x3dc>)
 8003416:	7a1b      	ldrb	r3, [r3, #8]
 8003418:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            CDC_Transmit_FS(usb_tx_buff, 6);
 800341c:	f107 0320 	add.w	r3, r7, #32
 8003420:	2106      	movs	r1, #6
 8003422:	4618      	mov	r0, r3
 8003424:	f008 fdda 	bl	800bfdc <CDC_Transmit_FS>
            break;
 8003428:	e272      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда запроса состояния кнопок */
        case 0x06 :
            usb_tx_buff[0] = cmd;
 800342a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800342e:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = btn_run_get_state();
 8003432:	f7fd fcb5 	bl	8000da0 <btn_run_get_state>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            usb_tx_buff[2] = btn_up_get_state();
 800343c:	f7fd fcce 	bl	8000ddc <btn_up_get_state>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            usb_tx_buff[3] = btn_down_get_state();
 8003446:	f7fd fce3 	bl	8000e10 <btn_down_get_state>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CDC_Transmit_FS(usb_tx_buff, 4);
 8003450:	f107 0320 	add.w	r3, r7, #32
 8003454:	2104      	movs	r1, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f008 fdc0 	bl	800bfdc <CDC_Transmit_FS>
            break;
 800345c:	e258      	b.n	8003910 <usb_rx_handler+0x6b8>
        {
//            /* TODO: Проверить на корректность преобразования SERIAL_NUMBER в массив из uint8, для 1121001 должно быть 11 1A E9 */
//            memcpy( &usb_tx_buff[1], SERIAL_NUMBER, 3 );
//            CDC_Transmit_FS(usb_tx_buff, 4);

            char str[] = {"prb_v0.3"};
 800345e:	4a76      	ldr	r2, [pc, #472]	; (8003638 <usb_rx_handler+0x3e0>)
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	ca07      	ldmia	r2, {r0, r1, r2}
 8003466:	c303      	stmia	r3!, {r0, r1}
 8003468:	701a      	strb	r2, [r3, #0]

            usb_tx_buff[0] = cmd;
 800346a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800346e:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = strlen(str);
 8003472:	f107 0314 	add.w	r3, r7, #20
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc fe6a 	bl	8000150 <strlen>
 800347c:	4603      	mov	r3, r0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            memcpy(usb_tx_buff + 2, str, strlen(str));
 8003484:	f107 0420 	add.w	r4, r7, #32
 8003488:	3402      	adds	r4, #2
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4618      	mov	r0, r3
 8003490:	f7fc fe5e 	bl	8000150 <strlen>
 8003494:	4602      	mov	r2, r0
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4619      	mov	r1, r3
 800349c:	4620      	mov	r0, r4
 800349e:	f009 f99f 	bl	800c7e0 <memcpy>

            CDC_Transmit_FS(usb_tx_buff, strlen(str) + 2);
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fc fe52 	bl	8000150 <strlen>
 80034ac:	4603      	mov	r3, r0
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3302      	adds	r3, #2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	f107 0320 	add.w	r3, r7, #32
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f008 fd8e 	bl	800bfdc <CDC_Transmit_FS>
            break;
 80034c0:	e226      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда запроса измеренной длительности */
        case 0x08 :
        {
            EnableTIM3();
 80034c2:	f7ff f959 	bl	8002778 <EnableTIM3>
            uint16_t temp = GetTIM3();
 80034c6:	f7ff f963 	bl	8002790 <GetTIM3>
 80034ca:	4603      	mov	r3, r0
 80034cc:	827b      	strh	r3, [r7, #18]
            usb_tx_buff[0] = cmd;
 80034ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034d2:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy( usb_tx_buff + 1,
 80034d6:	f107 0320 	add.w	r3, r7, #32
 80034da:	3301      	adds	r3, #1
 80034dc:	8a7a      	ldrh	r2, [r7, #18]
 80034de:	801a      	strh	r2, [r3, #0]
                    &temp,
                    sizeof(uint16_t) );
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 80034e0:	f107 0320 	add.w	r3, r7, #32
 80034e4:	2103      	movs	r1, #3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f008 fd78 	bl	800bfdc <CDC_Transmit_FS>
            break;
 80034ec:	e210      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда запроса измеренной длительности */
        case 0x09 :
        {
            EnableTIM4();
 80034ee:	f7ff f959 	bl	80027a4 <EnableTIM4>
            uint16_t temp = GetTIM4();
 80034f2:	f7ff f963 	bl	80027bc <GetTIM4>
 80034f6:	4603      	mov	r3, r0
 80034f8:	823b      	strh	r3, [r7, #16]
            usb_tx_buff[0] = cmd;
 80034fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034fe:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy( usb_tx_buff + 1,
 8003502:	f107 0320 	add.w	r3, r7, #32
 8003506:	3301      	adds	r3, #1
 8003508:	8a3a      	ldrh	r2, [r7, #16]
 800350a:	801a      	strh	r2, [r3, #0]
                    &temp,
                    sizeof(uint16_t));
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 800350c:	f107 0320 	add.w	r3, r7, #32
 8003510:	2103      	movs	r1, #3
 8003512:	4618      	mov	r0, r3
 8003514:	f008 fd62 	bl	800bfdc <CDC_Transmit_FS>
            break;
 8003518:	e1fa      	b.n	8003910 <usb_rx_handler+0x6b8>
        case 0x0A :
        {
            /* Константа для обозначения максимального количества передаваемых значений.
             * Определяется максимальным количеством байт, передаваемых по USB за раз.
             * (64(всего) - 6(команда))/2(так как числа 2-х байтовые) = 29*/
            const uint8_t usb_max_calib_value = 29;
 800351a:	231d      	movs	r3, #29
 800351c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            /* Значение для ответа на команду, 0х00 - успешное выполнение */
            usb_tx_buff[6] = 0x00;
 8003520:	2300      	movs	r3, #0
 8003522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            /* В буффер для отправки ответа заносим номер таблицы */
            usb_tx_buff[1] = usb->buff[1];
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* dataStartNumber  - номер ячейки, с которой начинается запись
             * dataEndNumber    - номер последней ячейки, в которую должны записываться данные
             * dataOffset       - разница между ними */
            uint16_t dataStartNumber, dataEndNumber, dataOffset;

            memcpy(&dataStartNumber, &usb->buff[2], sizeof(uint16_t));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3305      	adds	r3, #5
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29b      	uxth	r3, r3
 8003536:	81fb      	strh	r3, [r7, #14]
            memcpy(&dataOffset, &usb->buff[4], sizeof(uint16_t));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3307      	adds	r3, #7
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	81bb      	strh	r3, [r7, #12]
            dataEndNumber = dataStartNumber + dataOffset;
 8003542:	89fa      	ldrh	r2, [r7, #14]
 8003544:	89bb      	ldrh	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

            switch (usb->buff[1]) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	791b      	ldrb	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	f200 8141 	bhi.w	80037d8 <usb_rx_handler+0x580>
 8003556:	a201      	add	r2, pc, #4	; (adr r2, 800355c <usb_rx_handler+0x304>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	0800356d 	.word	0x0800356d
 8003560:	08003601 	.word	0x08003601
 8003564:	080036a9 	.word	0x080036a9
 8003568:	0800373d 	.word	0x0800373d
                case 0x00 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 800356c:	89fb      	ldrh	r3, [r7, #14]
 800356e:	2b55      	cmp	r3, #85	; 0x55
 8003570:	d809      	bhi.n	8003586 <usb_rx_handler+0x32e>
 8003572:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003576:	2b56      	cmp	r3, #86	; 0x56
 8003578:	d805      	bhi.n	8003586 <usb_rx_handler+0x32e>
                        dataEndNumber > MAX_VAL_M12    ||
                        dataOffset > usb_max_calib_value) {
 800357a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800357e:	b29a      	uxth	r2, r3
 8003580:	89bb      	ldrh	r3, [r7, #12]
                        dataEndNumber > MAX_VAL_M12    ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d203      	bcs.n	800358e <usb_rx_handler+0x336>
                        usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                        break;
 800358c:	e128      	b.n	80037e0 <usb_rx_handler+0x588>
                    }

                    uint8_t i_usb    = 6;
 800358e:	2306      	movs	r3, #6
 8003590:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    uint16_t i_calib = dataStartNumber;
 8003594:	89fb      	ldrh	r3, [r7, #14]
 8003596:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800359a:	e017      	b.n	80035cc <usb_rx_handler+0x374>

                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 800359c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035a0:	330c      	adds	r3, #12
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4a25      	ldr	r2, [pc, #148]	; (800363c <usb_rx_handler+0x3e4>)
 80035a6:	4413      	add	r3, r2
                                &usb->buff[i_usb],
 80035a8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	440a      	add	r2, r1
 80035b0:	3203      	adds	r2, #3
 80035b2:	8812      	ldrh	r2, [r2, #0]
 80035b4:	b292      	uxth	r2, r2
                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 80035b6:	801a      	strh	r2, [r3, #0]
                                sizeof(uint16_t) );

                        i_usb   += 2;
 80035b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80035bc:	3302      	adds	r3, #2
 80035be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                        i_calib += 1;
 80035c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80035c6:	3301      	adds	r3, #1
 80035c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80035cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80035d0:	2b3f      	cmp	r3, #63	; 0x3f
 80035d2:	d805      	bhi.n	80035e0 <usb_rx_handler+0x388>
 80035d4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80035d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035dc:	429a      	cmp	r2, r3
 80035de:	d3dd      	bcc.n	800359c <usb_rx_handler+0x344>
                    }
                    /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                     * таблице не оставалось мусорных данных */
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 80035e0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035e4:	330c      	adds	r3, #12
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4a14      	ldr	r2, [pc, #80]	; (800363c <usb_rx_handler+0x3e4>)
 80035ea:	1898      	adds	r0, r3, r2
                            0x00,
                            (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 80035ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80035f0:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	461a      	mov	r2, r3
 80035f8:	2100      	movs	r1, #0
 80035fa:	f009 f8ff 	bl	800c7fc <memset>
                    break;
 80035fe:	e0ef      	b.n	80037e0 <usb_rx_handler+0x588>

                }
                case 0x01 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	2b55      	cmp	r3, #85	; 0x55
 8003604:	d809      	bhi.n	800361a <usb_rx_handler+0x3c2>
 8003606:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800360a:	2b56      	cmp	r3, #86	; 0x56
 800360c:	d805      	bhi.n	800361a <usb_rx_handler+0x3c2>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 800360e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003612:	b29a      	uxth	r2, r3
 8003614:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M12    ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d203      	bcs.n	8003622 <usb_rx_handler+0x3ca>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 8003620:	e0de      	b.n	80037e0 <usb_rx_handler+0x588>
                     }

                     uint8_t i_usb    = 6;
 8003622:	2306      	movs	r3, #6
 8003624:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                     uint16_t i_calib = dataStartNumber;
 8003628:	89fb      	ldrh	r3, [r7, #14]
 800362a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800362e:	e020      	b.n	8003672 <usb_rx_handler+0x41a>
 8003630:	40010800 	.word	0x40010800
 8003634:	20000044 	.word	0x20000044
 8003638:	0800c928 	.word	0x0800c928
 800363c:	2000047c 	.word	0x2000047c

                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 8003640:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8003644:	3360      	adds	r3, #96	; 0x60
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4ab5      	ldr	r2, [pc, #724]	; (8003920 <usb_rx_handler+0x6c8>)
 800364a:	4413      	add	r3, r2
 800364c:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 800364e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	440a      	add	r2, r1
 8003656:	3203      	adds	r2, #3
 8003658:	8812      	ldrh	r2, [r2, #0]
 800365a:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 800365c:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 800365e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003662:	3302      	adds	r3, #2
 8003664:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                         i_calib += 1;
 8003668:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800366c:	3301      	adds	r3, #1
 800366e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8003672:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003676:	2b3f      	cmp	r3, #63	; 0x3f
 8003678:	d805      	bhi.n	8003686 <usb_rx_handler+0x42e>
 800367a:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800367e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003682:	429a      	cmp	r2, r3
 8003684:	d3dc      	bcc.n	8003640 <usb_rx_handler+0x3e8>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 8003686:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800368a:	3360      	adds	r3, #96	; 0x60
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4aa4      	ldr	r2, [pc, #656]	; (8003920 <usb_rx_handler+0x6c8>)
 8003690:	4413      	add	r3, r2
 8003692:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 8003694:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003698:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	461a      	mov	r2, r3
 80036a0:	2100      	movs	r1, #0
 80036a2:	f009 f8ab 	bl	800c7fc <memset>
                     break;
 80036a6:	e09b      	b.n	80037e0 <usb_rx_handler+0x588>

                }
                case 0x02 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	2ba1      	cmp	r3, #161	; 0xa1
 80036ac:	d809      	bhi.n	80036c2 <usb_rx_handler+0x46a>
 80036ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80036b2:	2ba2      	cmp	r3, #162	; 0xa2
 80036b4:	d805      	bhi.n	80036c2 <usb_rx_handler+0x46a>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 80036b6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M27    ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d203      	bcs.n	80036ca <usb_rx_handler+0x472>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 80036c8:	e08a      	b.n	80037e0 <usb_rx_handler+0x588>
                     }

                     uint8_t i_usb    = 6;
 80036ca:	2306      	movs	r3, #6
 80036cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                     uint16_t i_calib = dataStartNumber;
 80036d0:	89fb      	ldrh	r3, [r7, #14]
 80036d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80036d6:	e017      	b.n	8003708 <usb_rx_handler+0x4b0>

                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80036d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80036dc:	33b8      	adds	r3, #184	; 0xb8
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4a8f      	ldr	r2, [pc, #572]	; (8003920 <usb_rx_handler+0x6c8>)
 80036e2:	4413      	add	r3, r2
                                 &usb->buff[i_usb],
 80036e4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	440a      	add	r2, r1
 80036ec:	3203      	adds	r2, #3
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80036f2:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 80036f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036f8:	3302      	adds	r3, #2
 80036fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                         i_calib += 1;
 80036fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003702:	3301      	adds	r3, #1
 8003704:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8003708:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800370c:	2b3f      	cmp	r3, #63	; 0x3f
 800370e:	d805      	bhi.n	800371c <usb_rx_handler+0x4c4>
 8003710:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003714:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003718:	429a      	cmp	r2, r3
 800371a:	d3dd      	bcc.n	80036d8 <usb_rx_handler+0x480>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 800371c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003720:	33b8      	adds	r3, #184	; 0xb8
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4a7e      	ldr	r2, [pc, #504]	; (8003920 <usb_rx_handler+0x6c8>)
 8003726:	1898      	adds	r0, r3, r2
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 8003728:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800372c:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	461a      	mov	r2, r3
 8003734:	2100      	movs	r1, #0
 8003736:	f009 f861 	bl	800c7fc <memset>
                     break;
 800373a:	e051      	b.n	80037e0 <usb_rx_handler+0x588>

                }
                case 0x03 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 800373c:	89fb      	ldrh	r3, [r7, #14]
 800373e:	2ba1      	cmp	r3, #161	; 0xa1
 8003740:	d809      	bhi.n	8003756 <usb_rx_handler+0x4fe>
 8003742:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003746:	2ba2      	cmp	r3, #162	; 0xa2
 8003748:	d805      	bhi.n	8003756 <usb_rx_handler+0x4fe>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 800374a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800374e:	b29a      	uxth	r2, r3
 8003750:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M27    ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d203      	bcs.n	800375e <usb_rx_handler+0x506>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 800375c:	e040      	b.n	80037e0 <usb_rx_handler+0x588>
                     }

                     uint8_t i_usb    = 6;
 800375e:	2306      	movs	r3, #6
 8003760:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                     uint16_t i_calib = dataStartNumber;
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800376a:	e019      	b.n	80037a0 <usb_rx_handler+0x548>

                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 800376c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8003770:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <usb_rx_handler+0x6c8>)
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 800377c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	440a      	add	r2, r1
 8003784:	3203      	adds	r2, #3
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 800378a:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 800378c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003790:	3302      	adds	r3, #2
 8003792:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                         i_calib += 1;
 8003796:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800379a:	3301      	adds	r3, #1
 800379c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80037a0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80037a4:	2b3f      	cmp	r3, #63	; 0x3f
 80037a6:	d805      	bhi.n	80037b4 <usb_rx_handler+0x55c>
 80037a8:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80037ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d3db      	bcc.n	800376c <usb_rx_handler+0x514>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 80037b4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80037b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4a58      	ldr	r2, [pc, #352]	; (8003920 <usb_rx_handler+0x6c8>)
 80037c0:	4413      	add	r3, r2
 80037c2:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 80037c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80037c8:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	461a      	mov	r2, r3
 80037d0:	2100      	movs	r1, #0
 80037d2:	f009 f813 	bl	800c7fc <memset>
                     break;
 80037d6:	e003      	b.n	80037e0 <usb_rx_handler+0x588>

                }
                default :
                    usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    break;
 80037de:	bf00      	nop
            };

            usb_tx_buff[0] = cmd;
 80037e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037e4:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(usb_tx_buff + 2, &dataStartNumber, sizeof(uint16_t));
 80037e8:	f107 0320 	add.w	r3, r7, #32
 80037ec:	3302      	adds	r3, #2
 80037ee:	89fa      	ldrh	r2, [r7, #14]
 80037f0:	801a      	strh	r2, [r3, #0]
            memcpy(usb_tx_buff + 4, &dataOffset, sizeof(uint16_t));
 80037f2:	f107 0320 	add.w	r3, r7, #32
 80037f6:	3304      	adds	r3, #4
 80037f8:	89ba      	ldrh	r2, [r7, #12]
 80037fa:	801a      	strh	r2, [r3, #0]
            usb_tx_buff[2 + 2 * sizeof(uint16_t) + 1] = 0x00;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            CDC_Transmit_FS(usb_tx_buff, 7);
 8003802:	f107 0320 	add.w	r3, r7, #32
 8003806:	2107      	movs	r1, #7
 8003808:	4618      	mov	r0, r3
 800380a:	f008 fbe7 	bl	800bfdc <CDC_Transmit_FS>
            break;
 800380e:	e07f      	b.n	8003910 <usb_rx_handler+0x6b8>

        /* Команда запроса CRC 1-4 таблицы во флеше */
        case 0x0B :
        {
            uint32_t crc;
            crc_read_from_flash(&crc);
 8003810:	f107 0308 	add.w	r3, r7, #8
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fbaf 	bl	8000f78 <crc_read_from_flash>
            usb_tx_buff[0] = cmd;
 800381a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800381e:	f887 3020 	strb.w	r3, [r7, #32]
 8003822:	68bb      	ldr	r3, [r7, #8]
            memcpy( &usb_tx_buff[1], &crc, 4 );
 8003824:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
            CDC_Transmit_FS(usb_tx_buff, 5 );
 8003828:	f107 0320 	add.w	r3, r7, #32
 800382c:	2105      	movs	r1, #5
 800382e:	4618      	mov	r0, r3
 8003830:	f008 fbd4 	bl	800bfdc <CDC_Transmit_FS>
            break;
 8003834:	e06c      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда установки полярности источника питания при калибровке */
        case 0x0C :
            if (usb->len >= 2 && (usb->buff[1] == 0x01 || usb->buff[1] == 0x00)) {
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	789b      	ldrb	r3, [r3, #2]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d91a      	bls.n	8003874 <usb_rx_handler+0x61c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	791b      	ldrb	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d003      	beq.n	800384e <usb_rx_handler+0x5f6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	791b      	ldrb	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d112      	bne.n	8003874 <usb_rx_handler+0x61c>

                if (usb->buff[1] == 0x01) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d103      	bne.n	800385e <usb_rx_handler+0x606>
                    calibration.v_polarity = POSITIVE_POLARITY;
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <usb_rx_handler+0x6cc>)
 8003858:	2200      	movs	r2, #0
 800385a:	721a      	strb	r2, [r3, #8]
 800385c:	e006      	b.n	800386c <usb_rx_handler+0x614>
                }
                else if (usb->buff[1] == 0x00) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	791b      	ldrb	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <usb_rx_handler+0x614>
                    calibration.v_polarity = NEGATIVE_POLARITY;
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <usb_rx_handler+0x6cc>)
 8003868:	2201      	movs	r2, #1
 800386a:	721a      	strb	r2, [r3, #8]
                }
                usb_tx_buff[1] = 0x00; // успешно
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003872:	e002      	b.n	800387a <usb_rx_handler+0x622>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }

            usb_tx_buff[0] = cmd;
 800387a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800387e:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8003882:	f107 0320 	add.w	r3, r7, #32
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f008 fba7 	bl	800bfdc <CDC_Transmit_FS>
            break;
 800388e:	e03f      	b.n	8003910 <usb_rx_handler+0x6b8>

        /* Команда записи во флеш калибровочной таблицы */
        case 0x0D :
        {
            if (usb->len >= 2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	789b      	ldrb	r3, [r3, #2]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d909      	bls.n	80038ac <usb_rx_handler+0x654>
            {
                if ( flash_write_calibTable( &DevNVRAM ) != HAL_OK ) {
 8003898:	4821      	ldr	r0, [pc, #132]	; (8003920 <usb_rx_handler+0x6c8>)
 800389a:	f7fd fbad 	bl	8000ff8 <flash_write_calibTable>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d134      	bne.n	800390e <usb_rx_handler+0x6b6>
                    break;
                }
                usb_tx_buff[1] = 0x00; // успешно
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80038aa:	e002      	b.n	80038b2 <usb_rx_handler+0x65a>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 80038b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038b6:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 80038ba:	f107 0320 	add.w	r3, r7, #32
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f008 fb8b 	bl	800bfdc <CDC_Transmit_FS>
            break;
 80038c6:	e023      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* Команда приема параметров калибровочной таблицы */
        case 0x0E :
        {
            if (usb->len < 10) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	789b      	ldrb	r3, [r3, #2]
 80038cc:	2b09      	cmp	r3, #9
 80038ce:	d802      	bhi.n	80038d6 <usb_rx_handler+0x67e>
                usb_tx_buff[1] = 0x01;  // ошибка
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }

            const uint8_t number_calib_parameters = 5;
 80038d6:	2305      	movs	r3, #5
 80038d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

            memcpy( &DevNVRAM.calibration_table.calibration_step,
                    &usb->buff[1],
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1d19      	adds	r1, r3, #4
            memcpy( &DevNVRAM.calibration_table.calibration_step,
 80038e0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	461a      	mov	r2, r3
 80038e8:	480f      	ldr	r0, [pc, #60]	; (8003928 <usb_rx_handler+0x6d0>)
 80038ea:	f008 ff79 	bl	800c7e0 <memcpy>
                    sizeof(uint16_t) * number_calib_parameters );

            usb_tx_buff[0] = cmd;
 80038ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038f2:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	2102      	movs	r1, #2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f008 fb6d 	bl	800bfdc <CDC_Transmit_FS>
            break;
 8003902:	e005      	b.n	8003910 <usb_rx_handler+0x6b8>
        }

        /* По умолчанию, если прочитанная команда не соответствует ни одной команде
         * в протоколе, отправляем в ответ просто 0, как сигнал ошибки. */
        default:
            CDC_Transmit_FS(0, 1);
 8003904:	2101      	movs	r1, #1
 8003906:	2000      	movs	r0, #0
 8003908:	f008 fb68 	bl	800bfdc <CDC_Transmit_FS>
 800390c:	e000      	b.n	8003910 <usb_rx_handler+0x6b8>
                    break;
 800390e:	bf00      	nop
    };

    /*-END MAIN HANDLER CODE-------------------------------------------------*/

    usb->is_handled = true;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	705a      	strb	r2, [r3, #1]

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	377c      	adds	r7, #124	; 0x7c
 800391c:	46bd      	mov	sp, r7
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	2000047c 	.word	0x2000047c
 8003924:	20000204 	.word	0x20000204
 8003928:	20000480 	.word	0x20000480

0800392c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800392c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800392e:	e003      	b.n	8003938 <LoopCopyDataInit>

08003930 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003932:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003934:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003936:	3104      	adds	r1, #4

08003938 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003938:	480a      	ldr	r0, [pc, #40]	; (8003964 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800393c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800393e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003940:	d3f6      	bcc.n	8003930 <CopyDataInit>
  ldr r2, =_sbss
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003944:	e002      	b.n	800394c <LoopFillZerobss>

08003946 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003948:	f842 3b04 	str.w	r3, [r2], #4

0800394c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800394e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003950:	d3f9      	bcc.n	8003946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003952:	f7ff fc4d 	bl	80031f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003956:	f008 ff1f 	bl	800c798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800395a:	f7fe ffc5 	bl	80028e8 <main>
  bx lr
 800395e:	4770      	bx	lr
  ldr r3, =_sidata
 8003960:	0800c9c4 	.word	0x0800c9c4
  ldr r0, =_sdata
 8003964:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003968:	200001cc 	.word	0x200001cc
  ldr r2, =_sbss
 800396c:	200001d0 	.word	0x200001d0
  ldr r3, = _ebss
 8003970:	200018f8 	.word	0x200018f8

08003974 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003974:	e7fe      	b.n	8003974 <CAN1_RX1_IRQHandler>
	...

08003978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <HAL_Init+0x28>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_Init+0x28>)
 8003982:	f043 0310 	orr.w	r3, r3, #16
 8003986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003988:	2003      	movs	r0, #3
 800398a:	f000 fdd3 	bl	8004534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800398e:	2000      	movs	r0, #0
 8003990:	f000 f808 	bl	80039a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003994:	f7ff fa2e 	bl	8002df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_InitTick+0x54>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_InitTick+0x58>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fdeb 	bl	800459e <HAL_SYSTICK_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e00e      	b.n	80039f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d80a      	bhi.n	80039ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039d8:	2200      	movs	r2, #0
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	f000 fdb3 	bl	800454a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039e4:	4a06      	ldr	r2, [pc, #24]	; (8003a00 <HAL_InitTick+0x5c>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000050 	.word	0x20000050
 80039fc:	20000058 	.word	0x20000058
 8003a00:	20000054 	.word	0x20000054

08003a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a08:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_IncTick+0x1c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_IncTick+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	4a03      	ldr	r2, [pc, #12]	; (8003a24 <HAL_IncTick+0x20>)
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20000058 	.word	0x20000058
 8003a24:	20000954 	.word	0x20000954

08003a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a2c:	4b02      	ldr	r3, [pc, #8]	; (8003a38 <HAL_GetTick+0x10>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr
 8003a38:	20000954 	.word	0x20000954

08003a3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0be      	b.n	8003bdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d109      	bne.n	8003a80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff f9ec 	bl	8002e58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fb93 	bl	80041ac <ADC_ConversionStop_Disable>
 8003a86:	4603      	mov	r3, r0
 8003a88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8099 	bne.w	8003bca <HAL_ADC_Init+0x18e>
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 8095 	bne.w	8003bca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003aa8:	f023 0302 	bic.w	r3, r3, #2
 8003aac:	f043 0202 	orr.w	r2, r3, #2
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003abc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	7b1b      	ldrb	r3, [r3, #12]
 8003ac2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003ac4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad4:	d003      	beq.n	8003ade <HAL_ADC_Init+0xa2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d102      	bne.n	8003ae4 <HAL_ADC_Init+0xa8>
 8003ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADC_Init+0xaa>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7d1b      	ldrb	r3, [r3, #20]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d119      	bne.n	8003b28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7b1b      	ldrb	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	035a      	lsls	r2, r3, #13
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e00b      	b.n	8003b28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f043 0201 	orr.w	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <HAL_ADC_Init+0x1a8>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d003      	beq.n	8003b62 <HAL_ADC_Init+0x126>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d104      	bne.n	8003b6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	051b      	lsls	r3, r3, #20
 8003b6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_ADC_Init+0x1ac>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	f043 0201 	orr.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003ba6:	e018      	b.n	8003bda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f023 0312 	bic.w	r3, r3, #18
 8003bb0:	f043 0210 	orr.w	r2, r3, #16
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bc8:	e007      	b.n	8003bda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	f043 0210 	orr.w	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	ffe1f7fd 	.word	0xffe1f7fd
 8003be8:	ff1f0efe 	.word	0xff1f0efe

08003bec <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_Start_IT+0x1a>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0a0      	b.n	8003d48 <HAL_ADC_Start_IT+0x15c>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fa72 	bl	80040f8 <ADC_Enable>
 8003c14:	4603      	mov	r3, r0
 8003c16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 808f 	bne.w	8003d3e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a45      	ldr	r2, [pc, #276]	; (8003d50 <HAL_ADC_Start_IT+0x164>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d105      	bne.n	8003c4a <HAL_ADC_Start_IT+0x5e>
 8003c3e:	4b45      	ldr	r3, [pc, #276]	; (8003d54 <HAL_ADC_Start_IT+0x168>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d026      	beq.n	8003cb2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c74:	e01d      	b.n	8003cb2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a33      	ldr	r2, [pc, #204]	; (8003d54 <HAL_ADC_Start_IT+0x168>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d004      	beq.n	8003c96 <HAL_ADC_Start_IT+0xaa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <HAL_ADC_Start_IT+0x164>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10d      	bne.n	8003cb2 <HAL_ADC_Start_IT+0xc6>
 8003c96:	4b2f      	ldr	r3, [pc, #188]	; (8003d54 <HAL_ADC_Start_IT+0x168>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003caa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f023 0206 	bic.w	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cca:	e002      	b.n	8003cd2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0202 	mvn.w	r2, #2
 8003ce2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0220 	orr.w	r2, r2, #32
 8003cf2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003cfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d02:	d113      	bne.n	8003d2c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_ADC_Start_IT+0x164>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d105      	bne.n	8003d1a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <HAL_ADC_Start_IT+0x168>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d28:	609a      	str	r2, [r3, #8]
 8003d2a:	e00c      	b.n	8003d46 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	e003      	b.n	8003d46 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	40012800 	.word	0x40012800
 8003d54:	40012400 	.word	0x40012400

08003d58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d140      	bne.n	8003e08 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d139      	bne.n	8003e08 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003db6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003dba:	d11d      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d119      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0220 	bic.w	r2, r2, #32
 8003dd2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fe fd5b 	bl	80028b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0212 	mvn.w	r2, #18
 8003e06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e12:	2b80      	cmp	r3, #128	; 0x80
 8003e14:	d14f      	bne.n	8003eb6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d148      	bne.n	8003eb6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d105      	bne.n	8003e3c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003e46:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003e4a:	d012      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d125      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003e64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003e68:	d11d      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d119      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e80:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa6e 	bl	8004388 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 020c 	mvn.w	r2, #12
 8003eb4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d114      	bne.n	8003eee <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10d      	bne.n	8003eee <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f809 	bl	8003ef6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0201 	mvn.w	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d101      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x20>
 8003f24:	2302      	movs	r3, #2
 8003f26:	e0dc      	b.n	80040e2 <HAL_ADC_ConfigChannel+0x1da>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d81c      	bhi.n	8003f72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	3b05      	subs	r3, #5
 8003f4a:	221f      	movs	r2, #31
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	4019      	ands	r1, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	3b05      	subs	r3, #5
 8003f64:	fa00 f203 	lsl.w	r2, r0, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f70:	e03c      	b.n	8003fec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	3b23      	subs	r3, #35	; 0x23
 8003f8c:	221f      	movs	r2, #31
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4019      	ands	r1, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b23      	subs	r3, #35	; 0x23
 8003fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb2:	e01b      	b.n	8003fec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b41      	subs	r3, #65	; 0x41
 8003fc6:	221f      	movs	r2, #31
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4019      	ands	r1, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b41      	subs	r3, #65	; 0x41
 8003fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b09      	cmp	r3, #9
 8003ff2:	d91c      	bls.n	800402e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	3b1e      	subs	r3, #30
 8004006:	2207      	movs	r2, #7
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	4019      	ands	r1, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6898      	ldr	r0, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	3b1e      	subs	r3, #30
 8004020:	fa00 f203 	lsl.w	r2, r0, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	e019      	b.n	8004062 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6919      	ldr	r1, [r3, #16]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4413      	add	r3, r2
 800403e:	2207      	movs	r2, #7
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	4019      	ands	r1, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6898      	ldr	r0, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	fa00 f203 	lsl.w	r2, r0, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d003      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800406e:	2b11      	cmp	r3, #17
 8004070:	d132      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	; (80040ec <HAL_ADC_ConfigChannel+0x1e4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d125      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d126      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004098:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d11a      	bne.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80040a8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ac:	0c9a      	lsrs	r2, r3, #18
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040b8:	e002      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	3b01      	subs	r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f9      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x1b2>
 80040c6:	e007      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	40012400 	.word	0x40012400
 80040f0:	20000050 	.word	0x20000050
 80040f4:	431bde83 	.word	0x431bde83

080040f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d040      	beq.n	8004198 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
 8004124:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004126:	4b1f      	ldr	r3, [pc, #124]	; (80041a4 <ADC_Enable+0xac>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1f      	ldr	r2, [pc, #124]	; (80041a8 <ADC_Enable+0xb0>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9b      	lsrs	r3, r3, #18
 8004132:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004134:	e002      	b.n	800413c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3b01      	subs	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f9      	bne.n	8004136 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004142:	f7ff fc71 	bl	8003a28 <HAL_GetTick>
 8004146:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004148:	e01f      	b.n	800418a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800414a:	f7ff fc6d 	bl	8003a28 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d918      	bls.n	800418a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b01      	cmp	r3, #1
 8004164:	d011      	beq.n	800418a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	f043 0210 	orr.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e007      	b.n	800419a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d1d8      	bne.n	800414a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000050 	.word	0x20000050
 80041a8:	431bde83 	.word	0x431bde83

080041ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d12e      	bne.n	8004224 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041d6:	f7ff fc27 	bl	8003a28 <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041dc:	e01b      	b.n	8004216 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041de:	f7ff fc23 	bl	8003a28 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d914      	bls.n	8004216 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d10d      	bne.n	8004216 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	f043 0210 	orr.w	r2, r3, #16
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	f043 0201 	orr.w	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e007      	b.n	8004226 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d0dc      	beq.n	80041de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_ADCEx_Calibration_Start+0x1e>
 800424a:	2302      	movs	r3, #2
 800424c:	e095      	b.n	800437a <HAL_ADCEx_Calibration_Start+0x14a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffa8 	bl	80041ac <ADC_ConversionStop_Disable>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 8084 	bne.w	8004370 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004270:	f023 0302 	bic.w	r3, r3, #2
 8004274:	f043 0202 	orr.w	r2, r3, #2
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800427c:	4b41      	ldr	r3, [pc, #260]	; (8004384 <HAL_ADCEx_Calibration_Start+0x154>)
 800427e:	681c      	ldr	r4, [r3, #0]
 8004280:	2002      	movs	r0, #2
 8004282:	f002 ff35 	bl	80070f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004286:	4603      	mov	r3, r0
 8004288:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800428c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800428e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004290:	e002      	b.n	8004298 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b01      	subs	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1f9      	bne.n	8004292 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff ff2a 	bl	80040f8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0208 	orr.w	r2, r2, #8
 80042b2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80042b4:	f7ff fbb8 	bl	8003a28 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80042ba:	e01b      	b.n	80042f4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80042bc:	f7ff fbb4 	bl	8003a28 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b0a      	cmp	r3, #10
 80042c8:	d914      	bls.n	80042f4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00d      	beq.n	80042f4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f023 0312 	bic.w	r3, r3, #18
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e042      	b.n	800437a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1dc      	bne.n	80042bc <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0204 	orr.w	r2, r2, #4
 8004310:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004312:	f7ff fb89 	bl	8003a28 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004318:	e01b      	b.n	8004352 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800431a:	f7ff fb85 	bl	8003a28 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b0a      	cmp	r3, #10
 8004326:	d914      	bls.n	8004352 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	f023 0312 	bic.w	r3, r3, #18
 800433e:	f043 0210 	orr.w	r2, r3, #16
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e013      	b.n	800437a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1dc      	bne.n	800431a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	f043 0201 	orr.w	r2, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
}
 800437a:	4618      	mov	r0, r3
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop
 8004384:	20000050 	.word	0x20000050

08004388 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
	...

0800439c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <__NVIC_SetPriorityGrouping+0x44>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043b8:	4013      	ands	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <__NVIC_SetPriorityGrouping+0x44>)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	60d3      	str	r3, [r2, #12]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <__NVIC_GetPriorityGrouping+0x18>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	f003 0307 	and.w	r3, r3, #7
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800440a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440e:	2b00      	cmp	r3, #0
 8004410:	db0b      	blt.n	800442a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	f003 021f 	and.w	r2, r3, #31
 8004418:	4906      	ldr	r1, [pc, #24]	; (8004434 <__NVIC_EnableIRQ+0x34>)
 800441a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2001      	movs	r0, #1
 8004422:	fa00 f202 	lsl.w	r2, r0, r2
 8004426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr
 8004434:	e000e100 	.word	0xe000e100

08004438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	6039      	str	r1, [r7, #0]
 8004442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	2b00      	cmp	r3, #0
 800444a:	db0a      	blt.n	8004462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	490c      	ldr	r1, [pc, #48]	; (8004484 <__NVIC_SetPriority+0x4c>)
 8004452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004456:	0112      	lsls	r2, r2, #4
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	440b      	add	r3, r1
 800445c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004460:	e00a      	b.n	8004478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4908      	ldr	r1, [pc, #32]	; (8004488 <__NVIC_SetPriority+0x50>)
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	3b04      	subs	r3, #4
 8004470:	0112      	lsls	r2, r2, #4
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	440b      	add	r3, r1
 8004476:	761a      	strb	r2, [r3, #24]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000e100 	.word	0xe000e100
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f1c3 0307 	rsb	r3, r3, #7
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	bf28      	it	cs
 80044aa:	2304      	movcs	r3, #4
 80044ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	3304      	adds	r3, #4
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d902      	bls.n	80044bc <NVIC_EncodePriority+0x30>
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	3b03      	subs	r3, #3
 80044ba:	e000      	b.n	80044be <NVIC_EncodePriority+0x32>
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43da      	mvns	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	401a      	ands	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044d4:	f04f 31ff 	mov.w	r1, #4294967295
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	fa01 f303 	lsl.w	r3, r1, r3
 80044de:	43d9      	mvns	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e4:	4313      	orrs	r3, r2
         );
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3724      	adds	r7, #36	; 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d301      	bcc.n	8004506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004502:	2301      	movs	r3, #1
 8004504:	e00f      	b.n	8004526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <SysTick_Config+0x40>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450e:	210f      	movs	r1, #15
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f7ff ff90 	bl	8004438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x40>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x40>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff2d 	bl	800439c <__NVIC_SetPriorityGrouping>
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800454a:	b580      	push	{r7, lr}
 800454c:	b086      	sub	sp, #24
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800455c:	f7ff ff42 	bl	80043e4 <__NVIC_GetPriorityGrouping>
 8004560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68b9      	ldr	r1, [r7, #8]
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff90 	bl	800448c <NVIC_EncodePriority>
 800456c:	4602      	mov	r2, r0
 800456e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff5f 	bl	8004438 <__NVIC_SetPriority>
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	4603      	mov	r3, r0
 800458a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ff35 	bl	8004400 <__NVIC_EnableIRQ>
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff ffa2 	bl	80044f0 <SysTick_Config>
 80045ac:	4603      	mov	r3, r0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e00e      	b.n	80045e6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	795b      	ldrb	r3, [r3, #5]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fe fc81 	bl	8002ee0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b087      	sub	sp, #28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2202      	movs	r2, #2
 8004602:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e00a      	b.n	8004630 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	441a      	add	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3301      	adds	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3f0      	bcc.n	800461a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004646:	693b      	ldr	r3, [r7, #16]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
	...

08004654 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800466e:	4b2f      	ldr	r3, [pc, #188]	; (800472c <HAL_FLASH_Program+0xd8>)
 8004670:	7e1b      	ldrb	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_FLASH_Program+0x26>
 8004676:	2302      	movs	r3, #2
 8004678:	e054      	b.n	8004724 <HAL_FLASH_Program+0xd0>
 800467a:	4b2c      	ldr	r3, [pc, #176]	; (800472c <HAL_FLASH_Program+0xd8>)
 800467c:	2201      	movs	r2, #1
 800467e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004680:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004684:	f000 f8a8 	bl	80047d8 <FLASH_WaitForLastOperation>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d144      	bne.n	800471c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d102      	bne.n	800469e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8004698:	2301      	movs	r3, #1
 800469a:	757b      	strb	r3, [r7, #21]
 800469c:	e007      	b.n	80046ae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d102      	bne.n	80046aa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80046a4:	2302      	movs	r3, #2
 80046a6:	757b      	strb	r3, [r7, #21]
 80046a8:	e001      	b.n	80046ae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80046aa:	2304      	movs	r3, #4
 80046ac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80046ae:	2300      	movs	r3, #0
 80046b0:	75bb      	strb	r3, [r7, #22]
 80046b2:	e02d      	b.n	8004710 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80046b4:	7dbb      	ldrb	r3, [r7, #22]
 80046b6:	005a      	lsls	r2, r3, #1
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	eb02 0c03 	add.w	ip, r2, r3
 80046be:	7dbb      	ldrb	r3, [r7, #22]
 80046c0:	0119      	lsls	r1, r3, #4
 80046c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c6:	f1c1 0620 	rsb	r6, r1, #32
 80046ca:	f1a1 0020 	sub.w	r0, r1, #32
 80046ce:	fa22 f401 	lsr.w	r4, r2, r1
 80046d2:	fa03 f606 	lsl.w	r6, r3, r6
 80046d6:	4334      	orrs	r4, r6
 80046d8:	fa23 f000 	lsr.w	r0, r3, r0
 80046dc:	4304      	orrs	r4, r0
 80046de:	fa23 f501 	lsr.w	r5, r3, r1
 80046e2:	b2a3      	uxth	r3, r4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4660      	mov	r0, ip
 80046e8:	f000 f85a 	bl	80047a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046f0:	f000 f872 	bl	80047d8 <FLASH_WaitForLastOperation>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_FLASH_Program+0xdc>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <HAL_FLASH_Program+0xdc>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d107      	bne.n	800471a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800470a:	7dbb      	ldrb	r3, [r7, #22]
 800470c:	3301      	adds	r3, #1
 800470e:	75bb      	strb	r3, [r7, #22]
 8004710:	7dba      	ldrb	r2, [r7, #22]
 8004712:	7d7b      	ldrb	r3, [r7, #21]
 8004714:	429a      	cmp	r2, r3
 8004716:	d3cd      	bcc.n	80046b4 <HAL_FLASH_Program+0x60>
 8004718:	e000      	b.n	800471c <HAL_FLASH_Program+0xc8>
      {
        break;
 800471a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800471c:	4b03      	ldr	r3, [pc, #12]	; (800472c <HAL_FLASH_Program+0xd8>)
 800471e:	2200      	movs	r2, #0
 8004720:	761a      	strb	r2, [r3, #24]

  return status;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472c:	20000958 	.word	0x20000958
 8004730:	40022000 	.word	0x40022000

08004734 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <HAL_FLASH_Unlock+0x40>)
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00d      	beq.n	8004766 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_FLASH_Unlock+0x40>)
 800474c:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_FLASH_Unlock+0x44>)
 800474e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <HAL_FLASH_Unlock+0x40>)
 8004752:	4a0a      	ldr	r2, [pc, #40]	; (800477c <HAL_FLASH_Unlock+0x48>)
 8004754:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_FLASH_Unlock+0x40>)
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004766:	79fb      	ldrb	r3, [r7, #7]
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	bc80      	pop	{r7}
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40022000 	.word	0x40022000
 8004778:	45670123 	.word	0x45670123
 800477c:	cdef89ab 	.word	0xcdef89ab

08004780 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_FLASH_Lock+0x1c>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_FLASH_Lock+0x1c>)
 800478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000

080047a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <FLASH_Program_HalfWord+0x30>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <FLASH_Program_HalfWord+0x34>)
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <FLASH_Program_HalfWord+0x34>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	887a      	ldrh	r2, [r7, #2]
 80047c2:	801a      	strh	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000958 	.word	0x20000958
 80047d4:	40022000 	.word	0x40022000

080047d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80047e0:	f7ff f922 	bl	8003a28 <HAL_GetTick>
 80047e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80047e6:	e010      	b.n	800480a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d00c      	beq.n	800480a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <FLASH_WaitForLastOperation+0x2e>
 80047f6:	f7ff f917 	bl	8003a28 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d201      	bcs.n	800480a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e025      	b.n	8004856 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e8      	bne.n	80047e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004816:	4b12      	ldr	r3, [pc, #72]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 8004824:	2220      	movs	r2, #32
 8004826:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004834:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <FLASH_WaitForLastOperation+0x88>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800484c:	f000 f80a 	bl	8004864 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000

08004864 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <FLASH_SetErrorCode+0x98>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f043 0302 	orr.w	r3, r3, #2
 8004882:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 8004884:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f043 0310 	orr.w	r3, r3, #16
 800488c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <FLASH_SetErrorCode+0x98>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800489a:	4b19      	ldr	r3, [pc, #100]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 80048a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f043 0304 	orr.w	r3, r3, #4
 80048c2:	4a0f      	ldr	r2, [pc, #60]	; (8004900 <FLASH_SetErrorCode+0x9c>)
 80048c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	4a0c      	ldr	r2, [pc, #48]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f240 1201 	movw	r2, #257	; 0x101
 80048d8:	4293      	cmp	r3, r2
 80048da:	d106      	bne.n	80048ea <FLASH_SetErrorCode+0x86>
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	61d3      	str	r3, [r2, #28]
}  
 80048e8:	e002      	b.n	80048f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80048ea:	4a04      	ldr	r2, [pc, #16]	; (80048fc <FLASH_SetErrorCode+0x98>)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	60d3      	str	r3, [r2, #12]
}  
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40022000 	.word	0x40022000
 8004900:	20000958 	.word	0x20000958

08004904 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_FLASHEx_Erase+0xd0>)
 8004918:	7e1b      	ldrb	r3, [r3, #24]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_FLASHEx_Erase+0x1e>
 800491e:	2302      	movs	r3, #2
 8004920:	e053      	b.n	80049ca <HAL_FLASHEx_Erase+0xc6>
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <HAL_FLASHEx_Erase+0xd0>)
 8004924:	2201      	movs	r2, #1
 8004926:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d116      	bne.n	800495e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004934:	f7ff ff50 	bl	80047d8 <FLASH_WaitForLastOperation>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d141      	bne.n	80049c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800493e:	2001      	movs	r0, #1
 8004940:	f000 f84c 	bl	80049dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004944:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004948:	f7ff ff46 	bl	80047d8 <FLASH_WaitForLastOperation>
 800494c:	4603      	mov	r3, r0
 800494e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_FLASHEx_Erase+0xd4>)
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_FLASHEx_Erase+0xd4>)
 8004956:	f023 0304 	bic.w	r3, r3, #4
 800495a:	6113      	str	r3, [r2, #16]
 800495c:	e031      	b.n	80049c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800495e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004962:	f7ff ff39 	bl	80047d8 <FLASH_WaitForLastOperation>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d12a      	bne.n	80049c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	e019      	b.n	80049b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f000 f849 	bl	8004a14 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004982:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004986:	f7ff ff27 	bl	80047d8 <FLASH_WaitForLastOperation>
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800498e:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <HAL_FLASHEx_Erase+0xd4>)
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	4a11      	ldr	r2, [pc, #68]	; (80049d8 <HAL_FLASHEx_Erase+0xd4>)
 8004994:	f023 0302 	bic.w	r3, r3, #2
 8004998:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	601a      	str	r2, [r3, #0]
            break;
 80049a6:	e00c      	b.n	80049c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	029a      	lsls	r2, r3, #10
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d3dc      	bcc.n	800497c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049c2:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <HAL_FLASHEx_Erase+0xd0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	761a      	strb	r2, [r3, #24]

  return status;
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000958 	.word	0x20000958
 80049d8:	40022000 	.word	0x40022000

080049dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <FLASH_MassErase+0x30>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80049ea:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <FLASH_MassErase+0x34>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <FLASH_MassErase+0x34>)
 80049f0:	f043 0304 	orr.w	r3, r3, #4
 80049f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <FLASH_MassErase+0x34>)
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	4a05      	ldr	r2, [pc, #20]	; (8004a10 <FLASH_MassErase+0x34>)
 80049fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a00:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000958 	.word	0x20000958
 8004a10:	40022000 	.word	0x40022000

08004a14 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <FLASH_PageErase+0x38>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <FLASH_PageErase+0x3c>)
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <FLASH_PageErase+0x3c>)
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <FLASH_PageErase+0x3c>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <FLASH_PageErase+0x3c>)
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <FLASH_PageErase+0x3c>)
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a3e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	20000958 	.word	0x20000958
 8004a50:	40022000 	.word	0x40022000

08004a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b08b      	sub	sp, #44	; 0x2c
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a62:	2300      	movs	r3, #0
 8004a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a66:	e169      	b.n	8004d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a68:	2201      	movs	r2, #1
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	f040 8158 	bne.w	8004d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4a9a      	ldr	r2, [pc, #616]	; (8004cf4 <HAL_GPIO_Init+0x2a0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d05e      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
 8004a90:	4a98      	ldr	r2, [pc, #608]	; (8004cf4 <HAL_GPIO_Init+0x2a0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d875      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004a96:	4a98      	ldr	r2, [pc, #608]	; (8004cf8 <HAL_GPIO_Init+0x2a4>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d058      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
 8004a9c:	4a96      	ldr	r2, [pc, #600]	; (8004cf8 <HAL_GPIO_Init+0x2a4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d86f      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004aa2:	4a96      	ldr	r2, [pc, #600]	; (8004cfc <HAL_GPIO_Init+0x2a8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d052      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
 8004aa8:	4a94      	ldr	r2, [pc, #592]	; (8004cfc <HAL_GPIO_Init+0x2a8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d869      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004aae:	4a94      	ldr	r2, [pc, #592]	; (8004d00 <HAL_GPIO_Init+0x2ac>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04c      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
 8004ab4:	4a92      	ldr	r2, [pc, #584]	; (8004d00 <HAL_GPIO_Init+0x2ac>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d863      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004aba:	4a92      	ldr	r2, [pc, #584]	; (8004d04 <HAL_GPIO_Init+0x2b0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d046      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
 8004ac0:	4a90      	ldr	r2, [pc, #576]	; (8004d04 <HAL_GPIO_Init+0x2b0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d85d      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004ac6:	2b12      	cmp	r3, #18
 8004ac8:	d82a      	bhi.n	8004b20 <HAL_GPIO_Init+0xcc>
 8004aca:	2b12      	cmp	r3, #18
 8004acc:	d859      	bhi.n	8004b82 <HAL_GPIO_Init+0x12e>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <HAL_GPIO_Init+0x80>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004b4f 	.word	0x08004b4f
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004b3b 	.word	0x08004b3b
 8004ae0:	08004b7d 	.word	0x08004b7d
 8004ae4:	08004b83 	.word	0x08004b83
 8004ae8:	08004b83 	.word	0x08004b83
 8004aec:	08004b83 	.word	0x08004b83
 8004af0:	08004b83 	.word	0x08004b83
 8004af4:	08004b83 	.word	0x08004b83
 8004af8:	08004b83 	.word	0x08004b83
 8004afc:	08004b83 	.word	0x08004b83
 8004b00:	08004b83 	.word	0x08004b83
 8004b04:	08004b83 	.word	0x08004b83
 8004b08:	08004b83 	.word	0x08004b83
 8004b0c:	08004b83 	.word	0x08004b83
 8004b10:	08004b83 	.word	0x08004b83
 8004b14:	08004b83 	.word	0x08004b83
 8004b18:	08004b31 	.word	0x08004b31
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	4a79      	ldr	r2, [pc, #484]	; (8004d08 <HAL_GPIO_Init+0x2b4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b26:	e02c      	b.n	8004b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	623b      	str	r3, [r7, #32]
          break;
 8004b2e:	e029      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	623b      	str	r3, [r7, #32]
          break;
 8004b38:	e024      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	623b      	str	r3, [r7, #32]
          break;
 8004b42:	e01f      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	330c      	adds	r3, #12
 8004b4a:	623b      	str	r3, [r7, #32]
          break;
 8004b4c:	e01a      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b56:	2304      	movs	r3, #4
 8004b58:	623b      	str	r3, [r7, #32]
          break;
 8004b5a:	e013      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b64:	2308      	movs	r3, #8
 8004b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	611a      	str	r2, [r3, #16]
          break;
 8004b6e:	e009      	b.n	8004b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b70:	2308      	movs	r3, #8
 8004b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69fa      	ldr	r2, [r7, #28]
 8004b78:	615a      	str	r2, [r3, #20]
          break;
 8004b7a:	e003      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
          break;
 8004b80:	e000      	b.n	8004b84 <HAL_GPIO_Init+0x130>
          break;
 8004b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	2bff      	cmp	r3, #255	; 0xff
 8004b88:	d801      	bhi.n	8004b8e <HAL_GPIO_Init+0x13a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	e001      	b.n	8004b92 <HAL_GPIO_Init+0x13e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2bff      	cmp	r3, #255	; 0xff
 8004b98:	d802      	bhi.n	8004ba0 <HAL_GPIO_Init+0x14c>
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	e002      	b.n	8004ba6 <HAL_GPIO_Init+0x152>
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	3b08      	subs	r3, #8
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	210f      	movs	r1, #15
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80b1 	beq.w	8004d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bd4:	4b4d      	ldr	r3, [pc, #308]	; (8004d0c <HAL_GPIO_Init+0x2b8>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	4a4c      	ldr	r2, [pc, #304]	; (8004d0c <HAL_GPIO_Init+0x2b8>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6193      	str	r3, [r2, #24]
 8004be0:	4b4a      	ldr	r3, [pc, #296]	; (8004d0c <HAL_GPIO_Init+0x2b8>)
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004bec:	4a48      	ldr	r2, [pc, #288]	; (8004d10 <HAL_GPIO_Init+0x2bc>)
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	089b      	lsrs	r3, r3, #2
 8004bf2:	3302      	adds	r3, #2
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	220f      	movs	r2, #15
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	43db      	mvns	r3, r3
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <HAL_GPIO_Init+0x2c0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <HAL_GPIO_Init+0x1ec>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a3f      	ldr	r2, [pc, #252]	; (8004d18 <HAL_GPIO_Init+0x2c4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00d      	beq.n	8004c3c <HAL_GPIO_Init+0x1e8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3e      	ldr	r2, [pc, #248]	; (8004d1c <HAL_GPIO_Init+0x2c8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d007      	beq.n	8004c38 <HAL_GPIO_Init+0x1e4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	; (8004d20 <HAL_GPIO_Init+0x2cc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_GPIO_Init+0x1e0>
 8004c30:	2303      	movs	r3, #3
 8004c32:	e006      	b.n	8004c42 <HAL_GPIO_Init+0x1ee>
 8004c34:	2304      	movs	r3, #4
 8004c36:	e004      	b.n	8004c42 <HAL_GPIO_Init+0x1ee>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e002      	b.n	8004c42 <HAL_GPIO_Init+0x1ee>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_GPIO_Init+0x1ee>
 8004c40:	2300      	movs	r3, #0
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	f002 0203 	and.w	r2, r2, #3
 8004c48:	0092      	lsls	r2, r2, #2
 8004c4a:	4093      	lsls	r3, r2
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c52:	492f      	ldr	r1, [pc, #188]	; (8004d10 <HAL_GPIO_Init+0x2bc>)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	089b      	lsrs	r3, r3, #2
 8004c58:	3302      	adds	r3, #2
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	492c      	ldr	r1, [pc, #176]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e006      	b.n	8004c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004c7a:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	4928      	ldr	r1, [pc, #160]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d006      	beq.n	8004ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004c94:	4b23      	ldr	r3, [pc, #140]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	4922      	ldr	r1, [pc, #136]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	604b      	str	r3, [r1, #4]
 8004ca0:	e006      	b.n	8004cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ca2:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	491e      	ldr	r1, [pc, #120]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d006      	beq.n	8004cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	4918      	ldr	r1, [pc, #96]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	608b      	str	r3, [r1, #8]
 8004cc8:	e006      	b.n	8004cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cca:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	4914      	ldr	r1, [pc, #80]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	490e      	ldr	r1, [pc, #56]	; (8004d24 <HAL_GPIO_Init+0x2d0>)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60cb      	str	r3, [r1, #12]
 8004cf0:	e021      	b.n	8004d36 <HAL_GPIO_Init+0x2e2>
 8004cf2:	bf00      	nop
 8004cf4:	10320000 	.word	0x10320000
 8004cf8:	10310000 	.word	0x10310000
 8004cfc:	10220000 	.word	0x10220000
 8004d00:	10210000 	.word	0x10210000
 8004d04:	10120000 	.word	0x10120000
 8004d08:	10110000 	.word	0x10110000
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40010800 	.word	0x40010800
 8004d18:	40010c00 	.word	0x40010c00
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	40011400 	.word	0x40011400
 8004d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_GPIO_Init+0x304>)
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	4909      	ldr	r1, [pc, #36]	; (8004d58 <HAL_GPIO_Init+0x304>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	3301      	adds	r3, #1
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f47f ae8e 	bne.w	8004a68 <HAL_GPIO_Init+0x14>
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	bf00      	nop
 8004d50:	372c      	adds	r7, #44	; 0x2c
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	e001      	b.n	8004d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	807b      	strh	r3, [r7, #2]
 8004d96:	4613      	mov	r3, r2
 8004d98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d9a:	787b      	ldrb	r3, [r7, #1]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004da0:	887a      	ldrh	r2, [r7, #2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004da6:	e003      	b.n	8004db0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004da8:	887b      	ldrh	r3, [r7, #2]
 8004daa:	041a      	lsls	r2, r3, #16
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	611a      	str	r2, [r3, #16]
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dd2:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dd8:	88fb      	ldrh	r3, [r7, #6]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fc f832 	bl	8000e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40010400 	.word	0x40010400

08004dec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	b08b      	sub	sp, #44	; 0x2c
 8004df0:	af06      	add	r7, sp, #24
 8004df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0fd      	b.n	8004ffa <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f007 fa16 	bl	800c244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f003 fa11 	bl	800824c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	687e      	ldr	r6, [r7, #4]
 8004e32:	466d      	mov	r5, sp
 8004e34:	f106 0410 	add.w	r4, r6, #16
 8004e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	1d33      	adds	r3, r6, #4
 8004e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	f003 f9db 	bl	8008200 <USB_CoreInit>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0ce      	b.n	8004ffa <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2100      	movs	r1, #0
 8004e62:	4618      	mov	r0, r3
 8004e64:	f003 fa0c 	bl	8008280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
 8004e6c:	e04c      	b.n	8004f08 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2201      	movs	r2, #1
 8004e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	b298      	uxth	r0, r3
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3336      	adds	r3, #54	; 0x36
 8004eac:	4602      	mov	r2, r0
 8004eae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3303      	adds	r3, #3
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ec6:	7bfa      	ldrb	r2, [r7, #15]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3338      	adds	r3, #56	; 0x38
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004eda:	7bfa      	ldrb	r2, [r7, #15]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	440b      	add	r3, r1
 8004ee8:	333c      	adds	r3, #60	; 0x3c
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	440b      	add	r3, r1
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	3301      	adds	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
 8004f08:	7bfa      	ldrb	r2, [r7, #15]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d3ad      	bcc.n	8004e6e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
 8004f16:	e044      	b.n	8004fa2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f18:	7bfa      	ldrb	r2, [r7, #15]
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f40:	7bfa      	ldrb	r2, [r7, #15]
 8004f42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f44:	7bfa      	ldrb	r2, [r7, #15]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f70:	7bfa      	ldrb	r2, [r7, #15]
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	7bfa      	ldrb	r2, [r7, #15]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d3b5      	bcc.n	8004f18 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	603b      	str	r3, [r7, #0]
 8004fb2:	687e      	ldr	r6, [r7, #4]
 8004fb4:	466d      	mov	r5, sp
 8004fb6:	f106 0410 	add.w	r4, r6, #16
 8004fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	1d33      	adds	r3, r6, #4
 8004fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f003 f966 	bl	8008298 <USB_DevInit>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00d      	b.n	8004ffa <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f005 fad7 	bl	800a5a6 <USB_DevDisconnect>

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_PCD_Start+0x16>
 8005014:	2302      	movs	r3, #2
 8005016:	e016      	b.n	8005046 <HAL_PCD_Start+0x44>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f003 f8fb 	bl	8008220 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800502a:	2101      	movs	r1, #1
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f007 fb7c 	bl	800c72a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f005 faab 	bl	800a592 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f005 faad 	bl	800a5ba <USB_ReadInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800506a:	d102      	bne.n	8005072 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb61 	bl	8005734 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f005 fa9f 	bl	800a5ba <USB_ReadInterrupts>
 800507c:	4603      	mov	r3, r0
 800507e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005086:	d112      	bne.n	80050ae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509a:	b292      	uxth	r2, r2
 800509c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f007 f94a 	bl	800c33a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80050a6:	2100      	movs	r1, #0
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f925 	bl	80052f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f005 fa81 	bl	800a5ba <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050c2:	d10b      	bne.n	80050dc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050d6:	b292      	uxth	r2, r2
 80050d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f005 fa6a 	bl	800a5ba <USB_ReadInterrupts>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d10b      	bne.n	800510a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005104:	b292      	uxth	r2, r2
 8005106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f005 fa53 	bl	800a5ba <USB_ReadInterrupts>
 8005114:	4603      	mov	r3, r0
 8005116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d126      	bne.n	800516e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	b292      	uxth	r2, r2
 8005134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0208 	bic.w	r2, r2, #8
 800514a:	b292      	uxth	r2, r2
 800514c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f007 f92b 	bl	800c3ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005168:	b292      	uxth	r2, r2
 800516a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f005 fa21 	bl	800a5ba <USB_ReadInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	f040 8084 	bne.w	800528e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8005186:	2300      	movs	r3, #0
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e011      	b.n	80051b0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	441a      	add	r2, r3
 8005198:	7ffb      	ldrb	r3, [r7, #31]
 800519a:	8812      	ldrh	r2, [r2, #0]
 800519c:	b292      	uxth	r2, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f107 0120 	add.w	r1, r7, #32
 80051a4:	440b      	add	r3, r1
 80051a6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80051aa:	7ffb      	ldrb	r3, [r7, #31]
 80051ac:	3301      	adds	r3, #1
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	7ffb      	ldrb	r3, [r7, #31]
 80051b2:	2b07      	cmp	r3, #7
 80051b4:	d9ea      	bls.n	800518c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0201 	orr.w	r2, r2, #1
 80051c8:	b292      	uxth	r2, r2
 80051ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	b292      	uxth	r2, r2
 80051e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80051e6:	bf00      	nop
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0f6      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005202:	b29a      	uxth	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	b292      	uxth	r2, r2
 800520e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	77fb      	strb	r3, [r7, #31]
 8005216:	e010      	b.n	800523a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005218:	7ffb      	ldrb	r3, [r7, #31]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	4611      	mov	r1, r2
 8005220:	7ffa      	ldrb	r2, [r7, #31]
 8005222:	0092      	lsls	r2, r2, #2
 8005224:	440a      	add	r2, r1
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	f107 0120 	add.w	r1, r7, #32
 800522c:	440b      	add	r3, r1
 800522e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005232:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	3301      	adds	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	2b07      	cmp	r3, #7
 800523e:	d9eb      	bls.n	8005218 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005248:	b29a      	uxth	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	b292      	uxth	r2, r2
 8005254:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005260:	b29a      	uxth	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526a:	b292      	uxth	r2, r2
 800526c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0204 	orr.w	r2, r2, #4
 8005282:	b292      	uxth	r2, r2
 8005284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f007 f875 	bl	800c378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f005 f991 	bl	800a5ba <USB_ReadInterrupts>
 8005298:	4603      	mov	r3, r0
 800529a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800529e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a2:	d10e      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052b6:	b292      	uxth	r2, r2
 80052b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f007 f82e 	bl	800c31e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f005 f977 	bl	800a5ba <USB_ReadInterrupts>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d6:	d10b      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ea:	b292      	uxth	r2, r2
 80052ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80052f0:	bf00      	nop
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_PCD_SetAddress+0x1a>
 800530e:	2302      	movs	r3, #2
 8005310:	e013      	b.n	800533a <HAL_PCD_SetAddress+0x42>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f005 f91e 	bl	800a56c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	4608      	mov	r0, r1
 800534c:	4611      	mov	r1, r2
 800534e:	461a      	mov	r2, r3
 8005350:	4603      	mov	r3, r0
 8005352:	70fb      	strb	r3, [r7, #3]
 8005354:	460b      	mov	r3, r1
 8005356:	803b      	strh	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da0e      	bge.n	8005386 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	705a      	strb	r2, [r3, #1]
 8005384:	e00e      	b.n	80053a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	f003 0207 	and.w	r2, r3, #7
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4413      	add	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053b0:	883a      	ldrh	r2, [r7, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	78ba      	ldrb	r2, [r7, #2]
 80053ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	785b      	ldrb	r3, [r3, #1]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d004      	beq.n	80053ce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053ce:	78bb      	ldrb	r3, [r7, #2]
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d102      	bne.n	80053da <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_PCD_EP_Open+0xa6>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e00e      	b.n	8005406 <HAL_PCD_EP_Open+0xc4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68f9      	ldr	r1, [r7, #12]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f002 ff6e 	bl	80082d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005404:	7afb      	ldrb	r3, [r7, #11]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800541a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800541e:	2b00      	cmp	r3, #0
 8005420:	da0e      	bge.n	8005440 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	705a      	strb	r2, [r3, #1]
 800543e:	e00e      	b.n	800545e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 0207 	and.w	r2, r3, #7
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 0307 	and.w	r3, r3, #7
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_PCD_EP_Close+0x6a>
 8005474:	2302      	movs	r3, #2
 8005476:	e00e      	b.n	8005496 <HAL_PCD_EP_Close+0x88>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68f9      	ldr	r1, [r7, #12]
 8005486:	4618      	mov	r0, r3
 8005488:	f003 fa90 	bl	80089ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b086      	sub	sp, #24
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	460b      	mov	r3, r1
 80054ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	f003 0207 	and.w	r2, r3, #7
 80054b4:	4613      	mov	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2200      	movs	r2, #0
 80054dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054ea:	7afb      	ldrb	r3, [r7, #11]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f003 fc42 	bl	8008d84 <USB_EPStartXfer>
 8005500:	e005      	b.n	800550e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	4618      	mov	r0, r3
 800550a:	f003 fc3b 	bl	8008d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	f003 0207 	and.w	r2, r3, #7
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	440b      	add	r3, r1
 8005536:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800553a:	681b      	ldr	r3, [r3, #0]
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b086      	sub	sp, #24
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	460b      	mov	r3, r1
 8005554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2201      	movs	r2, #1
 8005590:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005592:	7afb      	ldrb	r3, [r7, #11]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	b2da      	uxtb	r2, r3
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f003 fbe8 	bl	8008d84 <USB_EPStartXfer>
 80055b4:	e005      	b.n	80055c2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6979      	ldr	r1, [r7, #20]
 80055bc:	4618      	mov	r0, r3
 80055be:	f003 fbe1 	bl	8008d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	f003 0207 	and.w	r2, r3, #7
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d901      	bls.n	80055ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e04c      	b.n	8005684 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da0e      	bge.n	8005610 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
 800560e:	e00c      	b.n	800562a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	b2da      	uxtb	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <HAL_PCD_EP_SetStall+0x7e>
 8005646:	2302      	movs	r3, #2
 8005648:	e01c      	b.n	8005684 <HAL_PCD_EP_SetStall+0xb8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f004 fe8a 	bl	800a372 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	2b00      	cmp	r3, #0
 8005666:	d108      	bne.n	800567a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005672:	4619      	mov	r1, r3
 8005674:	4610      	mov	r0, r2
 8005676:	f004 ffaf 	bl	800a5d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 020f 	and.w	r2, r3, #15
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d901      	bls.n	80056aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e040      	b.n	800572c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	da0e      	bge.n	80056d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	4413      	add	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	705a      	strb	r2, [r3, #1]
 80056ce:	e00e      	b.n	80056ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	f003 0207 	and.w	r2, r3, #7
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	4413      	add	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_PCD_EP_ClrStall+0x82>
 800570a:	2302      	movs	r3, #2
 800570c:	e00e      	b.n	800572c <HAL_PCD_EP_ClrStall+0xa0>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68f9      	ldr	r1, [r7, #12]
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fe78 	bl	800a412 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08e      	sub	sp, #56	; 0x38
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800573c:	e2ec      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005746:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005748:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005754:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005758:	2b00      	cmp	r3, #0
 800575a:	f040 8161 	bne.w	8005a20 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800575e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d152      	bne.n	800580e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	81fb      	strh	r3, [r7, #14]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800579a:	b29b      	uxth	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	3302      	adds	r3, #2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	695a      	ldr	r2, [r3, #20]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	441a      	add	r2, r3
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f006 fd8b 	bl	800c2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 829b 	beq.w	8005d18 <PCD_EP_ISR_Handler+0x5e4>
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f040 8296 	bne.w	8005d18 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	b292      	uxth	r2, r2
 8005800:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800580c:	e284      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800581e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005824:	2b00      	cmp	r3, #0
 8005826:	d034      	beq.n	8005892 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4413      	add	r3, r2
 800583c:	3306      	adds	r3, #6
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005866:	b29b      	uxth	r3, r3
 8005868:	f004 ff06 	bl	800a678 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29a      	uxth	r2, r3
 8005874:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005878:	4013      	ands	r3, r2
 800587a:	823b      	strh	r3, [r7, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	8a3a      	ldrh	r2, [r7, #16]
 8005882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005886:	b292      	uxth	r2, r2
 8005888:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f006 fd00 	bl	800c290 <HAL_PCD_SetupStageCallback>
 8005890:	e242      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005892:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005896:	2b00      	cmp	r3, #0
 8005898:	f280 823e 	bge.w	8005d18 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80058a8:	4013      	ands	r3, r2
 80058aa:	83bb      	strh	r3, [r7, #28]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	8bba      	ldrh	r2, [r7, #28]
 80058b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058b6:	b292      	uxth	r2, r2
 80058b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	4413      	add	r3, r2
 80058ce:	3306      	adds	r3, #6
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d019      	beq.n	8005922 <PCD_EP_ISR_Handler+0x1ee>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	6959      	ldr	r1, [r3, #20]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005906:	b29b      	uxth	r3, r3
 8005908:	f004 feb6 	bl	800a678 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	441a      	add	r2, r3
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800591a:	2100      	movs	r1, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f006 fcc9 	bl	800c2b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800592e:	2b00      	cmp	r3, #0
 8005930:	f040 81f2 	bne.w	8005d18 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005942:	b29b      	uxth	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	4413      	add	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d112      	bne.n	8005982 <PCD_EP_ISR_Handler+0x24e>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005966:	b29a      	uxth	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	801a      	strh	r2, [r3, #0]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29b      	uxth	r3, r3
 8005972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597a:	b29a      	uxth	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	e02f      	b.n	80059e2 <PCD_EP_ISR_Handler+0x2ae>
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b3e      	cmp	r3, #62	; 0x3e
 8005988:	d813      	bhi.n	80059b2 <PCD_EP_ISR_Handler+0x27e>
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	633b      	str	r3, [r7, #48]	; 0x30
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <PCD_EP_ISR_Handler+0x270>
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	3301      	adds	r3, #1
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	029b      	lsls	r3, r3, #10
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e017      	b.n	80059e2 <PCD_EP_ISR_Handler+0x2ae>
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	633b      	str	r3, [r7, #48]	; 0x30
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <PCD_EP_ISR_Handler+0x298>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	3b01      	subs	r3, #1
 80059ca:	633b      	str	r3, [r7, #48]	; 0x30
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	029b      	lsls	r3, r3, #10
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059dc:	b29a      	uxth	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f2:	827b      	strh	r3, [r7, #18]
 80059f4:	8a7b      	ldrh	r3, [r7, #18]
 80059f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80059fa:	827b      	strh	r3, [r7, #18]
 80059fc:	8a7b      	ldrh	r3, [r7, #18]
 80059fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a02:	827b      	strh	r3, [r7, #18]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	8a7b      	ldrh	r3, [r7, #18]
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
 8005a1e:	e17b      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a32:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f280 80ea 	bge.w	8005c10 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a52:	4013      	ands	r3, r2
 8005a54:	853b      	strh	r3, [r7, #40]	; 0x28
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a6a:	b292      	uxth	r2, r2
 8005a6c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005a6e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	7b1b      	ldrb	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d122      	bne.n	8005ad2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3306      	adds	r3, #6
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005ab6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8087 	beq.w	8005bcc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	6959      	ldr	r1, [r3, #20]
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	88da      	ldrh	r2, [r3, #6]
 8005aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005acc:	f004 fdd4 	bl	800a678 <USB_ReadPMA>
 8005ad0:	e07c      	b.n	8005bcc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	78db      	ldrb	r3, [r3, #3]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d108      	bne.n	8005aec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ada:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005adc:	461a      	mov	r2, r3
 8005ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f927 	bl	8005d34 <HAL_PCD_EP_DB_Receive>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005aea:	e06f      	b.n	8005bcc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	847b      	strh	r3, [r7, #34]	; 0x22
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	441a      	add	r2, r3
 8005b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d021      	beq.n	8005b8a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02a      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	6959      	ldr	r1, [r3, #20]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	891a      	ldrh	r2, [r3, #8]
 8005b82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b84:	f004 fd78 	bl	800a678 <USB_ReadPMA>
 8005b88:	e020      	b.n	8005bcc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3306      	adds	r3, #6
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	6959      	ldr	r1, [r3, #20]
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	895a      	ldrh	r2, [r3, #10]
 8005bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bc8:	f004 fd56 	bl	800a678 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	69da      	ldr	r2, [r3, #28]
 8005bd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bd2:	441a      	add	r2, r3
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bde:	441a      	add	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <PCD_EP_ISR_Handler+0x4c2>
 8005bec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d206      	bcs.n	8005c04 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f006 fb59 	bl	800c2b4 <HAL_PCD_DataOutStageCallback>
 8005c02:	e005      	b.n	8005c10 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f003 f8ba 	bl	8008d84 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005c10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d07e      	beq.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005c1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c48:	843b      	strh	r3, [r7, #32]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	8c3b      	ldrh	r3, [r7, #32]
 8005c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d00c      	beq.n	8005c88 <PCD_EP_ISR_Handler+0x554>
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d146      	bne.n	8005d0c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005c7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d141      	bne.n	8005d0c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	8bfb      	ldrh	r3, [r7, #30]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d906      	bls.n	8005cca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	8bfb      	ldrh	r3, [r7, #30]
 8005cc2:	1ad2      	subs	r2, r2, r3
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	619a      	str	r2, [r3, #24]
 8005cc8:	e002      	b.n	8005cd0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	2200      	movs	r2, #0
 8005cce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f006 fb03 	bl	800c2ea <HAL_PCD_DataInStageCallback>
 8005ce4:	e018      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	8bfb      	ldrh	r3, [r7, #30]
 8005cec:	441a      	add	r2, r3
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	8bfb      	ldrh	r3, [r7, #30]
 8005cf8:	441a      	add	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d04:	4618      	mov	r0, r3
 8005d06:	f003 f83d 	bl	8008d84 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005d0a:	e005      	b.n	8005d18 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f91b 	bl	8005f4e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	b21b      	sxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f6ff ad0a 	blt.w	800573e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3738      	adds	r7, #56	; 0x38
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d07e      	beq.n	8005e4a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	3302      	adds	r3, #2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	8b7b      	ldrh	r3, [r7, #26]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d306      	bcc.n	8005d8e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	8b7b      	ldrh	r3, [r7, #26]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	619a      	str	r2, [r3, #24]
 8005d8c:	e002      	b.n	8005d94 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d123      	bne.n	8005de4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	833b      	strh	r3, [r7, #24]
 8005db8:	8b3b      	ldrh	r3, [r7, #24]
 8005dba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dbe:	833b      	strh	r3, [r7, #24]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	8b3b      	ldrh	r3, [r7, #24]
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01f      	beq.n	8005e2e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	82fb      	strh	r3, [r7, #22]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	8afb      	ldrh	r3, [r7, #22]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e2e:	8b7b      	ldrh	r3, [r7, #26]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8087 	beq.w	8005f44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	891a      	ldrh	r2, [r3, #8]
 8005e42:	8b7b      	ldrh	r3, [r7, #26]
 8005e44:	f004 fc18 	bl	800a678 <USB_ReadPMA>
 8005e48:	e07c      	b.n	8005f44 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	4413      	add	r3, r2
 8005e5e:	3306      	adds	r3, #6
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	8b7b      	ldrh	r3, [r7, #26]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d306      	bcc.n	8005e8c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	8b7b      	ldrh	r3, [r7, #26]
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	619a      	str	r2, [r3, #24]
 8005e8a:	e002      	b.n	8005e92 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d123      	bne.n	8005ee2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb4:	83fb      	strh	r3, [r7, #30]
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ebc:	83fb      	strh	r3, [r7, #30]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	8bfb      	ldrh	r3, [r7, #30]
 8005ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d11f      	bne.n	8005f2c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	83bb      	strh	r3, [r7, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	8bbb      	ldrh	r3, [r7, #28]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f2c:	8b7b      	ldrh	r3, [r7, #26]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6959      	ldr	r1, [r3, #20]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	895a      	ldrh	r2, [r3, #10]
 8005f3e:	8b7b      	ldrh	r3, [r7, #26]
 8005f40:	f004 fb9a 	bl	800a678 <USB_ReadPMA>
    }
  }

  return count;
 8005f44:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b0a2      	sub	sp, #136	; 0x88
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f5c:	88fb      	ldrh	r3, [r7, #6]
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 81c7 	beq.w	80062f6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	699a      	ldr	r2, [r3, #24]
 8005f98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d907      	bls.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fa8:	1ad2      	subs	r2, r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	619a      	str	r2, [r3, #24]
 8005fae:	e002      	b.n	8005fb6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 80b9 	bne.w	8006132 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d126      	bne.n	8006016 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	4413      	add	r3, r2
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	011a      	lsls	r2, r3, #4
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	4413      	add	r3, r2
 8005fea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600e:	b29a      	uxth	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e01a      	b.n	800604c <HAL_PCD_EP_DB_Transmit+0xfe>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d116      	bne.n	800604c <HAL_PCD_EP_DB_Transmit+0xfe>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602c:	b29b      	uxth	r3, r3
 800602e:	461a      	mov	r2, r3
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	4413      	add	r3, r2
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	011a      	lsls	r2, r3, #4
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	4413      	add	r3, r2
 8006040:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2200      	movs	r2, #0
 800604a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	785b      	ldrb	r3, [r3, #1]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d126      	bne.n	80060a8 <HAL_PCD_EP_DB_Transmit+0x15a>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61bb      	str	r3, [r7, #24]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	4413      	add	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	011a      	lsls	r2, r3, #4
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	4413      	add	r3, r2
 800607c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800608c:	b29a      	uxth	r2, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	801a      	strh	r2, [r3, #0]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29b      	uxth	r3, r3
 8006098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e017      	b.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d113      	bne.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x18a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	4413      	add	r3, r2
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	011a      	lsls	r2, r3, #4
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	4413      	add	r3, r2
 80060cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2200      	movs	r2, #0
 80060d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f006 f903 	bl	800c2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060e4:	88fb      	ldrh	r3, [r7, #6]
 80060e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 82d4 	beq.w	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	827b      	strh	r3, [r7, #18]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	441a      	add	r2, r3
 800611a:	8a7b      	ldrh	r3, [r7, #18]
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
 8006130:	e2b2      	b.n	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d021      	beq.n	8006180 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800616c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800617c:	b29b      	uxth	r3, r3
 800617e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006186:	2b01      	cmp	r3, #1
 8006188:	f040 8286 	bne.w	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	695a      	ldr	r2, [r3, #20]
 8006190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006194:	441a      	add	r2, r3
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	69da      	ldr	r2, [r3, #28]
 800619e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061a2:	441a      	add	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6a1a      	ldr	r2, [r3, #32]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d309      	bcc.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6a1a      	ldr	r2, [r3, #32]
 80061be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c0:	1ad2      	subs	r2, r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	621a      	str	r2, [r3, #32]
 80061c6:	e015      	b.n	80061f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80061d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80061de:	e009      	b.n	80061f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2200      	movs	r2, #0
 80061f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d155      	bne.n	80062a8 <HAL_PCD_EP_DB_Transmit+0x35a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800620a:	b29b      	uxth	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	4413      	add	r3, r2
 8006212:	63bb      	str	r3, [r7, #56]	; 0x38
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	011a      	lsls	r2, r3, #4
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	4413      	add	r3, r2
 800621e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006226:	2b00      	cmp	r3, #0
 8006228:	d112      	bne.n	8006250 <HAL_PCD_EP_DB_Transmit+0x302>
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006234:	b29a      	uxth	r2, r3
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006248:	b29a      	uxth	r2, r3
 800624a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e047      	b.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x392>
 8006250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006252:	2b3e      	cmp	r3, #62	; 0x3e
 8006254:	d811      	bhi.n	800627a <HAL_PCD_EP_DB_Transmit+0x32c>
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
 800625c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_PCD_EP_DB_Transmit+0x31e>
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	3301      	adds	r3, #1
 800626a:	64bb      	str	r3, [r7, #72]	; 0x48
 800626c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29a      	uxth	r2, r3
 8006274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	e032      	b.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x392>
 800627a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_PCD_EP_DB_Transmit+0x342>
 800628a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628c:	3b01      	subs	r3, #1
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e01b      	b.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d117      	bne.n	80062e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	643b      	str	r3, [r7, #64]	; 0x40
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c4:	4413      	add	r3, r2
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	011a      	lsls	r2, r3, #4
 80062ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062da:	b29a      	uxth	r2, r3
 80062dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6959      	ldr	r1, [r3, #20]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	891a      	ldrh	r2, [r3, #8]
 80062ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f004 f97d 	bl	800a5ee <USB_WritePMA>
 80062f4:	e1d0      	b.n	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	3306      	adds	r3, #6
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800631e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800632a:	429a      	cmp	r2, r3
 800632c:	d307      	bcc.n	800633e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006336:	1ad2      	subs	r2, r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	619a      	str	r2, [r3, #24]
 800633c:	e002      	b.n	8006344 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2200      	movs	r2, #0
 8006342:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 80c4 	bne.w	80064d6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d126      	bne.n	80063a4 <HAL_PCD_EP_DB_Transmit+0x456>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006364:	b29b      	uxth	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636a:	4413      	add	r3, r2
 800636c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	011a      	lsls	r2, r3, #4
 8006374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006376:	4413      	add	r3, r2
 8006378:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800637c:	66bb      	str	r3, [r7, #104]	; 0x68
 800637e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006388:	b29a      	uxth	r2, r3
 800638a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e01a      	b.n	80063da <HAL_PCD_EP_DB_Transmit+0x48c>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d116      	bne.n	80063da <HAL_PCD_EP_DB_Transmit+0x48c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	677b      	str	r3, [r7, #116]	; 0x74
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c0:	4413      	add	r3, r2
 80063c2:	677b      	str	r3, [r7, #116]	; 0x74
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	011a      	lsls	r2, r3, #4
 80063ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d2:	673b      	str	r3, [r7, #112]	; 0x70
 80063d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d6:	2200      	movs	r2, #0
 80063d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	67bb      	str	r3, [r7, #120]	; 0x78
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d12f      	bne.n	8006448 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006400:	4413      	add	r3, r2
 8006402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006410:	4413      	add	r3, r2
 8006412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800641a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643e:	b29a      	uxth	r2, r3
 8006440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e017      	b.n	8006478 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d113      	bne.n	8006478 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006458:	b29b      	uxth	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645e:	4413      	add	r3, r2
 8006460:	67bb      	str	r3, [r7, #120]	; 0x78
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	011a      	lsls	r2, r3, #4
 8006468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646a:	4413      	add	r3, r2
 800646c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006470:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006472:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006474:	2200      	movs	r2, #0
 8006476:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f005 ff33 	bl	800c2ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648a:	2b00      	cmp	r3, #0
 800648c:	f040 8104 	bne.w	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]
 80064d4:	e0e0      	b.n	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d121      	bne.n	8006524 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800652a:	2b01      	cmp	r3, #1
 800652c:	f040 80b4 	bne.w	8006698 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006538:	441a      	add	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006546:	441a      	add	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d309      	bcc.n	800656c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6a1a      	ldr	r2, [r3, #32]
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	1ad2      	subs	r2, r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	621a      	str	r2, [r3, #32]
 800656a:	e015      	b.n	8006598 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d107      	bne.n	8006584 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006574:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006578:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006582:	e009      	b.n	8006598 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	667b      	str	r3, [r7, #100]	; 0x64
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d155      	bne.n	8006652 <HAL_PCD_EP_DB_Transmit+0x704>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	461a      	mov	r2, r3
 80065b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065ba:	4413      	add	r3, r2
 80065bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	011a      	lsls	r2, r3, #4
 80065c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d112      	bne.n	80065fa <HAL_PCD_EP_DB_Transmit+0x6ac>
 80065d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e044      	b.n	8006684 <HAL_PCD_EP_DB_Transmit+0x736>
 80065fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fc:	2b3e      	cmp	r3, #62	; 0x3e
 80065fe:	d811      	bhi.n	8006624 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006602:	085b      	lsrs	r3, r3, #1
 8006604:	657b      	str	r3, [r7, #84]	; 0x54
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006612:	3301      	adds	r3, #1
 8006614:	657b      	str	r3, [r7, #84]	; 0x54
 8006616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29a      	uxth	r2, r3
 800661e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e02f      	b.n	8006684 <HAL_PCD_EP_DB_Transmit+0x736>
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	657b      	str	r3, [r7, #84]	; 0x54
 800662a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	3b01      	subs	r3, #1
 8006638:	657b      	str	r3, [r7, #84]	; 0x54
 800663a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664a:	b29a      	uxth	r2, r3
 800664c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e018      	b.n	8006684 <HAL_PCD_EP_DB_Transmit+0x736>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d114      	bne.n	8006684 <HAL_PCD_EP_DB_Transmit+0x736>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006662:	b29b      	uxth	r3, r3
 8006664:	461a      	mov	r2, r3
 8006666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006668:	4413      	add	r3, r2
 800666a:	667b      	str	r3, [r7, #100]	; 0x64
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	011a      	lsls	r2, r3, #4
 8006672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006674:	4413      	add	r3, r2
 8006676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800667a:	663b      	str	r3, [r7, #96]	; 0x60
 800667c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800667e:	b29a      	uxth	r2, r3
 8006680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006682:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6959      	ldr	r1, [r3, #20]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	895a      	ldrh	r2, [r3, #10]
 8006690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	f003 ffab 	bl	800a5ee <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b2:	823b      	strh	r3, [r7, #16]
 80066b4:	8a3b      	ldrh	r3, [r7, #16]
 80066b6:	f083 0310 	eor.w	r3, r3, #16
 80066ba:	823b      	strh	r3, [r7, #16]
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	f083 0320 	eor.w	r3, r3, #32
 80066c2:	823b      	strh	r3, [r7, #16]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	441a      	add	r2, r3
 80066d2:	8a3b      	ldrh	r3, [r7, #16]
 80066d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3788      	adds	r7, #136	; 0x88
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b087      	sub	sp, #28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	817b      	strh	r3, [r7, #10]
 8006700:	4613      	mov	r3, r2
 8006702:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e009      	b.n	800673c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006728:	897a      	ldrh	r2, [r7, #10]
 800672a:	4613      	mov	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800673c:	893b      	ldrh	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2200      	movs	r2, #0
 8006746:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	b29a      	uxth	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	80da      	strh	r2, [r3, #6]
 8006750:	e00b      	b.n	800676a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2201      	movs	r2, #1
 8006756:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	b29a      	uxth	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	0c1b      	lsrs	r3, r3, #16
 8006764:	b29a      	uxth	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr
	...

08006778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e26c      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8087 	beq.w	80068a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006798:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 030c 	and.w	r3, r3, #12
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d00c      	beq.n	80067be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067a4:	4b8f      	ldr	r3, [pc, #572]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d112      	bne.n	80067d6 <HAL_RCC_OscConfig+0x5e>
 80067b0:	4b8c      	ldr	r3, [pc, #560]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d10b      	bne.n	80067d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067be:	4b89      	ldr	r3, [pc, #548]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d06c      	beq.n	80068a4 <HAL_RCC_OscConfig+0x12c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d168      	bne.n	80068a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e246      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x76>
 80067e0:	4b80      	ldr	r3, [pc, #512]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a7f      	ldr	r2, [pc, #508]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	e02e      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x98>
 80067f6:	4b7b      	ldr	r3, [pc, #492]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a7a      	ldr	r2, [pc, #488]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80067fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	4b78      	ldr	r3, [pc, #480]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a77      	ldr	r2, [pc, #476]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	e01d      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006818:	d10c      	bne.n	8006834 <HAL_RCC_OscConfig+0xbc>
 800681a:	4b72      	ldr	r3, [pc, #456]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a71      	ldr	r2, [pc, #452]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	4b6f      	ldr	r3, [pc, #444]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6e      	ldr	r2, [pc, #440]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e00b      	b.n	800684c <HAL_RCC_OscConfig+0xd4>
 8006834:	4b6b      	ldr	r3, [pc, #428]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a6a      	ldr	r2, [pc, #424]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800683a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	4b68      	ldr	r3, [pc, #416]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d013      	beq.n	800687c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fd f8e8 	bl	8003a28 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800685c:	f7fd f8e4 	bl	8003a28 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b64      	cmp	r3, #100	; 0x64
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e1fa      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686e:	4b5d      	ldr	r3, [pc, #372]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0f0      	beq.n	800685c <HAL_RCC_OscConfig+0xe4>
 800687a:	e014      	b.n	80068a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800687c:	f7fd f8d4 	bl	8003a28 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006884:	f7fd f8d0 	bl	8003a28 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e1e6      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x10c>
 80068a2:	e000      	b.n	80068a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d063      	beq.n	800697a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068b2:	4b4c      	ldr	r3, [pc, #304]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f003 030c 	and.w	r3, r3, #12
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068be:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 030c 	and.w	r3, r3, #12
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d11c      	bne.n	8006904 <HAL_RCC_OscConfig+0x18c>
 80068ca:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d116      	bne.n	8006904 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d6:	4b43      	ldr	r3, [pc, #268]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <HAL_RCC_OscConfig+0x176>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d001      	beq.n	80068ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e1ba      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ee:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4939      	ldr	r1, [pc, #228]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006902:	e03a      	b.n	800697a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d020      	beq.n	800694e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <HAL_RCC_OscConfig+0x270>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006912:	f7fd f889 	bl	8003a28 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800691a:	f7fd f885 	bl	8003a28 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e19b      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006938:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4927      	ldr	r1, [pc, #156]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	600b      	str	r3, [r1, #0]
 800694c:	e015      	b.n	800697a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694e:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <HAL_RCC_OscConfig+0x270>)
 8006950:	2200      	movs	r2, #0
 8006952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006954:	f7fd f868 	bl	8003a28 <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800695c:	f7fd f864 	bl	8003a28 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e17a      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f0      	bne.n	800695c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03a      	beq.n	80069fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d019      	beq.n	80069c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <HAL_RCC_OscConfig+0x274>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006994:	f7fd f848 	bl	8003a28 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800699c:	f7fd f844 	bl	8003a28 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e15a      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <HAL_RCC_OscConfig+0x26c>)
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80069ba:	2001      	movs	r0, #1
 80069bc:	f000 fac4 	bl	8006f48 <RCC_Delay>
 80069c0:	e01c      	b.n	80069fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <HAL_RCC_OscConfig+0x274>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c8:	f7fd f82e 	bl	8003a28 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ce:	e00f      	b.n	80069f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d0:	f7fd f82a 	bl	8003a28 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d908      	bls.n	80069f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e140      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	42420000 	.word	0x42420000
 80069ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069f0:	4b9e      	ldr	r3, [pc, #632]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e9      	bne.n	80069d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a6 	beq.w	8006b56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a0e:	4b97      	ldr	r3, [pc, #604]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10d      	bne.n	8006a36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a1a:	4b94      	ldr	r3, [pc, #592]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4a93      	ldr	r2, [pc, #588]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	61d3      	str	r3, [r2, #28]
 8006a26:	4b91      	ldr	r3, [pc, #580]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a32:	2301      	movs	r3, #1
 8006a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a36:	4b8e      	ldr	r3, [pc, #568]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d118      	bne.n	8006a74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a42:	4b8b      	ldr	r3, [pc, #556]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a8a      	ldr	r2, [pc, #552]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a4e:	f7fc ffeb 	bl	8003a28 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a56:	f7fc ffe7 	bl	8003a28 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b64      	cmp	r3, #100	; 0x64
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e0fd      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	4b81      	ldr	r3, [pc, #516]	; (8006c70 <HAL_RCC_OscConfig+0x4f8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCC_OscConfig+0x312>
 8006a7c:	4b7b      	ldr	r3, [pc, #492]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	4a7a      	ldr	r2, [pc, #488]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	6213      	str	r3, [r2, #32]
 8006a88:	e02d      	b.n	8006ae6 <HAL_RCC_OscConfig+0x36e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0x334>
 8006a92:	4b76      	ldr	r3, [pc, #472]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4a75      	ldr	r2, [pc, #468]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	6213      	str	r3, [r2, #32]
 8006a9e:	4b73      	ldr	r3, [pc, #460]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	4a72      	ldr	r2, [pc, #456]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	6213      	str	r3, [r2, #32]
 8006aaa:	e01c      	b.n	8006ae6 <HAL_RCC_OscConfig+0x36e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d10c      	bne.n	8006ace <HAL_RCC_OscConfig+0x356>
 8006ab4:	4b6d      	ldr	r3, [pc, #436]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	4a6c      	ldr	r2, [pc, #432]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006aba:	f043 0304 	orr.w	r3, r3, #4
 8006abe:	6213      	str	r3, [r2, #32]
 8006ac0:	4b6a      	ldr	r3, [pc, #424]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	4a69      	ldr	r2, [pc, #420]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	6213      	str	r3, [r2, #32]
 8006acc:	e00b      	b.n	8006ae6 <HAL_RCC_OscConfig+0x36e>
 8006ace:	4b67      	ldr	r3, [pc, #412]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	4a66      	ldr	r2, [pc, #408]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	6213      	str	r3, [r2, #32]
 8006ada:	4b64      	ldr	r3, [pc, #400]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	4a63      	ldr	r2, [pc, #396]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006ae0:	f023 0304 	bic.w	r3, r3, #4
 8006ae4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d015      	beq.n	8006b1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aee:	f7fc ff9b 	bl	8003a28 <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af4:	e00a      	b.n	8006b0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af6:	f7fc ff97 	bl	8003a28 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e0ab      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0c:	4b57      	ldr	r3, [pc, #348]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0ee      	beq.n	8006af6 <HAL_RCC_OscConfig+0x37e>
 8006b18:	e014      	b.n	8006b44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b1a:	f7fc ff85 	bl	8003a28 <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b22:	f7fc ff81 	bl	8003a28 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e095      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b38:	4b4c      	ldr	r3, [pc, #304]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1ee      	bne.n	8006b22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d105      	bne.n	8006b56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b4a:	4b48      	ldr	r3, [pc, #288]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4a47      	ldr	r2, [pc, #284]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8081 	beq.w	8006c62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b60:	4b42      	ldr	r3, [pc, #264]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 030c 	and.w	r3, r3, #12
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d061      	beq.n	8006c30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d146      	bne.n	8006c02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b74:	4b3f      	ldr	r3, [pc, #252]	; (8006c74 <HAL_RCC_OscConfig+0x4fc>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7a:	f7fc ff55 	bl	8003a28 <HAL_GetTick>
 8006b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b82:	f7fc ff51 	bl	8003a28 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e067      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b94:	4b35      	ldr	r3, [pc, #212]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f0      	bne.n	8006b82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a1b      	ldr	r3, [r3, #32]
 8006ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba8:	d108      	bne.n	8006bbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006baa:	4b30      	ldr	r3, [pc, #192]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	492d      	ldr	r1, [pc, #180]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bbc:	4b2b      	ldr	r3, [pc, #172]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a19      	ldr	r1, [r3, #32]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	4927      	ldr	r1, [pc, #156]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd4:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <HAL_RCC_OscConfig+0x4fc>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bda:	f7fc ff25 	bl	8003a28 <HAL_GetTick>
 8006bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006be0:	e008      	b.n	8006bf4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be2:	f7fc ff21 	bl	8003a28 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e037      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bf4:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0f0      	beq.n	8006be2 <HAL_RCC_OscConfig+0x46a>
 8006c00:	e02f      	b.n	8006c62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <HAL_RCC_OscConfig+0x4fc>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7fc ff0e 	bl	8003a28 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c10:	f7fc ff0a 	bl	8003a28 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e020      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c22:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x498>
 8006c2e:	e018      	b.n	8006c62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e013      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <HAL_RCC_OscConfig+0x4f4>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d106      	bne.n	8006c5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40007000 	.word	0x40007000
 8006c74:	42420060 	.word	0x42420060

08006c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e0d0      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c8c:	4b6a      	ldr	r3, [pc, #424]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d910      	bls.n	8006cbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9a:	4b67      	ldr	r3, [pc, #412]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 0207 	bic.w	r2, r3, #7
 8006ca2:	4965      	ldr	r1, [pc, #404]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006caa:	4b63      	ldr	r3, [pc, #396]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d001      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0b8      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d020      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cd4:	4b59      	ldr	r3, [pc, #356]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a58      	ldr	r2, [pc, #352]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006cda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cec:	4b53      	ldr	r3, [pc, #332]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4a52      	ldr	r2, [pc, #328]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006cf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf8:	4b50      	ldr	r3, [pc, #320]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	494d      	ldr	r1, [pc, #308]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d040      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d107      	bne.n	8006d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d115      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e07f      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d107      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d36:	4b41      	ldr	r3, [pc, #260]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e073      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d46:	4b3d      	ldr	r3, [pc, #244]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e06b      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f023 0203 	bic.w	r2, r3, #3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	4936      	ldr	r1, [pc, #216]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d68:	f7fc fe5e 	bl	8003a28 <HAL_GetTick>
 8006d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d70:	f7fc fe5a 	bl	8003a28 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e053      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d86:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f003 020c 	and.w	r2, r3, #12
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d1eb      	bne.n	8006d70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d98:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d210      	bcs.n	8006dc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da6:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f023 0207 	bic.w	r2, r3, #7
 8006dae:	4922      	ldr	r1, [pc, #136]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db6:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <HAL_RCC_ClockConfig+0x1c0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d001      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e032      	b.n	8006e2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd4:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	4916      	ldr	r1, [pc, #88]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006df2:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	490e      	ldr	r1, [pc, #56]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e06:	f000 f821 	bl	8006e4c <HAL_RCC_GetSysClockFreq>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_RCC_ClockConfig+0x1c4>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	091b      	lsrs	r3, r3, #4
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	490a      	ldr	r1, [pc, #40]	; (8006e40 <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	5ccb      	ldrb	r3, [r1, r3]
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	4a09      	ldr	r2, [pc, #36]	; (8006e44 <HAL_RCC_ClockConfig+0x1cc>)
 8006e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <HAL_RCC_ClockConfig+0x1d0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fc fdbc 	bl	80039a4 <HAL_InitTick>

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	40022000 	.word	0x40022000
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	0800c9a4 	.word	0x0800c9a4
 8006e44:	20000050 	.word	0x20000050
 8006e48:	20000054 	.word	0x20000054

08006e4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e4c:	b490      	push	{r4, r7}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e52:	4b2a      	ldr	r3, [pc, #168]	; (8006efc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006e54:	1d3c      	adds	r4, r7, #4
 8006e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006e5c:	f240 2301 	movw	r3, #513	; 0x201
 8006e60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e76:	4b22      	ldr	r3, [pc, #136]	; (8006f00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d002      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0x40>
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d003      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x46>
 8006e8a:	e02d      	b.n	8006ee8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e8e:	623b      	str	r3, [r7, #32]
      break;
 8006e90:	e02d      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	0c9b      	lsrs	r3, r3, #18
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006ea4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d013      	beq.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	0c5b      	lsrs	r3, r3, #17
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ec4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	4a0e      	ldr	r2, [pc, #56]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eca:	fb02 f203 	mul.w	r2, r2, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed6:	e004      	b.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	4a0b      	ldr	r2, [pc, #44]	; (8006f08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006edc:	fb02 f303 	mul.w	r3, r2, r3
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	623b      	str	r3, [r7, #32]
      break;
 8006ee6:	e002      	b.n	8006eee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006eea:	623b      	str	r3, [r7, #32]
      break;
 8006eec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc90      	pop	{r4, r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	0800c934 	.word	0x0800c934
 8006f00:	40021000 	.word	0x40021000
 8006f04:	007a1200 	.word	0x007a1200
 8006f08:	003d0900 	.word	0x003d0900

08006f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f10:	4b02      	ldr	r3, [pc, #8]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x10>)
 8006f12:	681b      	ldr	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	20000050 	.word	0x20000050

08006f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f24:	f7ff fff2 	bl	8006f0c <HAL_RCC_GetHCLKFreq>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	0adb      	lsrs	r3, r3, #11
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	4903      	ldr	r1, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f36:	5ccb      	ldrb	r3, [r1, r3]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40021000 	.word	0x40021000
 8006f44:	0800c9b4 	.word	0x0800c9b4

08006f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <RCC_Delay+0x34>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <RCC_Delay+0x38>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	0a5b      	lsrs	r3, r3, #9
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	fb02 f303 	mul.w	r3, r2, r3
 8006f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006f64:	bf00      	nop
  }
  while (Delay --);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1e5a      	subs	r2, r3, #1
 8006f6a:	60fa      	str	r2, [r7, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f9      	bne.n	8006f64 <RCC_Delay+0x1c>
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr
 8006f7c:	20000050 	.word	0x20000050
 8006f80:	10624dd3 	.word	0x10624dd3

08006f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d07d      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10d      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	4a4b      	ldr	r2, [pc, #300]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fba:	61d3      	str	r3, [r2, #28]
 8006fbc:	4b49      	ldr	r3, [pc, #292]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fcc:	4b46      	ldr	r3, [pc, #280]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d118      	bne.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fd8:	4b43      	ldr	r3, [pc, #268]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a42      	ldr	r2, [pc, #264]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe4:	f7fc fd20 	bl	8003a28 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fea:	e008      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fec:	f7fc fd1c 	bl	8003a28 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e06d      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffe:	4b3a      	ldr	r3, [pc, #232]	; (80070e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f0      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800700a:	4b36      	ldr	r3, [pc, #216]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d02e      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d027      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007028:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007032:	4b2e      	ldr	r3, [pc, #184]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007038:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800703e:	4a29      	ldr	r2, [pc, #164]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d014      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fc fceb 	bl	8003a28 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007054:	e00a      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007056:	f7fc fce7 	bl	8003a28 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	f241 3288 	movw	r2, #5000	; 0x1388
 8007064:	4293      	cmp	r3, r2
 8007066:	d901      	bls.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e036      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706c:	4b1d      	ldr	r3, [pc, #116]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ee      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007078:	4b1a      	ldr	r3, [pc, #104]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4917      	ldr	r1, [pc, #92]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007086:	4313      	orrs	r3, r2
 8007088:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d105      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007090:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d008      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	490b      	ldr	r1, [pc, #44]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070c6:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	4904      	ldr	r1, [pc, #16]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	40021000 	.word	0x40021000
 80070e8:	40007000 	.word	0x40007000
 80070ec:	42420440 	.word	0x42420440

080070f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070f0:	b590      	push	{r4, r7, lr}
 80070f2:	b08d      	sub	sp, #52	; 0x34
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80070f8:	4b5a      	ldr	r3, [pc, #360]	; (8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80070fa:	f107 040c 	add.w	r4, r7, #12
 80070fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007104:	f240 2301 	movw	r3, #513	; 0x201
 8007108:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800710a:	2300      	movs	r3, #0
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
 800710e:	2300      	movs	r3, #0
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007112:	2300      	movs	r3, #0
 8007114:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	2300      	movs	r3, #0
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b10      	cmp	r3, #16
 8007122:	d00a      	beq.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b10      	cmp	r3, #16
 8007128:	f200 8091 	bhi.w	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d04c      	beq.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d07c      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007138:	e089      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800713a:	4b4b      	ldr	r3, [pc, #300]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007140:	4b49      	ldr	r3, [pc, #292]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 8082 	beq.w	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	0c9b      	lsrs	r3, r3, #18
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800715a:	4413      	add	r3, r2
 800715c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007160:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d018      	beq.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800716c:	4b3e      	ldr	r3, [pc, #248]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	0c5b      	lsrs	r3, r3, #17
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800717a:	4413      	add	r3, r2
 800717c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00d      	beq.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800718c:	4a37      	ldr	r2, [pc, #220]	; (800726c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	fbb2 f2f3 	udiv	r2, r2, r3
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	fb02 f303 	mul.w	r3, r2, r3
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719c:	e004      	b.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	4a33      	ldr	r2, [pc, #204]	; (8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80071a8:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b4:	d102      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80071ba:	e04a      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4a2c      	ldr	r2, [pc, #176]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80071ca:	e042      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80071cc:	4b26      	ldr	r3, [pc, #152]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071dc:	d108      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80071e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ee:	e01f      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fa:	d109      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80071fc:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8007208:	f649 4340 	movw	r3, #40000	; 0x9c40
 800720c:	62bb      	str	r3, [r7, #40]	; 0x28
 800720e:	e00f      	b.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721a:	d11c      	bne.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800721c:	4b12      	ldr	r3, [pc, #72]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d016      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8007228:	f24f 4324 	movw	r3, #62500	; 0xf424
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800722e:	e012      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8007230:	e011      	b.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007232:	f7ff fe75 	bl	8006f20 <HAL_RCC_GetPCLK2Freq>
 8007236:	4602      	mov	r2, r0
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	0b9b      	lsrs	r3, r3, #14
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	3301      	adds	r3, #1
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	fbb2 f3f3 	udiv	r3, r2, r3
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800724c:	e004      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800724e:	bf00      	nop
 8007250:	e002      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007252:	bf00      	nop
 8007254:	e000      	b.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8007256:	bf00      	nop
    }
  }
  return (frequency);
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800725a:	4618      	mov	r0, r3
 800725c:	3734      	adds	r7, #52	; 0x34
 800725e:	46bd      	mov	sp, r7
 8007260:	bd90      	pop	{r4, r7, pc}
 8007262:	bf00      	nop
 8007264:	0800c944 	.word	0x0800c944
 8007268:	40021000 	.word	0x40021000
 800726c:	007a1200 	.word	0x007a1200
 8007270:	003d0900 	.word	0x003d0900
 8007274:	aaaaaaab 	.word	0xaaaaaaab

08007278 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e076      	b.n	8007378 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b00      	cmp	r3, #0
 8007290:	d108      	bne.n	80072a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800729a:	d009      	beq.n	80072b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	61da      	str	r2, [r3, #28]
 80072a2:	e005      	b.n	80072b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d106      	bne.n	80072d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fe26 	bl	8002f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	699b      	ldr	r3, [r3, #24]
 800731c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007334:	ea42 0103 	orr.w	r1, r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	0c1a      	lsrs	r2, r3, #16
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f002 0204 	and.w	r2, r2, #4
 8007356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Transmit+0x22>
 800739e:	2302      	movs	r3, #2
 80073a0:	e126      	b.n	80075f0 <HAL_SPI_Transmit+0x270>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073aa:	f7fc fb3d 	bl	8003a28 <HAL_GetTick>
 80073ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d002      	beq.n	80073c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
 80073c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073c4:	e10b      	b.n	80075de <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_SPI_Transmit+0x52>
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073d6:	e102      	b.n	80075de <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2203      	movs	r2, #3
 80073dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741e:	d10f      	bne.n	8007440 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800742e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800743e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d007      	beq.n	800745e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007466:	d14b      	bne.n	8007500 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_SPI_Transmit+0xf6>
 8007470:	8afb      	ldrh	r3, [r7, #22]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d13e      	bne.n	80074f4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747a:	881a      	ldrh	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	1c9a      	adds	r2, r3, #2
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007490:	b29b      	uxth	r3, r3
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800749a:	e02b      	b.n	80074f4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d112      	bne.n	80074d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	881a      	ldrh	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	1c9a      	adds	r2, r3, #2
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80074ce:	e011      	b.n	80074f4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d0:	f7fc faaa 	bl	8003a28 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d803      	bhi.n	80074e8 <HAL_SPI_Transmit+0x168>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d102      	bne.n	80074ee <HAL_SPI_Transmit+0x16e>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d102      	bne.n	80074f4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074f2:	e074      	b.n	80075de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1ce      	bne.n	800749c <HAL_SPI_Transmit+0x11c>
 80074fe:	e04c      	b.n	800759a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <HAL_SPI_Transmit+0x18e>
 8007508:	8afb      	ldrh	r3, [r7, #22]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d140      	bne.n	8007590 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	330c      	adds	r3, #12
 8007518:	7812      	ldrb	r2, [r2, #0]
 800751a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007534:	e02c      	b.n	8007590 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d113      	bne.n	800756c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	86da      	strh	r2, [r3, #54]	; 0x36
 800756a:	e011      	b.n	8007590 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800756c:	f7fc fa5c 	bl	8003a28 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d803      	bhi.n	8007584 <HAL_SPI_Transmit+0x204>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007582:	d102      	bne.n	800758a <HAL_SPI_Transmit+0x20a>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800758e:	e026      	b.n	80075de <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1cd      	bne.n	8007536 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f8b2 	bl	8007708 <SPI_EndRxTxTransaction>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	77fb      	strb	r3, [r7, #31]
 80075da:	e000      	b.n	80075de <HAL_SPI_Transmit+0x25e>
  }

error:
 80075dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3720      	adds	r7, #32
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007608:	f7fc fa0e 	bl	8003a28 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	4413      	add	r3, r2
 8007616:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007618:	f7fc fa06 	bl	8003a28 <HAL_GetTick>
 800761c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800761e:	4b39      	ldr	r3, [pc, #228]	; (8007704 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	015b      	lsls	r3, r3, #5
 8007624:	0d1b      	lsrs	r3, r3, #20
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	fb02 f303 	mul.w	r3, r2, r3
 800762c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800762e:	e054      	b.n	80076da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d050      	beq.n	80076da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007638:	f7fc f9f6 	bl	8003a28 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	429a      	cmp	r2, r3
 8007646:	d902      	bls.n	800764e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d13d      	bne.n	80076ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800765c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007666:	d111      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007670:	d004      	beq.n	800767c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767a:	d107      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007694:	d10f      	bne.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e017      	b.n	80076fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689a      	ldr	r2, [r3, #8]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4013      	ands	r3, r2
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d19b      	bne.n	8007630 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3720      	adds	r7, #32
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000050 	.word	0x20000050

08007708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	2180      	movs	r1, #128	; 0x80
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff ff6a 	bl	80075f8 <SPI_WaitFlagStateUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e000      	b.n	800773c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e041      	b.n	80077da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fb fc14 	bl	8002f98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f000 fb38 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_IC_Start_IT+0x1a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	e013      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x42>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d104      	bne.n	800780e <HAL_TIM_IC_Start_IT+0x2a>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800780a:	b2db      	uxtb	r3, r3
 800780c:	e00b      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x42>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d104      	bne.n	800781e <HAL_TIM_IC_Start_IT+0x3a>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800781a:	b2db      	uxtb	r3, r3
 800781c:	e003      	b.n	8007826 <HAL_TIM_IC_Start_IT+0x42>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007824:	b2db      	uxtb	r3, r3
 8007826:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <HAL_TIM_IC_Start_IT+0x54>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007834:	b2db      	uxtb	r3, r3
 8007836:	e013      	b.n	8007860 <HAL_TIM_IC_Start_IT+0x7c>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d104      	bne.n	8007848 <HAL_TIM_IC_Start_IT+0x64>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007844:	b2db      	uxtb	r3, r3
 8007846:	e00b      	b.n	8007860 <HAL_TIM_IC_Start_IT+0x7c>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b08      	cmp	r3, #8
 800784c:	d104      	bne.n	8007858 <HAL_TIM_IC_Start_IT+0x74>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e003      	b.n	8007860 <HAL_TIM_IC_Start_IT+0x7c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785e:	b2db      	uxtb	r3, r3
 8007860:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d102      	bne.n	800786e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d001      	beq.n	8007872 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0b3      	b.n	80079da <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_TIM_IC_Start_IT+0x9e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	e013      	b.n	80078aa <HAL_TIM_IC_Start_IT+0xc6>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b04      	cmp	r3, #4
 8007886:	d104      	bne.n	8007892 <HAL_TIM_IC_Start_IT+0xae>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007890:	e00b      	b.n	80078aa <HAL_TIM_IC_Start_IT+0xc6>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d104      	bne.n	80078a2 <HAL_TIM_IC_Start_IT+0xbe>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a0:	e003      	b.n	80078aa <HAL_TIM_IC_Start_IT+0xc6>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_IC_Start_IT+0xd6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b8:	e013      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0xfe>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d104      	bne.n	80078ca <HAL_TIM_IC_Start_IT+0xe6>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c8:	e00b      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0xfe>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d104      	bne.n	80078da <HAL_TIM_IC_Start_IT+0xf6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078d8:	e003      	b.n	80078e2 <HAL_TIM_IC_Start_IT+0xfe>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b0c      	cmp	r3, #12
 80078e6:	d841      	bhi.n	800796c <HAL_TIM_IC_Start_IT+0x188>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <HAL_TIM_IC_Start_IT+0x10c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007925 	.word	0x08007925
 80078f4:	0800796d 	.word	0x0800796d
 80078f8:	0800796d 	.word	0x0800796d
 80078fc:	0800796d 	.word	0x0800796d
 8007900:	08007937 	.word	0x08007937
 8007904:	0800796d 	.word	0x0800796d
 8007908:	0800796d 	.word	0x0800796d
 800790c:	0800796d 	.word	0x0800796d
 8007910:	08007949 	.word	0x08007949
 8007914:	0800796d 	.word	0x0800796d
 8007918:	0800796d 	.word	0x0800796d
 800791c:	0800796d 	.word	0x0800796d
 8007920:	0800795b 	.word	0x0800795b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68da      	ldr	r2, [r3, #12]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0202 	orr.w	r2, r2, #2
 8007932:	60da      	str	r2, [r3, #12]
      break;
 8007934:	e01b      	b.n	800796e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0204 	orr.w	r2, r2, #4
 8007944:	60da      	str	r2, [r3, #12]
      break;
 8007946:	e012      	b.n	800796e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	60da      	str	r2, [r3, #12]
      break;
 8007958:	e009      	b.n	800796e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0210 	orr.w	r2, r2, #16
 8007968:	60da      	str	r2, [r3, #12]
      break;
 800796a:	e000      	b.n	800796e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800796c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fbad 	bl	80080d6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a18      	ldr	r2, [pc, #96]	; (80079e4 <HAL_TIM_IC_Start_IT+0x200>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00e      	beq.n	80079a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798e:	d009      	beq.n	80079a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <HAL_TIM_IC_Start_IT+0x204>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d004      	beq.n	80079a4 <HAL_TIM_IC_Start_IT+0x1c0>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a13      	ldr	r2, [pc, #76]	; (80079ec <HAL_TIM_IC_Start_IT+0x208>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d111      	bne.n	80079c8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0307 	and.w	r3, r3, #7
 80079ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d010      	beq.n	80079d8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0201 	orr.w	r2, r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c6:	e007      	b.n	80079d8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0202 	mvn.w	r2, #2
 8007a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fa fecc 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9c1 	bl	8007dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f9c7 	bl	8007dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fa fea2 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f997 	bl	8007dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f99d 	bl	8007dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fa fe78 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f96d 	bl	8007dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f973 	bl	8007dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7fa fe4e 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f943 	bl	8007dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f949 	bl	8007dd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f91e 	bl	8007db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fb27 	bl	80081ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f90d 	bl	8007de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0220 	mvn.w	r2, #32
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 faf2 	bl	80081dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e082      	b.n	8007d20 <HAL_TIM_IC_ConfigChannel+0x120>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11b      	bne.n	8007c60 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	6819      	ldr	r1, [r3, #0]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f000 f940 	bl	8007ebc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699a      	ldr	r2, [r3, #24]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 020c 	bic.w	r2, r2, #12
 8007c4a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6999      	ldr	r1, [r3, #24]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	689a      	ldr	r2, [r3, #8]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	619a      	str	r2, [r3, #24]
 8007c5e:	e05a      	b.n	8007d16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d11c      	bne.n	8007ca0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6819      	ldr	r1, [r3, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f000 f97b 	bl	8007f70 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699a      	ldr	r2, [r3, #24]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c88:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6999      	ldr	r1, [r3, #24]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	021a      	lsls	r2, r3, #8
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	619a      	str	r2, [r3, #24]
 8007c9e:	e03a      	b.n	8007d16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d11b      	bne.n	8007cde <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6818      	ldr	r0, [r3, #0]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f000 f997 	bl	8007fe8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 020c 	bic.w	r2, r2, #12
 8007cc8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69d9      	ldr	r1, [r3, #28]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	61da      	str	r2, [r3, #28]
 8007cdc:	e01b      	b.n	8007d16 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	6819      	ldr	r1, [r3, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f000 f9b6 	bl	800805e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69da      	ldr	r2, [r3, #28]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69d9      	ldr	r1, [r3, #28]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	021a      	lsls	r2, r3, #8
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	430a      	orrs	r2, r1
 8007d14:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b0c      	cmp	r3, #12
 8007d3a:	d831      	bhi.n	8007da0 <HAL_TIM_ReadCapturedValue+0x78>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d79 	.word	0x08007d79
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da1 	.word	0x08007da1
 8007d54:	08007d83 	.word	0x08007d83
 8007d58:	08007da1 	.word	0x08007da1
 8007d5c:	08007da1 	.word	0x08007da1
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08007d8d 	.word	0x08007d8d
 8007d68:	08007da1 	.word	0x08007da1
 8007d6c:	08007da1 	.word	0x08007da1
 8007d70:	08007da1 	.word	0x08007da1
 8007d74:	08007d97 	.word	0x08007d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	60fb      	str	r3, [r7, #12]

      break;
 8007d80:	e00f      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d88:	60fb      	str	r3, [r7, #12]

      break;
 8007d8a:	e00a      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	60fb      	str	r3, [r7, #12]

      break;
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	60fb      	str	r3, [r7, #12]

      break;
 8007d9e:	e000      	b.n	8007da2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007da0:	bf00      	nop
  }

  return tmpreg;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bc80      	pop	{r7}
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bc80      	pop	{r7}
 8007de4:	4770      	bx	lr

08007de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <TIM_Base_SetConfig+0xb8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00b      	beq.n	8007e28 <TIM_Base_SetConfig+0x30>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e16:	d007      	beq.n	8007e28 <TIM_Base_SetConfig+0x30>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a26      	ldr	r2, [pc, #152]	; (8007eb4 <TIM_Base_SetConfig+0xbc>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d003      	beq.n	8007e28 <TIM_Base_SetConfig+0x30>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a25      	ldr	r2, [pc, #148]	; (8007eb8 <TIM_Base_SetConfig+0xc0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d108      	bne.n	8007e3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <TIM_Base_SetConfig+0xb8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00b      	beq.n	8007e5a <TIM_Base_SetConfig+0x62>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e48:	d007      	beq.n	8007e5a <TIM_Base_SetConfig+0x62>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a19      	ldr	r2, [pc, #100]	; (8007eb4 <TIM_Base_SetConfig+0xbc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d003      	beq.n	8007e5a <TIM_Base_SetConfig+0x62>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <TIM_Base_SetConfig+0xc0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d108      	bne.n	8007e6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a07      	ldr	r2, [pc, #28]	; (8007eb0 <TIM_Base_SetConfig+0xb8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d103      	bne.n	8007ea0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	615a      	str	r2, [r3, #20]
}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40000400 	.word	0x40000400
 8007eb8:	40000800 	.word	0x40000800

08007ebc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f023 0201 	bic.w	r2, r3, #1
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <TIM_TI1_SetConfig+0xa8>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_TI1_SetConfig+0x46>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef0:	d007      	beq.n	8007f02 <TIM_TI1_SetConfig+0x46>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a1c      	ldr	r2, [pc, #112]	; (8007f68 <TIM_TI1_SetConfig+0xac>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_TI1_SetConfig+0x46>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	4a1b      	ldr	r2, [pc, #108]	; (8007f6c <TIM_TI1_SetConfig+0xb0>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d101      	bne.n	8007f06 <TIM_TI1_SetConfig+0x4a>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <TIM_TI1_SetConfig+0x4c>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d008      	beq.n	8007f1e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 0303 	bic.w	r3, r3, #3
 8007f12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e003      	b.n	8007f26 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f043 0301 	orr.w	r3, r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	011b      	lsls	r3, r3, #4
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f023 030a 	bic.w	r3, r3, #10
 8007f40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 030a 	and.w	r3, r3, #10
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800

08007f70 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f023 0210 	bic.w	r2, r3, #16
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	021b      	lsls	r3, r3, #8
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	031b      	lsls	r3, r3, #12
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr

08007fe8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f023 0303 	bic.w	r3, r3, #3
 8008014:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	b2db      	uxtb	r3, r3
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008038:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	621a      	str	r2, [r3, #32]
}
 8008054:	bf00      	nop
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800805e:	b480      	push	{r7}
 8008060:	b087      	sub	sp, #28
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	69db      	ldr	r3, [r3, #28]
 800807c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800809c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	031b      	lsls	r3, r3, #12
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	031b      	lsls	r3, r3, #12
 80080b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	4313      	orrs	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	621a      	str	r2, [r3, #32]
}
 80080cc:	bf00      	nop
 80080ce:	371c      	adds	r7, #28
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b087      	sub	sp, #28
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2201      	movs	r2, #1
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	43db      	mvns	r3, r3
 80080f8:	401a      	ands	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1a      	ldr	r2, [r3, #32]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	fa01 f303 	lsl.w	r3, r1, r3
 800810e:	431a      	orrs	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	621a      	str	r2, [r3, #32]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
	...

08008120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	d101      	bne.n	8008138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008134:	2302      	movs	r3, #2
 8008136:	e046      	b.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a16      	ldr	r2, [pc, #88]	; (80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00e      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d009      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a12      	ldr	r2, [pc, #72]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a10      	ldr	r2, [pc, #64]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10c      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr
 80081d0:	40012c00 	.word	0x40012c00
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800

080081dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bc80      	pop	{r7}
 80081ec:	4770      	bx	lr

080081ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008200:	b084      	sub	sp, #16
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	f107 0014 	add.w	r0, r7, #20
 800820e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	b004      	add	sp, #16
 800821e:	4770      	bx	lr

08008220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008230:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008234:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	b29a      	uxth	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3714      	adds	r7, #20
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008254:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008258:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	b29b      	uxth	r3, r3
 8008266:	43db      	mvns	r3, r3
 8008268:	b29b      	uxth	r3, r3
 800826a:	4013      	ands	r3, r2
 800826c:	b29a      	uxth	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr

08008298 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008298:	b084      	sub	sp, #16
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	f107 0014 	add.w	r0, r7, #20
 80082a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	b004      	add	sp, #16
 80082d6:	4770      	bx	lr

080082d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082d8:	b480      	push	{r7}
 80082da:	b09b      	sub	sp, #108	; 0x6c
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	2b03      	cmp	r3, #3
 8008308:	d81f      	bhi.n	800834a <USB_ActivateEndpoint+0x72>
 800830a:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USB_ActivateEndpoint+0x38>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008321 	.word	0x08008321
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008353 	.word	0x08008353
 800831c:	0800832f 	.word	0x0800832f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008320:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008328:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800832c:	e012      	b.n	8008354 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800832e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008332:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008336:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800833a:	e00b      	b.n	8008354 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800833c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008344:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008348:	e004      	b.n	8008354 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008350:	e000      	b.n	8008354 <USB_ActivateEndpoint+0x7c>
      break;
 8008352:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	441a      	add	r2, r3
 800835e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800836a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008372:	b29b      	uxth	r3, r3
 8008374:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838c:	b29a      	uxth	r2, r3
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	4313      	orrs	r3, r2
 8008396:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	441a      	add	r2, r3
 80083a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80083a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	7b1b      	ldrb	r3, [r3, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 8149 	bne.w	8008658 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	785b      	ldrb	r3, [r3, #1]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8084 	beq.w	80084d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083da:	b29b      	uxth	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4413      	add	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	011a      	lsls	r2, r3, #4
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	005b      	lsls	r3, r3, #1
 80083fe:	b29a      	uxth	r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	81fb      	strh	r3, [r7, #14]
 8008412:	89fb      	ldrh	r3, [r7, #14]
 8008414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01b      	beq.n	8008454 <USB_ActivateEndpoint+0x17c>
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008432:	81bb      	strh	r3, [r7, #12]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	89bb      	ldrh	r3, [r7, #12]
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	78db      	ldrb	r3, [r3, #3]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d020      	beq.n	800849e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008472:	813b      	strh	r3, [r7, #8]
 8008474:	893b      	ldrh	r3, [r7, #8]
 8008476:	f083 0320 	eor.w	r3, r3, #32
 800847a:	813b      	strh	r3, [r7, #8]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	893b      	ldrh	r3, [r7, #8]
 8008488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800848c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008498:	b29b      	uxth	r3, r3
 800849a:	8013      	strh	r3, [r2, #0]
 800849c:	e27f      	b.n	800899e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	881b      	ldrh	r3, [r3, #0]
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b4:	817b      	strh	r3, [r7, #10]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	441a      	add	r2, r3
 80084c0:	897b      	ldrh	r3, [r7, #10]
 80084c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	8013      	strh	r3, [r2, #0]
 80084d6:	e262      	b.n	800899e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	4413      	add	r3, r2
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	011a      	lsls	r2, r3, #4
 80084f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	88db      	ldrh	r3, [r3, #6]
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	b29b      	uxth	r3, r3
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008516:	b29b      	uxth	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	4413      	add	r3, r2
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	011a      	lsls	r2, r3, #4
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	4413      	add	r3, r2
 800852a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800852e:	623b      	str	r3, [r7, #32]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d112      	bne.n	800855e <USB_ActivateEndpoint+0x286>
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008542:	b29a      	uxth	r2, r3
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	801a      	strh	r2, [r3, #0]
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008556:	b29a      	uxth	r2, r3
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	e02f      	b.n	80085be <USB_ActivateEndpoint+0x2e6>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	2b3e      	cmp	r3, #62	; 0x3e
 8008564:	d813      	bhi.n	800858e <USB_ActivateEndpoint+0x2b6>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	085b      	lsrs	r3, r3, #1
 800856c:	663b      	str	r3, [r7, #96]	; 0x60
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <USB_ActivateEndpoint+0x2a8>
 800857a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800857c:	3301      	adds	r3, #1
 800857e:	663b      	str	r3, [r7, #96]	; 0x60
 8008580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008582:	b29b      	uxth	r3, r3
 8008584:	029b      	lsls	r3, r3, #10
 8008586:	b29a      	uxth	r2, r3
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e017      	b.n	80085be <USB_ActivateEndpoint+0x2e6>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	663b      	str	r3, [r7, #96]	; 0x60
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d102      	bne.n	80085a8 <USB_ActivateEndpoint+0x2d0>
 80085a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a4:	3b01      	subs	r3, #1
 80085a6:	663b      	str	r3, [r7, #96]	; 0x60
 80085a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	029b      	lsls	r3, r3, #10
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	83fb      	strh	r3, [r7, #30]
 80085cc:	8bfb      	ldrh	r3, [r7, #30]
 80085ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01b      	beq.n	800860e <USB_ActivateEndpoint+0x336>
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ec:	83bb      	strh	r3, [r7, #28]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	8bbb      	ldrh	r3, [r7, #28]
 80085fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860a:	b29b      	uxth	r3, r3
 800860c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008624:	837b      	strh	r3, [r7, #26]
 8008626:	8b7b      	ldrh	r3, [r7, #26]
 8008628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800862c:	837b      	strh	r3, [r7, #26]
 800862e:	8b7b      	ldrh	r3, [r7, #26]
 8008630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008634:	837b      	strh	r3, [r7, #26]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	441a      	add	r2, r3
 8008640:	8b7b      	ldrh	r3, [r7, #26]
 8008642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800864e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008652:	b29b      	uxth	r3, r3
 8008654:	8013      	strh	r3, [r2, #0]
 8008656:	e1a2      	b.n	800899e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29b      	uxth	r3, r3
 8008666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800866a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800866e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800868c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008690:	b29b      	uxth	r3, r3
 8008692:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65bb      	str	r3, [r7, #88]	; 0x58
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800869e:	b29b      	uxth	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086a4:	4413      	add	r3, r2
 80086a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	011a      	lsls	r2, r3, #4
 80086ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086b6:	657b      	str	r3, [r7, #84]	; 0x54
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	085b      	lsrs	r3, r3, #1
 80086be:	b29b      	uxth	r3, r3
 80086c0:	005b      	lsls	r3, r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086c6:	801a      	strh	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	653b      	str	r3, [r7, #80]	; 0x50
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d8:	4413      	add	r3, r2
 80086da:	653b      	str	r3, [r7, #80]	; 0x50
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	011a      	lsls	r2, r3, #4
 80086e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80086ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8091 	bne.w	8008828 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008714:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01b      	beq.n	8008756 <USB_ActivateEndpoint+0x47e>
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	881b      	ldrh	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008734:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	441a      	add	r2, r3
 8008740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800874a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800874e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008752:	b29b      	uxth	r3, r3
 8008754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	873b      	strh	r3, [r7, #56]	; 0x38
 8008764:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01b      	beq.n	80087a6 <USB_ActivateEndpoint+0x4ce>
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008784:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	441a      	add	r2, r3
 8008790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800879a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800879e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	441a      	add	r2, r3
 80087d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008804:	867b      	strh	r3, [r7, #50]	; 0x32
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	441a      	add	r2, r3
 8008810:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800881a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008822:	b29b      	uxth	r3, r3
 8008824:	8013      	strh	r3, [r2, #0]
 8008826:	e0ba      	b.n	800899e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800883c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01d      	beq.n	8008880 <USB_ActivateEndpoint+0x5a8>
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	441a      	add	r2, r3
 8008868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800886c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887c:	b29b      	uxth	r3, r3
 800887e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	881b      	ldrh	r3, [r3, #0]
 800888c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01d      	beq.n	80088d8 <USB_ActivateEndpoint+0x600>
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	78db      	ldrb	r3, [r3, #3]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d024      	beq.n	800892a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80088fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80088fe:	f083 0320 	eor.w	r3, r3, #32
 8008902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	441a      	add	r2, r3
 8008910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008924:	b29b      	uxth	r3, r3
 8008926:	8013      	strh	r3, [r2, #0]
 8008928:	e01d      	b.n	8008966 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	441a      	add	r2, r3
 800894e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800895e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008962:	b29b      	uxth	r3, r3
 8008964:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	441a      	add	r2, r3
 8008988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800898a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800898e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899a:	b29b      	uxth	r3, r3
 800899c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800899e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	376c      	adds	r7, #108	; 0x6c
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b08d      	sub	sp, #52	; 0x34
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	7b1b      	ldrb	r3, [r3, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 808e 	bne.w	8008adc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	785b      	ldrb	r3, [r3, #1]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d044      	beq.n	8008a52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	81bb      	strh	r3, [r7, #12]
 80089d6:	89bb      	ldrh	r3, [r7, #12]
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d01b      	beq.n	8008a18 <USB_DeactivateEndpoint+0x6c>
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	881b      	ldrh	r3, [r3, #0]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f6:	817b      	strh	r3, [r7, #10]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	441a      	add	r2, r3
 8008a02:	897b      	ldrh	r3, [r7, #10]
 8008a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	813b      	strh	r3, [r7, #8]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	441a      	add	r2, r3
 8008a3a:	893b      	ldrh	r3, [r7, #8]
 8008a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	8013      	strh	r3, [r2, #0]
 8008a50:	e192      	b.n	8008d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	827b      	strh	r3, [r7, #18]
 8008a60:	8a7b      	ldrh	r3, [r7, #18]
 8008a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01b      	beq.n	8008aa2 <USB_DeactivateEndpoint+0xf6>
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a80:	823b      	strh	r3, [r7, #16]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	441a      	add	r2, r3
 8008a8c:	8a3b      	ldrh	r3, [r7, #16]
 8008a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab8:	81fb      	strh	r3, [r7, #14]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	441a      	add	r2, r3
 8008ac4:	89fb      	ldrh	r3, [r7, #14]
 8008ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	8013      	strh	r3, [r2, #0]
 8008ada:	e14d      	b.n	8008d78 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f040 80a5 	bne.w	8008c30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	843b      	strh	r3, [r7, #32]
 8008af4:	8c3b      	ldrh	r3, [r7, #32]
 8008af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01b      	beq.n	8008b36 <USB_DeactivateEndpoint+0x18a>
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b14:	83fb      	strh	r3, [r7, #30]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	441a      	add	r2, r3
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	83bb      	strh	r3, [r7, #28]
 8008b44:	8bbb      	ldrh	r3, [r7, #28]
 8008b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d01b      	beq.n	8008b86 <USB_DeactivateEndpoint+0x1da>
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b64:	837b      	strh	r3, [r7, #26]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	441a      	add	r2, r3
 8008b70:	8b7b      	ldrh	r3, [r7, #26]
 8008b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9c:	833b      	strh	r3, [r7, #24]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	441a      	add	r2, r3
 8008ba8:	8b3b      	ldrh	r3, [r7, #24]
 8008baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd4:	82fb      	strh	r3, [r7, #22]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	441a      	add	r2, r3
 8008be0:	8afb      	ldrh	r3, [r7, #22]
 8008be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c0c:	82bb      	strh	r3, [r7, #20]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	8abb      	ldrh	r3, [r7, #20]
 8008c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]
 8008c2e:	e0a3      	b.n	8008d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01b      	beq.n	8008c80 <USB_DeactivateEndpoint+0x2d4>
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	441a      	add	r2, r3
 8008c6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01b      	beq.n	8008cd0 <USB_DeactivateEndpoint+0x324>
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cae:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	441a      	add	r2, r3
 8008cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	441a      	add	r2, r3
 8008d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3734      	adds	r7, #52	; 0x34
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bc80      	pop	{r7}
 8008d82:	4770      	bx	lr

08008d84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b0cc      	sub	sp, #304	; 0x130
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	1d3b      	adds	r3, r7, #4
 8008d8c:	6018      	str	r0, [r3, #0]
 8008d8e:	463b      	mov	r3, r7
 8008d90:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d92:	463b      	mov	r3, r7
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	785b      	ldrb	r3, [r3, #1]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	f040 872e 	bne.w	8009bfa <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008d9e:	463b      	mov	r3, r7
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	699a      	ldr	r2, [r3, #24]
 8008da4:	463b      	mov	r3, r7
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d905      	bls.n	8008dba <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8008dae:	463b      	mov	r3, r7
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008db8:	e004      	b.n	8008dc4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8008dba:	463b      	mov	r3, r7
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008dc4:	463b      	mov	r3, r7
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	7b1b      	ldrb	r3, [r3, #12]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d134      	bne.n	8008e38 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008dce:	463b      	mov	r3, r7
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6959      	ldr	r1, [r3, #20]
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	88da      	ldrh	r2, [r3, #6]
 8008dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	1d38      	adds	r0, r7, #4
 8008de2:	6800      	ldr	r0, [r0, #0]
 8008de4:	f001 fc03 	bl	800a5ee <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008de8:	f107 0310 	add.w	r3, r7, #16
 8008dec:	1d3a      	adds	r2, r7, #4
 8008dee:	6812      	ldr	r2, [r2, #0]
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	1d3b      	adds	r3, r7, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f107 0310 	add.w	r3, r7, #16
 8008e02:	f107 0210 	add.w	r2, r7, #16
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	440a      	add	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	463b      	mov	r3, r7
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	011a      	lsls	r2, r3, #4
 8008e14:	f107 0310 	add.w	r3, r7, #16
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008e20:	f107 030c 	add.w	r3, r7, #12
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f107 030c 	add.w	r3, r7, #12
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	801a      	strh	r2, [r3, #0]
 8008e34:	f000 beac 	b.w	8009b90 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008e38:	463b      	mov	r3, r7
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	78db      	ldrb	r3, [r3, #3]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	f040 838c 	bne.w	800955c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008e44:	463b      	mov	r3, r7
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	463b      	mov	r3, r7
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	f240 8330 	bls.w	80094b6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008e56:	1d3b      	adds	r3, r7, #4
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008e74:	1d3b      	adds	r3, r7, #4
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	463b      	mov	r3, r7
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	441a      	add	r2, r3
 8008e82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008e9a:	463b      	mov	r3, r7
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6a1a      	ldr	r2, [r3, #32]
 8008ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008eac:	1d3b      	adds	r3, r7, #4
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 819e 	beq.w	8009204 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ec8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ecc:	1d3a      	adds	r2, r7, #4
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d17a      	bne.n	8008fd2 <USB_EPStartXfer+0x24e>
 8008edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ee0:	1d3a      	adds	r2, r7, #4
 8008ee2:	6812      	ldr	r2, [r2, #0]
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	1d3b      	adds	r3, r7, #4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	440a      	add	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	463b      	mov	r3, r7
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	011a      	lsls	r2, r3, #4
 8008f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d11a      	bne.n	8008f58 <USB_EPStartXfer+0x1d4>
 8008f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e062      	b.n	800901e <USB_EPStartXfer+0x29a>
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	2b3e      	cmp	r3, #62	; 0x3e
 8008f5e:	d819      	bhi.n	8008f94 <USB_EPStartXfer+0x210>
 8008f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <USB_EPStartXfer+0x1fc>
 8008f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	029b      	lsls	r3, r3, #10
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e044      	b.n	800901e <USB_EPStartXfer+0x29a>
 8008f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa2:	f003 031f 	and.w	r3, r3, #31
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <USB_EPStartXfer+0x230>
 8008faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	029b      	lsls	r3, r3, #10
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	801a      	strh	r2, [r3, #0]
 8008fd0:	e025      	b.n	800901e <USB_EPStartXfer+0x29a>
 8008fd2:	463b      	mov	r3, r7
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d120      	bne.n	800901e <USB_EPStartXfer+0x29a>
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008ff0:	6812      	ldr	r2, [r2, #0]
 8008ff2:	440a      	add	r2, r1
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	463b      	mov	r3, r7
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	011a      	lsls	r2, r3, #4
 8008ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4413      	add	r3, r2
 8009006:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800900a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	b29a      	uxth	r2, r3
 8009016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800901e:	463b      	mov	r3, r7
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	895b      	ldrh	r3, [r3, #10]
 8009024:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009028:	463b      	mov	r3, r7
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6959      	ldr	r1, [r3, #20]
 800902e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009032:	b29b      	uxth	r3, r3
 8009034:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009038:	1d38      	adds	r0, r7, #4
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	f001 fad7 	bl	800a5ee <USB_WritePMA>
            ep->xfer_buff += len;
 8009040:	463b      	mov	r3, r7
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904a:	441a      	add	r2, r3
 800904c:	463b      	mov	r3, r7
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009052:	463b      	mov	r3, r7
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6a1a      	ldr	r2, [r3, #32]
 8009058:	463b      	mov	r3, r7
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	429a      	cmp	r2, r3
 8009060:	d909      	bls.n	8009076 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8009062:	463b      	mov	r3, r7
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6a1a      	ldr	r2, [r3, #32]
 8009068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906c:	1ad2      	subs	r2, r2, r3
 800906e:	463b      	mov	r3, r7
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	621a      	str	r2, [r3, #32]
 8009074:	e008      	b.n	8009088 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8009076:	463b      	mov	r3, r7
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009080:	463b      	mov	r3, r7
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2200      	movs	r2, #0
 8009086:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009088:	463b      	mov	r3, r7
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d17a      	bne.n	8009188 <USB_EPStartXfer+0x404>
 8009092:	f107 0318 	add.w	r3, r7, #24
 8009096:	1d3a      	adds	r2, r7, #4
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	1d3b      	adds	r3, r7, #4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	4619      	mov	r1, r3
 80090a8:	f107 0318 	add.w	r3, r7, #24
 80090ac:	f107 0218 	add.w	r2, r7, #24
 80090b0:	6812      	ldr	r2, [r2, #0]
 80090b2:	440a      	add	r2, r1
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	463b      	mov	r3, r7
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	011a      	lsls	r2, r3, #4
 80090be:	f107 0318 	add.w	r3, r7, #24
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80090ca:	f107 0314 	add.w	r3, r7, #20
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d11a      	bne.n	800910e <USB_EPStartXfer+0x38a>
 80090d8:	f107 0314 	add.w	r3, r7, #20
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	f107 0314 	add.w	r3, r7, #20
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	801a      	strh	r2, [r3, #0]
 80090f0:	f107 0314 	add.w	r3, r7, #20
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009102:	b29a      	uxth	r2, r3
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e067      	b.n	80091de <USB_EPStartXfer+0x45a>
 800910e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009112:	2b3e      	cmp	r3, #62	; 0x3e
 8009114:	d819      	bhi.n	800914a <USB_EPStartXfer+0x3c6>
 8009116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800911a:	085b      	lsrs	r3, r3, #1
 800911c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <USB_EPStartXfer+0x3b2>
 800912c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009130:	3301      	adds	r3, #1
 8009132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800913a:	b29b      	uxth	r3, r3
 800913c:	029b      	lsls	r3, r3, #10
 800913e:	b29a      	uxth	r2, r3
 8009140:	f107 0314 	add.w	r3, r7, #20
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	e049      	b.n	80091de <USB_EPStartXfer+0x45a>
 800914a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009158:	f003 031f 	and.w	r3, r3, #31
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USB_EPStartXfer+0x3e6>
 8009160:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009164:	3b01      	subs	r3, #1
 8009166:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800916a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800916e:	b29b      	uxth	r3, r3
 8009170:	029b      	lsls	r3, r3, #10
 8009172:	b29b      	uxth	r3, r3
 8009174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800917c:	b29a      	uxth	r2, r3
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	e02a      	b.n	80091de <USB_EPStartXfer+0x45a>
 8009188:	463b      	mov	r3, r7
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d125      	bne.n	80091de <USB_EPStartXfer+0x45a>
 8009192:	f107 0320 	add.w	r3, r7, #32
 8009196:	1d3a      	adds	r2, r7, #4
 8009198:	6812      	ldr	r2, [r2, #0]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	1d3b      	adds	r3, r7, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	4619      	mov	r1, r3
 80091a8:	f107 0320 	add.w	r3, r7, #32
 80091ac:	f107 0220 	add.w	r2, r7, #32
 80091b0:	6812      	ldr	r2, [r2, #0]
 80091b2:	440a      	add	r2, r1
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	463b      	mov	r3, r7
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	011a      	lsls	r2, r3, #4
 80091be:	f107 0320 	add.w	r3, r7, #32
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4413      	add	r3, r2
 80091c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80091ca:	f107 031c 	add.w	r3, r7, #28
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	f107 031c 	add.w	r3, r7, #28
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091de:	463b      	mov	r3, r7
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	891b      	ldrh	r3, [r3, #8]
 80091e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e8:	463b      	mov	r3, r7
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6959      	ldr	r1, [r3, #20]
 80091ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80091f8:	1d38      	adds	r0, r7, #4
 80091fa:	6800      	ldr	r0, [r0, #0]
 80091fc:	f001 f9f7 	bl	800a5ee <USB_WritePMA>
 8009200:	f000 bcc6 	b.w	8009b90 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009204:	463b      	mov	r3, r7
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d164      	bne.n	80092d8 <USB_EPStartXfer+0x554>
 800920e:	1d3b      	adds	r3, r7, #4
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	64bb      	str	r3, [r7, #72]	; 0x48
 8009214:	1d3b      	adds	r3, r7, #4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800921c:	b29b      	uxth	r3, r3
 800921e:	461a      	mov	r2, r3
 8009220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009222:	4413      	add	r3, r2
 8009224:	64bb      	str	r3, [r7, #72]	; 0x48
 8009226:	463b      	mov	r3, r7
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	011a      	lsls	r2, r3, #4
 800922e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009230:	4413      	add	r3, r2
 8009232:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009236:	647b      	str	r3, [r7, #68]	; 0x44
 8009238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d112      	bne.n	8009266 <USB_EPStartXfer+0x4e2>
 8009240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800924a:	b29a      	uxth	r2, r3
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800925a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800925e:	b29a      	uxth	r2, r3
 8009260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	e057      	b.n	8009316 <USB_EPStartXfer+0x592>
 8009266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926a:	2b3e      	cmp	r3, #62	; 0x3e
 800926c:	d817      	bhi.n	800929e <USB_EPStartXfer+0x51a>
 800926e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <USB_EPStartXfer+0x50a>
 8009284:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009288:	3301      	adds	r3, #1
 800928a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800928e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009292:	b29b      	uxth	r3, r3
 8009294:	029b      	lsls	r3, r3, #10
 8009296:	b29a      	uxth	r2, r3
 8009298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800929a:	801a      	strh	r2, [r3, #0]
 800929c:	e03b      	b.n	8009316 <USB_EPStartXfer+0x592>
 800929e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80092a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d104      	bne.n	80092be <USB_EPStartXfer+0x53a>
 80092b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092b8:	3b01      	subs	r3, #1
 80092ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80092be:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	029b      	lsls	r3, r3, #10
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	e01e      	b.n	8009316 <USB_EPStartXfer+0x592>
 80092d8:	463b      	mov	r3, r7
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d119      	bne.n	8009316 <USB_EPStartXfer+0x592>
 80092e2:	1d3b      	adds	r3, r7, #4
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	653b      	str	r3, [r7, #80]	; 0x50
 80092e8:	1d3b      	adds	r3, r7, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092f6:	4413      	add	r3, r2
 80092f8:	653b      	str	r3, [r7, #80]	; 0x50
 80092fa:	463b      	mov	r3, r7
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	011a      	lsls	r2, r3, #4
 8009302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009304:	4413      	add	r3, r2
 8009306:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800930a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800930c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009310:	b29a      	uxth	r2, r3
 8009312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009314:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009316:	463b      	mov	r3, r7
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	891b      	ldrh	r3, [r3, #8]
 800931c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009320:	463b      	mov	r3, r7
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6959      	ldr	r1, [r3, #20]
 8009326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800932a:	b29b      	uxth	r3, r3
 800932c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009330:	1d38      	adds	r0, r7, #4
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	f001 f95b 	bl	800a5ee <USB_WritePMA>
            ep->xfer_buff += len;
 8009338:	463b      	mov	r3, r7
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009342:	441a      	add	r2, r3
 8009344:	463b      	mov	r3, r7
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800934a:	463b      	mov	r3, r7
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	429a      	cmp	r2, r3
 8009358:	d909      	bls.n	800936e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800935a:	463b      	mov	r3, r7
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6a1a      	ldr	r2, [r3, #32]
 8009360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009364:	1ad2      	subs	r2, r2, r3
 8009366:	463b      	mov	r3, r7
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	621a      	str	r2, [r3, #32]
 800936c:	e008      	b.n	8009380 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800936e:	463b      	mov	r3, r7
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009378:	463b      	mov	r3, r7
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2200      	movs	r2, #0
 800937e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	643b      	str	r3, [r7, #64]	; 0x40
 8009386:	463b      	mov	r3, r7
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d164      	bne.n	800945a <USB_EPStartXfer+0x6d6>
 8009390:	1d3b      	adds	r3, r7, #4
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	63bb      	str	r3, [r7, #56]	; 0x38
 8009396:	1d3b      	adds	r3, r7, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800939e:	b29b      	uxth	r3, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	4413      	add	r3, r2
 80093a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80093a8:	463b      	mov	r3, r7
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	011a      	lsls	r2, r3, #4
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	4413      	add	r3, r2
 80093b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093b8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d112      	bne.n	80093e8 <USB_EPStartXfer+0x664>
 80093c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e4:	801a      	strh	r2, [r3, #0]
 80093e6:	e054      	b.n	8009492 <USB_EPStartXfer+0x70e>
 80093e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ec:	2b3e      	cmp	r3, #62	; 0x3e
 80093ee:	d817      	bhi.n	8009420 <USB_EPStartXfer+0x69c>
 80093f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80093fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <USB_EPStartXfer+0x68c>
 8009406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800940a:	3301      	adds	r3, #1
 800940c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009414:	b29b      	uxth	r3, r3
 8009416:	029b      	lsls	r3, r3, #10
 8009418:	b29a      	uxth	r2, r3
 800941a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941c:	801a      	strh	r2, [r3, #0]
 800941e:	e038      	b.n	8009492 <USB_EPStartXfer+0x70e>
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800942a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942e:	f003 031f 	and.w	r3, r3, #31
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <USB_EPStartXfer+0x6bc>
 8009436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800943a:	3b01      	subs	r3, #1
 800943c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009444:	b29b      	uxth	r3, r3
 8009446:	029b      	lsls	r3, r3, #10
 8009448:	b29b      	uxth	r3, r3
 800944a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009452:	b29a      	uxth	r2, r3
 8009454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009456:	801a      	strh	r2, [r3, #0]
 8009458:	e01b      	b.n	8009492 <USB_EPStartXfer+0x70e>
 800945a:	463b      	mov	r3, r7
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d116      	bne.n	8009492 <USB_EPStartXfer+0x70e>
 8009464:	1d3b      	adds	r3, r7, #4
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800946c:	b29b      	uxth	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009472:	4413      	add	r3, r2
 8009474:	643b      	str	r3, [r7, #64]	; 0x40
 8009476:	463b      	mov	r3, r7
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	011a      	lsls	r2, r3, #4
 800947e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009480:	4413      	add	r3, r2
 8009482:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948c:	b29a      	uxth	r2, r3
 800948e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009490:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009492:	463b      	mov	r3, r7
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	895b      	ldrh	r3, [r3, #10]
 8009498:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800949c:	463b      	mov	r3, r7
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6959      	ldr	r1, [r3, #20]
 80094a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80094ac:	1d38      	adds	r0, r7, #4
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	f001 f89d 	bl	800a5ee <USB_WritePMA>
 80094b4:	e36c      	b.n	8009b90 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80094b6:	463b      	mov	r3, r7
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80094c0:	1d3b      	adds	r3, r7, #4
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	463b      	mov	r3, r7
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80094d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80094de:	1d3b      	adds	r3, r7, #4
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	463b      	mov	r3, r7
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	441a      	add	r2, r3
 80094ec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80094f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009500:	b29b      	uxth	r3, r3
 8009502:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009504:	1d3b      	adds	r3, r7, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	65fb      	str	r3, [r7, #92]	; 0x5c
 800950a:	1d3b      	adds	r3, r7, #4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009512:	b29b      	uxth	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009518:	4413      	add	r3, r2
 800951a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800951c:	463b      	mov	r3, r7
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	011a      	lsls	r2, r3, #4
 8009524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009526:	4413      	add	r3, r2
 8009528:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800952c:	65bb      	str	r3, [r7, #88]	; 0x58
 800952e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009532:	b29a      	uxth	r2, r3
 8009534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009536:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009538:	463b      	mov	r3, r7
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	891b      	ldrh	r3, [r3, #8]
 800953e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009542:	463b      	mov	r3, r7
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6959      	ldr	r1, [r3, #20]
 8009548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954c:	b29b      	uxth	r3, r3
 800954e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009552:	1d38      	adds	r0, r7, #4
 8009554:	6800      	ldr	r0, [r0, #0]
 8009556:	f001 f84a 	bl	800a5ee <USB_WritePMA>
 800955a:	e319      	b.n	8009b90 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800955c:	1d3b      	adds	r3, r7, #4
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	463b      	mov	r3, r7
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b29b      	uxth	r3, r3
 800956e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	463b      	mov	r3, r7
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	441a      	add	r2, r3
 8009588:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800958c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009594:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959c:	b29b      	uxth	r3, r3
 800959e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80095a0:	463b      	mov	r3, r7
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6a1a      	ldr	r2, [r3, #32]
 80095a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095aa:	1ad2      	subs	r2, r2, r3
 80095ac:	463b      	mov	r3, r7
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095b2:	1d3b      	adds	r3, r7, #4
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	463b      	mov	r3, r7
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8162 	beq.w	8009892 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095ce:	1d3b      	adds	r3, r7, #4
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095d6:	463b      	mov	r3, r7
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d164      	bne.n	80096aa <USB_EPStartXfer+0x926>
 80095e0:	1d3b      	adds	r3, r7, #4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80095e6:	1d3b      	adds	r3, r7, #4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f4:	4413      	add	r3, r2
 80095f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80095f8:	463b      	mov	r3, r7
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	011a      	lsls	r2, r3, #4
 8009600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009602:	4413      	add	r3, r2
 8009604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009608:	677b      	str	r3, [r7, #116]	; 0x74
 800960a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d112      	bne.n	8009638 <USB_EPStartXfer+0x8b4>
 8009612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800961c:	b29a      	uxth	r2, r3
 800961e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009620:	801a      	strh	r2, [r3, #0]
 8009622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800962c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009630:	b29a      	uxth	r2, r3
 8009632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009634:	801a      	strh	r2, [r3, #0]
 8009636:	e057      	b.n	80096e8 <USB_EPStartXfer+0x964>
 8009638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963c:	2b3e      	cmp	r3, #62	; 0x3e
 800963e:	d817      	bhi.n	8009670 <USB_EPStartXfer+0x8ec>
 8009640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800964a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <USB_EPStartXfer+0x8dc>
 8009656:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800965a:	3301      	adds	r3, #1
 800965c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009660:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009664:	b29b      	uxth	r3, r3
 8009666:	029b      	lsls	r3, r3, #10
 8009668:	b29a      	uxth	r2, r3
 800966a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	e03b      	b.n	80096e8 <USB_EPStartXfer+0x964>
 8009670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009674:	095b      	lsrs	r3, r3, #5
 8009676:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800967a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967e:	f003 031f 	and.w	r3, r3, #31
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <USB_EPStartXfer+0x90c>
 8009686:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800968a:	3b01      	subs	r3, #1
 800968c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009690:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009694:	b29b      	uxth	r3, r3
 8009696:	029b      	lsls	r3, r3, #10
 8009698:	b29b      	uxth	r3, r3
 800969a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800969e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a6:	801a      	strh	r2, [r3, #0]
 80096a8:	e01e      	b.n	80096e8 <USB_EPStartXfer+0x964>
 80096aa:	463b      	mov	r3, r7
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d119      	bne.n	80096e8 <USB_EPStartXfer+0x964>
 80096b4:	1d3b      	adds	r3, r7, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096bc:	b29b      	uxth	r3, r3
 80096be:	461a      	mov	r2, r3
 80096c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096c4:	4413      	add	r3, r2
 80096c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096ca:	463b      	mov	r3, r7
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	011a      	lsls	r2, r3, #4
 80096d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096d6:	4413      	add	r3, r2
 80096d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80096e8:	463b      	mov	r3, r7
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	895b      	ldrh	r3, [r3, #10]
 80096ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096f2:	463b      	mov	r3, r7
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6959      	ldr	r1, [r3, #20]
 80096f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009702:	1d38      	adds	r0, r7, #4
 8009704:	6800      	ldr	r0, [r0, #0]
 8009706:	f000 ff72 	bl	800a5ee <USB_WritePMA>
          ep->xfer_buff += len;
 800970a:	463b      	mov	r3, r7
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695a      	ldr	r2, [r3, #20]
 8009710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009714:	441a      	add	r2, r3
 8009716:	463b      	mov	r3, r7
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800971c:	463b      	mov	r3, r7
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a1a      	ldr	r2, [r3, #32]
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	429a      	cmp	r2, r3
 800972a:	d909      	bls.n	8009740 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800972c:	463b      	mov	r3, r7
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a1a      	ldr	r2, [r3, #32]
 8009732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	463b      	mov	r3, r7
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	621a      	str	r2, [r3, #32]
 800973e:	e008      	b.n	8009752 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8009740:	463b      	mov	r3, r7
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800974a:	463b      	mov	r3, r7
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2200      	movs	r2, #0
 8009750:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 821a 	beq.w	8009b90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	785b      	ldrb	r3, [r3, #1]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d164      	bne.n	8009830 <USB_EPStartXfer+0xaac>
 8009766:	1d3b      	adds	r3, r7, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	66bb      	str	r3, [r7, #104]	; 0x68
 800976c:	1d3b      	adds	r3, r7, #4
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009774:	b29b      	uxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800977a:	4413      	add	r3, r2
 800977c:	66bb      	str	r3, [r7, #104]	; 0x68
 800977e:	463b      	mov	r3, r7
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	011a      	lsls	r2, r3, #4
 8009786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009788:	4413      	add	r3, r2
 800978a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800978e:	667b      	str	r3, [r7, #100]	; 0x64
 8009790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009794:	2b00      	cmp	r3, #0
 8009796:	d112      	bne.n	80097be <USB_EPStartXfer+0xa3a>
 8009798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800979a:	881b      	ldrh	r3, [r3, #0]
 800979c:	b29b      	uxth	r3, r3
 800979e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	e057      	b.n	800986e <USB_EPStartXfer+0xaea>
 80097be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c2:	2b3e      	cmp	r3, #62	; 0x3e
 80097c4:	d817      	bhi.n	80097f6 <USB_EPStartXfer+0xa72>
 80097c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ca:	085b      	lsrs	r3, r3, #1
 80097cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80097d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d004      	beq.n	80097e6 <USB_EPStartXfer+0xa62>
 80097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e0:	3301      	adds	r3, #1
 80097e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80097e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	029b      	lsls	r3, r3, #10
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	e03b      	b.n	800986e <USB_EPStartXfer+0xaea>
 80097f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009804:	f003 031f 	and.w	r3, r3, #31
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <USB_EPStartXfer+0xa92>
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009810:	3b01      	subs	r3, #1
 8009812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981a:	b29b      	uxth	r3, r3
 800981c:	029b      	lsls	r3, r3, #10
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009828:	b29a      	uxth	r2, r3
 800982a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e01e      	b.n	800986e <USB_EPStartXfer+0xaea>
 8009830:	463b      	mov	r3, r7
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	785b      	ldrb	r3, [r3, #1]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d119      	bne.n	800986e <USB_EPStartXfer+0xaea>
 800983a:	1d3b      	adds	r3, r7, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	673b      	str	r3, [r7, #112]	; 0x70
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009848:	b29b      	uxth	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800984e:	4413      	add	r3, r2
 8009850:	673b      	str	r3, [r7, #112]	; 0x70
 8009852:	463b      	mov	r3, r7
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	011a      	lsls	r2, r3, #4
 800985a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800985c:	4413      	add	r3, r2
 800985e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009868:	b29a      	uxth	r2, r3
 800986a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800986e:	463b      	mov	r3, r7
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	891b      	ldrh	r3, [r3, #8]
 8009874:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009878:	463b      	mov	r3, r7
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6959      	ldr	r1, [r3, #20]
 800987e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009882:	b29b      	uxth	r3, r3
 8009884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009888:	1d38      	adds	r0, r7, #4
 800988a:	6800      	ldr	r0, [r0, #0]
 800988c:	f000 feaf 	bl	800a5ee <USB_WritePMA>
 8009890:	e17e      	b.n	8009b90 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009892:	463b      	mov	r3, r7
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d16f      	bne.n	800997c <USB_EPStartXfer+0xbf8>
 800989c:	1d3b      	adds	r3, r7, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098a4:	1d3b      	adds	r3, r7, #4
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	461a      	mov	r2, r3
 80098b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098b4:	4413      	add	r3, r2
 80098b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098ba:	463b      	mov	r3, r7
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	011a      	lsls	r2, r3, #4
 80098c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098c6:	4413      	add	r3, r2
 80098c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d116      	bne.n	8009906 <USB_EPStartXfer+0xb82>
 80098d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098ea:	801a      	strh	r2, [r3, #0]
 80098ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009902:	801a      	strh	r2, [r3, #0]
 8009904:	e05f      	b.n	80099c6 <USB_EPStartXfer+0xc42>
 8009906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800990a:	2b3e      	cmp	r3, #62	; 0x3e
 800990c:	d818      	bhi.n	8009940 <USB_EPStartXfer+0xbbc>
 800990e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009912:	085b      	lsrs	r3, r3, #1
 8009914:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d004      	beq.n	800992e <USB_EPStartXfer+0xbaa>
 8009924:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009928:	3301      	adds	r3, #1
 800992a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800992e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009932:	b29b      	uxth	r3, r3
 8009934:	029b      	lsls	r3, r3, #10
 8009936:	b29a      	uxth	r2, r3
 8009938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800993c:	801a      	strh	r2, [r3, #0]
 800993e:	e042      	b.n	80099c6 <USB_EPStartXfer+0xc42>
 8009940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009944:	095b      	lsrs	r3, r3, #5
 8009946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800994a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994e:	f003 031f 	and.w	r3, r3, #31
 8009952:	2b00      	cmp	r3, #0
 8009954:	d104      	bne.n	8009960 <USB_EPStartXfer+0xbdc>
 8009956:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800995a:	3b01      	subs	r3, #1
 800995c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009964:	b29b      	uxth	r3, r3
 8009966:	029b      	lsls	r3, r3, #10
 8009968:	b29b      	uxth	r3, r3
 800996a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009972:	b29a      	uxth	r2, r3
 8009974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009978:	801a      	strh	r2, [r3, #0]
 800997a:	e024      	b.n	80099c6 <USB_EPStartXfer+0xc42>
 800997c:	463b      	mov	r3, r7
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d11f      	bne.n	80099c6 <USB_EPStartXfer+0xc42>
 8009986:	1d3b      	adds	r3, r7, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800998e:	1d3b      	adds	r3, r7, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009996:	b29b      	uxth	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800999e:	4413      	add	r3, r2
 80099a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80099a4:	463b      	mov	r3, r7
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	011a      	lsls	r2, r3, #4
 80099ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80099b0:	4413      	add	r3, r2
 80099b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099be:	b29a      	uxth	r2, r3
 80099c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80099c6:	463b      	mov	r3, r7
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	891b      	ldrh	r3, [r3, #8]
 80099cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099d0:	463b      	mov	r3, r7
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6959      	ldr	r1, [r3, #20]
 80099d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099da:	b29b      	uxth	r3, r3
 80099dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80099e0:	1d38      	adds	r0, r7, #4
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	f000 fe03 	bl	800a5ee <USB_WritePMA>
          ep->xfer_buff += len;
 80099e8:	463b      	mov	r3, r7
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695a      	ldr	r2, [r3, #20]
 80099ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099f2:	441a      	add	r2, r3
 80099f4:	463b      	mov	r3, r7
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80099fa:	463b      	mov	r3, r7
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6a1a      	ldr	r2, [r3, #32]
 8009a00:	463b      	mov	r3, r7
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d909      	bls.n	8009a1e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8009a0a:	463b      	mov	r3, r7
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6a1a      	ldr	r2, [r3, #32]
 8009a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a14:	1ad2      	subs	r2, r2, r3
 8009a16:	463b      	mov	r3, r7
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	621a      	str	r2, [r3, #32]
 8009a1c:	e008      	b.n	8009a30 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8009a1e:	463b      	mov	r3, r7
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009a28:	463b      	mov	r3, r7
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 80ab 	beq.w	8009b90 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a3a:	1d3b      	adds	r3, r7, #4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a42:	463b      	mov	r3, r7
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d16f      	bne.n	8009b2c <USB_EPStartXfer+0xda8>
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a54:	1d3b      	adds	r3, r7, #4
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a64:	4413      	add	r3, r2
 8009a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	011a      	lsls	r2, r3, #4
 8009a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a76:	4413      	add	r3, r2
 8009a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d116      	bne.n	8009ab6 <USB_EPStartXfer+0xd32>
 8009a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aa0:	881b      	ldrh	r3, [r3, #0]
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	e05b      	b.n	8009b6e <USB_EPStartXfer+0xdea>
 8009ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aba:	2b3e      	cmp	r3, #62	; 0x3e
 8009abc:	d818      	bhi.n	8009af0 <USB_EPStartXfer+0xd6c>
 8009abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac2:	085b      	lsrs	r3, r3, #1
 8009ac4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <USB_EPStartXfer+0xd5a>
 8009ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ad8:	3301      	adds	r3, #1
 8009ada:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	029b      	lsls	r3, r3, #10
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	e03e      	b.n	8009b6e <USB_EPStartXfer+0xdea>
 8009af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <USB_EPStartXfer+0xd8c>
 8009b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	029b      	lsls	r3, r3, #10
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b28:	801a      	strh	r2, [r3, #0]
 8009b2a:	e020      	b.n	8009b6e <USB_EPStartXfer+0xdea>
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d11b      	bne.n	8009b6e <USB_EPStartXfer+0xdea>
 8009b36:	1d3b      	adds	r3, r7, #4
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b46:	4413      	add	r3, r2
 8009b48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b4c:	463b      	mov	r3, r7
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	011a      	lsls	r2, r3, #4
 8009b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b58:	4413      	add	r3, r2
 8009b5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b6e:	463b      	mov	r3, r7
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	895b      	ldrh	r3, [r3, #10]
 8009b74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b78:	463b      	mov	r3, r7
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6959      	ldr	r1, [r3, #20]
 8009b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b88:	1d38      	adds	r0, r7, #4
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	f000 fd2f 	bl	800a5ee <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b90:	1d3b      	adds	r3, r7, #4
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	463b      	mov	r3, r7
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f107 020a 	add.w	r2, r7, #10
 8009ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bae:	8013      	strh	r3, [r2, #0]
 8009bb0:	f107 030a 	add.w	r3, r7, #10
 8009bb4:	f107 020a 	add.w	r2, r7, #10
 8009bb8:	8812      	ldrh	r2, [r2, #0]
 8009bba:	f082 0210 	eor.w	r2, r2, #16
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	f107 030a 	add.w	r3, r7, #10
 8009bc4:	f107 020a 	add.w	r2, r7, #10
 8009bc8:	8812      	ldrh	r2, [r2, #0]
 8009bca:	f082 0220 	eor.w	r2, r2, #32
 8009bce:	801a      	strh	r2, [r3, #0]
 8009bd0:	1d3b      	adds	r3, r7, #4
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	463b      	mov	r3, r7
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	441a      	add	r2, r3
 8009bde:	f107 030a 	add.w	r3, r7, #10
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	8013      	strh	r3, [r2, #0]
 8009bf8:	e3b5      	b.n	800a366 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	7b1b      	ldrb	r3, [r3, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f040 8090 	bne.w	8009d26 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009c06:	463b      	mov	r3, r7
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	463b      	mov	r3, r7
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d90e      	bls.n	8009c34 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8009c16:	463b      	mov	r3, r7
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009c20:	463b      	mov	r3, r7
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c2a:	1ad2      	subs	r2, r2, r3
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	619a      	str	r2, [r3, #24]
 8009c32:	e008      	b.n	8009c46 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8009c34:	463b      	mov	r3, r7
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009c3e:	463b      	mov	r3, r7
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2200      	movs	r2, #0
 8009c44:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009c46:	1d3b      	adds	r3, r7, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c4e:	1d3b      	adds	r3, r7, #4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c5e:	4413      	add	r3, r2
 8009c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c64:	463b      	mov	r3, r7
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	011a      	lsls	r2, r3, #4
 8009c6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c70:	4413      	add	r3, r2
 8009c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d116      	bne.n	8009cb0 <USB_EPStartXfer+0xf2c>
 8009c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c94:	801a      	strh	r2, [r3, #0]
 8009c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cac:	801a      	strh	r2, [r3, #0]
 8009cae:	e32c      	b.n	800a30a <USB_EPStartXfer+0x1586>
 8009cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8009cb6:	d818      	bhi.n	8009cea <USB_EPStartXfer+0xf66>
 8009cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cbc:	085b      	lsrs	r3, r3, #1
 8009cbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <USB_EPStartXfer+0xf54>
 8009cce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	029b      	lsls	r3, r3, #10
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ce6:	801a      	strh	r2, [r3, #0]
 8009ce8:	e30f      	b.n	800a30a <USB_EPStartXfer+0x1586>
 8009cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf8:	f003 031f 	and.w	r3, r3, #31
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USB_EPStartXfer+0xf86>
 8009d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d04:	3b01      	subs	r3, #1
 8009d06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	029b      	lsls	r3, r3, #10
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e2f1      	b.n	800a30a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009d26:	463b      	mov	r3, r7
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	78db      	ldrb	r3, [r3, #3]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	f040 818f 	bne.w	800a050 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009d32:	463b      	mov	r3, r7
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	785b      	ldrb	r3, [r3, #1]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d175      	bne.n	8009e28 <USB_EPStartXfer+0x10a4>
 8009d3c:	1d3b      	adds	r3, r7, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d44:	1d3b      	adds	r3, r7, #4
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d54:	4413      	add	r3, r2
 8009d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d5a:	463b      	mov	r3, r7
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	011a      	lsls	r2, r3, #4
 8009d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d66:	4413      	add	r3, r2
 8009d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d70:	463b      	mov	r3, r7
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d116      	bne.n	8009da8 <USB_EPStartXfer+0x1024>
 8009d7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d8c:	801a      	strh	r2, [r3, #0]
 8009d8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009da4:	801a      	strh	r2, [r3, #0]
 8009da6:	e065      	b.n	8009e74 <USB_EPStartXfer+0x10f0>
 8009da8:	463b      	mov	r3, r7
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	2b3e      	cmp	r3, #62	; 0x3e
 8009db0:	d81a      	bhi.n	8009de8 <USB_EPStartXfer+0x1064>
 8009db2:	463b      	mov	r3, r7
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d004      	beq.n	8009dd6 <USB_EPStartXfer+0x1052>
 8009dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	029b      	lsls	r3, r3, #10
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009de4:	801a      	strh	r2, [r3, #0]
 8009de6:	e045      	b.n	8009e74 <USB_EPStartXfer+0x10f0>
 8009de8:	463b      	mov	r3, r7
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	095b      	lsrs	r3, r3, #5
 8009df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009df4:	463b      	mov	r3, r7
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 031f 	and.w	r3, r3, #31
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d104      	bne.n	8009e0c <USB_EPStartXfer+0x1088>
 8009e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e06:	3b01      	subs	r3, #1
 8009e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	029b      	lsls	r3, r3, #10
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e24:	801a      	strh	r2, [r3, #0]
 8009e26:	e025      	b.n	8009e74 <USB_EPStartXfer+0x10f0>
 8009e28:	463b      	mov	r3, r7
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	785b      	ldrb	r3, [r3, #1]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d120      	bne.n	8009e74 <USB_EPStartXfer+0x10f0>
 8009e32:	1d3b      	adds	r3, r7, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e3a:	1d3b      	adds	r3, r7, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009e50:	463b      	mov	r3, r7
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	011a      	lsls	r2, r3, #4
 8009e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e66:	463b      	mov	r3, r7
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009e7c:	463b      	mov	r3, r7
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d175      	bne.n	8009f72 <USB_EPStartXfer+0x11ee>
 8009e86:	1d3b      	adds	r3, r7, #4
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009e8e:	1d3b      	adds	r3, r7, #4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	461a      	mov	r2, r3
 8009e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	011a      	lsls	r2, r3, #4
 8009eac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009eba:	463b      	mov	r3, r7
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d116      	bne.n	8009ef2 <USB_EPStartXfer+0x116e>
 8009ec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009eee:	801a      	strh	r2, [r3, #0]
 8009ef0:	e061      	b.n	8009fb6 <USB_EPStartXfer+0x1232>
 8009ef2:	463b      	mov	r3, r7
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8009efa:	d81a      	bhi.n	8009f32 <USB_EPStartXfer+0x11ae>
 8009efc:	463b      	mov	r3, r7
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f08:	463b      	mov	r3, r7
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d004      	beq.n	8009f20 <USB_EPStartXfer+0x119c>
 8009f16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	029b      	lsls	r3, r3, #10
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	e041      	b.n	8009fb6 <USB_EPStartXfer+0x1232>
 8009f32:	463b      	mov	r3, r7
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	095b      	lsrs	r3, r3, #5
 8009f3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f3e:	463b      	mov	r3, r7
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d104      	bne.n	8009f56 <USB_EPStartXfer+0x11d2>
 8009f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f50:	3b01      	subs	r3, #1
 8009f52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009f56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	029b      	lsls	r3, r3, #10
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	e021      	b.n	8009fb6 <USB_EPStartXfer+0x1232>
 8009f72:	463b      	mov	r3, r7
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	785b      	ldrb	r3, [r3, #1]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d11c      	bne.n	8009fb6 <USB_EPStartXfer+0x1232>
 8009f7c:	1d3b      	adds	r3, r7, #4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f92:	463b      	mov	r3, r7
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	011a      	lsls	r2, r3, #4
 8009f9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fa8:	463b      	mov	r3, r7
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009fb4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 81a4 	beq.w	800a30a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009fc2:	1d3b      	adds	r3, r7, #4
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	463b      	mov	r3, r7
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	881b      	ldrh	r3, [r3, #0]
 8009fd2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009fd6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <USB_EPStartXfer+0x126a>
 8009fe2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10d      	bne.n	800a00a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009fee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f040 8187 	bne.w	800a30a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009ffc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a004:	2b00      	cmp	r3, #0
 800a006:	f040 8180 	bne.w	800a30a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a00a:	1d3b      	adds	r3, r7, #4
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	463b      	mov	r3, r7
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a024:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a028:	1d3b      	adds	r3, r7, #4
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	463b      	mov	r3, r7
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	441a      	add	r2, r3
 800a036:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a03a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a03e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	8013      	strh	r3, [r2, #0]
 800a04e:	e15c      	b.n	800a30a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a050:	463b      	mov	r3, r7
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	78db      	ldrb	r3, [r3, #3]
 800a056:	2b01      	cmp	r3, #1
 800a058:	f040 8155 	bne.w	800a306 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a05c:	463b      	mov	r3, r7
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	463b      	mov	r3, r7
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d90e      	bls.n	800a08a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800a06c:	463b      	mov	r3, r7
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a076:	463b      	mov	r3, r7
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	699a      	ldr	r2, [r3, #24]
 800a07c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a080:	1ad2      	subs	r2, r2, r3
 800a082:	463b      	mov	r3, r7
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	619a      	str	r2, [r3, #24]
 800a088:	e008      	b.n	800a09c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800a08a:	463b      	mov	r3, r7
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a094:	463b      	mov	r3, r7
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2200      	movs	r2, #0
 800a09a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a09c:	463b      	mov	r3, r7
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d16f      	bne.n	800a186 <USB_EPStartXfer+0x1402>
 800a0a6:	1d3b      	adds	r3, r7, #4
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0ae:	1d3b      	adds	r3, r7, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0be:	4413      	add	r3, r2
 800a0c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	011a      	lsls	r2, r3, #4
 800a0cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0d0:	4413      	add	r3, r2
 800a0d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d116      	bne.n	800a110 <USB_EPStartXfer+0x138c>
 800a0e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0f4:	801a      	strh	r2, [r3, #0]
 800a0f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a106:	b29a      	uxth	r2, r3
 800a108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a10c:	801a      	strh	r2, [r3, #0]
 800a10e:	e05f      	b.n	800a1d0 <USB_EPStartXfer+0x144c>
 800a110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a114:	2b3e      	cmp	r3, #62	; 0x3e
 800a116:	d818      	bhi.n	800a14a <USB_EPStartXfer+0x13c6>
 800a118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d004      	beq.n	800a138 <USB_EPStartXfer+0x13b4>
 800a12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a132:	3301      	adds	r3, #1
 800a134:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	029b      	lsls	r3, r3, #10
 800a140:	b29a      	uxth	r2, r3
 800a142:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a146:	801a      	strh	r2, [r3, #0]
 800a148:	e042      	b.n	800a1d0 <USB_EPStartXfer+0x144c>
 800a14a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a14e:	095b      	lsrs	r3, r3, #5
 800a150:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d104      	bne.n	800a16a <USB_EPStartXfer+0x13e6>
 800a160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a164:	3b01      	subs	r3, #1
 800a166:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a16e:	b29b      	uxth	r3, r3
 800a170:	029b      	lsls	r3, r3, #10
 800a172:	b29b      	uxth	r3, r3
 800a174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a182:	801a      	strh	r2, [r3, #0]
 800a184:	e024      	b.n	800a1d0 <USB_EPStartXfer+0x144c>
 800a186:	463b      	mov	r3, r7
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d11f      	bne.n	800a1d0 <USB_EPStartXfer+0x144c>
 800a190:	1d3b      	adds	r3, r7, #4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a198:	1d3b      	adds	r3, r7, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	011a      	lsls	r2, r3, #4
 800a1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a1c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a1ce:	801a      	strh	r2, [r3, #0]
 800a1d0:	1d3b      	adds	r3, r7, #4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1d8:	463b      	mov	r3, r7
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	785b      	ldrb	r3, [r3, #1]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d16f      	bne.n	800a2c2 <USB_EPStartXfer+0x153e>
 800a1e2:	1d3b      	adds	r3, r7, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1ea:	1d3b      	adds	r3, r7, #4
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a200:	463b      	mov	r3, r7
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	011a      	lsls	r2, r3, #4
 800a208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a20c:	4413      	add	r3, r2
 800a20e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d116      	bne.n	800a24c <USB_EPStartXfer+0x14c8>
 800a21e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a230:	801a      	strh	r2, [r3, #0]
 800a232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a242:	b29a      	uxth	r2, r3
 800a244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a248:	801a      	strh	r2, [r3, #0]
 800a24a:	e05e      	b.n	800a30a <USB_EPStartXfer+0x1586>
 800a24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a250:	2b3e      	cmp	r3, #62	; 0x3e
 800a252:	d818      	bhi.n	800a286 <USB_EPStartXfer+0x1502>
 800a254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a258:	085b      	lsrs	r3, r3, #1
 800a25a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d004      	beq.n	800a274 <USB_EPStartXfer+0x14f0>
 800a26a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a26e:	3301      	adds	r3, #1
 800a270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a274:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a278:	b29b      	uxth	r3, r3
 800a27a:	029b      	lsls	r3, r3, #10
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a282:	801a      	strh	r2, [r3, #0]
 800a284:	e041      	b.n	800a30a <USB_EPStartXfer+0x1586>
 800a286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28a:	095b      	lsrs	r3, r3, #5
 800a28c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a294:	f003 031f 	and.w	r3, r3, #31
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d104      	bne.n	800a2a6 <USB_EPStartXfer+0x1522>
 800a29c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a2a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	029b      	lsls	r3, r3, #10
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	e023      	b.n	800a30a <USB_EPStartXfer+0x1586>
 800a2c2:	463b      	mov	r3, r7
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	785b      	ldrb	r3, [r3, #1]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d11e      	bne.n	800a30a <USB_EPStartXfer+0x1586>
 800a2cc:	1d3b      	adds	r3, r7, #4
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2dc:	4413      	add	r3, r2
 800a2de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	011a      	lsls	r2, r3, #4
 800a2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e001      	b.n	800a30a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e02e      	b.n	800a368 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a30a:	1d3b      	adds	r3, r7, #4
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	463b      	mov	r3, r7
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a324:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a328:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a32c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a330:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a334:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a338:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a33c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a340:	1d3b      	adds	r3, r7, #4
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	463b      	mov	r3, r7
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	441a      	add	r2, r3
 800a34e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a362:	b29b      	uxth	r3, r3
 800a364:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	785b      	ldrb	r3, [r3, #1]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d020      	beq.n	800a3c6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a39a:	81bb      	strh	r3, [r7, #12]
 800a39c:	89bb      	ldrh	r3, [r7, #12]
 800a39e:	f083 0310 	eor.w	r3, r3, #16
 800a3a2:	81bb      	strh	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	89bb      	ldrh	r3, [r7, #12]
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
 800a3c4:	e01f      	b.n	800a406 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3dc:	81fb      	strh	r3, [r7, #14]
 800a3de:	89fb      	ldrh	r3, [r7, #14]
 800a3e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a3e4:	81fb      	strh	r3, [r7, #14]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	441a      	add	r2, r3
 800a3f0:	89fb      	ldrh	r3, [r7, #14]
 800a3f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a402:	b29b      	uxth	r3, r3
 800a404:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bc80      	pop	{r7}
 800a410:	4770      	bx	lr

0800a412 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a412:	b480      	push	{r7}
 800a414:	b087      	sub	sp, #28
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	7b1b      	ldrb	r3, [r3, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 809d 	bne.w	800a560 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d04c      	beq.n	800a4c8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4413      	add	r3, r2
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	823b      	strh	r3, [r7, #16]
 800a43c:	8a3b      	ldrh	r3, [r7, #16]
 800a43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01b      	beq.n	800a47e <USB_EPClearStall+0x6c>
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45c:	81fb      	strh	r3, [r7, #14]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	441a      	add	r2, r3
 800a468:	89fb      	ldrh	r3, [r7, #14]
 800a46a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a46e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	78db      	ldrb	r3, [r3, #3]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d06c      	beq.n	800a560 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29b      	uxth	r3, r3
 800a494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a49c:	81bb      	strh	r3, [r7, #12]
 800a49e:	89bb      	ldrh	r3, [r7, #12]
 800a4a0:	f083 0320 	eor.w	r3, r3, #32
 800a4a4:	81bb      	strh	r3, [r7, #12]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	441a      	add	r2, r3
 800a4b0:	89bb      	ldrh	r3, [r7, #12]
 800a4b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	8013      	strh	r3, [r2, #0]
 800a4c6:	e04b      	b.n	800a560 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4413      	add	r3, r2
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	82fb      	strh	r3, [r7, #22]
 800a4d6:	8afb      	ldrh	r3, [r7, #22]
 800a4d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d01b      	beq.n	800a518 <USB_EPClearStall+0x106>
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f6:	82bb      	strh	r3, [r7, #20]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	441a      	add	r2, r3
 800a502:	8abb      	ldrh	r3, [r7, #20]
 800a504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a50c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a514:	b29b      	uxth	r3, r3
 800a516:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52e:	827b      	strh	r3, [r7, #18]
 800a530:	8a7b      	ldrh	r3, [r7, #18]
 800a532:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a536:	827b      	strh	r3, [r7, #18]
 800a538:	8a7b      	ldrh	r3, [r7, #18]
 800a53a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a53e:	827b      	strh	r3, [r7, #18]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	441a      	add	r2, r3
 800a54a:	8a7b      	ldrh	r3, [r7, #18]
 800a54c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a550:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	bc80      	pop	{r7}
 800a56a:	4770      	bx	lr

0800a56c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d103      	bne.n	800a586 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2280      	movs	r2, #128	; 0x80
 800a582:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bc80      	pop	{r7}
 800a590:	4770      	bx	lr

0800a592 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr

0800a5a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bc80      	pop	{r7}
 800a5b8:	4770      	bx	lr

0800a5ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b085      	sub	sp, #20
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bc80      	pop	{r7}
 800a5d6:	4770      	bx	lr

0800a5d8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr

0800a5ee <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	b08d      	sub	sp, #52	; 0x34
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	4611      	mov	r1, r2
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	80fb      	strh	r3, [r7, #6]
 800a600:	4613      	mov	r3, r2
 800a602:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a604:	88bb      	ldrh	r3, [r7, #4]
 800a606:	3301      	adds	r3, #1
 800a608:	085b      	lsrs	r3, r3, #1
 800a60a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a614:	88fb      	ldrh	r3, [r7, #6]
 800a616:	005a      	lsls	r2, r3, #1
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a620:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a626:	e01e      	b.n	800a666 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	3301      	adds	r3, #1
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	461a      	mov	r2, r3
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	3302      	adds	r3, #2
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a656:	3302      	adds	r3, #2
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	3301      	adds	r3, #1
 800a65e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	3b01      	subs	r3, #1
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1dd      	bne.n	800a628 <USB_WritePMA+0x3a>
  }
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	3734      	adds	r7, #52	; 0x34
 800a672:	46bd      	mov	sp, r7
 800a674:	bc80      	pop	{r7}
 800a676:	4770      	bx	lr

0800a678 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a678:	b480      	push	{r7}
 800a67a:	b08b      	sub	sp, #44	; 0x2c
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	4611      	mov	r1, r2
 800a684:	461a      	mov	r2, r3
 800a686:	460b      	mov	r3, r1
 800a688:	80fb      	strh	r3, [r7, #6]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a68e:	88bb      	ldrh	r3, [r7, #4]
 800a690:	085b      	lsrs	r3, r3, #1
 800a692:	b29b      	uxth	r3, r3
 800a694:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	005a      	lsls	r2, r3, #1
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6aa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b0:	e01b      	b.n	800a6ea <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a6b2:	6a3b      	ldr	r3, [r7, #32]
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	3302      	adds	r3, #2
 800a6be:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	0a1b      	lsrs	r3, r3, #8
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a6de:	6a3b      	ldr	r3, [r7, #32]
 800a6e0:	3302      	adds	r3, #2
 800a6e2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1e0      	bne.n	800a6b2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a6f0:	88bb      	ldrh	r3, [r7, #4]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d007      	beq.n	800a70c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	b2da      	uxtb	r2, r3
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	701a      	strb	r2, [r3, #0]
  }
}
 800a70c:	bf00      	nop
 800a70e:	372c      	adds	r7, #44	; 0x2c
 800a710:	46bd      	mov	sp, r7
 800a712:	bc80      	pop	{r7}
 800a714:	4770      	bx	lr

0800a716 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	460b      	mov	r3, r1
 800a720:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	7c1b      	ldrb	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d115      	bne.n	800a75a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a72e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a732:	2202      	movs	r2, #2
 800a734:	2181      	movs	r1, #129	; 0x81
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 febb 	bl	800c4b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a742:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a746:	2202      	movs	r2, #2
 800a748:	2101      	movs	r1, #1
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f001 feb1 	bl	800c4b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a758:	e012      	b.n	800a780 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a75a:	2340      	movs	r3, #64	; 0x40
 800a75c:	2202      	movs	r2, #2
 800a75e:	2181      	movs	r1, #129	; 0x81
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 fea6 	bl	800c4b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a76c:	2340      	movs	r3, #64	; 0x40
 800a76e:	2202      	movs	r2, #2
 800a770:	2101      	movs	r1, #1
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fe9d 	bl	800c4b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a780:	2308      	movs	r3, #8
 800a782:	2203      	movs	r2, #3
 800a784:	2182      	movs	r1, #130	; 0x82
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f001 fe93 	bl	800c4b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a792:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a796:	f001 ffb3 	bl	800c700 <USBD_static_malloc>
 800a79a:	4602      	mov	r2, r0
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	73fb      	strb	r3, [r7, #15]
 800a7b0:	e026      	b.n	800a800 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7c1b      	ldrb	r3, [r3, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d109      	bne.n	800a7f0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 ff53 	bl	800c694 <USBD_LL_PrepareReceive>
 800a7ee:	e007      	b.n	800a800 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7f6:	2340      	movs	r3, #64	; 0x40
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f001 ff4a 	bl	800c694 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b084      	sub	sp, #16
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
 800a812:	460b      	mov	r3, r1
 800a814:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a81a:	2181      	movs	r1, #129	; 0x81
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 fe6e 	bl	800c4fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a828:	2101      	movs	r1, #1
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f001 fe67 	bl	800c4fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a838:	2182      	movs	r1, #130	; 0x82
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fe5f 	bl	800c4fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00e      	beq.n	800a86e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a860:	4618      	mov	r0, r3
 800a862:	f001 ff59 	bl	800c718 <USBD_static_free>
    pdev->pClassData = NULL;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a892:	2300      	movs	r3, #0
 800a894:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d039      	beq.n	800a916 <USBD_CDC_Setup+0x9e>
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	d17f      	bne.n	800a9a6 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	88db      	ldrh	r3, [r3, #6]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d029      	beq.n	800a902 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	b25b      	sxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	da11      	bge.n	800a8dc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a8c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	88d2      	ldrh	r2, [r2, #6]
 800a8ca:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a8cc:	6939      	ldr	r1, [r7, #16]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	88db      	ldrh	r3, [r3, #6]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fa0a 	bl	800bcee <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a8da:	e06b      	b.n	800a9b4 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	785a      	ldrb	r2, [r3, #1]
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	88db      	ldrh	r3, [r3, #6]
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a8f2:	6939      	ldr	r1, [r7, #16]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	88db      	ldrh	r3, [r3, #6]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f001 fa25 	bl	800bd4a <USBD_CtlPrepareRx>
      break;
 800a900:	e058      	b.n	800a9b4 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	7850      	ldrb	r0, [r2, #1]
 800a90e:	2200      	movs	r2, #0
 800a910:	6839      	ldr	r1, [r7, #0]
 800a912:	4798      	blx	r3
      break;
 800a914:	e04e      	b.n	800a9b4 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b0b      	cmp	r3, #11
 800a91c:	d02e      	beq.n	800a97c <USBD_CDC_Setup+0x104>
 800a91e:	2b0b      	cmp	r3, #11
 800a920:	dc38      	bgt.n	800a994 <USBD_CDC_Setup+0x11c>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <USBD_CDC_Setup+0xb4>
 800a926:	2b0a      	cmp	r3, #10
 800a928:	d014      	beq.n	800a954 <USBD_CDC_Setup+0xdc>
 800a92a:	e033      	b.n	800a994 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a932:	2b03      	cmp	r3, #3
 800a934:	d107      	bne.n	800a946 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	2202      	movs	r2, #2
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 f9d5 	bl	800bcee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a944:	e02e      	b.n	800a9a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 f966 	bl	800bc1a <USBD_CtlError>
            ret = USBD_FAIL;
 800a94e:	2302      	movs	r3, #2
 800a950:	75fb      	strb	r3, [r7, #23]
          break;
 800a952:	e027      	b.n	800a9a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d107      	bne.n	800a96e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a95e:	f107 030f 	add.w	r3, r7, #15
 800a962:	2201      	movs	r2, #1
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 f9c1 	bl	800bcee <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a96c:	e01a      	b.n	800a9a4 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f952 	bl	800bc1a <USBD_CtlError>
            ret = USBD_FAIL;
 800a976:	2302      	movs	r3, #2
 800a978:	75fb      	strb	r3, [r7, #23]
          break;
 800a97a:	e013      	b.n	800a9a4 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a982:	2b03      	cmp	r3, #3
 800a984:	d00d      	beq.n	800a9a2 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 f946 	bl	800bc1a <USBD_CtlError>
            ret = USBD_FAIL;
 800a98e:	2302      	movs	r3, #2
 800a990:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a992:	e006      	b.n	800a9a2 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f001 f93f 	bl	800bc1a <USBD_CtlError>
          ret = USBD_FAIL;
 800a99c:	2302      	movs	r3, #2
 800a99e:	75fb      	strb	r3, [r7, #23]
          break;
 800a9a0:	e000      	b.n	800a9a4 <USBD_CDC_Setup+0x12c>
          break;
 800a9a2:	bf00      	nop
      }
      break;
 800a9a4:	e006      	b.n	800a9b4 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 f936 	bl	800bc1a <USBD_CtlError>
      ret = USBD_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b2:	bf00      	nop
  }

  return ret;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9d8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d03a      	beq.n	800aa5a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a9e4:	78fa      	ldrb	r2, [r7, #3]
 800a9e6:	6879      	ldr	r1, [r7, #4]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	331c      	adds	r3, #28
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d029      	beq.n	800aa4e <USBD_CDC_DataIn+0x90>
 800a9fa:	78fa      	ldrb	r2, [r7, #3]
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	440b      	add	r3, r1
 800aa08:	331c      	adds	r3, #28
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	78f9      	ldrb	r1, [r7, #3]
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	460b      	mov	r3, r1
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	4403      	add	r3, r0
 800aa1a:	3338      	adds	r3, #56	; 0x38
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa22:	fb03 f301 	mul.w	r3, r3, r1
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d110      	bne.n	800aa4e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	6879      	ldr	r1, [r7, #4]
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	440b      	add	r3, r1
 800aa3a:	331c      	adds	r3, #28
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa40:	78f9      	ldrb	r1, [r7, #3]
 800aa42:	2300      	movs	r3, #0
 800aa44:	2200      	movs	r2, #0
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fe01 	bl	800c64e <USBD_LL_Transmit>
 800aa4c:	e003      	b.n	800aa56 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e000      	b.n	800aa5c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800aa5a:	2302      	movs	r3, #2
  }
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aa78:	78fb      	ldrb	r3, [r7, #3]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f001 fe2c 	bl	800c6da <USBD_LL_GetRxDataSize>
 800aa82:	4602      	mov	r2, r0
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00d      	beq.n	800aab0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4798      	blx	r3

    return USBD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	e000      	b.n	800aab2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aab0:	2302      	movs	r3, #2
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d015      	beq.n	800ab00 <USBD_CDC_EP0_RxReady+0x46>
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aada:	2bff      	cmp	r3, #255	; 0xff
 800aadc:	d010      	beq.n	800ab00 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800aaec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	22ff      	movs	r2, #255	; 0xff
 800aafc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2243      	movs	r2, #67	; 0x43
 800ab18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ab1a:	4b03      	ldr	r3, [pc, #12]	; (800ab28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bc80      	pop	{r7}
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	200000e4 	.word	0x200000e4

0800ab2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2243      	movs	r2, #67	; 0x43
 800ab38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ab3a:	4b03      	ldr	r3, [pc, #12]	; (800ab48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bc80      	pop	{r7}
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	200000a0 	.word	0x200000a0

0800ab4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2243      	movs	r2, #67	; 0x43
 800ab58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ab5a:	4b03      	ldr	r3, [pc, #12]	; (800ab68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	20000128 	.word	0x20000128

0800ab6c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	220a      	movs	r2, #10
 800ab78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ab7a:	4b03      	ldr	r3, [pc, #12]	; (800ab88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	2000005c 	.word	0x2000005c

0800ab8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ab96:	2302      	movs	r3, #2
 800ab98:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800abac:	7bfb      	ldrb	r3, [r7, #15]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abcc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800abd6:	88fa      	ldrh	r2, [r7, #6]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	371c      	adds	r7, #28
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bc80      	pop	{r7}
 800abe8:	4770      	bx	lr

0800abea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3714      	adds	r7, #20
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bc80      	pop	{r7}
 800ac0e:	4770      	bx	lr

0800ac10 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d01c      	beq.n	800ac64 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d115      	bne.n	800ac60 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2181      	movs	r1, #129	; 0x81
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f001 fcf9 	bl	800c64e <USBD_LL_Transmit>

      return USBD_OK;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e002      	b.n	800ac66 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e000      	b.n	800ac66 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ac64:	2302      	movs	r3, #2
  }
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d017      	beq.n	800acb8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7c1b      	ldrb	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d109      	bne.n	800aca4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 fcf9 	bl	800c694 <USBD_LL_PrepareReceive>
 800aca2:	e007      	b.n	800acb4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800acaa:	2340      	movs	r3, #64	; 0x40
 800acac:	2101      	movs	r1, #1
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 fcf0 	bl	800c694 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e000      	b.n	800acba <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800acb8:	2302      	movs	r3, #2
  }
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b084      	sub	sp, #16
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	60f8      	str	r0, [r7, #12]
 800acca:	60b9      	str	r1, [r7, #8]
 800accc:	4613      	mov	r3, r2
 800acce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800acd6:	2302      	movs	r3, #2
 800acd8:	e01a      	b.n	800ad10 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	79fa      	ldrb	r2, [r7, #7]
 800ad06:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f001 fb5d 	bl	800c3c8 <USBD_LL_Init>

  return USBD_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d006      	beq.n	800ad3a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
 800ad38:	e001      	b.n	800ad3e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bc80      	pop	{r7}
 800ad48:	4770      	bx	lr

0800ad4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 fb92 	bl	800c47c <USBD_LL_Start>

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b083      	sub	sp, #12
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bc80      	pop	{r7}
 800ad74:	4770      	bx	lr

0800ad76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad82:	2302      	movs	r3, #2
 800ad84:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00c      	beq.n	800adaa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	78fa      	ldrb	r2, [r7, #3]
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	4798      	blx	r3
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	78fa      	ldrb	r2, [r7, #3]
 800adca:	4611      	mov	r1, r2
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	4798      	blx	r3

  return USBD_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f000 fed8 	bl	800bba2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800ae00:	461a      	mov	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae0e:	f003 031f 	and.w	r3, r3, #31
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d016      	beq.n	800ae44 <USBD_LL_SetupStage+0x6a>
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d81c      	bhi.n	800ae54 <USBD_LL_SetupStage+0x7a>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d002      	beq.n	800ae24 <USBD_LL_SetupStage+0x4a>
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d008      	beq.n	800ae34 <USBD_LL_SetupStage+0x5a>
 800ae22:	e017      	b.n	800ae54 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f9cb 	bl	800b1c8 <USBD_StdDevReq>
      break;
 800ae32:	e01a      	b.n	800ae6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fa2d 	bl	800b29c <USBD_StdItfReq>
      break;
 800ae42:	e012      	b.n	800ae6a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fa6d 	bl	800b32c <USBD_StdEPReq>
      break;
 800ae52:	e00a      	b.n	800ae6a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ae5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f001 fb6a 	bl	800c53c <USBD_LL_StallEP>
      break;
 800ae68:	bf00      	nop
  }

  return USBD_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	607a      	str	r2, [r7, #4]
 800ae80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d14b      	bne.n	800af20 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae8e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae96:	2b03      	cmp	r3, #3
 800ae98:	d134      	bne.n	800af04 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d919      	bls.n	800aeda <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	68da      	ldr	r2, [r3, #12]
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d203      	bcs.n	800aec8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	e002      	b.n	800aece <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aecc:	b29b      	uxth	r3, r3
 800aece:	461a      	mov	r2, r3
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	68f8      	ldr	r0, [r7, #12]
 800aed4:	f000 ff57 	bl	800bd86 <USBD_CtlContinueRx>
 800aed8:	e038      	b.n	800af4c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d105      	bne.n	800aefc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 ff54 	bl	800bdaa <USBD_CtlSendStatus>
 800af02:	e023      	b.n	800af4c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d11e      	bne.n	800af4c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800af16:	2100      	movs	r1, #0
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f001 fb0f 	bl	800c53c <USBD_LL_StallEP>
 800af1e:	e015      	b.n	800af4c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af26:	699b      	ldr	r3, [r3, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800af32:	2b03      	cmp	r3, #3
 800af34:	d108      	bne.n	800af48 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	7afa      	ldrb	r2, [r7, #11]
 800af40:	4611      	mov	r1, r2
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	4798      	blx	r3
 800af46:	e001      	b.n	800af4c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800af48:	2302      	movs	r3, #2
 800af4a:	e000      	b.n	800af4e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b086      	sub	sp, #24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	460b      	mov	r3, r1
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d17f      	bne.n	800b06a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3314      	adds	r3, #20
 800af6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af76:	2b02      	cmp	r3, #2
 800af78:	d15c      	bne.n	800b034 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	68da      	ldr	r2, [r3, #12]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	429a      	cmp	r2, r3
 800af84:	d915      	bls.n	800afb2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	68da      	ldr	r2, [r3, #12]
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	691b      	ldr	r3, [r3, #16]
 800af8e:	1ad2      	subs	r2, r2, r3
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fec1 	bl	800bd26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afa4:	2300      	movs	r3, #0
 800afa6:	2200      	movs	r2, #0
 800afa8:	2100      	movs	r1, #0
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f001 fb72 	bl	800c694 <USBD_LL_PrepareReceive>
 800afb0:	e04e      	b.n	800b050 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	6912      	ldr	r2, [r2, #16]
 800afba:	fbb3 f1f2 	udiv	r1, r3, r2
 800afbe:	fb02 f201 	mul.w	r2, r2, r1
 800afc2:	1a9b      	subs	r3, r3, r2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d11c      	bne.n	800b002 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	689a      	ldr	r2, [r3, #8]
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d316      	bcc.n	800b002 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800afde:	429a      	cmp	r2, r3
 800afe0:	d20f      	bcs.n	800b002 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800afe2:	2200      	movs	r2, #0
 800afe4:	2100      	movs	r1, #0
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fe9d 	bl	800bd26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aff4:	2300      	movs	r3, #0
 800aff6:	2200      	movs	r2, #0
 800aff8:	2100      	movs	r1, #0
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f001 fb4a 	bl	800c694 <USBD_LL_PrepareReceive>
 800b000:	e026      	b.n	800b050 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00a      	beq.n	800b024 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b014:	2b03      	cmp	r3, #3
 800b016:	d105      	bne.n	800b024 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b024:	2180      	movs	r1, #128	; 0x80
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f001 fa88 	bl	800c53c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 fecf 	bl	800bdd0 <USBD_CtlReceiveStatus>
 800b032:	e00d      	b.n	800b050 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d004      	beq.n	800b048 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b048:	2180      	movs	r1, #128	; 0x80
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f001 fa76 	bl	800c53c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b056:	2b01      	cmp	r3, #1
 800b058:	d11d      	bne.n	800b096 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f7ff fe81 	bl	800ad62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b068:	e015      	b.n	800b096 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00d      	beq.n	800b092 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b07c:	2b03      	cmp	r3, #3
 800b07e:	d108      	bne.n	800b092 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b086:	695b      	ldr	r3, [r3, #20]
 800b088:	7afa      	ldrb	r2, [r7, #11]
 800b08a:	4611      	mov	r1, r2
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	4798      	blx	r3
 800b090:	e001      	b.n	800b096 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b092:	2302      	movs	r3, #2
 800b094:	e000      	b.n	800b098 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0a8:	2340      	movs	r3, #64	; 0x40
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 f9ff 	bl	800c4b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2240      	movs	r2, #64	; 0x40
 800b0c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b0c4:	2340      	movs	r3, #64	; 0x40
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2180      	movs	r1, #128	; 0x80
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 f9f1 	bl	800c4b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2240      	movs	r2, #64	; 0x40
 800b0da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b100:	2b00      	cmp	r3, #0
 800b102:	d009      	beq.n	800b118 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	6852      	ldr	r2, [r2, #4]
 800b110:	b2d2      	uxtb	r2, r2
 800b112:	4611      	mov	r1, r2
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	4798      	blx	r3
  }

  return USBD_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	78fa      	ldrb	r2, [r7, #3]
 800b132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr

0800b140 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2204      	movs	r2, #4
 800b158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	bc80      	pop	{r7}
 800b166:	4770      	bx	lr

0800b168 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b176:	2b04      	cmp	r3, #4
 800b178:	d105      	bne.n	800b186 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bc80      	pop	{r7}
 800b190:	4770      	bx	lr

0800b192 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a0:	2b03      	cmp	r3, #3
 800b1a2:	d10b      	bne.n	800b1bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b6:	69db      	ldr	r3, [r3, #28]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
	...

0800b1c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1de:	2b40      	cmp	r3, #64	; 0x40
 800b1e0:	d005      	beq.n	800b1ee <USBD_StdDevReq+0x26>
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d84f      	bhi.n	800b286 <USBD_StdDevReq+0xbe>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d009      	beq.n	800b1fe <USBD_StdDevReq+0x36>
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d14b      	bne.n	800b286 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	6839      	ldr	r1, [r7, #0]
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
      break;
 800b1fc:	e048      	b.n	800b290 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	785b      	ldrb	r3, [r3, #1]
 800b202:	2b09      	cmp	r3, #9
 800b204:	d839      	bhi.n	800b27a <USBD_StdDevReq+0xb2>
 800b206:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <USBD_StdDevReq+0x44>)
 800b208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20c:	0800b25d 	.word	0x0800b25d
 800b210:	0800b271 	.word	0x0800b271
 800b214:	0800b27b 	.word	0x0800b27b
 800b218:	0800b267 	.word	0x0800b267
 800b21c:	0800b27b 	.word	0x0800b27b
 800b220:	0800b23f 	.word	0x0800b23f
 800b224:	0800b235 	.word	0x0800b235
 800b228:	0800b27b 	.word	0x0800b27b
 800b22c:	0800b253 	.word	0x0800b253
 800b230:	0800b249 	.word	0x0800b249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f9dc 	bl	800b5f4 <USBD_GetDescriptor>
          break;
 800b23c:	e022      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fb3f 	bl	800b8c4 <USBD_SetAddress>
          break;
 800b246:	e01d      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fb7e 	bl	800b94c <USBD_SetConfig>
          break;
 800b250:	e018      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fc07 	bl	800ba68 <USBD_GetConfig>
          break;
 800b25a:	e013      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fc37 	bl	800bad2 <USBD_GetStatus>
          break;
 800b264:	e00e      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b266:	6839      	ldr	r1, [r7, #0]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fc65 	bl	800bb38 <USBD_SetFeature>
          break;
 800b26e:	e009      	b.n	800b284 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fc74 	bl	800bb60 <USBD_ClrFeature>
          break;
 800b278:	e004      	b.n	800b284 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b27a:	6839      	ldr	r1, [r7, #0]
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 fccc 	bl	800bc1a <USBD_CtlError>
          break;
 800b282:	bf00      	nop
      }
      break;
 800b284:	e004      	b.n	800b290 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 fcc6 	bl	800bc1a <USBD_CtlError>
      break;
 800b28e:	bf00      	nop
  }

  return ret;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop

0800b29c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2b2:	2b40      	cmp	r3, #64	; 0x40
 800b2b4:	d005      	beq.n	800b2c2 <USBD_StdItfReq+0x26>
 800b2b6:	2b40      	cmp	r3, #64	; 0x40
 800b2b8:	d82e      	bhi.n	800b318 <USBD_StdItfReq+0x7c>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <USBD_StdItfReq+0x26>
 800b2be:	2b20      	cmp	r3, #32
 800b2c0:	d12a      	bne.n	800b318 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2c8:	3b01      	subs	r3, #1
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d81d      	bhi.n	800b30a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	889b      	ldrh	r3, [r3, #4]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d813      	bhi.n	800b300 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	88db      	ldrh	r3, [r3, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d110      	bne.n	800b314 <USBD_StdItfReq+0x78>
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10d      	bne.n	800b314 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fd56 	bl	800bdaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b2fe:	e009      	b.n	800b314 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fc89 	bl	800bc1a <USBD_CtlError>
          break;
 800b308:	e004      	b.n	800b314 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fc84 	bl	800bc1a <USBD_CtlError>
          break;
 800b312:	e000      	b.n	800b316 <USBD_StdItfReq+0x7a>
          break;
 800b314:	bf00      	nop
      }
      break;
 800b316:	e004      	b.n	800b322 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fc7d 	bl	800bc1a <USBD_CtlError>
      break;
 800b320:	bf00      	nop
  }

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	889b      	ldrh	r3, [r3, #4]
 800b33e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b348:	2b40      	cmp	r3, #64	; 0x40
 800b34a:	d007      	beq.n	800b35c <USBD_StdEPReq+0x30>
 800b34c:	2b40      	cmp	r3, #64	; 0x40
 800b34e:	f200 8146 	bhi.w	800b5de <USBD_StdEPReq+0x2b2>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <USBD_StdEPReq+0x40>
 800b356:	2b20      	cmp	r3, #32
 800b358:	f040 8141 	bne.w	800b5de <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	4798      	blx	r3
      break;
 800b36a:	e13d      	b.n	800b5e8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b374:	2b20      	cmp	r3, #32
 800b376:	d10a      	bne.n	800b38e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	4798      	blx	r3
 800b386:	4603      	mov	r3, r0
 800b388:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	e12d      	b.n	800b5ea <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	785b      	ldrb	r3, [r3, #1]
 800b392:	2b03      	cmp	r3, #3
 800b394:	d007      	beq.n	800b3a6 <USBD_StdEPReq+0x7a>
 800b396:	2b03      	cmp	r3, #3
 800b398:	f300 811b 	bgt.w	800b5d2 <USBD_StdEPReq+0x2a6>
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d072      	beq.n	800b486 <USBD_StdEPReq+0x15a>
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d03a      	beq.n	800b41a <USBD_StdEPReq+0xee>
 800b3a4:	e115      	b.n	800b5d2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d002      	beq.n	800b3b6 <USBD_StdEPReq+0x8a>
 800b3b0:	2b03      	cmp	r3, #3
 800b3b2:	d015      	beq.n	800b3e0 <USBD_StdEPReq+0xb4>
 800b3b4:	e02b      	b.n	800b40e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00c      	beq.n	800b3d6 <USBD_StdEPReq+0xaa>
 800b3bc:	7bbb      	ldrb	r3, [r7, #14]
 800b3be:	2b80      	cmp	r3, #128	; 0x80
 800b3c0:	d009      	beq.n	800b3d6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f001 f8b8 	bl	800c53c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b3cc:	2180      	movs	r1, #128	; 0x80
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f001 f8b4 	bl	800c53c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b3d4:	e020      	b.n	800b418 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fc1e 	bl	800bc1a <USBD_CtlError>
              break;
 800b3de:	e01b      	b.n	800b418 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	885b      	ldrh	r3, [r3, #2]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d10e      	bne.n	800b406 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <USBD_StdEPReq+0xda>
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b80      	cmp	r3, #128	; 0x80
 800b3f2:	d008      	beq.n	800b406 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	88db      	ldrh	r3, [r3, #6]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d104      	bne.n	800b406 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f001 f89b 	bl	800c53c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 fccf 	bl	800bdaa <USBD_CtlSendStatus>

              break;
 800b40c:	e004      	b.n	800b418 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 fc02 	bl	800bc1a <USBD_CtlError>
              break;
 800b416:	bf00      	nop
          }
          break;
 800b418:	e0e0      	b.n	800b5dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b420:	2b02      	cmp	r3, #2
 800b422:	d002      	beq.n	800b42a <USBD_StdEPReq+0xfe>
 800b424:	2b03      	cmp	r3, #3
 800b426:	d015      	beq.n	800b454 <USBD_StdEPReq+0x128>
 800b428:	e026      	b.n	800b478 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00c      	beq.n	800b44a <USBD_StdEPReq+0x11e>
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	2b80      	cmp	r3, #128	; 0x80
 800b434:	d009      	beq.n	800b44a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	4619      	mov	r1, r3
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 f87e 	bl	800c53c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b440:	2180      	movs	r1, #128	; 0x80
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 f87a 	bl	800c53c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b448:	e01c      	b.n	800b484 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fbe4 	bl	800bc1a <USBD_CtlError>
              break;
 800b452:	e017      	b.n	800b484 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	885b      	ldrh	r3, [r3, #2]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d112      	bne.n	800b482 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 f885 	bl	800c57a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fc9a 	bl	800bdaa <USBD_CtlSendStatus>
              }
              break;
 800b476:	e004      	b.n	800b482 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fbcd 	bl	800bc1a <USBD_CtlError>
              break;
 800b480:	e000      	b.n	800b484 <USBD_StdEPReq+0x158>
              break;
 800b482:	bf00      	nop
          }
          break;
 800b484:	e0aa      	b.n	800b5dc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d002      	beq.n	800b496 <USBD_StdEPReq+0x16a>
 800b490:	2b03      	cmp	r3, #3
 800b492:	d032      	beq.n	800b4fa <USBD_StdEPReq+0x1ce>
 800b494:	e097      	b.n	800b5c6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d007      	beq.n	800b4ac <USBD_StdEPReq+0x180>
 800b49c:	7bbb      	ldrb	r3, [r7, #14]
 800b49e:	2b80      	cmp	r3, #128	; 0x80
 800b4a0:	d004      	beq.n	800b4ac <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fbb8 	bl	800bc1a <USBD_CtlError>
                break;
 800b4aa:	e091      	b.n	800b5d0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	da0b      	bge.n	800b4cc <USBD_StdEPReq+0x1a0>
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	3310      	adds	r3, #16
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	e00b      	b.n	800b4e4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
 800b4ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	3304      	adds	r3, #4
 800b4e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2202      	movs	r2, #2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fbfb 	bl	800bcee <USBD_CtlSendData>
              break;
 800b4f8:	e06a      	b.n	800b5d0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b4fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	da11      	bge.n	800b526 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b502:	7bbb      	ldrb	r3, [r7, #14]
 800b504:	f003 020f 	and.w	r2, r3, #15
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	3318      	adds	r3, #24
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d117      	bne.n	800b54c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fb7b 	bl	800bc1a <USBD_CtlError>
                  break;
 800b524:	e054      	b.n	800b5d0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b526:	7bbb      	ldrb	r3, [r7, #14]
 800b528:	f003 020f 	and.w	r2, r3, #15
 800b52c:	6879      	ldr	r1, [r7, #4]
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d104      	bne.n	800b54c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fb68 	bl	800bc1a <USBD_CtlError>
                  break;
 800b54a:	e041      	b.n	800b5d0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b54c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b550:	2b00      	cmp	r3, #0
 800b552:	da0b      	bge.n	800b56c <USBD_StdEPReq+0x240>
 800b554:	7bbb      	ldrb	r3, [r7, #14]
 800b556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	3310      	adds	r3, #16
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	4413      	add	r3, r2
 800b568:	3304      	adds	r3, #4
 800b56a:	e00b      	b.n	800b584 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b572:	4613      	mov	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4413      	add	r3, r2
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	4413      	add	r3, r2
 800b582:	3304      	adds	r3, #4
 800b584:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b586:	7bbb      	ldrb	r3, [r7, #14]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <USBD_StdEPReq+0x266>
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d103      	bne.n	800b59a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	e00e      	b.n	800b5b8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f001 f80a 	bl	800c5b8 <USBD_LL_IsStallEP>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
 800b5b0:	e002      	b.n	800b5b8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	4619      	mov	r1, r3
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fb95 	bl	800bcee <USBD_CtlSendData>
              break;
 800b5c4:	e004      	b.n	800b5d0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fb26 	bl	800bc1a <USBD_CtlError>
              break;
 800b5ce:	bf00      	nop
          }
          break;
 800b5d0:	e004      	b.n	800b5dc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 fb20 	bl	800bc1a <USBD_CtlError>
          break;
 800b5da:	bf00      	nop
      }
      break;
 800b5dc:	e004      	b.n	800b5e8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 fb1a 	bl	800bc1a <USBD_CtlError>
      break;
 800b5e6:	bf00      	nop
  }

  return ret;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	885b      	ldrh	r3, [r3, #2]
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	b29b      	uxth	r3, r3
 800b612:	3b01      	subs	r3, #1
 800b614:	2b06      	cmp	r3, #6
 800b616:	f200 8128 	bhi.w	800b86a <USBD_GetDescriptor+0x276>
 800b61a:	a201      	add	r2, pc, #4	; (adr r2, 800b620 <USBD_GetDescriptor+0x2c>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b63d 	.word	0x0800b63d
 800b624:	0800b655 	.word	0x0800b655
 800b628:	0800b695 	.word	0x0800b695
 800b62c:	0800b86b 	.word	0x0800b86b
 800b630:	0800b86b 	.word	0x0800b86b
 800b634:	0800b80b 	.word	0x0800b80b
 800b638:	0800b837 	.word	0x0800b837
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	7c12      	ldrb	r2, [r2, #16]
 800b648:	f107 0108 	add.w	r1, r7, #8
 800b64c:	4610      	mov	r0, r2
 800b64e:	4798      	blx	r3
 800b650:	60f8      	str	r0, [r7, #12]
      break;
 800b652:	e112      	b.n	800b87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	7c1b      	ldrb	r3, [r3, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10d      	bne.n	800b678 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b664:	f107 0208 	add.w	r2, r7, #8
 800b668:	4610      	mov	r0, r2
 800b66a:	4798      	blx	r3
 800b66c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	2202      	movs	r2, #2
 800b674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b676:	e100      	b.n	800b87a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	f107 0208 	add.w	r2, r7, #8
 800b684:	4610      	mov	r0, r2
 800b686:	4798      	blx	r3
 800b688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	2202      	movs	r2, #2
 800b690:	701a      	strb	r2, [r3, #0]
      break;
 800b692:	e0f2      	b.n	800b87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	885b      	ldrh	r3, [r3, #2]
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b05      	cmp	r3, #5
 800b69c:	f200 80ac 	bhi.w	800b7f8 <USBD_GetDescriptor+0x204>
 800b6a0:	a201      	add	r2, pc, #4	; (adr r2, 800b6a8 <USBD_GetDescriptor+0xb4>)
 800b6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6a6:	bf00      	nop
 800b6a8:	0800b6c1 	.word	0x0800b6c1
 800b6ac:	0800b6f5 	.word	0x0800b6f5
 800b6b0:	0800b729 	.word	0x0800b729
 800b6b4:	0800b75d 	.word	0x0800b75d
 800b6b8:	0800b791 	.word	0x0800b791
 800b6bc:	0800b7c5 	.word	0x0800b7c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	7c12      	ldrb	r2, [r2, #16]
 800b6d8:	f107 0108 	add.w	r1, r7, #8
 800b6dc:	4610      	mov	r0, r2
 800b6de:	4798      	blx	r3
 800b6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6e2:	e091      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6e4:	6839      	ldr	r1, [r7, #0]
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 fa97 	bl	800bc1a <USBD_CtlError>
            err++;
 800b6ec:	7afb      	ldrb	r3, [r7, #11]
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6f2:	e089      	b.n	800b808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00b      	beq.n	800b718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	7c12      	ldrb	r2, [r2, #16]
 800b70c:	f107 0108 	add.w	r1, r7, #8
 800b710:	4610      	mov	r0, r2
 800b712:	4798      	blx	r3
 800b714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b716:	e077      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fa7d 	bl	800bc1a <USBD_CtlError>
            err++;
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	3301      	adds	r3, #1
 800b724:	72fb      	strb	r3, [r7, #11]
          break;
 800b726:	e06f      	b.n	800b808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00b      	beq.n	800b74c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	7c12      	ldrb	r2, [r2, #16]
 800b740:	f107 0108 	add.w	r1, r7, #8
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
 800b748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b74a:	e05d      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa63 	bl	800bc1a <USBD_CtlError>
            err++;
 800b754:	7afb      	ldrb	r3, [r7, #11]
 800b756:	3301      	adds	r3, #1
 800b758:	72fb      	strb	r3, [r7, #11]
          break;
 800b75a:	e055      	b.n	800b808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00b      	beq.n	800b780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	7c12      	ldrb	r2, [r2, #16]
 800b774:	f107 0108 	add.w	r1, r7, #8
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3
 800b77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b77e:	e043      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fa49 	bl	800bc1a <USBD_CtlError>
            err++;
 800b788:	7afb      	ldrb	r3, [r7, #11]
 800b78a:	3301      	adds	r3, #1
 800b78c:	72fb      	strb	r3, [r7, #11]
          break;
 800b78e:	e03b      	b.n	800b808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00b      	beq.n	800b7b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	7c12      	ldrb	r2, [r2, #16]
 800b7a8:	f107 0108 	add.w	r1, r7, #8
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	4798      	blx	r3
 800b7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7b2:	e029      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7b4:	6839      	ldr	r1, [r7, #0]
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa2f 	bl	800bc1a <USBD_CtlError>
            err++;
 800b7bc:	7afb      	ldrb	r3, [r7, #11]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b7c2:	e021      	b.n	800b808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00b      	beq.n	800b7e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	7c12      	ldrb	r2, [r2, #16]
 800b7dc:	f107 0108 	add.w	r1, r7, #8
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	4798      	blx	r3
 800b7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7e6:	e00f      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7e8:	6839      	ldr	r1, [r7, #0]
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa15 	bl	800bc1a <USBD_CtlError>
            err++;
 800b7f0:	7afb      	ldrb	r3, [r7, #11]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7f6:	e007      	b.n	800b808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fa0d 	bl	800bc1a <USBD_CtlError>
          err++;
 800b800:	7afb      	ldrb	r3, [r7, #11]
 800b802:	3301      	adds	r3, #1
 800b804:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b806:	e038      	b.n	800b87a <USBD_GetDescriptor+0x286>
 800b808:	e037      	b.n	800b87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	7c1b      	ldrb	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d109      	bne.n	800b826 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81a:	f107 0208 	add.w	r2, r7, #8
 800b81e:	4610      	mov	r0, r2
 800b820:	4798      	blx	r3
 800b822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b824:	e029      	b.n	800b87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b826:	6839      	ldr	r1, [r7, #0]
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f9f6 	bl	800bc1a <USBD_CtlError>
        err++;
 800b82e:	7afb      	ldrb	r3, [r7, #11]
 800b830:	3301      	adds	r3, #1
 800b832:	72fb      	strb	r3, [r7, #11]
      break;
 800b834:	e021      	b.n	800b87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	7c1b      	ldrb	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10d      	bne.n	800b85a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b846:	f107 0208 	add.w	r2, r7, #8
 800b84a:	4610      	mov	r0, r2
 800b84c:	4798      	blx	r3
 800b84e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	2207      	movs	r2, #7
 800b856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b858:	e00f      	b.n	800b87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f9dc 	bl	800bc1a <USBD_CtlError>
        err++;
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	3301      	adds	r3, #1
 800b866:	72fb      	strb	r3, [r7, #11]
      break;
 800b868:	e007      	b.n	800b87a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b86a:	6839      	ldr	r1, [r7, #0]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9d4 	bl	800bc1a <USBD_CtlError>
      err++;
 800b872:	7afb      	ldrb	r3, [r7, #11]
 800b874:	3301      	adds	r3, #1
 800b876:	72fb      	strb	r3, [r7, #11]
      break;
 800b878:	bf00      	nop
  }

  if (err != 0U)
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d11c      	bne.n	800b8ba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b880:	893b      	ldrh	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d011      	beq.n	800b8aa <USBD_GetDescriptor+0x2b6>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	88db      	ldrh	r3, [r3, #6]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00d      	beq.n	800b8aa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	88da      	ldrh	r2, [r3, #6]
 800b892:	893b      	ldrh	r3, [r7, #8]
 800b894:	4293      	cmp	r3, r2
 800b896:	bf28      	it	cs
 800b898:	4613      	movcs	r3, r2
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b89e:	893b      	ldrh	r3, [r7, #8]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	68f9      	ldr	r1, [r7, #12]
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fa22 	bl	800bcee <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	88db      	ldrh	r3, [r3, #6]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d104      	bne.n	800b8bc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fa79 	bl	800bdaa <USBD_CtlSendStatus>
 800b8b8:	e000      	b.n	800b8bc <USBD_GetDescriptor+0x2c8>
    return;
 800b8ba:	bf00      	nop
    }
  }
}
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop

0800b8c4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	889b      	ldrh	r3, [r3, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d130      	bne.n	800b938 <USBD_SetAddress+0x74>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	88db      	ldrh	r3, [r3, #6]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d12c      	bne.n	800b938 <USBD_SetAddress+0x74>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	885b      	ldrh	r3, [r3, #2]
 800b8e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b8e4:	d828      	bhi.n	800b938 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	885b      	ldrh	r3, [r3, #2]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8f8:	2b03      	cmp	r3, #3
 800b8fa:	d104      	bne.n	800b906 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 f98b 	bl	800bc1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b904:	e01d      	b.n	800b942 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7bfa      	ldrb	r2, [r7, #15]
 800b90a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b90e:	7bfb      	ldrb	r3, [r7, #15]
 800b910:	4619      	mov	r1, r3
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fe7c 	bl	800c610 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fa46 	bl	800bdaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b92c:	e009      	b.n	800b942 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b936:	e004      	b.n	800b942 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f96d 	bl	800bc1a <USBD_CtlError>
  }
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	885b      	ldrh	r3, [r3, #2]
 800b95a:	b2da      	uxtb	r2, r3
 800b95c:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <USBD_SetConfig+0x118>)
 800b95e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b960:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <USBD_SetConfig+0x118>)
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d904      	bls.n	800b972 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f955 	bl	800bc1a <USBD_CtlError>
 800b970:	e075      	b.n	800ba5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d002      	beq.n	800b982 <USBD_SetConfig+0x36>
 800b97c:	2b03      	cmp	r3, #3
 800b97e:	d023      	beq.n	800b9c8 <USBD_SetConfig+0x7c>
 800b980:	e062      	b.n	800ba48 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b982:	4b38      	ldr	r3, [pc, #224]	; (800ba64 <USBD_SetConfig+0x118>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d01a      	beq.n	800b9c0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b98a:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <USBD_SetConfig+0x118>)
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2203      	movs	r2, #3
 800b998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b99c:	4b31      	ldr	r3, [pc, #196]	; (800ba64 <USBD_SetConfig+0x118>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff f9e7 	bl	800ad76 <USBD_SetClassConfig>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d104      	bne.n	800b9b8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f932 	bl	800bc1a <USBD_CtlError>
            return;
 800b9b6:	e052      	b.n	800ba5e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f9f6 	bl	800bdaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b9be:	e04e      	b.n	800ba5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f9f2 	bl	800bdaa <USBD_CtlSendStatus>
        break;
 800b9c6:	e04a      	b.n	800ba5e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b9c8:	4b26      	ldr	r3, [pc, #152]	; (800ba64 <USBD_SetConfig+0x118>)
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d112      	bne.n	800b9f6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b9d8:	4b22      	ldr	r3, [pc, #136]	; (800ba64 <USBD_SetConfig+0x118>)
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b9e2:	4b20      	ldr	r3, [pc, #128]	; (800ba64 <USBD_SetConfig+0x118>)
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff f9e3 	bl	800adb4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f9db 	bl	800bdaa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b9f4:	e033      	b.n	800ba5e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b9f6:	4b1b      	ldr	r3, [pc, #108]	; (800ba64 <USBD_SetConfig+0x118>)
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d01d      	beq.n	800ba40 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff f9d1 	bl	800adb4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ba12:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <USBD_SetConfig+0x118>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ba1c:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <USBD_SetConfig+0x118>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff f9a7 	bl	800ad76 <USBD_SetClassConfig>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b02      	cmp	r3, #2
 800ba2c:	d104      	bne.n	800ba38 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f8f2 	bl	800bc1a <USBD_CtlError>
            return;
 800ba36:	e012      	b.n	800ba5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f9b6 	bl	800bdaa <USBD_CtlSendStatus>
        break;
 800ba3e:	e00e      	b.n	800ba5e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 f9b2 	bl	800bdaa <USBD_CtlSendStatus>
        break;
 800ba46:	e00a      	b.n	800ba5e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f8e5 	bl	800bc1a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ba50:	4b04      	ldr	r3, [pc, #16]	; (800ba64 <USBD_SetConfig+0x118>)
 800ba52:	781b      	ldrb	r3, [r3, #0]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff f9ac 	bl	800adb4 <USBD_ClrClassConfig>
        break;
 800ba5c:	bf00      	nop
    }
  }
}
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20000210 	.word	0x20000210

0800ba68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	88db      	ldrh	r3, [r3, #6]
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d004      	beq.n	800ba84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f8cc 	bl	800bc1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba82:	e022      	b.n	800baca <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	dc02      	bgt.n	800ba94 <USBD_GetConfig+0x2c>
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dc03      	bgt.n	800ba9a <USBD_GetConfig+0x32>
 800ba92:	e015      	b.n	800bac0 <USBD_GetConfig+0x58>
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d00b      	beq.n	800bab0 <USBD_GetConfig+0x48>
 800ba98:	e012      	b.n	800bac0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3308      	adds	r3, #8
 800baa4:	2201      	movs	r2, #1
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f920 	bl	800bcee <USBD_CtlSendData>
        break;
 800baae:	e00c      	b.n	800baca <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	3304      	adds	r3, #4
 800bab4:	2201      	movs	r2, #1
 800bab6:	4619      	mov	r1, r3
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f918 	bl	800bcee <USBD_CtlSendData>
        break;
 800babe:	e004      	b.n	800baca <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f8a9 	bl	800bc1a <USBD_CtlError>
        break;
 800bac8:	bf00      	nop
}
 800baca:	bf00      	nop
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bae2:	3b01      	subs	r3, #1
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d81e      	bhi.n	800bb26 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	2b02      	cmp	r3, #2
 800baee:	d004      	beq.n	800bafa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800baf0:	6839      	ldr	r1, [r7, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f891 	bl	800bc1a <USBD_CtlError>
        break;
 800baf8:	e01a      	b.n	800bb30 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2201      	movs	r2, #1
 800bafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d005      	beq.n	800bb16 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	f043 0202 	orr.w	r2, r3, #2
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	330c      	adds	r3, #12
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f8e5 	bl	800bcee <USBD_CtlSendData>
      break;
 800bb24:	e004      	b.n	800bb30 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f876 	bl	800bc1a <USBD_CtlError>
      break;
 800bb2e:	bf00      	nop
  }
}
 800bb30:	bf00      	nop
 800bb32:	3708      	adds	r7, #8
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	885b      	ldrh	r3, [r3, #2]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d106      	bne.n	800bb58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f929 	bl	800bdaa <USBD_CtlSendStatus>
  }
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb70:	3b01      	subs	r3, #1
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d80b      	bhi.n	800bb8e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	885b      	ldrh	r3, [r3, #2]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d10c      	bne.n	800bb98 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 f90f 	bl	800bdaa <USBD_CtlSendStatus>
      }
      break;
 800bb8c:	e004      	b.n	800bb98 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f842 	bl	800bc1a <USBD_CtlError>
      break;
 800bb96:	e000      	b.n	800bb9a <USBD_ClrFeature+0x3a>
      break;
 800bb98:	bf00      	nop
  }
}
 800bb9a:	bf00      	nop
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	785a      	ldrb	r2, [r3, #1]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	3302      	adds	r3, #2
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	3303      	adds	r3, #3
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	021b      	lsls	r3, r3, #8
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	b29a      	uxth	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	3304      	adds	r3, #4
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	3305      	adds	r3, #5
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	021b      	lsls	r3, r3, #8
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	4413      	add	r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	3306      	adds	r3, #6
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	3307      	adds	r3, #7
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	021b      	lsls	r3, r3, #8
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	4413      	add	r3, r2
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	80da      	strh	r2, [r3, #6]

}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr

0800bc1a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
 800bc22:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bc24:	2180      	movs	r1, #128	; 0x80
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fc88 	bl	800c53c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fc84 	bl	800c53c <USBD_LL_StallEP>
}
 800bc34:	bf00      	nop
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d032      	beq.n	800bcb8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f834 	bl	800bcc0 <USBD_GetLen>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	1c5a      	adds	r2, r3, #1
 800bc6a:	75fa      	strb	r2, [r7, #23]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	7812      	ldrb	r2, [r2, #0]
 800bc76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	75fa      	strb	r2, [r7, #23]
 800bc7e:	461a      	mov	r2, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	4413      	add	r3, r2
 800bc84:	2203      	movs	r2, #3
 800bc86:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bc88:	e012      	b.n	800bcb0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	60fa      	str	r2, [r7, #12]
 800bc90:	7dfa      	ldrb	r2, [r7, #23]
 800bc92:	1c51      	adds	r1, r2, #1
 800bc94:	75f9      	strb	r1, [r7, #23]
 800bc96:	4611      	mov	r1, r2
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	440a      	add	r2, r1
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	75fa      	strb	r2, [r7, #23]
 800bca6:	461a      	mov	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4413      	add	r3, r2
 800bcac:	2200      	movs	r2, #0
 800bcae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1e8      	bne.n	800bc8a <USBD_GetString+0x4e>
    }
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3718      	adds	r7, #24
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800bccc:	e005      	b.n	800bcda <USBD_GetLen+0x1a>
  {
    len++;
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1f5      	bne.n	800bcce <USBD_GetLen+0xe>
  }

  return len;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3714      	adds	r7, #20
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bc80      	pop	{r7}
 800bcec:	4770      	bx	lr

0800bcee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bd04:	88fa      	ldrh	r2, [r7, #6]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bd0a:	88fa      	ldrh	r2, [r7, #6]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	2100      	movs	r1, #0
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f000 fc99 	bl	800c64e <USBD_LL_Transmit>

  return USBD_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}

0800bd26 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bd26:	b580      	push	{r7, lr}
 800bd28:	b084      	sub	sp, #16
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	60f8      	str	r0, [r7, #12]
 800bd2e:	60b9      	str	r1, [r7, #8]
 800bd30:	4613      	mov	r3, r2
 800bd32:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bd34:	88fb      	ldrh	r3, [r7, #6]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f000 fc87 	bl	800c64e <USBD_LL_Transmit>

  return USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	60f8      	str	r0, [r7, #12]
 800bd52:	60b9      	str	r1, [r7, #8]
 800bd54:	4613      	mov	r3, r2
 800bd56:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2203      	movs	r2, #3
 800bd5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bd60:	88fa      	ldrh	r2, [r7, #6]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bd68:	88fa      	ldrh	r2, [r7, #6]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	2100      	movs	r1, #0
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 fc8c 	bl	800c694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b084      	sub	sp, #16
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	4613      	mov	r3, r2
 800bd92:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f000 fc7a 	bl	800c694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}

0800bdaa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bdaa:	b580      	push	{r7, lr}
 800bdac:	b082      	sub	sp, #8
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2204      	movs	r2, #4
 800bdb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bdba:	2300      	movs	r3, #0
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fc44 	bl	800c64e <USBD_LL_Transmit>

  return USBD_OK;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2205      	movs	r2, #5
 800bddc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bde0:	2300      	movs	r3, #0
 800bde2:	2200      	movs	r2, #0
 800bde4:	2100      	movs	r1, #0
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fc54 	bl	800c694 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4912      	ldr	r1, [pc, #72]	; (800be48 <MX_USB_DEVICE_Init+0x50>)
 800be00:	4812      	ldr	r0, [pc, #72]	; (800be4c <MX_USB_DEVICE_Init+0x54>)
 800be02:	f7fe ff5e 	bl	800acc2 <USBD_Init>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be0c:	f7f6 ffec 	bl	8002de8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be10:	490f      	ldr	r1, [pc, #60]	; (800be50 <MX_USB_DEVICE_Init+0x58>)
 800be12:	480e      	ldr	r0, [pc, #56]	; (800be4c <MX_USB_DEVICE_Init+0x54>)
 800be14:	f7fe ff80 	bl	800ad18 <USBD_RegisterClass>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be1e:	f7f6 ffe3 	bl	8002de8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be22:	490c      	ldr	r1, [pc, #48]	; (800be54 <MX_USB_DEVICE_Init+0x5c>)
 800be24:	4809      	ldr	r0, [pc, #36]	; (800be4c <MX_USB_DEVICE_Init+0x54>)
 800be26:	f7fe feb1 	bl	800ab8c <USBD_CDC_RegisterInterface>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be30:	f7f6 ffda 	bl	8002de8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be34:	4805      	ldr	r0, [pc, #20]	; (800be4c <MX_USB_DEVICE_Init+0x54>)
 800be36:	f7fe ff88 	bl	800ad4a <USBD_Start>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be40:	f7f6 ffd2 	bl	8002de8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be44:	bf00      	nop
 800be46:	bd80      	pop	{r7, pc}
 800be48:	2000017c 	.word	0x2000017c
 800be4c:	20000978 	.word	0x20000978
 800be50:	20000068 	.word	0x20000068
 800be54:	2000016c 	.word	0x2000016c

0800be58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be5c:	2200      	movs	r2, #0
 800be5e:	4905      	ldr	r1, [pc, #20]	; (800be74 <CDC_Init_FS+0x1c>)
 800be60:	4805      	ldr	r0, [pc, #20]	; (800be78 <CDC_Init_FS+0x20>)
 800be62:	f7fe fea9 	bl	800abb8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be66:	4905      	ldr	r1, [pc, #20]	; (800be7c <CDC_Init_FS+0x24>)
 800be68:	4803      	ldr	r0, [pc, #12]	; (800be78 <CDC_Init_FS+0x20>)
 800be6a:	f7fe febe 	bl	800abea <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800be6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800be70:	4618      	mov	r0, r3
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20001024 	.word	0x20001024
 800be78:	20000978 	.word	0x20000978
 800be7c:	20000c3c 	.word	0x20000c3c

0800be80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800be80:	b480      	push	{r7}
 800be82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800be84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be86:	4618      	mov	r0, r3
 800be88:	46bd      	mov	sp, r7
 800be8a:	bc80      	pop	{r7}
 800be8c:	4770      	bx	lr
	...

0800be90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	6039      	str	r1, [r7, #0]
 800be9a:	71fb      	strb	r3, [r7, #7]
 800be9c:	4613      	mov	r3, r2
 800be9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	2b23      	cmp	r3, #35	; 0x23
 800bea4:	d84a      	bhi.n	800bf3c <CDC_Control_FS+0xac>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <CDC_Control_FS+0x1c>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bf3d 	.word	0x0800bf3d
 800beb0:	0800bf3d 	.word	0x0800bf3d
 800beb4:	0800bf3d 	.word	0x0800bf3d
 800beb8:	0800bf3d 	.word	0x0800bf3d
 800bebc:	0800bf3d 	.word	0x0800bf3d
 800bec0:	0800bf3d 	.word	0x0800bf3d
 800bec4:	0800bf3d 	.word	0x0800bf3d
 800bec8:	0800bf3d 	.word	0x0800bf3d
 800becc:	0800bf3d 	.word	0x0800bf3d
 800bed0:	0800bf3d 	.word	0x0800bf3d
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800bf3d 	.word	0x0800bf3d
 800bedc:	0800bf3d 	.word	0x0800bf3d
 800bee0:	0800bf3d 	.word	0x0800bf3d
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf3d 	.word	0x0800bf3d
 800beec:	0800bf3d 	.word	0x0800bf3d
 800bef0:	0800bf3d 	.word	0x0800bf3d
 800bef4:	0800bf3d 	.word	0x0800bf3d
 800bef8:	0800bf3d 	.word	0x0800bf3d
 800befc:	0800bf3d 	.word	0x0800bf3d
 800bf00:	0800bf3d 	.word	0x0800bf3d
 800bf04:	0800bf3d 	.word	0x0800bf3d
 800bf08:	0800bf3d 	.word	0x0800bf3d
 800bf0c:	0800bf3d 	.word	0x0800bf3d
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	0800bf3d 	.word	0x0800bf3d
 800bf18:	0800bf3d 	.word	0x0800bf3d
 800bf1c:	0800bf3d 	.word	0x0800bf3d
 800bf20:	0800bf3d 	.word	0x0800bf3d
 800bf24:	0800bf3d 	.word	0x0800bf3d
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf3d 	.word	0x0800bf3d
 800bf30:	0800bf3d 	.word	0x0800bf3d
 800bf34:	0800bf3d 	.word	0x0800bf3d
 800bf38:	0800bf3d 	.word	0x0800bf3d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800bf3c:	bf00      	nop
	}

	return (USBD_OK);
 800bf3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bc80      	pop	{r7}
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop

0800bf4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bf56:	6879      	ldr	r1, [r7, #4]
 800bf58:	481c      	ldr	r0, [pc, #112]	; (800bfcc <CDC_Receive_FS+0x80>)
 800bf5a:	f7fe fe46 	bl	800abea <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bf5e:	481b      	ldr	r0, [pc, #108]	; (800bfcc <CDC_Receive_FS+0x80>)
 800bf60:	f7fe fe85 	bl	800ac6e <USBD_CDC_ReceivePacket>
//	}
	/*-------*/

	/* Запись данных в общую глобальную переменную для
	 * хранения пакета данных - usb_rx_data */
	if ( usb_rx_data.is_handled  == false ) {
 800bf64:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <CDC_Receive_FS+0x84>)
 800bf66:	785b      	ldrb	r3, [r3, #1]
 800bf68:	f083 0301 	eor.w	r3, r3, #1
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d015      	beq.n	800bf9e <CDC_Receive_FS+0x52>
	    /* Если данные пакета ещё не обработаны, то
	     * ошибка - прием нового пакета пока не возможен.
	     * Следовательно, отправляем пакет из 5-ти нулей,
	     * как показатель об ошибке. */
	    uint8_t b[] = {0,0,0,0,0};
 800bf72:	4a18      	ldr	r2, [pc, #96]	; (800bfd4 <CDC_Receive_FS+0x88>)
 800bf74:	f107 0308 	add.w	r3, r7, #8
 800bf78:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf7c:	6018      	str	r0, [r3, #0]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	7019      	strb	r1, [r3, #0]
	    CDC_Transmit_FS(b, strlen( (char*)b) );
 800bf82:	f107 0308 	add.w	r3, r7, #8
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f4 f8e2 	bl	8000150 <strlen>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	f107 0308 	add.w	r3, r7, #8
 800bf94:	4611      	mov	r1, r2
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 f820 	bl	800bfdc <CDC_Transmit_FS>
 800bf9c:	e011      	b.n	800bfc2 <CDC_Receive_FS+0x76>
	}
	else {
	    memcpy( usb_rx_data.buff, Buf, *Len );
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	480c      	ldr	r0, [pc, #48]	; (800bfd8 <CDC_Receive_FS+0x8c>)
 800bfa8:	f000 fc1a 	bl	800c7e0 <memcpy>
	    usb_rx_data.len         = *Len;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <CDC_Receive_FS+0x84>)
 800bfb4:	709a      	strb	r2, [r3, #2]
	    usb_rx_data.is_handled  = false;
 800bfb6:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <CDC_Receive_FS+0x84>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	705a      	strb	r2, [r3, #1]
	    usb_rx_data.is_received = true;
 800bfbc:	4b04      	ldr	r3, [pc, #16]	; (800bfd0 <CDC_Receive_FS+0x84>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	701a      	strb	r2, [r3, #0]
	}

	return (USBD_OK);
 800bfc2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	20000978 	.word	0x20000978
 800bfd0:	20000000 	.word	0x20000000
 800bfd4:	0800c954 	.word	0x0800c954
 800bfd8:	20000003 	.word	0x20000003

0800bfdc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800bfec:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <CDC_Transmit_FS+0x48>)
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff2:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 800bffe:	2301      	movs	r3, #1
 800c000:	e00b      	b.n	800c01a <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c002:	887b      	ldrh	r3, [r7, #2]
 800c004:	461a      	mov	r2, r3
 800c006:	6879      	ldr	r1, [r7, #4]
 800c008:	4806      	ldr	r0, [pc, #24]	; (800c024 <CDC_Transmit_FS+0x48>)
 800c00a:	f7fe fdd5 	bl	800abb8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c00e:	4805      	ldr	r0, [pc, #20]	; (800c024 <CDC_Transmit_FS+0x48>)
 800c010:	f7fe fdfe 	bl	800ac10 <USBD_CDC_TransmitPacket>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c018:	7bfb      	ldrb	r3, [r7, #15]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000978 	.word	0x20000978

0800c028 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	4603      	mov	r3, r0
 800c030:	6039      	str	r1, [r7, #0]
 800c032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	2212      	movs	r2, #18
 800c038:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c03a:	4b03      	ldr	r3, [pc, #12]	; (800c048 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	bc80      	pop	{r7}
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	20000198 	.word	0x20000198

0800c04c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	4603      	mov	r3, r0
 800c054:	6039      	str	r1, [r7, #0]
 800c056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2204      	movs	r2, #4
 800c05c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c05e:	4b03      	ldr	r3, [pc, #12]	; (800c06c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	bc80      	pop	{r7}
 800c068:	4770      	bx	lr
 800c06a:	bf00      	nop
 800c06c:	200001ac 	.word	0x200001ac

0800c070 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	6039      	str	r1, [r7, #0]
 800c07a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d105      	bne.n	800c08e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c082:	683a      	ldr	r2, [r7, #0]
 800c084:	4907      	ldr	r1, [pc, #28]	; (800c0a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c086:	4808      	ldr	r0, [pc, #32]	; (800c0a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c088:	f7ff fdd8 	bl	800bc3c <USBD_GetString>
 800c08c:	e004      	b.n	800c098 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	4904      	ldr	r1, [pc, #16]	; (800c0a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c092:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c094:	f7ff fdd2 	bl	800bc3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c098:	4b02      	ldr	r3, [pc, #8]	; (800c0a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000140c 	.word	0x2000140c
 800c0a8:	0800c95c 	.word	0x0800c95c

0800c0ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	6039      	str	r1, [r7, #0]
 800c0b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	4904      	ldr	r1, [pc, #16]	; (800c0cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0bc:	4804      	ldr	r0, [pc, #16]	; (800c0d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0be:	f7ff fdbd 	bl	800bc3c <USBD_GetString>
  return USBD_StrDesc;
 800c0c2:	4b02      	ldr	r3, [pc, #8]	; (800c0cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	2000140c 	.word	0x2000140c
 800c0d0:	0800c974 	.word	0x0800c974

0800c0d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	6039      	str	r1, [r7, #0]
 800c0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	221a      	movs	r2, #26
 800c0e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c0e6:	f000 f843 	bl	800c170 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c0ea:	4b02      	ldr	r3, [pc, #8]	; (800c0f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200001b0 	.word	0x200001b0

0800c0f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	4603      	mov	r3, r0
 800c100:	6039      	str	r1, [r7, #0]
 800c102:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d105      	bne.n	800c116 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	4907      	ldr	r1, [pc, #28]	; (800c12c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c10e:	4808      	ldr	r0, [pc, #32]	; (800c130 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c110:	f7ff fd94 	bl	800bc3c <USBD_GetString>
 800c114:	e004      	b.n	800c120 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c116:	683a      	ldr	r2, [r7, #0]
 800c118:	4904      	ldr	r1, [pc, #16]	; (800c12c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c11a:	4805      	ldr	r0, [pc, #20]	; (800c130 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c11c:	f7ff fd8e 	bl	800bc3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c120:	4b02      	ldr	r3, [pc, #8]	; (800c12c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	2000140c 	.word	0x2000140c
 800c130:	0800c988 	.word	0x0800c988

0800c134 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	4603      	mov	r3, r0
 800c13c:	6039      	str	r1, [r7, #0]
 800c13e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c140:	79fb      	ldrb	r3, [r7, #7]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d105      	bne.n	800c152 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	4907      	ldr	r1, [pc, #28]	; (800c168 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c14a:	4808      	ldr	r0, [pc, #32]	; (800c16c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c14c:	f7ff fd76 	bl	800bc3c <USBD_GetString>
 800c150:	e004      	b.n	800c15c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	4904      	ldr	r1, [pc, #16]	; (800c168 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c156:	4805      	ldr	r0, [pc, #20]	; (800c16c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c158:	f7ff fd70 	bl	800bc3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c15c:	4b02      	ldr	r3, [pc, #8]	; (800c168 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	2000140c 	.word	0x2000140c
 800c16c:	0800c994 	.word	0x0800c994

0800c170 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <Get_SerialNum+0x44>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <Get_SerialNum+0x48>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c182:	4b0e      	ldr	r3, [pc, #56]	; (800c1bc <Get_SerialNum+0x4c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c196:	2208      	movs	r2, #8
 800c198:	4909      	ldr	r1, [pc, #36]	; (800c1c0 <Get_SerialNum+0x50>)
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 f814 	bl	800c1c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	4908      	ldr	r1, [pc, #32]	; (800c1c4 <Get_SerialNum+0x54>)
 800c1a4:	68b8      	ldr	r0, [r7, #8]
 800c1a6:	f000 f80f 	bl	800c1c8 <IntToUnicode>
  }
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	1ffff7e8 	.word	0x1ffff7e8
 800c1b8:	1ffff7ec 	.word	0x1ffff7ec
 800c1bc:	1ffff7f0 	.word	0x1ffff7f0
 800c1c0:	200001b2 	.word	0x200001b2
 800c1c4:	200001c2 	.word	0x200001c2

0800c1c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c1da:	2300      	movs	r3, #0
 800c1dc:	75fb      	strb	r3, [r7, #23]
 800c1de:	e027      	b.n	800c230 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	0f1b      	lsrs	r3, r3, #28
 800c1e4:	2b09      	cmp	r3, #9
 800c1e6:	d80b      	bhi.n	800c200 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	0f1b      	lsrs	r3, r3, #28
 800c1ec:	b2da      	uxtb	r2, r3
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	005b      	lsls	r3, r3, #1
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3230      	adds	r2, #48	; 0x30
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e00a      	b.n	800c216 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	0f1b      	lsrs	r3, r3, #28
 800c204:	b2da      	uxtb	r2, r3
 800c206:	7dfb      	ldrb	r3, [r7, #23]
 800c208:	005b      	lsls	r3, r3, #1
 800c20a:	4619      	mov	r1, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	440b      	add	r3, r1
 800c210:	3237      	adds	r2, #55	; 0x37
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c21c:	7dfb      	ldrb	r3, [r7, #23]
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	3301      	adds	r3, #1
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	4413      	add	r3, r2
 800c226:	2200      	movs	r2, #0
 800c228:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	3301      	adds	r3, #1
 800c22e:	75fb      	strb	r3, [r7, #23]
 800c230:	7dfa      	ldrb	r2, [r7, #23]
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	429a      	cmp	r2, r3
 800c236:	d3d3      	bcc.n	800c1e0 <IntToUnicode+0x18>
  }
}
 800c238:	bf00      	nop
 800c23a:	bf00      	nop
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	bc80      	pop	{r7}
 800c242:	4770      	bx	lr

0800c244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0d      	ldr	r2, [pc, #52]	; (800c288 <HAL_PCD_MspInit+0x44>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d113      	bne.n	800c27e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <HAL_PCD_MspInit+0x48>)
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	4a0c      	ldr	r2, [pc, #48]	; (800c28c <HAL_PCD_MspInit+0x48>)
 800c25c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c260:	61d3      	str	r3, [r2, #28]
 800c262:	4b0a      	ldr	r3, [pc, #40]	; (800c28c <HAL_PCD_MspInit+0x48>)
 800c264:	69db      	ldr	r3, [r3, #28]
 800c266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c26e:	2200      	movs	r2, #0
 800c270:	2100      	movs	r1, #0
 800c272:	2014      	movs	r0, #20
 800c274:	f7f8 f969 	bl	800454a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c278:	2014      	movs	r0, #20
 800c27a:	f7f8 f982 	bl	8004582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c27e:	bf00      	nop
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40005c00 	.word	0x40005c00
 800c28c:	40021000 	.word	0x40021000

0800c290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fe fd97 	bl	800adda <USBD_LL_SetupStage>
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	00db      	lsls	r3, r3, #3
 800c2d2:	440b      	add	r3, r1
 800c2d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f7fe fdc9 	bl	800ae74 <USBD_LL_DataOutStage>
}
 800c2e2:	bf00      	nop
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	440b      	add	r3, r1
 800c30a:	333c      	adds	r3, #60	; 0x3c
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	78fb      	ldrb	r3, [r7, #3]
 800c310:	4619      	mov	r1, r3
 800c312:	f7fe fe20 	bl	800af56 <USBD_LL_DataInStage>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c32c:	4618      	mov	r0, r3
 800c32e:	f7fe ff30 	bl	800b192 <USBD_LL_SOF>
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c342:	2301      	movs	r3, #1
 800c344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	d001      	beq.n	800c352 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c34e:	f7f6 fd4b 	bl	8002de8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c358:	7bfa      	ldrb	r2, [r7, #15]
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fee0 	bl	800b122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe fe99 	bl	800b0a0 <USBD_LL_Reset>
}
 800c36e:	bf00      	nop
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
	...

0800c378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe feda 	bl	800b140 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d005      	beq.n	800c3a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c394:	4b04      	ldr	r3, [pc, #16]	; (800c3a8 <HAL_PCD_SuspendCallback+0x30>)
 800c396:	691b      	ldr	r3, [r3, #16]
 800c398:	4a03      	ldr	r2, [pc, #12]	; (800c3a8 <HAL_PCD_SuspendCallback+0x30>)
 800c39a:	f043 0306 	orr.w	r3, r3, #6
 800c39e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c3a0:	bf00      	nop
 800c3a2:	3708      	adds	r7, #8
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}
 800c3a8:	e000ed00 	.word	0xe000ed00

0800c3ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fe fed4 	bl	800b168 <USBD_LL_Resume>
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c3d0:	4a28      	ldr	r2, [pc, #160]	; (800c474 <USBD_LL_Init+0xac>)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a26      	ldr	r2, [pc, #152]	; (800c474 <USBD_LL_Init+0xac>)
 800c3dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c3e0:	4b24      	ldr	r3, [pc, #144]	; (800c474 <USBD_LL_Init+0xac>)
 800c3e2:	4a25      	ldr	r2, [pc, #148]	; (800c478 <USBD_LL_Init+0xb0>)
 800c3e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c3e6:	4b23      	ldr	r3, [pc, #140]	; (800c474 <USBD_LL_Init+0xac>)
 800c3e8:	2208      	movs	r2, #8
 800c3ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c3ec:	4b21      	ldr	r3, [pc, #132]	; (800c474 <USBD_LL_Init+0xac>)
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c3f2:	4b20      	ldr	r3, [pc, #128]	; (800c474 <USBD_LL_Init+0xac>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c3f8:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <USBD_LL_Init+0xac>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c3fe:	4b1d      	ldr	r3, [pc, #116]	; (800c474 <USBD_LL_Init+0xac>)
 800c400:	2200      	movs	r2, #0
 800c402:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c404:	481b      	ldr	r0, [pc, #108]	; (800c474 <USBD_LL_Init+0xac>)
 800c406:	f7f8 fcf1 	bl	8004dec <HAL_PCD_Init>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c410:	f7f6 fcea 	bl	8002de8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c41a:	2318      	movs	r3, #24
 800c41c:	2200      	movs	r2, #0
 800c41e:	2100      	movs	r1, #0
 800c420:	f7fa f967 	bl	80066f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c42a:	2358      	movs	r3, #88	; 0x58
 800c42c:	2200      	movs	r2, #0
 800c42e:	2180      	movs	r1, #128	; 0x80
 800c430:	f7fa f95f 	bl	80066f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c43a:	23c0      	movs	r3, #192	; 0xc0
 800c43c:	2200      	movs	r2, #0
 800c43e:	2181      	movs	r1, #129	; 0x81
 800c440:	f7fa f957 	bl	80066f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c44a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c44e:	2200      	movs	r2, #0
 800c450:	2101      	movs	r1, #1
 800c452:	f7fa f94e 	bl	80066f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c45c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c460:	2200      	movs	r2, #0
 800c462:	2182      	movs	r1, #130	; 0x82
 800c464:	f7fa f945 	bl	80066f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	2000160c 	.word	0x2000160c
 800c478:	40005c00 	.word	0x40005c00

0800c47c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c492:	4618      	mov	r0, r3
 800c494:	f7f8 fdb5 	bl	8005002 <HAL_PCD_Start>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 f94e 	bl	800c740 <USBD_Get_USB_Status>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	4611      	mov	r1, r2
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	70fb      	strb	r3, [r7, #3]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70bb      	strb	r3, [r7, #2]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c4da:	78bb      	ldrb	r3, [r7, #2]
 800c4dc:	883a      	ldrh	r2, [r7, #0]
 800c4de:	78f9      	ldrb	r1, [r7, #3]
 800c4e0:	f7f8 ff2f 	bl	8005342 <HAL_PCD_EP_Open>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f928 	bl	800c740 <USBD_Get_USB_Status>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c50a:	2300      	movs	r3, #0
 800c50c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c518:	78fa      	ldrb	r2, [r7, #3]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f8 ff76 	bl	800540e <HAL_PCD_EP_Close>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f909 	bl	800c740 <USBD_Get_USB_Status>
 800c52e:	4603      	mov	r3, r0
 800c530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c532:	7bbb      	ldrb	r3, [r7, #14]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c548:	2300      	movs	r3, #0
 800c54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c54c:	2300      	movs	r3, #0
 800c54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c556:	78fa      	ldrb	r2, [r7, #3]
 800c558:	4611      	mov	r1, r2
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f9 f836 	bl	80055cc <HAL_PCD_EP_SetStall>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	4618      	mov	r0, r3
 800c568:	f000 f8ea 	bl	800c740 <USBD_Get_USB_Status>
 800c56c:	4603      	mov	r3, r0
 800c56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c570:	7bbb      	ldrb	r3, [r7, #14]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	460b      	mov	r3, r1
 800c584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c594:	78fa      	ldrb	r2, [r7, #3]
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f7f9 f877 	bl	800568c <HAL_PCD_EP_ClrStall>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f000 f8cb 	bl	800c740 <USBD_Get_USB_Status>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3710      	adds	r7, #16
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c5ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	da0c      	bge.n	800c5ee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5d4:	78fb      	ldrb	r3, [r7, #3]
 800c5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5da:	68f9      	ldr	r1, [r7, #12]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	4613      	mov	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	00db      	lsls	r3, r3, #3
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3302      	adds	r3, #2
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	e00b      	b.n	800c606 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c5ee:	78fb      	ldrb	r3, [r7, #3]
 800c5f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5f4:	68f9      	ldr	r1, [r7, #12]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4413      	add	r3, r2
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	440b      	add	r3, r1
 800c600:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c604:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bc80      	pop	{r7}
 800c60e:	4770      	bx	lr

0800c610 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c62a:	78fa      	ldrb	r2, [r7, #3]
 800c62c:	4611      	mov	r1, r2
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f8 fe62 	bl	80052f8 <HAL_PCD_SetAddress>
 800c634:	4603      	mov	r3, r0
 800c636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f000 f880 	bl	800c740 <USBD_Get_USB_Status>
 800c640:	4603      	mov	r3, r0
 800c642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c644:	7bbb      	ldrb	r3, [r7, #14]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b086      	sub	sp, #24
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	461a      	mov	r2, r3
 800c65a:	460b      	mov	r3, r1
 800c65c:	72fb      	strb	r3, [r7, #11]
 800c65e:	4613      	mov	r3, r2
 800c660:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c670:	893b      	ldrh	r3, [r7, #8]
 800c672:	7af9      	ldrb	r1, [r7, #11]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	f7f8 ff66 	bl	8005546 <HAL_PCD_EP_Transmit>
 800c67a:	4603      	mov	r3, r0
 800c67c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c67e:	7dfb      	ldrb	r3, [r7, #23]
 800c680:	4618      	mov	r0, r3
 800c682:	f000 f85d 	bl	800c740 <USBD_Get_USB_Status>
 800c686:	4603      	mov	r3, r0
 800c688:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c68a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	607a      	str	r2, [r7, #4]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	72fb      	strb	r3, [r7, #11]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c6b6:	893b      	ldrh	r3, [r7, #8]
 800c6b8:	7af9      	ldrb	r1, [r7, #11]
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	f7f8 feef 	bl	800549e <HAL_PCD_EP_Receive>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 f83a 	bl	800c740 <USBD_Get_USB_Status>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6d0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3718      	adds	r7, #24
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b082      	sub	sp, #8
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6ec:	78fa      	ldrb	r2, [r7, #3]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7f8 ff11 	bl	8005518 <HAL_PCD_EP_GetRxCount>
 800c6f6:	4603      	mov	r3, r0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3708      	adds	r7, #8
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c708:	4b02      	ldr	r3, [pc, #8]	; (800c714 <USBD_static_malloc+0x14>)
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	bc80      	pop	{r7}
 800c712:	4770      	bx	lr
 800c714:	20000214 	.word	0x20000214

0800c718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]

}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	bc80      	pop	{r7}
 800c728:	4770      	bx	lr

0800c72a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	460b      	mov	r3, r1
 800c734:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c736:	bf00      	nop
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bc80      	pop	{r7}
 800c73e:	4770      	bx	lr

0800c740 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c74a:	2300      	movs	r3, #0
 800c74c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c74e:	79fb      	ldrb	r3, [r7, #7]
 800c750:	2b03      	cmp	r3, #3
 800c752:	d817      	bhi.n	800c784 <USBD_Get_USB_Status+0x44>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <USBD_Get_USB_Status+0x1c>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c76d 	.word	0x0800c76d
 800c760:	0800c773 	.word	0x0800c773
 800c764:	0800c779 	.word	0x0800c779
 800c768:	0800c77f 	.word	0x0800c77f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c76c:	2300      	movs	r3, #0
 800c76e:	73fb      	strb	r3, [r7, #15]
    break;
 800c770:	e00b      	b.n	800c78a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c772:	2302      	movs	r3, #2
 800c774:	73fb      	strb	r3, [r7, #15]
    break;
 800c776:	e008      	b.n	800c78a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c778:	2301      	movs	r3, #1
 800c77a:	73fb      	strb	r3, [r7, #15]
    break;
 800c77c:	e005      	b.n	800c78a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c77e:	2302      	movs	r3, #2
 800c780:	73fb      	strb	r3, [r7, #15]
    break;
 800c782:	e002      	b.n	800c78a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c784:	2302      	movs	r3, #2
 800c786:	73fb      	strb	r3, [r7, #15]
    break;
 800c788:	bf00      	nop
  }
  return usb_status;
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop

0800c798 <__libc_init_array>:
 800c798:	b570      	push	{r4, r5, r6, lr}
 800c79a:	2600      	movs	r6, #0
 800c79c:	4d0c      	ldr	r5, [pc, #48]	; (800c7d0 <__libc_init_array+0x38>)
 800c79e:	4c0d      	ldr	r4, [pc, #52]	; (800c7d4 <__libc_init_array+0x3c>)
 800c7a0:	1b64      	subs	r4, r4, r5
 800c7a2:	10a4      	asrs	r4, r4, #2
 800c7a4:	42a6      	cmp	r6, r4
 800c7a6:	d109      	bne.n	800c7bc <__libc_init_array+0x24>
 800c7a8:	f000 f8b2 	bl	800c910 <_init>
 800c7ac:	2600      	movs	r6, #0
 800c7ae:	4d0a      	ldr	r5, [pc, #40]	; (800c7d8 <__libc_init_array+0x40>)
 800c7b0:	4c0a      	ldr	r4, [pc, #40]	; (800c7dc <__libc_init_array+0x44>)
 800c7b2:	1b64      	subs	r4, r4, r5
 800c7b4:	10a4      	asrs	r4, r4, #2
 800c7b6:	42a6      	cmp	r6, r4
 800c7b8:	d105      	bne.n	800c7c6 <__libc_init_array+0x2e>
 800c7ba:	bd70      	pop	{r4, r5, r6, pc}
 800c7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c0:	4798      	blx	r3
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	e7ee      	b.n	800c7a4 <__libc_init_array+0xc>
 800c7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ca:	4798      	blx	r3
 800c7cc:	3601      	adds	r6, #1
 800c7ce:	e7f2      	b.n	800c7b6 <__libc_init_array+0x1e>
 800c7d0:	0800c9bc 	.word	0x0800c9bc
 800c7d4:	0800c9bc 	.word	0x0800c9bc
 800c7d8:	0800c9bc 	.word	0x0800c9bc
 800c7dc:	0800c9c0 	.word	0x0800c9c0

0800c7e0 <memcpy>:
 800c7e0:	440a      	add	r2, r1
 800c7e2:	4291      	cmp	r1, r2
 800c7e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7e8:	d100      	bne.n	800c7ec <memcpy+0xc>
 800c7ea:	4770      	bx	lr
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f2:	4291      	cmp	r1, r2
 800c7f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f8:	d1f9      	bne.n	800c7ee <memcpy+0xe>
 800c7fa:	bd10      	pop	{r4, pc}

0800c7fc <memset>:
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	4402      	add	r2, r0
 800c800:	4293      	cmp	r3, r2
 800c802:	d100      	bne.n	800c806 <memset+0xa>
 800c804:	4770      	bx	lr
 800c806:	f803 1b01 	strb.w	r1, [r3], #1
 800c80a:	e7f9      	b.n	800c800 <memset+0x4>
 800c80c:	0000      	movs	r0, r0
	...

0800c810 <floor>:
 800c810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c814:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c818:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c81c:	2e13      	cmp	r6, #19
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4607      	mov	r7, r0
 800c824:	460c      	mov	r4, r1
 800c826:	4605      	mov	r5, r0
 800c828:	dc34      	bgt.n	800c894 <floor+0x84>
 800c82a:	2e00      	cmp	r6, #0
 800c82c:	da15      	bge.n	800c85a <floor+0x4a>
 800c82e:	a334      	add	r3, pc, #208	; (adr r3, 800c900 <floor+0xf0>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fc9a 	bl	800016c <__adddf3>
 800c838:	2200      	movs	r2, #0
 800c83a:	2300      	movs	r3, #0
 800c83c:	f7f3 feca 	bl	80005d4 <__aeabi_dcmpgt>
 800c840:	b140      	cbz	r0, 800c854 <floor+0x44>
 800c842:	2c00      	cmp	r4, #0
 800c844:	da59      	bge.n	800c8fa <floor+0xea>
 800c846:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c84a:	ea57 0503 	orrs.w	r5, r7, r3
 800c84e:	d001      	beq.n	800c854 <floor+0x44>
 800c850:	2500      	movs	r5, #0
 800c852:	4c2d      	ldr	r4, [pc, #180]	; (800c908 <floor+0xf8>)
 800c854:	4623      	mov	r3, r4
 800c856:	462f      	mov	r7, r5
 800c858:	e025      	b.n	800c8a6 <floor+0x96>
 800c85a:	4a2c      	ldr	r2, [pc, #176]	; (800c90c <floor+0xfc>)
 800c85c:	fa42 f806 	asr.w	r8, r2, r6
 800c860:	ea01 0208 	and.w	r2, r1, r8
 800c864:	4302      	orrs	r2, r0
 800c866:	d01e      	beq.n	800c8a6 <floor+0x96>
 800c868:	a325      	add	r3, pc, #148	; (adr r3, 800c900 <floor+0xf0>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f3 fc7d 	bl	800016c <__adddf3>
 800c872:	2200      	movs	r2, #0
 800c874:	2300      	movs	r3, #0
 800c876:	f7f3 fead 	bl	80005d4 <__aeabi_dcmpgt>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d0ea      	beq.n	800c854 <floor+0x44>
 800c87e:	2c00      	cmp	r4, #0
 800c880:	bfbe      	ittt	lt
 800c882:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c886:	fa43 f606 	asrlt.w	r6, r3, r6
 800c88a:	19a4      	addlt	r4, r4, r6
 800c88c:	2500      	movs	r5, #0
 800c88e:	ea24 0408 	bic.w	r4, r4, r8
 800c892:	e7df      	b.n	800c854 <floor+0x44>
 800c894:	2e33      	cmp	r6, #51	; 0x33
 800c896:	dd0a      	ble.n	800c8ae <floor+0x9e>
 800c898:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c89c:	d103      	bne.n	800c8a6 <floor+0x96>
 800c89e:	f7f3 fc65 	bl	800016c <__adddf3>
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c8b6:	fa22 f808 	lsr.w	r8, r2, r8
 800c8ba:	ea18 0f00 	tst.w	r8, r0
 800c8be:	d0f2      	beq.n	800c8a6 <floor+0x96>
 800c8c0:	a30f      	add	r3, pc, #60	; (adr r3, 800c900 <floor+0xf0>)
 800c8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c6:	f7f3 fc51 	bl	800016c <__adddf3>
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f7f3 fe81 	bl	80005d4 <__aeabi_dcmpgt>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d0be      	beq.n	800c854 <floor+0x44>
 800c8d6:	2c00      	cmp	r4, #0
 800c8d8:	da02      	bge.n	800c8e0 <floor+0xd0>
 800c8da:	2e14      	cmp	r6, #20
 800c8dc:	d103      	bne.n	800c8e6 <floor+0xd6>
 800c8de:	3401      	adds	r4, #1
 800c8e0:	ea25 0508 	bic.w	r5, r5, r8
 800c8e4:	e7b6      	b.n	800c854 <floor+0x44>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c8ec:	fa03 f606 	lsl.w	r6, r3, r6
 800c8f0:	4435      	add	r5, r6
 800c8f2:	42bd      	cmp	r5, r7
 800c8f4:	bf38      	it	cc
 800c8f6:	18e4      	addcc	r4, r4, r3
 800c8f8:	e7f2      	b.n	800c8e0 <floor+0xd0>
 800c8fa:	2500      	movs	r5, #0
 800c8fc:	462c      	mov	r4, r5
 800c8fe:	e7a9      	b.n	800c854 <floor+0x44>
 800c900:	8800759c 	.word	0x8800759c
 800c904:	7e37e43c 	.word	0x7e37e43c
 800c908:	bff00000 	.word	0xbff00000
 800c90c:	000fffff 	.word	0x000fffff

0800c910 <_init>:
 800c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c912:	bf00      	nop
 800c914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c916:	bc08      	pop	{r3}
 800c918:	469e      	mov	lr, r3
 800c91a:	4770      	bx	lr

0800c91c <_fini>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr
