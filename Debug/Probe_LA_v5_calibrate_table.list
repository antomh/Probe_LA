
Probe_LA_v5_calibrate_table.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0d4  0800b0d4  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0d4  0800b0d4  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0d4  0800b0d4  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0d4  0800b0d4  0001b0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0d8  0800b0d8  0001b0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800b0dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  20000228  0800b300  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001968  0800b300  00021968  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235fe  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005346  00000000  00000000  0004384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00048b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0004a288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec3b  00000000  00000000  0004b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e218  00000000  00000000  0006a36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098291  00000000  00000000  00088583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  00120868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000228 	.word	0x20000228
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af70 	.word	0x0800af70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000022c 	.word	0x2000022c
 8000148:	0800af70 	.word	0x0800af70

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ToggleLDAC>:
// Подключение заголовочного файла
#include <DAC_AD5322.h>

//--------------------------------------------------------------------------
// Необходим для загрузки значений в ЦАП
void ToggleLDAC() {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4804      	ldr	r0, [pc, #16]	; (8000178 <ToggleLDAC+0x1c>)
 8000166:	f002 fca4 	bl	8002ab2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD5312_LDAC_GPIO_Port, AD5312_LDAC_Pin, GPIO_PIN_SET);
 800016a:	2201      	movs	r2, #1
 800016c:	2102      	movs	r1, #2
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <ToggleLDAC+0x1c>)
 8000170:	f002 fc9f 	bl	8002ab2 <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010800 	.word	0x40010800

0800017c <SendSPI>:
//--------------------------------------------------------------------------
void SendSPI(SPI_HandleTypeDef *pSPI,uint16_t out){
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]

  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <SendSPI+0x34>)
 800018e:	f002 fc90 	bl	8002ab2 <HAL_GPIO_WritePin>

  	// Передача значений в цап
  	//out	= 0b0100000111111111;
  	HAL_SPI_Transmit(pSPI, (uint8_t*)(&out), 1, 1);
 8000192:	1cb9      	adds	r1, r7, #2
 8000194:	2301      	movs	r3, #1
 8000196:	2201      	movs	r2, #1
 8000198:	6878      	ldr	r0, [r7, #4]
 800019a:	f004 fea3 	bl	8004ee4 <HAL_SPI_Transmit>

  	// запепрет передачи CS
  	HAL_GPIO_WritePin(AD5312_SYNC_GPIO_Port, AD5312_SYNC_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2110      	movs	r1, #16
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <SendSPI+0x34>)
 80001a4:	f002 fc85 	bl	8002ab2 <HAL_GPIO_WritePin>

}
 80001a8:	bf00      	nop
 80001aa:	3708      	adds	r7, #8
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	40010800 	.word	0x40010800

080001b4 <DAC_AD5322_Ch1Ch2>:
  	SendSPI(pSPI,out);
  	SendSPI(pSPI,out);
  	ToggleLDAC();
}
//--------------------------------------------------------------------------
void DAC_AD5322_Ch1Ch2(SPI_HandleTypeDef *pSPI, uint16_t data_ch1, uint16_t data_ch2) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	807b      	strh	r3, [r7, #2]
 80001c0:	4613      	mov	r3, r2
 80001c2:	803b      	strh	r3, [r7, #0]

	if (data_ch1 > 0x0FFF)	data_ch1	= 0x0FFF;
 80001c4:	887b      	ldrh	r3, [r7, #2]
 80001c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001ca:	d302      	bcc.n	80001d2 <DAC_AD5322_Ch1Ch2+0x1e>
 80001cc:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001d0:	807b      	strh	r3, [r7, #2]
	if (data_ch2 > 0x0FFF)	data_ch2	= 0x0FFF;
 80001d2:	883b      	ldrh	r3, [r7, #0]
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d302      	bcc.n	80001e0 <DAC_AD5322_Ch1Ch2+0x2c>
 80001da:	f640 73ff 	movw	r3, #4095	; 0xfff
 80001de:	803b      	strh	r3, [r7, #0]

  	uint16_t chan 		= 0;	// bit 15: 0 для канала A, 1 для канала B.
 80001e0:	2300      	movs	r3, #0
 80001e2:	82fb      	strh	r3, [r7, #22]
  	uint16_t bufferVref = 1;	// bit 14: усилитель VREF?
 80001e4:	2301      	movs	r3, #1
 80001e6:	82bb      	strh	r3, [r7, #20]
  	uint16_t PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 80001e8:	2300      	movs	r3, #0
 80001ea:	827b      	strh	r3, [r7, #18]
  	uint16_t PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 80001ec:	2300      	movs	r3, #0
 80001ee:	823b      	strh	r3, [r7, #16]
  	uint16_t out, tv;

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 80001f0:	8afb      	ldrh	r3, [r7, #22]
 80001f2:	03db      	lsls	r3, r3, #15
 80001f4:	b21a      	sxth	r2, r3
 80001f6:	8abb      	ldrh	r3, [r7, #20]
 80001f8:	039b      	lsls	r3, r3, #14
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	4313      	orrs	r3, r2
 80001fe:	b21a      	sxth	r2, r3
 8000200:	8a7b      	ldrh	r3, [r7, #18]
 8000202:	035b      	lsls	r3, r3, #13
 8000204:	b21b      	sxth	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b21a      	sxth	r2, r3
 800020a:	8a3b      	ldrh	r3, [r7, #16]
 800020c:	031b      	lsls	r3, r3, #12
 800020e:	b21b      	sxth	r3, r3
 8000210:	4313      	orrs	r3, r2
 8000212:	b21b      	sxth	r3, r3
 8000214:	81fb      	strh	r3, [r7, #14]
	out = (tv & 0xF000) | (data_ch1 & 0x0FFF);
 8000216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800021a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800021e:	f023 030f 	bic.w	r3, r3, #15
 8000222:	b21a      	sxth	r2, r3
 8000224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800022c:	b21b      	sxth	r3, r3
 800022e:	4313      	orrs	r3, r2
 8000230:	b21b      	sxth	r3, r3
 8000232:	81bb      	strh	r3, [r7, #12]

  	SendSPI(pSPI,out);
 8000234:	89bb      	ldrh	r3, [r7, #12]
 8000236:	4619      	mov	r1, r3
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f7ff ff9f 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 800023e:	89bb      	ldrh	r3, [r7, #12]
 8000240:	4619      	mov	r1, r3
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ff9a 	bl	800017c <SendSPI>
  	//--------------------------------------------------------------------------
  	chan 		= 1;	// bit 15: 0 для канала A, 1 для канала B.
 8000248:	2301      	movs	r3, #1
 800024a:	82fb      	strh	r3, [r7, #22]
  	bufferVref 	= 1;	// bit 14: усилитель VREF?
 800024c:	2301      	movs	r3, #1
 800024e:	82bb      	strh	r3, [r7, #20]
  	PD1_Mode 	= 0;	// bit 13: PD1/PD0 Operating Modes   0  Normal Operation
 8000250:	2300      	movs	r3, #0
 8000252:	827b      	strh	r3, [r7, #18]
  	PD0_Mode 	= 0;	// bit 12: PD1/PD0 Operating Modes    0  Normal Operation
 8000254:	2300      	movs	r3, #0
 8000256:	823b      	strh	r3, [r7, #16]

  	tv	= (chan << 15) | (bufferVref << 14) | (PD1_Mode << 13) | (PD0_Mode << 12);
 8000258:	8afb      	ldrh	r3, [r7, #22]
 800025a:	03db      	lsls	r3, r3, #15
 800025c:	b21a      	sxth	r2, r3
 800025e:	8abb      	ldrh	r3, [r7, #20]
 8000260:	039b      	lsls	r3, r3, #14
 8000262:	b21b      	sxth	r3, r3
 8000264:	4313      	orrs	r3, r2
 8000266:	b21a      	sxth	r2, r3
 8000268:	8a7b      	ldrh	r3, [r7, #18]
 800026a:	035b      	lsls	r3, r3, #13
 800026c:	b21b      	sxth	r3, r3
 800026e:	4313      	orrs	r3, r2
 8000270:	b21a      	sxth	r2, r3
 8000272:	8a3b      	ldrh	r3, [r7, #16]
 8000274:	031b      	lsls	r3, r3, #12
 8000276:	b21b      	sxth	r3, r3
 8000278:	4313      	orrs	r3, r2
 800027a:	b21b      	sxth	r3, r3
 800027c:	81fb      	strh	r3, [r7, #14]
  	out = (tv & 0xF000) | (data_ch2 & 0x0FFF);
 800027e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000282:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000286:	f023 030f 	bic.w	r3, r3, #15
 800028a:	b21a      	sxth	r2, r3
 800028c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000294:	b21b      	sxth	r3, r3
 8000296:	4313      	orrs	r3, r2
 8000298:	b21b      	sxth	r3, r3
 800029a:	81bb      	strh	r3, [r7, #12]
  	SendSPI(pSPI,out);
 800029c:	89bb      	ldrh	r3, [r7, #12]
 800029e:	4619      	mov	r1, r3
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff6b 	bl	800017c <SendSPI>
  	SendSPI(pSPI,out);
 80002a6:	89bb      	ldrh	r3, [r7, #12]
 80002a8:	4619      	mov	r1, r3
 80002aa:	6878      	ldr	r0, [r7, #4]
 80002ac:	f7ff ff66 	bl	800017c <SendSPI>
  	ToggleLDAC();
 80002b0:	f7ff ff54 	bl	800015c <ToggleLDAC>
}
 80002b4:	bf00      	nop
 80002b6:	3718      	adds	r7, #24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <btn_run_get_state>:

/*
 * @brief   Get run button state
 * @retval  One of three state : not pressed(0x00), short press(0x01), long press(0x02)
 */
uint8_t btn_run_get_state(void) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_12.was_short_pressed == 1 ) {
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <btn_run_get_state+0x38>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d105      	bne.n	80002da <btn_run_get_state+0x1e>
        state = BTN_SHORT_PRESS;
 80002ce:	2301      	movs	r3, #1
 80002d0:	71fb      	strb	r3, [r7, #7]
        btn_pin_12.was_short_pressed = 0;
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <btn_run_get_state+0x38>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e005      	b.n	80002e6 <btn_run_get_state+0x2a>
    }
    else if ( btn_pin_12.is_long_press == 1 ) {
 80002da:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <btn_run_get_state+0x38>)
 80002dc:	785b      	ldrb	r3, [r3, #1]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d101      	bne.n	80002e6 <btn_run_get_state+0x2a>
        state = BTN_LONG_PRESS;
 80002e2:	2302      	movs	r3, #2
 80002e4:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000248 	.word	0x20000248

080002f8 <btn_up_get_state>:

/*
 * @brief   Get up button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_up_get_state(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_13.was_short_pressed == 1 ) {
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <btn_up_get_state+0x30>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d102      	bne.n	8000310 <btn_up_get_state+0x18>
        state = BTN_SHORT_PRESS;
 800030a:	2301      	movs	r3, #1
 800030c:	71fb      	strb	r3, [r7, #7]
 800030e:	e005      	b.n	800031c <btn_up_get_state+0x24>
    }
    else if ( btn_pin_13.is_long_press == 1 ) {
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <btn_up_get_state+0x30>)
 8000312:	785b      	ldrb	r3, [r3, #1]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <btn_up_get_state+0x24>
        state = BTN_LONG_PRESS;
 8000318:	2302      	movs	r3, #2
 800031a:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 800031c:	79fb      	ldrb	r3, [r7, #7]
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000250 	.word	0x20000250

0800032c <btn_down_get_state>:

/*
 * @brief   Get down button state
 * @retval  One of three state : not pressed, short press, long press
 */
uint8_t btn_down_get_state(void) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
    uint8_t state = BTN_NOT_PRESSED;
 8000332:	2300      	movs	r3, #0
 8000334:	71fb      	strb	r3, [r7, #7]

    if ( btn_pin_14.was_short_pressed == 1 ) {
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <btn_down_get_state+0x30>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b01      	cmp	r3, #1
 800033c:	d102      	bne.n	8000344 <btn_down_get_state+0x18>
        state = BTN_SHORT_PRESS;
 800033e:	2301      	movs	r3, #1
 8000340:	71fb      	strb	r3, [r7, #7]
 8000342:	e005      	b.n	8000350 <btn_down_get_state+0x24>
    }
    else if ( btn_pin_14.is_long_press == 1 ) {
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <btn_down_get_state+0x30>)
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d101      	bne.n	8000350 <btn_down_get_state+0x24>
        state = BTN_LONG_PRESS;
 800034c:	2302      	movs	r3, #2
 800034e:	71fb      	strb	r3, [r7, #7]
    }

    return state;
 8000350:	79fb      	ldrb	r3, [r7, #7]
}
 8000352:	4618      	mov	r0, r3
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000258 	.word	0x20000258

08000360 <HAL_GPIO_EXTI_Callback>:

/*
 * @brief   GPIO EXTI Callback for buttons
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
    switch (GPIO_Pin) {
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000370:	d058      	beq.n	8000424 <HAL_GPIO_EXTI_Callback+0xc4>
 8000372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000376:	f300 8081 	bgt.w	800047c <HAL_GPIO_EXTI_Callback+0x11c>
 800037a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800037e:	d003      	beq.n	8000388 <HAL_GPIO_EXTI_Callback+0x28>
 8000380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000384:	d027      	beq.n	80003d6 <HAL_GPIO_EXTI_Callback+0x76>
                        btn_pin_13.is_long_press = 0;
                    }
                }
                break;
    };
}
 8000386:	e079      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
            if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET ) {
 8000388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800038c:	483d      	ldr	r0, [pc, #244]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 800038e:	f002 fb79 	bl	8002a84 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d103      	bne.n	80003a0 <HAL_GPIO_EXTI_Callback+0x40>
                btn_pin_12.is_count_started = 1;
 8000398:	4b3b      	ldr	r3, [pc, #236]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 800039a:	2201      	movs	r2, #1
 800039c:	709a      	strb	r2, [r3, #2]
            break;
 800039e:	e068      	b.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                if ( btn_pin_12.counter > 40 ||
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003a2:	889b      	ldrh	r3, [r3, #4]
 80003a4:	2b28      	cmp	r3, #40	; 0x28
 80003a6:	d804      	bhi.n	80003b2 <HAL_GPIO_EXTI_Callback+0x52>
                     btn_pin_12.counter < 800 ) {
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003aa:	889b      	ldrh	r3, [r3, #4]
                if ( btn_pin_12.counter > 40 ||
 80003ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003b0:	d209      	bcs.n	80003c6 <HAL_GPIO_EXTI_Callback+0x66>
                    btn_pin_12.was_short_pressed = 1;
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
                    btn_pin_12.counter    = 0;
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	809a      	strh	r2, [r3, #4]
                    btn_pin_12.is_count_started = 0;
 80003be:	4b32      	ldr	r3, [pc, #200]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	709a      	strb	r2, [r3, #2]
                    break;
 80003c4:	e05a      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                if ( btn_pin_12.is_long_press == 1 ) {
 80003c6:	4b30      	ldr	r3, [pc, #192]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003c8:	785b      	ldrb	r3, [r3, #1]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d151      	bne.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                    btn_pin_12.is_long_press = 0;
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <HAL_GPIO_EXTI_Callback+0x128>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	705a      	strb	r2, [r3, #1]
            break;
 80003d4:	e04d      	b.n	8000472 <HAL_GPIO_EXTI_Callback+0x112>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET ) {
 80003d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003da:	482a      	ldr	r0, [pc, #168]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 80003dc:	f002 fb52 	bl	8002a84 <HAL_GPIO_ReadPin>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d103      	bne.n	80003ee <HAL_GPIO_EXTI_Callback+0x8e>
                    btn_pin_13.is_count_started = 1;
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	709a      	strb	r2, [r3, #2]
                break;
 80003ec:	e043      	b.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                    if ( btn_pin_13.counter > 40 ||
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003f0:	889b      	ldrh	r3, [r3, #4]
 80003f2:	2b28      	cmp	r3, #40	; 0x28
 80003f4:	d804      	bhi.n	8000400 <HAL_GPIO_EXTI_Callback+0xa0>
                         btn_pin_13.counter < 800 ) {
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 80003f8:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_13.counter > 40 ||
 80003fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003fe:	d209      	bcs.n	8000414 <HAL_GPIO_EXTI_Callback+0xb4>
                        btn_pin_13.was_short_pressed = 1;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
                        btn_pin_13.counter    = 0;
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000408:	2200      	movs	r2, #0
 800040a:	809a      	strh	r2, [r3, #4]
                        btn_pin_13.is_count_started = 0;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800040e:	2200      	movs	r2, #0
 8000410:	709a      	strb	r2, [r3, #2]
                        break;
 8000412:	e033      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d12c      	bne.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                        btn_pin_13.is_long_press = 0;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800041e:	2200      	movs	r2, #0
 8000420:	705a      	strb	r2, [r3, #1]
                break;
 8000422:	e028      	b.n	8000476 <HAL_GPIO_EXTI_Callback+0x116>
                if ( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == GPIO_PIN_RESET ) {
 8000424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000428:	4816      	ldr	r0, [pc, #88]	; (8000484 <HAL_GPIO_EXTI_Callback+0x124>)
 800042a:	f002 fb2b 	bl	8002a84 <HAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d103      	bne.n	800043c <HAL_GPIO_EXTI_Callback+0xdc>
                    btn_pin_14.is_count_started = 1;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000436:	2201      	movs	r2, #1
 8000438:	709a      	strb	r2, [r3, #2]
                break;
 800043a:	e01e      	b.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
                    if ( btn_pin_14.counter > 40 ||
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	2b28      	cmp	r3, #40	; 0x28
 8000442:	d804      	bhi.n	800044e <HAL_GPIO_EXTI_Callback+0xee>
                         btn_pin_14.counter < 800 ) {
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000446:	889b      	ldrh	r3, [r3, #4]
                    if ( btn_pin_14.counter > 40 ||
 8000448:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800044c:	d209      	bcs.n	8000462 <HAL_GPIO_EXTI_Callback+0x102>
                        btn_pin_13.was_short_pressed = 1;
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
                        btn_pin_14.counter    = 0;
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 8000456:	2200      	movs	r2, #0
 8000458:	809a      	strh	r2, [r3, #4]
                        btn_pin_14.is_count_started = 0;
 800045a:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <HAL_GPIO_EXTI_Callback+0x130>)
 800045c:	2200      	movs	r2, #0
 800045e:	709a      	strb	r2, [r3, #2]
                        break;
 8000460:	e00c      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                    if ( btn_pin_13.is_long_press == 1 ) {
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d107      	bne.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
                        btn_pin_13.is_long_press = 0;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_GPIO_EXTI_Callback+0x12c>)
 800046c:	2200      	movs	r2, #0
 800046e:	705a      	strb	r2, [r3, #1]
                break;
 8000470:	e003      	b.n	800047a <HAL_GPIO_EXTI_Callback+0x11a>
            break;
 8000472:	bf00      	nop
 8000474:	e002      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 8000476:	bf00      	nop
 8000478:	e000      	b.n	800047c <HAL_GPIO_EXTI_Callback+0x11c>
                break;
 800047a:	bf00      	nop
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010c00 	.word	0x40010c00
 8000488:	20000248 	.word	0x20000248
 800048c:	20000250 	.word	0x20000250
 8000490:	20000258 	.word	0x20000258

08000494 <crc_read_from_flash>:
/*
 * @brief   Read calibration table CRC from flash memory
 * @param   Output variable for CRC
 */
void crc_read_from_flash(uint32_t *crc)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800049a:	af00      	add	r7, sp, #0
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	6018      	str	r0, [r3, #0]
    struct FLASH_Sector s;
    memcpy( &s, (uint32_t*)FLASH_TABLE_START_ADDR, sizeof(struct FLASH_Sector) );
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	4a09      	ldr	r2, [pc, #36]	; (80004cc <crc_read_from_flash+0x38>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	4611      	mov	r1, r2
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	461a      	mov	r2, r3
 80004b0:	f009 fde8 	bl	800a084 <memcpy>
    *crc = s.CheckSum;
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	601a      	str	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	0801fc00 	.word	0x0801fc00

080004d0 <flash_is_calibTable_null>:
/*
 * @brief   Checks is there any calibration values in flash memory
 * @retval  Status (0x01) or (0x00) if there is table or no
 */
uint8_t flash_is_calibTable_null(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 80004d6:	af00      	add	r7, sp, #0
    Table_t t;
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4a0c      	ldr	r2, [pc, #48]	; (800050c <flash_is_calibTable_null+0x3c>)
 80004dc:	601a      	str	r2, [r3, #0]

    /* Копируем значения из флеш-памяти во временную переменную для
     * того, чтобы проверить значение поля MagicNum. Копируем 50 байт
     * с запасом, вдруг если в структуре Table_t изменятся какие-либо
     * поля и адрес поля MagicNum в флеш-памяти будет другой. */
    memcpy( &t, (uint32_t*)addr, 50 );
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4619      	mov	r1, r3
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	2232      	movs	r2, #50	; 0x32
 80004ea:	4618      	mov	r0, r3
 80004ec:	f009 fdca 	bl	800a084 <memcpy>

    if ( t.MagicNum == MAGIC_KEY ) {
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <flash_is_calibTable_null+0x40>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d101      	bne.n	8000500 <flash_is_calibTable_null+0x30>
        return 0x01;
 80004fc:	2301      	movs	r3, #1
 80004fe:	e000      	b.n	8000502 <flash_is_calibTable_null+0x32>
    }

    return 0x00;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	0801fc00 	.word	0x0801fc00
 8000510:	48151623 	.word	0x48151623

08000514 <flash_write_calibTable>:
/*
 * @brief   Write calibration table into flash memory
 * @retval  HAL Status
 */
HAL_StatusTypeDef flash_write_calibTable(union NVRAM *ram)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
    /* Create some variables */
    volatile uint32_t   addr    = FLASH_TABLE_START_ADDR;
 800051c:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <flash_write_calibTable+0x134>)
 800051e:	61fb      	str	r3, [r7, #28]
    uint32_t            err     = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    uint32_t            index   = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t             status  = HAL_OK;
 8000528:	2300      	movs	r3, #0
 800052a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Compare flash and ram content */
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 800052e:	e010      	b.n	8000552 <flash_write_calibTable+0x3e>
        if ( ram->data32[index] != *(uint32_t*)addr ) {
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000534:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d002      	beq.n	8000546 <flash_write_calibTable+0x32>
            ++err;
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	3301      	adds	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
        }
        index += 1;
 8000546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000548:	3301      	adds	r3, #1
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
        addr += 4;
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	3304      	adds	r3, #4
 8000550:	61fb      	str	r3, [r7, #28]
    while ( addr < FLASH_TABLE_STOP_ADDR ) {
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	4a3d      	ldr	r2, [pc, #244]	; (800064c <flash_write_calibTable+0x138>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d9ea      	bls.n	8000530 <flash_write_calibTable+0x1c>
    }

    /* If there are differencies -> write new data in flash */
    if (err > 0) {
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d06d      	beq.n	800063c <flash_write_calibTable+0x128>
        /* Unlock flash */
        if ( HAL_FLASH_Unlock() != HAL_OK ) {
 8000560:	f001 ff7c 	bl	800245c <HAL_FLASH_Unlock>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d005      	beq.n	8000576 <flash_write_calibTable+0x62>
            status = HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 8000570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000574:	e064      	b.n	8000640 <flash_write_calibTable+0x12c>
        }

        /* Erase flash */
        FLASH_EraseInitTypeDef EraseInitStruct = {
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	4b30      	ldr	r3, [pc, #192]	; (8000648 <flash_write_calibTable+0x134>)
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
                .TypeErase      = FLASH_TYPEERASE_PAGES,
                .PageAddress    = FLASH_TABLE_START_ADDR,
                .NbPages        = 1
        };
        if ( HAL_FLASHEx_Erase(&EraseInitStruct, &err) != HAL_OK ) {
 800058c:	f107 0218 	add.w	r2, r7, #24
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	4611      	mov	r1, r2
 8000596:	4618      	mov	r0, r3
 8000598:	f002 f848 	bl	800262c <HAL_FLASHEx_Erase>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d005      	beq.n	80005ae <flash_write_calibTable+0x9a>
            status = HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 80005a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005ac:	e048      	b.n	8000640 <flash_write_calibTable+0x12c>
        }
        if ( err != 0xFFFFFFFF ) {
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005b4:	d005      	beq.n	80005c2 <flash_write_calibTable+0xae>
            status = HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            return status;
 80005bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005c0:	e03e      	b.n	8000640 <flash_write_calibTable+0x12c>
        }

        /* Reset variables */
        addr    = FLASH_TABLE_START_ADDR;
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <flash_write_calibTable+0x134>)
 80005c4:	61fb      	str	r3, [r7, #28]
        err     = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
        index   = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
        /* Increase number of rewritings */
        ram->sector.NWrite += 1;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8
        /* Calculate calibration table checksum */
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
                                                  (uint32_t*)&(ram->calibration_table),
 80005dc:	687b      	ldr	r3, [r7, #4]
        ram->sector.CheckSum = HAL_CRC_Calculate( &hcrc,
 80005de:	22fe      	movs	r2, #254	; 0xfe
 80005e0:	4619      	mov	r1, r3
 80005e2:	481b      	ldr	r0, [pc, #108]	; (8000650 <flash_write_calibTable+0x13c>)
 80005e4:	f001 fe97 	bl	8002316 <HAL_CRC_Calculate>
 80005e8:	4602      	mov	r2, r0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
                                                  (sizeof(ram->calibration_table)/4) );
        /* Write flash */
        while (addr < FLASH_TABLE_STOP_ADDR) {
 80005f0:	e01e      	b.n	8000630 <flash_write_calibTable+0x11c>
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, ram->data32[index]) != HAL_OK) {
 80005f2:	69f9      	ldr	r1, [r7, #28]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005fc:	461a      	mov	r2, r3
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	2002      	movs	r0, #2
 8000604:	f001 feba 	bl	800237c <HAL_FLASH_Program>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <flash_write_calibTable+0x100>
                err++;
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	3301      	adds	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
            }
            index += 1;
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	3301      	adds	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
            addr += 4;
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	3304      	adds	r3, #4
 800061e:	61fb      	str	r3, [r7, #28]
            /* Wait until flash is busy */
            while ( (FLASH->SR & FLASH_SR_BSY) != 0 ) continue;
 8000620:	e000      	b.n	8000624 <flash_write_calibTable+0x110>
 8000622:	bf00      	nop
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <flash_write_calibTable+0x140>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f8      	bne.n	8000622 <flash_write_calibTable+0x10e>
        while (addr < FLASH_TABLE_STOP_ADDR) {
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	4a06      	ldr	r2, [pc, #24]	; (800064c <flash_write_calibTable+0x138>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d9dc      	bls.n	80005f2 <flash_write_calibTable+0xde>
        }
        /* Lock flash */
        HAL_FLASH_Lock();
 8000638:	f001 ff36 	bl	80024a8 <HAL_FLASH_Lock>
    }
    return status;
 800063c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000640:	4618      	mov	r0, r3
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	0801fc00 	.word	0x0801fc00
 800064c:	0801ffff 	.word	0x0801ffff
 8000650:	200008dc 	.word	0x200008dc
 8000654:	40022000 	.word	0x40022000

08000658 <flash_read_sector>:
/*---------------------------------------------------------------------------*/
/*
 * @brief   Read calibration table from flash memory and write it to some variable
 */
void flash_read_sector(union NVRAM *ram)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    volatile uint32_t addr = FLASH_TABLE_START_ADDR;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <flash_read_sector+0x24>)
 8000662:	60fb      	str	r3, [r7, #12]
    memcpy( ram, (uint32_t*)addr, sizeof(struct FLASH_Sector) );
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800066a:	4619      	mov	r1, r3
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f009 fd09 	bl	800a084 <memcpy>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	0801fc00 	.word	0x0801fc00

08000680 <calib_table_create_default>:
extern union NVRAM DevNVRAM;

/*---------------------------------------------------------------------------*/

void calib_table_create_default(Table_t *ct)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    ct->dacValA_m12[0]  = 0x159;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f240 1259 	movw	r2, #345	; 0x159
 800068e:	831a      	strh	r2, [r3, #24]
    ct->dacValA_m12[1]  = 0x182;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000696:	835a      	strh	r2, [r3, #26]
    ct->dacValA_m12[2]  = 0x225;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f240 2225 	movw	r2, #549	; 0x225
 800069e:	839a      	strh	r2, [r3, #28]
    ct->dacValA_m12[3]  = 0x309;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f240 3209 	movw	r2, #777	; 0x309
 80006a6:	83da      	strh	r2, [r3, #30]
    ct->dacValA_m12[4]  = 0x3eb;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80006ae:	841a      	strh	r2, [r3, #32]
    ct->dacValA_m12[5]  = 0x4cd;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f240 42cd 	movw	r2, #1229	; 0x4cd
 80006b6:	845a      	strh	r2, [r3, #34]	; 0x22
    ct->dacValA_m12[6]  = 0x5b0;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 80006be:	849a      	strh	r2, [r3, #36]	; 0x24
    ct->dacValA_m12[7]  = 0x693;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f240 6293 	movw	r2, #1683	; 0x693
 80006c6:	84da      	strh	r2, [r3, #38]	; 0x26
    ct->dacValA_m12[8]  = 0x777;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f240 7277 	movw	r2, #1911	; 0x777
 80006ce:	851a      	strh	r2, [r3, #40]	; 0x28
    ct->dacValA_m12[9]  = 0x861;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f640 0261 	movw	r2, #2145	; 0x861
 80006d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    ct->dacValA_m12[10] = 0x93c;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f640 123c 	movw	r2, #2364	; 0x93c
 80006de:	859a      	strh	r2, [r3, #44]	; 0x2c
    ct->dacValA_m12[11] = 0xa20;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 80006e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    ct->dacValA_m12[12] = 0xb04;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f640 3204 	movw	r2, #2820	; 0xb04
 80006ee:	861a      	strh	r2, [r3, #48]	; 0x30
    ct->dacValA_m12[13] = 0xbe5;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f640 32e5 	movw	r2, #3045	; 0xbe5
 80006f6:	865a      	strh	r2, [r3, #50]	; 0x32
    ct->dacValA_m12[14] = 0xcc7;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80006fe:	869a      	strh	r2, [r3, #52]	; 0x34
    ct->dacValA_m12[15] = 0xda9;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f640 52a9 	movw	r2, #3497	; 0xda9
 8000706:	86da      	strh	r2, [r3, #54]	; 0x36
    ct->dacValA_m12[16] = 0xe62;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f640 6262 	movw	r2, #3682	; 0xe62
 800070e:	871a      	strh	r2, [r3, #56]	; 0x38
    ct->dacValA_m12[17] = 0xe96;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f640 6296 	movw	r2, #3734	; 0xe96
 8000716:	875a      	strh	r2, [r3, #58]	; 0x3a
    ct->dacValA_m12[18] = 0xeac;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f640 62ac 	movw	r2, #3756	; 0xeac
 800071e:	879a      	strh	r2, [r3, #60]	; 0x3c

    ct->dacValB_m12[0]  = 0x145;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f240 1245 	movw	r2, #325	; 0x145
 8000726:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    ct->dacValB_m12[1]  = 0x16e;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8000730:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
    ct->dacValB_m12[2]  = 0x212;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f240 2212 	movw	r2, #530	; 0x212
 800073a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
    ct->dacValB_m12[3]  = 0x2f0;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8000744:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
    ct->dacValB_m12[4]  = 0x3d2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800074e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
    ct->dacValB_m12[5]  = 0x4b4;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8000758:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    ct->dacValB_m12[6]  = 0x597;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f240 5297 	movw	r2, #1431	; 0x597
 8000762:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    ct->dacValB_m12[7]  = 0x67a;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f240 627a 	movw	r2, #1658	; 0x67a
 800076c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    ct->dacValB_m12[8]  = 0x75e;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f240 725e 	movw	r2, #1886	; 0x75e
 8000776:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
    ct->dacValB_m12[9]  = 0x84a;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f640 024a 	movw	r2, #2122	; 0x84a
 8000780:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
    ct->dacValB_m12[10] = 0x923;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f640 1223 	movw	r2, #2339	; 0x923
 800078a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
    ct->dacValB_m12[11] = 0xa07;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f640 2207 	movw	r2, #2567	; 0xa07
 8000794:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
    ct->dacValB_m12[12] = 0xae8;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f640 22e8 	movw	r2, #2792	; 0xae8
 800079e:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
    ct->dacValB_m12[13] = 0xbcc;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f640 32cc 	movw	r2, #3020	; 0xbcc
 80007a8:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    ct->dacValB_m12[14] = 0xcae;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f640 42ae 	movw	r2, #3246	; 0xcae
 80007b2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    ct->dacValB_m12[15] = 0xd90;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f44f 6259 	mov.w	r2, #3472	; 0xd90
 80007bc:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
    ct->dacValB_m12[16] = 0xe49;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f640 6249 	movw	r2, #3657	; 0xe49
 80007c6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
    ct->dacValB_m12[17] = 0xe7b;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f640 627b 	movw	r2, #3707	; 0xe7b
 80007d0:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
    ct->dacValB_m12[18] = 0xe92;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f640 6292 	movw	r2, #3730	; 0xe92
 80007da:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

    ct->dacValA_m27[0]  = 0x0;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
    /* TODO: Добавить код заполнения таблицы для 27 В значениями
     * по умолчанию */
    ct->dacValA_m27[1]  = 0x1000;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ec:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172

    ct->dacValB_m27[0]  = 0x0;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 22b4 	strh.w	r2, [r3, #692]	; 0x2b4
    ct->dacValB_m27[1]  = 0x1000;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fe:	f8a3 22b6 	strh.w	r2, [r3, #694]	; 0x2b6
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <calib_table_init>:
/*
 * @brief   Fill some fields in @Table_t structure and read calibrate values
 *          from flash.
 */
void calib_table_init(Table_t *ct)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
    if ( flash_is_calibTable_null() == 0x00 ) {
 8000814:	f7ff fe5c 	bl	80004d0 <flash_is_calibTable_null>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d126      	bne.n	800086c <calib_table_init+0x60>
        ct->Firmware = FIRMWARE_NUMBER;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2205      	movs	r2, #5
 8000822:	805a      	strh	r2, [r3, #2]
        ct->Hardwire = HARDWIRE_NUMBER;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2206      	movs	r2, #6
 8000828:	801a      	strh	r2, [r3, #0]
        ct->MagicNum = MAGIC_KEY;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a13      	ldr	r2, [pc, #76]	; (800087c <calib_table_init+0x70>)
 800082e:	615a      	str	r2, [r3, #20]
        ct->SN       = SERIAL_NUMBER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a13      	ldr	r2, [pc, #76]	; (8000880 <calib_table_init+0x74>)
 8000834:	611a      	str	r2, [r3, #16]

        ct->calibration_step = 1040;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800083c:	809a      	strh	r2, [r3, #4]
        ct->volt_min_mode_12 = -9360;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f64d 3270 	movw	r2, #56176	; 0xdb70
 8000844:	80da      	strh	r2, [r3, #6]
        ct->volt_max_mode_12 = 9360;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f242 4290 	movw	r2, #9360	; 0x2490
 800084c:	811a      	strh	r2, [r3, #8]
        ct->volt_min_mode_27 = -27000;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f249 6288 	movw	r2, #38536	; 0x9688
 8000854:	815a      	strh	r2, [r3, #10]
        ct->volt_max_mode_27 = 27000;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f646 1278 	movw	r2, #27000	; 0x6978
 800085c:	819a      	strh	r2, [r3, #12]

        /* Заполнение калибровочной таблицы значениями по умолчанию */
        calib_table_create_default(ct);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff0e 	bl	8000680 <calib_table_create_default>
        /* Запись дефолтных значений во флеш-память */
        flash_write_calibTable( &DevNVRAM );
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <calib_table_init+0x78>)
 8000866:	f7ff fe55 	bl	8000514 <flash_write_calibTable>
    }
    else {
        /* Чтение таблицы из флеш-памяти в переменную DevNVRAM */
        flash_read_sector( &DevNVRAM );
    }
}
 800086a:	e002      	b.n	8000872 <calib_table_init+0x66>
        flash_read_sector( &DevNVRAM );
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <calib_table_init+0x78>)
 800086e:	f7ff fef3 	bl	8000658 <flash_read_sector>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	48151623 	.word	0x48151623
 8000880:	00111ae9 	.word	0x00111ae9
 8000884:	200004dc 	.word	0x200004dc

08000888 <SetAllDAC>:
{
//	VDAC_B = volt2dgt(&(DevNVRAM.calibration_table), db);
//	DAC_AD5322_Ch2(&hspi1, VDAC_B);
}
inline void SetAllDAC()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	DAC_AD5322_Ch1Ch2(&hspi1, VDAC_A, VDAC_B);
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SetAllDAC+0x18>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <SetAllDAC+0x1c>)
 8000892:	8812      	ldrh	r2, [r2, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <SetAllDAC+0x20>)
 8000898:	f7ff fc8c 	bl	80001b4 <DAC_AD5322_Ch1Ch2>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000025e 	.word	0x2000025e
 80008a4:	20000260 	.word	0x20000260
 80008a8:	2000095c 	.word	0x2000095c

080008ac <GetDacA>:
inline uint16_t GetDacA()
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	return VDAC_A;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <GetDacA+0x10>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	2000025e 	.word	0x2000025e

080008c0 <GetDacB>:
inline uint16_t GetDacB()
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	return VDAC_B;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <GetDacB+0x10>)
 80008c6:	881b      	ldrh	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000260 	.word	0x20000260

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f001 f8a1 	bl	8001a20 <HAL_Init>
#endif /* DWT_INIT */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f839 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 f9e3 	bl	8000cac <MX_GPIO_Init>
  MX_SPI1_Init();
 80008e6:	f000 f8e5 	bl	8000ab4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80008ea:	f008 fed1 	bl	8009690 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80008ee:	f000 f88f 	bl	8000a10 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008f2:	f000 f917 	bl	8000b24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008f6:	f000 f977 	bl	8000be8 <MX_TIM4_Init>
  MX_CRC_Init();
 80008fa:	f000 f8c7 	bl	8000a8c <MX_CRC_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_IT(&hadc1);
#endif /* TEST_ADC */

/*---------------------------------------------------------------------------*/
  CRC->DR = 0xFFFFFFFE;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <main+0x6c>)
 8000900:	f06f 0201 	mvn.w	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  CRC->DR = 0xFFFFFFFE;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <main+0x6c>)
 8000908:	f06f 0201 	mvn.w	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
  uint32_t buf[] = {
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <main+0x70>)
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000916:	e883 0003 	stmia.w	r3, {r0, r1}
            0xFFFFFFFE, 0xFFFFFFFE
  };
  uint32_t a = HAL_CRC_Calculate(&hcrc, buf, 2);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2202      	movs	r2, #2
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <main+0x74>)
 8000922:	f001 fcf8 	bl	8002316 <HAL_CRC_Calculate>
 8000926:	60f8      	str	r0, [r7, #12]

  calib_table_init( &DevNVRAM.calibration_table );
 8000928:	4808      	ldr	r0, [pc, #32]	; (800094c <main+0x78>)
 800092a:	f7ff ff6f 	bl	800080c <calib_table_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    if ( usb_rx_data.is_received == true ) {
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <main+0x7c>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0fb      	beq.n	800092e <main+0x5a>
	        usb_rx_handler(&usb_rx_data);
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <main+0x7c>)
 8000938:	f000 fd12 	bl	8001360 <usb_rx_handler>
	    if ( usb_rx_data.is_received == true ) {
 800093c:	e7f7      	b.n	800092e <main+0x5a>
 800093e:	bf00      	nop
 8000940:	40023000 	.word	0x40023000
 8000944:	0800af88 	.word	0x0800af88
 8000948:	200008dc 	.word	0x200008dc
 800094c:	200004dc 	.word	0x200004dc
 8000950:	20000000 	.word	0x20000000

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b094      	sub	sp, #80	; 0x50
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800095e:	2228      	movs	r2, #40	; 0x28
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f009 fb9c 	bl	800a0a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000992:	2301      	movs	r3, #1
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fd78 	bl	80044a0 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009b6:	f000 fa05 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 ffe2 	bl	80049a0 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009e2:	f000 f9ef 	bl	8000dc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80009e6:	2312      	movs	r3, #18
 80009e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80009ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 f93a 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a02:	f000 f9df 	bl	8000dc4 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_ADC1_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a4e:	f001 f849 	bl	8001ae4 <HAL_ADC_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a58:	f000 f9b4 	bl	8000dc4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_ADC1_Init+0x74>)
 8000a6e:	f001 f9e7 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a78:	f000 f9a4 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000092c 	.word	0x2000092c
 8000a88:	40012400 	.word	0x40012400

08000a8c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_CRC_Init+0x20>)
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <MX_CRC_Init+0x24>)
 8000a94:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_CRC_Init+0x20>)
 8000a98:	f001 fc21 	bl	80022de <HAL_CRC_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000aa2:	f000 f98f 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200008dc 	.word	0x200008dc
 8000ab0:	40023000 	.word	0x40023000

08000ab4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <MX_SPI1_Init+0x6c>)
 8000abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000b02:	220a      	movs	r2, #10
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_SPI1_Init+0x68>)
 8000b08:	f004 f968 	bl	8004ddc <HAL_SPI_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000b12:	f000 f957 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000095c 	.word	0x2000095c
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b42:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <MX_TIM3_Init+0xc0>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b48:	2247      	movs	r2, #71	; 0x47
 8000b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65000-1;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b54:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b68:	f004 fb9e 	bl	80052a8 <HAL_TIM_IC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f927 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	4816      	ldr	r0, [pc, #88]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000b86:	f004 ff17 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b90:	f000 f918 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000bac:	f004 fcd3 	bl	8005556 <HAL_TIM_IC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f000 f905 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_TIM3_Init+0xbc>)
 8000bca:	f004 fcc4 	bl	8005556 <HAL_TIM_IC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000bd4:	f000 f8f6 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200008e4 	.word	0x200008e4
 8000be4:	40000400 	.word	0x40000400

08000be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c06:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <MX_TIM4_Init+0xc0>)
 8000c08:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c0c:	2247      	movs	r2, #71	; 0x47
 8000c0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65000-1;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c18:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000c1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c2a:	481e      	ldr	r0, [pc, #120]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c2c:	f004 fb3c 	bl	80052a8 <HAL_TIM_IC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c36:	f000 f8c5 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c4a:	f004 feb5 	bl	80059b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c54:	f000 f8b6 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	463b      	mov	r3, r7
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c70:	f004 fc71 	bl	8005556 <HAL_TIM_IC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c7a:	f000 f8a3 	bl	8000dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c82:	2302      	movs	r3, #2
 8000c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	2204      	movs	r2, #4
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM4_Init+0xbc>)
 8000c8e:	f004 fc62 	bl	8005556 <HAL_TIM_IC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c98:	f000 f894 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000494 	.word	0x20000494
 8000ca8:	40000800 	.word	0x40000800

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a3a      	ldr	r2, [pc, #232]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0310 	and.w	r3, r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a34      	ldr	r2, [pc, #208]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_GPIO_Init+0x104>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4823      	ldr	r0, [pc, #140]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d28:	f001 fec3 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD5312_LDAC_Pin|AD5312_SYNC_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f240 4112 	movw	r1, #1042	; 0x412
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000d34:	f001 febd 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2104      	movs	r1, #4
 8000d3c:	481e      	ldr	r0, [pc, #120]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000d3e:	f001 feb8 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4816      	ldr	r0, [pc, #88]	; (8000db4 <MX_GPIO_Init+0x108>)
 8000d5c:	f001 fd0e 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5312_LDAC_Pin Relay_Pin AD5312_SYNC_Pin PA10 */
  GPIO_InitStruct.Pin = AD5312_LDAC_Pin|Relay_Pin|AD5312_SYNC_Pin|GPIO_PIN_10;
 8000d60:	f240 4316 	movw	r3, #1046	; 0x416
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <MX_GPIO_Init+0x10c>)
 8000d7a:	f001 fcff 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d7e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000d84:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_GPIO_Init+0x110>)
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <MX_GPIO_Init+0x114>)
 8000d94:	f001 fcf2 	bl	800277c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2028      	movs	r0, #40	; 0x28
 8000d9e:	f001 fa68 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da2:	2028      	movs	r0, #40	; 0x28
 8000da4:	f001 fa81 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40011000 	.word	0x40011000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	10310000 	.word	0x10310000
 8000dc0:	40010c00 	.word	0x40010c00

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_ADC_MspInit+0x7c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d129      	bne.n	8000ea8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0x80>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e84:	2308      	movs	r3, #8
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_ADC_MspInit+0x84>)
 8000e94:	f001 fc72 	bl	800277c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2012      	movs	r0, #18
 8000e9e:	f001 f9e8 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ea2:	2012      	movs	r0, #18
 8000ea4:	f001 fa01 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40012400 	.word	0x40012400
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010800 	.word	0x40010800

08000ebc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <HAL_CRC_MspInit+0x34>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_CRC_MspInit+0x38>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_CRC_MspInit+0x38>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_CRC_MspInit+0x38>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	40023000 	.word	0x40023000
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HAL_SPI_MspInit+0x70>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d123      	bne.n	8000f60 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <HAL_SPI_MspInit+0x74>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD5312_SCLK_Pin|AD5312_DIN_Pin;
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_SPI_MspInit+0x78>)
 8000f5c:	f001 fc0e 	bl	800277c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_TIM_IC_MspInit+0x108>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d13e      	bne.n	8001012 <HAL_TIM_IC_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f94:	4b3a      	ldr	r3, [pc, #232]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	4a39      	ldr	r2, [pc, #228]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	61d3      	str	r3, [r2, #28]
 8000fa0:	4b37      	ldr	r3, [pc, #220]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	482b      	ldr	r0, [pc, #172]	; (8001084 <HAL_TIM_IC_MspInit+0x110>)
 8000fd8:	f001 fbd0 	bl	800277c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <HAL_TIM_IC_MspInit+0x114>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <HAL_TIM_IC_MspInit+0x114>)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	201d      	movs	r0, #29
 8001006:	f001 f934 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800100a:	201d      	movs	r0, #29
 800100c:	f001 f94d 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001010:	e030      	b.n	8001074 <HAL_TIM_IC_MspInit+0x100>
  else if(htim_ic->Instance==TIM4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_TIM_IC_MspInit+0x118>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d12b      	bne.n	8001074 <HAL_TIM_IC_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <HAL_TIM_IC_MspInit+0x10c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800104c:	2340      	movs	r3, #64	; 0x40
 800104e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	4619      	mov	r1, r3
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <HAL_TIM_IC_MspInit+0x110>)
 8001060:	f001 fb8c 	bl	800277c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	201e      	movs	r0, #30
 800106a:	f001 f902 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800106e:	201e      	movs	r0, #30
 8001070:	f001 f91b 	bl	80022aa <HAL_NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40000400 	.word	0x40000400
 8001080:	40021000 	.word	0x40021000
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40010000 	.word	0x40010000
 800108c:	40000800 	.word	0x40000800

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	  printf("HardFault_IRQn");
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <HardFault_Handler+0x4>

080010a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <BusFault_Handler+0x4>

080010ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <UsageFault_Handler+0x4>

080010b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
    if ( btn_pin_12.is_count_started == 1 ) {
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <SysTick_Handler+0x78>)
 80010de:	789b      	ldrb	r3, [r3, #2]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10d      	bne.n	8001100 <SysTick_Handler+0x28>
        ++btn_pin_12.counter;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <SysTick_Handler+0x78>)
 80010e6:	889b      	ldrh	r3, [r3, #4]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <SysTick_Handler+0x78>)
 80010ee:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_12.counter > 1000 ) {
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <SysTick_Handler+0x78>)
 80010f2:	889b      	ldrh	r3, [r3, #4]
 80010f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010f8:	d902      	bls.n	8001100 <SysTick_Handler+0x28>
            btn_pin_12.is_long_press = 1;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <SysTick_Handler+0x78>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_13.is_count_started == 1 ) {
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <SysTick_Handler+0x7c>)
 8001102:	789b      	ldrb	r3, [r3, #2]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d10d      	bne.n	8001124 <SysTick_Handler+0x4c>
        ++btn_pin_13.counter;
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <SysTick_Handler+0x7c>)
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <SysTick_Handler+0x7c>)
 8001112:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_13.counter > 1000 ) {
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <SysTick_Handler+0x7c>)
 8001116:	889b      	ldrh	r3, [r3, #4]
 8001118:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111c:	d902      	bls.n	8001124 <SysTick_Handler+0x4c>
            btn_pin_13.is_long_press = 1;
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <SysTick_Handler+0x7c>)
 8001120:	2201      	movs	r2, #1
 8001122:	705a      	strb	r2, [r3, #1]
        }
    }
    if ( btn_pin_14.is_count_started == 1 ) {
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <SysTick_Handler+0x80>)
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d10d      	bne.n	8001148 <SysTick_Handler+0x70>
        ++btn_pin_14.counter;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SysTick_Handler+0x80>)
 800112e:	889b      	ldrh	r3, [r3, #4]
 8001130:	3301      	adds	r3, #1
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <SysTick_Handler+0x80>)
 8001136:	809a      	strh	r2, [r3, #4]
        if ( btn_pin_14.counter > 1000 ) {
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <SysTick_Handler+0x80>)
 800113a:	889b      	ldrh	r3, [r3, #4]
 800113c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001140:	d902      	bls.n	8001148 <SysTick_Handler+0x70>
            btn_pin_14.is_long_press = 1;
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Handler+0x80>)
 8001144:	2201      	movs	r2, #1
 8001146:	705a      	strb	r2, [r3, #1]
        }
    }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 fcb0 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000248 	.word	0x20000248
 8001154:	20000250 	.word	0x20000250
 8001158:	20000258 	.word	0x20000258

0800115c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <ADC1_2_IRQHandler+0x10>)
 8001162:	f000 fd97 	bl	8001c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000092c 	.word	0x2000092c

08001170 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001176:	f001 fdfe 	bl	8002d76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000166c 	.word	0x2000166c

08001184 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM3_IRQHandler+0x10>)
 800118a:	f004 f8dc 	bl	8005346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200008e4 	.word	0x200008e4

08001198 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM4_IRQHandler+0x10>)
 800119e:	f004 f8d2 	bl	8005346 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000494 	.word	0x20000494

080011ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80011b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80011b4:	f001 fc96 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011bc:	f001 fc92 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80011c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011c4:	f001 fc8e 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e00a      	b.n	80011f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011de:	f3af 8000 	nop.w
 80011e2:	4601      	mov	r1, r0
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	1c5a      	adds	r2, r3, #1
 80011e8:	60ba      	str	r2, [r7, #8]
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	dbf0      	blt.n	80011de <_read+0x12>
	}

return len;
 80011fc:	687b      	ldr	r3, [r7, #4]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x12>
	}
	return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_close>:

int _close(int file)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	return -1;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001264:	605a      	str	r2, [r3, #4]
	return 0;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <_isatty>:

int _isatty(int file)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
	return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
	return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x50>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x16>
		heap_end = &end;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <_sbrk+0x50>)
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <_sbrk+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <_sbrk+0x50>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <_sbrk+0x50>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	466a      	mov	r2, sp
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d907      	bls.n	80012da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80012ca:	f008 feb1 	bl	800a030 <__errno>
 80012ce:	4603      	mov	r3, r0
 80012d0:	220c      	movs	r2, #12
 80012d2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	e006      	b.n	80012e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <_sbrk+0x50>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <_sbrk+0x50>)
 80012e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000264 	.word	0x20000264
 80012f4:	20001968 	.word	0x20001968

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <SystemInit+0x5c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <SystemInit+0x5c>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <SystemInit+0x5c>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4911      	ldr	r1, [pc, #68]	; (8001354 <SystemInit+0x5c>)
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <SystemInit+0x60>)
 8001310:	4013      	ands	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <SystemInit+0x5c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <SystemInit+0x5c>)
 800131a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800131e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001322:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <SystemInit+0x5c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SystemInit+0x5c>)
 800132a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <SystemInit+0x5c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <SystemInit+0x5c>)
 8001336:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800133a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SystemInit+0x5c>)
 800133e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001342:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <SystemInit+0x64>)
 8001346:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134a:	609a      	str	r2, [r3, #8]
#endif 
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	f8ff0000 	.word	0xf8ff0000
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <usb_rx_handler>:
 * @brief   USB package handler
 * @note    Len <= 64
 * @retval  HAL Status
 */
HAL_StatusTypeDef usb_rx_handler(usb_rx_data_type *usb)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b09f      	sub	sp, #124	; 0x7c
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    if ( usb->is_received != true ||
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	f083 0301 	eor.w	r3, r3, #1
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <usb_rx_handler+0x1e>
         usb->is_handled  != false )
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	785b      	ldrb	r3, [r3, #1]
    if ( usb->is_received != true ||
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <usb_rx_handler+0x22>
    {
        /* Если пакет ещё не принят или уже обработан, то
         * ошибка - обрабатывать либо ещё, либо уже нечего. */
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e31e      	b.n	80019c0 <usb_rx_handler+0x660>
    }
    usb->is_received = false;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

    /*-MAIN HANDLER CODE-----------------------------------------------------*/

    if ( usb->len < 1 || usb->len > 64 ) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <usb_rx_handler+0x38>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	789b      	ldrb	r3, [r3, #2]
 8001394:	2b40      	cmp	r3, #64	; 0x40
 8001396:	d901      	bls.n	800139c <usb_rx_handler+0x3c>
        /* Если размер пакета не соответствует нормальному - ошибка */
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e311      	b.n	80019c0 <usb_rx_handler+0x660>
     * такого размера будет достаточно. */
    uint8_t     usb_tx_buff[64];
    /* 16-ти битовая переменная для установки значения ЦАП */
    uint16_t    tVal16;
    /* Переменная, содержащая текущую команду, сделана для удобства */
    uint8_t     cmd = usb->buff[0];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	78db      	ldrb	r3, [r3, #3]
 80013a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    switch (cmd) {
 80013a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013a8:	3b01      	subs	r3, #1
 80013aa:	2b0d      	cmp	r3, #13
 80013ac:	f200 82fc 	bhi.w	80019a8 <usb_rx_handler+0x648>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <usb_rx_handler+0x58>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013f1 	.word	0x080013f1
 80013bc:	08001471 	.word	0x08001471
 80013c0:	0800149d 	.word	0x0800149d
 80013c4:	080014c9 	.word	0x080014c9
 80013c8:	080014e9 	.word	0x080014e9
 80013cc:	0800152b 	.word	0x0800152b
 80013d0:	0800155f 	.word	0x0800155f
 80013d4:	080015c3 	.word	0x080015c3
 80013d8:	080015e7 	.word	0x080015e7
 80013dc:	0800160b 	.word	0x0800160b
 80013e0:	080019b3 	.word	0x080019b3
 80013e4:	08001909 	.word	0x08001909
 80013e8:	0800192f 	.word	0x0800192f
 80013ec:	0800196d 	.word	0x0800196d
        /* Команда включения реле */
        case 0x01 :
            if ( usb->len >= 2 && (usb->buff[1] == 0x01 || usb->buff[1] == 0x00) ) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	789b      	ldrb	r3, [r3, #2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d92d      	bls.n	8001454 <usb_rx_handler+0xf4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d003      	beq.n	8001408 <usb_rx_handler+0xa8>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	791b      	ldrb	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d125      	bne.n	8001454 <usb_rx_handler+0xf4>

                HAL_GPIO_WritePin(Relay_GPIO_Port, Relay_Pin, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2104      	movs	r1, #4
 800140c:	48c4      	ldr	r0, [pc, #784]	; (8001720 <usb_rx_handler+0x3c0>)
 800140e:	f001 fb50 	bl	8002ab2 <HAL_GPIO_WritePin>

                if ( usb->buff[1] == 0x01 ) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	791b      	ldrb	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d109      	bne.n	800142e <usb_rx_handler+0xce>
                    relay_state = M12;
 800141a:	4bc2      	ldr	r3, [pc, #776]	; (8001724 <usb_rx_handler+0x3c4>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:12V - %d \n", relay_state);
 8001420:	4bc0      	ldr	r3, [pc, #768]	; (8001724 <usb_rx_handler+0x3c4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	48c0      	ldr	r0, [pc, #768]	; (8001728 <usb_rx_handler+0x3c8>)
 8001428:	f008 fe42 	bl	800a0b0 <iprintf>
 800142c:	e00c      	b.n	8001448 <usb_rx_handler+0xe8>
                }
                else if (usb->buff[1] == 0x00) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	791b      	ldrb	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <usb_rx_handler+0xe8>
                    relay_state = M27;
 8001436:	4bbb      	ldr	r3, [pc, #748]	; (8001724 <usb_rx_handler+0x3c4>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
                    printf("RelayState:27V - %d \n", relay_state);
 800143c:	4bb9      	ldr	r3, [pc, #740]	; (8001724 <usb_rx_handler+0x3c4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	48ba      	ldr	r0, [pc, #744]	; (800172c <usb_rx_handler+0x3cc>)
 8001444:	f008 fe34 	bl	800a0b0 <iprintf>
                }
                SetAllDAC();
 8001448:	f7ff fa1e 	bl	8000888 <SetAllDAC>
                usb_tx_buff[1] = 0x00; // успешно
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001452:	e002      	b.n	800145a <usb_rx_handler+0xfa>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001454:	2301      	movs	r3, #1
 8001456:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }

            usb_tx_buff[0] = cmd;
 800145a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800145e:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	2102      	movs	r1, #2
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fa03 	bl	8009874 <CDC_Transmit_FS>
            break;
 800146e:	e2a3      	b.n	80019b8 <usb_rx_handler+0x658>

        /* Команда калибровки ЦАП А */
        case 0x02 :
            if (usb->len >= 3) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	789b      	ldrb	r3, [r3, #2]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d903      	bls.n	8001480 <usb_rx_handler+0x120>
//                resValTIM4_PB6(); // обнуление переменной для проведения калибровки
//                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
//                SetDacA(tVal16);
//                printf("DacA: %d\n", tVal16);

                usb_tx_buff[1] = 0x00; // успешно
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800147e:	e002      	b.n	8001486 <usb_rx_handler+0x126>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 8001486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800148a:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2102      	movs	r1, #2
 8001494:	4618      	mov	r0, r3
 8001496:	f008 f9ed 	bl	8009874 <CDC_Transmit_FS>
            break;
 800149a:	e28d      	b.n	80019b8 <usb_rx_handler+0x658>

        /* Команда калибровки ЦАП В */
        case 0x03 :
            if (usb->len >= 3) {
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d903      	bls.n	80014ac <usb_rx_handler+0x14c>
//                resValTIM4_PB6(); // обнуление переменной для проведения калиброки
//                memcpy(&tVal16, usb->buff + 1, sizeof(tVal16));
//                SetDacB(tVal16);
//                printf("DacB: %d \n", tVal16);

                usb_tx_buff[1] = 0x00; // успешно
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80014aa:	e002      	b.n	80014b2 <usb_rx_handler+0x152>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 80014b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014b6:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2102      	movs	r1, #2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f008 f9d7 	bl	8009874 <CDC_Transmit_FS>
            break;
 80014c6:	e277      	b.n	80019b8 <usb_rx_handler+0x658>

        /* Команда запроса значения АЦП */
        case 0x04 :
//            tVal16 = GetADC();
            usb_tx_buff[0] = cmd;
 80014c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014cc:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(usb_tx_buff + 1, &tVal16, sizeof(tVal16));
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	3301      	adds	r3, #1
 80014d6:	8bfa      	ldrh	r2, [r7, #30]
 80014d8:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 3);
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	2103      	movs	r1, #3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f008 f9c7 	bl	8009874 <CDC_Transmit_FS>
            break;
 80014e6:	e267      	b.n	80019b8 <usb_rx_handler+0x658>

        /* Команда запроса состояния ЦАПов */
        case 0x05 :
            usb_tx_buff[0] = cmd;
 80014e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014ec:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = relay_state;
 80014f0:	4b8c      	ldr	r3, [pc, #560]	; (8001724 <usb_rx_handler+0x3c4>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

            tVal16 = GetDacA();
 80014f8:	f7ff f9d8 	bl	80008ac <GetDacA>
 80014fc:	4603      	mov	r3, r0
 80014fe:	83fb      	strh	r3, [r7, #30]
            memcpy(usb_tx_buff + 2, &tVal16, sizeof(tVal16));
 8001500:	f107 0320 	add.w	r3, r7, #32
 8001504:	3302      	adds	r3, #2
 8001506:	8bfa      	ldrh	r2, [r7, #30]
 8001508:	801a      	strh	r2, [r3, #0]

            tVal16 = GetDacB();
 800150a:	f7ff f9d9 	bl	80008c0 <GetDacB>
 800150e:	4603      	mov	r3, r0
 8001510:	83fb      	strh	r3, [r7, #30]
            memcpy(usb_tx_buff + 4, &tVal16, sizeof(tVal16));
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	3304      	adds	r3, #4
 8001518:	8bfa      	ldrh	r2, [r7, #30]
 800151a:	801a      	strh	r2, [r3, #0]

            CDC_Transmit_FS(usb_tx_buff, 6);
 800151c:	f107 0320 	add.w	r3, r7, #32
 8001520:	2106      	movs	r1, #6
 8001522:	4618      	mov	r0, r3
 8001524:	f008 f9a6 	bl	8009874 <CDC_Transmit_FS>
            break;
 8001528:	e246      	b.n	80019b8 <usb_rx_handler+0x658>

        /* Команда запроса состояния кнопок */
        case 0x06 :
            usb_tx_buff[0] = cmd;
 800152a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800152e:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = btn_run_get_state();
 8001532:	f7fe fec3 	bl	80002bc <btn_run_get_state>
 8001536:	4603      	mov	r3, r0
 8001538:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            usb_tx_buff[2] = btn_up_get_state();
 800153c:	f7fe fedc 	bl	80002f8 <btn_up_get_state>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            usb_tx_buff[3] = btn_down_get_state();
 8001546:	f7fe fef1 	bl	800032c <btn_down_get_state>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CDC_Transmit_FS(usb_tx_buff, 4);
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	2104      	movs	r1, #4
 8001556:	4618      	mov	r0, r3
 8001558:	f008 f98c 	bl	8009874 <CDC_Transmit_FS>
            break;
 800155c:	e22c      	b.n	80019b8 <usb_rx_handler+0x658>
        {
//            /* TODO: Проверить на корректность преобразования SERIAL_NUMBER в массив из uint8, для 1121001 должно быть 11 1A E9 */
//            memcpy( &usb_tx_buff[1], SERIAL_NUMBER, 3 );
//            CDC_Transmit_FS(usb_tx_buff, 4);

            char str[] = {"prb_v0.3"};
 800155e:	4a74      	ldr	r2, [pc, #464]	; (8001730 <usb_rx_handler+0x3d0>)
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	ca07      	ldmia	r2, {r0, r1, r2}
 8001566:	c303      	stmia	r3!, {r0, r1}
 8001568:	701a      	strb	r2, [r3, #0]

            usb_tx_buff[0] = cmd;
 800156a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800156e:	f887 3020 	strb.w	r3, [r7, #32]
            usb_tx_buff[1] = strlen(str);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe fde8 	bl	800014c <strlen>
 800157c:	4603      	mov	r3, r0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            memcpy(usb_tx_buff + 2, str, strlen(str));
 8001584:	f107 0420 	add.w	r4, r7, #32
 8001588:	3402      	adds	r4, #2
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fddc 	bl	800014c <strlen>
 8001594:	4602      	mov	r2, r0
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4620      	mov	r0, r4
 800159e:	f008 fd71 	bl	800a084 <memcpy>

            CDC_Transmit_FS(usb_tx_buff, strlen(str) + 2);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fdd0 	bl	800014c <strlen>
 80015ac:	4603      	mov	r3, r0
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3302      	adds	r3, #2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f107 0320 	add.w	r3, r7, #32
 80015b8:	4611      	mov	r1, r2
 80015ba:	4618      	mov	r0, r3
 80015bc:	f008 f95a 	bl	8009874 <CDC_Transmit_FS>
            break;
 80015c0:	e1fa      	b.n	80019b8 <usb_rx_handler+0x658>
        /* Команда запроса измеренной длительности */
        case 0x08 :
        {
//            EnableTIM3_PB4();
//            uint16_t temp = GetTIM3();
            uint16_t temp = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	827b      	strh	r3, [r7, #18]
            usb_tx_buff[0] = cmd;
 80015c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ca:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	3301      	adds	r3, #1
 80015d4:	8a7a      	ldrh	r2, [r7, #18]
 80015d6:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	2103      	movs	r1, #3
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 f948 	bl	8009874 <CDC_Transmit_FS>
            break;
 80015e4:	e1e8      	b.n	80019b8 <usb_rx_handler+0x658>
        /* Команда запроса измеренной длительности */
        case 0x09 :
        {
//            EnableTIM4_PB6();
//            uint16_t temp = GetTIM4();
            uint16_t temp = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	823b      	strh	r3, [r7, #16]
            usb_tx_buff[0] = cmd;
 80015ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015ee:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(usb_tx_buff + 1, &temp, sizeof(uint16_t));
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	3301      	adds	r3, #1
 80015f8:	8a3a      	ldrh	r2, [r7, #16]
 80015fa:	801a      	strh	r2, [r3, #0]
            CDC_Transmit_FS(usb_tx_buff, 1 + sizeof(uint16_t));
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	2103      	movs	r1, #3
 8001602:	4618      	mov	r0, r3
 8001604:	f008 f936 	bl	8009874 <CDC_Transmit_FS>
            break;
 8001608:	e1d6      	b.n	80019b8 <usb_rx_handler+0x658>
        case 0x0A :
        {
            /* Константа для обозначения максимального количества передаваемых значений.
             * Определяется максимальным количеством байт, передаваемых по USB за раз.
             * (64(всего) - 6(команда))/2(так как числа 2-х байтовые) = 29*/
            const uint8_t usb_max_calib_value = 29;
 800160a:	231d      	movs	r3, #29
 800160c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            /* Значение для ответа на команду, 0х00 - успешное выполнение */
            usb_tx_buff[6] = 0x00;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            /* В буффер для отправки ответа заносим номер таблицы */
            usb_tx_buff[1] = usb->buff[1];
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            /* dataStartNumber  - номер ячейки, с которой начинается запись
             * dataEndNumber    - номер последней ячейки, в которую должны записываться данные
             * dataOffset       - разница между ними */
            uint16_t dataStartNumber, dataEndNumber, dataOffset;

            memcpy(&dataStartNumber, &usb->buff[2], sizeof(uint16_t));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3305      	adds	r3, #5
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	81fb      	strh	r3, [r7, #14]
            memcpy(&dataOffset, &usb->buff[4], sizeof(uint16_t));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3307      	adds	r3, #7
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	81bb      	strh	r3, [r7, #12]
            dataEndNumber = dataStartNumber + dataOffset;
 8001632:	89fa      	ldrh	r2, [r7, #14]
 8001634:	89bb      	ldrh	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

            switch (usb->buff[1]) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	2b03      	cmp	r3, #3
 8001642:	f200 8145 	bhi.w	80018d0 <usb_rx_handler+0x570>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <usb_rx_handler+0x2ec>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	080016f1 	.word	0x080016f1
 8001654:	080017a1 	.word	0x080017a1
 8001658:	08001835 	.word	0x08001835
                case 0x00 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	2b55      	cmp	r3, #85	; 0x55
 8001660:	d809      	bhi.n	8001676 <usb_rx_handler+0x316>
 8001662:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001666:	2b56      	cmp	r3, #86	; 0x56
 8001668:	d805      	bhi.n	8001676 <usb_rx_handler+0x316>
                        dataEndNumber > MAX_VAL_M12    ||
                        dataOffset > usb_max_calib_value) {
 800166a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800166e:	b29a      	uxth	r2, r3
 8001670:	89bb      	ldrh	r3, [r7, #12]
                        dataEndNumber > MAX_VAL_M12    ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d203      	bcs.n	800167e <usb_rx_handler+0x31e>
                        usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                        break;
 800167c:	e12c      	b.n	80018d8 <usb_rx_handler+0x578>
                    }

                    uint8_t i_usb    = 6;
 800167e:	2306      	movs	r3, #6
 8001680:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                    uint16_t i_calib = dataStartNumber;
 8001684:	89fb      	ldrh	r3, [r7, #14]
 8001686:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800168a:	e017      	b.n	80016bc <usb_rx_handler+0x35c>

                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 800168c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001690:	330c      	adds	r3, #12
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <usb_rx_handler+0x3d4>)
 8001696:	4413      	add	r3, r2
                                &usb->buff[i_usb],
 8001698:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	440a      	add	r2, r1
 80016a0:	3203      	adds	r2, #3
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	b292      	uxth	r2, r2
                        memcpy( &DevNVRAM.calibration_table.dacValA_m12[i_calib],
 80016a6:	801a      	strh	r2, [r3, #0]
                                sizeof(uint16_t) );

                        i_usb   += 2;
 80016a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016ac:	3302      	adds	r3, #2
 80016ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
                        i_calib += 1;
 80016b2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80016b6:	3301      	adds	r3, #1
 80016b8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
                    while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80016bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016c0:	2b3f      	cmp	r3, #63	; 0x3f
 80016c2:	d805      	bhi.n	80016d0 <usb_rx_handler+0x370>
 80016c4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80016c8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3dd      	bcc.n	800168c <usb_rx_handler+0x32c>
                    }
                    /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                     * таблице не оставалось мусорных данных */
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 80016d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80016d4:	330c      	adds	r3, #12
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4a16      	ldr	r2, [pc, #88]	; (8001734 <usb_rx_handler+0x3d4>)
 80016da:	1898      	adds	r0, r3, r2
                            0x00,
                            (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 80016dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80016e0:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                    memset( &DevNVRAM.calibration_table.dacValA_m12[dataEndNumber],
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	461a      	mov	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f008 fcd9 	bl	800a0a0 <memset>
                    break;
 80016ee:	e0f3      	b.n	80018d8 <usb_rx_handler+0x578>

                }
                case 0x01 :
                {
                    if (dataStartNumber >= MAX_VAL_M12 ||
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	2b55      	cmp	r3, #85	; 0x55
 80016f4:	d809      	bhi.n	800170a <usb_rx_handler+0x3aa>
 80016f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80016fa:	2b56      	cmp	r3, #86	; 0x56
 80016fc:	d805      	bhi.n	800170a <usb_rx_handler+0x3aa>
                         dataEndNumber > MAX_VAL_M12    ||
                         dataOffset > usb_max_calib_value) {
 80016fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001702:	b29a      	uxth	r2, r3
 8001704:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M12    ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d203      	bcs.n	8001712 <usb_rx_handler+0x3b2>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 8001710:	e0e2      	b.n	80018d8 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 8001712:	2306      	movs	r3, #6
 8001714:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                     uint16_t i_calib = dataStartNumber;
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800171e:	e024      	b.n	800176a <usb_rx_handler+0x40a>
 8001720:	40010800 	.word	0x40010800
 8001724:	20000043 	.word	0x20000043
 8001728:	0800af90 	.word	0x0800af90
 800172c:	0800afa8 	.word	0x0800afa8
 8001730:	0800afc0 	.word	0x0800afc0
 8001734:	200004dc 	.word	0x200004dc

                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 8001738:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800173c:	3360      	adds	r3, #96	; 0x60
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4aa1      	ldr	r2, [pc, #644]	; (80019c8 <usb_rx_handler+0x668>)
 8001742:	4413      	add	r3, r2
 8001744:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 8001746:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	440a      	add	r2, r1
 800174e:	3203      	adds	r2, #3
 8001750:	8812      	ldrh	r2, [r2, #0]
 8001752:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m12[i_calib],
 8001754:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 8001756:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800175a:	3302      	adds	r3, #2
 800175c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                         i_calib += 1;
 8001760:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001764:	3301      	adds	r3, #1
 8001766:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 800176a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800176e:	2b3f      	cmp	r3, #63	; 0x3f
 8001770:	d805      	bhi.n	800177e <usb_rx_handler+0x41e>
 8001772:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8001776:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800177a:	429a      	cmp	r2, r3
 800177c:	d3dc      	bcc.n	8001738 <usb_rx_handler+0x3d8>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 800177e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001782:	3360      	adds	r3, #96	; 0x60
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4a90      	ldr	r2, [pc, #576]	; (80019c8 <usb_rx_handler+0x668>)
 8001788:	4413      	add	r3, r2
 800178a:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M12 - dataEndNumber) * sizeof(uint16_t) );
 800178c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001790:	f1c3 0356 	rsb	r3, r3, #86	; 0x56
                     memset( &DevNVRAM.calibration_table.dacValB_m12[dataEndNumber],
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	461a      	mov	r2, r3
 8001798:	2100      	movs	r1, #0
 800179a:	f008 fc81 	bl	800a0a0 <memset>
                     break;
 800179e:	e09b      	b.n	80018d8 <usb_rx_handler+0x578>

                }
                case 0x02 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 80017a0:	89fb      	ldrh	r3, [r7, #14]
 80017a2:	2ba1      	cmp	r3, #161	; 0xa1
 80017a4:	d809      	bhi.n	80017ba <usb_rx_handler+0x45a>
 80017a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80017aa:	2ba2      	cmp	r3, #162	; 0xa2
 80017ac:	d805      	bhi.n	80017ba <usb_rx_handler+0x45a>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 80017ae:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M27    ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d203      	bcs.n	80017c2 <usb_rx_handler+0x462>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 80017c0:	e08a      	b.n	80018d8 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 80017c2:	2306      	movs	r3, #6
 80017c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                     uint16_t i_calib = dataStartNumber;
 80017c8:	89fb      	ldrh	r3, [r7, #14]
 80017ca:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 80017ce:	e017      	b.n	8001800 <usb_rx_handler+0x4a0>

                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80017d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80017d4:	33b8      	adds	r3, #184	; 0xb8
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <usb_rx_handler+0x668>)
 80017da:	4413      	add	r3, r2
                                 &usb->buff[i_usb],
 80017dc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	440a      	add	r2, r1
 80017e4:	3203      	adds	r2, #3
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValA_m27[i_calib],
 80017ea:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 80017ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f0:	3302      	adds	r3, #2
 80017f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                         i_calib += 1;
 80017f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80017fa:	3301      	adds	r3, #1
 80017fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001800:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001804:	2b3f      	cmp	r3, #63	; 0x3f
 8001806:	d805      	bhi.n	8001814 <usb_rx_handler+0x4b4>
 8001808:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800180c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001810:	429a      	cmp	r2, r3
 8001812:	d3dd      	bcc.n	80017d0 <usb_rx_handler+0x470>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 8001814:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001818:	33b8      	adds	r3, #184	; 0xb8
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <usb_rx_handler+0x668>)
 800181e:	1898      	adds	r0, r3, r2
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 8001820:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001824:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValA_m27[dataEndNumber],
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	461a      	mov	r2, r3
 800182c:	2100      	movs	r1, #0
 800182e:	f008 fc37 	bl	800a0a0 <memset>
                     break;
 8001832:	e051      	b.n	80018d8 <usb_rx_handler+0x578>

                }
                case 0x03 :
                {
                    if (dataStartNumber >= MAX_VAL_M27 ||
 8001834:	89fb      	ldrh	r3, [r7, #14]
 8001836:	2ba1      	cmp	r3, #161	; 0xa1
 8001838:	d809      	bhi.n	800184e <usb_rx_handler+0x4ee>
 800183a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800183e:	2ba2      	cmp	r3, #162	; 0xa2
 8001840:	d805      	bhi.n	800184e <usb_rx_handler+0x4ee>
                         dataEndNumber > MAX_VAL_M27    ||
                         dataOffset > usb_max_calib_value) {
 8001842:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001846:	b29a      	uxth	r2, r3
 8001848:	89bb      	ldrh	r3, [r7, #12]
                         dataEndNumber > MAX_VAL_M27    ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d203      	bcs.n	8001856 <usb_rx_handler+0x4f6>
                         usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 800184e:	2301      	movs	r3, #1
 8001850:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                         break;
 8001854:	e040      	b.n	80018d8 <usb_rx_handler+0x578>
                     }

                     uint8_t i_usb    = 6;
 8001856:	2306      	movs	r3, #6
 8001858:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                     uint16_t i_calib = dataStartNumber;
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001862:	e019      	b.n	8001898 <usb_rx_handler+0x538>

                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 8001864:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001868:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <usb_rx_handler+0x668>)
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
                                 &usb->buff[i_usb],
 8001874:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	440a      	add	r2, r1
 800187c:	3203      	adds	r2, #3
 800187e:	8812      	ldrh	r2, [r2, #0]
 8001880:	b292      	uxth	r2, r2
                         memcpy( &DevNVRAM.calibration_table.dacValB_m27[i_calib],
 8001882:	801a      	strh	r2, [r3, #0]
                                 sizeof(uint16_t) );

                         i_usb   += 2;
 8001884:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001888:	3302      	adds	r3, #2
 800188a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                         i_calib += 1;
 800188e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001892:	3301      	adds	r3, #1
 8001894:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                     while ( (i_usb < 64) && (i_calib < dataEndNumber) ) {
 8001898:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800189c:	2b3f      	cmp	r3, #63	; 0x3f
 800189e:	d805      	bhi.n	80018ac <usb_rx_handler+0x54c>
 80018a0:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80018a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3db      	bcc.n	8001864 <usb_rx_handler+0x504>
                     }
                     /* Обнуляем правую оставшуюся часть массива, для того, чтобы в
                      * таблице не оставалось мусорных данных */
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 80018ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80018b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <usb_rx_handler+0x668>)
 80018b8:	4413      	add	r3, r2
 80018ba:	1d18      	adds	r0, r3, #4
                             0x00,
                             (MAX_VAL_M27 - dataEndNumber) * sizeof(uint16_t) );
 80018bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80018c0:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
                     memset( &DevNVRAM.calibration_table.dacValB_m27[dataEndNumber],
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	461a      	mov	r2, r3
 80018c8:	2100      	movs	r1, #0
 80018ca:	f008 fbe9 	bl	800a0a0 <memset>
                     break;
 80018ce:	e003      	b.n	80018d8 <usb_rx_handler+0x578>

                }
                default :
                    usb_tx_buff[6] = 0x01;   /* Произошла ошибка - возвращаем 0х01 */
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    break;
 80018d6:	bf00      	nop
            };

            usb_tx_buff[0] = cmd;
 80018d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018dc:	f887 3020 	strb.w	r3, [r7, #32]
            memcpy(usb_tx_buff + 2, &dataStartNumber, sizeof(uint16_t));
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	3302      	adds	r3, #2
 80018e6:	89fa      	ldrh	r2, [r7, #14]
 80018e8:	801a      	strh	r2, [r3, #0]
            memcpy(usb_tx_buff + 4, &dataOffset, sizeof(uint16_t));
 80018ea:	f107 0320 	add.w	r3, r7, #32
 80018ee:	3304      	adds	r3, #4
 80018f0:	89ba      	ldrh	r2, [r7, #12]
 80018f2:	801a      	strh	r2, [r3, #0]
            usb_tx_buff[2 + 2 * sizeof(uint16_t) + 1] = 0x00;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            CDC_Transmit_FS(usb_tx_buff, 7);
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2107      	movs	r1, #7
 8001900:	4618      	mov	r0, r3
 8001902:	f007 ffb7 	bl	8009874 <CDC_Transmit_FS>
        }
            break;
 8001906:	e057      	b.n	80019b8 <usb_rx_handler+0x658>
//        case 0x0B :
//        {
        case 0x0C :
        {
            uint32_t crc;
            crc_read_from_flash(&crc);
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fdc1 	bl	8000494 <crc_read_from_flash>
            usb_tx_buff[0] = cmd;
 8001912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001916:	f887 3020 	strb.w	r3, [r7, #32]
 800191a:	68bb      	ldr	r3, [r7, #8]
            memcpy( &usb_tx_buff[1], &crc, 4 );
 800191c:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
            CDC_Transmit_FS(usb_tx_buff, 5 );
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	2105      	movs	r1, #5
 8001926:	4618      	mov	r0, r3
 8001928:	f007 ffa4 	bl	8009874 <CDC_Transmit_FS>
        }
            break;
 800192c:	e044      	b.n	80019b8 <usb_rx_handler+0x658>
        case 0x0D :
        {
//        case 0x0C :
//        {
            /* Правильная команда тут - 0х0D, изменено для тестирования */
            if (usb->len >= 2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	789b      	ldrb	r3, [r3, #2]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d90c      	bls.n	8001950 <usb_rx_handler+0x5f0>
            {
                changeTableFlag = true;
 8001936:	4b25      	ldr	r3, [pc, #148]	; (80019cc <usb_rx_handler+0x66c>)
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
                if ( flash_write_calibTable( &DevNVRAM ) != HAL_OK ) {
 800193c:	4822      	ldr	r0, [pc, #136]	; (80019c8 <usb_rx_handler+0x668>)
 800193e:	f7fe fde9 	bl	8000514 <flash_write_calibTable>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d136      	bne.n	80019b6 <usb_rx_handler+0x656>
                    break;
                }
                usb_tx_buff[1] = 0x00; // успешно
 8001948:	2300      	movs	r3, #0
 800194a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800194e:	e002      	b.n	8001956 <usb_rx_handler+0x5f6>
            }
            else {
                usb_tx_buff[1] = 0x01; // ошибка
 8001950:	2301      	movs	r3, #1
 8001952:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }
            usb_tx_buff[0] = cmd;
 8001956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800195a:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	2102      	movs	r1, #2
 8001964:	4618      	mov	r0, r3
 8001966:	f007 ff85 	bl	8009874 <CDC_Transmit_FS>
            break;
 800196a:	e025      	b.n	80019b8 <usb_rx_handler+0x658>
        }

        /* Команда приема параметров калибровочной таблицы */
        case 0x0E :
        {
            if (usb->len < 10) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d802      	bhi.n	800197a <usb_rx_handler+0x61a>
                usb_tx_buff[1] = 0x01;  // ошибка
 8001974:	2301      	movs	r3, #1
 8001976:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            }

            const uint8_t number_calib_parameters = 5;
 800197a:	2305      	movs	r3, #5
 800197c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

            memcpy( &DevNVRAM.calibration_table.calibration_step,
                    &usb->buff[1],
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	1d19      	adds	r1, r3, #4
            memcpy( &DevNVRAM.calibration_table.calibration_step,
 8001984:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	461a      	mov	r2, r3
 800198c:	4810      	ldr	r0, [pc, #64]	; (80019d0 <usb_rx_handler+0x670>)
 800198e:	f008 fb79 	bl	800a084 <memcpy>
                    sizeof(uint16_t) * number_calib_parameters );

            usb_tx_buff[0] = cmd;
 8001992:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001996:	f887 3020 	strb.w	r3, [r7, #32]
            CDC_Transmit_FS(usb_tx_buff, 2);
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2102      	movs	r1, #2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f007 ff67 	bl	8009874 <CDC_Transmit_FS>
            break;
 80019a6:	e007      	b.n	80019b8 <usb_rx_handler+0x658>
        }

        /* По умолчанию, если прочитанная команда не соответствует ни одной команде
         * в протоколе, отправляем в ответ просто 0, как сигнал ошибки. */
        default:
            CDC_Transmit_FS(0, 1);
 80019a8:	2101      	movs	r1, #1
 80019aa:	2000      	movs	r0, #0
 80019ac:	f007 ff62 	bl	8009874 <CDC_Transmit_FS>
 80019b0:	e002      	b.n	80019b8 <usb_rx_handler+0x658>
            break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <usb_rx_handler+0x658>
                    break;
 80019b6:	bf00      	nop
    };

    /*-END MAIN HANDLER CODE-------------------------------------------------*/

    usb->is_handled = true;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	705a      	strb	r2, [r3, #1]

    return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	377c      	adds	r7, #124	; 0x7c
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	200004dc 	.word	0x200004dc
 80019cc:	20000244 	.word	0x20000244
 80019d0:	200004e0 	.word	0x200004e0

080019d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019d6:	e003      	b.n	80019e0 <LoopCopyDataInit>

080019d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019de:	3104      	adds	r1, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019e0:	480a      	ldr	r0, [pc, #40]	; (8001a0c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019e8:	d3f6      	bcc.n	80019d8 <CopyDataInit>
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019ec:	e002      	b.n	80019f4 <LoopFillZerobss>

080019ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019f0:	f842 3b04 	str.w	r3, [r2], #4

080019f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80019f8:	d3f9      	bcc.n	80019ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019fa:	f7ff fc7d 	bl	80012f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f008 fb1d 	bl	800a03c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a02:	f7fe ff67 	bl	80008d4 <main>
  bx lr
 8001a06:	4770      	bx	lr
  ldr r3, =_sidata
 8001a08:	0800b0dc 	.word	0x0800b0dc
  ldr r0, =_sdata
 8001a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a10:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 8001a14:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 8001a18:	20001968 	.word	0x20001968

08001a1c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <CAN1_RX1_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x28>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x28>)
 8001a2a:	f043 0310 	orr.w	r3, r3, #16
 8001a2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 fc13 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff f9c8 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40022000 	.word	0x40022000

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fc2b 	bl	80022c6 <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 fbf3 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000044 	.word	0x20000044
 8001aa4:	2000004c 	.word	0x2000004c
 8001aa8:	20000048 	.word	0x20000048

08001aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x1c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HAL_IncTick+0x20>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_IncTick+0x20>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	2000004c 	.word	0x2000004c
 8001acc:	200009b4 	.word	0x200009b4

08001ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	; (8001ae0 <HAL_GetTick+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	200009b4 	.word	0x200009b4

08001ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0be      	b.n	8001c84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff f986 	bl	8000e34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fa81 	bl	8002030 <ADC_ConversionStop_Disable>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 8099 	bne.w	8001c72 <HAL_ADC_Init+0x18e>
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8095 	bne.w	8001c72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b50:	f023 0302 	bic.w	r3, r3, #2
 8001b54:	f043 0202 	orr.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7b1b      	ldrb	r3, [r3, #12]
 8001b6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b7c:	d003      	beq.n	8001b86 <HAL_ADC_Init+0xa2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_ADC_Init+0xa8>
 8001b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_Init+0xaa>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7d1b      	ldrb	r3, [r3, #20]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d119      	bne.n	8001bd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	7b1b      	ldrb	r3, [r3, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	035a      	lsls	r2, r3, #13
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	f043 0220 	orr.w	r2, r3, #32
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_ADC_Init+0x1a8>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_Init+0x126>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d104      	bne.n	8001c14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	051b      	lsls	r3, r3, #20
 8001c12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <HAL_ADC_Init+0x1ac>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d10b      	bne.n	8001c50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f023 0303 	bic.w	r3, r3, #3
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c4e:	e018      	b.n	8001c82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f023 0312 	bic.w	r3, r3, #18
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c70:	e007      	b.n	8001c82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001c90:	ff1f0efe 	.word	0xff1f0efe

08001c94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	2b20      	cmp	r3, #32
 8001ca8:	d140      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d139      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cde:	d11d      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d119      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0220 	bic.w	r2, r2, #32
 8001cf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f87c 	bl	8001e1a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0212 	mvn.w	r2, #18
 8001d2a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d36:	2b80      	cmp	r3, #128	; 0x80
 8001d38:	d14f      	bne.n	8001dda <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d148      	bne.n	8001dda <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001d6a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001d6e:	d012      	beq.n	8001d96 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d125      	bne.n	8001dca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001d88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d8c:	d11d      	bne.n	8001dca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d119      	bne.n	8001dca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f971 	bl	80020b2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f06f 020c 	mvn.w	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de4:	2b40      	cmp	r3, #64	; 0x40
 8001de6:	d114      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10d      	bne.n	8001e12 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f812 	bl	8001e2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0201 	mvn.w	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x20>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e0dc      	b.n	800201a <HAL_ADC_ConfigChannel+0x1da>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d81c      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b05      	subs	r3, #5
 8001e82:	221f      	movs	r2, #31
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4019      	ands	r1, r3
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b05      	subs	r3, #5
 8001e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea8:	e03c      	b.n	8001f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d81c      	bhi.n	8001eec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b23      	subs	r3, #35	; 0x23
 8001ec4:	221f      	movs	r2, #31
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4019      	ands	r1, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b23      	subs	r3, #35	; 0x23
 8001ede:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eea:	e01b      	b.n	8001f24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	3b41      	subs	r3, #65	; 0x41
 8001efe:	221f      	movs	r2, #31
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	4019      	ands	r1, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	3b41      	subs	r3, #65	; 0x41
 8001f18:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d91c      	bls.n	8001f66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	2207      	movs	r2, #7
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	4019      	ands	r1, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6898      	ldr	r0, [r3, #8]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	3b1e      	subs	r3, #30
 8001f58:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	e019      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6919      	ldr	r1, [r3, #16]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	2207      	movs	r2, #7
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	4019      	ands	r1, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6898      	ldr	r0, [r3, #8]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d003      	beq.n	8001faa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fa6:	2b11      	cmp	r3, #17
 8001fa8:	d132      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a1d      	ldr	r2, [pc, #116]	; (8002024 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d125      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d126      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d11a      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	0c9a      	lsrs	r2, r3, #18
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ffe:	e007      	b.n	8002010 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002018:	7bfb      	ldrb	r3, [r7, #15]
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40012400 	.word	0x40012400
 8002028:	20000044 	.word	0x20000044
 800202c:	431bde83 	.word	0x431bde83

08002030 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d12e      	bne.n	80020a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800205a:	f7ff fd39 	bl	8001ad0 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002060:	e01b      	b.n	800209a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002062:	f7ff fd35 	bl	8001ad0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d914      	bls.n	800209a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d10d      	bne.n	800209a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f043 0201 	orr.w	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e007      	b.n	80020aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d0dc      	beq.n	8002062 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4906      	ldr	r1, [pc, #24]	; (800215c <__NVIC_EnableIRQ+0x34>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff90 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff2d 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff42 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff90 	bl	80021b4 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5f 	bl	8002160 <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff35 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e00e      	b.n	800230e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	795b      	ldrb	r3, [r3, #5]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe fddb 	bl	8000ebc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002316:	b480      	push	{r7}
 8002318:	b087      	sub	sp, #28
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2202      	movs	r2, #2
 800232a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e00a      	b.n	8002358 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	441a      	add	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3f0      	bcc.n	8002342 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800236e:	693b      	ldr	r3, [r7, #16]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002396:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <HAL_FLASH_Program+0xd8>)
 8002398:	7e1b      	ldrb	r3, [r3, #24]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_FLASH_Program+0x26>
 800239e:	2302      	movs	r3, #2
 80023a0:	e054      	b.n	800244c <HAL_FLASH_Program+0xd0>
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_FLASH_Program+0xd8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ac:	f000 f8a8 	bl	8002500 <FLASH_WaitForLastOperation>
 80023b0:	4603      	mov	r3, r0
 80023b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d144      	bne.n	8002444 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80023c0:	2301      	movs	r3, #1
 80023c2:	757b      	strb	r3, [r7, #21]
 80023c4:	e007      	b.n	80023d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d102      	bne.n	80023d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023cc:	2302      	movs	r3, #2
 80023ce:	757b      	strb	r3, [r7, #21]
 80023d0:	e001      	b.n	80023d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80023d2:	2304      	movs	r3, #4
 80023d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	75bb      	strb	r3, [r7, #22]
 80023da:	e02d      	b.n	8002438 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023dc:	7dbb      	ldrb	r3, [r7, #22]
 80023de:	005a      	lsls	r2, r3, #1
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	eb02 0c03 	add.w	ip, r2, r3
 80023e6:	7dbb      	ldrb	r3, [r7, #22]
 80023e8:	0119      	lsls	r1, r3, #4
 80023ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ee:	f1c1 0620 	rsb	r6, r1, #32
 80023f2:	f1a1 0020 	sub.w	r0, r1, #32
 80023f6:	fa22 f401 	lsr.w	r4, r2, r1
 80023fa:	fa03 f606 	lsl.w	r6, r3, r6
 80023fe:	4334      	orrs	r4, r6
 8002400:	fa23 f000 	lsr.w	r0, r3, r0
 8002404:	4304      	orrs	r4, r0
 8002406:	fa23 f501 	lsr.w	r5, r3, r1
 800240a:	b2a3      	uxth	r3, r4
 800240c:	4619      	mov	r1, r3
 800240e:	4660      	mov	r0, ip
 8002410:	f000 f85a 	bl	80024c8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002414:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002418:	f000 f872 	bl	8002500 <FLASH_WaitForLastOperation>
 800241c:	4603      	mov	r3, r0
 800241e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_FLASH_Program+0xdc>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <HAL_FLASH_Program+0xdc>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002432:	7dbb      	ldrb	r3, [r7, #22]
 8002434:	3301      	adds	r3, #1
 8002436:	75bb      	strb	r3, [r7, #22]
 8002438:	7dba      	ldrb	r2, [r7, #22]
 800243a:	7d7b      	ldrb	r3, [r7, #21]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3cd      	bcc.n	80023dc <HAL_FLASH_Program+0x60>
 8002440:	e000      	b.n	8002444 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002442:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_FLASH_Program+0xd8>)
 8002446:	2200      	movs	r2, #0
 8002448:	761a      	strb	r2, [r3, #24]

  return status;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
}
 800244c:	4618      	mov	r0, r3
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	200009b8 	.word	0x200009b8
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_FLASH_Unlock+0x40>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_FLASH_Unlock+0x40>)
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_FLASH_Unlock+0x44>)
 8002476:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_FLASH_Unlock+0x40>)
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_FLASH_Unlock+0x48>)
 800247c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_FLASH_Unlock+0x40>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800248e:	79fb      	ldrb	r3, [r7, #7]
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40022000 	.word	0x40022000
 80024a0:	45670123 	.word	0x45670123
 80024a4:	cdef89ab 	.word	0xcdef89ab

080024a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_FLASH_Lock+0x1c>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_FLASH_Lock+0x1c>)
 80024b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000

080024c8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <FLASH_Program_HalfWord+0x30>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <FLASH_Program_HalfWord+0x34>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <FLASH_Program_HalfWord+0x34>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	887a      	ldrh	r2, [r7, #2]
 80024ea:	801a      	strh	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200009b8 	.word	0x200009b8
 80024fc:	40022000 	.word	0x40022000

08002500 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fae2 	bl	8001ad0 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800250e:	e010      	b.n	8002532 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d00c      	beq.n	8002532 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <FLASH_WaitForLastOperation+0x2e>
 800251e:	f7ff fad7 	bl	8001ad0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	d201      	bcs.n	8002532 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e025      	b.n	800257e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e8      	bne.n	8002510 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800253e:	4b12      	ldr	r3, [pc, #72]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 800254c:	2220      	movs	r2, #32
 800254e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002550:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10b      	bne.n	8002574 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <FLASH_WaitForLastOperation+0x88>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002574:	f000 f80a 	bl	800258c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000

0800258c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <FLASH_SetErrorCode+0x98>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	4a1f      	ldr	r2, [pc, #124]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <FLASH_SetErrorCode+0x98>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <FLASH_SetErrorCode+0x98>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80025e2:	4b11      	ldr	r3, [pc, #68]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <FLASH_SetErrorCode+0x9c>)
 80025ec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025ee:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <FLASH_SetErrorCode+0x98>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a0c      	ldr	r2, [pc, #48]	; (8002624 <FLASH_SetErrorCode+0x98>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f240 1201 	movw	r2, #257	; 0x101
 8002600:	4293      	cmp	r3, r2
 8002602:	d106      	bne.n	8002612 <FLASH_SetErrorCode+0x86>
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <FLASH_SetErrorCode+0x98>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <FLASH_SetErrorCode+0x98>)
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	61d3      	str	r3, [r2, #28]
}  
 8002610:	e002      	b.n	8002618 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <FLASH_SetErrorCode+0x98>)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60d3      	str	r3, [r2, #12]
}  
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	200009b8 	.word	0x200009b8

0800262c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <HAL_FLASHEx_Erase+0xd0>)
 8002640:	7e1b      	ldrb	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_FLASHEx_Erase+0x1e>
 8002646:	2302      	movs	r3, #2
 8002648:	e053      	b.n	80026f2 <HAL_FLASHEx_Erase+0xc6>
 800264a:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_FLASHEx_Erase+0xd0>)
 800264c:	2201      	movs	r2, #1
 800264e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b02      	cmp	r3, #2
 8002656:	d116      	bne.n	8002686 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002658:	f24c 3050 	movw	r0, #50000	; 0xc350
 800265c:	f7ff ff50 	bl	8002500 <FLASH_WaitForLastOperation>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d141      	bne.n	80026ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002666:	2001      	movs	r0, #1
 8002668:	f000 f84c 	bl	8002704 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800266c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002670:	f7ff ff46 	bl	8002500 <FLASH_WaitForLastOperation>
 8002674:	4603      	mov	r3, r0
 8002676:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <HAL_FLASHEx_Erase+0xd4>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4a20      	ldr	r2, [pc, #128]	; (8002700 <HAL_FLASHEx_Erase+0xd4>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	6113      	str	r3, [r2, #16]
 8002684:	e031      	b.n	80026ea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002686:	f24c 3050 	movw	r0, #50000	; 0xc350
 800268a:	f7ff ff39 	bl	8002500 <FLASH_WaitForLastOperation>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d12a      	bne.n	80026ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f04f 32ff 	mov.w	r2, #4294967295
 800269a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	e019      	b.n	80026d8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f000 f849 	bl	800273c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ae:	f7ff ff27 	bl	8002500 <FLASH_WaitForLastOperation>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_FLASHEx_Erase+0xd4>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_FLASHEx_Erase+0xd4>)
 80026bc:	f023 0302 	bic.w	r3, r3, #2
 80026c0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	601a      	str	r2, [r3, #0]
            break;
 80026ce:	e00c      	b.n	80026ea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	029a      	lsls	r2, r3, #10
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3dc      	bcc.n	80026a4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_FLASHEx_Erase+0xd0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	761a      	strb	r2, [r3, #24]

  return status;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200009b8 	.word	0x200009b8
 8002700:	40022000 	.word	0x40022000

08002704 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <FLASH_MassErase+0x30>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <FLASH_MassErase+0x34>)
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <FLASH_MassErase+0x34>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <FLASH_MassErase+0x34>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <FLASH_MassErase+0x34>)
 8002724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002728:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	200009b8 	.word	0x200009b8
 8002738:	40022000 	.word	0x40022000

0800273c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <FLASH_PageErase+0x38>)
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <FLASH_PageErase+0x3c>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <FLASH_PageErase+0x3c>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002756:	4a08      	ldr	r2, [pc, #32]	; (8002778 <FLASH_PageErase+0x3c>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <FLASH_PageErase+0x3c>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a05      	ldr	r2, [pc, #20]	; (8002778 <FLASH_PageErase+0x3c>)
 8002762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002766:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200009b8 	.word	0x200009b8
 8002778:	40022000 	.word	0x40022000

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b08b      	sub	sp, #44	; 0x2c
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278e:	e169      	b.n	8002a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002790:	2201      	movs	r2, #1
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	f040 8158 	bne.w	8002a5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a9a      	ldr	r2, [pc, #616]	; (8002a1c <HAL_GPIO_Init+0x2a0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d05e      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027b8:	4a98      	ldr	r2, [pc, #608]	; (8002a1c <HAL_GPIO_Init+0x2a0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d875      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027be:	4a98      	ldr	r2, [pc, #608]	; (8002a20 <HAL_GPIO_Init+0x2a4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d058      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027c4:	4a96      	ldr	r2, [pc, #600]	; (8002a20 <HAL_GPIO_Init+0x2a4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d86f      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027ca:	4a96      	ldr	r2, [pc, #600]	; (8002a24 <HAL_GPIO_Init+0x2a8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d052      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027d0:	4a94      	ldr	r2, [pc, #592]	; (8002a24 <HAL_GPIO_Init+0x2a8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d869      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027d6:	4a94      	ldr	r2, [pc, #592]	; (8002a28 <HAL_GPIO_Init+0x2ac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04c      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027dc:	4a92      	ldr	r2, [pc, #584]	; (8002a28 <HAL_GPIO_Init+0x2ac>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d863      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027e2:	4a92      	ldr	r2, [pc, #584]	; (8002a2c <HAL_GPIO_Init+0x2b0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d046      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
 80027e8:	4a90      	ldr	r2, [pc, #576]	; (8002a2c <HAL_GPIO_Init+0x2b0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d85d      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027ee:	2b12      	cmp	r3, #18
 80027f0:	d82a      	bhi.n	8002848 <HAL_GPIO_Init+0xcc>
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d859      	bhi.n	80028aa <HAL_GPIO_Init+0x12e>
 80027f6:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <HAL_GPIO_Init+0x80>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	08002877 	.word	0x08002877
 8002800:	08002851 	.word	0x08002851
 8002804:	08002863 	.word	0x08002863
 8002808:	080028a5 	.word	0x080028a5
 800280c:	080028ab 	.word	0x080028ab
 8002810:	080028ab 	.word	0x080028ab
 8002814:	080028ab 	.word	0x080028ab
 8002818:	080028ab 	.word	0x080028ab
 800281c:	080028ab 	.word	0x080028ab
 8002820:	080028ab 	.word	0x080028ab
 8002824:	080028ab 	.word	0x080028ab
 8002828:	080028ab 	.word	0x080028ab
 800282c:	080028ab 	.word	0x080028ab
 8002830:	080028ab 	.word	0x080028ab
 8002834:	080028ab 	.word	0x080028ab
 8002838:	080028ab 	.word	0x080028ab
 800283c:	080028ab 	.word	0x080028ab
 8002840:	08002859 	.word	0x08002859
 8002844:	0800286d 	.word	0x0800286d
 8002848:	4a79      	ldr	r2, [pc, #484]	; (8002a30 <HAL_GPIO_Init+0x2b4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800284e:	e02c      	b.n	80028aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	623b      	str	r3, [r7, #32]
          break;
 8002856:	e029      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	3304      	adds	r3, #4
 800285e:	623b      	str	r3, [r7, #32]
          break;
 8002860:	e024      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	623b      	str	r3, [r7, #32]
          break;
 800286a:	e01f      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	330c      	adds	r3, #12
 8002872:	623b      	str	r3, [r7, #32]
          break;
 8002874:	e01a      	b.n	80028ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800287e:	2304      	movs	r3, #4
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e013      	b.n	80028ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800288c:	2308      	movs	r3, #8
 800288e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	611a      	str	r2, [r3, #16]
          break;
 8002896:	e009      	b.n	80028ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002898:	2308      	movs	r3, #8
 800289a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	615a      	str	r2, [r3, #20]
          break;
 80028a2:	e003      	b.n	80028ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
          break;
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x130>
          break;
 80028aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d801      	bhi.n	80028b6 <HAL_GPIO_Init+0x13a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e001      	b.n	80028ba <HAL_GPIO_Init+0x13e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2bff      	cmp	r3, #255	; 0xff
 80028c0:	d802      	bhi.n	80028c8 <HAL_GPIO_Init+0x14c>
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	e002      	b.n	80028ce <HAL_GPIO_Init+0x152>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	3b08      	subs	r3, #8
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	210f      	movs	r1, #15
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	401a      	ands	r2, r3
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	431a      	orrs	r2, r3
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80b1 	beq.w	8002a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028fc:	4b4d      	ldr	r3, [pc, #308]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6193      	str	r3, [r2, #24]
 8002908:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_GPIO_Init+0x2b8>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002914:	4a48      	ldr	r2, [pc, #288]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3302      	adds	r3, #2
 800291c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	220f      	movs	r2, #15
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <HAL_GPIO_Init+0x2c0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d013      	beq.n	8002968 <HAL_GPIO_Init+0x1ec>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3f      	ldr	r2, [pc, #252]	; (8002a40 <HAL_GPIO_Init+0x2c4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00d      	beq.n	8002964 <HAL_GPIO_Init+0x1e8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3e      	ldr	r2, [pc, #248]	; (8002a44 <HAL_GPIO_Init+0x2c8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <HAL_GPIO_Init+0x1e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a3d      	ldr	r2, [pc, #244]	; (8002a48 <HAL_GPIO_Init+0x2cc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_GPIO_Init+0x1e0>
 8002958:	2303      	movs	r3, #3
 800295a:	e006      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 800295c:	2304      	movs	r3, #4
 800295e:	e004      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002960:	2302      	movs	r3, #2
 8002962:	e002      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_GPIO_Init+0x1ee>
 8002968:	2300      	movs	r3, #0
 800296a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800296c:	f002 0203 	and.w	r2, r2, #3
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4093      	lsls	r3, r2
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800297a:	492f      	ldr	r1, [pc, #188]	; (8002a38 <HAL_GPIO_Init+0x2bc>)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002994:	4b2d      	ldr	r3, [pc, #180]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	492c      	ldr	r1, [pc, #176]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4928      	ldr	r1, [pc, #160]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4922      	ldr	r1, [pc, #136]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	491e      	ldr	r1, [pc, #120]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d006      	beq.n	80029f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4918      	ldr	r1, [pc, #96]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	608b      	str	r3, [r1, #8]
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	4914      	ldr	r1, [pc, #80]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d021      	beq.n	8002a50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	490e      	ldr	r1, [pc, #56]	; (8002a4c <HAL_GPIO_Init+0x2d0>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60cb      	str	r3, [r1, #12]
 8002a18:	e021      	b.n	8002a5e <HAL_GPIO_Init+0x2e2>
 8002a1a:	bf00      	nop
 8002a1c:	10320000 	.word	0x10320000
 8002a20:	10310000 	.word	0x10310000
 8002a24:	10220000 	.word	0x10220000
 8002a28:	10210000 	.word	0x10210000
 8002a2c:	10120000 	.word	0x10120000
 8002a30:	10110000 	.word	0x10110000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_GPIO_Init+0x304>)
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	4909      	ldr	r1, [pc, #36]	; (8002a80 <HAL_GPIO_Init+0x304>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	3301      	adds	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f47f ae8e 	bne.w	8002790 <HAL_GPIO_Init+0x14>
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	372c      	adds	r7, #44	; 0x2c
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e001      	b.n	8002aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac2:	787b      	ldrb	r3, [r7, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	041a      	lsls	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fc2c 	bl	8000360 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b08b      	sub	sp, #44	; 0x2c
 8002b18:	af06      	add	r7, sp, #24
 8002b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0fd      	b.n	8002d22 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f006 ffce 	bl	8009adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 ffc9 	bl	8005ae4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	687e      	ldr	r6, [r7, #4]
 8002b5a:	466d      	mov	r5, sp
 8002b5c:	f106 0410 	add.w	r4, r6, #16
 8002b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	1d33      	adds	r3, r6, #4
 8002b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f002 ff93 	bl	8005a98 <USB_CoreInit>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0ce      	b.n	8002d22 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 ffc4 	bl	8005b18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e04c      	b.n	8002c30 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	b298      	uxth	r0, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3336      	adds	r3, #54	; 0x36
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3303      	adds	r3, #3
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3338      	adds	r3, #56	; 0x38
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333c      	adds	r3, #60	; 0x3c
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3340      	adds	r3, #64	; 0x40
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3ad      	bcc.n	8002b96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e044      	b.n	8002cca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3b5      	bcc.n	8002c40 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	687e      	ldr	r6, [r7, #4]
 8002cdc:	466d      	mov	r5, sp
 8002cde:	f106 0410 	add.w	r4, r6, #16
 8002ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	602b      	str	r3, [r5, #0]
 8002cea:	1d33      	adds	r3, r6, #4
 8002cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f002 ff1e 	bl	8005b30 <USB_DevInit>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00d      	b.n	8002d22 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f005 f88f 	bl	8007e3e <USB_DevDisconnect>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_Start+0x16>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e016      	b.n	8002d6e <HAL_PCD_Start+0x44>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 feb3 	bl	8005ab8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d52:	2101      	movs	r1, #1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f007 f934 	bl	8009fc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f005 f863 	bl	8007e2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f005 f865 	bl	8007e52 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fb61 	bl	800345c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 f857 	bl	8007e52 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d112      	bne.n	8002dd6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f006 ff02 	bl	8009bd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f925 	bl	8003020 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f005 f839 	bl	8007e52 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d10b      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f005 f822 	bl	8007e52 <USB_ReadInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d10b      	bne.n	8002e32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 f80b 	bl	8007e52 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	d126      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0208 	bic.w	r2, r2, #8
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f006 fee3 	bl	8009c44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e90:	b292      	uxth	r2, r2
 8002e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 ffd9 	bl	8007e52 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eaa:	f040 8084 	bne.w	8002fb6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e011      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f107 0120 	add.w	r1, r7, #32
 8002ecc:	440b      	add	r3, r1
 8002ece:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	d9ea      	bls.n	8002eb4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f0e:	bf00      	nop
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f6      	beq.n	8002f10 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f34:	b292      	uxth	r2, r2
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e010      	b.n	8002f62 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4611      	mov	r1, r2
 8002f48:	7ffa      	ldrb	r2, [r7, #31]
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	440a      	add	r2, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	f107 0120 	add.w	r1, r7, #32
 8002f54:	440b      	add	r3, r1
 8002f56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f5a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d9eb      	bls.n	8002f40 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f006 fe2d 	bl	8009c10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 ff49 	bl	8007e52 <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	d10e      	bne.n	8002fea <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f006 fde6 	bl	8009bb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 ff2f 	bl	8007e52 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d10b      	bne.n	8003018 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003012:	b292      	uxth	r2, r2
 8003014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003018:	bf00      	nop
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_SetAddress+0x1a>
 8003036:	2302      	movs	r3, #2
 8003038:	e013      	b.n	8003062 <HAL_PCD_SetAddress+0x42>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fed6 	bl	8007e04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	4608      	mov	r0, r1
 8003074:	4611      	mov	r1, r2
 8003076:	461a      	mov	r2, r3
 8003078:	4603      	mov	r3, r0
 800307a:	70fb      	strb	r3, [r7, #3]
 800307c:	460b      	mov	r3, r1
 800307e:	803b      	strh	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da0e      	bge.n	80030ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	705a      	strb	r2, [r3, #1]
 80030ac:	e00e      	b.n	80030cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 0207 	and.w	r2, r3, #7
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030d8:	883a      	ldrh	r2, [r7, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	78ba      	ldrb	r2, [r7, #2]
 80030e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030f6:	78bb      	ldrb	r3, [r7, #2]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Open+0xa6>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Open+0xc4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f002 fd26 	bl	8005b70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0e      	bge.n	8003168 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00e      	b.n	8003186 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_EP_Close+0x6a>
 800319c:	2302      	movs	r3, #2
 800319e:	e00e      	b.n	80031be <HAL_PCD_EP_Close+0x88>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f848 	bl	8006244 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f003 0207 	and.w	r2, r3, #7
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	b2da      	uxtb	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	4618      	mov	r0, r3
 8003224:	f003 f9fa 	bl	800661c <USB_EPStartXfer>
 8003228:	e005      	b.n	8003236 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 f9f3 	bl	800661c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	f003 0207 	and.w	r2, r3, #7
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	440b      	add	r3, r1
 800325e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	460b      	mov	r3, r1
 800327c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c6:	7afb      	ldrb	r3, [r7, #11]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6979      	ldr	r1, [r7, #20]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 f9a0 	bl	800661c <USB_EPStartXfer>
 80032dc:	e005      	b.n	80032ea <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6979      	ldr	r1, [r7, #20]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f003 f999 	bl	800661c <USB_EPStartXfer>
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0207 	and.w	r2, r3, #7
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d901      	bls.n	8003312 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e04c      	b.n	80033ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da0e      	bge.n	8003338 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	705a      	strb	r2, [r3, #1]
 8003336:	e00c      	b.n	8003352 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_PCD_EP_SetStall+0x7e>
 800336e:	2302      	movs	r3, #2
 8003370:	e01c      	b.n	80033ac <HAL_PCD_EP_SetStall+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f004 fc42 	bl	8007c0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	2b00      	cmp	r3, #0
 800338e:	d108      	bne.n	80033a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f004 fd67 	bl	8007e70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d901      	bls.n	80033d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e040      	b.n	8003454 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da0e      	bge.n	80033f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	705a      	strb	r2, [r3, #1]
 80033f6:	e00e      	b.n	8003416 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 0207 	and.w	r2, r3, #7
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	b2da      	uxtb	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_ClrStall+0x82>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_ClrStall+0xa0>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f004 fc30 	bl	8007caa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003464:	e2ec      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800346e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003470:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800347c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 8161 	bne.w	8003748 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003486:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	d152      	bne.n	8003536 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800349c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a0:	81fb      	strh	r3, [r7, #14]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	89fb      	ldrh	r3, [r7, #14]
 80034a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3328      	adds	r3, #40	; 0x28
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	3302      	adds	r3, #2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	441a      	add	r2, r3
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f006 fb43 	bl	8009b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 829b 	beq.w	8003a40 <PCD_EP_ISR_Handler+0x5e4>
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 8296 	bne.w	8003a40 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003520:	b2da      	uxtb	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b292      	uxth	r2, r2
 8003528:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003534:	e284      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003546:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d034      	beq.n	80035ba <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003558:	b29b      	uxth	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	3306      	adds	r3, #6
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800358e:	b29b      	uxth	r3, r3
 8003590:	f004 fcbe 	bl	8007f10 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29a      	uxth	r2, r3
 800359c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035a0:	4013      	ands	r3, r2
 80035a2:	823b      	strh	r3, [r7, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	8a3a      	ldrh	r2, [r7, #16]
 80035aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ae:	b292      	uxth	r2, r2
 80035b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f006 fab8 	bl	8009b28 <HAL_PCD_SetupStageCallback>
 80035b8:	e242      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f280 823e 	bge.w	8003a40 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035d0:	4013      	ands	r3, r2
 80035d2:	83bb      	strh	r3, [r7, #28]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	8bba      	ldrh	r2, [r7, #28]
 80035da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035de:	b292      	uxth	r2, r2
 80035e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	3306      	adds	r3, #6
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d019      	beq.n	800364a <PCD_EP_ISR_Handler+0x1ee>
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d015      	beq.n	800364a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	6959      	ldr	r1, [r3, #20]
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800362e:	b29b      	uxth	r3, r3
 8003630:	f004 fc6e 	bl	8007f10 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	441a      	add	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003642:	2100      	movs	r1, #0
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f006 fa81 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 81f2 	bne.w	8003a40 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d112      	bne.n	80036aa <PCD_EP_ISR_Handler+0x24e>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368e:	b29a      	uxth	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e02f      	b.n	800370a <PCD_EP_ISR_Handler+0x2ae>
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b3e      	cmp	r3, #62	; 0x3e
 80036b0:	d813      	bhi.n	80036da <PCD_EP_ISR_Handler+0x27e>
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	085b      	lsrs	r3, r3, #1
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <PCD_EP_ISR_Handler+0x270>
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	3301      	adds	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	029b      	lsls	r3, r3, #10
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	e017      	b.n	800370a <PCD_EP_ISR_Handler+0x2ae>
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	633b      	str	r3, [r7, #48]	; 0x30
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <PCD_EP_ISR_Handler+0x298>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f0:	3b01      	subs	r3, #1
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	029b      	lsls	r3, r3, #10
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003704:	b29a      	uxth	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	827b      	strh	r3, [r7, #18]
 800371c:	8a7b      	ldrh	r3, [r7, #18]
 800371e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003722:	827b      	strh	r3, [r7, #18]
 8003724:	8a7b      	ldrh	r3, [r7, #18]
 8003726:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800372a:	827b      	strh	r3, [r7, #18]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800373a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]
 8003746:	e17b      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800375a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800375e:	2b00      	cmp	r3, #0
 8003760:	f280 80ea 	bge.w	8003938 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29a      	uxth	r2, r3
 8003776:	f640 738f 	movw	r3, #3983	; 0xf8f
 800377a:	4013      	ands	r3, r2
 800377c:	853b      	strh	r3, [r7, #40]	; 0x28
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800378e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003792:	b292      	uxth	r2, r2
 8003794:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003796:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d122      	bne.n	80037fa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037bc:	b29b      	uxth	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	3306      	adds	r3, #6
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037dc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80037de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8087 	beq.w	80038f4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	6959      	ldr	r1, [r3, #20]
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	88da      	ldrh	r2, [r3, #6]
 80037f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037f4:	f004 fb8c 	bl	8007f10 <USB_ReadPMA>
 80037f8:	e07c      	b.n	80038f4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d108      	bne.n	8003814 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003802:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003804:	461a      	mov	r2, r3
 8003806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f927 	bl	8003a5c <HAL_PCD_EP_DB_Receive>
 800380e:	4603      	mov	r3, r0
 8003810:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003812:	e06f      	b.n	80038f4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800382e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	441a      	add	r2, r3
 800383e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003850:	b29b      	uxth	r3, r3
 8003852:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d021      	beq.n	80038b2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003876:	b29b      	uxth	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	3302      	adds	r3, #2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003896:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02a      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	6959      	ldr	r1, [r3, #20]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	891a      	ldrh	r2, [r3, #8]
 80038aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ac:	f004 fb30 	bl	8007f10 <USB_ReadPMA>
 80038b0:	e020      	b.n	80038f4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	3306      	adds	r3, #6
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	6959      	ldr	r1, [r3, #20]
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	895a      	ldrh	r2, [r3, #10]
 80038ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038f0:	f004 fb0e 	bl	8007f10 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038fa:	441a      	add	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003906:	441a      	add	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <PCD_EP_ISR_Handler+0x4c2>
 8003914:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d206      	bcs.n	800392c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f006 f911 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
 800392a:	e005      	b.n	8003938 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fe72 	bl	800661c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003938:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d07e      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	843b      	strh	r3, [r7, #32]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	441a      	add	r2, r3
 8003980:	8c3b      	ldrh	r3, [r7, #32]
 8003982:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003986:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800398a:	b29b      	uxth	r3, r3
 800398c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	78db      	ldrb	r3, [r3, #3]
 8003992:	2b03      	cmp	r3, #3
 8003994:	d00c      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x554>
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	78db      	ldrb	r3, [r3, #3]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d146      	bne.n	8003a34 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d141      	bne.n	8003a34 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	3302      	adds	r3, #2
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	8bfb      	ldrh	r3, [r7, #30]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d906      	bls.n	80039f2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	8bfb      	ldrh	r3, [r7, #30]
 80039ea:	1ad2      	subs	r2, r2, r3
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	619a      	str	r2, [r3, #24]
 80039f0:	e002      	b.n	80039f8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f006 f8bb 	bl	8009b82 <HAL_PCD_DataInStageCallback>
 8003a0c:	e018      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	8bfb      	ldrh	r3, [r7, #30]
 8003a14:	441a      	add	r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	8bfb      	ldrh	r3, [r7, #30]
 8003a20:	441a      	add	r2, r3
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 fdf5 	bl	800661c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a32:	e005      	b.n	8003a40 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a36:	461a      	mov	r2, r3
 8003a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f91b 	bl	8003c76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f6ff ad0a 	blt.w	8003466 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3738      	adds	r7, #56	; 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d07e      	beq.n	8003b72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	3302      	adds	r3, #2
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	8b7b      	ldrh	r3, [r7, #26]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d306      	bcc.n	8003ab6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	8b7b      	ldrh	r3, [r7, #26]
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	619a      	str	r2, [r3, #24]
 8003ab4:	e002      	b.n	8003abc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d123      	bne.n	8003b0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ade:	833b      	strh	r3, [r7, #24]
 8003ae0:	8b3b      	ldrh	r3, [r7, #24]
 8003ae2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ae6:	833b      	strh	r3, [r7, #24]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	8b3b      	ldrh	r3, [r7, #24]
 8003af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01f      	beq.n	8003b56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	82fb      	strh	r3, [r7, #22]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b56:	8b7b      	ldrh	r3, [r7, #26]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 8087 	beq.w	8003c6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6959      	ldr	r1, [r3, #20]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	891a      	ldrh	r2, [r3, #8]
 8003b6a:	8b7b      	ldrh	r3, [r7, #26]
 8003b6c:	f004 f9d0 	bl	8007f10 <USB_ReadPMA>
 8003b70:	e07c      	b.n	8003c6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	3306      	adds	r3, #6
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d306      	bcc.n	8003bb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	8b7b      	ldrh	r3, [r7, #26]
 8003bac:	1ad2      	subs	r2, r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e002      	b.n	8003bba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d123      	bne.n	8003c0a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	83fb      	strh	r3, [r7, #30]
 8003bde:	8bfb      	ldrh	r3, [r7, #30]
 8003be0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003be4:	83fb      	strh	r3, [r7, #30]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	8bfb      	ldrh	r3, [r7, #30]
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11f      	bne.n	8003c54 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	83bb      	strh	r3, [r7, #28]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	8bbb      	ldrh	r3, [r7, #28]
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c54:	8b7b      	ldrh	r3, [r7, #26]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d008      	beq.n	8003c6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6959      	ldr	r1, [r3, #20]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	895a      	ldrh	r2, [r3, #10]
 8003c66:	8b7b      	ldrh	r3, [r7, #26]
 8003c68:	f004 f952 	bl	8007f10 <USB_ReadPMA>
    }
  }

  return count;
 8003c6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3720      	adds	r7, #32
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b0a2      	sub	sp, #136	; 0x88
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 81c7 	beq.w	800401e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d907      	bls.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	699a      	ldr	r2, [r3, #24]
 8003ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	619a      	str	r2, [r3, #24]
 8003cd6:	e002      	b.n	8003cde <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 80b9 	bne.w	8003e5a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d126      	bne.n	8003d3e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	4413      	add	r3, r2
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	011a      	lsls	r2, r3, #4
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	4413      	add	r3, r2
 8003d12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	801a      	strh	r2, [r3, #0]
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	e01a      	b.n	8003d74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d116      	bne.n	8003d74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	4413      	add	r3, r2
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	011a      	lsls	r2, r3, #4
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	4413      	add	r3, r2
 8003d68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2200      	movs	r2, #0
 8003d72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d126      	bne.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	011a      	lsls	r2, r3, #4
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	801a      	strh	r2, [r3, #0]
 8003dce:	e017      	b.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d113      	bne.n	8003e00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	4413      	add	r3, r2
 8003de8:	623b      	str	r3, [r7, #32]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	011a      	lsls	r2, r3, #4
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	4413      	add	r3, r2
 8003df4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4619      	mov	r1, r3
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f005 febb 	bl	8009b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 82d4 	beq.w	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	827b      	strh	r3, [r7, #18]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	441a      	add	r2, r3
 8003e42:	8a7b      	ldrh	r3, [r7, #18]
 8003e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	8013      	strh	r3, [r2, #0]
 8003e58:	e2b2      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d021      	beq.n	8003ea8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 8286 	bne.w	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eca:	441a      	add	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6a1a      	ldr	r2, [r3, #32]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d309      	bcc.n	8003ef0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	1ad2      	subs	r2, r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	621a      	str	r2, [r3, #32]
 8003eee:	e015      	b.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003ef8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003efc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f06:	e009      	b.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d155      	bne.n	8003fd0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	4413      	add	r3, r2
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	4413      	add	r3, r2
 8003f46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d112      	bne.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x302>
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	801a      	strh	r2, [r3, #0]
 8003f76:	e047      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f7c:	d811      	bhi.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f90:	3301      	adds	r3, #1
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	801a      	strh	r2, [r3, #0]
 8003fa0:	e032      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_PCD_EP_DB_Transmit+0x342>
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	e01b      	b.n	8004008 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d117      	bne.n	8004008 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fec:	4413      	add	r3, r2
 8003fee:	643b      	str	r3, [r7, #64]	; 0x40
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	011a      	lsls	r2, r3, #4
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004002:	b29a      	uxth	r2, r3
 8004004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004006:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6959      	ldr	r1, [r3, #20]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	891a      	ldrh	r2, [r3, #8]
 8004014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004016:	b29b      	uxth	r3, r3
 8004018:	f003 ff35 	bl	8007e86 <USB_WritePMA>
 800401c:	e1d0      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	3306      	adds	r3, #6
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004046:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004052:	429a      	cmp	r2, r3
 8004054:	d307      	bcc.n	8004066 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	619a      	str	r2, [r3, #24]
 8004064:	e002      	b.n	800406c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f040 80c4 	bne.w	80041fe <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d126      	bne.n	80040cc <HAL_PCD_EP_DB_Transmit+0x456>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004092:	4413      	add	r3, r2
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	011a      	lsls	r2, r3, #4
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	4413      	add	r3, r2
 80040a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b4:	801a      	strh	r2, [r3, #0]
 80040b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e01a      	b.n	8004102 <HAL_PCD_EP_DB_Transmit+0x48c>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d116      	bne.n	8004102 <HAL_PCD_EP_DB_Transmit+0x48c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	677b      	str	r3, [r7, #116]	; 0x74
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e8:	4413      	add	r3, r2
 80040ea:	677b      	str	r3, [r7, #116]	; 0x74
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	011a      	lsls	r2, r3, #4
 80040f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f4:	4413      	add	r3, r2
 80040f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040fa:	673b      	str	r3, [r7, #112]	; 0x70
 80040fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	67bb      	str	r3, [r7, #120]	; 0x78
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	785b      	ldrb	r3, [r3, #1]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d12f      	bne.n	8004170 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004120:	b29b      	uxth	r3, r3
 8004122:	461a      	mov	r2, r3
 8004124:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004128:	4413      	add	r3, r2
 800412a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004138:	4413      	add	r3, r2
 800413a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800413e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800414e:	b29a      	uxth	r2, r3
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004154:	801a      	strh	r2, [r3, #0]
 8004156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	b29a      	uxth	r2, r3
 8004168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e017      	b.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d113      	bne.n	80041a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004180:	b29b      	uxth	r3, r3
 8004182:	461a      	mov	r2, r3
 8004184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004186:	4413      	add	r3, r2
 8004188:	67bb      	str	r3, [r7, #120]	; 0x78
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	011a      	lsls	r2, r3, #4
 8004190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004192:	4413      	add	r3, r2
 8004194:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004198:	67fb      	str	r3, [r7, #124]	; 0x7c
 800419a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800419c:	2200      	movs	r2, #0
 800419e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	4619      	mov	r1, r3
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f005 fceb 	bl	8009b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f040 8104 	bne.w	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	461a      	mov	r2, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	8013      	strh	r3, [r2, #0]
 80041fc:	e0e0      	b.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d121      	bne.n	800424c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004222:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80b4 	bne.w	80043c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004260:	441a      	add	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800426e:	441a      	add	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6a1a      	ldr	r2, [r3, #32]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d309      	bcc.n	8004294 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	1ad2      	subs	r2, r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	621a      	str	r2, [r3, #32]
 8004292:	e015      	b.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d107      	bne.n	80042ac <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800429c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042aa:	e009      	b.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	667b      	str	r3, [r7, #100]	; 0x64
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	785b      	ldrb	r3, [r3, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d155      	bne.n	800437a <HAL_PCD_EP_DB_Transmit+0x704>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042dc:	b29b      	uxth	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e2:	4413      	add	r3, r2
 80042e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	011a      	lsls	r2, r3, #4
 80042ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ee:	4413      	add	r3, r2
 80042f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d112      	bne.n	8004322 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80042fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004306:	b29a      	uxth	r2, r3
 8004308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004316:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800431a:	b29a      	uxth	r2, r3
 800431c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	e044      	b.n	80043ac <HAL_PCD_EP_DB_Transmit+0x736>
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	2b3e      	cmp	r3, #62	; 0x3e
 8004326:	d811      	bhi.n	800434c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	657b      	str	r3, [r7, #84]	; 0x54
 800432e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433a:	3301      	adds	r3, #1
 800433c:	657b      	str	r3, [r7, #84]	; 0x54
 800433e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004340:	b29b      	uxth	r3, r3
 8004342:	029b      	lsls	r3, r3, #10
 8004344:	b29a      	uxth	r2, r3
 8004346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e02f      	b.n	80043ac <HAL_PCD_EP_DB_Transmit+0x736>
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	657b      	str	r3, [r7, #84]	; 0x54
 8004352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800435c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435e:	3b01      	subs	r3, #1
 8004360:	657b      	str	r3, [r7, #84]	; 0x54
 8004362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004364:	b29b      	uxth	r3, r3
 8004366:	029b      	lsls	r3, r3, #10
 8004368:	b29b      	uxth	r3, r3
 800436a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004372:	b29a      	uxth	r2, r3
 8004374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	e018      	b.n	80043ac <HAL_PCD_EP_DB_Transmit+0x736>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	785b      	ldrb	r3, [r3, #1]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d114      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x736>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438a:	b29b      	uxth	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004390:	4413      	add	r3, r2
 8004392:	667b      	str	r3, [r7, #100]	; 0x64
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	011a      	lsls	r2, r3, #4
 800439a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439c:	4413      	add	r3, r2
 800439e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a2:	663b      	str	r3, [r7, #96]	; 0x60
 80043a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6959      	ldr	r1, [r3, #20]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	895a      	ldrh	r2, [r3, #10]
 80043b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f003 fd63 	bl	8007e86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043da:	823b      	strh	r3, [r7, #16]
 80043dc:	8a3b      	ldrh	r3, [r7, #16]
 80043de:	f083 0310 	eor.w	r3, r3, #16
 80043e2:	823b      	strh	r3, [r7, #16]
 80043e4:	8a3b      	ldrh	r3, [r7, #16]
 80043e6:	f083 0320 	eor.w	r3, r3, #32
 80043ea:	823b      	strh	r3, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	8a3b      	ldrh	r3, [r7, #16]
 80043fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3788      	adds	r7, #136	; 0x88
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
 8004428:	4613      	mov	r3, r2
 800442a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004438:	897b      	ldrh	r3, [r7, #10]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e009      	b.n	8004464 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004450:	897a      	ldrh	r2, [r7, #10]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	b29a      	uxth	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	80da      	strh	r2, [r3, #6]
 8004478:	e00b      	b.n	8004492 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2201      	movs	r2, #1
 800447e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	b29a      	uxth	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0c1b      	lsrs	r3, r3, #16
 800448c:	b29a      	uxth	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e26c      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8087 	beq.w	80045ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c0:	4b92      	ldr	r3, [pc, #584]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d00c      	beq.n	80044e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044cc:	4b8f      	ldr	r3, [pc, #572]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d112      	bne.n	80044fe <HAL_RCC_OscConfig+0x5e>
 80044d8:	4b8c      	ldr	r3, [pc, #560]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e4:	d10b      	bne.n	80044fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d06c      	beq.n	80045cc <HAL_RCC_OscConfig+0x12c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d168      	bne.n	80045cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e246      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x76>
 8004508:	4b80      	ldr	r3, [pc, #512]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a7f      	ldr	r2, [pc, #508]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e02e      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b7b      	ldr	r3, [pc, #492]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7a      	ldr	r2, [pc, #488]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b78      	ldr	r3, [pc, #480]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a77      	ldr	r2, [pc, #476]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e01d      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0xbc>
 8004542:	4b72      	ldr	r3, [pc, #456]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a71      	ldr	r2, [pc, #452]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0xd4>
 800455c:	4b6b      	ldr	r3, [pc, #428]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6a      	ldr	r2, [pc, #424]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b68      	ldr	r3, [pc, #416]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a67      	ldr	r2, [pc, #412]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fd faa8 	bl	8001ad0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004584:	f7fd faa4 	bl	8001ad0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1fa      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xe4>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd fa94 	bl	8001ad0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fd fa90 	bl	8001ad0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1e6      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	4b53      	ldr	r3, [pc, #332]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x10c>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045da:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045e6:	4b49      	ldr	r3, [pc, #292]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11c      	bne.n	800462c <HAL_RCC_OscConfig+0x18c>
 80045f2:	4b46      	ldr	r3, [pc, #280]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	4b43      	ldr	r3, [pc, #268]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_OscConfig+0x176>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e1ba      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4939      	ldr	r1, [pc, #228]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	e03a      	b.n	80046a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b36      	ldr	r3, [pc, #216]	; (8004710 <HAL_RCC_OscConfig+0x270>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463a:	f7fd fa49 	bl	8001ad0 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004642:	f7fd fa45 	bl	8001ad0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e19b      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b2a      	ldr	r3, [pc, #168]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4927      	ldr	r1, [pc, #156]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <HAL_RCC_OscConfig+0x270>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd fa28 	bl	8001ad0 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004684:	f7fd fa24 	bl	8001ad0 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e17a      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d03a      	beq.n	8004724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d019      	beq.n	80046ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fd fa08 	bl	8001ad0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fd fa04 	bl	8001ad0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e15a      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_RCC_OscConfig+0x26c>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f000 faa6 	bl	8004c34 <RCC_Delay>
 80046e8:	e01c      	b.n	8004724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f0:	f7fd f9ee 	bl	8001ad0 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f6:	e00f      	b.n	8004718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f8:	f7fd f9ea 	bl	8001ad0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d908      	bls.n	8004718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e140      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	42420000 	.word	0x42420000
 8004714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	4b9e      	ldr	r3, [pc, #632]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1e9      	bne.n	80046f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a6 	beq.w	800487e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004736:	4b97      	ldr	r3, [pc, #604]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10d      	bne.n	800475e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	4b94      	ldr	r3, [pc, #592]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	4a93      	ldr	r2, [pc, #588]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	61d3      	str	r3, [r2, #28]
 800474e:	4b91      	ldr	r3, [pc, #580]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b8e      	ldr	r3, [pc, #568]	; (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d118      	bne.n	800479c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a8a      	ldr	r2, [pc, #552]	; (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004776:	f7fd f9ab 	bl	8001ad0 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477e:	f7fd f9a7 	bl	8001ad0 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b64      	cmp	r3, #100	; 0x64
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e0fd      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x312>
 80047a4:	4b7b      	ldr	r3, [pc, #492]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	4a7a      	ldr	r2, [pc, #488]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6213      	str	r3, [r2, #32]
 80047b0:	e02d      	b.n	800480e <HAL_RCC_OscConfig+0x36e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x334>
 80047ba:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	4a75      	ldr	r2, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	6213      	str	r3, [r2, #32]
 80047c6:	4b73      	ldr	r3, [pc, #460]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4a72      	ldr	r2, [pc, #456]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	6213      	str	r3, [r2, #32]
 80047d2:	e01c      	b.n	800480e <HAL_RCC_OscConfig+0x36e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	2b05      	cmp	r3, #5
 80047da:	d10c      	bne.n	80047f6 <HAL_RCC_OscConfig+0x356>
 80047dc:	4b6d      	ldr	r3, [pc, #436]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4a6c      	ldr	r2, [pc, #432]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	6213      	str	r3, [r2, #32]
 80047e8:	4b6a      	ldr	r3, [pc, #424]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	4a69      	ldr	r2, [pc, #420]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6213      	str	r3, [r2, #32]
 80047f4:	e00b      	b.n	800480e <HAL_RCC_OscConfig+0x36e>
 80047f6:	4b67      	ldr	r3, [pc, #412]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4a66      	ldr	r2, [pc, #408]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6213      	str	r3, [r2, #32]
 8004802:	4b64      	ldr	r3, [pc, #400]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4a63      	ldr	r2, [pc, #396]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d015      	beq.n	8004842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fd f95b 	bl	8001ad0 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd f957 	bl	8001ad0 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e0ab      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004834:	4b57      	ldr	r3, [pc, #348]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ee      	beq.n	800481e <HAL_RCC_OscConfig+0x37e>
 8004840:	e014      	b.n	800486c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd f945 	bl	8001ad0 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd f941 	bl	8001ad0 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e095      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004860:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ee      	bne.n	800484a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d105      	bne.n	800487e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004872:	4b48      	ldr	r3, [pc, #288]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	4a47      	ldr	r2, [pc, #284]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8081 	beq.w	800498a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b08      	cmp	r3, #8
 8004892:	d061      	beq.n	8004958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d146      	bne.n	800492a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_RCC_OscConfig+0x4fc>)
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fd f915 	bl	8001ad0 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd f911 	bl	8001ad0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e067      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048bc:	4b35      	ldr	r3, [pc, #212]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d108      	bne.n	80048e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	492d      	ldr	r1, [pc, #180]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e4:	4b2b      	ldr	r3, [pc, #172]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a19      	ldr	r1, [r3, #32]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	430b      	orrs	r3, r1
 80048f6:	4927      	ldr	r1, [pc, #156]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_RCC_OscConfig+0x4fc>)
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fd f8e5 	bl	8001ad0 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490a:	f7fd f8e1 	bl	8001ad0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e037      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x46a>
 8004928:	e02f      	b.n	800498a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <HAL_RCC_OscConfig+0x4fc>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004930:	f7fd f8ce 	bl	8001ad0 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fd f8ca 	bl	8001ad0 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e020      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f0      	bne.n	8004938 <HAL_RCC_OscConfig+0x498>
 8004956:	e018      	b.n	800498a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e013      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <HAL_RCC_OscConfig+0x4f4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
 800499c:	42420060 	.word	0x42420060

080049a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0d0      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d910      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c2:	4b67      	ldr	r3, [pc, #412]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 0207 	bic.w	r2, r3, #7
 80049ca:	4965      	ldr	r1, [pc, #404]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b63      	ldr	r3, [pc, #396]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b8      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b59      	ldr	r3, [pc, #356]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a52      	ldr	r2, [pc, #328]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494d      	ldr	r1, [pc, #308]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d040      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b47      	ldr	r3, [pc, #284]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d115      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07f      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e073      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a6e:	4b3d      	ldr	r3, [pc, #244]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06b      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a7e:	4b39      	ldr	r3, [pc, #228]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f023 0203 	bic.w	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	4936      	ldr	r1, [pc, #216]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a90:	f7fd f81e 	bl	8001ad0 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	e00a      	b.n	8004aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a98:	f7fd f81a 	bl	8001ad0 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e053      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 020c 	and.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d1eb      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d210      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4922      	ldr	r1, [pc, #136]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e032      	b.n	8004b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4916      	ldr	r1, [pc, #88]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490e      	ldr	r1, [pc, #56]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f821 	bl	8004b74 <HAL_RCC_GetSysClockFreq>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_ClockConfig+0x1c4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	490a      	ldr	r1, [pc, #40]	; (8004b68 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	5ccb      	ldrb	r3, [r1, r3]
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1cc>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_RCC_ClockConfig+0x1d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc ff7c 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40021000 	.word	0x40021000
 8004b68:	0800b02c 	.word	0x0800b02c
 8004b6c:	20000044 	.word	0x20000044
 8004b70:	20000048 	.word	0x20000048

08004b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b74:	b490      	push	{r4, r7}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b7a:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b7c:	1d3c      	adds	r4, r7, #4
 8004b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b84:	f240 2301 	movw	r3, #513	; 0x201
 8004b88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b9e:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x46>
 8004bb2:	e02d      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bb4:	4b1d      	ldr	r3, [pc, #116]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb6:	623b      	str	r3, [r7, #32]
      break;
 8004bb8:	e02d      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	0c9b      	lsrs	r3, r3, #18
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d013      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c5b      	lsrs	r3, r3, #17
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004be6:	4413      	add	r3, r2
 8004be8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bf2:	fb02 f203 	mul.w	r2, r2, r3
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e004      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	623b      	str	r3, [r7, #32]
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c12:	623b      	str	r3, [r7, #32]
      break;
 8004c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3728      	adds	r7, #40	; 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc90      	pop	{r4, r7}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	0800afcc 	.word	0x0800afcc
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	003d0900 	.word	0x003d0900

08004c34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <RCC_Delay+0x34>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <RCC_Delay+0x38>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0a5b      	lsrs	r3, r3, #9
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c50:	bf00      	nop
  }
  while (Delay --);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	1e5a      	subs	r2, r3, #1
 8004c56:	60fa      	str	r2, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f9      	bne.n	8004c50 <RCC_Delay+0x1c>
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr
 8004c68:	20000044 	.word	0x20000044
 8004c6c:	10624dd3 	.word	0x10624dd3

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07d      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c90:	4b4f      	ldr	r3, [pc, #316]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4a4b      	ldr	r2, [pc, #300]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	61d3      	str	r3, [r2, #28]
 8004ca8:	4b49      	ldr	r3, [pc, #292]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b46      	ldr	r3, [pc, #280]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d118      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc4:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a42      	ldr	r2, [pc, #264]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd0:	f7fc fefe 	bl	8001ad0 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	e008      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd8:	f7fc fefa 	bl	8001ad0 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e06d      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	4b3a      	ldr	r3, [pc, #232]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d027      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d14:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d1e:	4b2e      	ldr	r3, [pc, #184]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d24:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d2a:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d014      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3a:	f7fc fec9 	bl	8001ad0 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d40:	e00a      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fc fec5 	bl	8001ad0 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e036      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ee      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4917      	ldr	r1, [pc, #92]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d76:	7dfb      	ldrb	r3, [r7, #23]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d94:	4b0e      	ldr	r3, [pc, #56]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	490b      	ldr	r1, [pc, #44]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	4904      	ldr	r1, [pc, #16]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	40007000 	.word	0x40007000
 8004dd8:	42420440 	.word	0x42420440

08004ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e076      	b.n	8004edc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d009      	beq.n	8004e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc f862 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	ea42 0103 	orr.w	r1, r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	0c1a      	lsrs	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f002 0204 	and.w	r2, r2, #4
 8004eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_SPI_Transmit+0x22>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e126      	b.n	8005154 <HAL_SPI_Transmit+0x270>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0e:	f7fc fddf 	bl	8001ad0 <HAL_GetTick>
 8004f12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d002      	beq.n	8004f2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
 8004f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f28:	e10b      	b.n	8005142 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Transmit+0x52>
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f3a:	e102      	b.n	8005142 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f82:	d10f      	bne.n	8004fa4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d007      	beq.n	8004fc2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fca:	d14b      	bne.n	8005064 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_Transmit+0xf6>
 8004fd4:	8afb      	ldrh	r3, [r7, #22]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d13e      	bne.n	8005058 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	881a      	ldrh	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	1c9a      	adds	r2, r3, #2
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ffe:	e02b      	b.n	8005058 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b02      	cmp	r3, #2
 800500c:	d112      	bne.n	8005034 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	86da      	strh	r2, [r3, #54]	; 0x36
 8005032:	e011      	b.n	8005058 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005034:	f7fc fd4c 	bl	8001ad0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d803      	bhi.n	800504c <HAL_SPI_Transmit+0x168>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d102      	bne.n	8005052 <HAL_SPI_Transmit+0x16e>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005056:	e074      	b.n	8005142 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1ce      	bne.n	8005000 <HAL_SPI_Transmit+0x11c>
 8005062:	e04c      	b.n	80050fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d002      	beq.n	8005072 <HAL_SPI_Transmit+0x18e>
 800506c:	8afb      	ldrh	r3, [r7, #22]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d140      	bne.n	80050f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	330c      	adds	r3, #12
 800507c:	7812      	ldrb	r2, [r2, #0]
 800507e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005098:	e02c      	b.n	80050f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d113      	bne.n	80050d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	7812      	ldrb	r2, [r2, #0]
 80050b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80050ce:	e011      	b.n	80050f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d0:	f7fc fcfe 	bl	8001ad0 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d803      	bhi.n	80050e8 <HAL_SPI_Transmit+0x204>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d102      	bne.n	80050ee <HAL_SPI_Transmit+0x20a>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f2:	e026      	b.n	8005142 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1cd      	bne.n	800509a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8b2 	bl	800526c <SPI_EndRxTxTransaction>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e000      	b.n	8005142 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005140:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005152:	7ffb      	ldrb	r3, [r7, #31]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800516c:	f7fc fcb0 	bl	8001ad0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800517c:	f7fc fca8 	bl	8001ad0 <HAL_GetTick>
 8005180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	015b      	lsls	r3, r3, #5
 8005188:	0d1b      	lsrs	r3, r3, #20
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005192:	e054      	b.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d050      	beq.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800519c:	f7fc fc98 	bl	8001ad0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d902      	bls.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d13d      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ca:	d111      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d004      	beq.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	d107      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d10f      	bne.n	800521a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e017      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3b01      	subs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d19b      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000044 	.word	0x20000044

0800526c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2200      	movs	r2, #0
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ff6a 	bl	800515c <SPI_WaitFlagStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e000      	b.n	80052a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e041      	b.n	800533e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fb fe50 	bl	8000f74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 f9f6 	bl	80056d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b02      	cmp	r3, #2
 800535a:	d122      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d11b      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0202 	mvn.w	r2, #2
 8005372:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f98a 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 800538e:	e005      	b.n	800539c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f97d 	bl	8005690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f98c 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d122      	bne.n	80053f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d11b      	bne.n	80053f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0204 	mvn.w	r2, #4
 80053c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f960 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 80053e2:	e005      	b.n	80053f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f953 	bl	8005690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f962 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d122      	bne.n	800544a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b08      	cmp	r3, #8
 8005410:	d11b      	bne.n	800544a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0208 	mvn.w	r2, #8
 800541a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2204      	movs	r2, #4
 8005420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f936 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 8005436:	e005      	b.n	8005444 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f929 	bl	8005690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f938 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b10      	cmp	r3, #16
 8005456:	d122      	bne.n	800549e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b10      	cmp	r3, #16
 8005464:	d11b      	bne.n	800549e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0210 	mvn.w	r2, #16
 800546e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2208      	movs	r2, #8
 8005474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f90c 	bl	80056a2 <HAL_TIM_IC_CaptureCallback>
 800548a:	e005      	b.n	8005498 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f8ff 	bl	8005690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f90e 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10e      	bne.n	80054ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d107      	bne.n	80054ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0201 	mvn.w	r2, #1
 80054c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8da 	bl	800567e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b80      	cmp	r3, #128	; 0x80
 80054d6:	d10e      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fac8 	bl	8005a86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8d2 	bl	80056c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b20      	cmp	r3, #32
 800552e:	d10e      	bne.n	800554e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b20      	cmp	r3, #32
 800553c:	d107      	bne.n	800554e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0220 	mvn.w	r2, #32
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa93 	bl	8005a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b084      	sub	sp, #16
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIM_IC_ConfigChannel+0x1a>
 800556c:	2302      	movs	r3, #2
 800556e:	e082      	b.n	8005676 <HAL_TIM_IC_ConfigChannel+0x120>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11b      	bne.n	80055b6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f000 f905 	bl	800579c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 020c 	bic.w	r2, r2, #12
 80055a0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6999      	ldr	r1, [r3, #24]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	619a      	str	r2, [r3, #24]
 80055b4:	e05a      	b.n	800566c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d11c      	bne.n	80055f6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	6819      	ldr	r1, [r3, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f000 f940 	bl	8005850 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055de:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6999      	ldr	r1, [r3, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	021a      	lsls	r2, r3, #8
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	e03a      	b.n	800566c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d11b      	bne.n	8005634 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f000 f95c 	bl	80058c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 020c 	bic.w	r2, r2, #12
 800561e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69d9      	ldr	r1, [r3, #28]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	689a      	ldr	r2, [r3, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	61da      	str	r2, [r3, #28]
 8005632:	e01b      	b.n	800566c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	6819      	ldr	r1, [r3, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f000 f97b 	bl	800593e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005656:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69d9      	ldr	r1, [r3, #28]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	021a      	lsls	r2, r3, #8
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr

080056c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a29      	ldr	r2, [pc, #164]	; (8005790 <TIM_Base_SetConfig+0xb8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00b      	beq.n	8005708 <TIM_Base_SetConfig+0x30>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f6:	d007      	beq.n	8005708 <TIM_Base_SetConfig+0x30>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a26      	ldr	r2, [pc, #152]	; (8005794 <TIM_Base_SetConfig+0xbc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0x30>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a25      	ldr	r2, [pc, #148]	; (8005798 <TIM_Base_SetConfig+0xc0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d108      	bne.n	800571a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <TIM_Base_SetConfig+0xb8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00b      	beq.n	800573a <TIM_Base_SetConfig+0x62>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x62>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <TIM_Base_SetConfig+0xbc>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <TIM_Base_SetConfig+0xc0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d108      	bne.n	800574c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a07      	ldr	r2, [pc, #28]	; (8005790 <TIM_Base_SetConfig+0xb8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800

0800579c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f023 0201 	bic.w	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <TIM_TI1_SetConfig+0xa8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_TI1_SetConfig+0x46>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d007      	beq.n	80057e2 <TIM_TI1_SetConfig+0x46>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <TIM_TI1_SetConfig+0xac>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_TI1_SetConfig+0x46>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a1b      	ldr	r2, [pc, #108]	; (800584c <TIM_TI1_SetConfig+0xb0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d101      	bne.n	80057e6 <TIM_TI1_SetConfig+0x4a>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <TIM_TI1_SetConfig+0x4c>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e003      	b.n	8005806 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	b2db      	uxtb	r3, r3
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f023 030a 	bic.w	r3, r3, #10
 8005820:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f003 030a 	and.w	r3, r3, #10
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr
 8005844:	40012c00 	.word	0x40012c00
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800

08005850 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	f023 0210 	bic.w	r2, r3, #16
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800588e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	031b      	lsls	r3, r3, #12
 8005894:	b29b      	uxth	r3, r3
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f023 0303 	bic.w	r3, r3, #3
 80058f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005904:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	b2db      	uxtb	r3, r3
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005918:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr

0800593e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
 800594a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800597c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	031b      	lsls	r3, r3, #12
 8005982:	b29b      	uxth	r3, r3
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005990:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	031b      	lsls	r3, r3, #12
 8005996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e046      	b.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00e      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1c:	d009      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d004      	beq.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d10c      	bne.n	8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800

08005a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc80      	pop	{r7}
 8005a96:	4770      	bx	lr

08005a98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a98:	b084      	sub	sp, #16
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	f107 0014 	add.w	r0, r7, #20
 8005aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	b004      	add	sp, #16
 8005ab6:	4770      	bx	lr

08005ab8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ac8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005acc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005af0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b30:	b084      	sub	sp, #16
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	f107 0014 	add.w	r0, r7, #20
 8005b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	b004      	add	sp, #16
 8005b6e:	4770      	bx	lr

08005b70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b09b      	sub	sp, #108	; 0x6c
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	78db      	ldrb	r3, [r3, #3]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d81f      	bhi.n	8005be2 <USB_ActivateEndpoint+0x72>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <USB_ActivateEndpoint+0x38>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bb9 	.word	0x08005bb9
 8005bac:	08005bd5 	.word	0x08005bd5
 8005bb0:	08005beb 	.word	0x08005beb
 8005bb4:	08005bc7 	.word	0x08005bc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005bb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005bc4:	e012      	b.n	8005bec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005bce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005bd2:	e00b      	b.n	8005bec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bd4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005be0:	e004      	b.n	8005bec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005be8:	e000      	b.n	8005bec <USB_ActivateEndpoint+0x7c>
      break;
 8005bea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	7b1b      	ldrb	r3, [r3, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f040 8149 	bne.w	8005ef0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8084 	beq.w	8005d70 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	011a      	lsls	r2, r3, #4
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	88db      	ldrh	r3, [r3, #6]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	81fb      	strh	r3, [r7, #14]
 8005caa:	89fb      	ldrh	r3, [r7, #14]
 8005cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <USB_ActivateEndpoint+0x17c>
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	81bb      	strh	r3, [r7, #12]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	89bb      	ldrh	r3, [r7, #12]
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d020      	beq.n	8005d36 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d0a:	813b      	strh	r3, [r7, #8]
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	f083 0320 	eor.w	r3, r3, #32
 8005d12:	813b      	strh	r3, [r7, #8]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]
 8005d34:	e27f      	b.n	8006236 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	817b      	strh	r3, [r7, #10]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	441a      	add	r2, r3
 8005d58:	897b      	ldrh	r3, [r7, #10]
 8005d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
 8005d6e:	e262      	b.n	8006236 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	4413      	add	r3, r2
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	88db      	ldrh	r3, [r3, #6]
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	4413      	add	r3, r2
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	011a      	lsls	r2, r3, #4
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d112      	bne.n	8005df6 <USB_ActivateEndpoint+0x286>
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e02f      	b.n	8005e56 <USB_ActivateEndpoint+0x2e6>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfc:	d813      	bhi.n	8005e26 <USB_ActivateEndpoint+0x2b6>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <USB_ActivateEndpoint+0x2a8>
 8005e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e14:	3301      	adds	r3, #1
 8005e16:	663b      	str	r3, [r7, #96]	; 0x60
 8005e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	029b      	lsls	r3, r3, #10
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	801a      	strh	r2, [r3, #0]
 8005e24:	e017      	b.n	8005e56 <USB_ActivateEndpoint+0x2e6>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <USB_ActivateEndpoint+0x2d0>
 8005e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	029b      	lsls	r3, r3, #10
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	83fb      	strh	r3, [r7, #30]
 8005e64:	8bfb      	ldrh	r3, [r7, #30]
 8005e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01b      	beq.n	8005ea6 <USB_ActivateEndpoint+0x336>
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e84:	83bb      	strh	r3, [r7, #28]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	8bbb      	ldrh	r3, [r7, #28]
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	837b      	strh	r3, [r7, #26]
 8005ebe:	8b7b      	ldrh	r3, [r7, #26]
 8005ec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ec4:	837b      	strh	r3, [r7, #26]
 8005ec6:	8b7b      	ldrh	r3, [r7, #26]
 8005ec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ecc:	837b      	strh	r3, [r7, #26]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8b7b      	ldrh	r3, [r7, #26]
 8005eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	8013      	strh	r3, [r2, #0]
 8005eee:	e1a2      	b.n	8006236 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	441a      	add	r2, r3
 8005f14:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f3c:	4413      	add	r3, r2
 8005f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	891b      	ldrh	r3, [r3, #8]
 8005f54:	085b      	lsrs	r3, r3, #1
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	4413      	add	r3, r2
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	895b      	ldrh	r3, [r3, #10]
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	785b      	ldrb	r3, [r3, #1]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8091 	bne.w	80060c0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005fac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01b      	beq.n	8005fee <USB_ActivateEndpoint+0x47e>
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	441a      	add	r2, r3
 8005fd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ffc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d01b      	beq.n	800603e <USB_ActivateEndpoint+0x4ce>
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800602a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800603a:	b29b      	uxth	r3, r3
 800603c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006056:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006058:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800605c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800605e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006060:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006064:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609c:	867b      	strh	r3, [r7, #50]	; 0x32
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	441a      	add	r2, r3
 80060a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80060aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	8013      	strh	r3, [r2, #0]
 80060be:	e0ba      	b.n	8006236 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01d      	beq.n	8006118 <USB_ActivateEndpoint+0x5a8>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01d      	beq.n	8006170 <USB_ActivateEndpoint+0x600>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	441a      	add	r2, r3
 8006158:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	78db      	ldrb	r3, [r3, #3]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d024      	beq.n	80061c2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006196:	f083 0320 	eor.w	r3, r3, #32
 800619a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
 80061c0:	e01d      	b.n	80061fe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006214:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006236:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800623a:	4618      	mov	r0, r3
 800623c:	376c      	adds	r7, #108	; 0x6c
 800623e:	46bd      	mov	sp, r7
 8006240:	bc80      	pop	{r7}
 8006242:	4770      	bx	lr

08006244 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006244:	b480      	push	{r7}
 8006246:	b08d      	sub	sp, #52	; 0x34
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	7b1b      	ldrb	r3, [r3, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 808e 	bne.w	8006374 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d044      	beq.n	80062ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	81bb      	strh	r3, [r7, #12]
 800626e:	89bb      	ldrh	r3, [r7, #12]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <USB_DeactivateEndpoint+0x6c>
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	897b      	ldrh	r3, [r7, #10]
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	813b      	strh	r3, [r7, #8]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]
 80062e8:	e192      	b.n	8006610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	827b      	strh	r3, [r7, #18]
 80062f8:	8a7b      	ldrh	r3, [r7, #18]
 80062fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01b      	beq.n	800633a <USB_DeactivateEndpoint+0xf6>
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	823b      	strh	r3, [r7, #16]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	8a3b      	ldrh	r3, [r7, #16]
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800634c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006350:	81fb      	strh	r3, [r7, #14]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	89fb      	ldrh	r3, [r7, #14]
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]
 8006372:	e14d      	b.n	8006610 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 80a5 	bne.w	80064c8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	843b      	strh	r3, [r7, #32]
 800638c:	8c3b      	ldrh	r3, [r7, #32]
 800638e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01b      	beq.n	80063ce <USB_DeactivateEndpoint+0x18a>
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ac:	83fb      	strh	r3, [r7, #30]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	8bfb      	ldrh	r3, [r7, #30]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	83bb      	strh	r3, [r7, #28]
 80063dc:	8bbb      	ldrh	r3, [r7, #28]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d01b      	beq.n	800641e <USB_DeactivateEndpoint+0x1da>
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	837b      	strh	r3, [r7, #26]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	441a      	add	r2, r3
 8006408:	8b7b      	ldrh	r3, [r7, #26]
 800640a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800641a:	b29b      	uxth	r3, r3
 800641c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006434:	833b      	strh	r3, [r7, #24]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8b3b      	ldrh	r3, [r7, #24]
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	82fb      	strh	r3, [r7, #22]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8afb      	ldrh	r3, [r7, #22]
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a4:	82bb      	strh	r3, [r7, #20]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	441a      	add	r2, r3
 80064b0:	8abb      	ldrh	r3, [r7, #20]
 80064b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	8013      	strh	r3, [r2, #0]
 80064c6:	e0a3      	b.n	8006610 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01b      	beq.n	8006518 <USB_DeactivateEndpoint+0x2d4>
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4413      	add	r3, r2
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	441a      	add	r2, r3
 8006502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800650c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006514:	b29b      	uxth	r3, r3
 8006516:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006526:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01b      	beq.n	8006568 <USB_DeactivateEndpoint+0x324>
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006546:	853b      	strh	r3, [r7, #40]	; 0x28
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	441a      	add	r2, r3
 8006552:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006560:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006564:	b29b      	uxth	r3, r3
 8006566:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660c:	b29b      	uxth	r3, r3
 800660e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3734      	adds	r7, #52	; 0x34
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b0cc      	sub	sp, #304	; 0x130
 8006620:	af00      	add	r7, sp, #0
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	6018      	str	r0, [r3, #0]
 8006626:	463b      	mov	r3, r7
 8006628:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800662a:	463b      	mov	r3, r7
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	f040 872e 	bne.w	8007492 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006636:	463b      	mov	r3, r7
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	429a      	cmp	r2, r3
 8006644:	d905      	bls.n	8006652 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006646:	463b      	mov	r3, r7
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006650:	e004      	b.n	800665c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	7b1b      	ldrb	r3, [r3, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d134      	bne.n	80066d0 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6959      	ldr	r1, [r3, #20]
 800666c:	463b      	mov	r3, r7
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	88da      	ldrh	r2, [r3, #6]
 8006672:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006676:	b29b      	uxth	r3, r3
 8006678:	1d38      	adds	r0, r7, #4
 800667a:	6800      	ldr	r0, [r0, #0]
 800667c:	f001 fc03 	bl	8007e86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	1d3a      	adds	r2, r7, #4
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006692:	b29b      	uxth	r3, r3
 8006694:	4619      	mov	r1, r3
 8006696:	f107 0310 	add.w	r3, r7, #16
 800669a:	f107 0210 	add.w	r2, r7, #16
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	440a      	add	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	463b      	mov	r3, r7
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	011a      	lsls	r2, r3, #4
 80066ac:	f107 0310 	add.w	r3, r7, #16
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	f107 030c 	add.w	r3, r7, #12
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	f000 beac 	b.w	8007428 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	78db      	ldrb	r3, [r3, #3]
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	f040 838c 	bne.w	8006df4 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066dc:	463b      	mov	r3, r7
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	f240 8330 	bls.w	8006d4e <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80066ee:	1d3b      	adds	r3, r7, #4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	463b      	mov	r3, r7
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006708:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800670c:	1d3b      	adds	r3, r7, #4
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	463b      	mov	r3, r7
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006726:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800672a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a1a      	ldr	r2, [r3, #32]
 8006738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	463b      	mov	r3, r7
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	463b      	mov	r3, r7
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 819e 	beq.w	8006a9c <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006764:	1d3a      	adds	r2, r7, #4
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	601a      	str	r2, [r3, #0]
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d17a      	bne.n	800686a <USB_EPStartXfer+0x24e>
 8006774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006778:	1d3a      	adds	r2, r7, #4
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006786:	b29b      	uxth	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800678e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	440a      	add	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	463b      	mov	r3, r7
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	011a      	lsls	r2, r3, #4
 80067a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4413      	add	r3, r2
 80067a8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80067ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11a      	bne.n	80067f0 <USB_EPStartXfer+0x1d4>
 80067ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	801a      	strh	r2, [r3, #0]
 80067d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	e062      	b.n	80068b6 <USB_EPStartXfer+0x29a>
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	2b3e      	cmp	r3, #62	; 0x3e
 80067f6:	d819      	bhi.n	800682c <USB_EPStartXfer+0x210>
 80067f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <USB_EPStartXfer+0x1fc>
 800680e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006812:	3301      	adds	r3, #1
 8006814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800681c:	b29b      	uxth	r3, r3
 800681e:	029b      	lsls	r3, r3, #10
 8006820:	b29a      	uxth	r2, r3
 8006822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e044      	b.n	80068b6 <USB_EPStartXfer+0x29a>
 800682c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <USB_EPStartXfer+0x230>
 8006842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006846:	3b01      	subs	r3, #1
 8006848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800684c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006850:	b29b      	uxth	r3, r3
 8006852:	029b      	lsls	r3, r3, #10
 8006854:	b29b      	uxth	r3, r3
 8006856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800685e:	b29a      	uxth	r2, r3
 8006860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e025      	b.n	80068b6 <USB_EPStartXfer+0x29a>
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	785b      	ldrb	r3, [r3, #1]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d120      	bne.n	80068b6 <USB_EPStartXfer+0x29a>
 8006874:	1d3b      	adds	r3, r7, #4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687c:	b29b      	uxth	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006884:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	440a      	add	r2, r1
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	463b      	mov	r3, r7
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	011a      	lsls	r2, r3, #4
 8006896:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4413      	add	r3, r2
 800689e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80068a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	895b      	ldrh	r3, [r3, #10]
 80068bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6959      	ldr	r1, [r3, #20]
 80068c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068d0:	1d38      	adds	r0, r7, #4
 80068d2:	6800      	ldr	r0, [r0, #0]
 80068d4:	f001 fad7 	bl	8007e86 <USB_WritePMA>
            ep->xfer_buff += len;
 80068d8:	463b      	mov	r3, r7
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e2:	441a      	add	r2, r3
 80068e4:	463b      	mov	r3, r7
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068ea:	463b      	mov	r3, r7
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	463b      	mov	r3, r7
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d909      	bls.n	800690e <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80068fa:	463b      	mov	r3, r7
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006904:	1ad2      	subs	r2, r2, r3
 8006906:	463b      	mov	r3, r7
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	621a      	str	r2, [r3, #32]
 800690c:	e008      	b.n	8006920 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800690e:	463b      	mov	r3, r7
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006918:	463b      	mov	r3, r7
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2200      	movs	r2, #0
 800691e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d17a      	bne.n	8006a20 <USB_EPStartXfer+0x404>
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	1d3a      	adds	r2, r7, #4
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	1d3b      	adds	r3, r7, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	f107 0318 	add.w	r3, r7, #24
 8006944:	f107 0218 	add.w	r2, r7, #24
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	440a      	add	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	463b      	mov	r3, r7
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	011a      	lsls	r2, r3, #4
 8006956:	f107 0318 	add.w	r3, r7, #24
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4413      	add	r3, r2
 800695e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006962:	f107 0314 	add.w	r3, r7, #20
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11a      	bne.n	80069a6 <USB_EPStartXfer+0x38a>
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800697e:	b29a      	uxth	r2, r3
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	f107 0314 	add.w	r3, r7, #20
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699a:	b29a      	uxth	r2, r3
 800699c:	f107 0314 	add.w	r3, r7, #20
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e067      	b.n	8006a76 <USB_EPStartXfer+0x45a>
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	2b3e      	cmp	r3, #62	; 0x3e
 80069ac:	d819      	bhi.n	80069e2 <USB_EPStartXfer+0x3c6>
 80069ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <USB_EPStartXfer+0x3b2>
 80069c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069c8:	3301      	adds	r3, #1
 80069ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	029b      	lsls	r3, r3, #10
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	f107 0314 	add.w	r3, r7, #20
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e049      	b.n	8006a76 <USB_EPStartXfer+0x45a>
 80069e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80069ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d104      	bne.n	8006a02 <USB_EPStartXfer+0x3e6>
 80069f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80069fc:	3b01      	subs	r3, #1
 80069fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	029b      	lsls	r3, r3, #10
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e02a      	b.n	8006a76 <USB_EPStartXfer+0x45a>
 8006a20:	463b      	mov	r3, r7
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d125      	bne.n	8006a76 <USB_EPStartXfer+0x45a>
 8006a2a:	f107 0320 	add.w	r3, r7, #32
 8006a2e:	1d3a      	adds	r2, r7, #4
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f107 0320 	add.w	r3, r7, #32
 8006a44:	f107 0220 	add.w	r2, r7, #32
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	011a      	lsls	r2, r3, #4
 8006a56:	f107 0320 	add.w	r3, r7, #32
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006a62:	f107 031c 	add.w	r3, r7, #28
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	f107 031c 	add.w	r3, r7, #28
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	891b      	ldrh	r3, [r3, #8]
 8006a7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a80:	463b      	mov	r3, r7
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6959      	ldr	r1, [r3, #20]
 8006a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a90:	1d38      	adds	r0, r7, #4
 8006a92:	6800      	ldr	r0, [r0, #0]
 8006a94:	f001 f9f7 	bl	8007e86 <USB_WritePMA>
 8006a98:	f000 bcc6 	b.w	8007428 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d164      	bne.n	8006b70 <USB_EPStartXfer+0x554>
 8006aa6:	1d3b      	adds	r3, r7, #4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aba:	4413      	add	r3, r2
 8006abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006abe:	463b      	mov	r3, r7
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac8:	4413      	add	r3, r2
 8006aca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ace:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d112      	bne.n	8006afe <USB_EPStartXfer+0x4e2>
 8006ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae6:	801a      	strh	r2, [r3, #0]
 8006ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afa:	801a      	strh	r2, [r3, #0]
 8006afc:	e057      	b.n	8006bae <USB_EPStartXfer+0x592>
 8006afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b02:	2b3e      	cmp	r3, #62	; 0x3e
 8006b04:	d817      	bhi.n	8006b36 <USB_EPStartXfer+0x51a>
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <USB_EPStartXfer+0x50a>
 8006b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b20:	3301      	adds	r3, #1
 8006b22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	e03b      	b.n	8006bae <USB_EPStartXfer+0x592>
 8006b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3a:	095b      	lsrs	r3, r3, #5
 8006b3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d104      	bne.n	8006b56 <USB_EPStartXfer+0x53a>
 8006b4c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b50:	3b01      	subs	r3, #1
 8006b52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b56:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	e01e      	b.n	8006bae <USB_EPStartXfer+0x592>
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d119      	bne.n	8006bae <USB_EPStartXfer+0x592>
 8006b7a:	1d3b      	adds	r3, r7, #4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b80:	1d3b      	adds	r3, r7, #4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8e:	4413      	add	r3, r2
 8006b90:	653b      	str	r3, [r7, #80]	; 0x50
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	011a      	lsls	r2, r3, #4
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bae:	463b      	mov	r3, r7
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	891b      	ldrh	r3, [r3, #8]
 8006bb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bb8:	463b      	mov	r3, r7
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6959      	ldr	r1, [r3, #20]
 8006bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006bc8:	1d38      	adds	r0, r7, #4
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	f001 f95b 	bl	8007e86 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	441a      	add	r2, r3
 8006bdc:	463b      	mov	r3, r7
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006be2:	463b      	mov	r3, r7
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	463b      	mov	r3, r7
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d909      	bls.n	8006c06 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	463b      	mov	r3, r7
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	621a      	str	r2, [r3, #32]
 8006c04:	e008      	b.n	8006c18 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c06:	463b      	mov	r3, r7
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2200      	movs	r2, #0
 8006c16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006c18:	1d3b      	adds	r3, r7, #4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1e:	463b      	mov	r3, r7
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d164      	bne.n	8006cf2 <USB_EPStartXfer+0x6d6>
 8006c28:	1d3b      	adds	r3, r7, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c2e:	1d3b      	adds	r3, r7, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	4413      	add	r3, r2
 8006c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c40:	463b      	mov	r3, r7
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	011a      	lsls	r2, r3, #4
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d112      	bne.n	8006c80 <USB_EPStartXfer+0x664>
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e054      	b.n	8006d2a <USB_EPStartXfer+0x70e>
 8006c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c84:	2b3e      	cmp	r3, #62	; 0x3e
 8006c86:	d817      	bhi.n	8006cb8 <USB_EPStartXfer+0x69c>
 8006c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <USB_EPStartXfer+0x68c>
 8006c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	029b      	lsls	r3, r3, #10
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	801a      	strh	r2, [r3, #0]
 8006cb6:	e038      	b.n	8006d2a <USB_EPStartXfer+0x70e>
 8006cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cbc:	095b      	lsrs	r3, r3, #5
 8006cbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0x6bc>
 8006cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	029b      	lsls	r3, r3, #10
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	e01b      	b.n	8006d2a <USB_EPStartXfer+0x70e>
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d116      	bne.n	8006d2a <USB_EPStartXfer+0x70e>
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	461a      	mov	r2, r3
 8006d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d0a:	4413      	add	r3, r2
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0e:	463b      	mov	r3, r7
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	011a      	lsls	r2, r3, #4
 8006d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d18:	4413      	add	r3, r2
 8006d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	895b      	ldrh	r3, [r3, #10]
 8006d30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d34:	463b      	mov	r3, r7
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6959      	ldr	r1, [r3, #20]
 8006d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d44:	1d38      	adds	r0, r7, #4
 8006d46:	6800      	ldr	r0, [r0, #0]
 8006d48:	f001 f89d 	bl	8007e86 <USB_WritePMA>
 8006d4c:	e36c      	b.n	8007428 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006d58:	1d3b      	adds	r3, r7, #4
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d72:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006d76:	1d3b      	adds	r3, r7, #4
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	441a      	add	r2, r3
 8006d84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d9c:	1d3b      	adds	r3, r7, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da2:	1d3b      	adds	r3, r7, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	4413      	add	r3, r2
 8006db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006db4:	463b      	mov	r3, r7
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	011a      	lsls	r2, r3, #4
 8006dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	891b      	ldrh	r3, [r3, #8]
 8006dd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dda:	463b      	mov	r3, r7
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6959      	ldr	r1, [r3, #20]
 8006de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006dea:	1d38      	adds	r0, r7, #4
 8006dec:	6800      	ldr	r0, [r0, #0]
 8006dee:	f001 f84a 	bl	8007e86 <USB_WritePMA>
 8006df2:	e319      	b.n	8007428 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006df4:	1d3b      	adds	r3, r7, #4
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	463b      	mov	r3, r7
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	463b      	mov	r3, r7
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	441a      	add	r2, r3
 8006e20:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006e38:	463b      	mov	r3, r7
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a1a      	ldr	r2, [r3, #32]
 8006e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	463b      	mov	r3, r7
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e4a:	1d3b      	adds	r3, r7, #4
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	463b      	mov	r3, r7
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8162 	beq.w	800712a <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e66:	1d3b      	adds	r3, r7, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e6e:	463b      	mov	r3, r7
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	785b      	ldrb	r3, [r3, #1]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d164      	bne.n	8006f42 <USB_EPStartXfer+0x926>
 8006e78:	1d3b      	adds	r3, r7, #4
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e7e:	1d3b      	adds	r3, r7, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e8c:	4413      	add	r3, r2
 8006e8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e90:	463b      	mov	r3, r7
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	011a      	lsls	r2, r3, #4
 8006e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ea0:	677b      	str	r3, [r7, #116]	; 0x74
 8006ea2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d112      	bne.n	8006ed0 <USB_EPStartXfer+0x8b4>
 8006eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eac:	881b      	ldrh	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb8:	801a      	strh	r2, [r3, #0]
 8006eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e057      	b.n	8006f80 <USB_EPStartXfer+0x964>
 8006ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8006ed6:	d817      	bhi.n	8006f08 <USB_EPStartXfer+0x8ec>
 8006ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <USB_EPStartXfer+0x8dc>
 8006eee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006ef8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	029b      	lsls	r3, r3, #10
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f04:	801a      	strh	r2, [r3, #0]
 8006f06:	e03b      	b.n	8006f80 <USB_EPStartXfer+0x964>
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <USB_EPStartXfer+0x90c>
 8006f1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f22:	3b01      	subs	r3, #1
 8006f24:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f28:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	029b      	lsls	r3, r3, #10
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3e:	801a      	strh	r2, [r3, #0]
 8006f40:	e01e      	b.n	8006f80 <USB_EPStartXfer+0x964>
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d119      	bne.n	8006f80 <USB_EPStartXfer+0x964>
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f62:	463b      	mov	r3, r7
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	011a      	lsls	r2, r3, #4
 8006f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f6e:	4413      	add	r3, r2
 8006f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	895b      	ldrh	r3, [r3, #10]
 8006f86:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f8a:	463b      	mov	r3, r7
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6959      	ldr	r1, [r3, #20]
 8006f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006f9a:	1d38      	adds	r0, r7, #4
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f000 ff72 	bl	8007e86 <USB_WritePMA>
          ep->xfer_buff += len;
 8006fa2:	463b      	mov	r3, r7
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695a      	ldr	r2, [r3, #20]
 8006fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fac:	441a      	add	r2, r3
 8006fae:	463b      	mov	r3, r7
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006fb4:	463b      	mov	r3, r7
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	463b      	mov	r3, r7
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d909      	bls.n	8006fd8 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6a1a      	ldr	r2, [r3, #32]
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	621a      	str	r2, [r3, #32]
 8006fd6:	e008      	b.n	8006fea <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006fd8:	463b      	mov	r3, r7
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 821a 	beq.w	8007428 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d164      	bne.n	80070c8 <USB_EPStartXfer+0xaac>
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	66bb      	str	r3, [r7, #104]	; 0x68
 8007004:	1d3b      	adds	r3, r7, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800700c:	b29b      	uxth	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007012:	4413      	add	r3, r2
 8007014:	66bb      	str	r3, [r7, #104]	; 0x68
 8007016:	463b      	mov	r3, r7
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	011a      	lsls	r2, r3, #4
 800701e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007020:	4413      	add	r3, r2
 8007022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007026:	667b      	str	r3, [r7, #100]	; 0x64
 8007028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <USB_EPStartXfer+0xa3a>
 8007030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007032:	881b      	ldrh	r3, [r3, #0]
 8007034:	b29b      	uxth	r3, r3
 8007036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800703a:	b29a      	uxth	r2, r3
 800703c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	b29b      	uxth	r3, r3
 8007046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800704e:	b29a      	uxth	r2, r3
 8007050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	e057      	b.n	8007106 <USB_EPStartXfer+0xaea>
 8007056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705a:	2b3e      	cmp	r3, #62	; 0x3e
 800705c:	d817      	bhi.n	800708e <USB_EPStartXfer+0xa72>
 800705e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d004      	beq.n	800707e <USB_EPStartXfer+0xa62>
 8007074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007078:	3301      	adds	r3, #1
 800707a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	b29b      	uxth	r3, r3
 8007084:	029b      	lsls	r3, r3, #10
 8007086:	b29a      	uxth	r2, r3
 8007088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e03b      	b.n	8007106 <USB_EPStartXfer+0xaea>
 800708e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <USB_EPStartXfer+0xa92>
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a8:	3b01      	subs	r3, #1
 80070aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e01e      	b.n	8007106 <USB_EPStartXfer+0xaea>
 80070c8:	463b      	mov	r3, r7
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d119      	bne.n	8007106 <USB_EPStartXfer+0xaea>
 80070d2:	1d3b      	adds	r3, r7, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	673b      	str	r3, [r7, #112]	; 0x70
 80070d8:	1d3b      	adds	r3, r7, #4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070e6:	4413      	add	r3, r2
 80070e8:	673b      	str	r3, [r7, #112]	; 0x70
 80070ea:	463b      	mov	r3, r7
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	011a      	lsls	r2, r3, #4
 80070f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f4:	4413      	add	r3, r2
 80070f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007100:	b29a      	uxth	r2, r3
 8007102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007104:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007106:	463b      	mov	r3, r7
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	891b      	ldrh	r3, [r3, #8]
 800710c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007110:	463b      	mov	r3, r7
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6959      	ldr	r1, [r3, #20]
 8007116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711a:	b29b      	uxth	r3, r3
 800711c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007120:	1d38      	adds	r0, r7, #4
 8007122:	6800      	ldr	r0, [r0, #0]
 8007124:	f000 feaf 	bl	8007e86 <USB_WritePMA>
 8007128:	e17e      	b.n	8007428 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800712a:	463b      	mov	r3, r7
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	785b      	ldrb	r3, [r3, #1]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d16f      	bne.n	8007214 <USB_EPStartXfer+0xbf8>
 8007134:	1d3b      	adds	r3, r7, #4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800713c:	1d3b      	adds	r3, r7, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007144:	b29b      	uxth	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800714c:	4413      	add	r3, r2
 800714e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	011a      	lsls	r2, r3, #4
 800715a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800715e:	4413      	add	r3, r2
 8007160:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d116      	bne.n	800719e <USB_EPStartXfer+0xb82>
 8007170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	b29b      	uxth	r3, r3
 8007178:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007194:	b29a      	uxth	r2, r3
 8007196:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e05f      	b.n	800725e <USB_EPStartXfer+0xc42>
 800719e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a2:	2b3e      	cmp	r3, #62	; 0x3e
 80071a4:	d818      	bhi.n	80071d8 <USB_EPStartXfer+0xbbc>
 80071a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071aa:	085b      	lsrs	r3, r3, #1
 80071ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d004      	beq.n	80071c6 <USB_EPStartXfer+0xbaa>
 80071bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80071c0:	3301      	adds	r3, #1
 80071c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	e042      	b.n	800725e <USB_EPStartXfer+0xc42>
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e6:	f003 031f 	and.w	r3, r3, #31
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <USB_EPStartXfer+0xbdc>
 80071ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80071f2:	3b01      	subs	r3, #1
 80071f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	029b      	lsls	r3, r3, #10
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720a:	b29a      	uxth	r2, r3
 800720c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e024      	b.n	800725e <USB_EPStartXfer+0xc42>
 8007214:	463b      	mov	r3, r7
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d11f      	bne.n	800725e <USB_EPStartXfer+0xc42>
 800721e:	1d3b      	adds	r3, r7, #4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007236:	4413      	add	r3, r2
 8007238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011a      	lsls	r2, r3, #4
 8007244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007248:	4413      	add	r3, r2
 800724a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800724e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800725c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	891b      	ldrh	r3, [r3, #8]
 8007264:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6959      	ldr	r1, [r3, #20]
 800726e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007272:	b29b      	uxth	r3, r3
 8007274:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007278:	1d38      	adds	r0, r7, #4
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	f000 fe03 	bl	8007e86 <USB_WritePMA>
          ep->xfer_buff += len;
 8007280:	463b      	mov	r3, r7
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800728a:	441a      	add	r2, r3
 800728c:	463b      	mov	r3, r7
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007292:	463b      	mov	r3, r7
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	463b      	mov	r3, r7
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d909      	bls.n	80072b6 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80072a2:	463b      	mov	r3, r7
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	6a1a      	ldr	r2, [r3, #32]
 80072a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	463b      	mov	r3, r7
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	621a      	str	r2, [r3, #32]
 80072b4:	e008      	b.n	80072c8 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80072b6:	463b      	mov	r3, r7
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80072c0:	463b      	mov	r3, r7
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2200      	movs	r2, #0
 80072c6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80072c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80ab 	beq.w	8007428 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072d2:	1d3b      	adds	r3, r7, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072da:	463b      	mov	r3, r7
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d16f      	bne.n	80073c4 <USB_EPStartXfer+0xda8>
 80072e4:	1d3b      	adds	r3, r7, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072fc:	4413      	add	r3, r2
 80072fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	011a      	lsls	r2, r3, #4
 800730a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800730e:	4413      	add	r3, r2
 8007310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d116      	bne.n	800734e <USB_EPStartXfer+0xd32>
 8007320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800732c:	b29a      	uxth	r2, r3
 800732e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007344:	b29a      	uxth	r2, r3
 8007346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e05b      	b.n	8007406 <USB_EPStartXfer+0xdea>
 800734e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007352:	2b3e      	cmp	r3, #62	; 0x3e
 8007354:	d818      	bhi.n	8007388 <USB_EPStartXfer+0xd6c>
 8007356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <USB_EPStartXfer+0xd5a>
 800736c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007370:	3301      	adds	r3, #1
 8007372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007376:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800737a:	b29b      	uxth	r3, r3
 800737c:	029b      	lsls	r3, r3, #10
 800737e:	b29a      	uxth	r2, r3
 8007380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e03e      	b.n	8007406 <USB_EPStartXfer+0xdea>
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <USB_EPStartXfer+0xd8c>
 800739e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073a2:	3b01      	subs	r3, #1
 80073a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80073a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	029b      	lsls	r3, r3, #10
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073c0:	801a      	strh	r2, [r3, #0]
 80073c2:	e020      	b.n	8007406 <USB_EPStartXfer+0xdea>
 80073c4:	463b      	mov	r3, r7
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d11b      	bne.n	8007406 <USB_EPStartXfer+0xdea>
 80073ce:	1d3b      	adds	r3, r7, #4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073de:	4413      	add	r3, r2
 80073e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073e4:	463b      	mov	r3, r7
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	011a      	lsls	r2, r3, #4
 80073ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073f0:	4413      	add	r3, r2
 80073f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fe:	b29a      	uxth	r2, r3
 8007400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007404:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007406:	463b      	mov	r3, r7
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	895b      	ldrh	r3, [r3, #10]
 800740c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007410:	463b      	mov	r3, r7
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6959      	ldr	r1, [r3, #20]
 8007416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741a:	b29b      	uxth	r3, r3
 800741c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007420:	1d38      	adds	r0, r7, #4
 8007422:	6800      	ldr	r0, [r0, #0]
 8007424:	f000 fd2f 	bl	8007e86 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007428:	1d3b      	adds	r3, r7, #4
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	463b      	mov	r3, r7
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f107 020a 	add.w	r2, r7, #10
 800743e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007446:	8013      	strh	r3, [r2, #0]
 8007448:	f107 030a 	add.w	r3, r7, #10
 800744c:	f107 020a 	add.w	r2, r7, #10
 8007450:	8812      	ldrh	r2, [r2, #0]
 8007452:	f082 0210 	eor.w	r2, r2, #16
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	f107 030a 	add.w	r3, r7, #10
 800745c:	f107 020a 	add.w	r2, r7, #10
 8007460:	8812      	ldrh	r2, [r2, #0]
 8007462:	f082 0220 	eor.w	r2, r2, #32
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	463b      	mov	r3, r7
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	441a      	add	r2, r3
 8007476:	f107 030a 	add.w	r3, r7, #10
 800747a:	881b      	ldrh	r3, [r3, #0]
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]
 8007490:	e3b5      	b.n	8007bfe <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007492:	463b      	mov	r3, r7
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 8090 	bne.w	80075be <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800749e:	463b      	mov	r3, r7
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	463b      	mov	r3, r7
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d90e      	bls.n	80074cc <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80074ae:	463b      	mov	r3, r7
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80074b8:	463b      	mov	r3, r7
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	463b      	mov	r3, r7
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	619a      	str	r2, [r3, #24]
 80074ca:	e008      	b.n	80074de <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80074cc:	463b      	mov	r3, r7
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80074d6:	463b      	mov	r3, r7
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2200      	movs	r2, #0
 80074dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80074de:	1d3b      	adds	r3, r7, #4
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074f6:	4413      	add	r3, r2
 80074f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074fc:	463b      	mov	r3, r7
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007508:	4413      	add	r3, r2
 800750a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800750e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d116      	bne.n	8007548 <USB_EPStartXfer+0xf2c>
 800751a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800751e:	881b      	ldrh	r3, [r3, #0]
 8007520:	b29b      	uxth	r3, r3
 8007522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	e32c      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754c:	2b3e      	cmp	r3, #62	; 0x3e
 800754e:	d818      	bhi.n	8007582 <USB_EPStartXfer+0xf66>
 8007550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <USB_EPStartXfer+0xf54>
 8007566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800756a:	3301      	adds	r3, #1
 800756c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29a      	uxth	r2, r3
 800757a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800757e:	801a      	strh	r2, [r3, #0]
 8007580:	e30f      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007586:	095b      	lsrs	r3, r3, #5
 8007588:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2b00      	cmp	r3, #0
 8007596:	d104      	bne.n	80075a2 <USB_EPStartXfer+0xf86>
 8007598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759c:	3b01      	subs	r3, #1
 800759e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80075a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	029b      	lsls	r3, r3, #10
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e2f1      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80075be:	463b      	mov	r3, r7
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	78db      	ldrb	r3, [r3, #3]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f040 818f 	bne.w	80078e8 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075ca:	463b      	mov	r3, r7
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d175      	bne.n	80076c0 <USB_EPStartXfer+0x10a4>
 80075d4:	1d3b      	adds	r3, r7, #4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075dc:	1d3b      	adds	r3, r7, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075ec:	4413      	add	r3, r2
 80075ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075f2:	463b      	mov	r3, r7
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	011a      	lsls	r2, r3, #4
 80075fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80075fe:	4413      	add	r3, r2
 8007600:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007608:	463b      	mov	r3, r7
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <USB_EPStartXfer+0x1024>
 8007612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	b29b      	uxth	r3, r3
 800761a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800761e:	b29a      	uxth	r2, r3
 8007620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007636:	b29a      	uxth	r2, r3
 8007638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e065      	b.n	800770c <USB_EPStartXfer+0x10f0>
 8007640:	463b      	mov	r3, r7
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b3e      	cmp	r3, #62	; 0x3e
 8007648:	d81a      	bhi.n	8007680 <USB_EPStartXfer+0x1064>
 800764a:	463b      	mov	r3, r7
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007656:	463b      	mov	r3, r7
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d004      	beq.n	800766e <USB_EPStartXfer+0x1052>
 8007664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007668:	3301      	adds	r3, #1
 800766a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007672:	b29b      	uxth	r3, r3
 8007674:	029b      	lsls	r3, r3, #10
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e045      	b.n	800770c <USB_EPStartXfer+0x10f0>
 8007680:	463b      	mov	r3, r7
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800768c:	463b      	mov	r3, r7
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <USB_EPStartXfer+0x1088>
 800769a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769e:	3b01      	subs	r3, #1
 80076a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	029b      	lsls	r3, r3, #10
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e025      	b.n	800770c <USB_EPStartXfer+0x10f0>
 80076c0:	463b      	mov	r3, r7
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d120      	bne.n	800770c <USB_EPStartXfer+0x10f0>
 80076ca:	1d3b      	adds	r3, r7, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076d2:	1d3b      	adds	r3, r7, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076e2:	4413      	add	r3, r2
 80076e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	011a      	lsls	r2, r3, #4
 80076f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076f4:	4413      	add	r3, r2
 80076f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076fe:	463b      	mov	r3, r7
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	b29a      	uxth	r2, r3
 8007706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	1d3b      	adds	r3, r7, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007714:	463b      	mov	r3, r7
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d175      	bne.n	800780a <USB_EPStartXfer+0x11ee>
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007726:	1d3b      	adds	r3, r7, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772e:	b29b      	uxth	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007736:	4413      	add	r3, r2
 8007738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800773c:	463b      	mov	r3, r7
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	011a      	lsls	r2, r3, #4
 8007744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007748:	4413      	add	r3, r2
 800774a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007752:	463b      	mov	r3, r7
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d116      	bne.n	800778a <USB_EPStartXfer+0x116e>
 800775c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007780:	b29a      	uxth	r2, r3
 8007782:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e061      	b.n	800784e <USB_EPStartXfer+0x1232>
 800778a:	463b      	mov	r3, r7
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b3e      	cmp	r3, #62	; 0x3e
 8007792:	d81a      	bhi.n	80077ca <USB_EPStartXfer+0x11ae>
 8007794:	463b      	mov	r3, r7
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077a0:	463b      	mov	r3, r7
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d004      	beq.n	80077b8 <USB_EPStartXfer+0x119c>
 80077ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077b2:	3301      	adds	r3, #1
 80077b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077b8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077bc:	b29b      	uxth	r3, r3
 80077be:	029b      	lsls	r3, r3, #10
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e041      	b.n	800784e <USB_EPStartXfer+0x1232>
 80077ca:	463b      	mov	r3, r7
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077d6:	463b      	mov	r3, r7
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 031f 	and.w	r3, r3, #31
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d104      	bne.n	80077ee <USB_EPStartXfer+0x11d2>
 80077e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077e8:	3b01      	subs	r3, #1
 80077ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	029b      	lsls	r3, r3, #10
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e021      	b.n	800784e <USB_EPStartXfer+0x1232>
 800780a:	463b      	mov	r3, r7
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d11c      	bne.n	800784e <USB_EPStartXfer+0x1232>
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781c:	b29b      	uxth	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007824:	4413      	add	r3, r2
 8007826:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800782a:	463b      	mov	r3, r7
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	011a      	lsls	r2, r3, #4
 8007832:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007836:	4413      	add	r3, r2
 8007838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800783c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007840:	463b      	mov	r3, r7
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800784c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800784e:	463b      	mov	r3, r7
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	f000 81a4 	beq.w	8007ba2 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	463b      	mov	r3, r7
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800786e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <USB_EPStartXfer+0x126a>
 800787a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007886:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 8187 	bne.w	8007ba2 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007894:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 8180 	bne.w	8007ba2 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80078a2:	1d3b      	adds	r3, r7, #4
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	463b      	mov	r3, r7
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	463b      	mov	r3, r7
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80078d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
 80078e6:	e15c      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80078e8:	463b      	mov	r3, r7
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	78db      	ldrb	r3, [r3, #3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	f040 8155 	bne.w	8007b9e <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80078f4:	463b      	mov	r3, r7
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	463b      	mov	r3, r7
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	429a      	cmp	r2, r3
 8007902:	d90e      	bls.n	8007922 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007904:	463b      	mov	r3, r7
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800790e:	463b      	mov	r3, r7
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007918:	1ad2      	subs	r2, r2, r3
 800791a:	463b      	mov	r3, r7
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	619a      	str	r2, [r3, #24]
 8007920:	e008      	b.n	8007934 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007922:	463b      	mov	r3, r7
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800792c:	463b      	mov	r3, r7
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2200      	movs	r2, #0
 8007932:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007934:	463b      	mov	r3, r7
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	785b      	ldrb	r3, [r3, #1]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d16f      	bne.n	8007a1e <USB_EPStartXfer+0x1402>
 800793e:	1d3b      	adds	r3, r7, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800794e:	b29b      	uxth	r3, r3
 8007950:	461a      	mov	r2, r3
 8007952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007956:	4413      	add	r3, r2
 8007958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800795c:	463b      	mov	r3, r7
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	011a      	lsls	r2, r3, #4
 8007964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007968:	4413      	add	r3, r2
 800796a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800796e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007972:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d116      	bne.n	80079a8 <USB_EPStartXfer+0x138c>
 800797a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800797e:	881b      	ldrh	r3, [r3, #0]
 8007980:	b29b      	uxth	r3, r3
 8007982:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007986:	b29a      	uxth	r2, r3
 8007988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800798c:	801a      	strh	r2, [r3, #0]
 800798e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799e:	b29a      	uxth	r2, r3
 80079a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a4:	801a      	strh	r2, [r3, #0]
 80079a6:	e05f      	b.n	8007a68 <USB_EPStartXfer+0x144c>
 80079a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ac:	2b3e      	cmp	r3, #62	; 0x3e
 80079ae:	d818      	bhi.n	80079e2 <USB_EPStartXfer+0x13c6>
 80079b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b4:	085b      	lsrs	r3, r3, #1
 80079b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <USB_EPStartXfer+0x13b4>
 80079c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ca:	3301      	adds	r3, #1
 80079cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	029b      	lsls	r3, r3, #10
 80079d8:	b29a      	uxth	r2, r3
 80079da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079de:	801a      	strh	r2, [r3, #0]
 80079e0:	e042      	b.n	8007a68 <USB_EPStartXfer+0x144c>
 80079e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f0:	f003 031f 	and.w	r3, r3, #31
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <USB_EPStartXfer+0x13e6>
 80079f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079fc:	3b01      	subs	r3, #1
 80079fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	029b      	lsls	r3, r3, #10
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e024      	b.n	8007a68 <USB_EPStartXfer+0x144c>
 8007a1e:	463b      	mov	r3, r7
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d11f      	bne.n	8007a68 <USB_EPStartXfer+0x144c>
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a30:	1d3b      	adds	r3, r7, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	4413      	add	r3, r2
 8007a42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007a46:	463b      	mov	r3, r7
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	011a      	lsls	r2, r3, #4
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a52:	4413      	add	r3, r2
 8007a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	1d3b      	adds	r3, r7, #4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a70:	463b      	mov	r3, r7
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d16f      	bne.n	8007b5a <USB_EPStartXfer+0x153e>
 8007a7a:	1d3b      	adds	r3, r7, #4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a92:	4413      	add	r3, r2
 8007a94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a98:	463b      	mov	r3, r7
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	011a      	lsls	r2, r3, #4
 8007aa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d116      	bne.n	8007ae4 <USB_EPStartXfer+0x14c8>
 8007ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ac8:	801a      	strh	r2, [r3, #0]
 8007aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e05e      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8007aea:	d818      	bhi.n	8007b1e <USB_EPStartXfer+0x1502>
 8007aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af0:	085b      	lsrs	r3, r3, #1
 8007af2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d004      	beq.n	8007b0c <USB_EPStartXfer+0x14f0>
 8007b02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b06:	3301      	adds	r3, #1
 8007b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	029b      	lsls	r3, r3, #10
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e041      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <USB_EPStartXfer+0x1522>
 8007b34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	029b      	lsls	r3, r3, #10
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b56:	801a      	strh	r2, [r3, #0]
 8007b58:	e023      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007b5a:	463b      	mov	r3, r7
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d11e      	bne.n	8007ba2 <USB_EPStartXfer+0x1586>
 8007b64:	1d3b      	adds	r3, r7, #4
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b74:	4413      	add	r3, r2
 8007b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	011a      	lsls	r2, r3, #4
 8007b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b86:	4413      	add	r3, r2
 8007b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e001      	b.n	8007ba2 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e02e      	b.n	8007c00 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ba2:	1d3b      	adds	r3, r7, #4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bbc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bc8:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bd4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007bd8:	1d3b      	adds	r3, r7, #4
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	463b      	mov	r3, r7
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d020      	beq.n	8007c5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c32:	81bb      	strh	r3, [r7, #12]
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f083 0310 	eor.w	r3, r3, #16
 8007c3a:	81bb      	strh	r3, [r7, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	89bb      	ldrh	r3, [r7, #12]
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
 8007c5c:	e01f      	b.n	8007c9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	81fb      	strh	r3, [r7, #14]
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c7c:	81fb      	strh	r3, [r7, #14]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b087      	sub	sp, #28
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	7b1b      	ldrb	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 809d 	bne.w	8007df8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	785b      	ldrb	r3, [r3, #1]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d04c      	beq.n	8007d60 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	823b      	strh	r3, [r7, #16]
 8007cd4:	8a3b      	ldrh	r3, [r7, #16]
 8007cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01b      	beq.n	8007d16 <USB_EPClearStall+0x6c>
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4413      	add	r3, r2
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf4:	81fb      	strh	r3, [r7, #14]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	441a      	add	r2, r3
 8007d00:	89fb      	ldrh	r3, [r7, #14]
 8007d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	78db      	ldrb	r3, [r3, #3]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d06c      	beq.n	8007df8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	81bb      	strh	r3, [r7, #12]
 8007d36:	89bb      	ldrh	r3, [r7, #12]
 8007d38:	f083 0320 	eor.w	r3, r3, #32
 8007d3c:	81bb      	strh	r3, [r7, #12]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	89bb      	ldrh	r3, [r7, #12]
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
 8007d5e:	e04b      	b.n	8007df8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	82fb      	strh	r3, [r7, #22]
 8007d6e:	8afb      	ldrh	r3, [r7, #22]
 8007d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01b      	beq.n	8007db0 <USB_EPClearStall+0x106>
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	881b      	ldrh	r3, [r3, #0]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d8e:	82bb      	strh	r3, [r7, #20]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	441a      	add	r2, r3
 8007d9a:	8abb      	ldrh	r3, [r7, #20]
 8007d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc6:	827b      	strh	r3, [r7, #18]
 8007dc8:	8a7b      	ldrh	r3, [r7, #18]
 8007dca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dce:	827b      	strh	r3, [r7, #18]
 8007dd0:	8a7b      	ldrh	r3, [r7, #18]
 8007dd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dd6:	827b      	strh	r3, [r7, #18]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	8a7b      	ldrh	r3, [r7, #18]
 8007de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2280      	movs	r2, #128	; 0x80
 8007e1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bc80      	pop	{r7}
 8007e3c:	4770      	bx	lr

08007e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr

08007e52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b085      	sub	sp, #20
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e64:	68fb      	ldr	r3, [r7, #12]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bc80      	pop	{r7}
 8007e6e:	4770      	bx	lr

08007e70 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b08d      	sub	sp, #52	; 0x34
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	4611      	mov	r1, r2
 8007e92:	461a      	mov	r2, r3
 8007e94:	460b      	mov	r3, r1
 8007e96:	80fb      	strh	r3, [r7, #6]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e9c:	88bb      	ldrh	r3, [r7, #4]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007eac:	88fb      	ldrh	r3, [r7, #6]
 8007eae:	005a      	lsls	r2, r3, #1
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebe:	e01e      	b.n	8007efe <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	3301      	adds	r3, #1
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	3302      	adds	r3, #2
 8007eea:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	3302      	adds	r3, #2
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	3b01      	subs	r3, #1
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1dd      	bne.n	8007ec0 <USB_WritePMA+0x3a>
  }
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	3734      	adds	r7, #52	; 0x34
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr

08007f10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b08b      	sub	sp, #44	; 0x2c
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	460b      	mov	r3, r1
 8007f20:	80fb      	strh	r3, [r7, #6]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f26:	88bb      	ldrh	r3, [r7, #4]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	005a      	lsls	r2, r3, #1
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f42:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
 8007f48:	e01b      	b.n	8007f82 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	3302      	adds	r3, #2
 8007f56:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	3301      	adds	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e0      	bne.n	8007f4a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007f88:	88bb      	ldrh	r3, [r7, #4]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	701a      	strb	r2, [r3, #0]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	372c      	adds	r7, #44	; 0x2c
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr

08007fae <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7c1b      	ldrb	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d115      	bne.n	8007ff2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fca:	2202      	movs	r2, #2
 8007fcc:	2181      	movs	r1, #129	; 0x81
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 febb 	bl	8009d4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fde:	2202      	movs	r2, #2
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 feb1 	bl	8009d4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007ff0:	e012      	b.n	8008018 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ff2:	2340      	movs	r3, #64	; 0x40
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	2181      	movs	r1, #129	; 0x81
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 fea6 	bl	8009d4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008004:	2340      	movs	r3, #64	; 0x40
 8008006:	2202      	movs	r2, #2
 8008008:	2101      	movs	r1, #1
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fe9d 	bl	8009d4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008018:	2308      	movs	r3, #8
 800801a:	2203      	movs	r2, #3
 800801c:	2182      	movs	r1, #130	; 0x82
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fe93 	bl	8009d4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800802a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800802e:	f001 ffb3 	bl	8009f98 <USBD_static_malloc>
 8008032:	4602      	mov	r2, r0
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008040:	2b00      	cmp	r3, #0
 8008042:	d102      	bne.n	800804a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008044:	2301      	movs	r3, #1
 8008046:	73fb      	strb	r3, [r7, #15]
 8008048:	e026      	b.n	8008098 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008050:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2200      	movs	r2, #0
 8008068:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7c1b      	ldrb	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d109      	bne.n	8008088 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800807a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800807e:	2101      	movs	r1, #1
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 ff53 	bl	8009f2c <USBD_LL_PrepareReceive>
 8008086:	e007      	b.n	8008098 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 ff4a 	bl	8009f2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080b2:	2181      	movs	r1, #129	; 0x81
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fe6e 	bl	8009d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080c0:	2101      	movs	r1, #1
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fe67 	bl	8009d96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080d0:	2182      	movs	r1, #130	; 0x82
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f001 fe5f 	bl	8009d96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00e      	beq.n	8008106 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 ff59 	bl	8009fb0 <USBD_static_free>
    pdev->pClassData = NULL;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008120:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008136:	2b00      	cmp	r3, #0
 8008138:	d039      	beq.n	80081ae <USBD_CDC_Setup+0x9e>
 800813a:	2b20      	cmp	r3, #32
 800813c:	d17f      	bne.n	800823e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	88db      	ldrh	r3, [r3, #6]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d029      	beq.n	800819a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	b25b      	sxtb	r3, r3
 800814c:	2b00      	cmp	r3, #0
 800814e:	da11      	bge.n	8008174 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800815c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	88d2      	ldrh	r2, [r2, #6]
 8008162:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008164:	6939      	ldr	r1, [r7, #16]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	461a      	mov	r2, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 fa0a 	bl	8009586 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008172:	e06b      	b.n	800824c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	785a      	ldrb	r2, [r3, #1]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800818a:	6939      	ldr	r1, [r7, #16]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	88db      	ldrh	r3, [r3, #6]
 8008190:	461a      	mov	r2, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f001 fa25 	bl	80095e2 <USBD_CtlPrepareRx>
      break;
 8008198:	e058      	b.n	800824c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	7850      	ldrb	r0, [r2, #1]
 80081a6:	2200      	movs	r2, #0
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	4798      	blx	r3
      break;
 80081ac:	e04e      	b.n	800824c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b0b      	cmp	r3, #11
 80081b4:	d02e      	beq.n	8008214 <USBD_CDC_Setup+0x104>
 80081b6:	2b0b      	cmp	r3, #11
 80081b8:	dc38      	bgt.n	800822c <USBD_CDC_Setup+0x11c>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <USBD_CDC_Setup+0xb4>
 80081be:	2b0a      	cmp	r3, #10
 80081c0:	d014      	beq.n	80081ec <USBD_CDC_Setup+0xdc>
 80081c2:	e033      	b.n	800822c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d107      	bne.n	80081de <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081ce:	f107 030c 	add.w	r3, r7, #12
 80081d2:	2202      	movs	r2, #2
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f9d5 	bl	8009586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081dc:	e02e      	b.n	800823c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 f966 	bl	80094b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	75fb      	strb	r3, [r7, #23]
          break;
 80081ea:	e027      	b.n	800823c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d107      	bne.n	8008206 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081f6:	f107 030f 	add.w	r3, r7, #15
 80081fa:	2201      	movs	r2, #1
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 f9c1 	bl	8009586 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008204:	e01a      	b.n	800823c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f952 	bl	80094b2 <USBD_CtlError>
            ret = USBD_FAIL;
 800820e:	2302      	movs	r3, #2
 8008210:	75fb      	strb	r3, [r7, #23]
          break;
 8008212:	e013      	b.n	800823c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821a:	2b03      	cmp	r3, #3
 800821c:	d00d      	beq.n	800823a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f946 	bl	80094b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008226:	2302      	movs	r3, #2
 8008228:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800822a:	e006      	b.n	800823a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f93f 	bl	80094b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	75fb      	strb	r3, [r7, #23]
          break;
 8008238:	e000      	b.n	800823c <USBD_CDC_Setup+0x12c>
          break;
 800823a:	bf00      	nop
      }
      break;
 800823c:	e006      	b.n	800824c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f936 	bl	80094b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008246:	2302      	movs	r3, #2
 8008248:	75fb      	strb	r3, [r7, #23]
      break;
 800824a:	bf00      	nop
  }

  return ret;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008268:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008270:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008278:	2b00      	cmp	r3, #0
 800827a:	d03a      	beq.n	80082f2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800827c:	78fa      	ldrb	r2, [r7, #3]
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	331c      	adds	r3, #28
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d029      	beq.n	80082e6 <USBD_CDC_DataIn+0x90>
 8008292:	78fa      	ldrb	r2, [r7, #3]
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	440b      	add	r3, r1
 80082a0:	331c      	adds	r3, #28
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	78f9      	ldrb	r1, [r7, #3]
 80082a6:	68b8      	ldr	r0, [r7, #8]
 80082a8:	460b      	mov	r3, r1
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	4403      	add	r3, r0
 80082b2:	3338      	adds	r3, #56	; 0x38
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80082ba:	fb03 f301 	mul.w	r3, r3, r1
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d110      	bne.n	80082e6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	331c      	adds	r3, #28
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082d8:	78f9      	ldrb	r1, [r7, #3]
 80082da:	2300      	movs	r3, #0
 80082dc:	2200      	movs	r2, #0
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fe01 	bl	8009ee6 <USBD_LL_Transmit>
 80082e4:	e003      	b.n	80082ee <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e000      	b.n	80082f4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082f2:	2302      	movs	r3, #2
  }
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fe2c 	bl	8009f72 <USBD_LL_GetRxDataSize>
 800831a:	4602      	mov	r2, r0
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008340:	4611      	mov	r1, r2
 8008342:	4798      	blx	r3

    return USBD_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	e000      	b.n	800834a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008348:	2302      	movs	r3, #2
  }
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008360:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008368:	2b00      	cmp	r3, #0
 800836a:	d015      	beq.n	8008398 <USBD_CDC_EP0_RxReady+0x46>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008372:	2bff      	cmp	r3, #255	; 0xff
 8008374:	d010      	beq.n	8008398 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008384:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800838c:	b292      	uxth	r2, r2
 800838e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	22ff      	movs	r2, #255	; 0xff
 8008394:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2243      	movs	r2, #67	; 0x43
 80083b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200000d8 	.word	0x200000d8

080083c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2243      	movs	r2, #67	; 0x43
 80083d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80083d2:	4b03      	ldr	r3, [pc, #12]	; (80083e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000094 	.word	0x20000094

080083e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2243      	movs	r2, #67	; 0x43
 80083f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083f2:	4b03      	ldr	r3, [pc, #12]	; (8008400 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bc80      	pop	{r7}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	2000011c 	.word	0x2000011c

08008404 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	220a      	movs	r2, #10
 8008410:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008412:	4b03      	ldr	r3, [pc, #12]	; (8008420 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	bc80      	pop	{r7}
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20000050 	.word	0x20000050

08008424 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800842e:	2302      	movs	r3, #2
 8008430:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	bc80      	pop	{r7}
 800844e:	4770      	bx	lr

08008450 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008464:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008492:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bc80      	pop	{r7}
 80084a6:	4770      	bx	lr

080084a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01c      	beq.n	80084fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d115      	bne.n	80084f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2181      	movs	r1, #129	; 0x81
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 fcf9 	bl	8009ee6 <USBD_LL_Transmit>

      return USBD_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	e002      	b.n	80084fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008514:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851c:	2b00      	cmp	r3, #0
 800851e:	d017      	beq.n	8008550 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7c1b      	ldrb	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d109      	bne.n	800853c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800852e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008532:	2101      	movs	r1, #1
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fcf9 	bl	8009f2c <USBD_LL_PrepareReceive>
 800853a:	e007      	b.n	800854c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008542:	2340      	movs	r3, #64	; 0x40
 8008544:	2101      	movs	r1, #1
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fcf0 	bl	8009f2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	e000      	b.n	8008552 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008550:	2302      	movs	r3, #2
  }
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	4613      	mov	r3, r2
 8008566:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800856e:	2302      	movs	r3, #2
 8008570:	e01a      	b.n	80085a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	79fa      	ldrb	r2, [r7, #7]
 800859e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 fb5d 	bl	8009c60 <USBD_LL_Init>

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	e001      	b.n	80085d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085d2:	2302      	movs	r3, #2
 80085d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	bc80      	pop	{r7}
 80085e0:	4770      	bx	lr

080085e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f001 fb92 	bl	8009d14 <USBD_LL_Start>

  return USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	bc80      	pop	{r7}
 800860c:	4770      	bx	lr

0800860e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800861a:	2302      	movs	r3, #2
 800861c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008642:	7bfb      	ldrb	r3, [r7, #15]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	4611      	mov	r1, r2
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3

  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fed8 	bl	800943a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008698:	461a      	mov	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d016      	beq.n	80086dc <USBD_LL_SetupStage+0x6a>
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d81c      	bhi.n	80086ec <USBD_LL_SetupStage+0x7a>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d002      	beq.n	80086bc <USBD_LL_SetupStage+0x4a>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d008      	beq.n	80086cc <USBD_LL_SetupStage+0x5a>
 80086ba:	e017      	b.n	80086ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f9cb 	bl	8008a60 <USBD_StdDevReq>
      break;
 80086ca:	e01a      	b.n	8008702 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa2d 	bl	8008b34 <USBD_StdItfReq>
      break;
 80086da:	e012      	b.n	8008702 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa6d 	bl	8008bc4 <USBD_StdEPReq>
      break;
 80086ea:	e00a      	b.n	8008702 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80086f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fb6a 	bl	8009dd4 <USBD_LL_StallEP>
      break;
 8008700:	bf00      	nop
  }

  return USBD_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	460b      	mov	r3, r1
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800871a:	7afb      	ldrb	r3, [r7, #11]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d14b      	bne.n	80087b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008726:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800872e:	2b03      	cmp	r3, #3
 8008730:	d134      	bne.n	800879c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	429a      	cmp	r2, r3
 800873c:	d919      	bls.n	8008772 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008754:	429a      	cmp	r2, r3
 8008756:	d203      	bcs.n	8008760 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800875c:	b29b      	uxth	r3, r3
 800875e:	e002      	b.n	8008766 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008764:	b29b      	uxth	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 ff57 	bl	800961e <USBD_CtlContinueRx>
 8008770:	e038      	b.n	80087e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008784:	2b03      	cmp	r3, #3
 8008786:	d105      	bne.n	8008794 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 ff54 	bl	8009642 <USBD_CtlSendStatus>
 800879a:	e023      	b.n	80087e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087a2:	2b05      	cmp	r3, #5
 80087a4:	d11e      	bne.n	80087e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80087ae:	2100      	movs	r1, #0
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 fb0f 	bl	8009dd4 <USBD_LL_StallEP>
 80087b6:	e015      	b.n	80087e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00d      	beq.n	80087e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d108      	bne.n	80087e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	7afa      	ldrb	r2, [r7, #11]
 80087d8:	4611      	mov	r1, r2
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	4798      	blx	r3
 80087de:	e001      	b.n	80087e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087e0:	2302      	movs	r3, #2
 80087e2:	e000      	b.n	80087e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	460b      	mov	r3, r1
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d17f      	bne.n	8008902 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3314      	adds	r3, #20
 8008806:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800880e:	2b02      	cmp	r3, #2
 8008810:	d15c      	bne.n	80088cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	429a      	cmp	r2, r3
 800881c:	d915      	bls.n	800884a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	68da      	ldr	r2, [r3, #12]
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f000 fec1 	bl	80095be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f001 fb72 	bl	8009f2c <USBD_LL_PrepareReceive>
 8008848:	e04e      	b.n	80088e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	6912      	ldr	r2, [r2, #16]
 8008852:	fbb3 f1f2 	udiv	r1, r3, r2
 8008856:	fb02 f201 	mul.w	r2, r2, r1
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d11c      	bne.n	800889a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008868:	429a      	cmp	r2, r3
 800886a:	d316      	bcc.n	800889a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	689a      	ldr	r2, [r3, #8]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008876:	429a      	cmp	r2, r3
 8008878:	d20f      	bcs.n	800889a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fe9d 	bl	80095be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800888c:	2300      	movs	r3, #0
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f001 fb4a 	bl	8009f2c <USBD_LL_PrepareReceive>
 8008898:	e026      	b.n	80088e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d105      	bne.n	80088bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80088bc:	2180      	movs	r1, #128	; 0x80
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f001 fa88 	bl	8009dd4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fecf 	bl	8009668 <USBD_CtlReceiveStatus>
 80088ca:	e00d      	b.n	80088e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d004      	beq.n	80088e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d103      	bne.n	80088e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088e0:	2180      	movs	r1, #128	; 0x80
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f001 fa76 	bl	8009dd4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d11d      	bne.n	800892e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff fe81 	bl	80085fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008900:	e015      	b.n	800892e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00d      	beq.n	800892a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008914:	2b03      	cmp	r3, #3
 8008916:	d108      	bne.n	800892a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	7afa      	ldrb	r2, [r7, #11]
 8008922:	4611      	mov	r1, r2
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	4798      	blx	r3
 8008928:	e001      	b.n	800892e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	e000      	b.n	8008930 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008940:	2340      	movs	r3, #64	; 0x40
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f001 f9ff 	bl	8009d4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2240      	movs	r2, #64	; 0x40
 8008958:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	2200      	movs	r2, #0
 8008960:	2180      	movs	r1, #128	; 0x80
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f9f1 	bl	8009d4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2240      	movs	r2, #64	; 0x40
 8008972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d009      	beq.n	80089b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6852      	ldr	r2, [r2, #4]
 80089a8:	b2d2      	uxtb	r2, r2
 80089aa:	4611      	mov	r1, r2
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4798      	blx	r3
  }

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	78fa      	ldrb	r2, [r7, #3]
 80089ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2204      	movs	r2, #4
 80089f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bc80      	pop	{r7}
 80089fe:	4770      	bx	lr

08008a00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d105      	bne.n	8008a1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bc80      	pop	{r7}
 8008a28:	4770      	bx	lr

08008a2a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d10b      	bne.n	8008a54 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a76:	2b40      	cmp	r3, #64	; 0x40
 8008a78:	d005      	beq.n	8008a86 <USBD_StdDevReq+0x26>
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	d84f      	bhi.n	8008b1e <USBD_StdDevReq+0xbe>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d009      	beq.n	8008a96 <USBD_StdDevReq+0x36>
 8008a82:	2b20      	cmp	r3, #32
 8008a84:	d14b      	bne.n	8008b1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
      break;
 8008a94:	e048      	b.n	8008b28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	785b      	ldrb	r3, [r3, #1]
 8008a9a:	2b09      	cmp	r3, #9
 8008a9c:	d839      	bhi.n	8008b12 <USBD_StdDevReq+0xb2>
 8008a9e:	a201      	add	r2, pc, #4	; (adr r2, 8008aa4 <USBD_StdDevReq+0x44>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008af5 	.word	0x08008af5
 8008aa8:	08008b09 	.word	0x08008b09
 8008aac:	08008b13 	.word	0x08008b13
 8008ab0:	08008aff 	.word	0x08008aff
 8008ab4:	08008b13 	.word	0x08008b13
 8008ab8:	08008ad7 	.word	0x08008ad7
 8008abc:	08008acd 	.word	0x08008acd
 8008ac0:	08008b13 	.word	0x08008b13
 8008ac4:	08008aeb 	.word	0x08008aeb
 8008ac8:	08008ae1 	.word	0x08008ae1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f9dc 	bl	8008e8c <USBD_GetDescriptor>
          break;
 8008ad4:	e022      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb3f 	bl	800915c <USBD_SetAddress>
          break;
 8008ade:	e01d      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fb7e 	bl	80091e4 <USBD_SetConfig>
          break;
 8008ae8:	e018      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc07 	bl	8009300 <USBD_GetConfig>
          break;
 8008af2:	e013      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fc37 	bl	800936a <USBD_GetStatus>
          break;
 8008afc:	e00e      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fc65 	bl	80093d0 <USBD_SetFeature>
          break;
 8008b06:	e009      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fc74 	bl	80093f8 <USBD_ClrFeature>
          break;
 8008b10:	e004      	b.n	8008b1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fccc 	bl	80094b2 <USBD_CtlError>
          break;
 8008b1a:	bf00      	nop
      }
      break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fcc6 	bl	80094b2 <USBD_CtlError>
      break;
 8008b26:	bf00      	nop
  }

  return ret;
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop

08008b34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b4a:	2b40      	cmp	r3, #64	; 0x40
 8008b4c:	d005      	beq.n	8008b5a <USBD_StdItfReq+0x26>
 8008b4e:	2b40      	cmp	r3, #64	; 0x40
 8008b50:	d82e      	bhi.n	8008bb0 <USBD_StdItfReq+0x7c>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <USBD_StdItfReq+0x26>
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d12a      	bne.n	8008bb0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d81d      	bhi.n	8008ba2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	889b      	ldrh	r3, [r3, #4]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d813      	bhi.n	8008b98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	88db      	ldrh	r3, [r3, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d110      	bne.n	8008bac <USBD_StdItfReq+0x78>
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10d      	bne.n	8008bac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fd56 	bl	8009642 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b96:	e009      	b.n	8008bac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fc89 	bl	80094b2 <USBD_CtlError>
          break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fc84 	bl	80094b2 <USBD_CtlError>
          break;
 8008baa:	e000      	b.n	8008bae <USBD_StdItfReq+0x7a>
          break;
 8008bac:	bf00      	nop
      }
      break;
 8008bae:	e004      	b.n	8008bba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fc7d 	bl	80094b2 <USBD_CtlError>
      break;
 8008bb8:	bf00      	nop
  }

  return USBD_OK;
 8008bba:	2300      	movs	r3, #0
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	889b      	ldrh	r3, [r3, #4]
 8008bd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d007      	beq.n	8008bf4 <USBD_StdEPReq+0x30>
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	f200 8146 	bhi.w	8008e76 <USBD_StdEPReq+0x2b2>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <USBD_StdEPReq+0x40>
 8008bee:	2b20      	cmp	r3, #32
 8008bf0:	f040 8141 	bne.w	8008e76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
      break;
 8008c02:	e13d      	b.n	8008e80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d10a      	bne.n	8008c26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	4798      	blx	r3
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	e12d      	b.n	8008e82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d007      	beq.n	8008c3e <USBD_StdEPReq+0x7a>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	f300 811b 	bgt.w	8008e6a <USBD_StdEPReq+0x2a6>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d072      	beq.n	8008d1e <USBD_StdEPReq+0x15a>
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d03a      	beq.n	8008cb2 <USBD_StdEPReq+0xee>
 8008c3c:	e115      	b.n	8008e6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_StdEPReq+0x8a>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d015      	beq.n	8008c78 <USBD_StdEPReq+0xb4>
 8008c4c:	e02b      	b.n	8008ca6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <USBD_StdEPReq+0xaa>
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b80      	cmp	r3, #128	; 0x80
 8008c58:	d009      	beq.n	8008c6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 f8b8 	bl	8009dd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c64:	2180      	movs	r1, #128	; 0x80
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 f8b4 	bl	8009dd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c6c:	e020      	b.n	8008cb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc1e 	bl	80094b2 <USBD_CtlError>
              break;
 8008c76:	e01b      	b.n	8008cb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10e      	bne.n	8008c9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <USBD_StdEPReq+0xda>
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b80      	cmp	r3, #128	; 0x80
 8008c8a:	d008      	beq.n	8008c9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f89b 	bl	8009dd4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fccf 	bl	8009642 <USBD_CtlSendStatus>

              break;
 8008ca4:	e004      	b.n	8008cb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fc02 	bl	80094b2 <USBD_CtlError>
              break;
 8008cae:	bf00      	nop
          }
          break;
 8008cb0:	e0e0      	b.n	8008e74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d002      	beq.n	8008cc2 <USBD_StdEPReq+0xfe>
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d015      	beq.n	8008cec <USBD_StdEPReq+0x128>
 8008cc0:	e026      	b.n	8008d10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <USBD_StdEPReq+0x11e>
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b80      	cmp	r3, #128	; 0x80
 8008ccc:	d009      	beq.n	8008ce2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 f87e 	bl	8009dd4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cd8:	2180      	movs	r1, #128	; 0x80
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f87a 	bl	8009dd4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce0:	e01c      	b.n	8008d1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fbe4 	bl	80094b2 <USBD_CtlError>
              break;
 8008cea:	e017      	b.n	8008d1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	885b      	ldrh	r3, [r3, #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d112      	bne.n	8008d1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d004      	beq.n	8008d08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f885 	bl	8009e12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc9a 	bl	8009642 <USBD_CtlSendStatus>
              }
              break;
 8008d0e:	e004      	b.n	8008d1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fbcd 	bl	80094b2 <USBD_CtlError>
              break;
 8008d18:	e000      	b.n	8008d1c <USBD_StdEPReq+0x158>
              break;
 8008d1a:	bf00      	nop
          }
          break;
 8008d1c:	e0aa      	b.n	8008e74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d002      	beq.n	8008d2e <USBD_StdEPReq+0x16a>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d032      	beq.n	8008d92 <USBD_StdEPReq+0x1ce>
 8008d2c:	e097      	b.n	8008e5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <USBD_StdEPReq+0x180>
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b80      	cmp	r3, #128	; 0x80
 8008d38:	d004      	beq.n	8008d44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fbb8 	bl	80094b2 <USBD_CtlError>
                break;
 8008d42:	e091      	b.n	8008e68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	da0b      	bge.n	8008d64 <USBD_StdEPReq+0x1a0>
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	3310      	adds	r3, #16
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	e00b      	b.n	8008d7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	4413      	add	r3, r2
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2202      	movs	r2, #2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fbfb 	bl	8009586 <USBD_CtlSendData>
              break;
 8008d90:	e06a      	b.n	8008e68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da11      	bge.n	8008dbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	f003 020f 	and.w	r2, r3, #15
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	3318      	adds	r3, #24
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d117      	bne.n	8008de4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fb7b 	bl	80094b2 <USBD_CtlError>
                  break;
 8008dbc:	e054      	b.n	8008e68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	f003 020f 	and.w	r2, r3, #15
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d104      	bne.n	8008de4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fb68 	bl	80094b2 <USBD_CtlError>
                  break;
 8008de2:	e041      	b.n	8008e68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da0b      	bge.n	8008e04 <USBD_StdEPReq+0x240>
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	3310      	adds	r3, #16
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	4413      	add	r3, r2
 8008e00:	3304      	adds	r3, #4
 8008e02:	e00b      	b.n	8008e1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <USBD_StdEPReq+0x266>
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d103      	bne.n	8008e32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e00e      	b.n	8008e50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 f80a 	bl	8009e50 <USBD_LL_IsStallEP>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2201      	movs	r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	e002      	b.n	8008e50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2202      	movs	r2, #2
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fb95 	bl	8009586 <USBD_CtlSendData>
              break;
 8008e5c:	e004      	b.n	8008e68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fb26 	bl	80094b2 <USBD_CtlError>
              break;
 8008e66:	bf00      	nop
          }
          break;
 8008e68:	e004      	b.n	8008e74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fb20 	bl	80094b2 <USBD_CtlError>
          break;
 8008e72:	bf00      	nop
      }
      break;
 8008e74:	e004      	b.n	8008e80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fb1a 	bl	80094b2 <USBD_CtlError>
      break;
 8008e7e:	bf00      	nop
  }

  return ret;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	885b      	ldrh	r3, [r3, #2]
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b06      	cmp	r3, #6
 8008eae:	f200 8128 	bhi.w	8009102 <USBD_GetDescriptor+0x276>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBD_GetDescriptor+0x2c>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008ed5 	.word	0x08008ed5
 8008ebc:	08008eed 	.word	0x08008eed
 8008ec0:	08008f2d 	.word	0x08008f2d
 8008ec4:	08009103 	.word	0x08009103
 8008ec8:	08009103 	.word	0x08009103
 8008ecc:	080090a3 	.word	0x080090a3
 8008ed0:	080090cf 	.word	0x080090cf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	7c12      	ldrb	r2, [r2, #16]
 8008ee0:	f107 0108 	add.w	r1, r7, #8
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	4798      	blx	r3
 8008ee8:	60f8      	str	r0, [r7, #12]
      break;
 8008eea:	e112      	b.n	8009112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	7c1b      	ldrb	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10d      	bne.n	8008f10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efc:	f107 0208 	add.w	r2, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f0e:	e100      	b.n	8009112 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	f107 0208 	add.w	r2, r7, #8
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
 8008f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3301      	adds	r3, #1
 8008f26:	2202      	movs	r2, #2
 8008f28:	701a      	strb	r2, [r3, #0]
      break;
 8008f2a:	e0f2      	b.n	8009112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	f200 80ac 	bhi.w	8009090 <USBD_GetDescriptor+0x204>
 8008f38:	a201      	add	r2, pc, #4	; (adr r2, 8008f40 <USBD_GetDescriptor+0xb4>)
 8008f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3e:	bf00      	nop
 8008f40:	08008f59 	.word	0x08008f59
 8008f44:	08008f8d 	.word	0x08008f8d
 8008f48:	08008fc1 	.word	0x08008fc1
 8008f4c:	08008ff5 	.word	0x08008ff5
 8008f50:	08009029 	.word	0x08009029
 8008f54:	0800905d 	.word	0x0800905d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	7c12      	ldrb	r2, [r2, #16]
 8008f70:	f107 0108 	add.w	r1, r7, #8
 8008f74:	4610      	mov	r0, r2
 8008f76:	4798      	blx	r3
 8008f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7a:	e091      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fa97 	bl	80094b2 <USBD_CtlError>
            err++;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	3301      	adds	r3, #1
 8008f88:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8a:	e089      	b.n	80090a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	7c12      	ldrb	r2, [r2, #16]
 8008fa4:	f107 0108 	add.w	r1, r7, #8
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
 8008fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fae:	e077      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa7d 	bl	80094b2 <USBD_CtlError>
            err++;
 8008fb8:	7afb      	ldrb	r3, [r7, #11]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008fbe:	e06f      	b.n	80090a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe2:	e05d      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fa63 	bl	80094b2 <USBD_CtlError>
            err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff2:	e055      	b.n	80090a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00b      	beq.n	8009018 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	7c12      	ldrb	r2, [r2, #16]
 800900c:	f107 0108 	add.w	r1, r7, #8
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009016:	e043      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa49 	bl	80094b2 <USBD_CtlError>
            err++;
 8009020:	7afb      	ldrb	r3, [r7, #11]
 8009022:	3301      	adds	r3, #1
 8009024:	72fb      	strb	r3, [r7, #11]
          break;
 8009026:	e03b      	b.n	80090a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	7c12      	ldrb	r2, [r2, #16]
 8009040:	f107 0108 	add.w	r1, r7, #8
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
 8009048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904a:	e029      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa2f 	bl	80094b2 <USBD_CtlError>
            err++;
 8009054:	7afb      	ldrb	r3, [r7, #11]
 8009056:	3301      	adds	r3, #1
 8009058:	72fb      	strb	r3, [r7, #11]
          break;
 800905a:	e021      	b.n	80090a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	7c12      	ldrb	r2, [r2, #16]
 8009074:	f107 0108 	add.w	r1, r7, #8
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800907e:	e00f      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa15 	bl	80094b2 <USBD_CtlError>
            err++;
 8009088:	7afb      	ldrb	r3, [r7, #11]
 800908a:	3301      	adds	r3, #1
 800908c:	72fb      	strb	r3, [r7, #11]
          break;
 800908e:	e007      	b.n	80090a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa0d 	bl	80094b2 <USBD_CtlError>
          err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800909e:	e038      	b.n	8009112 <USBD_GetDescriptor+0x286>
 80090a0:	e037      	b.n	8009112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7c1b      	ldrb	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d109      	bne.n	80090be <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f107 0208 	add.w	r2, r7, #8
 80090b6:	4610      	mov	r0, r2
 80090b8:	4798      	blx	r3
 80090ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090bc:	e029      	b.n	8009112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f9f6 	bl	80094b2 <USBD_CtlError>
        err++;
 80090c6:	7afb      	ldrb	r3, [r7, #11]
 80090c8:	3301      	adds	r3, #1
 80090ca:	72fb      	strb	r3, [r7, #11]
      break;
 80090cc:	e021      	b.n	8009112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7c1b      	ldrb	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10d      	bne.n	80090f2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f107 0208 	add.w	r2, r7, #8
 80090e2:	4610      	mov	r0, r2
 80090e4:	4798      	blx	r3
 80090e6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3301      	adds	r3, #1
 80090ec:	2207      	movs	r2, #7
 80090ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090f0:	e00f      	b.n	8009112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f9dc 	bl	80094b2 <USBD_CtlError>
        err++;
 80090fa:	7afb      	ldrb	r3, [r7, #11]
 80090fc:	3301      	adds	r3, #1
 80090fe:	72fb      	strb	r3, [r7, #11]
      break;
 8009100:	e007      	b.n	8009112 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9d4 	bl	80094b2 <USBD_CtlError>
      err++;
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	3301      	adds	r3, #1
 800910e:	72fb      	strb	r3, [r7, #11]
      break;
 8009110:	bf00      	nop
  }

  if (err != 0U)
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d11c      	bne.n	8009152 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009118:	893b      	ldrh	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d011      	beq.n	8009142 <USBD_GetDescriptor+0x2b6>
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	88db      	ldrh	r3, [r3, #6]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88da      	ldrh	r2, [r3, #6]
 800912a:	893b      	ldrh	r3, [r7, #8]
 800912c:	4293      	cmp	r3, r2
 800912e:	bf28      	it	cs
 8009130:	4613      	movcs	r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009136:	893b      	ldrh	r3, [r7, #8]
 8009138:	461a      	mov	r2, r3
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fa22 	bl	8009586 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	88db      	ldrh	r3, [r3, #6]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa79 	bl	8009642 <USBD_CtlSendStatus>
 8009150:	e000      	b.n	8009154 <USBD_GetDescriptor+0x2c8>
    return;
 8009152:	bf00      	nop
    }
  }
}
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop

0800915c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	889b      	ldrh	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d130      	bne.n	80091d0 <USBD_SetAddress+0x74>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d12c      	bne.n	80091d0 <USBD_SetAddress+0x74>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	2b7f      	cmp	r3, #127	; 0x7f
 800917c:	d828      	bhi.n	80091d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	885b      	ldrh	r3, [r3, #2]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009188:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	2b03      	cmp	r3, #3
 8009192:	d104      	bne.n	800919e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f98b 	bl	80094b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919c:	e01d      	b.n	80091da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7bfa      	ldrb	r2, [r7, #15]
 80091a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fe7c 	bl	8009ea8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fa46 	bl	8009642 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2202      	movs	r2, #2
 80091c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c4:	e009      	b.n	80091da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ce:	e004      	b.n	80091da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f96d 	bl	80094b2 <USBD_CtlError>
  }
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	4b41      	ldr	r3, [pc, #260]	; (80092fc <USBD_SetConfig+0x118>)
 80091f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091f8:	4b40      	ldr	r3, [pc, #256]	; (80092fc <USBD_SetConfig+0x118>)
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d904      	bls.n	800920a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f955 	bl	80094b2 <USBD_CtlError>
 8009208:	e075      	b.n	80092f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	2b02      	cmp	r3, #2
 8009212:	d002      	beq.n	800921a <USBD_SetConfig+0x36>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d023      	beq.n	8009260 <USBD_SetConfig+0x7c>
 8009218:	e062      	b.n	80092e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800921a:	4b38      	ldr	r3, [pc, #224]	; (80092fc <USBD_SetConfig+0x118>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d01a      	beq.n	8009258 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009222:	4b36      	ldr	r3, [pc, #216]	; (80092fc <USBD_SetConfig+0x118>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2203      	movs	r2, #3
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009234:	4b31      	ldr	r3, [pc, #196]	; (80092fc <USBD_SetConfig+0x118>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff f9e7 	bl	800860e <USBD_SetClassConfig>
 8009240:	4603      	mov	r3, r0
 8009242:	2b02      	cmp	r3, #2
 8009244:	d104      	bne.n	8009250 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f932 	bl	80094b2 <USBD_CtlError>
            return;
 800924e:	e052      	b.n	80092f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f9f6 	bl	8009642 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009256:	e04e      	b.n	80092f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f9f2 	bl	8009642 <USBD_CtlSendStatus>
        break;
 800925e:	e04a      	b.n	80092f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009260:	4b26      	ldr	r3, [pc, #152]	; (80092fc <USBD_SetConfig+0x118>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d112      	bne.n	800928e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009270:	4b22      	ldr	r3, [pc, #136]	; (80092fc <USBD_SetConfig+0x118>)
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800927a:	4b20      	ldr	r3, [pc, #128]	; (80092fc <USBD_SetConfig+0x118>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff f9e3 	bl	800864c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f9db 	bl	8009642 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800928c:	e033      	b.n	80092f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800928e:	4b1b      	ldr	r3, [pc, #108]	; (80092fc <USBD_SetConfig+0x118>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	429a      	cmp	r2, r3
 800929a:	d01d      	beq.n	80092d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff f9d1 	bl	800864c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <USBD_SetConfig+0x118>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092b4:	4b11      	ldr	r3, [pc, #68]	; (80092fc <USBD_SetConfig+0x118>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff f9a7 	bl	800860e <USBD_SetClassConfig>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d104      	bne.n	80092d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f8f2 	bl	80094b2 <USBD_CtlError>
            return;
 80092ce:	e012      	b.n	80092f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f9b6 	bl	8009642 <USBD_CtlSendStatus>
        break;
 80092d6:	e00e      	b.n	80092f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f9b2 	bl	8009642 <USBD_CtlSendStatus>
        break;
 80092de:	e00a      	b.n	80092f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f8e5 	bl	80094b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092e8:	4b04      	ldr	r3, [pc, #16]	; (80092fc <USBD_SetConfig+0x118>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff f9ac 	bl	800864c <USBD_ClrClassConfig>
        break;
 80092f4:	bf00      	nop
    }
  }
}
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000268 	.word	0x20000268

08009300 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	88db      	ldrh	r3, [r3, #6]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d004      	beq.n	800931c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009312:	6839      	ldr	r1, [r7, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f8cc 	bl	80094b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800931a:	e022      	b.n	8009362 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009322:	2b02      	cmp	r3, #2
 8009324:	dc02      	bgt.n	800932c <USBD_GetConfig+0x2c>
 8009326:	2b00      	cmp	r3, #0
 8009328:	dc03      	bgt.n	8009332 <USBD_GetConfig+0x32>
 800932a:	e015      	b.n	8009358 <USBD_GetConfig+0x58>
 800932c:	2b03      	cmp	r3, #3
 800932e:	d00b      	beq.n	8009348 <USBD_GetConfig+0x48>
 8009330:	e012      	b.n	8009358 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3308      	adds	r3, #8
 800933c:	2201      	movs	r2, #1
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f920 	bl	8009586 <USBD_CtlSendData>
        break;
 8009346:	e00c      	b.n	8009362 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3304      	adds	r3, #4
 800934c:	2201      	movs	r2, #1
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f918 	bl	8009586 <USBD_CtlSendData>
        break;
 8009356:	e004      	b.n	8009362 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f8a9 	bl	80094b2 <USBD_CtlError>
        break;
 8009360:	bf00      	nop
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937a:	3b01      	subs	r3, #1
 800937c:	2b02      	cmp	r3, #2
 800937e:	d81e      	bhi.n	80093be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	88db      	ldrh	r3, [r3, #6]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d004      	beq.n	8009392 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f891 	bl	80094b2 <USBD_CtlError>
        break;
 8009390:	e01a      	b.n	80093c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	f043 0202 	orr.w	r2, r3, #2
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	330c      	adds	r3, #12
 80093b2:	2202      	movs	r2, #2
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f8e5 	bl	8009586 <USBD_CtlSendData>
      break;
 80093bc:	e004      	b.n	80093c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f876 	bl	80094b2 <USBD_CtlError>
      break;
 80093c6:	bf00      	nop
  }
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	885b      	ldrh	r3, [r3, #2]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d106      	bne.n	80093f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f929 	bl	8009642 <USBD_CtlSendStatus>
  }
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009408:	3b01      	subs	r3, #1
 800940a:	2b02      	cmp	r3, #2
 800940c:	d80b      	bhi.n	8009426 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d10c      	bne.n	8009430 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f90f 	bl	8009642 <USBD_CtlSendStatus>
      }
      break;
 8009424:	e004      	b.n	8009430 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f842 	bl	80094b2 <USBD_CtlError>
      break;
 800942e:	e000      	b.n	8009432 <USBD_ClrFeature+0x3a>
      break;
 8009430:	bf00      	nop
  }
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781a      	ldrb	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	785a      	ldrb	r2, [r3, #1]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	3302      	adds	r3, #2
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b29a      	uxth	r2, r3
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	3303      	adds	r3, #3
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	021b      	lsls	r3, r3, #8
 8009466:	b29b      	uxth	r3, r3
 8009468:	4413      	add	r3, r2
 800946a:	b29a      	uxth	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3304      	adds	r3, #4
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	b29a      	uxth	r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	3305      	adds	r3, #5
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	b29b      	uxth	r3, r3
 8009484:	4413      	add	r3, r2
 8009486:	b29a      	uxth	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	3306      	adds	r3, #6
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	b29a      	uxth	r2, r3
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	3307      	adds	r3, #7
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	80da      	strh	r2, [r3, #6]

}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bc80      	pop	{r7}
 80094b0:	4770      	bx	lr

080094b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094bc:	2180      	movs	r1, #128	; 0x80
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fc88 	bl	8009dd4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094c4:	2100      	movs	r1, #0
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fc84 	bl	8009dd4 <USBD_LL_StallEP>
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d032      	beq.n	8009550 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f834 	bl	8009558 <USBD_GetLen>
 80094f0:	4603      	mov	r3, r0
 80094f2:	3301      	adds	r3, #1
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	005b      	lsls	r3, r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	75fa      	strb	r2, [r7, #23]
 8009504:	461a      	mov	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	4413      	add	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	7812      	ldrb	r2, [r2, #0]
 800950e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	75fa      	strb	r2, [r7, #23]
 8009516:	461a      	mov	r2, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4413      	add	r3, r2
 800951c:	2203      	movs	r2, #3
 800951e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009520:	e012      	b.n	8009548 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	60fa      	str	r2, [r7, #12]
 8009528:	7dfa      	ldrb	r2, [r7, #23]
 800952a:	1c51      	adds	r1, r2, #1
 800952c:	75f9      	strb	r1, [r7, #23]
 800952e:	4611      	mov	r1, r2
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	440a      	add	r2, r1
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	75fa      	strb	r2, [r7, #23]
 800953e:	461a      	mov	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4413      	add	r3, r2
 8009544:	2200      	movs	r2, #0
 8009546:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d1e8      	bne.n	8009522 <USBD_GetString+0x4e>
    }
  }
}
 8009550:	bf00      	nop
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009564:	e005      	b.n	8009572 <USBD_GetLen+0x1a>
  {
    len++;
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	3301      	adds	r3, #1
 800956a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	3301      	adds	r3, #1
 8009570:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f5      	bne.n	8009566 <USBD_GetLen+0xe>
  }

  return len;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	4613      	mov	r3, r2
 8009592:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2202      	movs	r2, #2
 8009598:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800959c:	88fa      	ldrh	r2, [r7, #6]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80095a2:	88fa      	ldrh	r2, [r7, #6]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	2100      	movs	r1, #0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f000 fc99 	bl	8009ee6 <USBD_LL_Transmit>

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	4613      	mov	r3, r2
 80095ca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095cc:	88fb      	ldrh	r3, [r7, #6]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	2100      	movs	r1, #0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fc87 	bl	8009ee6 <USBD_LL_Transmit>

  return USBD_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	4613      	mov	r3, r2
 80095ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2203      	movs	r2, #3
 80095f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	2100      	movs	r1, #0
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fc8c 	bl	8009f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	4613      	mov	r3, r2
 800962a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800962c:	88fb      	ldrh	r3, [r7, #6]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	2100      	movs	r1, #0
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fc7a 	bl	8009f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2204      	movs	r2, #4
 800964e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009652:	2300      	movs	r3, #0
 8009654:	2200      	movs	r2, #0
 8009656:	2100      	movs	r1, #0
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fc44 	bl	8009ee6 <USBD_LL_Transmit>

  return USBD_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2205      	movs	r2, #5
 8009674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009678:	2300      	movs	r3, #0
 800967a:	2200      	movs	r2, #0
 800967c:	2100      	movs	r1, #0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fc54 	bl	8009f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009694:	2200      	movs	r2, #0
 8009696:	4912      	ldr	r1, [pc, #72]	; (80096e0 <MX_USB_DEVICE_Init+0x50>)
 8009698:	4812      	ldr	r0, [pc, #72]	; (80096e4 <MX_USB_DEVICE_Init+0x54>)
 800969a:	f7fe ff5e 	bl	800855a <USBD_Init>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096a4:	f7f7 fb8e 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096a8:	490f      	ldr	r1, [pc, #60]	; (80096e8 <MX_USB_DEVICE_Init+0x58>)
 80096aa:	480e      	ldr	r0, [pc, #56]	; (80096e4 <MX_USB_DEVICE_Init+0x54>)
 80096ac:	f7fe ff80 	bl	80085b0 <USBD_RegisterClass>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096b6:	f7f7 fb85 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096ba:	490c      	ldr	r1, [pc, #48]	; (80096ec <MX_USB_DEVICE_Init+0x5c>)
 80096bc:	4809      	ldr	r0, [pc, #36]	; (80096e4 <MX_USB_DEVICE_Init+0x54>)
 80096be:	f7fe feb1 	bl	8008424 <USBD_CDC_RegisterInterface>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096c8:	f7f7 fb7c 	bl	8000dc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096cc:	4805      	ldr	r0, [pc, #20]	; (80096e4 <MX_USB_DEVICE_Init+0x54>)
 80096ce:	f7fe ff88 	bl	80085e2 <USBD_Start>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096d8:	f7f7 fb74 	bl	8000dc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096dc:	bf00      	nop
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20000170 	.word	0x20000170
 80096e4:	200009d8 	.word	0x200009d8
 80096e8:	2000005c 	.word	0x2000005c
 80096ec:	20000160 	.word	0x20000160

080096f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096f4:	2200      	movs	r2, #0
 80096f6:	4905      	ldr	r1, [pc, #20]	; (800970c <CDC_Init_FS+0x1c>)
 80096f8:	4805      	ldr	r0, [pc, #20]	; (8009710 <CDC_Init_FS+0x20>)
 80096fa:	f7fe fea9 	bl	8008450 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80096fe:	4905      	ldr	r1, [pc, #20]	; (8009714 <CDC_Init_FS+0x24>)
 8009700:	4803      	ldr	r0, [pc, #12]	; (8009710 <CDC_Init_FS+0x20>)
 8009702:	f7fe febe 	bl	8008482 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009706:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009708:	4618      	mov	r0, r3
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20001084 	.word	0x20001084
 8009710:	200009d8 	.word	0x200009d8
 8009714:	20000c9c 	.word	0x20000c9c

08009718 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800971c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800971e:	4618      	mov	r0, r3
 8009720:	46bd      	mov	sp, r7
 8009722:	bc80      	pop	{r7}
 8009724:	4770      	bx	lr
	...

08009728 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
 8009734:	4613      	mov	r3, r2
 8009736:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd)
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	2b23      	cmp	r3, #35	; 0x23
 800973c:	d84a      	bhi.n	80097d4 <CDC_Control_FS+0xac>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <CDC_Control_FS+0x1c>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	080097d5 	.word	0x080097d5
 8009748:	080097d5 	.word	0x080097d5
 800974c:	080097d5 	.word	0x080097d5
 8009750:	080097d5 	.word	0x080097d5
 8009754:	080097d5 	.word	0x080097d5
 8009758:	080097d5 	.word	0x080097d5
 800975c:	080097d5 	.word	0x080097d5
 8009760:	080097d5 	.word	0x080097d5
 8009764:	080097d5 	.word	0x080097d5
 8009768:	080097d5 	.word	0x080097d5
 800976c:	080097d5 	.word	0x080097d5
 8009770:	080097d5 	.word	0x080097d5
 8009774:	080097d5 	.word	0x080097d5
 8009778:	080097d5 	.word	0x080097d5
 800977c:	080097d5 	.word	0x080097d5
 8009780:	080097d5 	.word	0x080097d5
 8009784:	080097d5 	.word	0x080097d5
 8009788:	080097d5 	.word	0x080097d5
 800978c:	080097d5 	.word	0x080097d5
 8009790:	080097d5 	.word	0x080097d5
 8009794:	080097d5 	.word	0x080097d5
 8009798:	080097d5 	.word	0x080097d5
 800979c:	080097d5 	.word	0x080097d5
 80097a0:	080097d5 	.word	0x080097d5
 80097a4:	080097d5 	.word	0x080097d5
 80097a8:	080097d5 	.word	0x080097d5
 80097ac:	080097d5 	.word	0x080097d5
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097d5 	.word	0x080097d5
 80097b8:	080097d5 	.word	0x080097d5
 80097bc:	080097d5 	.word	0x080097d5
 80097c0:	080097d5 	.word	0x080097d5
 80097c4:	080097d5 	.word	0x080097d5
 80097c8:	080097d5 	.word	0x080097d5
 80097cc:	080097d5 	.word	0x080097d5
 80097d0:	080097d5 	.word	0x080097d5
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80097d4:	bf00      	nop
	}

	return (USBD_OK);
 80097d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop

080097e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	481c      	ldr	r0, [pc, #112]	; (8009864 <CDC_Receive_FS+0x80>)
 80097f2:	f7fe fe46 	bl	8008482 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097f6:	481b      	ldr	r0, [pc, #108]	; (8009864 <CDC_Receive_FS+0x80>)
 80097f8:	f7fe fe85 	bl	8008506 <USBD_CDC_ReceivePacket>
//	}
	/*-------*/

	/* Запись данных в общую глобальную переменную для
	 * хранения пакета данных - usb_rx_data */
	if ( usb_rx_data.is_handled  == false ) {
 80097fc:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <CDC_Receive_FS+0x84>)
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	f083 0301 	eor.w	r3, r3, #1
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d015      	beq.n	8009836 <CDC_Receive_FS+0x52>
	    /* Если данные пакета ещё не обработаны, то
	     * ошибка - прием нового пакета пока не возможен.
	     * Следовательно, отправляем пакет из 5-ти нулей,
	     * как показатель об ошибке. */
	    uint8_t b[] = {0,0,0,0,0};
 800980a:	4a18      	ldr	r2, [pc, #96]	; (800986c <CDC_Receive_FS+0x88>)
 800980c:	f107 0308 	add.w	r3, r7, #8
 8009810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009814:	6018      	str	r0, [r3, #0]
 8009816:	3304      	adds	r3, #4
 8009818:	7019      	strb	r1, [r3, #0]
	    CDC_Transmit_FS(b, strlen( (char*)b) );
 800981a:	f107 0308 	add.w	r3, r7, #8
 800981e:	4618      	mov	r0, r3
 8009820:	f7f6 fc94 	bl	800014c <strlen>
 8009824:	4603      	mov	r3, r0
 8009826:	b29a      	uxth	r2, r3
 8009828:	f107 0308 	add.w	r3, r7, #8
 800982c:	4611      	mov	r1, r2
 800982e:	4618      	mov	r0, r3
 8009830:	f000 f820 	bl	8009874 <CDC_Transmit_FS>
 8009834:	e011      	b.n	800985a <CDC_Receive_FS+0x76>
	}
	else {
	    memcpy( usb_rx_data.buff, Buf, *Len );
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	480c      	ldr	r0, [pc, #48]	; (8009870 <CDC_Receive_FS+0x8c>)
 8009840:	f000 fc20 	bl	800a084 <memcpy>
	    usb_rx_data.len         = *Len;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <CDC_Receive_FS+0x84>)
 800984c:	709a      	strb	r2, [r3, #2]
	    usb_rx_data.is_handled  = false;
 800984e:	4b06      	ldr	r3, [pc, #24]	; (8009868 <CDC_Receive_FS+0x84>)
 8009850:	2200      	movs	r2, #0
 8009852:	705a      	strb	r2, [r3, #1]
	    usb_rx_data.is_received = true;
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <CDC_Receive_FS+0x84>)
 8009856:	2201      	movs	r2, #1
 8009858:	701a      	strb	r2, [r3, #0]
	}

	return (USBD_OK);
 800985a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200009d8 	.word	0x200009d8
 8009868:	20000000 	.word	0x20000000
 800986c:	0800afdc 	.word	0x0800afdc
 8009870:	20000003 	.word	0x20000003

08009874 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8009884:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <CDC_Transmit_FS+0x48>)
 8009886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800988a:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <CDC_Transmit_FS+0x26>
	{
		return USBD_BUSY;
 8009896:	2301      	movs	r3, #1
 8009898:	e00b      	b.n	80098b2 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800989a:	887b      	ldrh	r3, [r7, #2]
 800989c:	461a      	mov	r2, r3
 800989e:	6879      	ldr	r1, [r7, #4]
 80098a0:	4806      	ldr	r0, [pc, #24]	; (80098bc <CDC_Transmit_FS+0x48>)
 80098a2:	f7fe fdd5 	bl	8008450 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098a6:	4805      	ldr	r0, [pc, #20]	; (80098bc <CDC_Transmit_FS+0x48>)
 80098a8:	f7fe fdfe 	bl	80084a8 <USBD_CDC_TransmitPacket>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	200009d8 	.word	0x200009d8

080098c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	4603      	mov	r3, r0
 80098c8:	6039      	str	r1, [r7, #0]
 80098ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2212      	movs	r2, #18
 80098d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098d2:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	2000018c 	.word	0x2000018c

080098e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2204      	movs	r2, #4
 80098f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098f6:	4b03      	ldr	r3, [pc, #12]	; (8009904 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bc80      	pop	{r7}
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	200001a0 	.word	0x200001a0

08009908 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	6039      	str	r1, [r7, #0]
 8009912:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009914:	79fb      	ldrb	r3, [r7, #7]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	4907      	ldr	r1, [pc, #28]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
 800991e:	4808      	ldr	r0, [pc, #32]	; (8009940 <USBD_FS_ProductStrDescriptor+0x38>)
 8009920:	f7ff fdd8 	bl	80094d4 <USBD_GetString>
 8009924:	e004      	b.n	8009930 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	4904      	ldr	r1, [pc, #16]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
 800992a:	4805      	ldr	r0, [pc, #20]	; (8009940 <USBD_FS_ProductStrDescriptor+0x38>)
 800992c:	f7ff fdd2 	bl	80094d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009930:	4b02      	ldr	r3, [pc, #8]	; (800993c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	2000146c 	.word	0x2000146c
 8009940:	0800afe4 	.word	0x0800afe4

08009944 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	4603      	mov	r3, r0
 800994c:	6039      	str	r1, [r7, #0]
 800994e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	4904      	ldr	r1, [pc, #16]	; (8009964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009954:	4804      	ldr	r0, [pc, #16]	; (8009968 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009956:	f7ff fdbd 	bl	80094d4 <USBD_GetString>
  return USBD_StrDesc;
 800995a:	4b02      	ldr	r3, [pc, #8]	; (8009964 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	2000146c 	.word	0x2000146c
 8009968:	0800affc 	.word	0x0800affc

0800996c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	221a      	movs	r2, #26
 800997c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800997e:	f000 f843 	bl	8009a08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009982:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	200001a4 	.word	0x200001a4

08009990 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099a2:	683a      	ldr	r2, [r7, #0]
 80099a4:	4907      	ldr	r1, [pc, #28]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099a6:	4808      	ldr	r0, [pc, #32]	; (80099c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099a8:	f7ff fd94 	bl	80094d4 <USBD_GetString>
 80099ac:	e004      	b.n	80099b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4904      	ldr	r1, [pc, #16]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099b2:	4805      	ldr	r0, [pc, #20]	; (80099c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80099b4:	f7ff fd8e 	bl	80094d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	2000146c 	.word	0x2000146c
 80099c8:	0800b010 	.word	0x0800b010

080099cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	4603      	mov	r3, r0
 80099d4:	6039      	str	r1, [r7, #0]
 80099d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d105      	bne.n	80099ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	4907      	ldr	r1, [pc, #28]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099e2:	4808      	ldr	r0, [pc, #32]	; (8009a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099e4:	f7ff fd76 	bl	80094d4 <USBD_GetString>
 80099e8:	e004      	b.n	80099f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	4904      	ldr	r1, [pc, #16]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099ee:	4805      	ldr	r0, [pc, #20]	; (8009a04 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f0:	f7ff fd70 	bl	80094d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	2000146c 	.word	0x2000146c
 8009a04:	0800b01c 	.word	0x0800b01c

08009a08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <Get_SerialNum+0x44>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a14:	4b0e      	ldr	r3, [pc, #56]	; (8009a50 <Get_SerialNum+0x48>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a1a:	4b0e      	ldr	r3, [pc, #56]	; (8009a54 <Get_SerialNum+0x4c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4413      	add	r3, r2
 8009a26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d009      	beq.n	8009a42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a2e:	2208      	movs	r2, #8
 8009a30:	4909      	ldr	r1, [pc, #36]	; (8009a58 <Get_SerialNum+0x50>)
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f000 f814 	bl	8009a60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a38:	2204      	movs	r2, #4
 8009a3a:	4908      	ldr	r1, [pc, #32]	; (8009a5c <Get_SerialNum+0x54>)
 8009a3c:	68b8      	ldr	r0, [r7, #8]
 8009a3e:	f000 f80f 	bl	8009a60 <IntToUnicode>
  }
}
 8009a42:	bf00      	nop
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	1ffff7e8 	.word	0x1ffff7e8
 8009a50:	1ffff7ec 	.word	0x1ffff7ec
 8009a54:	1ffff7f0 	.word	0x1ffff7f0
 8009a58:	200001a6 	.word	0x200001a6
 8009a5c:	200001b6 	.word	0x200001b6

08009a60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
 8009a76:	e027      	b.n	8009ac8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	0f1b      	lsrs	r3, r3, #28
 8009a7c:	2b09      	cmp	r3, #9
 8009a7e:	d80b      	bhi.n	8009a98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	0f1b      	lsrs	r3, r3, #28
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	440b      	add	r3, r1
 8009a90:	3230      	adds	r2, #48	; 0x30
 8009a92:	b2d2      	uxtb	r2, r2
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	e00a      	b.n	8009aae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	0f1b      	lsrs	r3, r3, #28
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3237      	adds	r2, #55	; 0x37
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	3301      	adds	r3, #1
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	4413      	add	r3, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	75fb      	strb	r3, [r7, #23]
 8009ac8:	7dfa      	ldrb	r2, [r7, #23]
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d3d3      	bcc.n	8009a78 <IntToUnicode+0x18>
  }
}
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	371c      	adds	r7, #28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bc80      	pop	{r7}
 8009ada:	4770      	bx	lr

08009adc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a0d      	ldr	r2, [pc, #52]	; (8009b20 <HAL_PCD_MspInit+0x44>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d113      	bne.n	8009b16 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009aee:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <HAL_PCD_MspInit+0x48>)
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4a0c      	ldr	r2, [pc, #48]	; (8009b24 <HAL_PCD_MspInit+0x48>)
 8009af4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009af8:	61d3      	str	r3, [r2, #28]
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <HAL_PCD_MspInit+0x48>)
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b02:	60fb      	str	r3, [r7, #12]
 8009b04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009b06:	2200      	movs	r2, #0
 8009b08:	2100      	movs	r1, #0
 8009b0a:	2014      	movs	r0, #20
 8009b0c:	f7f8 fbb1 	bl	8002272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b10:	2014      	movs	r0, #20
 8009b12:	f7f8 fbca 	bl	80022aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40005c00 	.word	0x40005c00
 8009b24:	40021000 	.word	0x40021000

08009b28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fe fd97 	bl	8008672 <USBD_LL_SetupStage>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	440b      	add	r3, r1
 8009b6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7fe fdc9 	bl	800870c <USBD_LL_DataOutStage>
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	440b      	add	r3, r1
 8009ba2:	333c      	adds	r3, #60	; 0x3c
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f7fe fe20 	bl	80087ee <USBD_LL_DataInStage>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe ff30 	bl	8008a2a <USBD_LL_SOF>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d001      	beq.n	8009bea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009be6:	f7f7 f8ed 	bl	8000dc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009bf0:	7bfa      	ldrb	r2, [r7, #15]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fee0 	bl	80089ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7fe fe99 	bl	8008938 <USBD_LL_Reset>
}
 8009c06:	bf00      	nop
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe feda 	bl	80089d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c2c:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <HAL_PCD_SuspendCallback+0x30>)
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	4a03      	ldr	r2, [pc, #12]	; (8009c40 <HAL_PCD_SuspendCallback+0x30>)
 8009c32:	f043 0306 	orr.w	r3, r3, #6
 8009c36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	e000ed00 	.word	0xe000ed00

08009c44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fe fed4 	bl	8008a00 <USBD_LL_Resume>
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009c68:	4a28      	ldr	r2, [pc, #160]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a26      	ldr	r2, [pc, #152]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009c78:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c7a:	4a25      	ldr	r2, [pc, #148]	; (8009d10 <USBD_LL_Init+0xb0>)
 8009c7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c7e:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c80:	2208      	movs	r2, #8
 8009c82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c84:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c86:	2202      	movs	r2, #2
 8009c88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c8a:	4b20      	ldr	r3, [pc, #128]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c90:	4b1e      	ldr	r3, [pc, #120]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c96:	4b1d      	ldr	r3, [pc, #116]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c9c:	481b      	ldr	r0, [pc, #108]	; (8009d0c <USBD_LL_Init+0xac>)
 8009c9e:	f7f8 ff39 	bl	8002b14 <HAL_PCD_Init>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ca8:	f7f7 f88c 	bl	8000dc4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cb2:	2318      	movs	r3, #24
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	f7fa fbaf 	bl	800441a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cc2:	2358      	movs	r3, #88	; 0x58
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2180      	movs	r1, #128	; 0x80
 8009cc8:	f7fa fba7 	bl	800441a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cd2:	23c0      	movs	r3, #192	; 0xc0
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2181      	movs	r1, #129	; 0x81
 8009cd8:	f7fa fb9f 	bl	800441a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ce2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2101      	movs	r1, #1
 8009cea:	f7fa fb96 	bl	800441a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009cf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	2182      	movs	r1, #130	; 0x82
 8009cfc:	f7fa fb8d 	bl	800441a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000166c 	.word	0x2000166c
 8009d10:	40005c00 	.word	0x40005c00

08009d14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f8 fffd 	bl	8002d2a <HAL_PCD_Start>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f94e 	bl	8009fd8 <USBD_Get_USB_Status>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	4608      	mov	r0, r1
 8009d54:	4611      	mov	r1, r2
 8009d56:	461a      	mov	r2, r3
 8009d58:	4603      	mov	r3, r0
 8009d5a:	70fb      	strb	r3, [r7, #3]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70bb      	strb	r3, [r7, #2]
 8009d60:	4613      	mov	r3, r2
 8009d62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d72:	78bb      	ldrb	r3, [r7, #2]
 8009d74:	883a      	ldrh	r2, [r7, #0]
 8009d76:	78f9      	ldrb	r1, [r7, #3]
 8009d78:	f7f9 f977 	bl	800306a <HAL_PCD_EP_Open>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f928 	bl	8009fd8 <USBD_Get_USB_Status>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7f9 f9be 	bl	8003136 <HAL_PCD_EP_Close>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f909 	bl	8009fd8 <USBD_Get_USB_Status>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dee:	78fa      	ldrb	r2, [r7, #3]
 8009df0:	4611      	mov	r1, r2
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7f9 fa7e 	bl	80032f4 <HAL_PCD_EP_SetStall>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f8ea 	bl	8009fd8 <USBD_Get_USB_Status>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e2c:	78fa      	ldrb	r2, [r7, #3]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7f9 fabf 	bl	80033b4 <HAL_PCD_EP_ClrStall>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f8cb 	bl	8009fd8 <USBD_Get_USB_Status>
 8009e42:	4603      	mov	r3, r0
 8009e44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	da0c      	bge.n	8009e86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	1c5a      	adds	r2, r3, #1
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	440b      	add	r3, r1
 8009e80:	3302      	adds	r3, #2
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	e00b      	b.n	8009e9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8c:	68f9      	ldr	r1, [r7, #12]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	440b      	add	r3, r1
 8009e98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009e9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bc80      	pop	{r7}
 8009ea6:	4770      	bx	lr

08009ea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ec2:	78fa      	ldrb	r2, [r7, #3]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7f9 f8aa 	bl	8003020 <HAL_PCD_SetAddress>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 f880 	bl	8009fd8 <USBD_Get_USB_Status>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b086      	sub	sp, #24
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	60f8      	str	r0, [r7, #12]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	72fb      	strb	r3, [r7, #11]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f08:	893b      	ldrh	r3, [r7, #8]
 8009f0a:	7af9      	ldrb	r1, [r7, #11]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	f7f9 f9ae 	bl	800326e <HAL_PCD_EP_Transmit>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 f85d 	bl	8009fd8 <USBD_Get_USB_Status>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f22:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3718      	adds	r7, #24
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	461a      	mov	r2, r3
 8009f38:	460b      	mov	r3, r1
 8009f3a:	72fb      	strb	r3, [r7, #11]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f4e:	893b      	ldrh	r3, [r7, #8]
 8009f50:	7af9      	ldrb	r1, [r7, #11]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	f7f9 f937 	bl	80031c6 <HAL_PCD_EP_Receive>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f83a 	bl	8009fd8 <USBD_Get_USB_Status>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f84:	78fa      	ldrb	r2, [r7, #3]
 8009f86:	4611      	mov	r1, r2
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7f9 f959 	bl	8003240 <HAL_PCD_EP_GetRxCount>
 8009f8e:	4603      	mov	r3, r0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fa0:	4b02      	ldr	r3, [pc, #8]	; (8009fac <USBD_static_malloc+0x14>)
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bc80      	pop	{r7}
 8009faa:	4770      	bx	lr
 8009fac:	2000026c 	.word	0x2000026c

08009fb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]

}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr

08009fc2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009fce:	bf00      	nop
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d817      	bhi.n	800a01c <USBD_Get_USB_Status+0x44>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <USBD_Get_USB_Status+0x1c>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a005 	.word	0x0800a005
 8009ff8:	0800a00b 	.word	0x0800a00b
 8009ffc:	0800a011 	.word	0x0800a011
 800a000:	0800a017 	.word	0x0800a017
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
    break;
 800a008:	e00b      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a00a:	2302      	movs	r3, #2
 800a00c:	73fb      	strb	r3, [r7, #15]
    break;
 800a00e:	e008      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
    break;
 800a014:	e005      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	73fb      	strb	r3, [r7, #15]
    break;
 800a01a:	e002      	b.n	800a022 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a01c:	2302      	movs	r3, #2
 800a01e:	73fb      	strb	r3, [r7, #15]
    break;
 800a020:	bf00      	nop
  }
  return usb_status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop

0800a030 <__errno>:
 800a030:	4b01      	ldr	r3, [pc, #4]	; (800a038 <__errno+0x8>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	200001c0 	.word	0x200001c0

0800a03c <__libc_init_array>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	2600      	movs	r6, #0
 800a040:	4d0c      	ldr	r5, [pc, #48]	; (800a074 <__libc_init_array+0x38>)
 800a042:	4c0d      	ldr	r4, [pc, #52]	; (800a078 <__libc_init_array+0x3c>)
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	42a6      	cmp	r6, r4
 800a04a:	d109      	bne.n	800a060 <__libc_init_array+0x24>
 800a04c:	f000 ff90 	bl	800af70 <_init>
 800a050:	2600      	movs	r6, #0
 800a052:	4d0a      	ldr	r5, [pc, #40]	; (800a07c <__libc_init_array+0x40>)
 800a054:	4c0a      	ldr	r4, [pc, #40]	; (800a080 <__libc_init_array+0x44>)
 800a056:	1b64      	subs	r4, r4, r5
 800a058:	10a4      	asrs	r4, r4, #2
 800a05a:	42a6      	cmp	r6, r4
 800a05c:	d105      	bne.n	800a06a <__libc_init_array+0x2e>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f855 3b04 	ldr.w	r3, [r5], #4
 800a064:	4798      	blx	r3
 800a066:	3601      	adds	r6, #1
 800a068:	e7ee      	b.n	800a048 <__libc_init_array+0xc>
 800a06a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a06e:	4798      	blx	r3
 800a070:	3601      	adds	r6, #1
 800a072:	e7f2      	b.n	800a05a <__libc_init_array+0x1e>
 800a074:	0800b0d4 	.word	0x0800b0d4
 800a078:	0800b0d4 	.word	0x0800b0d4
 800a07c:	0800b0d4 	.word	0x0800b0d4
 800a080:	0800b0d8 	.word	0x0800b0d8

0800a084 <memcpy>:
 800a084:	440a      	add	r2, r1
 800a086:	4291      	cmp	r1, r2
 800a088:	f100 33ff 	add.w	r3, r0, #4294967295
 800a08c:	d100      	bne.n	800a090 <memcpy+0xc>
 800a08e:	4770      	bx	lr
 800a090:	b510      	push	{r4, lr}
 800a092:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a096:	4291      	cmp	r1, r2
 800a098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a09c:	d1f9      	bne.n	800a092 <memcpy+0xe>
 800a09e:	bd10      	pop	{r4, pc}

0800a0a0 <memset>:
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	4402      	add	r2, r0
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d100      	bne.n	800a0aa <memset+0xa>
 800a0a8:	4770      	bx	lr
 800a0aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ae:	e7f9      	b.n	800a0a4 <memset+0x4>

0800a0b0 <iprintf>:
 800a0b0:	b40f      	push	{r0, r1, r2, r3}
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <iprintf+0x2c>)
 800a0b4:	b513      	push	{r0, r1, r4, lr}
 800a0b6:	681c      	ldr	r4, [r3, #0]
 800a0b8:	b124      	cbz	r4, 800a0c4 <iprintf+0x14>
 800a0ba:	69a3      	ldr	r3, [r4, #24]
 800a0bc:	b913      	cbnz	r3, 800a0c4 <iprintf+0x14>
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 f866 	bl	800a190 <__sinit>
 800a0c4:	ab05      	add	r3, sp, #20
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	68a1      	ldr	r1, [r4, #8]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f000 f981 	bl	800a3d4 <_vfiprintf_r>
 800a0d2:	b002      	add	sp, #8
 800a0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d8:	b004      	add	sp, #16
 800a0da:	4770      	bx	lr
 800a0dc:	200001c0 	.word	0x200001c0

0800a0e0 <std>:
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ee:	6083      	str	r3, [r0, #8]
 800a0f0:	8181      	strh	r1, [r0, #12]
 800a0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a0f4:	81c2      	strh	r2, [r0, #14]
 800a0f6:	6183      	str	r3, [r0, #24]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	2208      	movs	r2, #8
 800a0fc:	305c      	adds	r0, #92	; 0x5c
 800a0fe:	f7ff ffcf 	bl	800a0a0 <memset>
 800a102:	4b05      	ldr	r3, [pc, #20]	; (800a118 <std+0x38>)
 800a104:	6224      	str	r4, [r4, #32]
 800a106:	6263      	str	r3, [r4, #36]	; 0x24
 800a108:	4b04      	ldr	r3, [pc, #16]	; (800a11c <std+0x3c>)
 800a10a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <std+0x40>)
 800a10e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <std+0x44>)
 800a112:	6323      	str	r3, [r4, #48]	; 0x30
 800a114:	bd10      	pop	{r4, pc}
 800a116:	bf00      	nop
 800a118:	0800a981 	.word	0x0800a981
 800a11c:	0800a9a3 	.word	0x0800a9a3
 800a120:	0800a9db 	.word	0x0800a9db
 800a124:	0800a9ff 	.word	0x0800a9ff

0800a128 <_cleanup_r>:
 800a128:	4901      	ldr	r1, [pc, #4]	; (800a130 <_cleanup_r+0x8>)
 800a12a:	f000 b8af 	b.w	800a28c <_fwalk_reent>
 800a12e:	bf00      	nop
 800a130:	0800acd9 	.word	0x0800acd9

0800a134 <__sfmoreglue>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	2568      	movs	r5, #104	; 0x68
 800a138:	1e4a      	subs	r2, r1, #1
 800a13a:	4355      	muls	r5, r2
 800a13c:	460e      	mov	r6, r1
 800a13e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a142:	f000 f8c5 	bl	800a2d0 <_malloc_r>
 800a146:	4604      	mov	r4, r0
 800a148:	b140      	cbz	r0, 800a15c <__sfmoreglue+0x28>
 800a14a:	2100      	movs	r1, #0
 800a14c:	e9c0 1600 	strd	r1, r6, [r0]
 800a150:	300c      	adds	r0, #12
 800a152:	60a0      	str	r0, [r4, #8]
 800a154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a158:	f7ff ffa2 	bl	800a0a0 <memset>
 800a15c:	4620      	mov	r0, r4
 800a15e:	bd70      	pop	{r4, r5, r6, pc}

0800a160 <__sfp_lock_acquire>:
 800a160:	4801      	ldr	r0, [pc, #4]	; (800a168 <__sfp_lock_acquire+0x8>)
 800a162:	f000 b8b3 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800a166:	bf00      	nop
 800a168:	20001960 	.word	0x20001960

0800a16c <__sfp_lock_release>:
 800a16c:	4801      	ldr	r0, [pc, #4]	; (800a174 <__sfp_lock_release+0x8>)
 800a16e:	f000 b8ae 	b.w	800a2ce <__retarget_lock_release_recursive>
 800a172:	bf00      	nop
 800a174:	20001960 	.word	0x20001960

0800a178 <__sinit_lock_acquire>:
 800a178:	4801      	ldr	r0, [pc, #4]	; (800a180 <__sinit_lock_acquire+0x8>)
 800a17a:	f000 b8a7 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800a17e:	bf00      	nop
 800a180:	2000195b 	.word	0x2000195b

0800a184 <__sinit_lock_release>:
 800a184:	4801      	ldr	r0, [pc, #4]	; (800a18c <__sinit_lock_release+0x8>)
 800a186:	f000 b8a2 	b.w	800a2ce <__retarget_lock_release_recursive>
 800a18a:	bf00      	nop
 800a18c:	2000195b 	.word	0x2000195b

0800a190 <__sinit>:
 800a190:	b510      	push	{r4, lr}
 800a192:	4604      	mov	r4, r0
 800a194:	f7ff fff0 	bl	800a178 <__sinit_lock_acquire>
 800a198:	69a3      	ldr	r3, [r4, #24]
 800a19a:	b11b      	cbz	r3, 800a1a4 <__sinit+0x14>
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f7ff bff0 	b.w	800a184 <__sinit_lock_release>
 800a1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1a8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1aa:	4b13      	ldr	r3, [pc, #76]	; (800a1f8 <__sinit+0x68>)
 800a1ac:	4a13      	ldr	r2, [pc, #76]	; (800a1fc <__sinit+0x6c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	bf08      	it	eq
 800a1b6:	2301      	moveq	r3, #1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	bf08      	it	eq
 800a1bc:	61a3      	streq	r3, [r4, #24]
 800a1be:	f000 f81f 	bl	800a200 <__sfp>
 800a1c2:	6060      	str	r0, [r4, #4]
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 f81b 	bl	800a200 <__sfp>
 800a1ca:	60a0      	str	r0, [r4, #8]
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 f817 	bl	800a200 <__sfp>
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2104      	movs	r1, #4
 800a1d6:	60e0      	str	r0, [r4, #12]
 800a1d8:	6860      	ldr	r0, [r4, #4]
 800a1da:	f7ff ff81 	bl	800a0e0 <std>
 800a1de:	2201      	movs	r2, #1
 800a1e0:	2109      	movs	r1, #9
 800a1e2:	68a0      	ldr	r0, [r4, #8]
 800a1e4:	f7ff ff7c 	bl	800a0e0 <std>
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	2112      	movs	r1, #18
 800a1ec:	68e0      	ldr	r0, [r4, #12]
 800a1ee:	f7ff ff77 	bl	800a0e0 <std>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	61a3      	str	r3, [r4, #24]
 800a1f6:	e7d1      	b.n	800a19c <__sinit+0xc>
 800a1f8:	0800b03c 	.word	0x0800b03c
 800a1fc:	0800a129 	.word	0x0800a129

0800a200 <__sfp>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	4607      	mov	r7, r0
 800a204:	f7ff ffac 	bl	800a160 <__sfp_lock_acquire>
 800a208:	4b1e      	ldr	r3, [pc, #120]	; (800a284 <__sfp+0x84>)
 800a20a:	681e      	ldr	r6, [r3, #0]
 800a20c:	69b3      	ldr	r3, [r6, #24]
 800a20e:	b913      	cbnz	r3, 800a216 <__sfp+0x16>
 800a210:	4630      	mov	r0, r6
 800a212:	f7ff ffbd 	bl	800a190 <__sinit>
 800a216:	3648      	adds	r6, #72	; 0x48
 800a218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	d503      	bpl.n	800a228 <__sfp+0x28>
 800a220:	6833      	ldr	r3, [r6, #0]
 800a222:	b30b      	cbz	r3, 800a268 <__sfp+0x68>
 800a224:	6836      	ldr	r6, [r6, #0]
 800a226:	e7f7      	b.n	800a218 <__sfp+0x18>
 800a228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a22c:	b9d5      	cbnz	r5, 800a264 <__sfp+0x64>
 800a22e:	4b16      	ldr	r3, [pc, #88]	; (800a288 <__sfp+0x88>)
 800a230:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a234:	60e3      	str	r3, [r4, #12]
 800a236:	6665      	str	r5, [r4, #100]	; 0x64
 800a238:	f000 f847 	bl	800a2ca <__retarget_lock_init_recursive>
 800a23c:	f7ff ff96 	bl	800a16c <__sfp_lock_release>
 800a240:	2208      	movs	r2, #8
 800a242:	4629      	mov	r1, r5
 800a244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a24c:	6025      	str	r5, [r4, #0]
 800a24e:	61a5      	str	r5, [r4, #24]
 800a250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a254:	f7ff ff24 	bl	800a0a0 <memset>
 800a258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a25c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a260:	4620      	mov	r0, r4
 800a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a264:	3468      	adds	r4, #104	; 0x68
 800a266:	e7d9      	b.n	800a21c <__sfp+0x1c>
 800a268:	2104      	movs	r1, #4
 800a26a:	4638      	mov	r0, r7
 800a26c:	f7ff ff62 	bl	800a134 <__sfmoreglue>
 800a270:	4604      	mov	r4, r0
 800a272:	6030      	str	r0, [r6, #0]
 800a274:	2800      	cmp	r0, #0
 800a276:	d1d5      	bne.n	800a224 <__sfp+0x24>
 800a278:	f7ff ff78 	bl	800a16c <__sfp_lock_release>
 800a27c:	230c      	movs	r3, #12
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	e7ee      	b.n	800a260 <__sfp+0x60>
 800a282:	bf00      	nop
 800a284:	0800b03c 	.word	0x0800b03c
 800a288:	ffff0001 	.word	0xffff0001

0800a28c <_fwalk_reent>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	4606      	mov	r6, r0
 800a292:	4688      	mov	r8, r1
 800a294:	2700      	movs	r7, #0
 800a296:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a29a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a29e:	f1b9 0901 	subs.w	r9, r9, #1
 800a2a2:	d505      	bpl.n	800a2b0 <_fwalk_reent+0x24>
 800a2a4:	6824      	ldr	r4, [r4, #0]
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	d1f7      	bne.n	800a29a <_fwalk_reent+0xe>
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b0:	89ab      	ldrh	r3, [r5, #12]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d907      	bls.n	800a2c6 <_fwalk_reent+0x3a>
 800a2b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	d003      	beq.n	800a2c6 <_fwalk_reent+0x3a>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	47c0      	blx	r8
 800a2c4:	4307      	orrs	r7, r0
 800a2c6:	3568      	adds	r5, #104	; 0x68
 800a2c8:	e7e9      	b.n	800a29e <_fwalk_reent+0x12>

0800a2ca <__retarget_lock_init_recursive>:
 800a2ca:	4770      	bx	lr

0800a2cc <__retarget_lock_acquire_recursive>:
 800a2cc:	4770      	bx	lr

0800a2ce <__retarget_lock_release_recursive>:
 800a2ce:	4770      	bx	lr

0800a2d0 <_malloc_r>:
 800a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d2:	1ccd      	adds	r5, r1, #3
 800a2d4:	f025 0503 	bic.w	r5, r5, #3
 800a2d8:	3508      	adds	r5, #8
 800a2da:	2d0c      	cmp	r5, #12
 800a2dc:	bf38      	it	cc
 800a2de:	250c      	movcc	r5, #12
 800a2e0:	2d00      	cmp	r5, #0
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	db01      	blt.n	800a2ea <_malloc_r+0x1a>
 800a2e6:	42a9      	cmp	r1, r5
 800a2e8:	d903      	bls.n	800a2f2 <_malloc_r+0x22>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	6033      	str	r3, [r6, #0]
 800a2ee:	2000      	movs	r0, #0
 800a2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f2:	f000 fdb1 	bl	800ae58 <__malloc_lock>
 800a2f6:	4921      	ldr	r1, [pc, #132]	; (800a37c <_malloc_r+0xac>)
 800a2f8:	680a      	ldr	r2, [r1, #0]
 800a2fa:	4614      	mov	r4, r2
 800a2fc:	b99c      	cbnz	r4, 800a326 <_malloc_r+0x56>
 800a2fe:	4f20      	ldr	r7, [pc, #128]	; (800a380 <_malloc_r+0xb0>)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	b923      	cbnz	r3, 800a30e <_malloc_r+0x3e>
 800a304:	4621      	mov	r1, r4
 800a306:	4630      	mov	r0, r6
 800a308:	f000 fb2a 	bl	800a960 <_sbrk_r>
 800a30c:	6038      	str	r0, [r7, #0]
 800a30e:	4629      	mov	r1, r5
 800a310:	4630      	mov	r0, r6
 800a312:	f000 fb25 	bl	800a960 <_sbrk_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d123      	bne.n	800a362 <_malloc_r+0x92>
 800a31a:	230c      	movs	r3, #12
 800a31c:	4630      	mov	r0, r6
 800a31e:	6033      	str	r3, [r6, #0]
 800a320:	f000 fda0 	bl	800ae64 <__malloc_unlock>
 800a324:	e7e3      	b.n	800a2ee <_malloc_r+0x1e>
 800a326:	6823      	ldr	r3, [r4, #0]
 800a328:	1b5b      	subs	r3, r3, r5
 800a32a:	d417      	bmi.n	800a35c <_malloc_r+0x8c>
 800a32c:	2b0b      	cmp	r3, #11
 800a32e:	d903      	bls.n	800a338 <_malloc_r+0x68>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	441c      	add	r4, r3
 800a334:	6025      	str	r5, [r4, #0]
 800a336:	e004      	b.n	800a342 <_malloc_r+0x72>
 800a338:	6863      	ldr	r3, [r4, #4]
 800a33a:	42a2      	cmp	r2, r4
 800a33c:	bf0c      	ite	eq
 800a33e:	600b      	streq	r3, [r1, #0]
 800a340:	6053      	strne	r3, [r2, #4]
 800a342:	4630      	mov	r0, r6
 800a344:	f000 fd8e 	bl	800ae64 <__malloc_unlock>
 800a348:	f104 000b 	add.w	r0, r4, #11
 800a34c:	1d23      	adds	r3, r4, #4
 800a34e:	f020 0007 	bic.w	r0, r0, #7
 800a352:	1ac2      	subs	r2, r0, r3
 800a354:	d0cc      	beq.n	800a2f0 <_malloc_r+0x20>
 800a356:	1a1b      	subs	r3, r3, r0
 800a358:	50a3      	str	r3, [r4, r2]
 800a35a:	e7c9      	b.n	800a2f0 <_malloc_r+0x20>
 800a35c:	4622      	mov	r2, r4
 800a35e:	6864      	ldr	r4, [r4, #4]
 800a360:	e7cc      	b.n	800a2fc <_malloc_r+0x2c>
 800a362:	1cc4      	adds	r4, r0, #3
 800a364:	f024 0403 	bic.w	r4, r4, #3
 800a368:	42a0      	cmp	r0, r4
 800a36a:	d0e3      	beq.n	800a334 <_malloc_r+0x64>
 800a36c:	1a21      	subs	r1, r4, r0
 800a36e:	4630      	mov	r0, r6
 800a370:	f000 faf6 	bl	800a960 <_sbrk_r>
 800a374:	3001      	adds	r0, #1
 800a376:	d1dd      	bne.n	800a334 <_malloc_r+0x64>
 800a378:	e7cf      	b.n	800a31a <_malloc_r+0x4a>
 800a37a:	bf00      	nop
 800a37c:	2000048c 	.word	0x2000048c
 800a380:	20000490 	.word	0x20000490

0800a384 <__sfputc_r>:
 800a384:	6893      	ldr	r3, [r2, #8]
 800a386:	b410      	push	{r4}
 800a388:	3b01      	subs	r3, #1
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	6093      	str	r3, [r2, #8]
 800a38e:	da07      	bge.n	800a3a0 <__sfputc_r+0x1c>
 800a390:	6994      	ldr	r4, [r2, #24]
 800a392:	42a3      	cmp	r3, r4
 800a394:	db01      	blt.n	800a39a <__sfputc_r+0x16>
 800a396:	290a      	cmp	r1, #10
 800a398:	d102      	bne.n	800a3a0 <__sfputc_r+0x1c>
 800a39a:	bc10      	pop	{r4}
 800a39c:	f000 bb34 	b.w	800aa08 <__swbuf_r>
 800a3a0:	6813      	ldr	r3, [r2, #0]
 800a3a2:	1c58      	adds	r0, r3, #1
 800a3a4:	6010      	str	r0, [r2, #0]
 800a3a6:	7019      	strb	r1, [r3, #0]
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	bc10      	pop	{r4}
 800a3ac:	4770      	bx	lr

0800a3ae <__sfputs_r>:
 800a3ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	18d5      	adds	r5, r2, r3
 800a3b8:	42ac      	cmp	r4, r5
 800a3ba:	d101      	bne.n	800a3c0 <__sfputs_r+0x12>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e007      	b.n	800a3d0 <__sfputs_r+0x22>
 800a3c0:	463a      	mov	r2, r7
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	f7ff ffdc 	bl	800a384 <__sfputc_r>
 800a3cc:	1c43      	adds	r3, r0, #1
 800a3ce:	d1f3      	bne.n	800a3b8 <__sfputs_r+0xa>
 800a3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d4 <_vfiprintf_r>:
 800a3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d8:	460d      	mov	r5, r1
 800a3da:	4614      	mov	r4, r2
 800a3dc:	4698      	mov	r8, r3
 800a3de:	4606      	mov	r6, r0
 800a3e0:	b09d      	sub	sp, #116	; 0x74
 800a3e2:	b118      	cbz	r0, 800a3ec <_vfiprintf_r+0x18>
 800a3e4:	6983      	ldr	r3, [r0, #24]
 800a3e6:	b90b      	cbnz	r3, 800a3ec <_vfiprintf_r+0x18>
 800a3e8:	f7ff fed2 	bl	800a190 <__sinit>
 800a3ec:	4b89      	ldr	r3, [pc, #548]	; (800a614 <_vfiprintf_r+0x240>)
 800a3ee:	429d      	cmp	r5, r3
 800a3f0:	d11b      	bne.n	800a42a <_vfiprintf_r+0x56>
 800a3f2:	6875      	ldr	r5, [r6, #4]
 800a3f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3f6:	07d9      	lsls	r1, r3, #31
 800a3f8:	d405      	bmi.n	800a406 <_vfiprintf_r+0x32>
 800a3fa:	89ab      	ldrh	r3, [r5, #12]
 800a3fc:	059a      	lsls	r2, r3, #22
 800a3fe:	d402      	bmi.n	800a406 <_vfiprintf_r+0x32>
 800a400:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a402:	f7ff ff63 	bl	800a2cc <__retarget_lock_acquire_recursive>
 800a406:	89ab      	ldrh	r3, [r5, #12]
 800a408:	071b      	lsls	r3, r3, #28
 800a40a:	d501      	bpl.n	800a410 <_vfiprintf_r+0x3c>
 800a40c:	692b      	ldr	r3, [r5, #16]
 800a40e:	b9eb      	cbnz	r3, 800a44c <_vfiprintf_r+0x78>
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f000 fb5c 	bl	800aad0 <__swsetup_r>
 800a418:	b1c0      	cbz	r0, 800a44c <_vfiprintf_r+0x78>
 800a41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a41c:	07dc      	lsls	r4, r3, #31
 800a41e:	d50e      	bpl.n	800a43e <_vfiprintf_r+0x6a>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	b01d      	add	sp, #116	; 0x74
 800a426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42a:	4b7b      	ldr	r3, [pc, #492]	; (800a618 <_vfiprintf_r+0x244>)
 800a42c:	429d      	cmp	r5, r3
 800a42e:	d101      	bne.n	800a434 <_vfiprintf_r+0x60>
 800a430:	68b5      	ldr	r5, [r6, #8]
 800a432:	e7df      	b.n	800a3f4 <_vfiprintf_r+0x20>
 800a434:	4b79      	ldr	r3, [pc, #484]	; (800a61c <_vfiprintf_r+0x248>)
 800a436:	429d      	cmp	r5, r3
 800a438:	bf08      	it	eq
 800a43a:	68f5      	ldreq	r5, [r6, #12]
 800a43c:	e7da      	b.n	800a3f4 <_vfiprintf_r+0x20>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	0598      	lsls	r0, r3, #22
 800a442:	d4ed      	bmi.n	800a420 <_vfiprintf_r+0x4c>
 800a444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a446:	f7ff ff42 	bl	800a2ce <__retarget_lock_release_recursive>
 800a44a:	e7e9      	b.n	800a420 <_vfiprintf_r+0x4c>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9309      	str	r3, [sp, #36]	; 0x24
 800a450:	2320      	movs	r3, #32
 800a452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a456:	2330      	movs	r3, #48	; 0x30
 800a458:	f04f 0901 	mov.w	r9, #1
 800a45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a460:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a620 <_vfiprintf_r+0x24c>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a468:	4623      	mov	r3, r4
 800a46a:	469a      	mov	sl, r3
 800a46c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a470:	b10a      	cbz	r2, 800a476 <_vfiprintf_r+0xa2>
 800a472:	2a25      	cmp	r2, #37	; 0x25
 800a474:	d1f9      	bne.n	800a46a <_vfiprintf_r+0x96>
 800a476:	ebba 0b04 	subs.w	fp, sl, r4
 800a47a:	d00b      	beq.n	800a494 <_vfiprintf_r+0xc0>
 800a47c:	465b      	mov	r3, fp
 800a47e:	4622      	mov	r2, r4
 800a480:	4629      	mov	r1, r5
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff ff93 	bl	800a3ae <__sfputs_r>
 800a488:	3001      	adds	r0, #1
 800a48a:	f000 80aa 	beq.w	800a5e2 <_vfiprintf_r+0x20e>
 800a48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a490:	445a      	add	r2, fp
 800a492:	9209      	str	r2, [sp, #36]	; 0x24
 800a494:	f89a 3000 	ldrb.w	r3, [sl]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80a2 	beq.w	800a5e2 <_vfiprintf_r+0x20e>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b6:	4654      	mov	r4, sl
 800a4b8:	2205      	movs	r2, #5
 800a4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4be:	4858      	ldr	r0, [pc, #352]	; (800a620 <_vfiprintf_r+0x24c>)
 800a4c0:	f000 fcbc 	bl	800ae3c <memchr>
 800a4c4:	9a04      	ldr	r2, [sp, #16]
 800a4c6:	b9d8      	cbnz	r0, 800a500 <_vfiprintf_r+0x12c>
 800a4c8:	06d1      	lsls	r1, r2, #27
 800a4ca:	bf44      	itt	mi
 800a4cc:	2320      	movmi	r3, #32
 800a4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d2:	0713      	lsls	r3, r2, #28
 800a4d4:	bf44      	itt	mi
 800a4d6:	232b      	movmi	r3, #43	; 0x2b
 800a4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d015      	beq.n	800a510 <_vfiprintf_r+0x13c>
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f04f 0c0a 	mov.w	ip, #10
 800a4ec:	9a07      	ldr	r2, [sp, #28]
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f4:	3b30      	subs	r3, #48	; 0x30
 800a4f6:	2b09      	cmp	r3, #9
 800a4f8:	d94e      	bls.n	800a598 <_vfiprintf_r+0x1c4>
 800a4fa:	b1b0      	cbz	r0, 800a52a <_vfiprintf_r+0x156>
 800a4fc:	9207      	str	r2, [sp, #28]
 800a4fe:	e014      	b.n	800a52a <_vfiprintf_r+0x156>
 800a500:	eba0 0308 	sub.w	r3, r0, r8
 800a504:	fa09 f303 	lsl.w	r3, r9, r3
 800a508:	4313      	orrs	r3, r2
 800a50a:	46a2      	mov	sl, r4
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	e7d2      	b.n	800a4b6 <_vfiprintf_r+0xe2>
 800a510:	9b03      	ldr	r3, [sp, #12]
 800a512:	1d19      	adds	r1, r3, #4
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	9103      	str	r1, [sp, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfbb      	ittet	lt
 800a51c:	425b      	neglt	r3, r3
 800a51e:	f042 0202 	orrlt.w	r2, r2, #2
 800a522:	9307      	strge	r3, [sp, #28]
 800a524:	9307      	strlt	r3, [sp, #28]
 800a526:	bfb8      	it	lt
 800a528:	9204      	strlt	r2, [sp, #16]
 800a52a:	7823      	ldrb	r3, [r4, #0]
 800a52c:	2b2e      	cmp	r3, #46	; 0x2e
 800a52e:	d10c      	bne.n	800a54a <_vfiprintf_r+0x176>
 800a530:	7863      	ldrb	r3, [r4, #1]
 800a532:	2b2a      	cmp	r3, #42	; 0x2a
 800a534:	d135      	bne.n	800a5a2 <_vfiprintf_r+0x1ce>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	3402      	adds	r4, #2
 800a53a:	1d1a      	adds	r2, r3, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	9203      	str	r2, [sp, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfb8      	it	lt
 800a544:	f04f 33ff 	movlt.w	r3, #4294967295
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a630 <_vfiprintf_r+0x25c>
 800a54e:	2203      	movs	r2, #3
 800a550:	4650      	mov	r0, sl
 800a552:	7821      	ldrb	r1, [r4, #0]
 800a554:	f000 fc72 	bl	800ae3c <memchr>
 800a558:	b140      	cbz	r0, 800a56c <_vfiprintf_r+0x198>
 800a55a:	2340      	movs	r3, #64	; 0x40
 800a55c:	eba0 000a 	sub.w	r0, r0, sl
 800a560:	fa03 f000 	lsl.w	r0, r3, r0
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	3401      	adds	r4, #1
 800a568:	4303      	orrs	r3, r0
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a570:	2206      	movs	r2, #6
 800a572:	482c      	ldr	r0, [pc, #176]	; (800a624 <_vfiprintf_r+0x250>)
 800a574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a578:	f000 fc60 	bl	800ae3c <memchr>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d03f      	beq.n	800a600 <_vfiprintf_r+0x22c>
 800a580:	4b29      	ldr	r3, [pc, #164]	; (800a628 <_vfiprintf_r+0x254>)
 800a582:	bb1b      	cbnz	r3, 800a5cc <_vfiprintf_r+0x1f8>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	3307      	adds	r3, #7
 800a588:	f023 0307 	bic.w	r3, r3, #7
 800a58c:	3308      	adds	r3, #8
 800a58e:	9303      	str	r3, [sp, #12]
 800a590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a592:	443b      	add	r3, r7
 800a594:	9309      	str	r3, [sp, #36]	; 0x24
 800a596:	e767      	b.n	800a468 <_vfiprintf_r+0x94>
 800a598:	460c      	mov	r4, r1
 800a59a:	2001      	movs	r0, #1
 800a59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a0:	e7a5      	b.n	800a4ee <_vfiprintf_r+0x11a>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f04f 0c0a 	mov.w	ip, #10
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	3401      	adds	r4, #1
 800a5ac:	9305      	str	r3, [sp, #20]
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b4:	3a30      	subs	r2, #48	; 0x30
 800a5b6:	2a09      	cmp	r2, #9
 800a5b8:	d903      	bls.n	800a5c2 <_vfiprintf_r+0x1ee>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0c5      	beq.n	800a54a <_vfiprintf_r+0x176>
 800a5be:	9105      	str	r1, [sp, #20]
 800a5c0:	e7c3      	b.n	800a54a <_vfiprintf_r+0x176>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ca:	e7f0      	b.n	800a5ae <_vfiprintf_r+0x1da>
 800a5cc:	ab03      	add	r3, sp, #12
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	4b15      	ldr	r3, [pc, #84]	; (800a62c <_vfiprintf_r+0x258>)
 800a5d6:	a904      	add	r1, sp, #16
 800a5d8:	f3af 8000 	nop.w
 800a5dc:	4607      	mov	r7, r0
 800a5de:	1c78      	adds	r0, r7, #1
 800a5e0:	d1d6      	bne.n	800a590 <_vfiprintf_r+0x1bc>
 800a5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e4:	07d9      	lsls	r1, r3, #31
 800a5e6:	d405      	bmi.n	800a5f4 <_vfiprintf_r+0x220>
 800a5e8:	89ab      	ldrh	r3, [r5, #12]
 800a5ea:	059a      	lsls	r2, r3, #22
 800a5ec:	d402      	bmi.n	800a5f4 <_vfiprintf_r+0x220>
 800a5ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f0:	f7ff fe6d 	bl	800a2ce <__retarget_lock_release_recursive>
 800a5f4:	89ab      	ldrh	r3, [r5, #12]
 800a5f6:	065b      	lsls	r3, r3, #25
 800a5f8:	f53f af12 	bmi.w	800a420 <_vfiprintf_r+0x4c>
 800a5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5fe:	e711      	b.n	800a424 <_vfiprintf_r+0x50>
 800a600:	ab03      	add	r3, sp, #12
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	462a      	mov	r2, r5
 800a606:	4630      	mov	r0, r6
 800a608:	4b08      	ldr	r3, [pc, #32]	; (800a62c <_vfiprintf_r+0x258>)
 800a60a:	a904      	add	r1, sp, #16
 800a60c:	f000 f882 	bl	800a714 <_printf_i>
 800a610:	e7e4      	b.n	800a5dc <_vfiprintf_r+0x208>
 800a612:	bf00      	nop
 800a614:	0800b060 	.word	0x0800b060
 800a618:	0800b080 	.word	0x0800b080
 800a61c:	0800b040 	.word	0x0800b040
 800a620:	0800b0a0 	.word	0x0800b0a0
 800a624:	0800b0aa 	.word	0x0800b0aa
 800a628:	00000000 	.word	0x00000000
 800a62c:	0800a3af 	.word	0x0800a3af
 800a630:	0800b0a6 	.word	0x0800b0a6

0800a634 <_printf_common>:
 800a634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a638:	4616      	mov	r6, r2
 800a63a:	4699      	mov	r9, r3
 800a63c:	688a      	ldr	r2, [r1, #8]
 800a63e:	690b      	ldr	r3, [r1, #16]
 800a640:	4607      	mov	r7, r0
 800a642:	4293      	cmp	r3, r2
 800a644:	bfb8      	it	lt
 800a646:	4613      	movlt	r3, r2
 800a648:	6033      	str	r3, [r6, #0]
 800a64a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a64e:	460c      	mov	r4, r1
 800a650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a654:	b10a      	cbz	r2, 800a65a <_printf_common+0x26>
 800a656:	3301      	adds	r3, #1
 800a658:	6033      	str	r3, [r6, #0]
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	0699      	lsls	r1, r3, #26
 800a65e:	bf42      	ittt	mi
 800a660:	6833      	ldrmi	r3, [r6, #0]
 800a662:	3302      	addmi	r3, #2
 800a664:	6033      	strmi	r3, [r6, #0]
 800a666:	6825      	ldr	r5, [r4, #0]
 800a668:	f015 0506 	ands.w	r5, r5, #6
 800a66c:	d106      	bne.n	800a67c <_printf_common+0x48>
 800a66e:	f104 0a19 	add.w	sl, r4, #25
 800a672:	68e3      	ldr	r3, [r4, #12]
 800a674:	6832      	ldr	r2, [r6, #0]
 800a676:	1a9b      	subs	r3, r3, r2
 800a678:	42ab      	cmp	r3, r5
 800a67a:	dc28      	bgt.n	800a6ce <_printf_common+0x9a>
 800a67c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a680:	1e13      	subs	r3, r2, #0
 800a682:	6822      	ldr	r2, [r4, #0]
 800a684:	bf18      	it	ne
 800a686:	2301      	movne	r3, #1
 800a688:	0692      	lsls	r2, r2, #26
 800a68a:	d42d      	bmi.n	800a6e8 <_printf_common+0xb4>
 800a68c:	4649      	mov	r1, r9
 800a68e:	4638      	mov	r0, r7
 800a690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d020      	beq.n	800a6dc <_printf_common+0xa8>
 800a69a:	6823      	ldr	r3, [r4, #0]
 800a69c:	68e5      	ldr	r5, [r4, #12]
 800a69e:	f003 0306 	and.w	r3, r3, #6
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	bf18      	it	ne
 800a6a6:	2500      	movne	r5, #0
 800a6a8:	6832      	ldr	r2, [r6, #0]
 800a6aa:	f04f 0600 	mov.w	r6, #0
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	bf08      	it	eq
 800a6b2:	1aad      	subeq	r5, r5, r2
 800a6b4:	6922      	ldr	r2, [r4, #16]
 800a6b6:	bf08      	it	eq
 800a6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	bfc4      	itt	gt
 800a6c0:	1a9b      	subgt	r3, r3, r2
 800a6c2:	18ed      	addgt	r5, r5, r3
 800a6c4:	341a      	adds	r4, #26
 800a6c6:	42b5      	cmp	r5, r6
 800a6c8:	d11a      	bne.n	800a700 <_printf_common+0xcc>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e008      	b.n	800a6e0 <_printf_common+0xac>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	47c0      	blx	r8
 800a6d8:	3001      	adds	r0, #1
 800a6da:	d103      	bne.n	800a6e4 <_printf_common+0xb0>
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	e7c4      	b.n	800a672 <_printf_common+0x3e>
 800a6e8:	2030      	movs	r0, #48	; 0x30
 800a6ea:	18e1      	adds	r1, r4, r3
 800a6ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6f0:	1c5a      	adds	r2, r3, #1
 800a6f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6f6:	4422      	add	r2, r4
 800a6f8:	3302      	adds	r3, #2
 800a6fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6fe:	e7c5      	b.n	800a68c <_printf_common+0x58>
 800a700:	2301      	movs	r3, #1
 800a702:	4622      	mov	r2, r4
 800a704:	4649      	mov	r1, r9
 800a706:	4638      	mov	r0, r7
 800a708:	47c0      	blx	r8
 800a70a:	3001      	adds	r0, #1
 800a70c:	d0e6      	beq.n	800a6dc <_printf_common+0xa8>
 800a70e:	3601      	adds	r6, #1
 800a710:	e7d9      	b.n	800a6c6 <_printf_common+0x92>
	...

0800a714 <_printf_i>:
 800a714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a718:	460c      	mov	r4, r1
 800a71a:	7e27      	ldrb	r7, [r4, #24]
 800a71c:	4691      	mov	r9, r2
 800a71e:	2f78      	cmp	r7, #120	; 0x78
 800a720:	4680      	mov	r8, r0
 800a722:	469a      	mov	sl, r3
 800a724:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a72a:	d807      	bhi.n	800a73c <_printf_i+0x28>
 800a72c:	2f62      	cmp	r7, #98	; 0x62
 800a72e:	d80a      	bhi.n	800a746 <_printf_i+0x32>
 800a730:	2f00      	cmp	r7, #0
 800a732:	f000 80d9 	beq.w	800a8e8 <_printf_i+0x1d4>
 800a736:	2f58      	cmp	r7, #88	; 0x58
 800a738:	f000 80a4 	beq.w	800a884 <_printf_i+0x170>
 800a73c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a744:	e03a      	b.n	800a7bc <_printf_i+0xa8>
 800a746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a74a:	2b15      	cmp	r3, #21
 800a74c:	d8f6      	bhi.n	800a73c <_printf_i+0x28>
 800a74e:	a001      	add	r0, pc, #4	; (adr r0, 800a754 <_printf_i+0x40>)
 800a750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a754:	0800a7ad 	.word	0x0800a7ad
 800a758:	0800a7c1 	.word	0x0800a7c1
 800a75c:	0800a73d 	.word	0x0800a73d
 800a760:	0800a73d 	.word	0x0800a73d
 800a764:	0800a73d 	.word	0x0800a73d
 800a768:	0800a73d 	.word	0x0800a73d
 800a76c:	0800a7c1 	.word	0x0800a7c1
 800a770:	0800a73d 	.word	0x0800a73d
 800a774:	0800a73d 	.word	0x0800a73d
 800a778:	0800a73d 	.word	0x0800a73d
 800a77c:	0800a73d 	.word	0x0800a73d
 800a780:	0800a8cf 	.word	0x0800a8cf
 800a784:	0800a7f1 	.word	0x0800a7f1
 800a788:	0800a8b1 	.word	0x0800a8b1
 800a78c:	0800a73d 	.word	0x0800a73d
 800a790:	0800a73d 	.word	0x0800a73d
 800a794:	0800a8f1 	.word	0x0800a8f1
 800a798:	0800a73d 	.word	0x0800a73d
 800a79c:	0800a7f1 	.word	0x0800a7f1
 800a7a0:	0800a73d 	.word	0x0800a73d
 800a7a4:	0800a73d 	.word	0x0800a73d
 800a7a8:	0800a8b9 	.word	0x0800a8b9
 800a7ac:	680b      	ldr	r3, [r1, #0]
 800a7ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7b2:	1d1a      	adds	r2, r3, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	600a      	str	r2, [r1, #0]
 800a7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e0a4      	b.n	800a90a <_printf_i+0x1f6>
 800a7c0:	6825      	ldr	r5, [r4, #0]
 800a7c2:	6808      	ldr	r0, [r1, #0]
 800a7c4:	062e      	lsls	r6, r5, #24
 800a7c6:	f100 0304 	add.w	r3, r0, #4
 800a7ca:	d50a      	bpl.n	800a7e2 <_printf_i+0xce>
 800a7cc:	6805      	ldr	r5, [r0, #0]
 800a7ce:	600b      	str	r3, [r1, #0]
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	da03      	bge.n	800a7dc <_printf_i+0xc8>
 800a7d4:	232d      	movs	r3, #45	; 0x2d
 800a7d6:	426d      	negs	r5, r5
 800a7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7dc:	230a      	movs	r3, #10
 800a7de:	485e      	ldr	r0, [pc, #376]	; (800a958 <_printf_i+0x244>)
 800a7e0:	e019      	b.n	800a816 <_printf_i+0x102>
 800a7e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a7e6:	6805      	ldr	r5, [r0, #0]
 800a7e8:	600b      	str	r3, [r1, #0]
 800a7ea:	bf18      	it	ne
 800a7ec:	b22d      	sxthne	r5, r5
 800a7ee:	e7ef      	b.n	800a7d0 <_printf_i+0xbc>
 800a7f0:	680b      	ldr	r3, [r1, #0]
 800a7f2:	6825      	ldr	r5, [r4, #0]
 800a7f4:	1d18      	adds	r0, r3, #4
 800a7f6:	6008      	str	r0, [r1, #0]
 800a7f8:	0628      	lsls	r0, r5, #24
 800a7fa:	d501      	bpl.n	800a800 <_printf_i+0xec>
 800a7fc:	681d      	ldr	r5, [r3, #0]
 800a7fe:	e002      	b.n	800a806 <_printf_i+0xf2>
 800a800:	0669      	lsls	r1, r5, #25
 800a802:	d5fb      	bpl.n	800a7fc <_printf_i+0xe8>
 800a804:	881d      	ldrh	r5, [r3, #0]
 800a806:	2f6f      	cmp	r7, #111	; 0x6f
 800a808:	bf0c      	ite	eq
 800a80a:	2308      	moveq	r3, #8
 800a80c:	230a      	movne	r3, #10
 800a80e:	4852      	ldr	r0, [pc, #328]	; (800a958 <_printf_i+0x244>)
 800a810:	2100      	movs	r1, #0
 800a812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a816:	6866      	ldr	r6, [r4, #4]
 800a818:	2e00      	cmp	r6, #0
 800a81a:	bfa8      	it	ge
 800a81c:	6821      	ldrge	r1, [r4, #0]
 800a81e:	60a6      	str	r6, [r4, #8]
 800a820:	bfa4      	itt	ge
 800a822:	f021 0104 	bicge.w	r1, r1, #4
 800a826:	6021      	strge	r1, [r4, #0]
 800a828:	b90d      	cbnz	r5, 800a82e <_printf_i+0x11a>
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d04d      	beq.n	800a8ca <_printf_i+0x1b6>
 800a82e:	4616      	mov	r6, r2
 800a830:	fbb5 f1f3 	udiv	r1, r5, r3
 800a834:	fb03 5711 	mls	r7, r3, r1, r5
 800a838:	5dc7      	ldrb	r7, [r0, r7]
 800a83a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a83e:	462f      	mov	r7, r5
 800a840:	42bb      	cmp	r3, r7
 800a842:	460d      	mov	r5, r1
 800a844:	d9f4      	bls.n	800a830 <_printf_i+0x11c>
 800a846:	2b08      	cmp	r3, #8
 800a848:	d10b      	bne.n	800a862 <_printf_i+0x14e>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	07df      	lsls	r7, r3, #31
 800a84e:	d508      	bpl.n	800a862 <_printf_i+0x14e>
 800a850:	6923      	ldr	r3, [r4, #16]
 800a852:	6861      	ldr	r1, [r4, #4]
 800a854:	4299      	cmp	r1, r3
 800a856:	bfde      	ittt	le
 800a858:	2330      	movle	r3, #48	; 0x30
 800a85a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a85e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a862:	1b92      	subs	r2, r2, r6
 800a864:	6122      	str	r2, [r4, #16]
 800a866:	464b      	mov	r3, r9
 800a868:	4621      	mov	r1, r4
 800a86a:	4640      	mov	r0, r8
 800a86c:	f8cd a000 	str.w	sl, [sp]
 800a870:	aa03      	add	r2, sp, #12
 800a872:	f7ff fedf 	bl	800a634 <_printf_common>
 800a876:	3001      	adds	r0, #1
 800a878:	d14c      	bne.n	800a914 <_printf_i+0x200>
 800a87a:	f04f 30ff 	mov.w	r0, #4294967295
 800a87e:	b004      	add	sp, #16
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	4834      	ldr	r0, [pc, #208]	; (800a958 <_printf_i+0x244>)
 800a886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a88a:	680e      	ldr	r6, [r1, #0]
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a892:	061f      	lsls	r7, r3, #24
 800a894:	600e      	str	r6, [r1, #0]
 800a896:	d514      	bpl.n	800a8c2 <_printf_i+0x1ae>
 800a898:	07d9      	lsls	r1, r3, #31
 800a89a:	bf44      	itt	mi
 800a89c:	f043 0320 	orrmi.w	r3, r3, #32
 800a8a0:	6023      	strmi	r3, [r4, #0]
 800a8a2:	b91d      	cbnz	r5, 800a8ac <_printf_i+0x198>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	f023 0320 	bic.w	r3, r3, #32
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	e7af      	b.n	800a810 <_printf_i+0xfc>
 800a8b0:	6823      	ldr	r3, [r4, #0]
 800a8b2:	f043 0320 	orr.w	r3, r3, #32
 800a8b6:	6023      	str	r3, [r4, #0]
 800a8b8:	2378      	movs	r3, #120	; 0x78
 800a8ba:	4828      	ldr	r0, [pc, #160]	; (800a95c <_printf_i+0x248>)
 800a8bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8c0:	e7e3      	b.n	800a88a <_printf_i+0x176>
 800a8c2:	065e      	lsls	r6, r3, #25
 800a8c4:	bf48      	it	mi
 800a8c6:	b2ad      	uxthmi	r5, r5
 800a8c8:	e7e6      	b.n	800a898 <_printf_i+0x184>
 800a8ca:	4616      	mov	r6, r2
 800a8cc:	e7bb      	b.n	800a846 <_printf_i+0x132>
 800a8ce:	680b      	ldr	r3, [r1, #0]
 800a8d0:	6826      	ldr	r6, [r4, #0]
 800a8d2:	1d1d      	adds	r5, r3, #4
 800a8d4:	6960      	ldr	r0, [r4, #20]
 800a8d6:	600d      	str	r5, [r1, #0]
 800a8d8:	0635      	lsls	r5, r6, #24
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	d501      	bpl.n	800a8e2 <_printf_i+0x1ce>
 800a8de:	6018      	str	r0, [r3, #0]
 800a8e0:	e002      	b.n	800a8e8 <_printf_i+0x1d4>
 800a8e2:	0671      	lsls	r1, r6, #25
 800a8e4:	d5fb      	bpl.n	800a8de <_printf_i+0x1ca>
 800a8e6:	8018      	strh	r0, [r3, #0]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4616      	mov	r6, r2
 800a8ec:	6123      	str	r3, [r4, #16]
 800a8ee:	e7ba      	b.n	800a866 <_printf_i+0x152>
 800a8f0:	680b      	ldr	r3, [r1, #0]
 800a8f2:	1d1a      	adds	r2, r3, #4
 800a8f4:	600a      	str	r2, [r1, #0]
 800a8f6:	681e      	ldr	r6, [r3, #0]
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	6862      	ldr	r2, [r4, #4]
 800a8fe:	f000 fa9d 	bl	800ae3c <memchr>
 800a902:	b108      	cbz	r0, 800a908 <_printf_i+0x1f4>
 800a904:	1b80      	subs	r0, r0, r6
 800a906:	6060      	str	r0, [r4, #4]
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	6123      	str	r3, [r4, #16]
 800a90c:	2300      	movs	r3, #0
 800a90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a912:	e7a8      	b.n	800a866 <_printf_i+0x152>
 800a914:	4632      	mov	r2, r6
 800a916:	4649      	mov	r1, r9
 800a918:	4640      	mov	r0, r8
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	47d0      	blx	sl
 800a91e:	3001      	adds	r0, #1
 800a920:	d0ab      	beq.n	800a87a <_printf_i+0x166>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	079b      	lsls	r3, r3, #30
 800a926:	d413      	bmi.n	800a950 <_printf_i+0x23c>
 800a928:	68e0      	ldr	r0, [r4, #12]
 800a92a:	9b03      	ldr	r3, [sp, #12]
 800a92c:	4298      	cmp	r0, r3
 800a92e:	bfb8      	it	lt
 800a930:	4618      	movlt	r0, r3
 800a932:	e7a4      	b.n	800a87e <_printf_i+0x16a>
 800a934:	2301      	movs	r3, #1
 800a936:	4632      	mov	r2, r6
 800a938:	4649      	mov	r1, r9
 800a93a:	4640      	mov	r0, r8
 800a93c:	47d0      	blx	sl
 800a93e:	3001      	adds	r0, #1
 800a940:	d09b      	beq.n	800a87a <_printf_i+0x166>
 800a942:	3501      	adds	r5, #1
 800a944:	68e3      	ldr	r3, [r4, #12]
 800a946:	9903      	ldr	r1, [sp, #12]
 800a948:	1a5b      	subs	r3, r3, r1
 800a94a:	42ab      	cmp	r3, r5
 800a94c:	dcf2      	bgt.n	800a934 <_printf_i+0x220>
 800a94e:	e7eb      	b.n	800a928 <_printf_i+0x214>
 800a950:	2500      	movs	r5, #0
 800a952:	f104 0619 	add.w	r6, r4, #25
 800a956:	e7f5      	b.n	800a944 <_printf_i+0x230>
 800a958:	0800b0b1 	.word	0x0800b0b1
 800a95c:	0800b0c2 	.word	0x0800b0c2

0800a960 <_sbrk_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	2300      	movs	r3, #0
 800a964:	4d05      	ldr	r5, [pc, #20]	; (800a97c <_sbrk_r+0x1c>)
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f6 fc98 	bl	80012a0 <_sbrk>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_sbrk_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_sbrk_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20001964 	.word	0x20001964

0800a980 <__sread>:
 800a980:	b510      	push	{r4, lr}
 800a982:	460c      	mov	r4, r1
 800a984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a988:	f000 fabe 	bl	800af08 <_read_r>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	bfab      	itete	ge
 800a990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a992:	89a3      	ldrhlt	r3, [r4, #12]
 800a994:	181b      	addge	r3, r3, r0
 800a996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a99a:	bfac      	ite	ge
 800a99c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a99e:	81a3      	strhlt	r3, [r4, #12]
 800a9a0:	bd10      	pop	{r4, pc}

0800a9a2 <__swrite>:
 800a9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a6:	461f      	mov	r7, r3
 800a9a8:	898b      	ldrh	r3, [r1, #12]
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	05db      	lsls	r3, r3, #23
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	d505      	bpl.n	800a9c0 <__swrite+0x1e>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9bc:	f000 f9c8 	bl	800ad50 <_lseek_r>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	f000 b869 	b.w	800aaac <_write_r>

0800a9da <__sseek>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	460c      	mov	r4, r1
 800a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e2:	f000 f9b5 	bl	800ad50 <_lseek_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	89a3      	ldrh	r3, [r4, #12]
 800a9ea:	bf15      	itete	ne
 800a9ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9f6:	81a3      	strheq	r3, [r4, #12]
 800a9f8:	bf18      	it	ne
 800a9fa:	81a3      	strhne	r3, [r4, #12]
 800a9fc:	bd10      	pop	{r4, pc}

0800a9fe <__sclose>:
 800a9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa02:	f000 b8d3 	b.w	800abac <_close_r>
	...

0800aa08 <__swbuf_r>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	460e      	mov	r6, r1
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	4605      	mov	r5, r0
 800aa10:	b118      	cbz	r0, 800aa1a <__swbuf_r+0x12>
 800aa12:	6983      	ldr	r3, [r0, #24]
 800aa14:	b90b      	cbnz	r3, 800aa1a <__swbuf_r+0x12>
 800aa16:	f7ff fbbb 	bl	800a190 <__sinit>
 800aa1a:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <__swbuf_r+0x98>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	d12b      	bne.n	800aa78 <__swbuf_r+0x70>
 800aa20:	686c      	ldr	r4, [r5, #4]
 800aa22:	69a3      	ldr	r3, [r4, #24]
 800aa24:	60a3      	str	r3, [r4, #8]
 800aa26:	89a3      	ldrh	r3, [r4, #12]
 800aa28:	071a      	lsls	r2, r3, #28
 800aa2a:	d52f      	bpl.n	800aa8c <__swbuf_r+0x84>
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	b36b      	cbz	r3, 800aa8c <__swbuf_r+0x84>
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	6820      	ldr	r0, [r4, #0]
 800aa34:	b2f6      	uxtb	r6, r6
 800aa36:	1ac0      	subs	r0, r0, r3
 800aa38:	6963      	ldr	r3, [r4, #20]
 800aa3a:	4637      	mov	r7, r6
 800aa3c:	4283      	cmp	r3, r0
 800aa3e:	dc04      	bgt.n	800aa4a <__swbuf_r+0x42>
 800aa40:	4621      	mov	r1, r4
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 f948 	bl	800acd8 <_fflush_r>
 800aa48:	bb30      	cbnz	r0, 800aa98 <__swbuf_r+0x90>
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	60a3      	str	r3, [r4, #8]
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	1c5a      	adds	r2, r3, #1
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	701e      	strb	r6, [r3, #0]
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	4283      	cmp	r3, r0
 800aa5e:	d004      	beq.n	800aa6a <__swbuf_r+0x62>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	07db      	lsls	r3, r3, #31
 800aa64:	d506      	bpl.n	800aa74 <__swbuf_r+0x6c>
 800aa66:	2e0a      	cmp	r6, #10
 800aa68:	d104      	bne.n	800aa74 <__swbuf_r+0x6c>
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f000 f933 	bl	800acd8 <_fflush_r>
 800aa72:	b988      	cbnz	r0, 800aa98 <__swbuf_r+0x90>
 800aa74:	4638      	mov	r0, r7
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <__swbuf_r+0x9c>)
 800aa7a:	429c      	cmp	r4, r3
 800aa7c:	d101      	bne.n	800aa82 <__swbuf_r+0x7a>
 800aa7e:	68ac      	ldr	r4, [r5, #8]
 800aa80:	e7cf      	b.n	800aa22 <__swbuf_r+0x1a>
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <__swbuf_r+0xa0>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	bf08      	it	eq
 800aa88:	68ec      	ldreq	r4, [r5, #12]
 800aa8a:	e7ca      	b.n	800aa22 <__swbuf_r+0x1a>
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f81e 	bl	800aad0 <__swsetup_r>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0cb      	beq.n	800aa30 <__swbuf_r+0x28>
 800aa98:	f04f 37ff 	mov.w	r7, #4294967295
 800aa9c:	e7ea      	b.n	800aa74 <__swbuf_r+0x6c>
 800aa9e:	bf00      	nop
 800aaa0:	0800b060 	.word	0x0800b060
 800aaa4:	0800b080 	.word	0x0800b080
 800aaa8:	0800b040 	.word	0x0800b040

0800aaac <_write_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	2200      	movs	r2, #0
 800aab6:	4d05      	ldr	r5, [pc, #20]	; (800aacc <_write_r+0x20>)
 800aab8:	602a      	str	r2, [r5, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7f6 fba3 	bl	8001206 <_write>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_write_r+0x1e>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_write_r+0x1e>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20001964 	.word	0x20001964

0800aad0 <__swsetup_r>:
 800aad0:	4b32      	ldr	r3, [pc, #200]	; (800ab9c <__swsetup_r+0xcc>)
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	681d      	ldr	r5, [r3, #0]
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	b125      	cbz	r5, 800aae6 <__swsetup_r+0x16>
 800aadc:	69ab      	ldr	r3, [r5, #24]
 800aade:	b913      	cbnz	r3, 800aae6 <__swsetup_r+0x16>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f7ff fb55 	bl	800a190 <__sinit>
 800aae6:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <__swsetup_r+0xd0>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d10f      	bne.n	800ab0c <__swsetup_r+0x3c>
 800aaec:	686c      	ldr	r4, [r5, #4]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d42c      	bmi.n	800ab52 <__swsetup_r+0x82>
 800aaf8:	06dd      	lsls	r5, r3, #27
 800aafa:	d411      	bmi.n	800ab20 <__swsetup_r+0x50>
 800aafc:	2309      	movs	r3, #9
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	e03e      	b.n	800ab8a <__swsetup_r+0xba>
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <__swsetup_r+0xd4>)
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	d101      	bne.n	800ab16 <__swsetup_r+0x46>
 800ab12:	68ac      	ldr	r4, [r5, #8]
 800ab14:	e7eb      	b.n	800aaee <__swsetup_r+0x1e>
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__swsetup_r+0xd8>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	bf08      	it	eq
 800ab1c:	68ec      	ldreq	r4, [r5, #12]
 800ab1e:	e7e6      	b.n	800aaee <__swsetup_r+0x1e>
 800ab20:	0758      	lsls	r0, r3, #29
 800ab22:	d512      	bpl.n	800ab4a <__swsetup_r+0x7a>
 800ab24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab26:	b141      	cbz	r1, 800ab3a <__swsetup_r+0x6a>
 800ab28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <__swsetup_r+0x66>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f000 f99d 	bl	800ae70 <_free_r>
 800ab36:	2300      	movs	r3, #0
 800ab38:	6363      	str	r3, [r4, #52]	; 0x34
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	2300      	movs	r3, #0
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0308 	orr.w	r3, r3, #8
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	b94b      	cbnz	r3, 800ab6a <__swsetup_r+0x9a>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab60:	d003      	beq.n	800ab6a <__swsetup_r+0x9a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 f929 	bl	800adbc <__smakebuf_r>
 800ab6a:	89a0      	ldrh	r0, [r4, #12]
 800ab6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab70:	f010 0301 	ands.w	r3, r0, #1
 800ab74:	d00a      	beq.n	800ab8c <__swsetup_r+0xbc>
 800ab76:	2300      	movs	r3, #0
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6963      	ldr	r3, [r4, #20]
 800ab7c:	425b      	negs	r3, r3
 800ab7e:	61a3      	str	r3, [r4, #24]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b943      	cbnz	r3, 800ab96 <__swsetup_r+0xc6>
 800ab84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab88:	d1ba      	bne.n	800ab00 <__swsetup_r+0x30>
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	0781      	lsls	r1, r0, #30
 800ab8e:	bf58      	it	pl
 800ab90:	6963      	ldrpl	r3, [r4, #20]
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	e7f4      	b.n	800ab80 <__swsetup_r+0xb0>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7f7      	b.n	800ab8a <__swsetup_r+0xba>
 800ab9a:	bf00      	nop
 800ab9c:	200001c0 	.word	0x200001c0
 800aba0:	0800b060 	.word	0x0800b060
 800aba4:	0800b080 	.word	0x0800b080
 800aba8:	0800b040 	.word	0x0800b040

0800abac <_close_r>:
 800abac:	b538      	push	{r3, r4, r5, lr}
 800abae:	2300      	movs	r3, #0
 800abb0:	4d05      	ldr	r5, [pc, #20]	; (800abc8 <_close_r+0x1c>)
 800abb2:	4604      	mov	r4, r0
 800abb4:	4608      	mov	r0, r1
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	f7f6 fb41 	bl	800123e <_close>
 800abbc:	1c43      	adds	r3, r0, #1
 800abbe:	d102      	bne.n	800abc6 <_close_r+0x1a>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	b103      	cbz	r3, 800abc6 <_close_r+0x1a>
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	bd38      	pop	{r3, r4, r5, pc}
 800abc8:	20001964 	.word	0x20001964

0800abcc <__sflush_r>:
 800abcc:	898a      	ldrh	r2, [r1, #12]
 800abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd2:	4605      	mov	r5, r0
 800abd4:	0710      	lsls	r0, r2, #28
 800abd6:	460c      	mov	r4, r1
 800abd8:	d458      	bmi.n	800ac8c <__sflush_r+0xc0>
 800abda:	684b      	ldr	r3, [r1, #4]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dc05      	bgt.n	800abec <__sflush_r+0x20>
 800abe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	dc02      	bgt.n	800abec <__sflush_r+0x20>
 800abe6:	2000      	movs	r0, #0
 800abe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abee:	2e00      	cmp	r6, #0
 800abf0:	d0f9      	beq.n	800abe6 <__sflush_r+0x1a>
 800abf2:	2300      	movs	r3, #0
 800abf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abf8:	682f      	ldr	r7, [r5, #0]
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	d032      	beq.n	800ac64 <__sflush_r+0x98>
 800abfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	075a      	lsls	r2, r3, #29
 800ac04:	d505      	bpl.n	800ac12 <__sflush_r+0x46>
 800ac06:	6863      	ldr	r3, [r4, #4]
 800ac08:	1ac0      	subs	r0, r0, r3
 800ac0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac0c:	b10b      	cbz	r3, 800ac12 <__sflush_r+0x46>
 800ac0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac10:	1ac0      	subs	r0, r0, r3
 800ac12:	2300      	movs	r3, #0
 800ac14:	4602      	mov	r2, r0
 800ac16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac18:	4628      	mov	r0, r5
 800ac1a:	6a21      	ldr	r1, [r4, #32]
 800ac1c:	47b0      	blx	r6
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	89a3      	ldrh	r3, [r4, #12]
 800ac22:	d106      	bne.n	800ac32 <__sflush_r+0x66>
 800ac24:	6829      	ldr	r1, [r5, #0]
 800ac26:	291d      	cmp	r1, #29
 800ac28:	d82c      	bhi.n	800ac84 <__sflush_r+0xb8>
 800ac2a:	4a2a      	ldr	r2, [pc, #168]	; (800acd4 <__sflush_r+0x108>)
 800ac2c:	40ca      	lsrs	r2, r1
 800ac2e:	07d6      	lsls	r6, r2, #31
 800ac30:	d528      	bpl.n	800ac84 <__sflush_r+0xb8>
 800ac32:	2200      	movs	r2, #0
 800ac34:	6062      	str	r2, [r4, #4]
 800ac36:	6922      	ldr	r2, [r4, #16]
 800ac38:	04d9      	lsls	r1, r3, #19
 800ac3a:	6022      	str	r2, [r4, #0]
 800ac3c:	d504      	bpl.n	800ac48 <__sflush_r+0x7c>
 800ac3e:	1c42      	adds	r2, r0, #1
 800ac40:	d101      	bne.n	800ac46 <__sflush_r+0x7a>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b903      	cbnz	r3, 800ac48 <__sflush_r+0x7c>
 800ac46:	6560      	str	r0, [r4, #84]	; 0x54
 800ac48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac4a:	602f      	str	r7, [r5, #0]
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	d0ca      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac54:	4299      	cmp	r1, r3
 800ac56:	d002      	beq.n	800ac5e <__sflush_r+0x92>
 800ac58:	4628      	mov	r0, r5
 800ac5a:	f000 f909 	bl	800ae70 <_free_r>
 800ac5e:	2000      	movs	r0, #0
 800ac60:	6360      	str	r0, [r4, #52]	; 0x34
 800ac62:	e7c1      	b.n	800abe8 <__sflush_r+0x1c>
 800ac64:	6a21      	ldr	r1, [r4, #32]
 800ac66:	2301      	movs	r3, #1
 800ac68:	4628      	mov	r0, r5
 800ac6a:	47b0      	blx	r6
 800ac6c:	1c41      	adds	r1, r0, #1
 800ac6e:	d1c7      	bne.n	800ac00 <__sflush_r+0x34>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0c4      	beq.n	800ac00 <__sflush_r+0x34>
 800ac76:	2b1d      	cmp	r3, #29
 800ac78:	d001      	beq.n	800ac7e <__sflush_r+0xb2>
 800ac7a:	2b16      	cmp	r3, #22
 800ac7c:	d101      	bne.n	800ac82 <__sflush_r+0xb6>
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	e7b1      	b.n	800abe6 <__sflush_r+0x1a>
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac88:	81a3      	strh	r3, [r4, #12]
 800ac8a:	e7ad      	b.n	800abe8 <__sflush_r+0x1c>
 800ac8c:	690f      	ldr	r7, [r1, #16]
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	d0a9      	beq.n	800abe6 <__sflush_r+0x1a>
 800ac92:	0793      	lsls	r3, r2, #30
 800ac94:	bf18      	it	ne
 800ac96:	2300      	movne	r3, #0
 800ac98:	680e      	ldr	r6, [r1, #0]
 800ac9a:	bf08      	it	eq
 800ac9c:	694b      	ldreq	r3, [r1, #20]
 800ac9e:	eba6 0807 	sub.w	r8, r6, r7
 800aca2:	600f      	str	r7, [r1, #0]
 800aca4:	608b      	str	r3, [r1, #8]
 800aca6:	f1b8 0f00 	cmp.w	r8, #0
 800acaa:	dd9c      	ble.n	800abe6 <__sflush_r+0x1a>
 800acac:	4643      	mov	r3, r8
 800acae:	463a      	mov	r2, r7
 800acb0:	4628      	mov	r0, r5
 800acb2:	6a21      	ldr	r1, [r4, #32]
 800acb4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acb6:	47b0      	blx	r6
 800acb8:	2800      	cmp	r0, #0
 800acba:	dc06      	bgt.n	800acca <__sflush_r+0xfe>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f04f 30ff 	mov.w	r0, #4294967295
 800acc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	e78e      	b.n	800abe8 <__sflush_r+0x1c>
 800acca:	4407      	add	r7, r0
 800accc:	eba8 0800 	sub.w	r8, r8, r0
 800acd0:	e7e9      	b.n	800aca6 <__sflush_r+0xda>
 800acd2:	bf00      	nop
 800acd4:	20400001 	.word	0x20400001

0800acd8 <_fflush_r>:
 800acd8:	b538      	push	{r3, r4, r5, lr}
 800acda:	690b      	ldr	r3, [r1, #16]
 800acdc:	4605      	mov	r5, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b913      	cbnz	r3, 800ace8 <_fflush_r+0x10>
 800ace2:	2500      	movs	r5, #0
 800ace4:	4628      	mov	r0, r5
 800ace6:	bd38      	pop	{r3, r4, r5, pc}
 800ace8:	b118      	cbz	r0, 800acf2 <_fflush_r+0x1a>
 800acea:	6983      	ldr	r3, [r0, #24]
 800acec:	b90b      	cbnz	r3, 800acf2 <_fflush_r+0x1a>
 800acee:	f7ff fa4f 	bl	800a190 <__sinit>
 800acf2:	4b14      	ldr	r3, [pc, #80]	; (800ad44 <_fflush_r+0x6c>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	d11b      	bne.n	800ad30 <_fflush_r+0x58>
 800acf8:	686c      	ldr	r4, [r5, #4]
 800acfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0ef      	beq.n	800ace2 <_fflush_r+0xa>
 800ad02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad04:	07d0      	lsls	r0, r2, #31
 800ad06:	d404      	bmi.n	800ad12 <_fflush_r+0x3a>
 800ad08:	0599      	lsls	r1, r3, #22
 800ad0a:	d402      	bmi.n	800ad12 <_fflush_r+0x3a>
 800ad0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad0e:	f7ff fadd 	bl	800a2cc <__retarget_lock_acquire_recursive>
 800ad12:	4628      	mov	r0, r5
 800ad14:	4621      	mov	r1, r4
 800ad16:	f7ff ff59 	bl	800abcc <__sflush_r>
 800ad1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	07da      	lsls	r2, r3, #31
 800ad20:	d4e0      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	059b      	lsls	r3, r3, #22
 800ad26:	d4dd      	bmi.n	800ace4 <_fflush_r+0xc>
 800ad28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2a:	f7ff fad0 	bl	800a2ce <__retarget_lock_release_recursive>
 800ad2e:	e7d9      	b.n	800ace4 <_fflush_r+0xc>
 800ad30:	4b05      	ldr	r3, [pc, #20]	; (800ad48 <_fflush_r+0x70>)
 800ad32:	429c      	cmp	r4, r3
 800ad34:	d101      	bne.n	800ad3a <_fflush_r+0x62>
 800ad36:	68ac      	ldr	r4, [r5, #8]
 800ad38:	e7df      	b.n	800acfa <_fflush_r+0x22>
 800ad3a:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <_fflush_r+0x74>)
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	bf08      	it	eq
 800ad40:	68ec      	ldreq	r4, [r5, #12]
 800ad42:	e7da      	b.n	800acfa <_fflush_r+0x22>
 800ad44:	0800b060 	.word	0x0800b060
 800ad48:	0800b080 	.word	0x0800b080
 800ad4c:	0800b040 	.word	0x0800b040

0800ad50 <_lseek_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4d05      	ldr	r5, [pc, #20]	; (800ad70 <_lseek_r+0x20>)
 800ad5c:	602a      	str	r2, [r5, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f7f6 fa91 	bl	8001286 <_lseek>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_lseek_r+0x1e>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_lseek_r+0x1e>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	20001964 	.word	0x20001964

0800ad74 <__swhatbuf_r>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	460e      	mov	r6, r1
 800ad78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	461d      	mov	r5, r3
 800ad82:	b096      	sub	sp, #88	; 0x58
 800ad84:	da07      	bge.n	800ad96 <__swhatbuf_r+0x22>
 800ad86:	2300      	movs	r3, #0
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	89b3      	ldrh	r3, [r6, #12]
 800ad8c:	061a      	lsls	r2, r3, #24
 800ad8e:	d410      	bmi.n	800adb2 <__swhatbuf_r+0x3e>
 800ad90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad94:	e00e      	b.n	800adb4 <__swhatbuf_r+0x40>
 800ad96:	466a      	mov	r2, sp
 800ad98:	f000 f8c8 	bl	800af2c <_fstat_r>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	dbf2      	blt.n	800ad86 <__swhatbuf_r+0x12>
 800ada0:	9a01      	ldr	r2, [sp, #4]
 800ada2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ada6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adaa:	425a      	negs	r2, r3
 800adac:	415a      	adcs	r2, r3
 800adae:	602a      	str	r2, [r5, #0]
 800adb0:	e7ee      	b.n	800ad90 <__swhatbuf_r+0x1c>
 800adb2:	2340      	movs	r3, #64	; 0x40
 800adb4:	2000      	movs	r0, #0
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	b016      	add	sp, #88	; 0x58
 800adba:	bd70      	pop	{r4, r5, r6, pc}

0800adbc <__smakebuf_r>:
 800adbc:	898b      	ldrh	r3, [r1, #12]
 800adbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adc0:	079d      	lsls	r5, r3, #30
 800adc2:	4606      	mov	r6, r0
 800adc4:	460c      	mov	r4, r1
 800adc6:	d507      	bpl.n	800add8 <__smakebuf_r+0x1c>
 800adc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	6123      	str	r3, [r4, #16]
 800add0:	2301      	movs	r3, #1
 800add2:	6163      	str	r3, [r4, #20]
 800add4:	b002      	add	sp, #8
 800add6:	bd70      	pop	{r4, r5, r6, pc}
 800add8:	466a      	mov	r2, sp
 800adda:	ab01      	add	r3, sp, #4
 800addc:	f7ff ffca 	bl	800ad74 <__swhatbuf_r>
 800ade0:	9900      	ldr	r1, [sp, #0]
 800ade2:	4605      	mov	r5, r0
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7ff fa73 	bl	800a2d0 <_malloc_r>
 800adea:	b948      	cbnz	r0, 800ae00 <__smakebuf_r+0x44>
 800adec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adf0:	059a      	lsls	r2, r3, #22
 800adf2:	d4ef      	bmi.n	800add4 <__smakebuf_r+0x18>
 800adf4:	f023 0303 	bic.w	r3, r3, #3
 800adf8:	f043 0302 	orr.w	r3, r3, #2
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	e7e3      	b.n	800adc8 <__smakebuf_r+0xc>
 800ae00:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <__smakebuf_r+0x7c>)
 800ae02:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae04:	89a3      	ldrh	r3, [r4, #12]
 800ae06:	6020      	str	r0, [r4, #0]
 800ae08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	6120      	str	r0, [r4, #16]
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	b15b      	cbz	r3, 800ae30 <__smakebuf_r+0x74>
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae1e:	f000 f897 	bl	800af50 <_isatty_r>
 800ae22:	b128      	cbz	r0, 800ae30 <__smakebuf_r+0x74>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f023 0303 	bic.w	r3, r3, #3
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	89a0      	ldrh	r0, [r4, #12]
 800ae32:	4305      	orrs	r5, r0
 800ae34:	81a5      	strh	r5, [r4, #12]
 800ae36:	e7cd      	b.n	800add4 <__smakebuf_r+0x18>
 800ae38:	0800a129 	.word	0x0800a129

0800ae3c <memchr>:
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	b2c9      	uxtb	r1, r1
 800ae42:	4402      	add	r2, r0
 800ae44:	4293      	cmp	r3, r2
 800ae46:	4618      	mov	r0, r3
 800ae48:	d101      	bne.n	800ae4e <memchr+0x12>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e003      	b.n	800ae56 <memchr+0x1a>
 800ae4e:	7804      	ldrb	r4, [r0, #0]
 800ae50:	3301      	adds	r3, #1
 800ae52:	428c      	cmp	r4, r1
 800ae54:	d1f6      	bne.n	800ae44 <memchr+0x8>
 800ae56:	bd10      	pop	{r4, pc}

0800ae58 <__malloc_lock>:
 800ae58:	4801      	ldr	r0, [pc, #4]	; (800ae60 <__malloc_lock+0x8>)
 800ae5a:	f7ff ba37 	b.w	800a2cc <__retarget_lock_acquire_recursive>
 800ae5e:	bf00      	nop
 800ae60:	2000195c 	.word	0x2000195c

0800ae64 <__malloc_unlock>:
 800ae64:	4801      	ldr	r0, [pc, #4]	; (800ae6c <__malloc_unlock+0x8>)
 800ae66:	f7ff ba32 	b.w	800a2ce <__retarget_lock_release_recursive>
 800ae6a:	bf00      	nop
 800ae6c:	2000195c 	.word	0x2000195c

0800ae70 <_free_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4605      	mov	r5, r0
 800ae74:	2900      	cmp	r1, #0
 800ae76:	d043      	beq.n	800af00 <_free_r+0x90>
 800ae78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7c:	1f0c      	subs	r4, r1, #4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	18e4      	addlt	r4, r4, r3
 800ae84:	f7ff ffe8 	bl	800ae58 <__malloc_lock>
 800ae88:	4a1e      	ldr	r2, [pc, #120]	; (800af04 <_free_r+0x94>)
 800ae8a:	6813      	ldr	r3, [r2, #0]
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	b933      	cbnz	r3, 800ae9e <_free_r+0x2e>
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	6014      	str	r4, [r2, #0]
 800ae94:	4628      	mov	r0, r5
 800ae96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae9a:	f7ff bfe3 	b.w	800ae64 <__malloc_unlock>
 800ae9e:	42a3      	cmp	r3, r4
 800aea0:	d90a      	bls.n	800aeb8 <_free_r+0x48>
 800aea2:	6821      	ldr	r1, [r4, #0]
 800aea4:	1862      	adds	r2, r4, r1
 800aea6:	4293      	cmp	r3, r2
 800aea8:	bf01      	itttt	eq
 800aeaa:	681a      	ldreq	r2, [r3, #0]
 800aeac:	685b      	ldreq	r3, [r3, #4]
 800aeae:	1852      	addeq	r2, r2, r1
 800aeb0:	6022      	streq	r2, [r4, #0]
 800aeb2:	6063      	str	r3, [r4, #4]
 800aeb4:	6004      	str	r4, [r0, #0]
 800aeb6:	e7ed      	b.n	800ae94 <_free_r+0x24>
 800aeb8:	461a      	mov	r2, r3
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	b10b      	cbz	r3, 800aec2 <_free_r+0x52>
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	d9fa      	bls.n	800aeb8 <_free_r+0x48>
 800aec2:	6811      	ldr	r1, [r2, #0]
 800aec4:	1850      	adds	r0, r2, r1
 800aec6:	42a0      	cmp	r0, r4
 800aec8:	d10b      	bne.n	800aee2 <_free_r+0x72>
 800aeca:	6820      	ldr	r0, [r4, #0]
 800aecc:	4401      	add	r1, r0
 800aece:	1850      	adds	r0, r2, r1
 800aed0:	4283      	cmp	r3, r0
 800aed2:	6011      	str	r1, [r2, #0]
 800aed4:	d1de      	bne.n	800ae94 <_free_r+0x24>
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4401      	add	r1, r0
 800aedc:	6011      	str	r1, [r2, #0]
 800aede:	6053      	str	r3, [r2, #4]
 800aee0:	e7d8      	b.n	800ae94 <_free_r+0x24>
 800aee2:	d902      	bls.n	800aeea <_free_r+0x7a>
 800aee4:	230c      	movs	r3, #12
 800aee6:	602b      	str	r3, [r5, #0]
 800aee8:	e7d4      	b.n	800ae94 <_free_r+0x24>
 800aeea:	6820      	ldr	r0, [r4, #0]
 800aeec:	1821      	adds	r1, r4, r0
 800aeee:	428b      	cmp	r3, r1
 800aef0:	bf01      	itttt	eq
 800aef2:	6819      	ldreq	r1, [r3, #0]
 800aef4:	685b      	ldreq	r3, [r3, #4]
 800aef6:	1809      	addeq	r1, r1, r0
 800aef8:	6021      	streq	r1, [r4, #0]
 800aefa:	6063      	str	r3, [r4, #4]
 800aefc:	6054      	str	r4, [r2, #4]
 800aefe:	e7c9      	b.n	800ae94 <_free_r+0x24>
 800af00:	bd38      	pop	{r3, r4, r5, pc}
 800af02:	bf00      	nop
 800af04:	2000048c 	.word	0x2000048c

0800af08 <_read_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4604      	mov	r4, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	4611      	mov	r1, r2
 800af10:	2200      	movs	r2, #0
 800af12:	4d05      	ldr	r5, [pc, #20]	; (800af28 <_read_r+0x20>)
 800af14:	602a      	str	r2, [r5, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	f7f6 f958 	bl	80011cc <_read>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_read_r+0x1e>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_read_r+0x1e>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20001964 	.word	0x20001964

0800af2c <_fstat_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	2300      	movs	r3, #0
 800af30:	4d06      	ldr	r5, [pc, #24]	; (800af4c <_fstat_r+0x20>)
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	4611      	mov	r1, r2
 800af38:	602b      	str	r3, [r5, #0]
 800af3a:	f7f6 f98b 	bl	8001254 <_fstat>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	d102      	bne.n	800af48 <_fstat_r+0x1c>
 800af42:	682b      	ldr	r3, [r5, #0]
 800af44:	b103      	cbz	r3, 800af48 <_fstat_r+0x1c>
 800af46:	6023      	str	r3, [r4, #0]
 800af48:	bd38      	pop	{r3, r4, r5, pc}
 800af4a:	bf00      	nop
 800af4c:	20001964 	.word	0x20001964

0800af50 <_isatty_r>:
 800af50:	b538      	push	{r3, r4, r5, lr}
 800af52:	2300      	movs	r3, #0
 800af54:	4d05      	ldr	r5, [pc, #20]	; (800af6c <_isatty_r+0x1c>)
 800af56:	4604      	mov	r4, r0
 800af58:	4608      	mov	r0, r1
 800af5a:	602b      	str	r3, [r5, #0]
 800af5c:	f7f6 f989 	bl	8001272 <_isatty>
 800af60:	1c43      	adds	r3, r0, #1
 800af62:	d102      	bne.n	800af6a <_isatty_r+0x1a>
 800af64:	682b      	ldr	r3, [r5, #0]
 800af66:	b103      	cbz	r3, 800af6a <_isatty_r+0x1a>
 800af68:	6023      	str	r3, [r4, #0]
 800af6a:	bd38      	pop	{r3, r4, r5, pc}
 800af6c:	20001964 	.word	0x20001964

0800af70 <_init>:
 800af70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af72:	bf00      	nop
 800af74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af76:	bc08      	pop	{r3}
 800af78:	469e      	mov	lr, r3
 800af7a:	4770      	bx	lr

0800af7c <_fini>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr
